/*!
*  filename: bold.reports.widgets.js
*  version : 3.2.31
*  Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget(
    {
        "ejNumericTextbox": ["ej.NumericTextbox", "e-numerictextbox"],
        "ejPercentageTextbox": ["ej.PercentageTextbox", "e-percentagetextbox"],
        "ejCurrencyTextbox": ["ej.CurrencyTextbox", "e-currencytextbox"]
    },
    {
        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true,
            requireParser:true
        },

        defaults: {

            width: "",

            height: "",

            value: null,

            name: null,

            htmlAttributes: {},

            minValue: -(Number.MAX_VALUE),

            maxValue: Number.MAX_VALUE,

            incrementStep: 1,

            decimalPlaces: 0,

            validateOnType: false,

            cssClass: "",

            enablePersistence: false,

            showSpinButton: true,

            locale: "en-US",

            enableStrictMode: false,

            showRoundedCorner: false,

            readOnly: false,

            enabled: true,

            enableRTL: false,

            watermarkText: "Enter value",

            validationRules: null,

            validationMessage: null,

            groupSeparator: null,

            groupSize: null,

            positivePattern: null,

            currencySymbol:null,

            negativePattern: null,

            change: null,

            focusIn: null,

            focusOut: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            minValue: "number",
            maxValue: "number",
            incrementStep: "number",
            decimalPlaces: "number",
            showSpinButton: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            locale: "string",
            watermarkText: "string",
            cssClass: "string",
            readOnly: "boolean",
            enabled: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
            validateOnType: "boolean",
            groupSeparator: "string"
        },
        observables: ["value"],

        _setModel: function (jsondata) {
            var validate = false;
            for (var key in jsondata) {
                switch (key) {
                    case "value":
                        if (ej.isNullOrUndefined(jsondata["minValue"]) && ej.isNullOrUndefined(jsondata["maxValue"])) {
                            this._setValue(jsondata[key], true);
                            jsondata[key] = this.model.value;
                        }
                        else {
                            this.model.value = this._checkNumValue(jsondata[key]);
                            this._localizedFormat();
                            this._raiseChangeEvent(true);
                            validate = true;
                        }
                        break;
                    case "enableRTL": this._enableRTL(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = jsondata[key];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "minValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.minValue = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        this._updateValueAttributes(this.model.minValue, this.model.maxValue, this.model.value);
                        validate = true;
                        break;
                    case "maxValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.maxValue = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        this._updateValueAttributes(this.model.minValue, this.model.maxValue, this.model.value);
                        validate = true;
                        break;
                    case "incrementStep":
                        if (isNaN(jsondata[key])) return;
                        this.model.incrementStep = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        break;
                    case "enableStrictMode": this.model.enableStrictMode = jsondata[key]; validate = true; break;
                    case "showSpinButton": this._showSpin(jsondata[key]); break;
                    case "showRoundedCorner": this._roundedCorner(jsondata[key]); break;
                    case "locale":                        
                        this.model.decimalPlaces = ((ej.isNullOrUndefined(this._options.decimalPlaces)) && (this.model.decimalPlaces === this.culture.numberFormat.decimals))
                           ? -1 : (this._options.decimalPlaces === -1) ? -1 : this.model.decimalPlaces;
                        this._setLocalize(jsondata[key]);
                        this._options.decimalPlaces = this.model.decimalPlaces;
						jsondata[key] = this.model.locale;
						break;
                    case "decimalPlaces":
                        this._setDecimal(jsondata[key]);
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["decimalPlaces"] = jsondata[key];
                        break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "readOnly": this._setReadOnly(jsondata[key]); break;
                    case "enabled": if (jsondata[key]) this.enable(); else this.disable(); break;
                    case "watermarkText":
                        if(!ej.isNullOrUndefined(this._options)) this._options = [];
                        this._options["watermarkText"] = this.model.watermarkText = jsondata[key];
                        this._localizedLabels.watermarkText = this.model.watermarkText;						
						this._changeWatermark(jsondata[key]);
						break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "groupSeparator":
                        this._checkSeparator(jsondata[key]);
                        jsondata[key] = this.model.groupSeparator;
                        break;
                    case "positivePattern":
                    case "negativePattern":
                    case "groupSize":
                    case "currencySymbol":
                        this.model[key] = jsondata[key];
                        this._options[key] = jsondata[key];
                        this._initCustomValue();
                        jsondata[key] = this.model[key];
                        this._setValue(this.model.value, true);
                        break;                    
                }
            }
            if (validate) {
                this._validateMinMaxValue(true, true);
                jsondata["value"] = this.model.value;
                jsondata["maxValue"] = this.model.maxValue;
                jsondata["minValue"] = this.model.minValue;
                if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
                this._updateValueAttributes(this.model.minValue, this.model.maxValue, this.model.value);
            }
            this._checkSeparator(this.model.groupSeparator);
            this.element.val(this._removeSeparator(this.model.value));
            this._updateSeparator();
            this._checkErrorClass();
        },


        _destroy: function () {
            if (this.wrapper) {
                this.element.insertBefore(this.wrapper);
                this.wrapper.remove();
            }
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.element.val("").removeClass('e-input e-disable e-no-spin').empty();
            this.element.removeAttr('disabled aria-disabled');
			this.wrapper.removeAttr('aria-valuemin aria-valuemax aria-valuenow aria-live');
            if (!(this._cloneElement).attr('role')) this.element.removeAttr('role');
            this.element.css("display", "block");
        },



        _init: function (options) {
            this._cloneElement = this.element.clone();
            this._options = ej.isNullOrUndefined(options) ? {} :options;
            if (this.element.is("input") && (this.element.is("input[type=text]") || this.element.is("input[type=number]") || !this.element.attr('type'))) {
                if (this.model.decimalPlaces > 0) {
                    if (this.element.is("input[type=number]"))
                        this.element[0].type = "tel";
                    else this.element[0].type = "text";
                }
                if (this.element.is("input[type=number]")) this.element.addClass("e-no-spin");
                this._isWatermark = 'placeholder' in document.createElement('input');
                this.model.locale = ej.preferredCulture(this.model.locale).name == "en" ? "en-US" : ej.preferredCulture(this.model.locale).name;
                this._localizedLabels = this._getLocalizedLabels();
                this.culture = ej.preferredCulture(this.model.locale);
                this._browsername = ej.browserInfo().name;
                this._initCustomValue();
                this._prevSeparator = null;
                this._checkSeparator(this.model.groupSeparator);
                this._checkAttribute();
                this._renderControl();
                this._setValues();
                this._wireEvents();
                this._initObjects();
                this._addAttr(this.model.htmlAttributes);
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
                this._updateSeparator();
                if (options && options.value != undefined) {
                    this._trigger("_change", { value: this.model.value });
                }
            }
            else {
                this._destroy();
                return false;
            }
        },
		
        _checkAttribute: function () {
            var attr = ["min", "max", "step", "readonly", "disabled", "placeholder"], propName = ["minValue", "maxValue", "incrementStep", "readOnly", "enabled", "watermarkText"], value, propValue;
            for (var i = 0; i < attr.length; i++) {
                value = this.element.attr(attr[i]); propValue = propName[i];
                if ((!ej.isNullOrUndefined(value)) && !ej.isNullOrUndefined(this._options) && (ej.isNullOrUndefined(this._options[propValue]))) {
                    if (propValue == "watermarkText") this._options[propValue] = value;
                    else this.model[propValue] = ((propValue != "disabled") && (propValue != "readOnly")) ? ej.parseFloat(value, this.model.locale) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "accesskey") proxy._hiddenInput.attr(key, value);
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readonly" && value == "readOnly") proxy._setReadOnly(true);
                else if (keyName == "tabindex") {
                    proxy._hiddenInput.attr(key, value);
                    proxy.element.attr(key, value);
                }
                else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
                else if (keyName == "aria-label") proxy.element.attr(key, value);
                else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);
            });
        },

        _setValues: function () {
            this._id = this.element[0].id;
            this._textBox = this._hiddenInput[0];
            this._error = false;
            this._timeout = null;
            this.isValidState = true;
            this._allowkeyboard = true;
            this._validateOnType = false;
            this._focused = false;
            this._startValue = 0;
            if (this.sfType === "ej.CurrencyTextbox" && this.model.minValue == -(Number.MAX_VALUE))
                this.model.minValue = 0;
            if (ej.isNullOrUndefined(this.model.decimalPlaces)) {
                if (this.sfType === "ej.CurrencyTextbox")
                    this.model.decimalPlaces = ej.preferredCulture(this.model.locale).numberFormat.currency.decimals;
                else this.model.decimalPlaces = ej.preferredCulture(this.model.locale).numberFormat.decimals;

            }
            if (this.model.decimalPlaces >= 0) {
                this.model.minValue = parseFloat(this.model.minValue.toFixed(this.model.decimalPlaces));
                this.model.maxValue = parseFloat(this.model.maxValue.toFixed(this.model.decimalPlaces));
            }
            if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
			if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
                
            }
            this._localizedLabelToModel();
            this._localizedFormat();
            this._validateMinMaxValue(true);
            this._updateSymbol(this.model.locale);
            var value;
            if (ej.isNullOrUndefined(this.model.value)) {
                value = this.model.value;
                this.wrapper.removeClass('e-valid');
            }
            else {
                value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                this.wrapper.addClass('e-valid');
            }
           this.element.val(value);
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            var rules = this.model.validationRules;
            this.element.rules("add", rules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in rules) {
                var message = null;
                if (!ej.isNullOrUndefined(rules[ruleName])) {
                    if (!ej.isNullOrUndefined(rules["messages"] && rules["messages"][ruleName]))
                        message = rules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },

        _updateValueAttributes: function(minValue, maxValue, value){
            if (minValue && minValue != -(Number.MAX_VALUE)) {
                this.wrapper.attr({ 'aria-valuemin': minValue });
            }
            if (maxValue && maxValue != Number.MAX_VALUE) {
                this.wrapper.attr({ 'aria-valuemax': maxValue });
            }
            if (value) {
                this.wrapper.attr({ 'aria-valuenow': value });
            }
        },

        _renderControl: function () {
            this.wrapper = ej.buildTag("span.e-widget e-pinch");
            this.innerWrap = ej.buildTag("span.e-in-wrap e-box ");
            this.wrapper.attr("style", this.element.attr("style"));
            if (this.sfType === "ej.NumericTextbox")
                this.wrapper.addClass('e-numeric');
            else if (this.sfType === "ej.PercentageTextbox")
                this.wrapper.addClass('e-percent');
            else if (this.sfType === "ej.CurrencyTextbox")
                this.wrapper.addClass('e-currency');
            this.wrapper.append(this.innerWrap).insertAfter(this.element);
            this.innerWrap.append(this.element);
            this._hiddenInput = ej.buildTag("input", "", {}, { type: "text" }).insertBefore(this.element);
            this._hiddenInput.attr('data-role', 'none');

            this._hiddenInput[0].tabIndex = this.element[0].tabIndex;
            this._hiddenInput.attr("accesskey", this.element[0].accessKey);
            this.element[0].accessKey = "";

            this._hiddenInput.css("display", "block");
            this.element.css("display", "none");
            if (!this._isWatermark) {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this._localizedLabels.watermarkText);
                this._hiddenSpan.css("display", "none");
                this._on(this._hiddenSpan,"mousedown", this._focusIn);
                this._on(this._hiddenSpan,'mousewheel', this._mouseWheel);
                this._on(this._hiddenSpan,'DOMMouseScroll',this._mouseWheel);
            }
            this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
            this.element.attr("name") == null ? this.element.attr("name", this.model.name) : "";
            this.element.addClass('e-input');
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "") {
                if (ej.preferredCulture(this.model.locale).numberFormat[','] == ".")
                    this.element[0].value = this.element[0].value.replace(".", ",");
                this.model.value = this._checkNumValue(this.element[0].value);
            }   
            else {
                if (typeof this.model.value== "string" && ej.preferredCulture(this.model.locale).numberFormat[','] == ".")
                    this.model.value = this.model.value.replace(".", ",");
                this.model.value = this._checkNumValue(this.model.value);
            }
            this._hiddenInput.attr({ 'value': this.model.value }).addClass('e-input');
            this.wrapper.attr({'role': 'spinbutton' });
            this._updateValueAttributes(this._options.minValue, this._options.maxVal, this.model.value);
            this.element.attr({'aria-live': 'assertive', "value": this.model.value });
            var spinbutton = $('<span class="e-select"><span class="e-spin e-spin-up " role="button" aria-label="Increase Value" unselectable="on"></span><span class="e-spin e-spin-down" role="button" aria-label="Decrease Value" unselectable="on"></span></span>');
            spinbutton.find('.e-spin-up').append(ej.buildTag('span.e-icon e-arrow e-arrow-sans-up').attr({ 'role': 'presentation', 'unselectable': 'on' }));
            spinbutton.find('.e-spin-down').append(ej.buildTag('span.e-icon e-arrow e-arrow-sans-down').attr({ 'role': 'presentation', 'unselectable': 'on' }));
            this.innerWrap.append(spinbutton);
            this.spin = this.wrapper.find('.e-select');
            this.spinUp = this.wrapper.find('.e-spin-up');
            this.spinDown = this.wrapper.find('.e-spin-down');
            this._setWidth(this.model.width);
            this._setHeight(this.model.height);
            if (this.model.cssClass != "") this._setSkin(this.model.cssClass);
            this._showSpin(this.model.showSpinButton);
            if (this.model.showRoundedCorner) this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableRTL) this._enableRTL(this.model.enableRTL);
            if (this.model.readOnly) this._setReadOnly(this.model.readOnly);
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && this.element.hasClass("e-disable")) this.enable();
        },


        _initObjects: function () {
            this._preVal = this.model.value;
            if (this.model.value === null) {
                this.isValidState = true;
                this._hiddenInput.val(null);
            }
            else if ((this.model.value < this.model.minValue) || (this.model.value > this.model.maxValue))
                this.isValidState = false;
            this._checkErrorClass();
            this._setWaterMark();
        },


        _showSpin: function (value) {
            if (!value) {
                if (this.spin) {
                    this.spin.hide();
                    this.innerWrap.removeClass('e-padding');
                }
                this._spinEvents("_off");
            }
            else {
                if (this.spin) {
                    this.spin.show();
                    this.innerWrap.addClass('e-padding');
                }
                this._spinEvents("_on");
            }
        },


        _roundedCorner: function (value) {
            if (value && !this.innerWrap.hasClass('e-corner')) {
                this.innerWrap.addClass('e-corner');
            } else if (this.innerWrap.hasClass('e-corner')) {
                this.innerWrap.removeClass('e-corner');
            }
        },


        _enableRTL: function (enableRTL) {
            if (enableRTL) {
                if (this.spin) {
                    this.wrapper.addClass("e-rtl");
                }
                else this.element.addClass("e-rtl");
            }
            else {
                if (this.spin) {
                    this.wrapper.removeClass("e-rtl");
                }
                else this.element.removeClass("e-rtl");
            }
        },


        _setWidth: function (value) {
            value != "" ? this.wrapper.width(value) : this.model.width = this.wrapper.outerWidth();
        },


        _setHeight: function (value) {
            value != "" ? this.wrapper.height(value) : this.model.height = this.wrapper.outerHeight();
        },


        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass);
            this.wrapper.addClass(skin);
        },


        _setValue: function (value, isCode) {
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.model.value = this._checkNumValue(value);
            this._validateMinMaxValue(false);
            this._checkErrorClass();
            this._localizedFormat();
            this._raiseChangeEvent(isCode);
            this._setWaterMark();
        },

        _setLocalize: function (val) {
            var prevSeparator = ej.preferredCulture(this.model.locale).numberFormat[',']
            this.model.locale = ej.preferredCulture(val).name == "en" ? "en-US" : ej.preferredCulture(val).name;
            this.model.groupSeparator = ((ej.isNullOrUndefined(this._options.groupSeparator) && (prevSeparator === this.model.groupSeparator))) ?
                ej.preferredCulture(this.model.locale).numberFormat[','] : this.model.groupSeparator;
			this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            this.culture = ej.preferredCulture(this.model.locale);
            this._initCustomValue();
            this._updateSymbol(this.model.locale);
            this._localizedFormat();
            this._changeWatermark(this.model.watermarkText);
            if (ej.isNullOrUndefined(this.model.value)) var value = this.model.value;
            else value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n",true) : this._convertToExponetial(this.model.value).unformattedValue;
            this.element.val(value);
			
        },
		 _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            
        },
        _updateSymbol: function (locale) {
            this._percentSymbol = ej.preferredCulture(locale).numberFormat.percent.symbol;
            this._currencySymbol = ej.preferredCulture(locale).numberFormat.currency.symbol;
        },

        _setDecimal: function (val) {
            this.model.decimalPlaces = val;
            this._localizedFormat();
        },


        _validateMinMaxValue: function (fromMinMax, isCode) {
            var valChange = false, value;
            if (this.model.minValue > this.model.maxValue) this.model.minValue = this.model.maxValue;
            if (!ej.isNullOrUndefined(this.model.value) && this.model.minValue > this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this._startValue = this.model.value = this.model.minValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else if (!ej.isNullOrUndefined(this.model.value) && this.model.maxValue < this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this.model.value = this.model.maxValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else this.isValidState = true;
            if (this.model.minValue == this.model.maxValue) this._startValue = this.model.minValue;
            if ((valChange && fromMinMax)) {
                value = this._formatValue(this.model.value, "n", true);
                this._hiddenInput.val(value);
                if (ej.isNullOrUndefined(this.model.value)) value = this.model.value;
                else value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n", true) : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this._localizedFormat();
                this._raiseChangeEvent(isCode);
            }
        },

        _convertToExponetial: function (value) {
            var number = "", pattern, format, unformattedValue, symbol;
            var negative = value < 0 ? true : false;
            value = value.toString();
            format = ej.preferredCulture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            unformattedValue = value;
            var length = null;
            if (this.sfType === "ej.NumericTextbox") {
                pattern = negative ? format.pattern[0] : ej.isNullOrUndefined(format.pattern[1]) ? "n" : format.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = "";
            }
            else if (this.sfType === "ej.PercentageTextbox") {
                pattern = negative ? format.percent.pattern[0] : format.percent.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = format.percent.symbol;
            }
            else if (this.sfType === "ej.CurrencyTextbox") {
                pattern = negative ? format.currency.pattern[0] : format.currency.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = format.currency.symbol;
            }
            for (var idx = 0, length = pattern.length; idx < length; idx++) {
                var ch = pattern.charAt(idx);
                (ch === "n") ? number += value : (ch === "$" || ch === "%") ? number += symbol : number += ch;
            }
            return { formattedValue: number, unformattedValue: unformattedValue }
        },

        _localizedFormat: function () {
            this.culture = ej.preferredCulture(this.model.locale);
            this._decimalSep = ej.preferredCulture(this.model.locale).numberFormat['.'];
            if (ej.isNullOrUndefined(this.model.value)) {
                this._textBox.value = "";
                return;
            }
            if (this.model.value.toString().indexOf('e') == -1) {
                this._textBox.value = this._removeSeparator(this.model.value)
                if (!this._focused && this._textBox.value != "") {
                    this._textBox.value = this._formatValue(this.model.value, "n", true);
					
                    if (this.sfType === "ej.PercentageTextbox") this._appendPercentSymbol(this._textBox.value);
                    else if (this.sfType === "ej.CurrencyTextbox") this._appendCurrencySymbol(this._textBox.value);


                    var symbolIndex = (this.sfType === "ej.CurrencyTextbox") ? this._textBox.value.indexOf(this._currencySymbol) : (this.sfType === "ej.PercentageTextbox") ? this._textBox.value.indexOf(this._percentSymbol) : -1;

                    if (this.model.decimalPlaces == -1 && this._afterDec !=0) {
                        this._textBox.value = this._textBox.value.substr(0, this._textBox.value.lastIndexOf(this._decimalSep));
                        if (symbolIndex > 1 && (ej.isNullOrUndefined(this._afterDec) || this._afterDec == "")) {
                            if (this.sfType === "ej.CurrencyTextbox")
                                this._textBox.value = this._textBox.value + " " + this._currencySymbol;
                            if (this.sfType === "ej.PercentageTextbox")
                                this._textBox.value = this._textBox.value + " " + this._percentSymbol;
                        }
                        if (this.model.decimalPlaces == -1 && !ej.isNullOrUndefined(this._afterDec) && this._afterDec != "") {
                            var index = this._textBox.value.lastIndexOf(this._decimalSep);
                            if (index >= 0) {
                                this._textBox.value = this._textBox.value.substr(0, index);
                            }
                            var symbolPos = this._afterDec;
                            if (symbolIndex > 1) {
                                if (this.sfType === "ej.CurrencyTextbox")
                                    symbolPos = symbolPos + " " + this._currencySymbol;
                                if (this.sfType === "ej.PercentageTextbox")
                                    symbolPos = symbolPos + " " + this._percentSymbol;

                            }
                            this._textBox.value = this._textBox.value + this._decimalSep + symbolPos;
                        }
                    }
                }
                else {
                    var value = this._convertToExponetial(this.model.value);
                    this._textBox.value = value.unformattedValue;
                    if (!this._focused && this._textBox.value != "")
                        this._textBox.value = value.formattedValue;
                }
            }
            else {
                this._textBox.value = this.model.value.toString();
            }
        },

        _checkNumValue: function (value) {
            if (typeof value == "string")
                value = !this._changeSeparator ? value : this._replaceSeparator(value, this.model.groupSeparator, ej.preferredCulture(this.model.locale).numberFormat[',']);
            if (typeof value == "string" && !isNaN(this._parseValue(value))) {
                value = this._parseValue(value);
                return parseFloat(value);
            }
            else if ((typeof value == "number") && !isNaN(value))
                return value;
            else return null;
        },


        _setReadOnly: function (bool) {
            this.model.readOnly = bool;
            if (bool) {
                this.element.attr("readonly", true);
                this._hiddenInput.attr("readonly", true);
            }
            else {
                this.element.prop("readonly",false);
                this._hiddenInput.prop("readonly",false);
            }
        },


        _setWaterMark: function () {
            if ((this._localizedLabels.watermarkText != null) && (this._textBox.value === "") && $.trim(this._hiddenInput.val()) === "") {
                if (this._isWatermark) {
                    this._hiddenInput.attr("placeholder", this._localizedLabels.watermarkText);
                    this.element.attr("placeholder", this._localizedLabels.watermarkText);
                }
                else
                    this._hiddenSpan.css("display", "block").text(this._localizedLabels.watermarkText);
            }
        },


        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this._isWatermark) {
                this._hiddenInput.attr("placeholder", text);
                this.element.attr("placeholder", text);
            }
            else this._hiddenSpan.text(text);
        },


        _setSelectionRange: function (selectionStart, selectionEnd) {
            var input = this._textBox;
            try {
                if (input.setSelectionRange) {
                    if (this._browsername == "edge")  setTimeout(function () { input.setSelectionRange(selectionStart, selectionEnd) })
                    else input.setSelectionRange(selectionStart, selectionEnd);
                }
                else if (input.createTextRange) {
                    var range = input.createTextRange();
                    _setselction(range);
                }
            }
            catch (e) {
                var control = this;
                window.setTimeout(function () {
                    document.body.focus();
                    control._textBox.select();
                    if (document.selection) {
                        var range = document.selection.createRange();
                        _setselction(range);
                    }
                }, 1);
            }
            function _setselction(range) {
                range.collapse(true);
                range.moveEnd('character', selectionEnd);
                range.moveStart('character', selectionStart);
                range.select();
            }
        },


        _getSelection: function (value) {
            if (this._textBox.type != "number") {
                var oSel = null;
                if (document.selection) {
                    oSel = document.selection.createRange();
                    return (oSel.text === "" ? oSel.text : this._removeFormats(oSel.text));
                }
                else {
                    if (value == null)
                        return this.model.value;
                    else {
                        oSel = this._removeFormats(value.substring(this._textBox.selectionStart, this._textBox.selectionEnd));
                        return oSel;
                    }
                }
            }
        },


        _caretPosition: function () {
            var oField = this._textBox;
            var iCaretPos = 0;
            // IE Support
            if (oField.type != "number") {
                if (document.selection) {
                    oField.focus();
                    // To get cursor position, get empty selection range
                    var oSel = document.selection.createRange();
                    // Move selection start to 0 position
                    oSel.moveStart('character', -oField.value.length);
                    // The caret position is selection length
                    iCaretPos = oSel.text.length;
                }
                    // Firefox support
                else if (oField.selectionStart || oField.selectionStart == '0')
                    iCaretPos = oField.selectionEnd;
                return (iCaretPos);
            }  
        },


        _appendPercentSymbol: function (value) {
            if (this._percentSymbol) value = value.replace(this._percentSymbol, "");
            if (value.indexOf(ej.preferredCulture(this.model.locale).numberFormat.percent.symbol) < 0)
                this._textBox.value = this._formatValue(this._parseValue(value) / 100, "p", true);
            this._percentSymbol = ej.preferredCulture(this.model.locale).numberFormat.percent.symbol;
        },

        _appendCurrencySymbol: function (value) {
            if (this._currencySymbol) value = value.replace(this._currencySymbol, "");
            if (value.indexOf(ej.preferredCulture(this.model.locale).numberFormat.currency.symbol) < 0)
                this._textBox.value = this._formatValue(this._parseValue(value), "c", true);
            this._currencySymbol = ej.preferredCulture(this.model.locale).numberFormat.currency.symbol;

        },

        _removeFormats: function (val) {
            var grpSep = ej.preferredCulture(this.model.locale).numberFormat[","];
            if (val != null) {
                if (grpSep == ".")
                    return (val.toString().replace(/["."]/g, ""));
                else if (val.toString().match(new RegExp(grpSep, "g")))
                    return (val.toString().replace(new RegExp(grpSep, "g"), ""));
                else
                    return val;
            }
            else
                return null;
        },


        _checkErrorClass: function (obj) {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
		


        enable: function () {
            this.model.enabled = true;
            this.element[0].disabled = false;
            this.element.prop("disabled",false);
            this._hiddenInput.prop("disabled", false);
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this._hiddenInput.removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select").removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select span.e-icon.e-arrow").removeClass('e-disable');
            this.wrapper.removeClass('e-disable-wrap');
        },


        disable: function () {
            this.model.enabled = false;
            this.element[0].disabled = true;
            this.element.attr("disabled", "disabled");
            this._hiddenInput.attr("disabled", "disabled");
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this._hiddenInput.addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select").addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select span.e-icon.e-arrow").addClass('e-disable');
            this.wrapper.addClass('e-disable-wrap');
        },


        getValue: function () {
            return this.model.value;
        },

        _wireEvents: function () {
            this._on(this._hiddenInput, 'focus', this._focusIn);
            this._on(this.element, 'paste', this._paste);
            this._on(this.element, 'blur', this._focusOut);
            this._on(this.element, 'keydown', this._keyDown);
            this._on(this.element, 'keypress', this._keyPress);
            this._on(this.element, 'mousewheel', this._mouseWheel);
            this._on(this.element, 'DOMMouseScroll', this._mouseWheel);
        },

        _spinEvents: function (action) {
            this[action](this.spinUp, "mousedown mouseup touchstart touchend", this._spinUpClick);
            this[action](this.spinDown, "mousedown mouseup touchstart touchend", this._spinDownClick);
        },

        _isIE8: function () {
            var _ie8 = false, browserInfo = ej.browserInfo();
            if (browserInfo.name == 'msie' && browserInfo.version == "8.0") {
                _ie8 = true;
            }
            return _ie8;
        },

        _spinUpClick: function (event) {
            var isNotLeftClick = false;
            if (event.button)
                isNotLeftClick = this._isIE8() ? event.button != 1 : event.button != 0;
            else if (event.which)
                isNotLeftClick = (event.which == 3); //for Opera
            if (isNotLeftClick) return;
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this.wrapper.find(".e-animate").removeClass("e-animate");
            this.spinUp.addClass("e-animate");
            this._on(this.spinUp, 'mouseleave', this._mouseUpClick);
            this.spinUp.addClass("e-active");
            var self = this;
            if (event.type == "mouseup"|| event.type == "touchend") {
                this._updateInputField("increment");
                this.spinUp.removeClass("e-active");
                this._off($(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown"|| event.type == "touchstart") {
                if (!this._focused) this._hiddenInput[0].focus();
                this._timeout = setInterval(function () {
                    self._updateInputField("increment");
                }, 150);
                this._on($(document), 'mouseup', this._mouseUpClick);
            }
        },

        _spinDownClick: function (event) {
            var isNotLeftClick = false;
            if (event.button)
                isNotLeftClick = this._isIE8() ? event.button != 1 : event.button != 0;
            else if (event.which)
                isNotLeftClick = (event.which == 3); //for Opera
            if (isNotLeftClick) return;
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this.wrapper.find(".e-animate").removeClass("e-animate");
            this.spinDown.addClass("e-animate");
            this._on(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.addClass("e-active");
            if (event.type == "mouseup"|| event.type == "touchend") {
                this._updateInputField("decrement");
                this.spinDown.removeClass("e-active");
                this._off($(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown"|| event.type == "touchstart") {
                if (!this._focused) this._hiddenInput[0].focus()
                this._timeout = setInterval(function () {
                    self._updateInputField("decrement");
                }, 150);
                this._on($(document), 'mouseup', this._mouseUpClick);
            }
        },

        _mouseUpClick: function (event) {
            event.stopPropagation();
            clearTimeout(this._timeout);
            this._off(this.spinUp, 'mouseleave', this._mouseUpClick);
            this._off(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.removeClass("e-active");
            this.spinUp.removeClass("e-active");
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (!this._focused) this.element[0].focus();
            if (!this.model.enabled || this.model.readOnly) return;
            var delta;
            var rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._updateInputField("increment");
            else if (delta < 0)
                this._updateInputField("decrement");
            this._cancelEvent(event);
        },


        _numberValue: function () {
            var value = this._textBox.value;
            if (this.sfType === "ej.NumericTextbox")
                value = this._formatValue(this.model.value, "n", true);
            if (this.sfType === "ej.PercentageTextbox")
                value = this._formatValue(this.model.value, "n", true);
            else if (this.sfType === "ej.CurrencyTextbox")
                value = this._formatValue(this.model.value, "n", true);
            value = (typeof value == "string" && !isNaN(this._parseValue(value))) ? value : "";
            return value;
        },
        _formatValue: function (value, format,flag) {
            if(flag) this._updateCultureInfo();
			var value;
			    if(this.model.decimalPlaces != -1 || (this.model.decimalPlaces == -1 && this.model.value==null)){
				 value = ej.format(value, format + this.model.decimalPlaces, this.model.locale);
				}
				else{
					  value = ej.format(value, format + this._afterDec.length, this.model.locale);
			    }
				
            if (flag) this._restCultureInfo();
            return value;
        },
        _parseValue: function (value) {
            this._updateCultureInfo();
            var value = ej.parseFloat(value, this.model.locale);
            this._restCultureInfo();
            return value;            
        },

        _initCustomValue: function () {
            var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
            switch (ctr) {
                case "percent":
                case "currency":
                    format = this.culture.numberFormat[ctr];
                    if (ej.isNullOrUndefined(this._options.negativePattern)) this.model.negativePattern = format.pattern[0];
                    if (ej.isNullOrUndefined(this._options.positivePattern)) this.model.positivePattern = format.pattern[1];
                    if (ej.isNullOrUndefined(this._options.currencySymbol) && ctr == "currency") this.model.currencySymbol = format.symbol;
                    if (ej.isNullOrUndefined(this._options.groupSize)) this.model.groupSize = format.groupSizes[0];                    
                    break;
                case "numeric":
                    format = this.culture.numberFormat;
                    if (ej.isNullOrUndefined(this._options.negativePattern)) this.model.negativePattern = format.pattern[0];
                    if (ej.isNullOrUndefined(this._options.positivePattern)) this.model.positivePattern = ej.isNullOrUndefined(format.pattern[1]) ? "n" : format.pattern[1];
                    if (ej.isNullOrUndefined(this._options.groupSize)) this.model.groupSize = format.groupSizes[0];
                    break;
            }
        },

        _updateCultureInfo: function (flag) {
            var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
            format = ctr == "numeric" ? this.culture.numberFormat : this.culture.numberFormat[ctr];
            this._oldNegativePattern = format.pattern[0];
            this._oldGroupSize = format.groupSizes[0];
            format.pattern[0] = this.model.negativePattern;
            format.groupSizes[0] = this.model.groupSize;
            this._oldPositivePattern = format.pattern[1];
            format.pattern[1] = this.model.positivePattern;
            if (ctr == "currency") {
                this._oldcurrencySymbol = format.symbol;
                format.symbol = this.model.currencySymbol;
            }
        },
        _restCultureInfo: function () {
            var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
            format = ctr == "numeric" ? this.culture.numberFormat : this.culture.numberFormat[ctr];
            format.pattern[0] = this._oldNegativePattern;
            format.groupSizes[0] = this._oldGroupSize;
            format.pattern[1] = this._oldPositivePattern;
            if (ctr == "currency")
                format.symbol = this._oldcurrencySymbol;;
        },
        _toggleTextbox: function (toggle) {
            var proxy = this;
            proxy._hiddenInput.toggle(toggle);
            proxy.element.toggle(!toggle);
        },

        _paste: function (event) {
            var text;
            if (window.clipboardData && window.clipboardData.getData) { // IE
                text = window.clipboardData.getData('Text');
            }
            else if (event.originalEvent.clipboardData && event.originalEvent.clipboardData.getData) { // other browsers
                text = event.originalEvent.clipboardData.getData('text/plain');
            }
            var data = ej.parseFloat(text, this.model.locale);
            if (isNaN(data) && text) this._cancelEvent(event)
        },
        _focusIn: function (event) {
            if (this.model.readOnly)
                return;
            this._focused = true;
            if(!ej.isNullOrUndefined(this.model.value)) this.element.val(this._removeSeparator(this.model.value));
            this._toggleTextbox(false);
            this._textBox = this.element[0];
            this.element[0].focus();
            this._preVal = this.model.value;
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass('e-error');
            if (!this._error) {
                if (this._textBox.value != "") {
                    var value = this._formatValue(this._textBox.value, "n", true);
                    if (this.model.decimalPlaces == -1) {
                        this._separateValue(this._textBox.value.toString(), true, true);
                        if (!ej.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            value = this._beforeDec + this._decimalSep + this._afterDec
                    }
                    this._textBox.value = value;
                    this._hiddenInput.val(value);
                }
                this._setSelectionRange(0, this._textBox.value.length);
            }
            this._trigger("focusIn", { value: this.model.value });
        },

        _separateValue: function (value, isDecimal, isgroupSep) {
            var index = (!isDecimal) ? value.lastIndexOf(".") : value.lastIndexOf(this._decimalSep);
            this._beforeDec = (index >= 0) ? value.substr(0, index) : value;
            if (!isDecimal && isgroupSep)
                this._afterDec = (index >= 0) ? value.substr(index + 1) : "";
        },

        _focusOut: function (event) {
            this._focused = false;
            this.wrapper.removeClass("e-focus");
            this._separateValue(this._textBox.value,false,true);
            if (!this._error) {
                if (this._textBox.value != "") {
                    var value = ej.parseFloat(this._textBox.value, this.model.locale);
                    if (value < this.model.minValue) {
                        if (!this.model.enableStrictMode)
                            this._textBox.value = this._formatValue(this.model.minValue, "n", false)
                        else
                            this.isValidState = false
                    }
                    else if (value > this.model.maxValue) {
                        if (!this.model.enableStrictMode)
                            this._textBox.value = this._formatValue(this.model.maxValue, "n", false);
                        else
                            this.isValidState = false;
                    }
                    this.model.value = (this.model.decimalPlaces == -1 && !ej.isNullOrUndefined(this._afterDec) && (this._textBox.value.lastIndexOf(this._decimalSep) == -1) && (value.toString().indexOf('e') == -1)) ? ej.parseFloat(this._textBox.value + this._decimalSep + this._afterDec, this.model.locale) : ej.parseFloat(this._textBox.value, this.model.locale);
                    if (isNaN(this.model.value) && !this.model.value) {
                        this.model.value = null;
                        this.isValidState = false;
                    }
                    this._toggleTextbox(true);
                    this._textBox = this._hiddenInput[0];
                    this._localizedFormat();
                    this._checkErrorClass();
                }
                else {
                    var value = this._textBox.value == "" ? null : this._textBox.value;
                    this.model.value = value;
                    this._hiddenInput.val(value);
                    this._toggleTextbox(true);
                    this._textBox = this._hiddenInput[0];
                }
                if (this.model.value === null || this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) this.isValidState = true;
                else if (this.model.enableStrictMode) this.isValidState = false;
                this._raiseChangeEvent();
                this._setWaterMark();
                if (ej.isNullOrUndefined(this.model.value)) value = this.model.value;
                else value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this._updateSeparator();
                this._trigger("focusOut", { value: this.model.value });
            }
            this._checkErrorClass();
            this._afterDec = "";
        },

        _cancelEvent: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            e.stopPropagation();
            e.preventDefault();
            return false;
        },

        _updateInputField: function (operation) {
            this.isValidState = true;
            if (!this._focused) $(this._hiddenInput[0]).focus();
            var step = this.model.incrementStep;
            var itemValue = this.model.value;
            if (this._textBox.value === "") {
                this._textBox.value = this._formatValue(this._startValue, "n", true);
                step = 0;
            }
            else if (this._textBox.value.indexOf(" ") >= 0)
                this._textBox.value = this._textBox.value.replace(" ", "");
            if (this.sfType === "ej.PercentageTextbox" || this.sfType === "ej.CurrencyTextbox") {
                var editorvalue = this._textBox.value, value = editorvalue;
                if (editorvalue.indexOf(ej.preferredCulture(this.model.locale).numberFormat.percent.symbol) > -1)
                    value = editorvalue.substring(0, editorvalue.length - 1);
                this.model.value = this._parseValue(value);
            }
            else if (this.sfType == "ej.NumericTextbox")
                this.model.value = ej.parseFloat(this._textBox.value, this.model.locale);

            if (isNaN(this.model.value) && !this.model.value)
                this.model.value = this._startValue;

            if (this.model.value >= this.model.minValue && this.model.value > this.model.maxValue) {
                this.model.value = this.model.maxValue;
                this._setValue(this.model.value);
            }
            else if (this.model.value < this.model.minValue && this.model.value <= this.model.maxValue) {
                this.model.value = this.model.minValue;
                this._setValue(this.model.value);
            }
            else if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
                value = operation == "increment" ? this.model.value + step : this.model.value - step;
                if(this.model.decimalPlaces == -1) {
					 if (this.value == undefined  ) {
                             this._setValue(this.model.value);
                         } 
                    value = (this.model.value.toString().indexOf('e') == -1) ? parseFloat(value.toFixed(this._afterDec.length)) : parseFloat(value);
                    };
                if (value >= this.model.minValue && value <= this.model.maxValue)
                    this._setValue(value);
            }
            this._checkErrorClass();
        },

        _validateDecimal: function (e) {
            var char = String.fromCharCode(e.keyCode);
            char = e.keyCode == 188 ? "," : (e.keyCode == 190) ? "." : (e.keyCode == 110) ? ej.preferredCulture(this.model.locale).numberFormat["."] : char;
            if (ej.preferredCulture(this.model.locale).numberFormat["."].charCodeAt(0) == char.charCodeAt(0))
                return true;
            return false;
        },

        _allowKeyCodes: function (e) {
            var keys = new Array(38, 40, 35, 36, 109, 189, 46, 8, 127, 37, 39, 190, 9, 13, 16, 17, 18, 20, 110, 173, 86, 88, 67);
            for (var i = 0; i < keys.length; i++) {
                if (e.keyCode == keys[i] || (this._validateDecimal(e) && this.model.decimalPlaces != 0))
                    return true;
            }
            return false;
        },

        _raiseChangeEvent: function (isCode) {
            var currVal = this.model.value, value;
            if ((this._checkNumValue(this._preVal) !== this._checkNumValue(currVal))) {
                this._preVal = currVal;
                this.model.value = (this.model.decimalPlaces == -1 && !ej.isNullOrUndefined(this.model.value)) ? parseFloat(this.model.value) : this._checkNumValue(this._formatValue(this._preVal, "n", false));
                this._updateHiddenField();
                if (ej.isNullOrUndefined(this.model.value)) {
                    value = this.model.value;
                    this.wrapper.removeClass('e-valid');
                }
                else {
                    value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                    if (this.model.decimalPlaces == -1) {
                        this._separateValue(this.model.value.toString(), false,true);
                        if (!ej.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            value = this._beforeDec + this._decimalSep + this._afterDec;
                    }
                    this.wrapper.addClass('e-valid');
                }
                this.element.val(value);
			    this.wrapper.attr('aria-valuenow', value);
                this._updateSeparator();
                // Trigger the Jquery change event for the input element.
                this.element.trigger("change");
                this._trigger("_change", { value: this.model.value, isInteraction: !isCode });
                this._trigger("change", { value: this.model.value, isInteraction: !isCode });
            }
        },
        _updateHiddenField: function () {
            var prevActive = this._textBox;
            this._textBox = this._hiddenInput[0];
            this._localizedFormat();
            this._textBox = prevActive;
        },
        _removeSeparator: function (number) {
            if (ej.isNullOrUndefined(number)) return;
            var value, format, tag;
            if (this.model.decimalPlaces == -1) {
                this._separateValue(number.toString(), false,true);
            }
            if (number.toString().indexOf('e') == -1) {
                number = this._checkNumValue(this._formatValue(number, "n", false));
            }
            value = number.toString();
            format = ej.preferredCulture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            return value;
        },
        _updateSeparator: function () {
            if (this._changeSeparator && this.model.value) {
                var formatValue;
                    if (this.sfType === "ej.NumericTextbox")
                        formatValue = this._formatValue(this.model.value, "n", true);
                    else if (this.sfType === "ej.PercentageTextbox")
                        formatValue = this._formatValue((this.model.value) / 100, "p", true);
                    else if (this.sfType === "ej.CurrencyTextbox")
                        formatValue = this._formatValue(this.model.value, "c", true);
                    if (this.model.decimalPlaces == -1) {
                        var index = formatValue.lastIndexOf(this._decimalSep);
                        var val = formatValue.substr(index + 1);
                        this._separateValue(formatValue, true, false);
                        var symbolIndex = (this.sfType === "ej.CurrencyTextbox") ? formatValue.indexOf(this._currencySymbol) : (this.sfType === "ej.PercentageTextbox") ? this._textBox.value.indexOf(this._percentSymbol) : -1;
                        var symbolPos = this._afterDec;
                         if (symbolIndex > 1) {
                           if (this.sfType === "ej.CurrencyTextbox")
                                symbolPos = symbolPos + " " + this._currencySymbol;
                            if (this.sfType === "ej.PercentageTextbox")
                                symbolPos = symbolPos + " " + this._percentSymbol;
                         }
                        if (!ej.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            formatValue = this._beforeDec + this._decimalSep + symbolPos;
                        if (!ej.isNullOrUndefined(this._afterDec) && this._afterDec == "")
                            formatValue = this._beforeDec + this._decimalSep + val;
                    }
                
                this._hiddenInput.val(this._replaceSeparator(formatValue, ej.preferredCulture(this.model.locale).numberFormat[","], this.model.groupSeparator));
            }
        },

        _replaceSeparator: function (value, find, replaceWith) {
            this._decimalSep = ej.preferredCulture(this.model.locale).numberFormat['.'];
            var reg = find === "" ? new RegExp("\\s", "g") : new RegExp("\\" + find, "g");
            if (this.model.groupSeparator == ej.preferredCulture(this.model.locale).numberFormat['.']) {
                var decimalpoints = this.model.decimalPlaces;
                if (this.model.decimalPlaces == -1) {
                    var index = value.lastIndexOf(this._decimalSep);
                    decimalpoints = value.substr(index + 1).length;
                 }
                var valuelength = value.length - decimalpoints - 1;
                return value.substring(0, valuelength).replace(reg, replaceWith) + value.substring(valuelength, value.length);
            }
            return value.replace(reg, replaceWith);
        },

        _checkSeparator: function (value) {
            this.model.groupSeparator = value != null ? this._validateSeparator(value) : ej.preferredCulture(this.model.locale).numberFormat[','];
            this._changeSeparator = ej.preferredCulture(this.model.locale).numberFormat[","] != this.model.groupSeparator ? true : false;
            this._prevSeparator = this.model.groupSeparator;
        },
        _validateSeparator: function (value) {
            var separator = value.toString();
            var reg = new RegExp("[a-zA-Z0-9]");
            separator = (separator.length > 1) ? separator[0] : separator;
            separator = (!reg.test(separator)) ? separator : this._prevSeparator != null ? this._prevSeparator : ej.preferredCulture(this.model.locale).numberFormat[','];
            return separator;
        },
        _keyPress: function (e) {
            if (e.which === 0 || e.metaKey || e.ctrlKey || e.keyCode === 8 || e.keyCode === 13)
                return;
            var proxy = this, regExp = null, point = ".", cursor, beforeCursor, afterCursor, numberFormat, value;
            cursor = this._caretPosition();
            beforeCursor = this._textBox.value.toString().substring(0, cursor);
            afterCursor = this._textBox.value.toString().substring(cursor);
            numberFormat = ej.preferredCulture(this.model.locale).numberFormat;

            var character = String.fromCharCode(e.which);
            value = beforeCursor + character + afterCursor;
            var separator = numberFormat[point];
            separator = (separator === point) ? "\\" + separator : separator;
            regExp = proxy.model.decimalPlaces === 0 ? new RegExp("^((-)?(\\d*)(-)?)?$") : new RegExp("^(-)?(((\\d+(" + separator + "\\d*)?)|(" + separator + "\\d*)))?((-)?)$");
            // Validate the textbox value 
            if (!regExp.test(value))
                return false;
        },
        _validateDecimalOnType: function (e) {
            var cursor, cancelEvent, beforeCursor, afterCursor, sel, temp;
            cursor = this._caretPosition();
            beforeCursor = this._textBox.value.toString().substring(0, cursor);
            afterCursor = this._textBox.value.toString().substring(cursor);
            sel = this._getSelection(this._textBox.value);
            var decSep = ej.preferredCulture(this.model.locale).numberFormat["."];
            temp = (ej.isNullOrUndefined(this.model.value)) ? "" : this.model.value.toString();
            if (this.model.decimalPlaces != 0) {
                var afterdeci = (this._textBox.value).split(decSep)[1];
                if (temp.indexOf(decSep) > 0) {
                    if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                        cancelEvent = true;
                    else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                    else cancelEvent = false;
                }
                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                else
                    cancelEvent = false;
            }
            else
                cancelEvent = false;
            if (cancelEvent) {
                this._keypressFlag = false;
                this._cancelEvent(e);
                return false;
            }
        },

        _keyDown: function (e) {
            if (this.model.readOnly) return;
            this._CurrentCultureInfo = JSON.parse(JSON.stringify(ej.preferredCulture()));
            var cursor, cancelEvent, beforeCursor, afterCursor, sel;
            if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || this._allowKeyCodes(e)) {
                if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 118 || e.keyCode == 67 || e.keyCode == 88)))
                    return true;
                if ((((e.ctrlKey == true) && (e.keyCode != 9 && e.keyCode != 17 && e.keyCode != 86 && e.keyCode != 67))) || (e.keyCode == 67 || e.keyCode == 86 || e.keyCode == 88)) {//Prevent Shift + Tab event
                    this._keypressFlag = false;
                    this._cancelEvent(e);
                    return false;
                }

                if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode == 110) {//Numbers from 0 to 9 in keyboard and numpad (110 for decimal)
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.toString().substring(0, cursor);
                    afterCursor = this._textBox.value.toString().substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                    // For Numpad issue
                    if (e.keyCode >= 96 && e.keyCode <= 105)
                        e.keyCode -= 48;
                    if (this.model.validateOnType && this.model.decimalPlaces != -1) this._validateDecimalOnType(e);
                    if (this._validateOnType) {
                        var decSep = ej.preferredCulture(this.model.locale).numberFormat["."];
                        var temp = this.model.value.toString();
                        var tempIndex = temp.indexOf(decSep);
                        var value = this.model.value;

                        var replaceminVal = (this.model.decimalPlaces == -1) ? this.model.minValue : this.model.minValue.toFixed(this.model.decimalPlaces);
                        var replacemaxVal = (this.model.decimalPlaces == -1) ? this.model.maxValue : this.model.maxValue.toFixed(this.model.decimalPlaces);
                        var exp = false;
                        if (replaceminVal.toString().indexOf("e") > 0 || replacemaxVal.toString().indexOf("e") > 0)
                            exp = true;
                        if (!exp) {
                            if (decSep != ".") {
                                temp = this._textBox.value.toString();
                                if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                    replaceminVal = this.model.minValue.toString().replace(/["."]/g, decSep);
                                if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                    replacemaxVal = this.model.maxValue.toString().replace(/["."]/g, decSep);
                            }
                            if (replaceminVal.toString().indexOf(decSep) > 0)
                                minVal = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                            else
                                minVal = this.model.minValue;
                            if (replacemaxVal.toString().indexOf(decSep) > 0)
                                maxVal = Number(replacemaxVal.toString().toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                            else
                                maxVal = this.model.maxValue;
                            if (tempIndex > 0) {
                                value = Number(temp.substring(temp.indexOf(decSep) + 1, temp.toString().length));
                                if (replaceminVal.toString().indexOf(decSep) > 0)
                                    minVal = Number(replaceminVal.toString().substring(replaceminVal.toString().indexOf(decSep) + 1, replaceminVal.toString().length));
                                else
                                    minVal = 0;
                                if (replacemaxVal.toString().indexOf(decSep) > 0)
                                    maxVal = Number(replacemaxVal.toString().substring(replacemaxVal.toString().indexOf(decSep) + 1, replacemaxVal.toString().length));
                                else
                                    maxVal = 0;
                                var valb4Dec = Number(temp.substring(0, temp.indexOf(decSep)));
                                var minValb4Dec = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                                var maxValb4Dec = Number(replacemaxVal.toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                                if (!this._validateValue(value, minVal, maxVal, true, valb4Dec, minValb4Dec, maxValb4Dec))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                            else {
                                if (!this._validateValue(value, minVal, maxVal, false))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                        }
                        else if (this.model.decimalPlaces != 0) {
                            var afterdeci = (this._textBox.value).split(".")[1];
                            if (temp.indexOf(decSep) > 0 || (Number(temp) < Number(replaceminVal) || Number(temp) > Number(replacemaxVal))) {
                                if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                                    cancelEvent = true;
                                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                                else cancelEvent = false;
                            }
                            else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                            else
                                cancelEvent = false;
                        }
                        else
                            cancelEvent = false;
                        if (cancelEvent) {
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                    }

                }
                if (e.keyCode == 38 && this._allowkeyboard) {
                    this._updateInputField("increment");
                    this._cancelEvent(e);
                }

                if (e.keyCode == 40 && this._allowkeyboard) {
                    this._updateInputField("decrement");
                    this._cancelEvent(e);

                }
                if (e.keyCode == 8) {
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                }

                if (e.keyCode == 46 || e.keyCode == 127) {
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                }
                if (this._validateDecimal(e) && this.model.decimalPlaces != 0 && e.keyCode != 46) {
                    var decChar = ej.preferredCulture(this.model.locale).numberFormat["."];
                    var minVal, maxVal;
                    var dotSplit = this._textBox.value.split(decChar);
                    var curPosition = this._caretPosition();
                     if(this._textBox.selectionEnd - this._textBox.selectionStart == this._textBox.value.length){
                            this._textBox.value = decChar;
                            this._setSelectionRange(curPosition + 1, curPosition + 1);
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }       
                    if (dotSplit[1] == undefined) {                        
                        var strBeforeCursor = dotSplit[0].substring(0, curPosition);
                        var strAfterCursor = dotSplit[0].substring(curPosition);
                        if (this.model.minValue.toString().indexOf("e") > 0 || this.model.maxValue.toString().indexOf("e") > 0)
                            exp = true;
                        if (this.model.decimalPlaces != -1 && strAfterCursor.length > this.model.decimalPlaces && this.model.validateOnType == true) {
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                        if (this._validateOnType && !exp) {
                            if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                minVal = this.model.minValue.toString().replace(/["."]/g, decChar);
                            if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                maxVal = this.model.maxValue.toString().replace(/["."]/g, decChar);
                            if (minVal.indexOf(decChar) > 0)
                                minVal = Number(minVal.substring(0, minVal.indexOf(decChar)));
                            else
                                minVal = Number(minVal);
                            if (maxVal.indexOf(decChar) > 0)
                                maxVal = Number(maxVal.substring(0, maxVal.indexOf(decChar)));
                            else
                                maxVal = Number(maxVal);
                            if (this._validateValue(this.model.value, minVal, maxVal, "DecimalKeyPressed"))
                                this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
                            else {
                                this._keypressFlag = false;
                                this._cancelEvent(e);
                                return false;
                            }
                        }
                        else
                            this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
                        this._setSelectionRange(curPosition + 1, curPosition + 1);
                    }
                    this._cancelEvent(e);
                } else if (e.keyCode == 190 || e.keyCode == 110) {
                    this._cancelEvent(e);
                }
                if (e.keyCode == 109 || e.keyCode == 189 || e.keyCode == 173) { //'-' char key press.
                    if (this.model.value === this._preVal || this.model.value === null) this.model.value = this._textBox.value;
                    if ((this._caretPosition() != 0 && this._getSelection(this._removeFormats(this._textBox.value)) != this.model.value) || (this.model.minValue >= 0 && !this.model.enableStrictMode) || (this._textBox.value.toString().match(new RegExp("-", "g")) && this._getSelection(this._textBox.value) === "")){
                         this._preVal = this.model.value;
                         this.model.value = this._textBox.value;
                         this._cancelEvent(e);
                    }
                    else if (this._getSelection() == this.model.value){
                        this._preVal = this.model.value;
                        this.model.value = null;
                    }
                }

                if (e.keyCode == 13)
                    if ((this._checkNumValue(this._preVal) !== this._checkNumValue(this._textBox.value)))
                        this._setValue(this._textBox.value);
            }

            else if (e.keyCode != 27 && !e.ctrlKey || (e.ctrlKey && e.keyCode == 90 && $.trim(this._textBox.value) === "")) {
                this._keypressFlag = false;
                this._cancelEvent(e);
            }
        },
		_getLocalizedLabels: function(){
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        }
		
    });
	
    ej.NumericTextbox.Locale = ej.NumericTextbox.Locale || {} ;
    
    ej.NumericTextbox.Locale['default'] = ej.NumericTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	ej.PercentageTextbox.Locale = ej.PercentageTextbox.Locale || {} ;
    
    ej.PercentageTextbox.Locale['default'] = ej.PercentageTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	ej.CurrencyTextbox.Locale = ej.CurrencyTextbox.Locale || {} ;
    
    ej.CurrencyTextbox.Locale['default'] = ej.CurrencyTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	
		
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejButton", "ej.Button", {

        element: null,

        model: null,
        validTags: ["button", "input"],
        _setFirst: false,

        _rootCSS: "e-button",
        _requiresID: true,

        defaults: {

            size: "normal",

            type: "submit",

            height: "",

            width: "",

            enabled: true,

            htmlAttributes: {},

            text: null,

            contentType: "textonly",

            imagePosition: "imageleft",

            showRoundedCorner: false,

            cssClass: "",

            prefixIcon: null,

            suffixIcon: null,

            enableRTL: false,

            repeatButton: false,

            timeInterval: "150",

            create: null,

            click: null,

            destroy: null
        },


        dataTypes: {
            size: "enum",
            enabled: "boolean",
            type: "enum",
            showRoundedCorner: "boolean",
            text: "string",
            contentType: "enum",
            imagePosition: "enum",
            prefixIcon: "string",
            suffixIcon: "string",
            cssClass: "string",
            repeatButton: "boolean",
            enableRTL: "boolean",
            timeInterval: "string",
            htmlAttributes: "data"
        },

        disable: function () {
            this.element.addClass("e-disable").attr("aria-disabled", true);
            this.model.enabled = false;
        },

        enable: function () {
            this.element.removeClass("e-disable").attr("aria-disabled", false);
            this.model.enabled = true;
        },

        _init: function () {
            this._cloneElement = this.element.clone();
            this._initialize();
            this._render();
            this._controlStatus(this.model.enabled);
            this._wireEvents(this.model.repeatButton);
            this._addAttr(this.model.htmlAttributes);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else proxy.element.attr(key, value);
                if (key == "disabled" && value == "disabled") proxy.disable();
            });
        },

        _destroy: function () {
            this._off(this.element, "blur", this._btnBlur);
            this.element.removeClass(this.model.cssClass + "e-ntouch e-btn e-txt e-select e-disable e-corner e-widget").removeAttr("role aria-describedby aria-disabled");
            !this._cloneElement.attr("type") && this.element.attr("type") && this.element.removeAttr("type");			
            this.element.removeClass("e-btn-" + this.model.size);
            this.model.contentType && this.model.contentType != "textonly" ? this.element.append(this._cloneElement.text()) && this.imgtxtwrap[0].remove() : "";
            
        },


        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "text":
                        this._setText(options[option]);
                        break;
                    case "prefixIcon":
                        if (!this.element.is("input"))
                        this._setMajorIcon(options[option]);
                        break;
                    case "suffixIcon":
                        if (!this.element.is("input"))
                        this._setMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "timeInterval":
                        this.model.timeInterval = options[option];
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                }
            }
        },


        _setSize: function (val) {
            this.element.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal');
            this.element.addClass("e-btn-" + val);
        },
        _setType: function (val) {
            this.element.prop({ "type": val });
        },

        _setHeight: function (val) {
            this.element.css('height', val);
        },

        _setWidth: function (val) {
            this.element.css('width', val);
        },

        _setText: function (val) {
            if (this.buttonType == "inputButton") {
                this.element.val(val);
            } else {
                if (this.model.contentType == ej.ContentType.TextOnly) {
                    this.element.html(val);
                } else {
                    this.textspan.html(val);
                }
            }
            this.model.text = val;
        },

        _setMajorIcon: function (val) {
            this.majorimgtag.removeClass(this.model.prefixIcon);
            this.majorimgtag.addClass(val);
            this.model.prefixIcon = val;
        },

        _setMinorIcon: function (val) {
            this.minorimgtag.removeClass(this.model.suffixIcon);
            this.minorimgtag.addClass(val);
            this.model.suffixIcon = val;
        },

        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.element.empty();
                this.model.contentType = val;
                if (!this.element.is("input"))
                this._renderButtonNormal();
            }
        },

        _setImagePosition: function (val) {
            if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                this.element.empty();
                this.model.imagePosition = val;
                if (!this.element.is("input"))
                this._renderButtonNormal();
            }
        },

        _setRTL: function (val) {
            if (val) {
                this.element.addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
        },

        _controlStatus: function (value) {
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },

        _setSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
        },

        _initialize: function () {
            if(!ej.isTouchDevice()) this.element.addClass("e-ntouch");
            if (this.element.is("input")) {
                this.buttonType = "inputButton";
            }
            else if ((this.element.is("a")) || (this.element.is("button"))) {
                this.buttonType = "tagButton";
            }
            else {
                this.element.removeClass("e-button");
            }
            if (this.element.attr("type")) {
                this.model.type = this.element.attr("type");
            }
            else
                this._setType(this.model.type);
            this._timeout = null;
        },


        _render: function () {
            this._setSize(this.model.size);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._setRTL(this.model.enableRTL);
            this.element.addClass(this.model.cssClass + " e-btn e-select e-widget").attr("role", "button");
            if (this.buttonType == "inputButton") {
                this.element.addClass("e-txt");
                if ((this.model.text != null) && (this.model.text != "")) {
                    this.element.val(this.model.text);
                } else {
                    this.model.text = this.element.val();
                }
            } else { this._renderButtonNormal(); }
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.element[0].id)
                this.element.attr("aria-describedby", this.element[0].id);
        },

        _renderButtonNormal: function () {
            if ((this.model.text == null) || (this.model.text == "")) {
                this.model.text = this.element.html();
            }
            this.element.empty();
            /*Image and Text*/
            this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
            if (this.model.contentType.indexOf("image") > -1) {
                this.majorimgtag = ej.buildTag('span').addClass(this.model.prefixIcon);
                this.minorimgtag = ej.buildTag('span').addClass(this.model.suffixIcon);
                this.imgtxtwrap = ej.buildTag('span').addClass('e-btn-span');
            }

            if (this.model.contentType == ej.ContentType.TextAndImage) {
                switch (this.model.imagePosition) {
                    case ej.ImagePosition.ImageRight:
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageLeft:
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                    case ej.ImagePosition.ImageBottom:
                        this.majorimgtag.attr("style", "display:inherit");
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageTop:
                        this.majorimgtag.attr("style", "display:inherit");
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                }
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.majorimgtag);
                this.element.append(this.imgtxtwrap);
            } else {
                this.element.addClass("e-txt");
                this.element.html(this.model.text);
            }
        },

        _roundedCorner: function (value) {
            value == true ? this.element.addClass('e-corner') : this.element.removeClass('e-corner');
        },

        _wireEvents: function (val) {
            if (val) {
                this._on(this.element, "mousedown", this._btnRepatMouseClickEvent);
                this._on($(document), 'mouseup', this._mouseUpClick);
                this._on(this.element, "keyup", this._btnRepatKeyUpEvent);
                this._on($(document), "keypress", this._btnRepatKeyDownEvent);

            }
            this._on(this.element, "click", this._btnMouseClickEvent);
            this._on(this.element, "blur", this._btnBlur);
        },

        _btnBlur:function(e){
            this.element.removeClass("e-animate");
        },

        _btnMouseClickEvent: function (e) {
            var self = this;
            this.element.addClass("e-animate");
            if(!self.model.enabled) return false;
            if (!self.element.hasClass("e-disable")) {
                // here aregument 'e' used in serverside events 
                var args = { target: e.currentTarget, e : e , status:self.model.enabled};
				//Trigger _click function to apply scope changes
                self._trigger("_click", args);
                self._trigger("click", args);
            } 
        },

        _btnRepatMouseClickEvent: function (e) {
            var self = this;
            if(!self.model.enabled) return false;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.button == 0) || (e.which == 1)) {

                    self._timeout = setInterval(function () { self._trigger("click", { target: e.currentTarget, status: self.model.enabled }); }, this.model.timeInterval);
                }
            }
        },

        _mouseUpClick: function (event) {
            clearTimeout(this._timeout);
        },

        _btnRepatKeyDownEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.keyCode == 32) || (e.keyCode == 13)) {
                    self._trigger("click", args);
                }
            }
        },

        _btnRepatKeyUpEvent: function (e) {
            if ((e.keyCode == 32) || (e.keyCode == 13)) {
                clearTimeout(this._timeout);
            }
        },
    });


    ej.ContentType = {
		/**  Supports only for text content only */
		TextOnly: "textonly", 
		/** Supports only for image content only */
		ImageOnly: "imageonly", 
		/** Supports image for both ends of the button */
		ImageBoth: "imageboth", 
		/** Supports image with the text content */
		TextAndImage: "textandimage", 
		/** Supports image with both ends of the text */
        ImageTextImage: "imagetextimage"
    };


    ej.ImagePosition = {
		/**  support for aligning text in left and image in right. */
		ImageRight: "imageright", 
		/**  support for aligning text in right and image in left. */
		ImageLeft: "imageleft",
		/**  support for aligning text in bottom and image in top. */
		ImageTop: "imagetop", 
		/**  support for aligning text in top and image in bottom. */
		ImageBottom: "imagebottom"
    };

    ej.ButtonSize = {
		/**  Creates button with inbuilt default size height, width specified */
		Normal : "normal",
		/**  Creates button with inbuilt mini size height, width specified */
		Mini: "mini", 
		/**  Creates button with inbuilt small size height, width specified */
		Small: "small",
		/**  Creates button with inbuilt medium size height, width specified */
		Medium:"medium", 
		/**  Creates button with inbuilt large size height, width specified */
        Large: "large"
    };

    ej.ButtonType = {
		/**  Creates button with inbuilt button type specified */
		Button : "button",
		/**  Creates button with inbuilt reset type specified */
		Reset: "reset", 
		/**  Creates button with inbuilt submit type specified */
		Submit: "submit"
    };
})(jQuery, Syncfusion);
;
/**
* @fileOverview Plugin to style the Html CheckBox elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejCheckBox", "ej.CheckBox", {
        _rootCSS: "e-checkbox",

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["checked", "checkState"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },


        defaults: {

            id: null,

            name: null,

            value: null,

            htmlAttributes: {},

            checked: false,

            enabled: true,

            enableTriState: false,

            showRoundedCorner: false,

            enablePersistence: false,

            cssClass: "",

            text: "",

            enableRTL: false,

            idPrefix: "ej",

            size: "small",

            checkState: "uncheck",

            validationRules: null,

            validationMessage: null,
            validationMessages: null,

            beforeChange: null,

            change: null,

            create: null,

            destroy: null

        },

        dataTypes: {
            id: "string",
            name: "string",
            enablePersistence: "boolean",
            enableTriState: "boolean",
            size: "enum",
            enabled: "boolean",
            idPrefix: "string",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data"
        },
        observables: ["checked", "checkState"],
        checked: ej.util.valueFunction("checked"),
        checkState: ej.util.valueFunction("checkState"),

        _init: function (options) {
            this._cloneElement = this.element.clone();
            var browserInfo = ej.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            this._isIE9 = (browserInfo.name == 'msie' && browserInfo.version == '9.0') ? true : false;
            this._isDevice = this._checkDevice();
            this._setValue();
            this._renderControl();
            this.model.enableRTL && this._setRTL();
            if (this.model.enabled)
                this._wireEvents();
            this._setEnabled(this.model.enabled);
			if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
				this.model.validationMessages= this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            this._addAttr(this.model.htmlAttributes);
            if (this._isIE9 || this._isIE8) {
                // In IE8 and IE9, the text of the checkox will float to next line while the length of the text is high fixed this by adding the following class and procssed with CSS
                this.wrapper.addClass("e-tb-cell");
            }
        },
        _checkDevice: function () {
            return (ej.isDevice() && ej.isTouchDevice());
        },
        _setRTL: function () {
            $(this.maindiv).addClass("e-rtl");
        },
        _initValidator: function () {
            (!this.wrapper.closest("form").data("validator")) && this.wrapper.closest("form").validate();
        },
        _setValidation: function () {
            this.wrapper.find('input').rules("add", this.model.validationRules);
            var validator = this.wrapper.closest("form").data("validator");
            validator = validator ? validator : this.wrapper.closest("form").validate();
            var name = this.wrapper.find('input').attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "name") proxy.element.attr(key, value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._setEnabled(false);
                else if (key == "checked" && value == "checked") {
                    if (proxy.checked() instanceof Array)
                        proxy._updateCheckedItem();
                    else
                        proxy._checked(true);
                }
                else proxy.wrapper.attr(key, value);
            });
        },

        _triggerBeforeChange: function () {
            var data = { isChecked: this._isChecked, isInteraction: false };
            if (true == this._trigger("beforeChange", data)) return false;
        },

        _triggerChange: function () {
            var data = { isChecked: this._isChecked, checkState: this.checkState(), isInteraction: false };
            this._trigger("change", data);
        },

        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "checked":
                        $(this.maindiv).removeClass("e-material-animate");
                        if (this.model.beforeChange) this._triggerBeforeChange();
                        if (this.checked() instanceof Array) {
                            var checkedItemArray = ej.util.getVal(options[prop]);
                            var lastVal = checkedItemArray[checkedItemArray.length - 1];
                            if (this.model.value == lastVal) this._isChecked = true;
                        }
                        else {
                            this._isChecked = ej.util.getVal(options[prop]);
                            this.checked(this._isChecked);
                        }
                        this._isChecked ? this._checked() : this._unChecked();
                        if (this.model.change) this._triggerChange();
                        break;
                    case "enableTriState":
                        if (options[prop]) {
                            this.model.enableTriState = options[prop];
                            this._indeterminateState = options[prop];
                        }
                        break;
                    case "checkState":
                        if (this.model.enableTriState) {
                            if (this.model.beforeChange) this._triggerBeforeChange();
                            this._isChecked = ej.util.getVal(options[prop]);
                            this.checkState(this._isChecked);
                            this._changeState(this._isChecked);
                            this._setCheckBoxState();
                            this.checked(this._isChecked);
                            if (this.model.checkState == "indeterminate")
                                this._setIndeterminate(this._indeterminateState);
                            if (this.checked() instanceof Array)
                                this._updateCheckedItem();
                            else if (options[prop] == "check") this._hiddenInput.removeAttribute("name");
                            else this._hiddenInput.setAttribute("name", this.model.name);
                            if (this.model.change) {
                                if (!(this.checked() instanceof Array)) this._isChecked = this.checkState() == "uncheck" ? false : true;
                                this._triggerChange();
                            }
                        }
                        break;
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        (options[prop]) ? this._setRTL() : $(this.maindiv).removeClass("e-rtl");
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.wrapper.find('input').rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[prop];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
					this.model.validationMessages = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                         break;
					case "validationMessages":
					  this.model.validationMessages = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.element.attr('name', options[prop]);
                        if (!this._isChecked || this.spanImg.hasClass("e-chk-indeter")) this._hiddenInput.setAttribute('name', options[prop]);
                        this.model.name = options[prop];
                        break;
                    case "value": this.element.attr('value', options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[prop]); break;
                    case "enabled": this._setEnabled(options[prop]); break;
                    case "htmlAttributes": this._addAttr(options[prop]); break;
                }
            }
        },

        _destroy: function () {
            this.element.removeClass("e-checkbox e-input");
            !this._cloneElement.attr("name") && this.element.attr("name") && this.element.removeAttr("name");
            !this._cloneElement.attr("value") && this.element.attr("value") && this.element.removeAttr("value");
            this.element.insertBefore(this.wrapper);
            this.wrapper.remove();
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.wrapper.removeClass(this.model.cssClass).addClass(skin);
                $("#" + this.model.idPrefix + this.model.id + "_wrapper").removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setValue: function () {
            this._indeterminateState = false;
            this._isChecked = false;
            var _id = this.element[0].getAttribute("id"), _name = this.element[0].getAttribute('name'), _value = this.element[0].getAttribute('value');
            !ej.isNullOrUndefined(_id) && (this.model.id = _id);
            !ej.isNullOrUndefined(_name) && (this.model.name = _name);
            if (!ej.isNullOrUndefined(_value) && _value != "") this.model.value = _value;
            if (!this.checked() && !ej.isNullOrUndefined(this.element.attr('checked'))) this._isChecked = true;
            ej.isNullOrUndefined(this.model.name) && (this.model.name = this.model.id);
            this.model.enabled = this.model.enabled && !this.element.attr("disabled");
        },

        _setSize: function (val) {
            if (val == ej.CheckboxSize.Medium) {
                $(this.innerdiv).removeClass('e-chkbox-small').addClass('e-chkbox-medium');
                $(this.maindiv).removeClass('e-check-small').addClass('e-check-medium');
				
			}
            else {
                $(this.innerdiv).removeClass('e-chkbox-medium').addClass('e-chkbox-small');
				$(this.maindiv).removeClass('e-check-medium').addClass('e-check-small');
			}
        },

        _setRoundedCorner: function (val) {
            if (val)
                this.span.addClass("e-corner");
            else
                this.span.removeClass("e-corner");
        },

        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },
        _setCheckBoxState: function () {
            if (this.model.enableTriState) {
                if (this.checkState() == "indeterminate")
                    this._indeterminateState = true;
                else if (this.checkState() == "check")
                    this._isChecked = true;
                else if (this.checkState() == "uncheck")
                    this._isChecked = false;
            }
            else if (this.checkState() == "indeterminate")
                this.checkState("uncheck");
        },
        _createElement: function (tagName, attrs) {
            var ele = document.createElement(tagName);
            this._setAttributes(ele, attrs);
            return ele;
        },
        _setAttributes: function (ele, attrs) {
            for (var key in attrs) {
                ele.setAttribute(key, attrs[key]);
            }
        },
        _renderControl: function () {
            this._setCheckBoxState();
            this.maindiv = this._createElement("span", { "class": "e-chkbox-wrap e-widget " + this.model.cssClass, "role": "checkbox", tabindex: 0 });
            if (this._isValid(this.model.id)) {
                this.maindiv.setAttribute("id", this.model.idPrefix + this.model.id);
                this.element[0].setAttribute("id", this.model.id);
            }
            this.innerdiv = document.createElement("div");
            this._setSize(this.model.size);
            this.span = document.createElement("span");
            this.span = $(this.span);
            this.spanImg = this._createElement("span", { "class": "e-chk-image e-icon", "role": "presentation" });
            this.spanImg = $(this.spanImg);
            this.element.addClass("e-input");
            this.model.name = ej.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
		    this.model.value = ej.isNullOrUndefined(this.model.value) ? true : this.model.value;
            this._setAttributes(this.element[0], { "name": this.model.name, "value": this.model.value });
            var hiddenEl = $("#" + this._id + "_hidden")
            // hidden input element will be generated in MVC wrapper
            this._hiddenInput = hiddenEl.length ? hiddenEl[0] : this._createElement("input", { type: "checkbox", value: false, style: "display:none" });
			if (this.element.attr("data-type") == "hidden") this._hiddenInput.setAttribute("type", "hidden");
            this._isValid(this.model.name) && this._hiddenInput.setAttribute("id", this.model.name + "_hidden");

            this._setRoundedCorner(this.model.showRoundedCorner);
            if (this.checked())
                this._setCheckedItem(this.checked());
            if (this._isChecked) {
                this.spanImg.addClass("e-checkmark");
                this.span.addClass("e-chk-act");
                this.maindiv.setAttribute("aria-checked", true);
                this.element.attr("checked", "checked")
            }
            else {
                this.span.addClass("e-chk-inact");
                this.maindiv.setAttribute("aria-checked", false);
                this._hiddenInput.setAttribute("name", this.model.name);
            }
            if (!(this.checked() instanceof Array))
                this.checked(this._isChecked);
            this.span[0].appendChild(this.spanImg[0]);
            this.innerdiv.appendChild(this.span[0]);
            this.element[0].parentNode && this.element[0].parentNode.insertBefore(this.maindiv, this.element[0]);
            this.maindiv.appendChild(this.element[0]);
            this.maindiv.appendChild(this._hiddenInput);
            this.maindiv.appendChild(this.innerdiv);
            this.wrapper = $(this.maindiv);
            this._setTextWrapper(this.model.text);
            this.chkbx = this.element;
            if (this.model.enableTriState == true && this._indeterminateState == true)
                this._setIndeterminate(this._indeterminateState);
            if (this.checked() instanceof Array)
                this._updateCheckedItem();
        },
        _changeState: function (state) {
            if (state == "indeterminate") {
                this.spanImg.removeClass("e-checkmark").addClass("e-stop");
                this.span.removeClass("e-chk-act e-chk-inact").addClass("e-chk-indeter");
                this.wrapper[0].setAttribute("aria-checked", "mixed");
                this.wrapper.find('input').prop('enableTriState', true);
                if (!(this.checked() instanceof Array))
                    this.checked(null);
            }
            else if (state == "check") {
                this.spanImg.removeClass("e-stop").addClass("e-checkmark");
                this.span.removeClass("e-chk-act e-chk-inact e-chk-indeter").addClass("e-chk-act");
                this.wrapper[0].setAttribute("aria-checked", true);
            }
            else if (state == "uncheck") {
                this.spanImg.removeClass("e-checkmark e-stop");
                this.span.removeClass("e-chk-act e-chk-indeter").addClass("e-chk-inact");
                this.wrapper[0].setAttribute("aria-checked", false);
            }
        },

        _setIndeterminate: function (indeter) {
            if (indeter) {
                this.spanImg.removeClass("e-checkmark").addClass("e-stop");
                this.span.removeClass("e-chk-act e-chk-inact").addClass("e-chk-indeter");
                this.wrapper[0].setAttribute("aria-checked", "mixed");
                this.wrapper.find('input').prop('enableTriState', true);
                this.checkState("indeterminate");
                if (!(this.checked() instanceof Array))
                    this.checked(null);
                this._hiddenInput.setAttribute("name", this.model.name);
            }
            else {
                this.span.removeClass("e-chk-indeter");
                this.spanImg.removeClass("e-stop");
                this.wrapper.find('input').removeAttr('enableTriState');
                this.wrapper.find('input').prop('enableTriState', false);
                if (this.checked())
                    this._checked();
                else
                    this._unChecked();
            }
        },

        _setTextWrapper: function (val) {
            if (val != "") {
                this.txtSpan = ej.buildTag("div.e-text", val);
                this.wrapper.append(this.txtSpan);
                this.model.enableRTL && this._setRTL();
            }
        },

        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },

        _setIdAttr: function (val) {
            $("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            this.element[0].setAttribute('id', val);
        },

        _isValid: function (value) {
            return (!ej.isNullOrUndefined(value) && value != "") ? true : false;
        },

        _wireEvents: function () {
            this._on(this.wrapper, "click", this._checkedHandler);
            if (this._isIE8) {
                this._isValid(this.model.id) && this._on($("label[for=" + this.model.id + "]"), "click", function () { this.wrapper.click(); });
            }
            this._on(this.wrapper, "focus", this._focusIn);
            this._on(this.wrapper, "focusout", this._focusOut);
        },


        _unWireEvents: function () {
            this._off(this.wrapper, (this._isDevice && $.isFunction($.fn.tap)) ? "tap" : "click");
            if (this._isIE8) {
                this._isValid(this.model.id) && this._off($("label[for=" + this.model.id + "]"), "click");
            }
            this._off(this.wrapper, "focus");
            this._off(this.wrapper, "focusout");
        },
        _focusIn: function (evt) {
            $(this.wrapper).addClass("e-focus");
            $(this.wrapper).on("keydown", $.proxy(this._checkUnCheck, this));
        },
        _focusOut: function (evt) {
            $(this.wrapper).removeClass("e-focus");
            $(this.wrapper).off("keydown", $.proxy(this._checkUnCheck, this));
        },
        _checkUnCheck: function (evt) {
            //Space bar to check and uncheck
            if (evt.keyCode == 32) {
                evt.preventDefault();
                this._checkedHandler();
            }
        },
        _checkedHandler: function (evt) {
            var data = { isChecked: this._isChecked, isInteraction: true, event: evt };
            if (true == this._trigger("beforeChange", data)) {
                return false;
            }
            if (this.span.hasClass("e-chk-inact")) {
                this._checked();
                if (!(this.checked() instanceof Array))
                    this.checked(true);
                if (this.model.enableTriState) {
                    this._indeterminateState = true;
                    this.checkState("check");
                }
            }
            else if (this.span.hasClass("e-chk-act")) {
                if ((this.model.enableTriState == true) && (this.model.checkState == "check") && (this.model.checked == true)){
                    this._setIndeterminate(true);
                    if (!(this.checked() instanceof Array)) {
                        this.checked(true);
                        this.checkState("indeterminate");
                    }
                } else {
                    this._unChecked();
                    if (!(this.checked() instanceof Array)) {
                        this.checked(false);
                        this.checkState("uncheck");
                    }
                }
            }
            else if (this.span.hasClass("e-chk-indeter")) {
                if (!(this.checked() instanceof Array))
                    this.checked(false);
                else
                    this._isChecked = false;
                this._setIndeterminate(false);
                this._indeterminateState = false;
            }
            if (this.checked() instanceof Array)
                this._updateCheckedItem();
            else
                this._isChecked = this.checked();
            $(this.maindiv).addClass("e-material-animate");
            var data = { isChecked: this._isChecked, checkState: this.checkState(), isInteraction: true, event: evt };
            this._trigger("change", data);
            return true;
        },


        _checked: function () {
            this.span.removeClass("e-chk-inact").addClass("e-chk-act");
            this.spanImg.removeClass("e-stop").addClass("e-checkmark");
            this.wrapper[0].setAttribute("aria-checked", true);
            this.wrapper.find('input[type=checkbox]').prop('checked', true);
            this.checkState("check");
            this._hiddenInput.removeAttribute("name");
        },


        _unChecked: function () {
            this.span.removeClass("e-chk-act e-chk-indeter").addClass("e-chk-inact");
            this.wrapper[0].setAttribute("aria-checked", false);
            this.spanImg.removeClass("e-checkmark e-stop");
            this.wrapper.find('input[type=checkbox]').prop('checked', false);
            this.checkState("uncheck");
            this._hiddenInput.setAttribute("name", this.model.name);
        },

        _setCheckedItem: function (value) {
            if (typeof(value) == "boolean" && !(value instanceof Array))
                this._isChecked = true;
            else if (value instanceof Array && !ej.isNullOrUndefined(this.model.value) && this.model.value != "") {
                for (var item = 0; item < value.length; item++) {
                    if (value[item] == this.model.value)
                        this._isChecked = true;
                }
            }
        },

        _updateCheckedItem: function () {
            var checkedValues = this.model.checked.splice === undefined ? this.model.checked() : this.model.checked;
            if (!ej.isNullOrUndefined(this.model.value) && this.model.value != "" && !this.wrapper.find("span:first").hasClass("e-chk-indeter")) {
                if (($.inArray(this.model.value, this.checked()) < 0) && this.wrapper.find("span:first").hasClass("e-chk-act")) {
                    checkedValues.push(this.model.value);
                    this._isChecked = true;
                    this._hiddenInput.removeAttribute("name");
                }
                else if (($.inArray(this.model.value, this.checked()) > -1) && this.wrapper.find("span:first").hasClass("e-chk-inact")) {
                    this._isChecked = false;
                    checkedValues.splice($.inArray(this.model.value, this.model.checked()), 1);
                    this._hiddenInput.setAttribute("name", this.model.name);
                }
            }
        }, 
 

        disable: function () {
            if (!this.wrapper.hasClass("e-disable")) {
                this.wrapper.addClass("e-disable");
                this.wrapper[0].setAttribute("aria-disabled", true);
                this.element[0].setAttribute("disabled", "disabled");
                if (this._isIE8) this.span.addClass("e-disable");
                this._unWireEvents();
                this.model.enabled = false;
            }
        },

        enable: function () {
            if (this.wrapper.hasClass("e-disable")) {
                this.wrapper.removeClass("e-disable");
                this.wrapper[0].setAttribute("aria-disabled", false);
                this.element.prop("disabled", false);
                if (this._isIE8) this.span.removeClass("e-disable");
                this._wireEvents();
                this.model.enabled = true;
            }
        },

        isChecked: function () {
            if ((this._isChecked != null) && (this._isChecked != undefined))
                return this._isChecked;
        }
    });

    ej.CheckboxSize = {
        /**  Creates checkbox with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates checkbox with inbuilt medium size height, width specified */
        Medium: "medium"
    };

    ej.CheckState = {
        /**  Specifies the Check attribute of the Checkbox */
        Check: "check",
        /**  Specifies the Uncheck attribute of the Checkbox */
        Uncheck: "uncheck",
        /**  Specifies the Indeterminate state of the Checkbox */
        Indeterminate: "indeterminate"
    };
})(jQuery, Syncfusion);;;
/**
* @fileOverview Plugin to style the Toolbar elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejToolbar", "ej.Toolbar", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,

        _rootCSS: "e-toolbar",
        angular: {
            terminal: false
        },


        defaults: {

            height: "",

            width: "",

            enabled: true,

            hide: false,

            disabledItemIndices: [],

            enabledItemIndices: [],

            enableSeparator: false,

            orientation: "horizontal",

            enableRTL: false,

            isResponsive: false,

            showRoundedCorner: false,

            htmlAttributes: {},

            dataSource: null,
			
			Items:{

                id: "id",

                tooltipText: "tooltipText",

                imageUrl: "imageUrl",

                text: "text",

                imageAttributes: "imageAttributes",

                spriteCssClass: "spriteCssClass",

                htmlAttributes: "htmlAttributes",

                group: "group",
				
                template:"template",

                overflow: 'overflow'
            },

            query: null,
		
			responsiveType:"popup",


            fields: {

                id: "id",

                tooltipText: "tooltipText",

                imageUrl: "imageUrl",

                text: "text",

                imageAttributes: "imageAttributes",

                spriteCssClass: "spriteCssClass",

                htmlAttributes: "htmlAttributes",

                group: "group",
				
                template:"template",

                overflow: 'overflow'
            },
            tooltipSettings: {
                associate: "mouseenter",
                showShadow: true,
                position: {
                    stem: { horizontal: "left", vertical: "top" }
                },
                tip: {
                    size: { width: 5, height: 5 },
					adjust: { xValue: 17, yValue: 17 }
                },
                isBalloon: false
            },

            cssClass: "",
			
			targetID : null,

            create: null,

            click: null,

            itemHover: null,

            itemLeave: null,
			
			overflowOpen:null,
			
			overflowClose:null,

            destroy: null

        },


        dataTypes: {
            enabled: "boolean",
            hide: "boolean",
            enableSeparator: "boolean",
            disabledItemIndices: "data",
            enabledItemIndices: "data",
            orientation: "enum",
            enableRTL: "boolean",
            showRoundedCorner: "boolean",
            isResponsive: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            cssClass: "string",
            htmlAttributes: "data",
			targetID: "string",
			responsiveType:"enum"
        },



        hide: function () {
            if (!this.model.enabled && (this.element.css("display") == "none")) return false;
            this.element.css("display", "none");
			this.model.hide = true;
        },

        show: function () {
            if (!this.model.enabled && (this.element.css("display") != "none")) return false;
            this.element.css("display", "block");
			this.model.hide = false;
        },


        _init: function () {
            if(this.model.targetID != null)
				this.element.html($("#" + this.model.targetID).find('ul,ol'));
			this._cloneElement = $(this.element).clone();
			//Stored the local & remote data source processed value. 
			 
			this._localDataSource=null;
            if (this.model.dataSource != null) {
                this._generateTemplate();
            }
			else if(this.model.Items != null)
			{
			  this._generateTemplate();
			}
            (!(this.model.dataSource instanceof ej.DataManager)) && this._initialize();
            this._renderTooltip(this.model.tooltipSettings);
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this.model.width = options[option];
                        this._setWidth();
                        this._bindUnbindWidth();
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "disabledItemIndices": {
                        this._disableItemByIndex(options[option]);
						options[option] = this.model.disabledItemIndices;
                        break;
                    }
                    case "enabledItemIndices": {
						this._enableItemByIndex(options[option]); 
						break;
					}
                    case "isResponsive":
                        this.model.isResponsive = options[option];
                        if(this.model.isResponsive) {
							this._responsiveLayout();
							this._renderTooltip(this.model.tooltipSettings);
						}
						else
							this._removeResponsive();
                        break;
                    case "hide":
                        this._controlVisibleOptions(options[option]);
                        break;
                    case "orientation":
                        this._setOrientation(options[option]);
                        this.model.orientation = options[option];
                        this._wireResizing();
                        break;
					case "tooltipSettings":
					    this.model.tooltipSettings = $.extend(true, this.model.tooltipSettings, options[option]);
						this._renderTooltip(this.model.tooltipSettings);
						break;
                    case "enableRTL":
                        this._enableRTL(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "enableSeparator":
                        this.model.enableSeparator = options[option];
                        this._renderToolbarSeparator();
                        break;
                    case "fields":
                        $.extend(this.model.fields, options[option]);
                        break;
                    case "query":
                        this.model.query = options[option];
                        break;
                    case "dataSource":
                        for (var optio in options) {
                            if (optio == "fields") $.extend(this.model.fields, options[optio]);
                            if (optio == "query") this.model.query = options[optio];
                        }
                        this._refreshTagItems(option, options[option]);
                        break;
					case "Items":
					 
					   $.extend(this.model.Items, options[option]);
					   this._refreshTagItems(option, options[option]);
					   break;
					case "targetID":
						this.model.targetID = options[option];
						this._setTargetID();					
						break;
					
                }
            }
        },
		
		_setTargetID: function() {
			this.element.removeAttr('role tabindex aria-disabled style');			
			$(this._spantag).remove();
			$(this._liTemplte).remove();			
			this._liTemplte = this._tipRes = null;		
			this.element.removeClass('e-widget e-box e-toolbarspan e-rtl');
			this.element.find('ul,ol').removeClass('e-ul e-horizontal e-vertical e-separator e-comnrtl');
			this.element.find('li').removeClass('e-tooltxt e-comnrtl');
			this.element.find('li').removeAttr('aria-label');
			this._init();
		},
		
        _refreshTagItems: function (key, value) {
            this.model[key] = value;
            this.element.empty();
            this._generateTemplate();
            this._initialize();
        },

        _setHeight: function (val) {
            this.element.css('height', val);
        },

        _setWidth: function () {
            if (this.model.width == "auto") {
                var itemswidth = parseFloat(this.element.css('border-left-width')) + parseFloat(this.element.css('border-right-width')),
                listElement = this.element.find('ul').children('li'), listUl = this.element.find('ul'),resEle;
				if(this.model.responsiveType=="inline")
				 resEle = this.element.find('.e-arrow-sans-down');
				 else
				resEle = this.element.find('.e-toolbar-res-arrow');
				
				for(var i=0, len = listUl.length; i < len; i++) {           // calculate separator width also
                    if (listUl[i] != null && $(listUl[i]).hasClass('e-separator'))
                        itemswidth += parseFloat(listUl.eq(i).css('border-right-width')) + parseFloat(listUl.eq(i).css('border-left-width'));
                }
                if (resEle[0] != null)
				 if(this.model.responsiveType=="inline")
                   itemswidth += Math.round(this.element.find('.e-arrow-sans-down').outerWidth()) + 8; // 8px for position
				 else
				   itemswidth += Math.round(this.element.find('.e-toolbar-res-arrow').outerWidth()) + 8;// 8px for position
                
                for (var i = 0, len = listElement.length; i < len; i++) {
                    if (listElement[i] != null)
                        itemswidth += Math.round(listElement.eq(i).outerWidth());
                }
                this.element.css("width", Math.ceil(itemswidth));
            } else
                this.element.css('width', this.model.width);
        },
        _bindUnbindWidth: function () {
            (this.model.width != "auto") ? this._off($(window), "resize", this._widthHandler) : this._on($(window), "resize", this._widthHandler);
        },
        _widthHandler: function (e) {
            this._setWidth(this.model.width);
        },

        _setOrientation: function (value) {
            if (value != ej.Orientation.Vertical) {
                this.element.removeClass(this.model.cssClass).addClass("e-toolbarspan " + this.model.cssClass);
                this.itemsContainer.removeClass("e-ul e-vertical").addClass("e-ul e-horizontal");
            }
            else {
                this.element.removeClass("e-toolbarspan " + this.model.cssClass).addClass(this.model.cssClass);
                this.itemsContainer.removeClass("e-ul e-horizontal").addClass("e-ul e-vertical");
            }
            this.items.addClass("e-tooltxt");
			
        },

        _reSizeHandler: function () {
			if (this._isResized && this._liTemplte.children().length > 0) {
                var showContainer = this.element.children("ol.e-show, ul.e-show");
                var hiddenContainer = this._liTemplte.children("ol.e-show, ul.e-show");
                if (showContainer.length > 0 || hiddenContainer.length > 0) {
                    $(this._liTemplte.children()).appendTo(this.element);
                } else {
                    $(this._liTemplte.children()).insertBefore($(this.element).find("span.e-res-pos"));
                }
                this._renderToolbarSeparator();
			  if(this.model.responsiveType!="inline")
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
            }
			this._elementWidth = (typeof window.getComputedStyle == "function") ? parseFloat(window.getComputedStyle(this.element[0]).width) : this.element.width()-1; // -1 for IE8 get exact width of an element no border and margin            
            this._liWidth = this._spanWidth;
            var visibleContainer = this.element.children("ol.e-show:visible, ul.e-show:visible");
            var itemContainer = this.element.children("ol:visible:not(.e-show), ul:visible:not(.e-show)");
            this._spantag.removeClass("e-display-block").addClass("e-display-none");
            this._ensureOverflow(visibleContainer);
            var liWidth = 0;
            for (var i = 0; i < this.itemsContainer.length; i++) {
                liWidth += $(this.itemsContainer[i]).outerWidth(true);
            }
            if (liWidth > this.element.width()) {
                this._ensureOverflow(itemContainer);
            }
            if (this.model.responsiveType=="inline")
            {
                this._liTemplte.removeClass('e-normal');
                this._liTemplte.css("width",this.element.width());
            }
            this._isResized = true;
        },

        _ensureOverflow: function (itemContainer) {
            for (var i = 0; i < itemContainer.length; i++) {
                this._liWidth += $(itemContainer[i]).outerWidth(true) + 8;
                if (this._liWidth >= this.element.width()) {
                    if (!this._spantag.hasClass("e-display-block"))
                        this._spantag.removeClass("e-display-none").addClass("e-display-block");
                    this._spantag.addClass('e-res-pos');
                    this._liTemplte.addClass('e-normal');
                    if (this._spantag.outerWidth(true) != this._spanOuterWidth) {
                        var diff = this._spantag.outerWidth(true) - this._spantag.outerWidth();
                        if (this._liWidth - ($(itemContainer[i]).outerWidth(true) + 8) + diff >= this._elementWidth) {
                            this._liTemplte.append(itemContainer[i - 1]);
                        }
                    }
                    this._liTemplte.append(itemContainer[i]);
                }
            }
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popup);
        },
        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _btnMouseClick: function (e) {
            var args, btnpos, btnposx, btnposy, poscur = 1, eleWidth = this.element.outerWidth(), eleHeight = this.element.outerHeight(), resWidth = $(this._liTemplte).outerWidth(), winWidth = $(window).width(), winLeft = $(window).scrollLeft();
            if (!$(e.currentTarget).hasClass("e-disable")) {
                /*Context Menu Functionality*///need to write enableRTL
              var maxZ = this._getZindexPartial();
                btnpos = this._getOffset(this.element);
                btnposx = this.model.enableRTL ? btnpos.left : (btnpos.left + eleWidth - resWidth);
                btnposy = btnpos.top + eleHeight - poscur + 2;
                btnposx = btnposx < winLeft ? winLeft + poscur : ((btnposx + resWidth) > (winWidth + winLeft) ? winWidth - resWidth + winLeft - poscur : btnposx);
                if (this._contstatus) {
                    this._liTemplte.addClass("e-display-none");
					if(this.model.responsiveType=="inline")
					   this._spantag.removeClass("e-active");
                    this._contstatus = false;	
                   args = { currentTarget: e.currentTarget, clientX:e.clientX ,clientY:e.clientY , cancel:e.cancellable};					
					this._trigger("overflowClose",args);
                  					
                } else {
				   this._liTemplte.removeClass("e-display-none");
                   if(this.model.responsiveType!="inline")
				     this._liTemplte.css({ "top": btnposy + "px", "left": btnposx + "px", "z-index": maxZ });
				   if(this.model.responsiveType=="inline")	
                      this._spantag.addClass("e-active");
                    this._contstatus = true;
					args = { currentTarget: e.currentTarget, clientX:e.clientX ,clientY:e.clientY , cancel:e.cancellable};
					this._trigger("overflowOpen",args);
				 if(this.model.responsiveType!="inline")
                    this._on(ej.getScrollableParents(this.element), "scroll", this._hidecontext);
                    this.element.bind("click", $.proxy(this._hidecontext, this));
                }
                if ((this._contstatus)&&(this.model.responsiveType!="inline"))
                    this._on($(document), "mouseup", this._documentClick);
					 if(!this._contstatus)
				 this._off($(document), "mouseup", this._documentClick);
                this._removeListHover();
            }
        },

        _hidecontext: function (e) {
            if ((!$(e.target).is($("#" + this.element[0].id + "_target")))&&(this.model.responsiveType!="inline")) {
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
                this.element.unbind("click", $.proxy(this._hidecontext, this));
                this._off(ej.getScrollableParents(this.element), "scroll", this._hidecontext);
                this._off($(document), "mouseup", this._documentClick);
            }
        },

        _documentClick: function (e) {
            if (!$(e.target).is($("#" + this.element[0].id + "_target")) && !($(e.target).closest("div#" + this.element[0].id + "_hiddenlist").length != 0 || $(e.target).parents().hasClass("e-ddl-popup"))) {
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
				var args = { currentTarget: e.currentTarget, clientX: e.clientX, clientY: e.clientY, cancel: e.cancellable };
                this._trigger("overflowClose", args);
                this._off($(document), "mouseup", this._documentClick);
            }
        },

        _setSkin: function (skin) {
            this.element.removeClass(this.model.cssClass).addClass(skin);
			var tooltipCssClass = "e-toolbarTooltip " + skin; 
			this._subControlsSetModel("cssClass", tooltipCssClass);
        },
		_subControlsSetModel : function (prop, value){
			!ej.isNullOrUndefined(this._tipToolbar) && $(this.target).ejTooltip("option", prop, value);
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("option", prop, value);
		},

        _destroy: function () {
            this.element.html("");
			!ej.isNullOrUndefined(this._tipToolbar) && $(this.target).ejTooltip("destroy");
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("destroy");
            this._cloneElement.removeClass('e-toolbar e-js');
            this.element.replaceWith(this._cloneElement);
            this._liTemplte && this._liTemplte.remove();
            this._unWireResizing();
        },

        _initialize: function () {
            this.element.attr({ "role": "toolbar", "tabindex": "0" });
            var liList = this.element.children().find('li');
            this._focusEnable = true;
            this._renderControl();
            this._responsiveLayout();
            this._wireEvents();
        },
        _responsiveLayout: function () {
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.isResponsive && (this.model.orientation == "horizontal")) {
                if (!ej.isNullOrUndefined(this._liTemplte)) {
                    !ej.isNullOrUndefined(this._tipRes) && this._tipRes.destroy();
                    $(this._liTemplte).remove();
                }
				this._spantag = $("<span id='" + this.element[0].id + "_target' class='e-icon e-toolbar-res-arrow e-rel-position e-display-block' unselectable='on'></span>");
				if(this.model.responsiveType=="inline")
				{
				this._spantag.removeClass("e-toolbar-res-arrow").addClass("e-inlinearrow e-arrow-sans-down");
                }
                var visibleContainer = this.element.children("ol.e-show, ul.e-show");
                if (visibleContainer.length > 0) {
                    this.element[0].insertBefore(this._spantag[0], this.element[0].childNodes[0]);
                } else {
                    this._spantag.appendTo(this.element);
                }
				this._liTemplte = $("<div id='" + this.element[0].id + "_hiddenlist' class='e-responsive-toolbar e-display-none e-abs-position " + $(this.element)[0].className + "'></div>");
                if(this.model.responsiveType=="inline")
                   this._liTemplte.removeClass("e-abs-position").addClass("e-inline");				 
                this._spanWidth = this._spantag.outerWidth(true) + 8; // 8px from right of span 
                if (this.model.enableRTL) this._liTemplte.addClass('e-rtl');
                this._isResized = false;
				this._elementWidth = (typeof window.getComputedStyle == "function") ? parseFloat(window.getComputedStyle(this.element[0]).width) : this.element.width()-1; // -1 for IE8 get exact width of an element no border and margin            
				this._liWidth = this._spanWidth;
				for (var i = 0; i < this.itemsContainer.length; i++) {
                this._liWidth += $(this.itemsContainer[i]).outerWidth(true);
				}
                if (this._liWidth > this._elementWidth)
                this._reSizeHandler();
                else 
				this._spantag.removeClass("e-display-block").addClass("e-display-none");
				if(this.model.responsiveType=="inline")
				  $(this.element[0]).append(this._liTemplte);
				else
                  $('body').append(this._liTemplte);
                this._renderTooltip(this.model.tooltipSettings);
            }
            this._on($("#" + this.element[0].id + "_target"), "mousedown", this._btnMouseClick);
            this._wireResizing();
            this._controlVisibleOptions(this.model.hide);
            this._enableRTL(this.model.enableRTL);
			this._disabledItems = this.model.disabledItemIndices; 
            this._controlStatus(this.model.enabled);
			this.model.disabledItemIndices = this._disabledItems;
            if (this.model.disabledItemIndices.length != 0)
                this._disableItemByIndex(this.model.disabledItemIndices);
            if (this.model.enabledItemIndices.length != 0)
                this._enableItemByIndex(this.model.enabledItemIndices);
            this._setWidth();
        },
        _removeResponsive: function () {
            $(this._spantag).remove();
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("destroy");
            var list = $(this._liTemplte).children('ul');
            $(this._liTemplte).detach();
            $(this.element).append(list);
            this.itemsContainer = this.element.children("ol,ul");
            this.items = this.itemsContainer.children('li');
            this._off(this.items, "mouseup");
            this._off(this.items, "mousedown");
            this._off(this.element, "mousedown");
            this._wireEvents();
            this._wireResizing();
            this._setWidth();
        },

        _controlVisibleOptions: function (value) {
            value != false ? this.hide() : this.show();
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _roundedCorner: function (value) {
            if (value) {
                this.element.addClass('e-corner');
                this._liTemplte && this._liTemplte.addClass('e-corner');
            } else {
                this.element.removeClass('e-corner');
                this._liTemplte && this._liTemplte.removeClass('e-corner');
            }
			this._subControlsSetModel("showRoundedCorner", value);
        },

        _generateTemplate: function () {
            var proxy = this, queryPromise;
            this.element.css("visibility", "hidden");
            if (this.model.dataSource instanceof ej.DataManager) {
                queryPromise = this.model.dataSource.executeQuery(this.model.query);
                queryPromise.done(function (e) {
                    proxy._generateGroup(e.result);
                    proxy._initialize();
                    proxy.element.css("visibility", "");
                });
            } else if(this.model.dataSource!=null)
			{ 
			    proxy._generateGroup(proxy.model.dataSource);
                proxy.element.css("visibility", "");
               
            }
			else {
                proxy._generateGroup(proxy.model.Items);
                proxy.element.css("visibility", "");
            }
        },
        _generateGroup: function (value) {
            var proxy = this;
			this._localDataSource=value;
            var y = -1;
            var groupArray = [];
            for (var i = 0; i < value.length; i++) {
                if (this._isNewGroup(value[i][this.model.fields.group], groupArray)) {
                    groupArray[++y] = value[i][this.model.fields.group];
                    var index = -1;
                    proxy.itemsSource = [];
                    for (var x = i; x < value.length; x++) {
                        if (value[i][this.model.fields.group] == value[x][this.model.fields.group]) {
                            proxy.itemsSource[++index] = value[x];
                        }
                    }
                    proxy.element.append(proxy._generateTagitems());
                }
            }

        },
        _isNewGroup: function (value, group) {
            if (!group)
                return true;
            for (var i = 0; i < group.length; i++) {
                if (value == group[i])
                    return false;
            }
            return true;
        },


        _renderControl: function () {
            this.element.addClass("e-widget e-box");
            this._renderToolbarItems();
            this._addAttr(this.model.htmlAttributes);
            this._setOrientation(this.model.orientation);
            this._renderToolbarSeparator();
            this._setHeight(this.model.height);
            this._bindUnbindWidth();
        },

        _renderToolbarItems: function () {
            this.target = this.element[0];
            this.itemsContainer = this.element.children("ol,ul");
            for (var i = 0; i < this.itemsContainer.length; i++) {
                $(this.itemsContainer[i]).attr("role", "list");
            }
            this.itemsContainer.children("ol,ul").remove();
            this.items = this.itemsContainer.children('li');
            for (var i = 0; i < this.items.length; i++) {
                $(this.items[i]).attr("tabindex", "-1");
                $(this.items[i]).attr("role", "listitem");
                if (ej.isNullOrUndefined($(this.items[i]).attr("title")) && ej.isNullOrUndefined($(this.items[i]).attr("aria-label")))
                    $(this.items[i]).attr("aria-label", this.items[i].id);
            }
            this._liCount = this.items.length;
        },

        _generateTagitems: function () {
            var list, i;
            list = this.itemsSource;
            this.ultag = ej.buildTag('ul');
            this.ultag.attr("role","list");
            for (i = 0; i < list.length; i++) {
                if (list[i][this.model.fields.overflow] == "show") {
                    this.ultag.addClass('e-show');
                }
                this.ultag.append(this._generateLi(list[i]));
            }
            return this.ultag;
        },

        _generateLi: function (toolbarItem) {
            var litag, imgtag, divtag, i;
            litag = ej.buildTag('li');
            if (toolbarItem[this.model.fields.id])
                litag.attr('id', toolbarItem[this.model.fields.id]);
            else 
                (toolbarItem[this.model.fields.text]) && litag.attr('id', toolbarItem[this.model.fields.text]);
            if (toolbarItem[this.model.fields.tooltipText])
                litag.attr('title', toolbarItem[this.model.fields.tooltipText]);
            if ((toolbarItem[this.model.fields.imageUrl]) && (toolbarItem[this.model.fields.imageUrl] != "")) {
                //Creating the image tag
                imgtag = ej.buildTag('img.e-align', '', {}, { 'src': toolbarItem[this.model.fields.imageUrl], 'alt': toolbarItem[this.model.fields.text] });
                if (toolbarItem[this.model.fields.imageAttributes]) this._setAttributes(toolbarItem[this.model.fields.imageAttributes], imgtag);
                litag.append(imgtag);
            }
            if ((toolbarItem[this.model.fields.spriteCssClass]) && (toolbarItem[this.model.fields.spriteCssClass] != "")) {
                //Creating the Sprite image tag
                divtag = ej.buildTag('div.e-align ' + toolbarItem[this.model.fields.spriteCssClass] + ' e-spriteimg');
                litag.append(divtag);
            }
            if ((toolbarItem[this.model.fields.text]) && (toolbarItem[this.model.fields.text] != "")) {
                //Creating text Content inside the  tag
                litag.append(toolbarItem[this.model.fields.text]);
            }
            if (toolbarItem[this.model.fields.htmlAttributes]) this._setAttributes(toolbarItem[this.model.fields.htmlAttributes], litag);
              if(toolbarItem[this.model.fields.template])
			{
			
			divtag=ej.buildTag('div .e-align' ,toolbarItem[this.model.fields.template]);
			litag.append(divtag);
			}
            return litag;
        },


        _setAttributes: function (data, element) {
            for (var key in data) {
                $(element).attr(key, data[key]);
            }
        },

        _renderToolbarSeparator: function () {
            var i, len;
            if (this.model.enableSeparator) {
                for (i = 0, len = this.itemsContainer.length - 1; i < len; i++) {
                    $(this.itemsContainer[i]).addClass("e-separator");
                }
				if (this.itemsContainer.length == 1) {
                        for (i = 0, len = this.itemsContainer[0].children.length; i < len; i++) {
                            if (i == len - 1) $(this.itemsContainer[0].children[i]).removeClass("e-separator");
                            else
                                $(this.itemsContainer[0].children[i]).addClass("e-separator");
                        }
                    }    
            } else {
                this.itemsContainer.removeClass('e-separator').find('.e-separator').removeClass('e-separator');
            }
            this._setWidth();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },


        _enableRTL: function (value) {
            if (value) {
                this.element.addClass('e-rtl');
                this.items.addClass('e-comnrtl');
                if (this.model.orientation == ej.Orientation.Horizontal) {
                    this.itemsContainer.addClass('e-comnrtl');
                }
                if (this._liTemplte) this._liTemplte.addClass('e-rtl');
            } else {
                this.element.removeClass('e-rtl');
                this.items.removeClass('e-comnrtl');
                if (this.model.orientation == ej.Orientation.Horizontal) {
                    this.itemsContainer.removeClass('e-comnrtl');
                }
                if (this._liTemplte) this._liTemplte.removeClass('e-rtl');
            }
            this.model.enableRTL = value;
			this._subControlsSetModel("enableRTL", value);
            this._renderToolbarSeparator();
        },

        _renderTooltip: function (options) {
            var model =$.extend(true, {}, options); 
			if(!ej.isNullOrUndefined(model.cssClass))//which holds the css for the tooltip
				model.cssClass = model.cssClass + " e-toolbarTooltip " + this.model.cssClass;
			else 
				model.cssClass = "e-toolbarTooltip " + this.model.cssClass;
            model.enableRTL = this.model.enableRTL;
			model.showRoundedCorner = this.model.showRoundedCorner;
			model.target ="li[data-content], li[title]" ;
			model.beforeOpen = this._showTooltip;
            this._tipToolbar = $(this.target).ejTooltip(model).data("ejTooltip");
			if(this.model.isResponsive && !ej.isNullOrUndefined(this._liTemplte))
				this._tipRes = $(this._liTemplte).ejTooltip(model).data("ejTooltip");
        },
		_showTooltip : function (e){
			var currentItem = $(e.event.currentTarget), targetItem = e.event.target;
			if (currentItem.hasClass("e-disable"))
				e.cancel = true;
		
		},
		_hideTooltip : function (){
			//tap to select the items, mousemove triggered after the tap, so private variable isHided of Tooltip is set as false
			if(!ej.isNullOrUndefined(this._tipToolbar)){ this._tipToolbar.hide(); this._tipToolbar._isHidden= false;}
			if(!ej.isNullOrUndefined(this._tipRes)){ this._tipRes.hide(); this._tipRes._isHidden = false;}
		},
        _addOverlay: function (element) {
            for (var i = 0; i < element.length; i++) {
                if (!$(element[i]).hasClass('e-disable')) {
                    $(element[i]).addClass('e-disable');
                    var ele = ej.buildTag("div.e-item-overlay");
                    $(element[i]).append(ele);
                }
            }
        },
        _removeOverlay: function (element) {
            for (var i = 0; i < element.length; i++) {
                $(element[i]).children(".e-item-overlay").remove();
            }
        },



        disableItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            if (!current.hasClass("e-disable")) {
                current.attr("aria-disabled", true).removeAttr("aria-label");
                this._addOverlay(current);
            }
            current.removeClass("e-hover e-active").attr("data-aria-selected", false);
        },


        enableItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.removeClass("e-disable").attr("aria-disabled", false).removeClass('e-disable');
            this._removeOverlay(current);
        },


        disableItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.disableItem(lielement);
        },

        enableItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.enableItem(lielement);
        },

        _enableItemByIndex: function (indices) {
            var index;
            if (!this.model.enabled) return false;
            if (indices.length != 0) {
                for (var i = 0; i < indices.length; i++) {
                    if ($.inArray(indices[i], this.model.disabledItemIndices) > -1) {
                        index = $.inArray(indices[i], this.model.disabledItemIndices);
                        this.enableItem(this.items[this.model.disabledItemIndices[index]]);
						this.model.disabledItemIndices.splice(index, 1);
                    }

                }
            }
        },

        _disableItemByIndex: function (indices) {
			if (!this.model.enabled) return false;
			this._disabledItems = this.model.disabledItemIndices; 
			for(var i=0; i< indices.length; i++){
				if ($.inArray(indices[i], this.model.disabledItemIndices) < 0)
					this._disabledItems.push(parseInt(indices[i]));
			}
			for (var i = 0; i < this.items.length; i++) {
				if ($.inArray(i, this.model.disabledItemIndices) > -1)
					this.disableItem(this.items[i]);
			}
			this.model.disabledItemIndices = this._disabledItems ;
        },

        disable: function () {
            if (this.element.attr("aria-disabled") == "true") return false;
            this.element.attr("aria-disabled", true).removeAttr("aria-label");
            this._addOverlay(this.items);
            if (this.model.isResponsive && (this.model.orientation == "horizontal"))
                this._spantag.addClass("e-disable");
            this.model.enabled = false;
			this._subControlsSetModel("enabled", false);
        },


        enable: function () {
			this.model.disabledItemIndices = [];
            if (this.element.attr("aria-disabled") == "false") return false;
            this.items.removeClass("e-disable");
            this._removeOverlay(this.items);
            this.element.attr("aria-disabled", false);
            if (this.model.isResponsive && (this.model.orientation == "horizontal"))
                this._spantag.removeClass("e-disable");
            this.model.enabled = true;
			this._subControlsSetModel("enabled", true);
        },

        refresh: function() {
            this._reSizeHandler();
        },
        
        selectItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.addClass("e-active").attr("data-aria-selected", true);
            this._activeItem = $(this.items).index(current);
        },


        deselectItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.removeClass("e-active").attr("data-aria-selected", false);
        },

        selectItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.selectItem(lielement);
        },


        deselectItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.deselectItem(lielement);
        },


        removeItem: function (lielement) {
            this.model.disabledItemIndices = [];
            var current = $(lielement);
			var j=0;
            if ((current == null) || (current.length <= 0)) return;
            current.remove();
            this.items = this.itemsContainer.children('li');
			for(var i=0; i< this.items.length ; i++){
				if($(this.items[i]).hasClass("e-disable"))
					this.model.disabledItemIndices [j++] = i;
			}
        },


        removeItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.removeItem(lielement);
        },
        _wireResizing: function () {
            (this.model.isResponsive && (this.model.orientation == "horizontal")) ? $(window).bind('resize', $.proxy(this._reSizeHandler, this)) : this._unWireResizing();
        },

        _unWireResizing: function () {
            $(window).unbind('resize', $.proxy(this._reSizeHandler, this));
        },

        _wireEvents: function () {
            this._on(this.element, "mousedown", this._clickEventHandler);
            this._on(this.element, "focus", this._focusElement);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.items, "mouseenter", this._onItemHover);
            this._on(this.items, "mouseleave", this._onItemLeave);
            this._on(this.items, "mousedown", this._onItemClick);
            this._on(this.items, "mouseup", this._onItemClick);
        },

        _onItemHover: function (e) {
            var currentItem = $(e.currentTarget), targetItem = e.target;
            if (!currentItem.hasClass("e-disable")) {
                this.items.removeClass("e-hover");
                currentItem.addClass("e-hover").focus();
               var args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                this._trigger("itemHover", args);
            }
			else
				clearTimeout(this._tipToolbar.mouseTimer);
        },

        _onItemClick: function (e) {
            if ($(e.currentTarget).hasClass('e-disable') || e.which!=1) return false; //e.which for Opera
            var currentItem = e.currentTarget, targetItem = e.target;
			if(!ej.isDevice()) this._hideTooltip();
            if (e.type == "mousedown") {
                this._focusEnable = false;
                $(currentItem).addClass('e-active');
                this._focusedItem = this._currentItem = $(currentItem);
				
            }
            else if (e.type == "mouseup") {
				if($(currentItem).hasClass("e-active"))
				{
                 this._removeSelection();
				 if (!$(currentItem).hasClass("e-disable")) {
                    var args = { currentTarget: currentItem, text: $(currentItem).attr("data-content"), target: targetItem, status: this.model.enabled, event: e };
                    if (this.model.isResponsive && this._contstatus && $(currentItem).closest('.e-responsive-toolbar').length > 0)
                        this._activeItem = this._liTemplte.find('.e-tooltxt').index(currentItem);
                    else
                        this._activeItem = $(this.items).index(currentItem);
                    this._trigger("click", args);
                }
				}
               
            }
        },

        _onItemLeave: function (e) {
            var currentItem = $(e.currentTarget), targetItem = e.target;
            if (!currentItem.hasClass("e-disable")) {
                this._removeSelection();
                currentItem.removeClass("e-hover");
               var args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                this._trigger("itemLeave", args);
            }
        },

        _onKeyPress: function(e) {
            var code, items, active, toFocus;
            code = (e.keyCode) ? e.keyCode : (e.which) ? e.which : e.charCode;
            if (this.model.isResponsive && this._liTemplte.find('.e-tooltxt').length > 0) {
                this._keyPressed = true;
                this._items = (this._contstatus) ? this._liTemplte.find('.e-tooltxt') : this.element.find('.e-tooltxt');
                items = this._items.filter('.e-tooltxt:visible:not(.e-hidden, .e-disable)');
            } else {
                this._keyPressed = false;
                items = this.items.filter('.e-tooltxt:visible:not(.e-hidden, .e-disable)');
            }
            if (this._focusedItem) {
                active = this._focusedItem;
                this._focusedItem = null;
            } else
                active = items.filter('.e-hover');
            if(e.type == 'keydown') {
                if (code == 9 && e.shiftKey && $(items[items.index(active) - 1]).length > 0) {
                    e.preventDefault();
                    toFocus = $(items[items.index(active) - 1]);
                } else if (code == 9 && $(items[items.index(active) + 1]).length > 0 && !e.shiftKey) {
                    e.preventDefault();
                    toFocus = $(items[items.index(active) + 1]);
                } else if (((code == 38 || code == 39) && this.model.orientation != ej.Orientation.Vertical) || ((code == 39 || code == 40) && this.model.orientation == ej.Orientation.Vertical)) {
                    e.preventDefault();
                    toFocus = $(items[items.index(active) + 1]).length > 0 ? $(items[items.index(active) + 1]) : items.first();
                } else if (((code == 37 || code == 40) && this.model.orientation != ej.Orientation.Vertical) || ((code == 37 || code == 38) && this.model.orientation == ej.Orientation.Vertical)) {
                    e.preventDefault();
                    toFocus = $(items[items.index(active) - 1]).length > 0 ? $(items[items.index(active) - 1]) : items.last();
                } else if (code == 33 || code == 36) {
                    e.preventDefault();
                    toFocus = items.first();
                } else if (code == 34 || code == 35) {
                    e.preventDefault();
                    toFocus = items.last();
                }
                if (toFocus) {
                    this._removeListHover();
                    toFocus[0].focus();
                    toFocus.addClass('e-hover');
                }
            } else {
                switch(code) {
                    case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: break;
                    case 13: case 32:
                        e.preventDefault();
                        if (!active[0])
                            break;
                        var args = { currentTarget: active[0], target: $(active)[0], status: this.model.enabled, event: e };
                        this._trigger("click", args);
                        break;
                    case 27:
                        e.preventDefault();
                        this.element.blur();
                        break;                    
                }
            }
        },

        _removeListHover: function () {
            $(this.items).removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = this._getActiveItem();
            if (!activeItem.hasClass('e-disable'))
                activeItem.addClass("e-hover").focus();
        },

        _getActiveItem: function () {
            if (this.model.isResponsive && this._keyPressed)
                return $(this._items[this._activeItem]);
            else
                return $(this.items[this._activeItem]);
        },

        _targetBlur: function (e) {
            this.element.focusout().removeClass("e-focus");
            this._removeListHover();
            this._off(this.element, "keyup", this._onKeyPress)
                ._off(this.element, "keydown", this._onKeyPress);
            this._trigger("focusOut");
        },

        _clickEventHandler: function (e) {
            this._clicked = true;
        },

        _removeSelection: function() {
            (this._currentItem && this._currentItem.attr("data-aria-selected") != "true") && this._currentItem.removeClass('e-active');
        },

        _focusElement: function (e) {
		    if(!this.element.hasClass("e-focus")){
				this.element.addClass("e-focus");
				this._on(this.element, "keyup", this._onKeyPress)
					._on(this.element, "keydown", this._onKeyPress);
				if (!this._focusEnable) {
					this._focusEnable = true;
					return;
				}
			}
            this._removeListHover();
            this._activeItem = (this._clicked) ? -1 : 0;
            if (this._getActiveItem().hasClass('e-disable') || this._getActiveItem().is(':hidden'))
                this._activeItem = $(this.items).filter('li:not([class*="e-disable"])').first().index();
            this._addListHover();
        },
    });
ej.Toolbar.ResponsiveType = {
        /**  Renders overflow popup with hamburger icon as usual. */
        Popup:"popup",
        /**  Renders overflow popup  below the toolbar itself on clicking the arrow. */
        Inline: "inline"
    };
	
})(jQuery, Syncfusion);


;
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function ($) {
    var ejTooltip = (function (_super) {
        __extends(ejTooltip, _super);
        function ejTooltip(element, options) {
            _super.call(this);
            this._rootCSS = "e-tooltip";
            this._setFirst = false;
            this.PluginName = "ejTooltip";
            this.id = "null";
            this.model = null;
            this.defaults = {
                height: "auto",
                width: "auto",
                enabled: true,
                content: null,
                containment: "body",
                target: null,
                title: null,
                closeMode: "none",
                autoCloseTimeout: 4000,
                position: {
                    stem: { horizontal: "center", vertical: "bottom" },
                    target: { horizontal: "center", vertical: "top" }
                },
                associate: "target",
                collision: "flipfit",
                showShadow: false,
                cssClass: null,
                animation: {
                    effect: "none",
                    speed: 0
                },
                isBalloon: true,
                showRoundedCorner: false,
                enableRTL: false,
                allowKeyboardNavigation: true,
                tip: {
                    size: {
                        width: 20,
                        height: 10
                    },
                    adjust: {
                        xValue: 0,
                        yValue: 0
                    }
                },
                trigger: "hover",
                create: null,
                click: null,
                destroy: null,
                hover: null,
                tracking: null,
                beforeOpen: null,
                beforeClose: null,
                open: null,
                close: null,
            };
            this.dataTypes = {
                enabled: "boolean",
                closeMode: "enum",
                autoCloseTimeout: "number",
                trigger: "enum",
                position: {
                    stem: "data",
                    target: "data"
                },
                associate: "enum",
                collision: "enum",
                showShadow: "boolean",
                animation: {
                    effect: "enum",
                    speed: "number"
                },
                isBalloon: "boolean",
                showRoundedCorner: "boolean",
                enableRTL: "boolean",
                allowKeyboardNavigation: "boolean",
                tip: {
                    size: {
                        width: "number",
                        height: "number"
                    },
                    adjust: {
                        xValue: "number",
                        yValue: "number"
                    }
                }
            };
            this.isTrack = true;
            this._isCancel = false;
            this._isHidden = true;
            this.arrowValue = { left: 0, top: 0, width: 0, height: 0, display: null };
            this.tooltipPos = { width: 0, height: 0, left: 0, top: 0, bottom: 0, right: 0, position: "absolute" };
            this.targetPos = { width: 0, height: 0, left: 0, top: 0, bottom: 0, right: 0, position: "absolute" };
            this.mouseTimer = null;
            this.positionTarget = null;
            this.positionTooltip = null;
            this.containerSize = null;
            this._createTitle = function () {
                this.tooltipTitle = ej.buildTag('div.e-def e-header', " ", {}, {});
                this.tooltipHeader = ej.buildTag('div', " ", {}, {});
                $(this.tooltipTitle).html(this.model.title).appendTo(this.tooltipHeader);
            };
            if (element) {
                if (!element["jquery"]) {
                    element = $("#" + element);
                }
                if (element.length) {
                    return $(element).ejTooltip(options).data(this.PluginName);
                }
            }
        }
        ejTooltip.prototype.setModel = function (opt, forceSet) {
            this.setModel(opt, forceSet);
        };
        ejTooltip.prototype.option = function (opt, forceSet) {
            this.option(opt, forceSet);
        };
        ejTooltip.prototype.triggerEvents = function (eventName, eventProp) {
            var temp;
            switch (eventName) {
                case "click":
                    var clickArg = eventProp;
                    temp = this._trigger(eventName, clickArg);
                    break;
                case "hover":
                    var hoverArg = eventProp;
                    temp = this._trigger(eventName, hoverArg);
                    break;
                case "tracking":
                    var trackArg = eventProp;
                    temp = this._trigger(eventName, trackArg);
                    break;
                case "beforeOpen":
                    var beforeOpenArg = eventProp;
                    temp = this._trigger(eventName, beforeOpenArg);
                    break;
                case "open":
                    var openArg = eventProp;
                    temp = this._trigger(eventName, openArg);
                    break;
                case "beforeClose":
                case "close":
                    var closeArg = eventProp;
                    temp = this._trigger(eventName, closeArg);
                    break;
            }
            return temp;
        };
        ejTooltip.prototype.enable = function (val) {
            if (this.tooltip.hasClass("e-disable")) {
                this.model.enabled = true;
                this.tooltip.removeClass("e-disable");
            }
        };
        ejTooltip.prototype.disable = function (val) {
            if (!this.tooltip.hasClass("e-disable")) {
                this.model.enabled = false;
                this.tooltip.addClass("e-disable");
            }
        };
        ejTooltip.prototype.show = function (targetElement, func) {
            if (this.model.enabled) {
                if (ej.isNullOrUndefined(targetElement)) {
                    var target = (this.model.target == null) ? this.element : $(this.element).find(this.model.target + ":first");
                    this._positionElement(target);
                }
                else {
                    this._positionElement(targetElement);
                }
                if (!ej.isNullOrUndefined(func)) {
                    if (typeof func === "string") {
                        $(this.tooltip).show(func);
                    }
                    else {
                        if (typeof func === "function") {
                            func.call.apply(this.tooltip);
                        }
                    }
                }
                else {
                    this._showTooltip();
                }
            }
        };
        ejTooltip.prototype.hide = function (func) {
            if (this.model.enabled) {
                if (!ej.isNullOrUndefined(func)) {
                    if (typeof func === "string") {
                        $(this.tooltip).hide(func);
                    }
                    else if (typeof func === "function") {
                        func.call.apply(this.tooltip);
                    }
                }
                else {
                    this._hideTooltip();
                }
            }
        };
        ejTooltip.prototype._destroy = function () {
            this.mouseTimer && clearTimeout(this.mouseTimer);
            this.timer && clearTimeout(this.timer);
            $(this.tooltip).remove();
            this.tooltip = null;
        };
        ejTooltip.prototype._setModel = function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "enabled":
                        this._enabled(options[option]);
                        break;
                    case "content":
                        this._setContent(options[option]);
                        break;
                    case "title":
                        this.model.title = options[option];
                        if (this.model.title == null) {
                            $(this.tooltipHeader).remove();
                            this.tooltipHeader = null;
                            this.tooltipTitle = null;
                            if (this.model.closeMode === ej.Tooltip.CloseMode.Sticky)
                                this._iconRender();
                        }
                        else
                            (ej.isNullOrUndefined(this.tooltipHeader)) ? this._createHeader() : $(this.tooltipTitle).html(this.model.title);
                        this.tooltipPos.height = $(this.tooltip).outerHeight();
                        break;
                    case "associate":
                        this.model.associate = options[option];
                        this._wireMouseEvents(false);
                        this._wireMouseEvents(true);
                        break;
                    case "position":
                        this._setPosition(options[option]);
                        break;
                    case "collision":
                        this.model.collision = options[option];
                        break;
                    case "closeMode":
                        if (typeof options[option] !== "undefined") {
                            this.model.closeMode = options[option];
                            if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky)
                                this._iconRender();
                            else {
                                $(this.tooltipClose).remove();
                                this.tooltipClose = null;
                            }
                            this.tooltipPos.height = $(this.tooltip).outerHeight();
                        }
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "showShadow":
                        this._shadowEffect(options[option], this.model.position);
                        break;
                    case "isBalloon":
                        if (!ej.isNullOrUndefined(options[option])) {
                            this.model.isBalloon = options[option];
                            if (!this.model.isBalloon) {
                                $(this.tip).remove();
                                this.tip = null;
                            }
                            else
                                this._renderArrow();
                        }
                        break;
                    case "animation":
                        var val = options[option];
                        this.model.animation = $.extend(true, this.model.animation, val);
                        if (this.model.animation.effect != ej.Tooltip.Effect.None) {
                            this._off($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
                            this._off($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
                        }
                        else if (this.model.animation.effect == ej.Tooltip.Effect.None) {
                            this._on($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
                            this._on($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
                        }
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "target":
                        this._wireTriggerEvents(false);
                        this.model.target = options[option];
                        this._wireTriggerEvents(true);
                        this._renderTarget();
                        break;
                    case "trigger":
                        this._setTrigger(options[option]);
                        break;
                    case "showRoundedCorner":
                        this.model.showRoundedCorner = options[option];
                        this._roundedCorner(options[option]);
                        break;
                    case "allowKeyboardNavigation":
                        this.model.allowKeyboardNavigation = options[option];
                        if (!this.model.allowKeyboardNavigation) {
                            this._off($(window), "keydown", this._keyDown);
                        }
                        else {
                            this._on($(window), "keydown", this._keyDown);
                        }
                        break;
                }
            }
        };
        ejTooltip.prototype._enabled = function (val) {
            (val) ? this.enable(val) : this.disable(val);
            this.model.enabled = val;
        };
        ejTooltip.prototype._shadowEffect = function (val, position) {
            this.model.showShadow = val;
            var shadowEffect = null;
            $(this.tooltip).removeClass("e-tooltipShadowLeft e-tooltipShadowRight");
            if (this.model.showShadow) {
                if (this.model.isBalloon) {
                    switch (position.stem.horizontal) {
                        case "center":
                            shadowEffect = (position.stem.vertical == "top") ? "e-tooltipShadowLeft" : (position.stem.vertical == "bottom") ? "e-tooltipShadowRight" : "e-tooltipShadowLeft";
                            break;
                        case "right":
                            shadowEffect = (position.target.horizontal == "center" && position.stem.vertical == "top") ? "e-tooltipShadowLeft" : "e-tooltipShadowRight";
                            break;
                        case "left":
                            shadowEffect = (position.target.horizontal == "center" && position.stem.vertical == "bottom") ? "e-tooltipShadowRight" : "e-tooltipShadowLeft";
                            break;
                    }
                }
                else
                    shadowEffect = "e-tooltipShadowLeft";
                $(this.tooltip).addClass(shadowEffect);
            }
        };
        ejTooltip.prototype._setContent = function (val) {
            this.model.content = val;
            $(this.tooltipContent).html(this.model.content);
            this.tooltipPos.height = $(this.tooltip).outerHeight();
            this.tooltipPos.width = $(this.tooltip).outerWidth();
        };
        ejTooltip.prototype._setPosition = function (val) {
            this.model.position.stem = $.extend(true, this.model.position.stem, val.stem);
            this.model.position.target = $.extend(true, this.model.position.target, val.target);
        };
        ejTooltip.prototype._setTrigger = function (val) {
            this._wireTriggerEvents(false);
            this.model.trigger = val;
            this._wireTriggerEvents(true);
        };
        ejTooltip.prototype._init = function () {
            this.id = this.element[0].id;
            this.positionTarget = $.extend(true, {}, this.model.position.target);
            this.positionTooltip = $.extend(true, {}, this.model.position.stem);
            this.tipSize = $.extend(true, {}, this.model.tip.size);
            this._initialize();
            this._render();
            this.enable(this.model.enabled);
            this._wireEvents(true);
        };
        ejTooltip.prototype._initialize = function () {
            if (ej.isNullOrUndefined(this.model.target)) {
                if (ej.isNullOrUndefined(this.model.content) && (!ej.isNullOrUndefined(this.element.attr("title")))) {
                    this.model.content = this.element.attr("title");
                    this.element.attr("data-content", this.model.content);
                    this.element.removeAttr("title");
                }
            }
            else
                this._renderTarget();
        };
        ejTooltip.prototype._wireEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            this._wireTriggerEvents(val);
            if (this.model.allowKeyboardNavigation)
                this[wire]($(window), "keydown", this._keyDown);
            (this.model.target != null) ? this[wire](this.element, "scroll", this.model.target, this._hideTooltip) : this[wire](this.element, "scroll", this._hideTooltip);
            this[wire]($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
            this[wire]($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
            this[wire]($(window), "resize", this._hideTooltip);
            this[wire]($(window), "touchend", this._docTouchEndHandler);
        };
        ejTooltip.prototype._wireTriggerEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            if (this.model.trigger == ej.Tooltip.Trigger.Focus)
                (this.model.target != null) ? this[wire](this.element, "blur", this.model.target, this._hideTooltip) : this[wire](this.element, "blur", this._hideTooltip);
            else
                (this.model.target != null) ? this[wire](this.element, ej.isDevice() ? "touchstart" : "mouseleave", this.model.target, this._onMouseOut) : this[wire](this.element, ej.isDevice() ? "touchstart" : "mouseleave", this._onMouseOut);
            this._wireMouseEvents(val);
            var triggerEvent = (this.model.trigger == ej.Tooltip.Trigger.Click) ? (ej.isDevice() ? "touchstart" : "click") : (this.model.trigger == ej.Tooltip.Trigger.Focus) ? (ej.isDevice() ? "touchstart" : "focus") : (ej.isDevice() ? "touchstart" : "mouseenter");
            (this.model.target != null) ? this[wire](this.element, triggerEvent, this.model.target, this._targetHover) : this[wire](this.element, triggerEvent, this._targetHover);
        };
        ejTooltip.prototype._wireMouseEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            if (this.model.associate == ej.Tooltip.Associate.MouseEnter || this.model.associate == ej.Tooltip.Associate.MouseFollow)
                (this.model.target != null) ? this[wire](this.element, ej.isDevice() ? "touchstart" : "mousemove", this.model.target, this._tooltipMove) : this[wire](this.element, ej.isDevice() ? "touchstart" : "mousemove", this._tooltipMove);
        };
        ejTooltip.prototype._render = function () {
            this.tooltip = ej.buildTag("div.e-tooltip-wrap e-widget", "", {}, { role: "tooltip", 'aria-readonly': 'true', 'aria-hidden': 'true', 'aria-describedby': this.id + '_content', 'id': this.id + '_Main' });
            this.tooltipInter = ej.buildTag("div.e-tipContainer", "", {}, {});
            this.tooltip.append(this.tooltipInter);
            if (this.model.isBalloon)
                this._renderArrow();
            $(this.model.containment).append(this.tooltip);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._createHeader();
            this._tooltipContent();
            if (this.model.cssClass)
                this.tooltip.addClass(this.model.cssClass);
            if (this.model.showRoundedCorner)
                this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableRTL)
                this._setRTL(this.model.enableRTL);
            $(this.tooltip).css({ "top": "auto", "left": "auto" });
            this.tooltipPos = { width: $(this.tooltip).outerWidth(), height: $(this.tooltip).outerHeight(), left: $(this.tooltip).offset().left, top: $(this.tooltip).offset().top, position: "absolute" };
            if (ej.isNullOrUndefined(this.model.target)) {
                this._containerCalc(this.element);
                this._positionElement(this.element);
            }
        };
        ejTooltip.prototype._containerCalc = function (target) {
            if (ej.isNullOrUndefined(target))
                target = this.element;
            var containerElement = { left: 0, top: 0 };
            var childElement = $(target).offset();
            this.containerSize = {
                height: (this.model.containment == "body") ? $(window).innerHeight() || document.documentElement.clientHeight || document.body.clientHeight : $(this.model.containment).innerHeight(),
                width: (this.model.containment == "body") ? $(window).innerWidth() || document.documentElement.clientWidth || document.body.clientWidth : $(this.model.containment).innerWidth()
            };
            this.containerSize.left = (this.model.containment != "body") ? ($(this.model.containment).css("position") == "static") ? ($(this.model.containment).offset().left - $(this.model.containment).offsetParent().offset().left) : 0 : 0;
            this.containerSize.top = (this.model.containment != "body") ? ($(this.model.containment).css("position") == "static") ? ($(this.model.containment).offset().top - $(this.model.containment).offsetParent().offset().top) : 0 : 0;
            childElement.left -= (this.model.containment != "body") ? (($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset().left : $(this.model.containment).offset().left) : 0;
            childElement.top -= (this.model.containment != "body") ? (($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset().top : $(this.model.containment).offset().top) : 0;
            this.targetPos.left = childElement.left;
            this.targetPos.top = childElement.top;
        };
        ejTooltip.prototype._setHeight = function (val) {
            this.model.height = val;
            (!isNaN(+val) && isFinite(val)) ? $(this.tooltip).css("height", val + "px") : $(this.tooltip).css("height", val);
            this.tooltipPos.height = $(this.tooltip).outerHeight();
        };
        ejTooltip.prototype._setWidth = function (val) {
            this.model.width = val;
            if (this.model.width != "auto") {
                val = (!isNaN(+val) && isFinite(val)) ? val + "px" : val;
                $(this.tooltip).css("max-width", val);
                $(this.tooltip).css("min-width", "0px");
            }
            $(this.tooltip).css("width", val);
            this.tooltipPos.height = $(this.tooltip).outerHeight();
        };
        ejTooltip.prototype._setRTL = function (val) {
            this.model.enableRTL = val;
            val ? this.tooltip.addClass("e-rtl") : this.tooltip.removeClass("e-rtl");
        };
        ejTooltip.prototype._setSkin = function (skin) {
            if (this.model.cssClass != skin) {
                this.tooltip.removeClass(this.model.cssClass).addClass(skin);
                this.model.cssClass = skin;
            }
        };
        ejTooltip.prototype._roundedCorner = function (val) {
            (this.model.showRoundedCorner) ? this.tooltip.addClass("e-corner") : this.tooltip.removeClass("e-corner");
        };
        ejTooltip.prototype._renderArrow = function () {
            if (ej.isNullOrUndefined(this.tip)) {
                this.tip = ej.buildTag('div.e-arrowTip', " ", { 'id': this.id + "_eTip" }, {});
                $(this.tip).append("<div class='e-arrowTipOuter'></div>").append("<div class='e-arrowTipInner'></div>");
                $(this.tip).insertBefore(this.tooltipInter);
            }
        };
        ejTooltip.prototype._adjustArrow = function (position) {
            var leftValue, topValue, tooltipWidth = $(this.tooltip).width(), tooltipHeight = $(this.tooltip).height();
            var positionTooltip = position.stem, positionTarget = position.target;
            var arrow = { "tipHeight": 0, "tipWidth": 0 };
            if (positionTarget.horizontal == "right" || positionTarget.horizontal == "left") {
                leftValue = (positionTooltip.horizontal == "left") ? -(this.model.tip.size.height) : (positionTooltip.horizontal == "right") ? tooltipWidth : ((tooltipWidth) / 2 - (this.tipSize.width / 2));
                if (positionTooltip.horizontal != "center")
                    topValue = (positionTooltip.vertical == "top") ? 5 : (positionTooltip.vertical == "center") ? ((tooltipHeight / 2) - (this.tipSize.width / 2)) : ((tooltipHeight - 5) - this.tipSize.width);
                else
                    topValue = (positionTooltip.vertical == "top") ? -this.tipSize.height : (positionTooltip.vertical == "bottom") ? tooltipHeight : ((this.tooltipPos.height / 2) - (this.tipSize.width / 2));
                arrow = this._arrowBinding(position, "horizontal");
            }
            else {
                topValue = (positionTooltip.vertical == "top") ? -this.tipSize.height : (positionTooltip.vertical == "bottom") ? tooltipHeight : ((tooltipHeight / 2) - (this.tipSize.width / 2));
                if (positionTooltip.vertical == "center")
                    leftValue = (positionTooltip.horizontal == "left") ? -(this.model.tip.size.height) : tooltipWidth;
                else
                    leftValue = (positionTooltip.horizontal == "left") ? 10 : (positionTooltip.horizontal == "center") ? ((this.tooltipPos.width) / 2 - (this.tipSize.width / 2)) : ((tooltipWidth - 10) - this.tipSize.width);
                arrow = this._arrowBinding(position, "vertical");
            }
            this.arrowValue.left = leftValue;
            this.arrowValue.top = topValue;
            $(this.tip).css({ height: arrow.tipHeight + "px", width: arrow.tipWidth + "px", left: leftValue + "px", top: topValue + "px", display: (positionTooltip.horizontal == "center" && positionTooltip.vertical == "center") ? "none" : "block" });
        };
        ejTooltip.prototype._arrowBinding = function (position, arrowType) {
            var positionTooltip = position.stem, condition = (arrowType == "horizontal") ? (positionTooltip.horizontal != "center") : (positionTooltip.vertical == "center");
            var tipWidth, tipHeight, borderColor = $(this.tooltip).css("border-top-color"), backgroudColor = $(this.tooltip).css("background-color"), arrowOuterSize = this.model.tip.size.height, arrowInterSize = this.model.tip.size.height - 1, arrowCalculation = { "border-top": "none", "border-bottom": "none", "border-right": "none", "border-left": "none" };
            if (condition) {
                tipWidth = this.model.tip.size.height;
                tipHeight = this.model.tip.size.width;
                $(this.tip).find(".e-arrowTipOuter").css(this._arrow(position, arrowOuterSize, borderColor, arrowCalculation, "horizontal"));
                $(this.tip).find(".e-arrowTipInner").css(this._arrow(position, arrowInterSize, backgroudColor, arrowCalculation, "horizontal"));
            }
            else {
                tipWidth = this.model.tip.size.width;
                tipHeight = this.model.tip.size.height;
                $(this.tip).find(".e-arrowTipOuter").css(this._arrow(position, arrowOuterSize, borderColor, arrowCalculation, "vertical"));
                $(this.tip).find(".e-arrowTipInner").css(this._arrow(position, arrowInterSize, backgroudColor, arrowCalculation, "vertical"));
            }
            return { tipHeight: tipHeight, tipWidth: tipWidth };
        };
        ejTooltip.prototype._arrow = function (position, size, color, arrowCalculation, arrowType) {
            var positionTooltip = position.stem, innerLeft = (arrowType == "horizontal") ? (positionTooltip.horizontal == "right") ? "0px" : "1px" : "1px", innerTop = (arrowType == "horizontal") ? "1px" : (positionTooltip.vertical == "bottom") ? "0px" : "1px";
            arrowCalculation["border-top"] = (arrowType == "horizontal") ? size + "px solid transparent" : (positionTooltip.vertical == "bottom") ? (size + "px solid " + color) : "none";
            arrowCalculation["border-bottom"] = (arrowType == "horizontal") ? size + "px solid transparent" : (positionTooltip.vertical == "top") ? (size + "px solid " + color) : "none";
            arrowCalculation["border-right"] = (arrowType == "horizontal") ? (positionTooltip.horizontal == "left") ? (size + "px solid " + color) : "none" : size + "px solid transparent";
            arrowCalculation["border-left"] = (arrowType == "horizontal") ? (positionTooltip.horizontal == "right") ? (size + "px solid " + color) : "none" : size + "px solid transparent";
            if (size == this.model.tip.size.height - 1) {
                arrowCalculation["left"] = innerLeft;
                arrowCalculation["top"] = innerTop;
            }
            return arrowCalculation;
        };
        ejTooltip.prototype._iconRender = function () {
            if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky) {
                if (!ej.isNullOrUndefined(this.tooltipClose))
                    $(this.tooltipClose).remove();
                this.tooltipClose = ej.buildTag("div .e-icon", " ", {}, { 'id': "_closeIcon" });
                (this.model.title != null) ? $(this.tooltipClose).insertAfter(this.tooltipTitle).addClass("e-close") : $(this.tooltipClose).insertBefore(this.tooltipInter).addClass("e-cross-circle");
                this._on($(this.tooltipClose), "click", this._hideTooltip);
            }
        };
        ejTooltip.prototype._renderTarget = function () {
            this.targetElement = $(this.element).find(this.model.target);
            for (var i = 0; i < this.targetElement.length; i++) {
                if (!ej.isNullOrUndefined($(this.targetElement[i]).attr("title"))) {
                    this.targetElement[i].setAttribute("data-content", this.targetElement[i].title);
                    this.targetElement[i].removeAttribute("title");
                }
            }
        };
        ejTooltip.prototype._tooltipContent = function () {
            this.tooltipContent = ej.buildTag('div.e-tipcontent e-def', "", {}, { 'id': this.id + '_content' });
            $(this.tooltipContent).html(this.model.content).addClass("e-def");
            (this.model.title != null) ? $(this.tooltipContent).insertAfter(this.tooltipHeader) : $(this.tooltipContent).appendTo(this.tooltipInter);
        };
        ejTooltip.prototype._positionElement = function (target) {
            this.tooltipPos.width = $(this.tooltip).outerWidth();
            this.tooltipPos.height = $(this.tooltip).outerHeight();
            this.targetPos.width = $(target).outerWidth();
            this.targetPos.height = $(target).outerHeight();
            this._containerCalc(target);
            if (this.model.associate == ej.Tooltip.Associate.Window)
                this._browserPosition();
            else if (this.model.associate == ej.Tooltip.Associate.Axis)
                this._axisPosition();
            else if (this.model.associate == ej.Tooltip.Associate.Target)
                this._tooltipPosition(this.model.position);
            if (this.model.collision != ej.Tooltip.Collision.None && this.model.associate == ej.Tooltip.Associate.Target)
                this._calcCollision(this.model.position, target);
        };
        ejTooltip.prototype._browserPosition = function () {
            if (this.model.containment == "body") {
                this.containerSize = {
                    height: $(window).innerHeight() || document.documentElement.clientHeight || document.body.clientHeight,
                    width: $(window).innerWidth() || document.documentElement.clientWidth || document.body.clientWidth
                };
                var position = $.extend(true, {}, this.model.position);
                var calPosition = { position: "absolute", left: "auto", top: "auto", bottom: "auto", right: "auto" }, offsetTop, offsetLeft;
                if (!ej.isNullOrUndefined(this.tip))
                    $(this.tip).css({ "display": "none" });
                (this.model.position.target.horizontal == "right") ? calPosition.right = 0 : (this.model.position.target.horizontal == "left") ? calPosition.left = 0 : (calPosition.left = (this.containerSize.width / 2) - (this.tooltipPos.width / 2));
                (this.model.position.target.vertical == "top") ? (calPosition.top = 0) : (this.model.position.target.vertical == "center") ? (calPosition.top = ((this.containerSize.height / 2) - (this.tooltipPos.height / 2))) : calPosition.bottom = 0;
                if (this.model.showShadow)
                    this._shadowEffect(this.model.showShadow, position);
                $(this.tooltip).css(calPosition);
            }
        };
        ejTooltip.prototype._tooltipMove = function (event) {
            if (this.model.closeMode == ej.Tooltip.CloseMode.None && this.model.enabled) {
                var proxy = this;
                if (this._isCancel)
                    return;
                if (this.model.associate == ej.Tooltip.Associate.MouseFollow)
                    this._mousePosition(event);
                else if (this.model.associate == ej.Tooltip.Associate.MouseEnter) {
                    clearTimeout(this.mouseTimer);
                    this.mouseTimer = setTimeout(function () {
                        if (proxy.isTrack)
                            proxy._mousePosition(event);
                    }, 300);
                }
            }
        };
        ejTooltip.prototype._mousePosition = function (event) {
            var eventPageX, eventPageY;
            if (event.type == "touchstart") {
                event.preventDefault();
                eventPageX = event.touches[0].pageX;
                eventPageY = event.touches[0].pageY;
            }
            else if (event.type == "mousemove") {
                eventPageX = event.pageX;
                eventPageY = event.pageY;
            }
            this.isCollision = true;
            this._containerCalc(event.currentTarget);
            var tipGapX = 0, tipGapY = 0, tipSize = 0, positionTooltip = $.extend(true, {}, this.model.position.stem), position = $.extend(true, {}, this.model.position), containerElement = { left: 0, top: 0 }, calcPosition = { left: eventPageX, top: eventPageY }, childElement = { left: eventPageX, top: eventPageY }, containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            var targetLeft = (this.model.containment != "body") ? (eventPageX - $(this.model.containment).offset().left) : eventPageX, targetTop = (this.model.containment != "body") ? (eventPageY - $(this.model.containment).offset().top) : eventPageY;
            position.target.horizontal = position.target.vertical = "center";
            if (this.model.containment != "body")
                containerElement = ($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset() : $(this.model.containment).offset();
            childElement.left -= containerElement.left;
            childElement.top -= containerElement.top;
            while (this.isCollision) {
                calcPosition = $.extend(true, {}, childElement);
                var tipY = (this.model.isBalloon) ? (positionTooltip.vertical == "top" || positionTooltip.vertical == "bottom") ? (5 + (this.tipSize.height / 2)) : 0 : 0, tipX = (this.model.isBalloon) ? (positionTooltip.horizontal == "right" || positionTooltip.horizontal == "left") ? (10 + (this.tipSize.width / 2)) : 0 : 0;
                tipGapX = (this.model.tip.adjust.xValue != 0) ? this.model.tip.adjust.xValue : 7;
                tipGapY = (this.model.tip.adjust.yValue != 0) ? this.model.tip.adjust.yValue : 10;
                tipSize = (this.model.isBalloon) ? (positionTooltip.horizontal != "center") ? this.model.tip.size.height : (positionTooltip.vertical != "center") ? this.model.tip.size.height : 0 : 2;
                calcPosition.left += (positionTooltip.horizontal == "right") ? -this.tooltipPos.width : (positionTooltip.horizontal == "left") ? 0 : -(this.tooltipPos.width / 2);
                calcPosition.top += (positionTooltip.vertical == "bottom") ? -this.tooltipPos.height : (positionTooltip.vertical == "top") ? 0 : -(this.tooltipPos.height / 2);
                calcPosition.left += (positionTooltip.vertical != "center") ? ((positionTooltip.horizontal == "right") ? tipX : (positionTooltip.horizontal == "left") ? -tipX : 0) : 0;
                calcPosition.left += (positionTooltip.vertical == "center") ? (positionTooltip.horizontal == "right") ? -(tipSize) : (positionTooltip.horizontal == "left") ? +(tipSize + tipGapX) : 0 : 0;
                calcPosition.top += (positionTooltip.vertical == "top") ? +(tipSize + tipGapY) : (positionTooltip.vertical == "bottom") ? -(tipSize) : 0;
                if (this.targetElement != event.currentTarget) {
                    this.targetElement = event.currentTarget;
                    if (calcPosition.left < containerLeft || (calcPosition.left + this.tooltipPos.width > (containerLeft + this.containerSize.width)))
                        this.positionTooltip.horizontal = (targetLeft >= this.tooltipPos.width) ? "right" : ((this.containerSize.width - targetLeft) >= this.tooltipPos.width) ? "left" : "center";
                    if (calcPosition.top < containerTop || ((calcPosition.top + this.tooltipPos.height) > (this.containerSize.height + containerTop)))
                        this.positionTooltip.vertical = (targetTop >= this.tooltipPos.height) ? "bottom" : ((this.containerSize.height - targetTop) >= this.tooltipPos.height) ? "top" : "center";
                }
                if (this.positionTooltip.horizontal != positionTooltip.horizontal || this.positionTooltip.vertical != positionTooltip.vertical) {
                    this.isCollision = true;
                    positionTooltip = $.extend(true, {}, this.positionTooltip);
                }
                else {
                    this.isCollision = false;
                    $(this.tooltip).css({ top: calcPosition.top + "px", left: calcPosition.left + "px", position: "absolute", right: "auto", bottom: "auto" });
                    position.stem = $.extend(true, {}, this.positionTooltip);
                    if (this.model.showShadow)
                        this._shadowEffect(this.model.showShadow, position);
                    if (this.model.isBalloon)
                        this._adjustArrow(position);
                    this._showTooltip();
                    if (this.model.associate == ej.Tooltip.Associate.MouseEnter)
                        this.isTrack = false;
                    if (this.model.associate == ej.Tooltip.Associate.MouseFollow) {
                        if (this.triggerEvents("tracking", { position: this.model.position, event: event }))
                            return;
                    }
                }
            }
        };
        ejTooltip.prototype._axisPosition = function () {
            var position = $.extend(true, {}, this.model.position);
            if (typeof this.model.position.target.horizontal == 'number')
                var leftValue = (this.model.position.target.horizontal).toString();
            if (typeof this.model.position.target.vertical == 'number')
                var topValue = (this.model.position.target.vertical).toString();
            var offsetLeft = parseInt(leftValue), offsetTop = parseInt(topValue);
            if (!ej.isNullOrUndefined(this.tip))
                $(this.tip).css({ "display": "none" });
            if (this.model.showShadow)
                this._shadowEffect(this.model.showShadow, position);
            if (this.model.isBalloon)
                this._adjustArrow(position);
            if (isFinite(offsetLeft) && isFinite(offsetTop))
                $(this.tooltip).css({ top: offsetTop, left: offsetLeft, position: "absolute" });
        };
        ejTooltip.prototype._tooltipPosition = function (position) {
            var tipSize = 0, tipGap = 0, tipAdjustment = 0, positionTooltip = $.extend(true, {}, position.stem), positionTarget = $.extend(true, {}, position.target);
            var calcPosition = $.extend(true, {}, this.targetPos);
            var tipY = (positionTooltip.vertical === "top" || positionTooltip.vertical === "bottom") ? (5 + (this.tipSize.width / 2)) : 0, tipX = (positionTooltip.horizontal === "right" || positionTooltip.horizontal === "left") ? (10 + (this.tipSize.width / 2)) : 0, tipSize = (this.model.isBalloon) ? (positionTooltip.horizontal !== "center") ? this.model.tip.size.height : (positionTooltip.vertical !== "center") ? this.model.tip.size.height : 0 : 0;
            var tipGapX = (this.model.tip.adjust.xValue != 0) ? this.model.tip.adjust.xValue : (this.model.isBalloon) ? 0 : 2, tipGapY = (this.model.tip.adjust.yValue != 0) ? this.model.tip.adjust.yValue : (this.model.isBalloon) ? 0 : 2;
            calcPosition.left += (positionTarget.horizontal === "right") ? this.targetPos.width : (positionTarget.horizontal === "left") ? 0 : (this.targetPos.width / 2);
            calcPosition.top += (positionTarget.vertical === "bottom") ? this.targetPos.height : (positionTarget.vertical === "top") ? 0 : (this.targetPos.height / 2);
            calcPosition.left += (positionTooltip.horizontal === "right") ? -this.tooltipPos.width : (positionTooltip.horizontal === "left") ? 0 : -(this.tooltipPos.width / 2);
            calcPosition.top += (positionTooltip.vertical === "bottom") ? -this.tooltipPos.height : (positionTooltip.vertical === "top") ? 0 : -(this.tooltipPos.height / 2);
            calcPosition.left += (positionTarget.horizontal !== "center") ? (positionTooltip.horizontal === "right") ? -tipSize : (positionTooltip.horizontal === "left") ? tipSize : 0 : (positionTooltip.vertical === "center") ? (positionTooltip.horizontal === "right") ? -tipSize : (positionTooltip.horizontal === "left") ? tipSize : 0 : 0;
            calcPosition.top += (positionTarget.horizontal === "center") ? ((positionTooltip.vertical === "bottom") ? -tipSize : (positionTooltip.vertical === "top") ? tipSize : 0) : (positionTooltip.horizontal === "center") ? (positionTooltip.vertical === "bottom") ? -tipSize : (positionTooltip.vertical === "top") ? tipSize : 0 : 0;
            calcPosition.left += (positionTarget.horizontal === "center" && positionTooltip.vertical !== "center") ? ((positionTooltip.horizontal === "right") ? tipX : (positionTooltip.horizontal === "left") ? -tipX : 0) : 0;
            calcPosition.top += (positionTarget.horizontal !== "center" && positionTooltip.horizontal !== "center") ? ((positionTooltip.vertical === "top") ? -tipY : (positionTooltip.vertical === "bottom") ? tipY : 0) : 0;
            calcPosition.left += (positionTarget.horizontal !== "center") ? (positionTooltip.horizontal === "right") ? -tipGapX : (positionTooltip.horizontal === "left") ? tipGapX : 0 : (positionTooltip.vertical === "center") ? (positionTooltip.horizontal === "right") ? -tipGapX : (positionTooltip.horizontal === "left") ? tipGapX : 0 : 0;
            calcPosition.top += (positionTarget.horizontal === "center") ? ((positionTooltip.vertical === "bottom") ? -tipGapY : (positionTooltip.vertical === "top") ? tipGapY : 0) : (positionTooltip.horizontal === "center") ? (positionTooltip.vertical === "bottom") ? -tipGapY : (positionTooltip.vertical === "top") ? tipGapY : 0 : 0;
            this.tooltipPos.left = calcPosition.left;
            this.tooltipPos.top = calcPosition.top;
            if (this.model.collision === ej.Tooltip.Collision.None) {
                if (this.model.isBalloon)
                    this._adjustArrow(position);
                this._shadowEffect(this.model.showShadow, position);
                $(this.tooltip).css({ "top": calcPosition.top + "px", "left": calcPosition.left + "px", position: "absolute" });
            }
        };
        ejTooltip.prototype._calcCollision = function (position, target) {
            var position = $.extend(true, {}, position), newPosition = $.extend(true, {}, position), arrowSize = this.model.tip.size.height, isCollision = true;
            var targetLeft = (this.model.containment != "body") ? ($(target).offset().left - $(this.model.containment).offset().left) : $(target).offset().left, targetTop = (this.model.containment != "body") ? ($(target).offset().top - $(this.model.containment).offset().top) : $(target).offset().top;
            var availSpace = {
                topSpace: targetTop,
                rightSpace: this.containerSize.width - (targetLeft + this.targetPos.width),
                bottomSpace: this.containerSize.height - (targetTop + this.targetPos.height),
                leftSpace: targetLeft,
                centerRight: this.containerSize.width - (targetLeft + (this.targetPos.width / 2)),
                centerLeft: (targetLeft + (this.targetPos.width / 2)),
                centerTop: targetTop + (this.targetPos.height / 2),
                centerBottom: this.containerSize.height - (targetTop + (this.targetPos.height / 2)),
                tooltipWidth: this.tooltipPos.width + arrowSize,
                tooltipHeight: this.tooltipPos.height + arrowSize
            };
            if (this.model.collision === ej.Tooltip.Collision.Fit)
                this._collisionFit(position, availSpace);
            else {
                while (isCollision) {
                    newPosition = this._collisionFlip(newPosition, availSpace);
                    if (newPosition.target.horizontal != position.target.horizontal || newPosition.target.vertical != position.target.vertical || newPosition.stem.horizontal != position.stem.horizontal || newPosition.stem.vertical != position.stem.vertical) {
                        this._tooltipPosition(newPosition);
                        position = $.extend(true, {}, newPosition);
                    }
                    else
                        isCollision = false;
                }
                if (!isCollision) {
                    if (this.model.collision == ej.Tooltip.Collision.FlipFit)
                        this._collisionFit(newPosition, availSpace);
                    else {
                        this._adjustArrow(newPosition);
                        this._shadowEffect(this.model.showShadow, newPosition);
                        $(this.tooltip).css({ "top": this.tooltipPos.top + "px", "left": this.tooltipPos.left + "px", position: "absolute" });
                    }
                }
            }
        };
        ejTooltip.prototype._collisionFlip = function (position, availSpace) {
            var tooltipPos = $.extend(true, {}, this.tooltipPos), newPosition = $.extend(true, {}, position);
            var scrollLeft = $(this.model.containment).scrollLeft(), scrollTop = $(this.model.containment).scrollTop();
            var containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            if ((tooltipPos.left + tooltipPos.width) > (containerLeft + this.containerSize.width + scrollLeft) || (tooltipPos.left < containerLeft)) {
                if (position.target.horizontal != "center")
                    newPosition.target.horizontal = (availSpace.leftSpace >= availSpace.tooltipWidth) ? "left" : (availSpace.rightSpace >= availSpace.tooltipWidth) ? "right" : "center";
                else
                    newPosition.stem.horizontal = (availSpace.centerLeft >= availSpace.tooltipWidth) ? "right" : (availSpace.centerRight >= availSpace.tooltipWidth) ? "left" : "center";
            }
            if (tooltipPos.top < containerTop)
                newPosition.target.vertical = (availSpace.bottomSpace >= availSpace.tooltipHeight) ? "bottom" : "center";
            if ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop))
                newPosition.target.vertical = (availSpace.topSpace >= availSpace.tooltipHeight) ? "top" : "center";
            if (newPosition.target.horizontal != position.target.horizontal || newPosition.target.vertical != position.target.vertical) {
                if (newPosition.target.horizontal == "center")
                    newPosition.stem.horizontal = (availSpace.centerLeft >= availSpace.tooltipWidth) ? "right" : (availSpace.centerRight >= availSpace.tooltipWidth) ? "left" : "center";
                else
                    newPosition.stem.horizontal = (newPosition.target.horizontal == "right") ? "left" : "right";
            }
            if (newPosition.target.vertical != position.target.vertical || newPosition.target.horizontal != position.target.horizontal) {
                if (newPosition.target.vertical == "center")
                    newPosition.stem.vertical = (availSpace.centerTop >= availSpace.tooltipHeight) ? "bottom" : (availSpace.centerBottom >= availSpace.tooltipHeight) ? "top" : (availSpace.centerTop > availSpace.centerBottom) ? "bottom" : "top";
                else
                    newPosition.stem.vertical = (newPosition.target.vertical == "top") ? "bottom" : "top";
            }
            return newPosition;
        };
        ejTooltip.prototype._collisionFit = function (position, availSpace) {
            var tooltipPos = $.extend(true, {}, this.tooltipPos), isHorizontalCollision = false, isVerticalCollision = false;
            var leftValue = 1, topValue = 1, arrowValue = null;
            var scrollLeft = $(this.model.containment).scrollLeft();
            var scrollTop;
            if (this.model.containment == "body") {
                scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
            }
            else {
                scrollTop = $(this.model.containment).scrollTop();
            }
            var containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            if (tooltipPos.left < containerLeft || ((tooltipPos.left + tooltipPos.width) > (this.containerSize.width + scrollLeft + containerLeft))) {
                leftValue = (tooltipPos.left < containerLeft) ? containerLeft : ((tooltipPos.left + tooltipPos.width) > (this.containerSize.width + scrollLeft + containerLeft)) ? (tooltipPos.left - ((tooltipPos.left + tooltipPos.width) - (this.containerSize.width + containerLeft))) : 1;
                isHorizontalCollision = true;
            }
            if (tooltipPos.top < containerTop || ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop))) {
                topValue = (tooltipPos.top < containerTop) ? containerTop : ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop)) ? (tooltipPos.top - ((tooltipPos.top + tooltipPos.height) - (this.containerSize.height + containerTop))) : 1;
                isVerticalCollision = true;
            }
            $(this.tooltip).css({
                top: (topValue != 1) ? topValue + "px" : tooltipPos.top + "px",
                left: (leftValue != 1) ? leftValue + "px" : tooltipPos.left + "px",
                position: "absolute"
            });
            this._adjustArrow(position);
            arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top, height: this.model.tip.size.height, width: this.model.tip.size.width, display: $(this.tip).css("display") };
            this.tooltipPos.top = topValue = (topValue != 1) ? topValue : tooltipPos.top;
            this.tooltipPos.left = leftValue = (leftValue != 1) ? leftValue : tooltipPos.left;
            var tooltipWidth = $(this.tooltip).width(), tooltipHeight = $(this.tooltip).height();
            if (isHorizontalCollision || isVerticalCollision && (arrowValue.display != "none")) {
                if (this.model.isBalloon) {
                    if (isHorizontalCollision)
                        this.arrowValue.left = this._horizontalAdjustment(position, availSpace);
                    if (isVerticalCollision)
                        this.arrowValue.top = this._verticalAdjustment(position, availSpace);
                }
                if (this.arrowValue.left == -this.model.tip.size.height || this.arrowValue.left == tooltipWidth) {
                    $(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "block" });
                }
                else if (this.arrowValue.top == -this.model.tip.size.height || this.arrowValue.top == tooltipHeight) {
                    $(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "block" });
                }
                else {
                    $(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "none" });
                }
            }
            this._shadowEffect(this.model.showShadow, position);
        };
        ejTooltip.prototype._horizontalAdjustment = function (position, availSpace) {
            var arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top };
            $(this.tooltip).css({ "display": "block" });
            var arrowSize = (position.target.horizontal != "center") ? this.model.tip.size.height : this.model.tip.size.height;
            var arrowLeft = (position.target.horizontal != "center" && position.stem.horizontal == "left") ? $(this.tip).offset().left : (position.target.horizontal != "center" && position.stem.horizontal == "right") ? $(this.tip).offset().left + arrowSize : $(this.tip).offset().left;
            $(this.tooltip).css({ "display": "none" });
            if ((arrowLeft > availSpace.leftSpace) && ((arrowLeft + arrowSize) < (availSpace.leftSpace + this.targetPos.width)))
                return arrowValue.left;
            else {
                if ((arrowLeft > (availSpace.leftSpace + this.targetPos.width)) || (arrowLeft < availSpace.leftSpace))
                    arrowValue.left = (availSpace.leftSpace + this.targetPos.width / 2) - parseInt(this.tooltipPos.left.toString());
                return arrowValue.left;
            }
        };
        ejTooltip.prototype._verticalAdjustment = function (position, availSpace) {
            var arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top, height: this.model.tip.size.height, width: this.model.tip.size.width, display: this.arrowValue.display };
            $(this.tooltip).css({ "display": "block" });
            var arrowSize = (position.target.horizontal != "center") ? this.model.tip.size.height : this.model.tip.size.height;
            var arrowTop = (position.target.horizontal == "center" && position.stem.vertical == "top") ? $(this.tip).offset().top : $(this.tip).offset().top + arrowSize;
            $(this.tooltip).css({ "display": "none" });
            if ((arrowTop > availSpace.topSpace) && (arrowTop < (availSpace.topSpace + this.targetPos.height)))
                return arrowValue.top;
            else {
                if ((arrowTop < availSpace.topSpace) || ((arrowTop + arrowSize) > (availSpace.topSpace + this.targetPos.height)))
                    arrowValue.top = (availSpace.topSpace + this.targetPos.height / 2) - parseInt(this.tooltipPos.top.toString());
                return arrowValue.top;
            }
        };
        ejTooltip.prototype._createHeader = function () {
            if (this.model.title != null) {
                if (ej.isNullOrUndefined(this.tooltipTitle))
                    this._createTitle();
                if (ej.isNullOrUndefined(this.tooltipContent))
                    $(this.tooltipHeader).appendTo(this.tooltipInter).addClass("e-tooltipHeader");
                else
                    $(this.tooltipHeader).insertBefore(this.tooltipContent).addClass("e-tooltipHeader");
            }
            if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky)
                this._iconRender();
        };
        ejTooltip.prototype._hideTooltip = function () {
            var speed;
            this._isHidden = true;
            speed = (this.model.animation.speed != 0) ? this.model.animation.speed : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? 200 : (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? 800 : 0;
            if (this.model.enabled == true && $(this.tooltip).css("display") == 'block') {
                if (this.triggerEvents("beforeClose", {}))
                    return;
                (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? $(this.tooltip).fadeOut(speed) : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? $(this.tooltip).slideUp(speed) : $(this.tooltip).css({ display: "none" });
                if ($(this.tooltip).css("display") == 'none')
                    $(this.tooltip).attr('aria-hidden', 'true').removeClass("e-customAnimation");
                if (this.triggerEvents("close", {}))
                    return;
            }
        };
        ejTooltip.prototype._showTooltip = function () {
            if (this._isHidden) {
                var speed = (this.model.animation.speed != 0) ? this.model.animation.speed : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? 200 : (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? 800 : 0;
                this._isHidden = false;
                if ($(this.tooltip).css("display") == 'none' && this.model.enabled == true) {
                    (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? $(this.tooltip).fadeIn(speed) : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? $(this.tooltip).slideDown(speed) : $(this.tooltip).css({ display: "block" });
                    if ($(this.tooltip).css("display") == 'block') {
                        var parents = $(this.tooltip[0]).parents();
                        var bodyEle = $('body').children();
                        $(bodyEle).each(function (i, ele) { parents.push(ele); });
                        var toolTipParents = $(this.model.target).parents();
                        $(toolTipParents).each(function (i, ele) { parents.push(ele); });
                        var zIndex = Math.max.apply(zIndex, $.map(parents, function (e, n) {
                            if ($(e).css('position') != 'static')
                                return parseInt($(e).css('z-index')) || 1;
                        }));
                        if (!zIndex || zIndex < 10000)
                            zIndex = 10000;
                        else
                            zIndex += 1;
                        $(this.tooltip).attr('aria-hidden', 'false').css({ zIndex: zIndex });
                        if (this.model.animation.effect == ej.Tooltip.Effect.None)
                            $(this.tooltip).addClass("e-customAnimation");
                        var elements = this._getScrollableParents();
                        this._on(elements, "scroll", this._hideTooltip);
                    }
                    if (this.triggerEvents("open", {}))
                        return;
                }
            }
        };
        ejTooltip.prototype._getScrollableParents = function () {
            return $(this.element).parentsUntil("html").filter(function () {
                return $(this).css("overflow") != "visible";
            }).add($(window));
        };
        ejTooltip.prototype._tooltipAuto = function () {
            var proxy = this;
            this.timer = setTimeout(function () {
                proxy._hideTooltip();
            }, proxy.model.autoCloseTimeout);
        };
        ejTooltip.prototype._beforeOpenTooltip = function (event) {
            this.positionTooltip = $.extend(true, {}, this.model.position.stem);
            this.positionTarget = $.extend(true, {}, this.model.position.target);
            this.targetElement = this.element;
            if (!ej.isNullOrUndefined(this.model.target)) {
                if (!ej.isNullOrUndefined($(event.currentTarget).attr('data-content'))) {
                    this.model.content = $(event.currentTarget).attr('data-content');
                    this._setContent(this.model.content);
                }
            }
        };
        ejTooltip.prototype._targetHover = function (event) {
            this.isTrack = true;
            if (this.model.enabled) {
                if (this._isHidden || ((ej.browserInfo().name == 'msie' || ej.browserInfo().name == 'edge') && this.model.associate == ej.Tooltip.Associate.MouseFollow)) {
                    this.tooltip.stop(true, true);
                    if (this.triggerEvents("beforeOpen", { event: event })) {
                        this._isCancel = true;
                        return;
                    }
                    this._isCancel = false;
                    this._beforeOpenTooltip(event);
                    if (this.model.associate != ej.Tooltip.Associate.MouseEnter && this.model.associate != ej.Tooltip.Associate.MouseFollow) {
                        (!ej.isNullOrUndefined(this.model.target)) ? this._positionElement(event.currentTarget) : this._positionElement(this.element);
                        clearTimeout(this.timer);
                        this._showTooltip();
                        if (this.model.closeMode == ej.Tooltip.CloseMode.Auto)
                            this._tooltipAuto();
                        (event.type == "click") ? this.triggerEvents("click", { event: event }) : this.triggerEvents("hover", { event: event });
                    }
                    else
                        this.isTrack = true;
                }
                else if (!ej.isNullOrUndefined(this.model.target))
                    this._positionElement(event.currentTarget);
            }
        };
        ejTooltip.prototype._onMouseOut = function (event) {
            if (this.model.enabled && !this._isHidden) {
                if (this.model.closeMode == ej.Tooltip.CloseMode.None)
                    this._hideTooltip();
                clearTimeout(this.mouseTimer);
            }
            this.isTrack = false;
        };
        ejTooltip.prototype._onTooltipMouseEnter = function (event) {
            var proxy = this;
            if (this.model.enabled) {
                if (this.model.animation.effect == ej.Tooltip.Effect.None)
                    $(proxy.tooltip).css({ display: "block" });
            }
        };
        ejTooltip.prototype._onTooltipMouseLeave = function (event) {
            var proxy = this;
            if (this.model.enabled) {
                if (this.model.animation.effect == ej.Tooltip.Effect.None) {
                    if (proxy.model.closeMode == ej.Tooltip.CloseMode.None)
                        $(proxy.tooltip).css({ display: "none" });
                }
            }
        };
        ejTooltip.prototype._docTouchEndHandler = function (e) {
            if (!$(e.target).closest('.e-tooltip').length && this.model.closeMode == ej.Tooltip.CloseMode.None)
                this._hideTooltip();
        };
        ejTooltip.prototype._keyDown = function (event) {
            var code = (event.keyCode) ? event.keyCode : (event.which) ? event.which : event.charCode;
            if (this.model.enabled) {
                switch (code) {
                    case 27:
                        event.preventDefault();
                        this._hideTooltip();
                        break;
                }
            }
        };
        return ejTooltip;
    }(ej.WidgetBase));
    window.ej.widget("ejTooltip", "ej.Tooltip", new ejTooltip());
    window["ejTooltip"] = null;
})(jQuery);
ej.Tooltip.CloseMode = {
    Auto: "auto",
    None: "none",
    Sticky: "sticky"
};
ej.Tooltip.Effect = {
    Slide: "slide",
    Fade: "fade",
    None: "none"
};
ej.Tooltip.Trigger = {
    Hover: "hover",
    Click: "click",
    Focus: "focus"
};
ej.Tooltip.Collision = {
    Flip: "flip",
    FlipFit: "flipfit",
    None: "none",
    Fit: "fit"
};
ej.Tooltip.Associate = {
    Window: "window",
    MouseFollow: "mousefollow",
    MouseEnter: "mouseenter",
    Target: "target",
    Axis: "axis"
};
;
/**
* @fileOverview Plugin to style the Html div elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    ej.widget("ejTreeView", "ej.TreeView", {
        _rootCSS: "e-treeview",

        element: null,

        model: null,

        validTags: ["ul", "div"],
        _addToPersist: ["expandedNodes", "checkedNodes", "selectedNodes"],
       
        _setFirst: false,

        _requiresID: true,

        defaults: {

            allowMultiSelection: false,

            showCheckbox: false,

            enableAnimation: true,

            allowDragAndDrop: false,

            htmlAttributes: {},

            allowDropChild: true,

            allowDropSibling: true,

            allowDragAndDropAcrossControl: true,

            allowEditing: false,

            allowKeyboardNavigation: true,

            items: null,

            fields: {

                dataSource: null,

                query: null,

                tableName: null,

                child: null,

                id: "id",

                parentId: "parentId",

                text: "text",

                spriteCssClass: "spriteCssClass",

                expanded: "expanded",

                hasChild: "hasChild",

                selected: "selected",

                linkAttribute: "linkAttribute",

                imageAttribute: "imageAttribute",

                htmlAttribute: "htmlAttribute",

                imageUrl: "imageUrl",

                isChecked: "isChecked"

            },

            autoCheckParentNode: false,

            loadOnDemand: false,

            cssClass: "",

            template: null,

            enableRTL: false,

            expandOn: "dblclick",

            enablePersistence: false,

            enabled: true,

            expandedNodes: [],

            checkedNodes: [],

            selectedNode: -1,

            selectedNodes: [],

            width: null,

            height: null,

            autoCheck: true,

            enableMultipleExpand: true,

            fullRowSelect: false,

            sortSettings: {

                allowSorting: false,

                sortOrder: "ascending",

            },

            nodeClick: null,

            beforeExpand: null,

            nodeExpand: null,

            beforeCollapse: null,

            nodeCollapse: null,

            beforeSelect: null,

            nodeSelect: null,

            nodeUnselect: null,

            nodeCheck: null,

            nodeUncheck: null,

            inlineEditValidation: null,

            beforeEdit: null,

            nodeEdit: null,

            keyPress: null,

            nodeDragStart: null,

            nodeDrag: null,

            nodeDragStop: null,

            nodeDropped: null,

            beforeAdd: null,

            nodeAdd: null,

            beforeDelete: null,

            nodeDelete: null,

            beforeCut: null,

            nodeCut: null,

            beforePaste: null,

            nodePaste: null,

            beforeLoad: null,

            loadSuccess: null,

            loadError: null,

            ready: null,

            create: null,

            destroy: null

        },

        dataTypes: {

            allowMultiSelection: "boolean",

            cssClass: "string",

            showCheckbox: "boolean",

            enableAnimation: "boolean",

            allowDragAndDrop: "boolean",

            allowDropChild: "boolean",

            allowDragAndDropAcrossControl: "boolean",

            allowEditing: "boolean",

            allowKeyboardNavigation: "boolean",

            autoCheckParentNode: "boolean",

            loadOnDemand: "boolean",

            enableRTL: "boolean",

            expandOn: "string",

            enablePersistence: "boolean",

            enableMultipleExpand: "boolean",

            fullRowSelect: "boolean",

            items: "data",

            fields: {

                dataSource: "data",

                query: "data",

                child: "data"

            },

            expandedNodes: "array",

            checkedNodes: "array",

            selectedNode: "number",

            selectedNodes: "array",

            htmlAttributes: "data",

            sortSettings: {

                allowSorting: "boolean",

                sortOrder: "enum",

            }
        },

        observables: ["fields.dataSource"],

        dataSource: ej.util.valueFunction("fields.dataSource"),

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "allowMultiSelection":
                        this.model.allowMultiSelection = options[key];
                        if (!this.model.allowMultiSelection) {
                            var sleNode = $(this._liList[this.model.selectedNodes[0]]);
                            this._unselectAll();
                            this._isRender = false;
                            this._nodeSelectionAction(sleNode);
                            this._isRender = true;
                        }
                        break;
                    case "cssClass": this._changeSkin(options[key]); break;
                    case "fields":
                        if (this._deepWatch && !ej.isNullOrUndefined(options[key]["dataSource"]) && (JSON.stringify(this._oldDataSource) == JSON.stringify(typeof options[key]["dataSource"] == "function" ? options[key]["dataSource"]() : options[key]["dataSource"])))
                            return;
                        this._unWireEvents();
                        var tempUl, f = this.element.hasClass("e-js") ? false : true, element = f ? this.element.children("ul") : this.element;
                        element.empty();
                        if (this.model.fields == null || options[key] == null)
                            this.model.fields = options[key];
                        else
                            this._extendFields(this.model.fields, options[key]);
                        this.model.expandedNodes = [];
                        this.model.checkedNodes = [];
                        this.model.selectedNodes = [];
                        this.model.selectedNode = -1;
                        this._persistValues(this.model.expandedNodes, "expandedNodes");
                        this._persistValues(this.model.checkedNodes, "checkedNodes");
                        this._persistValues(this.model.selectedNodes, "selectedNodes");
                        this._newDataSource = this.dataSource();
                        (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) ? this._checkDataBinding() : this._initialize();
                        if (f) {
                            tempUl = this.element.children(".e-treeview-ul");
                            element.append(tempUl.children());
                            tempUl.remove();
                        }
                        break;
                    case "allowDragAndDropAcrossControl":
                        this.model.allowDragAndDropAcrossControl = options[key];
                        this._enableDragDrop();
                        break;
                    case "enabled": this._enabledAction(options[key]); break;
                    case "showCheckbox":
                        if (options[key]) {
                            this.model.showCheckbox = options[key];
                            this._showCheckBox();
                            (!this.model.enabled) && this.element.find('.nodecheckbox').ejCheckBox("disable");
                        } else {
                            this.element.find('.e-item > div > .e-chkbox-wrap').remove();
                            this._updateCheckedNodes();
                        }
                        break;
                    case "autoCheck": this.model.autoCheck = options[key]; break;
                    case "autoCheckParentNode": this.model.autoCheckParentNode = options[key]; break;
                    case "expandedNodes":
                        var len = options[key].length, temp = JSON.parse(JSON.stringify(this.model.expandedNodes));
                        if (len > 0) {
                            this._expandNodes(options[key]);
                            for (var i = 0, len = temp.length; i < len; i++) {
                                if (options[key].indexOf(temp[i]) == -1) {
                                    this._collapseNode($(this._liList[temp[i]]));
                                }
                            }
                        } else
                             (len == 0) && this._collapseAll();
                        options[key] = this.model.expandedNodes;
                        break;
                    case "checkedNodes":
                        if (this.model.showCheckbox) {
                            var len = options[key].length, temp = JSON.parse(JSON.stringify(this.model.checkedNodes));
                            if (len > 0) {
                                this._checkedNodes(options[key]);
                                for (var i = 0, len = temp.length; i < len; i++)
                                    (options[key].indexOf(temp[i]) == -1) && this._nodeUncheck($(this._liList[temp[i]]).find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
                            } else
                                 (len == 0) && this._uncheckAll();
                        }
                        options[key] = this.model.checkedNodes;
                        break;
                    case "expandOn":
                        this._off(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? this._touchExpandOn : this.model.expandOn, this._expandEventHandler);
                        this._assignTouchExpandOn(options[key]);
                        this._on(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? this._touchExpandOn : options[key], this._expandEventHandler);
                        break;
                    case "allowEditing":
                        this._preventEditable();
                        (options[key]) && this._allowEditable();
                        break;
                    case "allowKeyboardNavigation":
                        var action = (options[key]) ? "_on" : "_off";
                        this[action](this.element, 'keydown', this._KeyPress);
                        break;
                    case "allowDragAndDrop":
                        this.model.allowDragAndDrop = options[key];
                        (options[key]) ? this._addDragableClass() : this._preventDraggable();
                        break;
                    case "allowDropChild":
                        this.model.allowDropChild = options[key];
                        (options[key]) ? this._addDragableClass() : this._preventDropChild();
                        break;
                    case "allowDropSibling":
                        this.model.allowDropSibling = options[key];
                        (options[key]) ? this._addDragableClass() : this._preventDropSibling();
                        break;
                    case "enableRTL":
                        this.model.enableRTL = options[key];
                        var action, ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap') : this.element;
                        action = (this.model.enableRTL) ? "addClass" : "removeClass";
                        ele[action]("e-rtl");
                        break;
                    case "height": this.element.is("ul") ? this.element.parent().height(options[key]) : this.element.height(options[key]); break;
                    case "width": this.element.is("ul") ? this.element.parent().width(options[key]) : this.element.width(options[key]); break;
                    case "selectedNode":
                    case "selectedNodes":
                        this.model.selectedNodes = (key == "selectedNode") ? [options[key]] : options[key];
                        this.element.find('a.e-text.e-active').removeClass('e-node-focus e-active').closest('li').attr("aria-selected", false);
                        this._doSelectNodes(this.model.selectedNodes, false);
                        if (key != "selectedNode") options[key] = this.model.selectedNodes;
                        break;
                    case "htmlAttributes": this._addAttr(options[key]); break;
                    case "enableMultipleExpand":
                        (!options[key]) && this.collapseAll();
                        this.model.enableMultipleExpand = options[key];
                        break;
                    case "sortSettings":
                        $.extend(this.model.sortSettings, options[key]);
                        if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
                            this.model.expandedNodes = [];
                            this.model.checkedNodes = [];
                            this.model.selectedNodes = [];
                            this._checkDataBinding();
                        }
                        break;
                    case "fullRowSelect":
                        this._wholeRowEvents("_off");
                        this.model.fullRowSelect = options[key];
                        this.model.fullRowSelect ? this._addWholeRowWrap() : this._removeWholeRowWrap();
                        this._doWholeRowAction();
                        this._wholeRowEvents("_on");
                        break;
                }
            }
        },

        _destroy: function () {
            this.element.html("");
            this._cloneElement.removeClass('e-treeview e-js e-treeview-wrap');
            var ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap') : this.element;
            ele.replaceWith(this._cloneElement);
            $("#" + this._id + "_WaitingPopup").remove();
            if (window.localStorage) {
                window.localStorage.removeItem(this._id + "_childNodes");
                window.localStorage.removeItem(this._id + "_persistedValues");
            }
            else if (window.cookie) {
                document.cookie = this._id + "_childNodes=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                document.cookie = this._id + "_persistedValues=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
            }
        },

        _init: function () {
            this._cloneElement = this.element.clone(), this._dataSource = [], this._fragment = [], this._templateType = "", this._indexID = 0, this._newDataSource = this.dataSource(), this._id = this.element.prop("id"), this._treeList = [], this._isTextbox = false;
            this._isDevice = this._checkDevice();
            this._deepWatch = (this.element.attr("e-deepwatch") === "true" && !(this.dataSource() instanceof ej.DataManager)) ? true : false;
            var browserInfo = ej.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            if (this._deepWatch) {
                this._oldDataSource = JSON.parse(JSON.stringify(this.dataSource()));
            }
            this._assignTouchExpandOn(this.model.expandOn);
            if (this.model.enablePersistence) {
                var cookieData = this._getCookies("_persistedValues");
                if (!cookieData) {
                    var obj = { selectedNodes: [], expandedNodes: [], checkedNodes: [] };
                    obj = this._updatePersistAttr(obj);
                    this._setCookies("_persistedValues", JSON.stringify(obj));
                }
            }
            if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
                this._checkDataBinding();
            } else {
                this._initialize();
                this._completeRendering();
            }
        },

        _initialize: function () {
            this._cutNode = null, this._beforeEditText = null, this._CurrenctSelectedNodes = [], this._isLoaded = false;
            this._renderMultiTouchDialog();
            if (this.element.is("ul")) {
                this._createWrapper();
            }
            else {
                this.element.addClass("e-treeview-wrap e-widget").attr("tabindex", 0)
                            .children('ul:first').addClass("e-ul e-box").attr("role","tree");
                (this.model.width != null) && this.element.width(this.model.width);
                (this.model.height != null) && this.element.height(this.model.height);
                (this.model.enableRTL) && this.element.addClass("e-rtl");
                (this.model.cssClass != null) && this.element.addClass(this.model.cssClass);
                this._addAttr(this.model.htmlAttributes);
            }
            this._elementSettings();
            this._beforeBaseClass();
            if (this.dataSource() == null) {
                this._addBaseClass();
                this._controlRender();
            }
            this._addWholeRowWrap();
            if (this._isIE8)
                (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap').addClass("e-ie8") : this.element.addClass("e-ie8");
            this._finalize();
        },

        _completeRendering: function () {
            if (this._treeList.length == 0 && !this._isLoaded) {
                this._finalizeNode();
                this._enabledAction(this.model.enabled);
                this._triggerEvent('ready', { element: this.element[0] });
                this._isLoaded = true;
            }
        },

        _addWholeRowWrap: function () {
            if (this.model.fullRowSelect)
                (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap').addClass("e-fullrow-wrap") : this.element.addClass("e-fullrow-wrap");
        },

        _removeWholeRowWrap: function () {
            (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap').removeClass("e-fullrow-wrap") : this.element.removeClass("e-fullrow-wrap");
        },

        _doWholeRowAction: function () {
            if (this.model.fullRowSelect) {
                for (var i = 0, len = this._liList.length; i < len; i++) {
                    var element = $(this._liList[i]);
                    if (element[0] != null) {
                        var txtEle = element.find("> .e-text-wrap");
                        this._renderWholeRow(element, txtEle);
                    }
                }
            }
            else
                this.element.find(".e-fullrow").remove();
        },

        _renderWholeRow: function (element, nestedEle) {
            if (!element) return;
            if (this.model.fullRowSelect) {
                var absolutediv = document.createElement('div');
                absolutediv.setAttribute('class', 'e-fullrow');
                nestedEle ? $(absolutediv).insertAfter(nestedEle) : element[0].appendChild(absolutediv);
            }
        },

        _extendFields: function (mapper, value) {
            if (mapper == null || value == null)
                mapper = value;
            else if (mapper.child == null || value['child'] == null)
                $.extend(mapper, value);
            else {
                this._extendFields(mapper.child, value['child']);
                var tempField = mapper.child;
                $.extend(mapper, value);
                $.extend(mapper.child, tempField);
            }
        },

        _checkDevice: function () {
            return (ej.isDevice() && ej.isTouchDevice());
        },

        _assignTouchExpandOn: function (expandon) {
            if (expandon == "dblclick")
                this._touchExpandOn = "doubletap";
            else if (expandon == "click")
                this._touchExpandOn = "tap";
            else
                this._touchExpandOn = expandon;
        },

        _renderMultiTouchDialog: function () {
            this._customPop = ej.buildTag("div.e-fe-popup", "", { display: "none" });
            var $content = ej.buildTag("div.e-content"), $downTail = ej.buildTag("div.e-downtail e-tail");
            if (this.model.allowMultiSelection) {
                var $selElement = ej.buildTag("span.e-rowselect e-icon");
                $content.append($selElement);
            }
            this._customPop.append($content);
            this._customPop.append($downTail);
            if(!this.element.is("ul")){
			this.element.append(this._customPop);     
			} 
            this._on($content, (this._isDevice && $.isFunction($.fn.tap)) ? "touchstart" : "mousedown", this._popupClick);
        },

        _popupClick: function () {
            var $selElement = this._customPop.find(".e-rowselect");
            if ($selElement.hasClass("e-spanclicked")) {
                this._hidePopup();
            }
            else {
                this._isPopup = true;
                $selElement.addClass("e-spanclicked");
            }
        },

        _hidePopup: function () {
            if (this._customPop != null && this._customPop.is(":visible")) {
                this._customPop.find(".e-rowselect").removeClass("e-spanclicked");
                this._customPop.hide();
                this._isPopup = false;
            }
        },

        _elementSettings: function () {
            var ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap') : this.element;
            if (this.element.is("ul")) { ele.attr("role", "tree") };
        },

        _beforeBaseClass: function () {
            var ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap')[0] : this.element[0];
            this._ulList = $(ele.querySelectorAll('ul'));
            this._liList = $(ele.querySelectorAll('li'));
        },

        _createWrapper: function () {
            var mainWidget= this.wrapper = ej.buildTag("div.e-treeview-wrap e-widget " + this.model.cssClass, "", "", { tabindex: 0 });
            (this.model.width != null) && mainWidget.width(this.model.width);
            (this.model.height != null) && mainWidget.height(this.model.height);
            (this.model.enableRTL) && mainWidget.addClass("e-rtl");
            mainWidget.insertAfter(this.element);
            mainWidget.append(this.element.addClass("e-ul e-box").attr("tabindex", 0));
			if(this.element.is("ul")){
				mainWidget.append(this._customPop);
			}
            this._addAttr(this.model.htmlAttributes);
        },

        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy._enabledAction(false);
                else proxy.element.attr(key, value)
            });
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                var ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap') : this.element;
                ele.removeClass(this.model.cssClass).addClass(skin);
                ele.find('.e-item > div > .e-chkbox-wrap').removeClass(this.model.cssClass).addClass(skin);
                this._waitingPopup && this._waitingPopup.option("cssClass", skin);
            }
        },

        _enabledAction: function (flag) {
            this.model.enabled = flag;
            if (flag) {
                this.element.removeClass("e-disable");
                this._wireEvents();
            }
            else {
                this.element.addClass("e-disable");
                this._unWireEvents();
            }
        },

        _checkDataBinding: function () {
            if (this.dataSource() instanceof ej.DataManager) {
                this._initDataSource();
            } else {
                this._ensureDataSource(this.dataSource());
                this._initialize();
                this._completeRendering();
            }
        },

        _initDataSource: function () {
            this.element.ejWaitingPopup({ cssClass: this.model.cssClass });
            this._waitingPopup = this.element.ejWaitingPopup("instance");
            this._waitingPopup.maindiv.addClass("e-tree-popup");
            var proxy = this, queryPromise, queryManager;
            this.element.ejWaitingPopup("refresh");
            this.element.ejWaitingPopup("show");
            if (this.dataSource().ready != undefined) {
                this.dataSource().ready.done(function (e) {
                    proxy._initAfterDataSource(e);
                });
            } else {
                queryManager = this._columnToSelect(this.model.fields);
                queryPromise = this.dataSource().executeQuery(queryManager);
                queryPromise.done(function (e) {
                    proxy._initAfterDataSource(e);
                });
            }
        },

        _initAfterDataSource: function (e) {
            var proxy = this;
            proxy.element.ejWaitingPopup("hide");
            proxy.retriveData = (e.xhr && e.xhr.responseJSON && e.xhr.responseJSON.d) ? e.xhr.responseJSON.d : (e.result ? e.result : []);
            proxy._typeOfFieldId = proxy.retriveData[0] ? (typeof (ej.getObject(proxy.model.fields.id, proxy.retriveData[0]))).toLowerCase() : "";
            proxy._ensureDataSource(proxy.retriveData);
            proxy._newDataSource = JSON.parse(JSON.stringify(proxy.retriveData));
            proxy._initialize();
            if (!proxy.dataSource().dataSource.offline && (proxy.model.loadOnDemand || !ej.isNullOrUndefined(proxy.model.fields["child"]))) proxy._templateType = 2;
            if (proxy.model.loadOnDemand || ej.isNullOrUndefined(proxy.model.fields["child"])) {
                proxy._completeRendering();
            }
        },

        _columnToSelect: function (mapper) {
            var column = [], queryManager = ej.Query();
            if (!mapper.query && !ej.isNullOrUndefined(mapper.tableName)) {
                for (var col in mapper) {
                    if (col !== "tableName" && col !== "child" && col !== "dataSource" && mapper[col])
                        column.push(mapper[col]);
                }
                (column.length > 0) && queryManager.select(column);
                if (!this.dataSource().dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else queryManager = (mapper.query) ? mapper.query.clone() : queryManager;
            return queryManager;
        },

        _ensureDataSource: function (dataSource) {
            dataSource = this._getSortAndFilterList(this.model.fields, dataSource);
            this.currentSelectedData = dataSource;
            this._renderTemplate(dataSource);
            (this.element.is("ul")) ? this.element.html(this._fragment.firstChild.children) : this.element.html(this._fragment);
        },

        _getTemplateType: function (ds, mapper) {
            for (var i = 0, len = ds.length; i < len; i++) {
                if (ej.getObject(mapper.parentId, ds[i]) !== undefined || ej.getObject(mapper.hasChild, ds[i]) !== undefined) return 1;
                if (ds[i].hasOwnProperty('child')) return 2;
            }
            return 1;
        },

        _groupingObjects: function (array, f) {
            var childs = {}, keys = [];
            for (var i = 0, len = array.length; i < len; i++) {
                var child = JSON.stringify(f(array[i]));
                childs[child] = childs[child] || [];
                childs[child].push(array[i]);
            }
            for (var i in childs)
                keys.push(childs[i]);
            return keys;
        },

        _renderTemplate: function (item) {
            this._onlineData = false, this._loadOnDemandNodes = false;
            var proxy = this;
            this._templateType = this._getTemplateType(item, this.model.fields);
            this._dataSource = (this._templateType == 1) ? this._groupingObjects(item, function (item) { return [!ej.isNullOrUndefined(item) && [ej.getObject(proxy.model.fields.parentId, item)].toString()]; }) : item;
            this._templateNodeCreation(item, this.model.fields);
        },

        _templateNodeCreation: function (data, mapper) {
            this._fragment = document.createDocumentFragment();
            var ulTag = document.createElement('ul'), fragment;
            this._fragment.appendChild(ulTag);
            fragment = this._fragment.firstChild;
            if (this._onlineData || this._loadOnDemandNodes) {
                fragment.className = "e-treeview-ul";
                fragment.setAttribute('role', "group");
                $(fragment).attr('style', 'display:none');
            }
            if (this.dataSource() != null) {
                for (var i = 0, objlen = data.length; i < objlen; i++) {
                    if (data[i]) {
                        var parentId = ej.getObject(this.model.fields.parentId, data[i]);
                        if (ej.isNullOrUndefined(parentId) || parentId == 0 || this._loadOnDemandNodes)
                            fragment.appendChild(this._genTemplate(data[i], mapper));
                    }
                }
                $(fragment).find('.e-item:first-child:not(:last-child)').addClass('first');
                $(fragment).find('.e-item:last-child').addClass('last');
            }
        },

        _onlineDataSource: function (childItems, id, mapper) {
            this._loadOnDemandNodes = true;
            this._templateNodeCreation(childItems, mapper);
            var element = this.element.find('.e-item#' + id);
            if (element[0] != null) {
                $(element[0]).append(this._fragment);
                element.children().find('> div:first').addClass("e-icon e-plus");
                this._finalizeLoadOnDemand(element);
            }
            this._onlineData = false;
        },

        _genTemplate: function (item, mapper) {
            var liFrag = document.createDocumentFragment(), liEle, liTag, imgTag, aTag, childItems;
            liTag = document.createElement('li');
            liFrag.appendChild(liTag);
            liEle = liFrag.firstChild;
            liEle.id = ej.getObject(mapper.id, item);
            if (!liEle.id || liEle.id == "undefined")
                liEle.id = "";
            liEle.setAttribute('role', "treeitem");
            var htmlAttribute = ej.getObject(mapper.htmlAttribute, item);
            (htmlAttribute) && this._setAttributes(htmlAttribute, liEle);
            liEle.className += ' e-item';
            aTag = document.createElement('a');
            var imageURL = ej.getObject(mapper.imageUrl, item);
            var spriteCssClass = ej.getObject(mapper.spriteCssClass, item);
            if (imageURL) {
                imgTag = document.createElement('img');
                imgTag.className = "e-align";
                imgTag.src = imageURL;
                var imageAttribute = ej.getObject(mapper.imageAttribute, item);
                (imageAttribute) && this._setAttributes(imageAttribute, imgTag);
            }
            else if (spriteCssClass) {
                imgTag = document.createElement('span');
                imgTag.className = spriteCssClass;
            }
            if (this.model.template) {
                (imgTag) && aTag.appendChild(imgTag);
                if (typeof $.fn.render != "function") throw "Error : JsRender dependecy script missing";
                aTag.innerHTML += this._renderEjTemplate(this.model.template, item);
            }
            else {
                var mapperText = ej.getObject(mapper.text, item);
                (mapperText) ? $(aTag).text(mapperText) : $(aTag).text("undefined");
                (imgTag) && aTag.insertBefore(imgTag, aTag.lastChild);
            }
            var linkAttribute = ej.getObject(mapper.linkAttribute, item);
            (linkAttribute) && (typeof linkAttribute == "object" ? this._setAttributes(linkAttribute, aTag) : aTag.href = linkAttribute);
            liEle.appendChild(aTag);
            (ej.getObject(mapper.expanded, item)) && (liEle.className += ' expanded');
            (ej.getObject(mapper.selected, item)) && (liEle.className += ' selected');
            var isChecked = ej.getObject(mapper.isChecked, item);
            if (!ej.isNullOrUndefined(isChecked))
                liEle.className += (isChecked) ? ' checked' : ' unchecked';
            liEle.setAttribute('aria-selected', false);
            liEle.setAttribute('aria-expanded', false);
            if (this.dataSource() instanceof ej.DataManager) {
                this._updateElement(liEle, true);
                this.model.showCheckbox && this._checkboxOnTemplate(liEle.children[0]);
                if (!this.model.loadOnDemand) {
                    if (!ej.isNullOrUndefined(mapper["child"]) && mapper["child"]["dataSource"] instanceof ej.DataManager) {
                        var proxy = this, queryPromise, pid, id;
                        pid = (mapper["child"]["parentId"]) ? mapper["child"]["parentId"] : proxy.model.fields.parentId, id;
                        id = (mapper.id) ? mapper.id : this.model.fields.id;
                        this._treeList.push("false");
                        var itemID = ej.getObject(id, item);
                        queryPromise = this._executeDataQuery(mapper["child"], pid, (this._typeOfFieldId == "number" ? parseInt(itemID) : itemID));
                        queryPromise.done(function (e) {
                            proxy._treeList.pop();
                            childItems = (e.xhr && e.xhr.responseJSON && e.xhr.responseJSON.d) ? e.xhr.responseJSON.d : (e.result ? e.result : []);
                            childItems = proxy._getSortAndFilterList(mapper.child, childItems);
                            if (childItems && childItems.length > 0) {
                                proxy._onlineData = true;
                                var parentID = childItems[0][mapper["child"]["parentId"]];
                                proxy._updateRemoteData(proxy._newDataSource, parentID, childItems, proxy.model.fields);
                                proxy._onlineDataSource(childItems, parentID, mapper.child);
                            }
                            if (proxy._treeList.length == 0) {
                                proxy._completeRendering();
                            }
                        });
                    } else if (ej.isNullOrUndefined(this.model.fields["child"])) {
                        this._childNodeCreation(item, liEle, mapper);
                    }
                }
                else {
                    if (ej.getObject(mapper.hasChild, item) || item.hasOwnProperty('child'))
                        liEle.children[0].firstChild.className = "e-icon e-plus";
                }
            }
            else if (this.model.loadOnDemand) {
                this._updateElement(liEle, true);
                if (ej.getObject(mapper.hasChild, item) || item.hasOwnProperty('child'))
                    liEle.children[0].firstChild.className = "e-icon e-plus";
                this.model.showCheckbox && this._checkboxOnTemplate(liEle.children[0]);
                (ej.getObject(mapper.expanded, item)) && this._childNodeCreation(item, liEle, mapper);
                if (this.model.enablePersistence) {
                    var value, childObj;
                    value = this._getCookies("_childNodes");
                    if (value) {
                        childObj = JSON.parse(value);
                        for (var i = 0, objlen = childObj.length; i < objlen; i++) {
                            if (childObj[i].toString() == ej.getObject(mapper.id, item).toString()) {
                                this._childNodeCreation(item, liEle, mapper);
                                break;
                            }
                        }
                    }
                }
            }
            else if (!this._onlineData) {
                this._updateElement(liEle, true);
                this.model.showCheckbox && this._checkboxOnTemplate(liEle.children[0]);
                this._childNodeCreation(item, liEle, mapper);
            }
            return liEle;
        },

        _childNodeCreation: function (item, liEle, mapper) {
            var childItems, tempFrag, ul, tFrag;
            childItems = (this._templateType == 2) ? (!ej.isNullOrUndefined(item.child) && item.child.length > 0) && item.child : this._getChildNodes(this._dataSource, { id: ej.getObject(mapper.id, item) });
            if (!ej.isNullOrUndefined(childItems) && childItems.length > 0) {
                liEle.children[0].firstChild.className = "e-icon e-plus";
                tempFrag = document.createDocumentFragment();
                ul = document.createElement('ul');
                tempFrag.appendChild(ul);
                tFrag = tempFrag.firstChild;
                tFrag.className = "e-treeview-ul";
                tFrag.setAttribute('role', "group");
                $(tFrag).attr('style', 'display:none');
                for (var i = 0, objlen = childItems.length; i < objlen; i++)
                    (childItems[i]) && (ej.getObject(this.model.fields.parentId, [childItems[i]]) != 0) && tFrag.appendChild(this._genTemplate(childItems[i], mapper));
                liEle.appendChild(ul);
            }
        },

        _checkboxOnTemplate: function (element) {
            if (element.parentElement.id == "") {
                element.parentElement.id = this._id + "_" + this._indexID;
                this._indexID++;
            }
            var checkbox = document.createElement('input');
            checkbox.setAttribute('type', 'checkbox');
            checkbox.setAttribute('class', 'nodecheckbox');
            checkbox.setAttribute('name', this._id + "_Checkbox_" + element.parentElement.id);
            checkbox.setAttribute('value', element.parentElement.id);
            element.insertBefore(checkbox, element.children[1]);   // Checkbox to be inserted after the expand/collapse div            
        },

        _updateElement: function (liElement, subItem) {
            var outerdiv, exCollpasediv, linkElement, spanTag, node = liElement.firstChild, firstchild, nodeText, nText,textElement;
            if (node) {
                firstchild = node.nodeName;
                if (firstchild == 'SPAN' || firstchild == 'IMG') {
                    spanTag = node;
                    linkElement = liElement.lastChild;
                }
                else
                    linkElement = liElement.lastChild;
                if (linkElement) {
                    nText = (linkElement.lastChild != null) ? linkElement.lastChild.nodeValue : "";
                    nodeText = $.trim(linkElement.innerHTML);
                    textElement = $(linkElement).clone()[0];
                    $(linkElement).remove();
                    textElement.className += " e-text CanSelect";
                    textElement.innerHTML = nodeText;
                    liElement.innerHTML = '';
                }

                outerdiv = document.createElement('div');
                outerdiv.setAttribute('class', 'e-text-wrap');
                outerdiv.setAttribute('role', "presentation");
                if (subItem) {
                    exCollpasediv = document.createElement('div');
                    exCollpasediv.setAttribute('role', "presentation");
                    outerdiv.appendChild(exCollpasediv);
                }
                (spanTag) && outerdiv.appendChild(spanTag);
                outerdiv.appendChild(textElement);
                ($(liElement).prop('name') == undefined) && $(liElement).prop('name', $.trim(nText));
                liElement.appendChild(outerdiv);
                this._renderWholeRow($(liElement));
            }
        },

        _setAttributes: function (data, element) {
            for (var key in data) {
                $(element).attr(key, data[key]);
            }
        },

        _addDragableClass: function () {
            if (this.model.allowDragAndDrop) {
                this._anchors = this._liList.map(function () {
                    return $("a.e-text", this)[0];
                });
                this._anchors.addClass("e-draggable e-droppable");
                this._enableDragDrop();
                this._on(this.element, "mouseup touchstart pointerdown MSPointerDown", this._anchors, this._focusElement);
                this._on(this.element, "focusout", this._anchors, this._blurElement);
            }
        },

        _addBaseClass: function () {
            this._ulList.addClass("e-treeview-ul").attr("role", "group");
            this._liList.addClass("e-item").attr("role", "treeitem");
            if (!this.element.is("ul"))
                this.element.find("ul:first").removeClass("e-treeview-ul").addClass('e-ul');
        },

        _controlRender: function () {
            var element = this.element, licoll;
            if (element != null) {
                licoll = element.find('.e-item');
                for (var i = 0; i < licoll.length; i++) {
                    var listEl = $(licoll[i]), textElement, customElement, nodeText, subItems, linkElement, span, exCollpasediv, outerdiv;
                    subItems = listEl.children('ul.e-treeview-ul')[0];
                    if (subItems)
                        $(listEl.children('ul.e-treeview-ul')[0]).remove();
                    linkElement = listEl.children('a')[0];
                    if (linkElement) {
                        nodeText = $.trim($(linkElement).text());
                        textElement = $(linkElement).clone();
                        $(linkElement).remove();
                        customElement = listEl.clone();
                        $(textElement).prepend(customElement.children());
                        $(textElement).addClass('e-text CanSelect');
                        listEl.html('');
                    }
                    else {
                        nodeText = $.trim(this._getText(listEl));
                        customElement = listEl.clone();
                        listEl.html('');
                        textElement = ej.buildTag("a.e-text CanSelect", "", "", "");
                        textElement.append(customElement.children());
                        textElement[0].innerHTML += nodeText;
                    }
                    exCollpasediv = ej.buildTag('div', "", {}, { role: "presentation" });
                    outerdiv = ej.buildTag('div.e-text-wrap', "", {}, { role: "presentation" });
                    $(outerdiv).append(exCollpasediv).append(textElement);
                    listEl.prepend(outerdiv);
                    this._renderWholeRow(listEl);
                    if (subItems)
                        listEl.append(subItems);
                    (listEl.prop('name') == undefined) && listEl.prop('name', nodeText);
                    (this.model.showCheckbox) && this._checkboxOnTemplate(licoll[i].children[0]);
                }
                if (this.model.showCheckbox)
                    element.find(".nodecheckbox").ejCheckBox({ cssClass: this.model.cssClass, change: this._checkedChange });
            }
            var liCollection = element.find('.e-item'), acollection;
            liCollection.find('>ul').hide();
            acollection = liCollection.find('.e-text');
            liCollection.filter('.e-item:last-child').addClass('last');
            $(liCollection[0]).addClass('first');
            if ($(liCollection[0]).hasClass('first') && $(liCollection[0]).hasClass('last'))
                $(liCollection[0]).removeClass('first');
            $(liCollection.filter(':has(ul)')).each(function () {
                $(this).attr("aria-expanded", false).attr("aria-selected", false)
                var liHasul = $(this).children('ul:first');
                if ($(liHasul).is(':hidden')) {
                    $(this).find('> div > div:first').removeClass('e-icon e-minus').addClass('e-icon e-plus');
                }
                else {
                    $(this.childNodes[1]).removeClass('e-icon e-plus').addClass('e-icon e-minus');
                }
            });
        },

        _getText: function (element) {
            return $(element)
                      .clone()
                      .children()
                      .remove()
                      .end()
                      .text();
        },

        _expandNodes: function (indexColl, _isIdBase) {
            var len = indexColl.length, element = [], temp;
            for (var i = 0; i < len; i++) {
                element = _isIdBase ? this._getNodeByID(indexColl[i]) : $(this._liList[indexColl[i]]);
                if (ej.isNullOrUndefined(element)) continue;
                if (!this.model.enableMultipleExpand) {
                    var distinctEle = element.siblings().find(">div>.e-minus").closest(".e-item");
                    if (distinctEle.length > 0) continue;
                }
                if (this.isExpanded(element)) continue;
                if (this.model.loadOnDemand && !(this.dataSource() instanceof ej.DataManager))
                    this._createChildNodesWhenExpand(element);
                else
                    this._expandNode(element);
            }
        },

        _checkedNodes: function (indexColl) {
            var node;
            if (indexColl.length > 0) this._removeField(this._newDataSource, this.model.fields, "isChecked");
            for (var j = 0, len = indexColl.length; j < len; j++) {
                node = $(this._liList[indexColl[j]]);
                (node[0] != null) && this._nodeCheck(node.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
            }
        },

        _finalize: function () {
            if (this.model.showCheckbox)
                this.element.find('.e-item > div .nodecheckbox').ejCheckBox({ cssClass: this.model.cssClass, change: this._checkedChange });
            this.model.allowEditing && this._allowEditable();
        },

        _finalizeNode: function () {
            this._isRender = false;
            this._allowOnDemand = true;
            var thisElement = this.element, cookieData = this._getCookies("_persistedValues"), idColl = [], id = 0, element = [], expandList, parsedData, temp;
            if (!(this.model.expandedNodes instanceof Array && this.model.expandedNodes.length > 0)) {
                expandList = thisElement.find("li.expanded"), len = expandList.length;
                for (var i = 0; i < len; i++) {
                    var expandEle = $(expandList[i]);
                    if (!this.model.enableMultipleExpand) {
                        var distinctEle = expandEle.siblings().find(">div>.e-minus").closest(".e-item");
                        if (distinctEle.length > 0) continue;
                    }
                    this._expandNode(expandEle);
                }
            }
            if (cookieData)
                parsedData = JSON.parse(cookieData), idColl = parsedData.expandedNodes, element = [];
            if (idColl && idColl.length > 0 && !ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
                for (var i = 0, len = idColl.length; i < len; i++) {
                    element = this.element.find('.e-item#' + idColl[i]);
                    if (element[0] != null) {
                        if (!this.model.enableMultipleExpand) {
                            var distinctEle = element.siblings().find(">div>.e-minus").closest(".e-item");
                            if (distinctEle.length > 0) continue;
                        }
                        if (this.model.loadOnDemand && !(this.dataSource() instanceof ej.DataManager))
                            this._createChildNodesWhenExpand(element);
                        else
                            this._expandNode(element);
                    }
                }
            } else {
                temp = JSON.parse(JSON.stringify(this.model.expandedNodes));
                this._expandNodes(temp);
            }
            if (this.model.showCheckbox) {
                if (cookieData)
                    parsedData = JSON.parse(cookieData), idColl = parsedData.checkedNodes, element = [];
                if (idColl && idColl.length > 0 && !ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
                    this._removeField(this._newDataSource, this.model.fields, "isChecked");
                    for (var i = 0, len = idColl.length; i < len; i++) {
                        element = this.element.find('.e-item#' + idColl[i]);
                        if (element[0] != null)
                            this._nodeCheck(element.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
                    }
                } else {
                    temp = JSON.parse(JSON.stringify(this.model.checkedNodes));
                    this._checkedNodes(temp);
                }
            }
            if (!(this.model.checkedNodes instanceof Array && this.model.checkedNodes.length > 0))
                this.model.showCheckbox && this._isCheckedAction();
            var _isIdBase = false;
            if (cookieData) {
                parsedData = JSON.parse(cookieData), idColl = parsedData.selectedNodes;
                _isIdBase = true;
            }
            if (!cookieData || (idColl && idColl.length == 0)) {
                idColl = this.model.selectedNodes.length > 0 ? this.model.selectedNodes : (this.model.selectedNode == -1 ? [] : [this.model.selectedNode]);
                _isIdBase = false;
            }
            var data = { ctrlKey: true };
            if (idColl && idColl.length > 0)
                this._doSelectNodes(idColl, _isIdBase);
            else
                this._isSelectedAction(data);
            this._isRender = true;
            this._allowOnDemand = false;
            thisElement.find('.e-item.checked, .e-item.expanded, .e-item.selected').removeClass("checked expanded selected");
        },

        _doSelectNodes: function (idColl, _isIdBase) {
            var data = { ctrlKey: true };
            for (var i = 0, len = idColl.length; i < len; i++) {
                var element = _isIdBase ? this._getNodeByID(idColl[i]) : $(this._liList[idColl[i]]);
                if (element[0] != null)
                    this._nodeSelectionAction(element, data);
                if (!this.model.allowMultiSelection) break;
            }
        },

        _doUnselectNodes: function (idColl) {
            for (var i = 0, len = idColl.length; i < len; i++) {
                var element = this._getNodeByID(idColl[i]);
                if (element[0] != null)
                    this._nodeUnSelectionAction(element);
                if (!this.model.allowMultiSelection) break;
            }
        },

        _updateSelectedNode: function () {
            var node = $(this._liList).find('.e-text.e-active').closest('.e-item'), element = [];
            this.model.selectedNodes = [];
            if (!this.model.allowMultiSelection) this.model.selectedNode = null;
            if (node[0] == undefined || node.length <= 0) {
                this._persistValues(this.model.selectedNodes, "selectedNodes");
                return;
            }
            if (!this.model.allowMultiSelection) {
                this._isRender = false;
                this._nodeSelectionAction($(node[0]));
                this._isRender = true;
            }
            else {
                for (var i = 0, len = node.length; i < len; i++) {
                    var index = $(this._liList).index(node[i]);
                    this.model.selectedNodes.push(index);
                }
                this._persistValues(this.model.selectedNodes, "selectedNodes");
            }
        },

        _setCookies: function (name, value) {
            if (window.localStorage)
                window.localStorage.setItem(this._id + name, value);
            else if (document.cookie)
                ej.cookie.set(this._id + name, value);
        },

        _getCookies: function (name) {
            if (window.localStorage)
                return window.localStorage.getItem(this._id + name);
            else if (window.cookie)
                return ej.cookie.get(this._id + name);
        },

        _updateCheckedNodes: function () {
            var checkedList, chkdNodes = [];
            checkedList = this.element.find('.e-item > div > .e-chkbox-wrap > .nodecheckbox.checked').closest('.e-item');
            for (var chk = 0; chk < checkedList.length; chk++)
                chkdNodes.push($(this._liList).index(checkedList[chk]));
            (chkdNodes.length > 0 || checkedList.length == 0) && (this.model.checkedNodes = chkdNodes);
            (checkedList.length == 0) && this.model.checkedNodes.push(-1);
            this._persistValues(this.model.checkedNodes, "checkedNodes");
        },

        _updateExpandedNodes: function () {
            var expandedEle, expndedNodes = [];
            expandedEle = this.element.find('.e-item > div > .e-minus').closest('.e-item').addClass('e-collapse');
            for (var i = 0, objlen = expandedEle.length; i < objlen; i++)
                expndedNodes.push($(this._liList).index(expandedEle[i]));
            (expndedNodes.length > 0 || expandedEle.length == 0) && (this.model.expandedNodes = expndedNodes);
            (expandedEle.length == 0) && this.model.expandedNodes.push(-1);
            this._persistValues(this.model.expandedNodes, "expandedNodes");
        },

        _isCheckedAction: function () {
            var chk, checkedList = this.element.find('.e-item.checked');
            for (var chk = 0; chk < checkedList.length; chk++) {
                var _childItems = $(checkedList[chk]).find('.e-item');
                var _uncheckedItems = $(checkedList[chk]).find('.e-item.unchecked');
                if (_childItems.length == 0 || !(_childItems.length > 0 && _uncheckedItems.length == _childItems.length) || !this.model.autoCheck) {
                    this._nodeCheck($(checkedList[chk]).find("> div > .e-chkbox-wrap > input.nodecheckbox:first")[0]);
                    for (var i = 0; i < _uncheckedItems.length; i++)
                        this._nodeUncheck($(_uncheckedItems[i]).find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
                }
            }
            this.element.find('.e-item.checked, .e-item.unchecked').removeClass("checked unchecked");
        },

        _isExpandedAction: function (event) {
            var expandList = this.element.find("li.expanded"), len = expandList.length;
            for (var i = 0; i < len; i++) {
                var expandEle = $(expandList[i]);
                if (!this.model.enableMultipleExpand) {
                    var distinctEle = expandEle.siblings().find(" > div > .e-minus").closest(".e-item");
                    if (distinctEle.length > 0) continue;
                }
                this._expandNode(expandEle);
            }
            this.element.find('.e-item.expanded').removeClass("expanded");
        },

        _isSelectedAction: function (event) {
            var snode = this.element.find('.e-item.selected');
            for (var i = 0, len = snode.length; i < len; i++) {
                if (snode[i] != null)
                    this._nodeSelectionAction($(snode[i]), event);
                if (!this.model.allowMultiSelection) break;
            }
            this.element.find('.e-item.selected').removeClass("selected");
        },

        _checkedChange: function (args) {
            if (!args.isInteraction) return;
            var treeview = this.element.closest(".e-treeview.e-js").data("ejTreeView");
            var action = (args.isChecked) ? "_nodeCheck" : "_nodeUncheck";
            treeview[action]($(this.element)[0], args);
        },

        _doClickAnimation: function (event) {
            var element = $(event.target);
            if (element == undefined || event.type == undefined) return;
            element.addClass("e-animate");
            if (element.is('A') && element.hasClass('e-text')) element.closest(".e-text-wrap").addClass("e-animate");
        },

        _ClickEventHandler: function (event) {
            var proxy = this, parentLi, element = $(event.target), divTag = element.closest('.e-item').find("> div > div:first");
            this._isPopup = false;
            if (divTag && !divTag.hasClass("e-process")) {
                parentLi = element.closest('.e-item');
                if (!parentLi.hasClass('e-node-disable')) {
                    this.element.find(".e-animate").removeClass("e-animate");
                    this._doClickAnimation(event);
                    var _id = (parentLi[0] != null) ? parentLi[0].getAttribute('id') : "";
                    this._triggerEvent('nodeClick', { event: event, currentElement: element[0], id: _id, parentId: parentLi.closest('ul').closest('.e-item').attr('id') });
                    if (!ej.isNullOrUndefined(element) && element.is('DIV')) {
                        if (element.hasClass('e-plus') || element.hasClass('e-minus')) {
                            var expandUl = null, args, nodeDetails, isChildLoaded;
                            if (element.is('SPAN'))
                                element = element.parent('div').find('div:first');
                            expandUl = parentLi.children('ul:first');
                            isChildLoaded = this.isChildLoaded(parentLi);
                            if (!isChildLoaded && this.model.loadOnDemand) {
                                element.removeClass('e-plus').addClass("e-load");
                                this._checkboxChecked = element.parent().find('.nodecheckbox').hasClass('checked');
                                nodeDetails = this._getNodeDetails(parentLi);
                                args = { currentElement: parentLi, targetElement: element[0], id: nodeDetails.id, value: nodeDetails.text, parentId: nodeDetails.parentId, isChildLoaded: isChildLoaded, hasParent: true, async: true };
                                this._isEventTriggered = true;
                                if(this._triggerEvent('beforeExpand', args)) {
                                    return false;
                                }
                                this._loadOnDemand(args, element[0]);
                            }
                            else
                                (element.hasClass('e-plus')) ? this._expandNode(parentLi) : this._collapseNode(parentLi);
                        }
                        else if (this.model.fullRowSelect && (element.hasClass("e-fullrow") || element.hasClass("e-text-wrap"))) {
                            element = element.closest('.e-item').find("> .e-text-wrap .e-text");
                        }
                    }
                    (!element.is('A') && !element.hasClass('input-text')) && (element = element.closest('.e-text'));
                    if (!ej.isNullOrUndefined(element) && element.is('A') && element.hasClass('CanSelect')) {
                        if (event && event["pointerType"] == "touch" && this._customPop != null && this.model.allowMultiSelection) {
                            var $target = $(event.target);
                            if (!this._customPop.is(":visible"))
                                this._customPop.show();
                            if (this._customPop.is(":visible") && !this._customPop.find(".e-rowselect").hasClass("e-spanclicked")) {
                                var offset = $target.offset();
                                this._customPop.offset({ left: offset.left, top: offset.top - 40 });
                            }
                            else
                                event.ctrlKey = true;
                        }
                        else
                            this._hidePopup();
                        element.hasClass('e-active') ? (this.model.allowMultiSelection && this._nodeUnSelectionAction(element.closest('.e-item'), event)) : this._nodeSelectionAction(element.closest('.e-item'), event);
                    }
                }
            }
            var expectionalTags = ["INPUT", "BUTTON", "TEXTAREA", "SELECT"]
            if (event.target && expectionalTags.indexOf(event.target.tagName) < 0){
                this.element.focus();
            }
        },

        _getChildTables: function (mapper, parentLen, currentLen) {
            if (!ej.isNullOrUndefined(mapper.child))
                return (parentLen == currentLen) ? mapper.child : this._getChildTables(mapper.child, parentLen, currentLen + 1);
        },

        _loadOnDemand: function (args) {
            var childItems, parent, mapper, proxy = this, queryPromise;
            if (this.dataSource() instanceof ej.DataManager) {
                parent = args.currentElement.parents('ul.e-treeview-ul').length;
                mapper = this._getChildTables(proxy.model.fields, parent, 1);
                if (ej.isNullOrUndefined(mapper) && ej.isNullOrUndefined(this.model.fields["child"]))
                    mapper = this.model.fields;
                if (!mapper) {
                    $(args.targetElement).hasClass('e-load') && $(args.targetElement).removeClass(($(args.targetElement).hasClass('e-plus') || $(args.targetElement).hasClass('e-minus')) ? 'e-load' : 'e-icon e-load');
                    return;
                }
                queryPromise = this._executeDataQuery(mapper, mapper["parentId"], (this._typeOfFieldId == "number" ? parseInt(args.currentElement[0].id) : args.currentElement[0].id));
                queryPromise.done(function (e) {
                    childItems = (e.xhr && e.xhr.responseJSON && e.xhr.responseJSON.d) ? e.xhr.responseJSON.d : (e.result ? e.result : []);
                    childItems = proxy._getSortAndFilterList(mapper, childItems);
                    if (childItems.length > 0) {
                        proxy._onlineData = true;
                        var parentID = ej.getObject(mapper["parentId"], childItems[0]);
                        proxy._updateRemoteData(proxy._newDataSource, parentID, childItems, proxy.model.fields);
                        proxy._loadChildNodeWhenOnDemand(childItems, args, mapper);
                    } else
                        $(args.targetElement).hasClass('e-load') && $(args.targetElement).removeClass(($(args.targetElement).hasClass('e-plus') || $(args.targetElement).hasClass('e-minus')) ? 'e-load' : 'e-icon e-load');
                });
            }
            else {
                childItems = this._getChildNodes(this._dataSource, args);
                if (!ej.isNullOrUndefined(childItems) && childItems.length > 0) {
                    setTimeout(function () {
                        proxy._createSubNodesWhenLoadOnDemand(childItems, args.targetElement, proxy.model.fields);
                    }, 400);
                }
                else
                    $(args.targetElement).hasClass('e-load') && $(args.targetElement).removeClass(($(args.targetElement).hasClass('e-plus') || $(args.targetElement).hasClass('e-minus')) ? 'e-load' : 'e-icon e-load');
            }
        },

        _loadChildNodeWhenOnDemand: function (childItems, args, mapper) {
            var proxy = this;
            !ej.isNullOrUndefined(childItems) && childItems.length > 0 && setTimeout(function () {
                proxy._createSubNodesWhenLoadOnDemand(childItems, args.targetElement, mapper);
            }, 100);
        },

        _createSubNodesWhenLoadOnDemand: function (childItems, element, mapper) {
            this._loadOnDemandNodes = true;
            this._templateNodeCreation(childItems, mapper);
            $(this._fragment.firstChild).attr('style', 'display:none');
            this._fragment.firstChild.className = "e-treeview-ul";
            this._fragment.firstChild.setAttribute('role', "group");
            element.parentNode.parentNode.appendChild(this._fragment);
            var liElement = $(element).closest('.e-item');
            liElement.attr({ 'aria-expanded': false, 'aria-expanded': true });
            $(element).removeClass("e-load").addClass('e-plus');
            this._expandNode(liElement);
            this._finalizeLoadOnDemand(liElement);
        },

        _finalizeLoadOnDemand: function (element) {
            this._beforeBaseClass();
            this._isRender = false;
            if (this.model.showCheckbox) {
                element.children('ul').find('li > div > input.nodecheckbox').ejCheckBox({ cssClass: this.model.cssClass, change: this._checkedChange });
                var _childItems = element.children('ul').find('.e-item');
                var _uncheckedItems = element.children('ul').find('.e-item.unchecked');
                if (_uncheckedItems.length >= 0 && _uncheckedItems.length != _childItems.length && this._checkboxChecked && this.model.autoCheck)
                    _childItems.not(".unchecked").addClass('checked');
                else if (_uncheckedItems.length == _childItems.length && this.isNodeChecked(element))
                    this._nodeUncheck(element.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
                if (this._isLoaded) {
                    this._isCheckedAction();
                    this._updateCheckedNodes();
                }
            }
            this._isRender = true;
            this._addDragableClass();
            this._preventEditable();
            this.model.allowEditing && this._allowEditable();
            if (this._isLoaded) {
                this._isSelectedAction();
                this._updateSelectedNode();
                this._allowOnDemand = true;
                this._isExpandedAction();
                this._updateExpandedNodes();
                this._allowOnDemand = false;
            }
            if (this.model.loadOnDemand && this.model.enablePersistence && !(this.dataSource() instanceof ej.DataManager)) {
                var obj, value = this._getCookies("_childNodes");
                if (value) obj = JSON.parse(value);
                (!ej.isNullOrUndefined(obj) && obj.indexOf(element[0].id) == -1) ? obj.push(element[0].id) : obj = [element[0].id];
                this._setCookies("_childNodes", JSON.stringify(obj));
            }
        },

        _getChildNodes: function (obj, rootNodes) {
            var childNodes = [];
            if (this._templateType == 1) {
                for (var i = 0, objlen = obj.length; i < objlen; i++) {
                    var parentId = ej.getObject(this.model.fields.parentId, obj[i][0]);
                    if (!ej.isNullOrUndefined(obj[i][0]) && !ej.isNullOrUndefined(parentId) && parentId != 0 && parentId == rootNodes.id)
                        return obj[i];
                }
            }
            else {
                for (var i = 0, objlen = obj.length; i < objlen; i++) {
                    if (ej.getObject(this.model.fields.id, obj[i]) == rootNodes.id && ej.getObject(this.model.fields.parentId, obj[i]) != 0)
                        return obj[i].child;
                    if (obj[i].hasOwnProperty('child')) {
                        childNodes = this._getChildNodes(obj[i].child, rootNodes);
                        if (!ej.isNullOrUndefined(childNodes) && childNodes.length > 0)
                            break;
                    }
                }
                return childNodes;
            }
        },

        _getPath: function (element) {
            var path = element.prop('name'), liEle;
            var liEle = element.parents('.e-item:first');
            while (liEle[0] != null && liEle[0].parentNode.id != this._id) {
                path = liEle.prop('name') + '/' + path;
                liEle = liEle.parents('.e-item:first');
            }
            path = this._id + "/" + path;
            return path;
        },

        _nodeSelectionAction: function (liElement, event) {
            if (liElement[0] == null && liElement.length == 0) return;
            var nodeDetails, data, angElement = $(liElement.find('> div > .e-text')[0]), _isSelected = false, _oldSelectedNodes = this.model.selectedNodes.slice();
            var index = this._liList.index(liElement[0]);
            this._currNode = liElement;
            if (this._triggerEvent('beforeSelect', { target: liElement, nodeDetails: this._getNodeDetails(liElement) })) return;
            if (!this.model.allowMultiSelection || !event || (event && !event.ctrlKey)) {
                this.element.find('a.e-text.e-active').removeClass('e-node-focus e-active');
                this.element.find('[aria-selected=true]').attr("aria-selected", false);
                this.element.find('.e-li-active').removeClass('e-li-active');
                if (this.model.fullRowSelect) {
                    this.element.find('.e-li-focus').removeClass('e-li-focus');
                    this.element.find('.e-node-focus').removeClass('e-node-focus');
                }
                this.element.find("#" + this._id + "_active").removeAttr("id");
                this.model.selectedNodes = [];
                this._deepWatch && this._removeField(this._newDataSource, this.model.fields, "selected");
            }
            if (this.model.allowMultiSelection && event && event.shiftKey) {
                if (!this._startNode)
                    this._startNode = this._currNode;
                var nodes = this.getVisibleNodes();
                var startIndex = nodes.index(this._startNode);
                var endIndex = nodes.index(liElement[0]);
                if (startIndex > endIndex) {
                    var temp = startIndex;
                    startIndex = endIndex;
                    endIndex = temp;
                }
                for (var i = startIndex ; i <= endIndex; i++) {
                    var _currLi = $(nodes.get(i));
                    var _currIndex = this._liList.index(_currLi[0]);
                    if ($.inArray(_currIndex, this.model.selectedNodes) == -1) {
                        this.model.selectedNodes.push(_currIndex);
                        var _currAng = _currLi.find('> div > a.e-text');
                        _currAng.removeClass('e-node-focus');
                        _currLi.attr("aria-selected", true);
                        _currLi.addClass('e-li-active');
                        _currAng.addClass('e-active');
                        _isSelected = true;
                        this._deepWatch && this._updateField(this._newDataSource, _currLi.attr('id'), this.model.fields, "selected", true);
                    }
                }
            }
            else
                this._startNode = liElement;
            if (!this.model.allowMultiSelection) this.model.selectedNode = index;
            if (!_isSelected) {
                this.element.find('a.e-text.e-node-focus').removeClass('e-node-focus');
                liElement.attr("aria-selected", true);
                liElement.addClass('e-li-active');
                angElement.addClass('e-active');
                if (!this.model.allowMultiSelection) {
                    if (angElement.closest(".e-item")[0].id != null && angElement.closest(".e-item")[0].id != "") {
                        this.element.attr("aria-activedescendant", angElement.closest(".e-item")[0].id);
                    } else {
                        angElement.closest(".e-item").attr("id", this._id + "_active");
                    }
                }
                if ($.inArray(index, this.model.selectedNodes) == -1)
                    this.model.selectedNodes.push(index);
                this._deepWatch && this._updateField(this._newDataSource, liElement.attr('id'), this.model.fields, "selected", true);
            }
            if (this.model.enablePersistence)
                this._persistValues(this.model.selectedNodes, "selectedNodes");
            if (this._deepWatch) {
                this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
                this.dataSource(this._newDataSource);
            }
            this._triggerGivenEvent('nodeSelect', liElement);
        },

        _nodeUnSelectionAction: function (liElement, event) {
            if (this.model.allowMultiSelection && event && !event.ctrlKey) {
                this._nodeSelectionAction(liElement, event);
                return;
            }
            liElement.removeClass('e-li-active');
            liElement.attr("aria-selected", false).find('> div > .e-text').removeClass('e-active').attr("id", "");
            this._updateUnselectModel(liElement[0]);
            if (this._deepWatch) {
                this._updateField(this._newDataSource, liElement.attr('id'), this.model.fields, "selected", false);
                this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
                this.dataSource(this._newDataSource);
            }
            this._triggerGivenEvent('nodeUnselect', liElement);
        },

        _updateUnselectModel: function (liElement) {
            var index = this._liList.index(liElement), _nodes = this.model.selectedNodes;
            if (!this.model.allowMultiSelection) this.model.selectedNode = null;
            var arrIndex = $.inArray(index, _nodes);
            if (arrIndex > -1) {
                this.model.selectedNodes.splice(arrIndex, 1);
            }
            this._persistValues(this.model.selectedNodes, "selectedNodes");
        },

        _triggerGivenEvent: function (event, element) {
            if (this._isRender) {
                var data = { currentElement: element, value: element.find('> div > a.e-text').eq(0).text(), id: element[0].getAttribute('id'), parentId: element.closest('ul').closest('.e-item').attr('id'), selectedNodes: this.model.selectedNodes };
                this._triggerEvent(event, data);
            }
        },

        _getNodesIndex: function (cnodes) {
            var cindex = [];
            for (var i = 0, len = cnodes.length; i < len; i++)
                cindex.push(this._liList.index(cnodes[i]));
            return cindex;
        },

        _nodeEnableAction: function (liElement) {
            var parent = this.getParent(liElement);
            if (parent[0] != null && parent.hasClass('e-node-disable')) return;
            if (this.model.showCheckbox)
                liElement.find('div > .e-chkbox-wrap > .nodecheckbox').ejCheckBox('enable').prop('disabled', false);
            liElement.find('.e-text').removeClass('e-node-disable')
                     .closest('.e-item')
                     .removeClass('e-node-disable')
                     .removeProp("disabled");
        },

        _nodeDisableAction: function (liElement) {
            this._collapseNode(liElement);
            if (this.model.showCheckbox)
                liElement.find('div > .e-chkbox-wrap > .nodecheckbox').ejCheckBox('disable').prop('disabled', true);
            var snodes = liElement.find(".e-text.e-active").closest(".e-item");
            liElement.find('.e-text').addClass('e-node-disable')
                     .removeClass('e-active')
                     .attr("id", "")
                     .closest('.e-item')
                     .addClass('e-node-disable')
                     .prop('disabled', true);
            for (var i = 0, len = snodes.length; i < len; i++)
                this._updateUnselectModel(snodes[i]);
        },

        _getNodeDetails: function (liElement) {
            if (liElement[0] != null && liElement.is('LI') && liElement.hasClass('e-item')) {
                var id, text, pid, level, childs, expanded, checked, selected, index;
                id = liElement[0].getAttribute('id');
                text = liElement.children('div').find('.e-text:first').text();
                if(this.model.template != null){
                    var nodeText = this._getNodeObject(id, true);
                    if (nodeText.length > 0) text = nodeText[0];
				}
                pid = liElement.closest('ul').closest('.e-item').attr('id');
				level = liElement.parentsUntil('.e-treeview-wrap','ul').length;
                childs = liElement.find('.e-item').length;
                expanded = this._isNodeExpanded(liElement);
                checked = this._isChecked(liElement);
                selected = liElement.find('> div > .e-text').hasClass('e-active');
                index = this._liList.index(liElement);
                return { id: id, text: text, parentId: (pid) ? pid : "", level: level, count: childs, expanded: expanded, checked: checked, selected: selected, index: index };
            } else {
                return { id: "", text: "", parentId: "", level: "", count: "", expanded: "", checked: "", selected: "", index: "" };
            }
        },

        _denyMultipleExpand: function (liElement) {
            var distinctEle = liElement.siblings().find(">div>.e-minus").closest(".e-item");
            for (var i = 0, len = distinctEle.length; i < len; i++) {
                this._collapseNode($(distinctEle[i]));
            }
        },

        _expandCollapseAction: function (element) {
            if (element && !element.hasClass("e-process")) {
                var expandUl, proxy = this, parentLi, nodeDetails, data, isChildLoaded;
                parentLi = element.closest('.e-item');
                if (element.is('SPAN'))
                    element = $(element).parent('div').find('div:first');
                expandUl = parentLi.children('ul:first');
                if (expandUl.find('> .e-item').length > 0) {
                    this.model.enableAnimation && element.addClass("e-process");
                    var tempInstance = $(element).closest('.e-treeview.e-js').data('ejTreeView');
					nodeDetails = tempInstance._getNodeDetails(parentLi);
                    isChildLoaded = this.isChildLoaded(parentLi);
                    data = { currentElement: parentLi, value: nodeDetails.text, isChildLoaded: isChildLoaded, id: nodeDetails.id, parentId: nodeDetails.parentId, async: false };
                    if (!this._isNodeExpanded(parentLi) && isChildLoaded) {
                        if (!this._isEventTriggered)
                            if (this._triggerEvent('beforeExpand', data)) return false;
                        this._isEventTriggered = false;
                        parentLi.attr("aria-expanded", true);
                        this._addExpandedNodes(this._liList.index(parentLi));
                        $(element).removeClass('e-icon e-plus').addClass('e-icon e-minus');
                        parentLi.addClass('e-collapse');
                        this._deepWatch && this._updateField(this._newDataSource, nodeDetails.id, this.model.fields, "expanded", true);
                        this._doAnimation(expandUl, element, "nodeExpand", data, 350);
                    }
                    else {
                        this.element.find(".e-material-animate").removeClass("e-material-animate");
                        parentLi.attr("aria-expanded", false);
                        if (this._triggerEvent('beforeCollapse', data) === true)
                            return false;
                        this._removeExpandedNodes(this._liList.index(data.currentElement));
                        $(element).removeClass('e-icon e-minus').addClass('e-icon e-plus');
                        parentLi.removeClass('e-collapse');
                        this._deepWatch && this._updateField(this._newDataSource, nodeDetails.id, this.model.fields, "expanded", false);
                        this._doAnimation(expandUl, element, "nodeCollapse", data, 200);
                    }
                    if (this._deepWatch) {
                        this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
						this.dataSource(this._newDataSource);
                    }
                }
            }
        },

        _doAnimation: function (expandUl, element, event, data, animationSpeed) {
            var proxy = this;
            if (this.model.enableAnimation) {
                expandUl.animate({ height: 'toggle' }, animationSpeed, 'linear', function () {
                    if (ej.isNullOrUndefined(proxy.model)) return;
                    proxy._doAnimateAction(element, event, data);
                });
            }
            else {
                expandUl.css("display", animationSpeed == 200 ? "none" : "block");
                this._doAnimateAction(element, event, data);
            }
        },

        _doAnimateAction: function (element, event, data) {
            element.removeClass("e-process");
            this._triggerEvent(event, data);
        },

        _isChecked: function (liElement) {
            return (liElement.find("> div > .e-chkbox-wrap:first").attr("aria-checked") === 'true') ? true : false;
        },

        _doRecursiveCheck: function (parentLi, checkedArray) {
            var chkWrapper, chkEle, liElement, textvalue, parentLi, childUl;
            childUl = this._getChildUl(parentLi);
            chkWrapper = (childUl) ? childUl.querySelectorAll('.e-chkbox-wrap[aria-checked="true"]').length : 0;
            var allChkEle = (childUl) ? childUl.querySelectorAll('.e-item > div > .e-chkbox-wrap > .nodecheckbox') : [];
            chkEle = parentLi.firstChild.querySelector('.nodecheckbox');
            if (chkEle && chkEle.nodeName.toUpperCase() == 'INPUT') {
                var chkboxObj = $(chkEle).data('ejCheckBox');
                if (chkWrapper == allChkEle.length || this.model.autoCheckParentNode) {
                    chkboxObj.setModel({ enableTriState: false, checked: true });
                    chkEle.className += " checked";
                    textvalue = parentLi.firstChild.getElementsByTagName('a')[0].innerHTML;
                    checkedArray.push({ id: parentLi.id, text: textvalue });
                    if (this._deepWatch && !this.model.autoCheckParentNode) this._updateField(this._newDataSource, parentLi.id, this.model.fields, "isChecked", true);
                    this._addHiddenInputElement(chkEle, textvalue);
                    this._addCheckNodes(this._liList.index(parentLi));
                } else
                    chkboxObj.setModel({ enableTriState: true, checkState: "indeterminate" });
                parentLi = parentLi.parentNode.parentNode;
                if (parentLi.nodeName.toUpperCase() == 'LI')
                    this._doRecursiveCheck(parentLi, checkedArray);
            }
        },

        _nodeCheck: function (chkEle, args) {
            if ($(chkEle)[0] == null) return;
            this._CurrenctSelectedNodes = [];
            this._checkedArray = [];
            var chkObj, currentLi, textvalue, chkCollection, chklen, parentLi;
            chkEle.className += " checked";
            chkObj = $(chkEle).data('ejCheckBox');
            if (chkObj) {
                chkObj.setModel({ enableTriState: false, checked: true });
                currentLi = chkEle.parentNode.parentNode.parentNode;
                textvalue = currentLi.firstChild.getElementsByTagName('a')[0].lastChild.nodeValue;
                this._checkedArray.push({ id: currentLi.id, text: textvalue });
                this._deepWatch && this._updateField(this._newDataSource, currentLi.id, this.model.fields, "isChecked", true);
                this._addHiddenInputElement(chkEle, textvalue);
                this._addCheckNodes(this._liList.index(currentLi));
                if (this.model.autoCheck) {
                    var allChkEle, liElement, childUl;
                    childUl = this._getChildUl(currentLi);
                    allChkEle = (childUl) ? childUl.querySelectorAll('.e-item > div > .e-chkbox-wrap > .nodecheckbox') : [];
                    for (var i = 0, chklen = allChkEle.length; i < chklen; i++) {
                        $(allChkEle[i]).ejCheckBox({ checked: true, enableTriState: false })[0].className += " checked";
                        liElement = allChkEle[i].parentNode.parentNode.parentNode;
                        textvalue = liElement.firstChild.getElementsByTagName('a')[0].lastChild.nodeValue;
                        this._checkedArray.push({ id: liElement.id, text: textvalue });
                        this._deepWatch && this._updateField(this._newDataSource, liElement.id, this.model.fields, "isChecked", true);
                        this._addHiddenInputElement(allChkEle[i], textvalue);
                        this._addCheckNodes(this._liList.index(liElement));
                    }
                    parentLi = currentLi.parentNode.parentNode;
                    if (parentLi.nodeName.toUpperCase() == 'LI')
                        this._doRecursiveCheck(parentLi, this._checkedArray);
                }
                (args) && (args.checknode = this._checkedArray);
                this._onChecked($(chkEle), args);
            }
            if (this._deepWatch) {
                this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
				this.dataSource(this._newDataSource);
            }
            this._persistValues(this.model.checkedNodes, "checkedNodes");
        },

        _addHiddenInputElement: function (checkedElement, textVal) {
            if (checkedElement.firstChild == null) {
                var hiddenElement = document.createElement('input');
                hiddenElement.setAttribute("type", "hidden");
                hiddenElement.setAttribute("name", this._id + "_Checkbox_" + checkedElement.value + "_Text");
                hiddenElement.setAttribute("value", textVal);
                try {
                    checkedElement.appendChild(hiddenElement);
                }
                catch (err) { }
            }
        },

        _doRecursiveUncheck: function (parentLi, uncheckedArray) {
            var chkWrapper, chkEle, liElement, textvalue, parentLi, childUl;
            childUl = this._getChildUl(parentLi);
            chkWrapper = (childUl) ? childUl.querySelectorAll('.e-chkbox-wrap[aria-checked="true"]').length : 0;
            var allChkEle = (childUl) ? childUl.querySelectorAll('.e-item > div > .e-chkbox-wrap > .nodecheckbox') : [];
            chkEle = parentLi.firstChild.querySelector('.nodecheckbox');
            if (chkEle && chkEle.nodeName.toUpperCase() == 'INPUT') {
                var chkboxObj = $(chkEle).data('ejCheckBox');
                if (chkWrapper <= 0) {
                    chkboxObj.setModel({ enableTriState: false, checked: false });
                    $(chkEle).removeClass("checked").removeClass('checked').children().remove();
                    textvalue = parentLi.firstChild.getElementsByTagName('a')[0].innerHTML;
                    this._removeCheckNodes(this._liList.index(parentLi));
                    uncheckedArray.push({ id: parentLi.id, text: textvalue });
                    this._deepWatch && this._updateField(this._newDataSource, parentLi.id, this.model.fields, "isChecked", false);
                }
                if (chkWrapper > 0 && this.model.autoCheckParentNode) {
                    chkboxObj.setModel({ checked: true });
                    chkEle.className += " checked";
                    textvalue = parentLi.firstChild.getElementsByTagName('a')[0].innerHTML;
                    this._addHiddenInputElement(parentLi, textvalue);
                    this._deepWatch && this._updateField(this._newDataSource, parentLi.id, this.model.fields, "isChecked", false);
                }
                else if (chkWrapper > 0 && !this.model.autoCheckParentNode) {
                    if (allChkEle.length > 1)
                        chkboxObj.setModel({ enableTriState: true, checkState: "indeterminate" });
                    else
                        chkboxObj.setModel({ checked: false });
                    $(chkEle).removeClass("checked").removeClass('checked').children().remove();
                    this._removeCheckNodes(this._liList.index(parentLi));
                    this._deepWatch && this._updateField(this._newDataSource, parentLi.id, this.model.fields, "isChecked", false);
                }
                parentLi = parentLi.parentNode.parentNode;
                if (parentLi.nodeName.toUpperCase() == 'LI')
                    this._doRecursiveUncheck(parentLi, uncheckedArray);
            }
        },

        _nodeUncheck: function (chkEle, args) {
            if ($(chkEle)[0] == null) return;
            var proxy = this; this._uncheckedArray = [];
            var currentLi = chkEle.parentNode.parentNode.parentNode;
            $(currentLi).find('div > .e-chkbox-wrap > .nodecheckbox').removeClass('checked').children().remove();
            var chkObj = $(chkEle).data('ejCheckBox');
            this._removeCheckNodes(this._liList.index(currentLi));
            if (chkObj) {
                chkObj.setModel({ enableTriState: false, checked: false });
                var textvalue = currentLi.firstChild.getElementsByTagName('a')[0].lastChild.nodeValue;
                this._uncheckedArray.push({ id: currentLi.id, text: textvalue });
                this._deepWatch && this._updateField(this._newDataSource, currentLi.id, this.model.fields, "isChecked", false);
                if (this.model.autoCheck) {
                    var childUl = this._getChildUl(currentLi);
                    var allChkEle = (childUl) ? childUl.querySelectorAll('.e-item > div > .e-chkbox-wrap > .nodecheckbox') : [];
                    for (var i = 0, chklen = allChkEle.length; i < chklen; i++) {
                        $(allChkEle[i]).ejCheckBox({ enableTriState: false, checked: false });
                        var liElement = allChkEle[i].parentNode.parentNode.parentNode;
                        textvalue = liElement.firstChild.getElementsByTagName('a')[0].lastChild.nodeValue;
                        this._uncheckedArray.push({ id: liElement.id, text: textvalue });
                        this._deepWatch && this._updateField(this._newDataSource, liElement.id, this.model.fields, "isChecked", false);
                        this._removeCheckNodes(this._liList.index(liElement));
                    }
                    var parentLi = currentLi.parentNode.parentNode;
                    if (parentLi.nodeName.toUpperCase() == 'LI')
                        this._doRecursiveUncheck(parentLi, this._uncheckedArray);
                }
                (args) && (args.unchecknode = this._uncheckedArray);
                this._onUnChecked($(chkEle), args);
            }
            if (this._deepWatch) {
                this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
				this.dataSource(this._newDataSource);
            }
            this._persistValues(this.model.checkedNodes, "checkedNodes");
        },

        _executeDataQuery: function(mapper, key, val) {
            var queryManager, queryPromise;
            queryManager = ej.Query();
            queryManager = this._columnToSelect(mapper);
            if (!ej.isNullOrUndefined(key) && key != "") {
                var tempQuery=$.extend(true,[],queryManager._params);
                queryManager._params = [];
                queryManager.addParams(key, val);
                for (var i = 0; i < tempQuery.length; i++)
                    (tempQuery[i].key != key) && queryManager.addParams(tempQuery[i].key, tempQuery[i].value);
                queryManager.where(key, ej.FilterOperators.equal, val);
            }
            queryPromise = mapper["dataSource"].executeQuery(queryManager);
            return queryPromise;
        },

        _createChildNodesWhenExpand: function (parentLi, expandChild, level, excludeHiddenNodes, outerLi, thisObj) {
            var nodeid, nodeText, args, element;
            if (parentLi.length > 0 && parentLi.find('ul .e-item').length == 0) {
                nodeid = parentLi.attr('id');
                nodeText = parentLi.children('div').find('.e-text:first').text();
                element = parentLi.children('div').find('div.e-plus:first');
                args = { currentElement: parentLi, targetElement: element[0], id: nodeid, value: nodeText, isChildLoaded: false, hasParent: true, async: false };
                var childItems, parent, mapper, proxy = this, queryPromise;
                this._isEventTriggered = true;
                if (this._triggerEvent('beforeExpand', args)) {
                    return false;
                }
                if (this.dataSource() instanceof ej.DataManager) {
                    parent = args.currentElement.parents('ul.e-treeview-ul').length;
                    mapper = this._getChildTables(this.model.fields, parent, 1);
                    if (ej.isNullOrUndefined(mapper) && ej.isNullOrUndefined(this.model.fields["child"]))
                        mapper = this.model.fields;
                    if (!mapper) {
                        $(args.targetElement).hasClass('e-load') && $(args.targetElement).removeClass(($(args.targetElement).hasClass('e-plus') || $(args.targetElement).hasClass('e-minus')) ? 'e-load' : 'e-icon e-load');
                        return;
                    }
                    (mapper.query && mapper.query.queries.length > 0) && (mapper.query.queries = []);
                    this._treeList.push("false");
                    queryPromise = this._executeDataQuery(mapper, mapper["parentId"], (this._typeOfFieldId == "number" ? parseInt(args.currentElement[0].id) : args.currentElement[0].id));
                    queryPromise.done(function (e) {
                        proxy._treeList.pop();
                        childItems = (e.xhr && e.xhr.responseJSON && e.xhr.responseJSON.d) ? e.xhr.responseJSON.d : (e.result ? e.result : []);
                        childItems = proxy._getSortAndFilterList(mapper, childItems);
                        if (childItems.length > 0) {
                            var parentID = ej.getObject(mapper["parentId"], childItems[0]);
                            proxy._updateRemoteData(proxy._newDataSource, parentID, childItems, proxy.model.fields);
                        }
                        proxy._appendChild(childItems, parentLi, mapper, expandChild, level, excludeHiddenNodes);
                        level && proxy._expandByLevel(parentLi.find('> ul'), level - 1, excludeHiddenNodes);
                        if (proxy._treeList.length == 0) {
                            outerLi && proxy._doAfterExpand(parentLi, outerLi, thisObj);
                            proxy._completeRendering();
                        }
                        if (proxy._parentLevelDropChecking.find('ul .e-item').length == 0) {
                            $(proxy._parentLevelDropChecking).find('> div > .e-icon').remove();
                        }
                    });
                }
                else {
                    var childItems = this._getChildNodes(this._dataSource, { id: parentLi[0].id });
                    this._appendChild(childItems, parentLi, this.model.fields, expandChild, level, excludeHiddenNodes);
                }
            }
            else
                this._expandNode(parentLi);
        },

        _appendChild: function (childItems, parentLi, mapper, expandChild, level, excludeHiddenNodes) {
            if (!ej.isNullOrUndefined(childItems) && childItems.length > 0) {
                this._checkboxChecked = parentLi.find('> div > .e-chkbox-wrap > .nodecheckbox').hasClass('checked');
                this._loadOnDemandNodes = true;
                if (parentLi.find('ul .e-item').length == 0) {
                    this._templateNodeCreation(childItems, mapper);
                    parentLi.append(this._fragment);
                }
                this._finalizeLoadOnDemand(parentLi);
                this._expandNode(parentLi);
                if (expandChild && !level && !excludeHiddenNodes) {
                    var _items = parentLi.find(".e-item > div > .e-plus").closest(".e-item");
                    for (var i = 0, len = _items.length; i < len; i++)
                        this._createChildNodesWhenExpand($(_items[i]), true, null, excludeHiddenNodes);
                }
            }
            else if (expandChild)
                parentLi.find("> div > .e-plus").removeClass('e-plus e-icon');
        },

        _getSortAndFilterList: function (mapper, list) {
            var dataSource;
            if (!list || !list.length || list.length < 1) dataSource = [];
            else if (!this.model.sortSettings.allowSorting) {
                dataSource = list;
            }
            else {
                var tempQuery = ej.Query();
                this._addSortingQuery(tempQuery, mapper);
                dataSource = ej.DataManager(list).executeLocal(tempQuery);
            }
            return dataSource;
        },

        _addSortingQuery: function (query, mapper) {
            var key = (mapper && mapper.text) ? mapper["text"] : "text";
            var order = (this.model.sortSettings.sortOrder == ej.sortOrder.Descending) ? true : false;
            query.sortBy(key, order);
        },

        _expandNode: function (liElement) {
            if (liElement[0] != null && liElement.length > 0) {
                var expandIcon = liElement.find('> div > div:first');
                if (this.model.loadOnDemand && !this.model.enablePersistence) {
                    if (liElement.find('> ul > .e-item').length > 0 && expandIcon.hasClass('e-plus')) {
                        if (!this.model.enableMultipleExpand) this._denyMultipleExpand(liElement);
                        this._expandCollapseAction(liElement.find('> div > div.e-plus:first'));
                    } else if (expandIcon.hasClass('e-icon') && !expandIcon.hasClass('e-minus')) {
                        (this._allowOnDemand) && this._createChildNodesWhenExpand(liElement);
                    }
                }
                else {
                    if (expandIcon.hasClass('e-plus')) {
                        var isExpanded = liElement.find('> ul > .e-item').length > 0 ? true : false;
                        if (isExpanded) {
                            if (!this.model.enableMultipleExpand) this._denyMultipleExpand(liElement);
                            this._expandCollapseAction(expandIcon);
                        }
                    }
                }
            }
            return true;
        },

        _collapseNode: function (liElement) {
            if (liElement[0] != null && liElement.length > 0) {
                if (liElement.find('> ul > .e-item').length > 0) {
                    var collapseIcon = liElement.find('> div > div:first');
                    if (collapseIcon.hasClass('e-minus'))
                        this._expandCollapseAction(collapseIcon);
                }
            }
        },

        _getElement: function (level) {
            return (!this.element.is('UL')) ? this.element.find('> ul') : this.element;
        },

        _getImmediateChild: function (ele, excludeHiddenNodes) {
            return excludeHiddenNodes ? ele.find('> .e-item:not(:hidden)') : ele.find('> .e-item');
        },

        _expandByLevel: function (ele, level, excludeHiddenNodes) {
            (level > 0) && this._expandByNode(this._getImmediateChild(ele, excludeHiddenNodes), level, excludeHiddenNodes);
        },

        _expandByNode: function (cnodes, level, excludeHiddenNodes) {
            for (var i = 0, len = cnodes.length; i < len; i++) {
                if ($(cnodes[i]).find("> div > div").hasClass("e-plus"))
                    this.model.loadOnDemand ? this._createChildNodesWhenExpand($(cnodes[i]), true, level, excludeHiddenNodes) : this._expandNode($(cnodes[i]));
                this._expandByLevel($(cnodes[i]).find('> ul'), level - 1, excludeHiddenNodes);
            }
        },

        _expandAll: function (excludeHiddenNodes) {
            var element = this.element, i, len, cnodes;
            cnodes = element.find(excludeHiddenNodes ? '.e-item > div > .e-plus:not(:hidden)' : '.e-item > div > .e-plus').closest('.e-item');
            if (this.model.loadOnDemand) {
                for (i = 0, len = cnodes.length; i < len; i++)
                    this._createChildNodesWhenExpand($(cnodes[i]), true, null, excludeHiddenNodes);
            }
            else {
                for (i = 0, len = cnodes.length; i < len; i++)
                    this._expandNode($(cnodes[i]));
            }
        },

        _collapseByLevel: function (ele, level, excludeHiddenNodes) {
            (level > 0) && this._collapseByNode(this._getImmediateChild(ele, excludeHiddenNodes), level, excludeHiddenNodes);
        },

        _collapseByNode: function (cnodes, level, excludeHiddenNodes) {
            for (var i = 0, len = cnodes.length; i < len; i++) {
                if ($(cnodes[i]).find("> div > div").hasClass("e-minus"))
                    this._collapseNode($(cnodes[i]));
                this._collapseByLevel($(cnodes[i]).find('> ul'), level - 1, excludeHiddenNodes);
            }
        },

        _collapseAll: function (excludeHiddenNodes) {
            var element = this.element, i, enodes, len;
            enodes = element.find(excludeHiddenNodes ? '.e-item > div > .e-minus:not(:hidden)' : '.e-item > div > .e-minus').closest('.e-item');
            if (enodes.length > 0) {
                for (i = 0, len = enodes.length; i < len; i++) {
                    this._collapseNode($(enodes[i]));
                }
            }
        },

        _checkAll: function () {
            this._CurrenctSelectedNodes = [];
            var element = this.element, chkColl, len;
            chkColl = element.find('.e-item > div > .e-chkbox-wrap > .nodecheckbox');
            chkColl.addClass('checked');
            for (var i = 0, len = chkColl.length; i < len; i++) {
                $(chkColl[i]).ejCheckBox("setModel", { checked: true });
                this._addHiddenInputElement(chkColl[i], $(chkColl[i]).parent().siblings('.e-text')[0].lastChild.nodeValue);
            }
            this.model.checkedNodes = this.getCheckedNodesIndex();
        },

        _uncheckAll: function () {
            var element = this.element, chkColl, len;
            chkColl = element.find('.e-item > div > .e-chkbox-wrap > .nodecheckbox');
            chkColl.removeClass("checked").children().remove();
            for (var i = 0, len = chkColl.length; i < len; i++)
                $(chkColl[i]).ejCheckBox("setModel", { checked: false });
            this.model.checkedNodes = [];
            this.model.checkedNodes.push(-1);
        },

        _selectAll: function () {
            this._isRender = false;
            var data = { ctrlKey: true };
            for (var i = 0, len = this._liList.length; i < len; i++) {
                var element = $(this._liList[i]);
                if (element[0] != null)
                    this._nodeSelectionAction(element, data);
                if (!this.model.allowMultiSelection) break;
            }
            this._isRender = true;
        },

        _unselectAll: function () {
            this.element.find('a.e-text.e-active').removeClass('e-node-focus e-active');
            this.element.find('[aria-selected=true]').attr("aria-selected", false);
            this.element.find('.e-li-active').removeClass('e-li-active');
            this.element.find('.e-li-focus').removeClass('e-li-focus');
            this.element.find('.e-node-focus').removeClass('e-node-focus');
            this.model.selectedNodes = [];
            if (this.model.enablePersistence)
                this._persistValues(this.model.selectedNodes, "selectedNodes");
        },

        _isNodeExpanded: function (liElement) {
            if (liElement[0] != null)
                return liElement.children('ul:first').length > 0 && liElement.find('> div > div.e-minus').length > 0;
        },

        _showCheckBox: function () {
            var element = this.element, licoll, i, subItems;
            licoll = element.find('li');
            for (var i = 0; i < licoll.length; i++)
                this._checkboxOnTemplate(licoll[i].children[0]);
            element.find(".e-item > div > .nodecheckbox").ejCheckBox({ cssClass: this.model.cssClass, change: this._checkedChange });
            element.find(".e-item.e-node-disable > div > .e-chkbox-wrap > .nodecheckbox").ejCheckBox("disable");
        },
        _drag: function () {
            var proxy, pre = false, browserInfo = ej.browserInfo(), _clonedElement = null, _draggedElement = null, dragContainment = null, _isIE8;
            _isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            if (this.element.is("ul")) {
                this._treeView = this.element.parent();
                if (!this.model.allowDragAndDropAcrossControl)
                    dragContainment = this.element.parent();
            }
            else {
                this._treeView = this.element;
                if (!this.model.allowDragAndDropAcrossControl)
                    dragContainment = this.element;
            }
            $(this._treeView).find("ul li div a").not(".e-js").ejDraggable({
                autoScroll:true,
                dragArea: dragContainment,
                clone: true,
                dragStart: function (args) {
                    if (proxy && !ej.isNullOrUndefined(args.target) && !$(args.target).hasClass('e-node-disable') && proxy.element.find('.e-item > div > .e-text.e-editable').length == 0) {
                        args.element.attr('aria-grabbed', true);
                        proxy.element.closest('.e-treeview-wrap').addClass('e-dragging');
                        if ($(args.target).is('A') && !$(args.target).hasClass('e-draggable')) return false;
                        if (_isIE8) document.ondragstart = function () { return false; }
                        var data = { target: $(args.target).closest(".e-item"), targetElementData: proxy._getNodeDetails($(args.target).closest(".e-item")), dragTarget: args.target, parentElement: $(args.target).closest("ul").closest('.e-item'), parentElementData: proxy._getNodeDetails($(args.target).closest("ul").closest('.e-item')), event: args.event };
                        if (proxy._triggerEvent('nodeDragStart', data)) {
                            args.cancel = true;
                            _clonedElement && _clonedElement.remove();
                            return false;
                        }
                    } else return false;
                },
                drag: function (args) {
                    pre = false;
                    if ($(args.target).hasClass('e-sibling')) args.target = args.target.parentElement;
                    $('.e-sibling').remove();
                    var target = args.target, trgtEle = proxy._findTarget($(target)), data;
                    $(target).closest('.e-treeview-wrap').addClass('e-dragging');
                    var desProxy = $(target).closest('.e-treeview.e-js').data('ejTreeView');
                    desProxy = !desProxy ? proxy : desProxy;
                    $(_clonedElement).css({ "margin-top": args.event.clientY - 20 < 0 ? "0px" : "10px" });
                    
                    if($(target).closest('.e-treeview.e-js') != null) var templateInstance = $(target).closest('.e-treeview.e-js').data('ejTreeView');
					if(templateInstance) data = { draggedElement: $(args.element).closest(".e-item"), draggedElementData: proxy._getNodeDetails($(args.element).closest(".e-item")), dragTarget: target, target: trgtEle, targetElementData: templateInstance._getNodeDetails(trgtEle), event: args.event };
					else data = { draggedElement: $(args.element).closest(".e-item"), draggedElementData: proxy._getNodeDetails($(args.element).closest(".e-item")), dragTarget: target, target: trgtEle, targetElementData: proxy._getNodeDetails(trgtEle), event: args.event };
                    if (($(args.element).parent().parent().has($(target)).length == 0 || (proxy.model.allowMultiSelection && proxy.model.selectedNodes.length > 1)) && ($(target).hasClass('e-droppable') || $(target).parent().hasClass('e-droppable')) && $(target).hasClass('e-dropchild') && !$(target).hasClass('e-node-disable') &&
                       (proxy.model.allowDragAndDropAcrossControl || (!proxy.model.allowDragAndDropAcrossControl && $(target).parents('.e-treeview').is(proxy.element)))) {
                        document.body.style.cursor = '';
                        $(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-plus");
                        $(target).addClass("allowDrop");
                    } else if (desProxy.model.allowDropChild && desProxy.model.allowDropSibling && (($(target).hasClass('e-droppable') && !$(target).hasClass('e-item') && !$(target).hasClass('e-text')) || ($(target).is("UL") && $(target).hasClass('e-ul') && $(target).find('.e-item').length == 0 && $(target).parent('.e-treeview-wrap').length > 0))) {
                        document.body.style.cursor = '';
                        $(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-plus");
                    }
                    else if ((!$(target).hasClass('e-sibling') && !$(target).find('a').hasClass('e-text')) || (!$(target).hasClass('e-sibling') && !$(target).parent().parent().hasClass('e-item') && !$(target).parent().hasClass('e-item') && !$(target).hasClass('e-item') && !$(target).hasClass('e-text')) || ((target.nodeName.toUpperCase() == "LI" || target.parentElement !== null && target.parentElement.nodeName.toUpperCase() == "LI") && !desProxy.model.allowDropSibling) || (!proxy.model.allowDragAndDropAcrossControl && !$(target).parents('.e-treeview').is(proxy.element))) {
                        document.body.style.cursor = 'not-allowed';
                        $(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-minus");
                        $(target).removeClass('showline-hover');
                        $(target).removeClass('noline-hover');
                    }
                    if (target.nodeName != 'A' && ($(args.element).parent().parent().has($(target)).length == 0 || (proxy.model.allowMultiSelection && proxy.model.selectedNodes.length > 1)) && $(args.element).parent().parent()[0] != $(target)[0]) {
                        if (target.nodeName == 'UL' && $(target).children()[0] != null)
                        { target = $(target).children()[0]; pre = true; }
                        if (target.nodeName != 'LI')
                            target = $(target).closest('.e-droppable')[0] || $(target).parent();
                        if (target.nodeName == 'LI' && $(target).hasClass("e-droppable") && $(target).hasClass("e-dropsibling") && (proxy.model.allowDragAndDropAcrossControl || (!proxy.model.allowDragAndDropAcrossControl && $(target).parents('.e-treeview').is(proxy.element)))) {
                            var div = ej.buildTag('div.e-sibling'), targetY;
                            targetY = $(target).offset().top + $(target).find('a').height() || -1;
                            pre = (args.event.pageY > targetY) ? false : true;
                            pre ? div.insertBefore($(target).find('> div > a').parent()) : div.insertAfter($(target).find('> div > a').parent());
                            if ($(target).parents().hasClass("e-rtl")) {
                                document.body.style.cursor = '';
                                $(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-insertInbetween-rtl");
                            }
                            else {
                                document.body.style.cursor = '';
                                $(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-insertInbetween");
                            }
                        }
                        else if (target.nodeName == 'A' && $(target) && $(target).hasClass('e-droppable') && $(target).hasClass('e-dropchild')) {
                            document.body.style.cursor = '';
                            $(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-plus");
                            $(target).addClass("allowDrop");
                        } else if ($(target).hasClass('e-droppable') && !$(target).hasClass('e-item') && !$(target).hasClass('e-text')) {
                            document.body.style.cursor = '';
                            $(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-plus");
                        }
                    }
                    else {
                        if ($(args.element).parent().parent().has($(target)).length == 1 || $(args.element).parent().parent().is($(target))) {
                            if (!proxy.model.allowMultiSelection || (proxy.model.allowMultiSelection && proxy.model.selectedNodes.length <= 1)) {
                                document.body.style.cursor = 'not-allowed';
                                $(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-minus");
                            }
                        }
                        $('.e-sibling').remove();
                    }
                    if (proxy._triggerEvent('nodeDrag', data))
                        return false;
                },
                dragStop: function (args) {
                    if (_isIE8) document.ondragstart = function () { return true; }
                    if (!args.element.dropped) {
                        _clonedElement && _clonedElement.remove();
                        document.body.style.cursor = '';
                    }
                    var target = args.target, position, data, trgtEle, preventTargetExpand;
                    $(target).closest('.e-treeview-wrap').removeClass('e-dragging');
                    proxy.element.closest('.e-treeview-wrap').removeClass('e-dragging');
                    if (target.className == "e-sibling")
                        target = $(target).closest(".e-item")[0];
                    $('.e-sibling').remove();
                    if ($(target).hasClass('e-node-disable')) return false;
                    position = pre ? "Before" : "After", trgtEle = proxy._findTarget($(target));
                    position = target.nodeName == 'A' ? "Over" : position;
					if($(target).closest('.e-treeview.e-js') != null) var templateInstance = $(target).closest('.e-treeview.e-js').data('ejTreeView');
					if(templateInstance) data = { draggedElementData: proxy._getNodeDetails($(args.element).closest('.e-item')), draggedElement: $(args.element).closest('.e-item'), dropTarget: $(target), target: trgtEle, targetElementData: templateInstance._getNodeDetails(trgtEle), position: position, event: args.event, preventTargetExpand: false  };
					else data = { draggedElementData: proxy._getNodeDetails($(args.element).closest('.e-item')), draggedElement: $(args.element).closest('.e-item'), dropTarget: $(target), target: trgtEle, targetElementData: proxy._getNodeDetails(trgtEle), position: position, event: args.event, preventTargetExpand: false };
                    if (proxy._triggerEvent('nodeDragStop', data))
                        return false;
					var isNodeExpand = proxy._isParentExpand(target);
                    if (proxy.model.allowMultiSelection && $(args.element).hasClass("e-active")) {
                        var sleNodes = proxy.element.find('.e-item > div > .e-active');
                        for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
                            args.element = sleNodes[l];
                            position = proxy._dropNode(target, args, position, pre);
                            if (position == "After" && $(target).closest('.e-treeview.e-js').length)
                                target.nodeName.toUpperCase() == "LI" ? target = target.nextElementSibling : target = target.closest("li").nextElementSibling;
                        }
                    }
                    else
                        position = proxy._dropNode(target, args, position, pre);
					if (data.preventTargetExpand && !isNodeExpand){
						proxy._preventParentNode(target);
					}
                    $(".allowDrop").removeClass("allowDrop");
                    $(args.element).attr('aria-grabbed', false);
                    if (!$(target).hasClass('e-dropchild')) {
                        _clonedElement && _clonedElement.remove();
                    }
                    trgtEle = proxy._findTarget($(target)); 
					if(templateInstance) data = { droppedElementData: templateInstance._getNodeDetails($(args.element).closest('.e-item')), droppedElement: $(args.element).closest('.e-item'), dropTarget: $(target), target: trgtEle, targetElementData: templateInstance._getNodeDetails(trgtEle), position: position, event: args.event };
					else data = { droppedElementData: proxy._getNodeDetails($(args.element).closest('.e-item')), droppedElement: $(args.element).closest('.e-item'), dropTarget: $(target), target: trgtEle, targetElementData: proxy._getNodeDetails(trgtEle), position: position, event: args.event };
					if (proxy._triggerEvent('nodeDropped', data))
                        return false;
                    document.body.style.cursor = '';
                },
                helper: function (event, ui) {
                    if (!ej.isNullOrUndefined(event.element) && !$(event.element).hasClass('e-node-disable') && $(event.element).hasClass('e-draggable')) {
                        proxy = $(event.element).closest('.e-treeview.e-js').data('ejTreeView');
                        if (proxy) {
                            _clonedElement = ej.buildTag('div.e-dragedNode e-widget');
                            var maxZ = ej.util.getZindexPartial(proxy.element);
                            _clonedElement.css({ "z-index": maxZ });
                            _clonedElement.addClass(proxy.model.cssClass + (proxy.model.enableRTL ? ' e-rtl' : ''));
                            var sleNodes = proxy.element.find('.e-item > div > .e-active');
                            var sleNodesLen = sleNodes.length;
                            _draggedElement = $(event.element).clone().addClass("dragClone");
                            this.spanEle = ej.buildTag('span.e-icon e-plus e-dropedStatus');
                            _clonedElement.append(this.spanEle);
                            _clonedElement.append(_draggedElement);
                            var _spanEle = ej.buildTag('span.e-drop-count', sleNodesLen);
                            if (sleNodesLen > 1 && proxy.model.allowMultiSelection && $(event.element).hasClass("e-active"))
                                _clonedElement.append(_spanEle);
                            return _clonedElement.appendTo($("body"));
                        }
                    }
                }
            });
        },
         
		_isParentExpand: function (target){
			var parentExpandNode = $(target).closest('.e-item');
			var isNodeExpand = false;
			if(parentExpandNode.length > 0 && parentExpandNode[0].getAttribute("aria-expanded") == "true")
				isNodeExpand = true;
			return isNodeExpand;
		},
		
		_preventParentNode : function(target){
			var parentNode = $(target).closest('.e-item');
			var ulNode = $(parentNode[0]).find('.e-treeview-ul');
			$(ulNode).css("display","none");
			if(parentNode.length > 0){
				parentNode[0].setAttribute('aria-expanded', false);
				var imagTag = $(parentNode).find('.e-minus');
				$(imagTag).removeClass('e-minus').addClass('e-plus');
			}
		},
		
        _dropNode: function (target, args, position, pre) {
           var proxy = $(target).closest('.e-treeview.e-js').data('ejTreeView');
            if (target.nodeName == 'A' && $(target).hasClass('e-dropchild') && $(target).hasClass('e-droppable') || (target.nodeName == 'UL' && $(target).children().length == 0)) {
                position = "Over";
                if ($(target).is("UL") && $(target).hasClass('e-ul') && $(target).find('.e-item').length == 0 && $(target).parent('.e-treeview-wrap').length > 0 && proxy.model.allowDropChild)
                    this._dropAsChildNode($(target), $(args.element), args.event);
                else if (proxy.model.allowDropChild && ($(args.element).parent().parent().has($(target)).length == 0) && ($(target).parent().parent().has($(args.element)).length == 0 || this._isDescendant($(target).parents("li:last").find('>ul>li'), $(args.element).parents("li:first")[0])) && (this.model.allowDragAndDropAcrossControl || (!this.model.allowDragAndDropAcrossControl && $(target).parents('.e-treeview').is(this.element))))
                    this._dropAsChildNode($(target).closest('.e-item'), $(args.element), args.event);
            }
            else {
                if (target.nodeName == 'UL')
                    target = $(target).children()[0];
                if (target.nodeName != 'LI')
                    target = $(target).closest('.e-droppable')[0] || $(target).parent();
                if (target.nodeName == 'LI' && $(target).hasClass('e-dropsibling') && $(target).hasClass('e-droppable')) {
                    if (proxy.model.allowDropSibling && $(args.element).parent().parent().has($(target)).length < 1 && $(args.element).parent().parent()[0] != $(target)[0] && (this.model.allowDragAndDropAcrossControl || (!this.model.allowDragAndDropAcrossControl && $(target).parents('.e-treeview').is(this.element))))
                        this._dropAsSiblingNode($(target), $(args.element), pre, args.event);
                }
                else if (target.nodeName == 'A' && $(target).hasClass('e-dropchild') && $(target).hasClass('e-droppable')) {
                    position = "Over";
                    if (proxy.model.allowDropChild && ($(args.element).parent().parent().has($(target)).length == 0) && ($(target).parent().parent().has($(args.element)).length == 0 || this._isDescendant($(target).parents("li:last").find('>ul>li'), $(args.element).parents("li:first")[0])))
                        this._dropAsChildNode($(target).closest('.e-item'), $(args.element), args.event);
                }
            }
            return position;
        },

        _findTarget: function (trgt) {

            if (trgt.hasClass('e-text') || trgt.parents('a').hasClass('e-text')) return trgt.closest('.e-item')
               
            else if (trgt.closest("ul").closest('.e-item').length > 0) return trgt.closest("ul").closest('.e-item')

            else if (this.element.find(trgt).length > 0 && !this.model.template) return trgt.parents("ul").first()

            else if (this.element.find(trgt).length > 0 && this.model.template){ 

                return (trgt.closest('.e-text').length > 0) ? trgt.closest('.e-item') : trgt.parents("ul").first();
             
            }
            else return trgt;

        },

        _isDescendant: function (src, target) {
            var match = true;
            $(src).each(function (i, item) {
                if (item == target) {
                    match = false;
                    return false;
                }
                else
                    match = true;
            });
            return match;
        },

        _childDrop: function () {
            $(this._treeView).find("ul .e-item div .e-text").ejDroppable({
                accept: $(this._treeView).find("ul .e-item div .e-text").addClass('e-dropchild'),
                drop: function (event, ui) {
                    $(ui.helper).hide();
                }
            });
        },

        _siblingDrop: function () {
            $(this._treeView).find("ul .e-item").addClass('e-dropsibling').ejDroppable({
                drop: function (event, ui) {
                    $(ui.helper).hide();
                }
            });
        },

        _dropAsSiblingNode: function (target, element, pre, event) {
            var li = element.parent().parent(), li = $(li), parentNode;
            parentNode = $(element.parents('.e-item')[1]);
            if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null && !(this.dataSource() instanceof ej.DataManager))
                this._updateDataSource(element.parents('.e-item:first'), $(target), pre, this);
            pre ? li.insertBefore(target) : li.insertAfter(target);
            (!this.model.template) && this._autoGenerateNodes(element.parents('.e-item:first'));
            this._modifyCss(parentNode);
            this._isRender = false;
            this._updateCheckState(li);
            this._updateCheckState(parentNode);
            this._isRender = true;
            (li.find('> div > .e-minus').length > 0 && !this.model.enableMultipleExpand) && this._denyMultipleExpand(li);
            this._updateChanges($(target));
        },

        _dropAsChildNode: function (target, element, event) {
            var li = element.parent().parent(), li = $(li), parentNode;
            parentNode = this._parentLevelDropChecking = $(element.parents('.e-item')[1]);
            ($(target).is('UL')) ? $(target).append(li) : this._appendNode(target, li);
            if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null && !(this.dataSource() instanceof ej.DataManager))
                this._updateDataSource(element.parents('.e-item:first'), $(target).find("> div > .e-text").first(), "", this);
            (!this.model.template) && this._autoGenerateNodes(element.parents('.e-item:first'));
            this._modifyCss(parentNode);
            this._isRender = false;
            this._updateCheckState(li);
            this._updateCheckState(parentNode);
            this._isRender = true;
            if (target.find('> div > .e-icon.e-plus:first').length > 0) this._expandNode(target);
            this._updateChanges($(target));
        },

        _updateChanges: function (dropEle) {
            if ($(dropEle)[0] != null) {
                var desTree = this, tree = 0;
                do {
                    desTree._updateNodes();
                    if (tree == 1) desTree._updateTarget(this);
                    tree++;
                    desTree = dropEle.closest('.e-treeview.e-js').data('ejTreeView')
                } while (desTree && this._id != desTree._id && tree == 1);
            }
        },

        _updateTarget: function (obj) {
            if (this.model.allowDropChild != obj.model.allowDropChild)
                this.model.allowDropChild ? this._childDrop() : this._preventDropChild();
            if (this.model.allowDropSibling != obj.model.allowDropSibling)
                this.model.allowDropSibling ? this._siblingDrop() : this._preventDropSibling();
        },

        _updatePersistProb: function () {
            this._removeField(this._newDataSource, this.model.fields, "selected");
            this._removeField(this._newDataSource, this.model.fields, "expanded");
            this._removeField(this._newDataSource, this.model.fields, "isChecked");
            var sleNodes = this.getSelectedNodes();
            for (var l = 0, slelen = sleNodes.length; l < slelen; l++)
                this._updateField(this._newDataSource, $(sleNodes[l]).attr('id'), this.model.fields, "selected", true);
            var enodes = this.getExpandedNodes();
            for (var k = 0, nodelen = enodes.length; k < nodelen; k++)
                this._updateField(this._newDataSource, $(enodes[k]).attr('id'), this.model.fields, "expanded", true);
            if (this.model.showCheckbox) {
                var cnodes = this.getCheckedNodes();
                for (var m = 0, nodelen = cnodes.length; m < nodelen; m++)
                    this._updateField(this._newDataSource, $(cnodes[m]).attr('id'), this.model.fields, "isChecked", true);
            }
        },

        _orderDataSource: function () {
            this._beforeBaseClass();
            this._updatePersistProb();
            var orderedData = [], datasource = JSON.parse(JSON.stringify(this._newDataSource));
            if (this.dataSource() instanceof ej.DataManager && this._templateType == 2) {
                return this._newDataSource;
            }
            else {
                for (var i = 0, objlen = this._liList.length; i < objlen; i++) {
                    for (var j = 0, dlen = datasource.length; j < dlen; j++) {
                        if ($(document.getElementById(ej.getObject(this.model.fields.id, datasource[j]))).length > 0 && !ej.isNullOrUndefined(datasource[j]) && !ej.isNullOrUndefined(datasource[j][this.model.fields.id]) && datasource[j][this.model.fields.id].toString() == $(this._liList[i]).attr('id')) {
                            if ($(document.getElementById(ej.getObject(this.model.fields.id, datasource[j]))).find('> ul .e-item').length == 0) {
                                this._deepPropertyDelete(this.model.fields.hasChild, datasource[j]);
                                if (this._templateType == 2)
                                    delete datasource[j]["child"];
                            } else if (this._templateType == 1)
                                ej.createObject(this.model.fields.hasChild, true, datasource[j]);
                            else
                                this._updateChildData(datasource[j]["child"], this.model.fields);
                            orderedData.push(datasource[j]);
                        }
                    }
                }
            }
            return orderedData;
        },

        _updateDataSource: function (dragEle, dropEle, before ,obj) {
            if ($(dragEle)[0] != null && $(dropEle)[0] != null) {
                var sourceTree = obj, desTree, pid, indexPos;
                desTree = dropEle.closest('.e-treeview.e-js').data('ejTreeView');

                if (sourceTree && desTree && !ej.isNullOrUndefined(desTree.model.fields) && desTree.dataSource() != null && !(desTree.dataSource() instanceof ej.DataManager)) {
                    if (dropEle.is("A")) {
                        pid = dropEle.closest('.e-item').attr('id');
                        var child = dropEle.closest('.e-item').find('> ul > .e-item');
                        indexPos = (child.length > 0) ? child.length : dropEle.closest('.e-item').index();
                    }
                    else {
                        pid = dropEle.parents('.e-item:first').attr('id');
                        var nextLi = dropEle.next('.e-item'), prevLi = dropEle.prev('.e-item');
                        if (nextLi.length > 0)
                            indexPos = (prevLi.length > 0) ? indexPos = nextLi.index() - 1 : (before) ? indexPos = dropEle.index() : indexPos = nextLi.index();
                        else
                            indexPos = (before) ? dropEle.index() : dropEle.index() + 1;
                    }
                    (desTree) && sourceTree._findAndUpdate(dragEle.attr('id'), pid, sourceTree._newDataSource, indexPos, desTree, dropEle, before);
                }
            }
        },

        _removeObject: function (data, searchId, key) {
            for (var i = 0, len = data.length; i < len; i++) {
                if (!ej.isNullOrUndefined(data[i]) && !ej.isNullOrUndefined(data[i][key]) && data[i][key].toString() == searchId) {
                    data.splice(i, 1);
                    break;
                }
            }
        },

        _getObjectPosition: function (data, searchId, key) {
            for (var i = 0, len = data.length; i < len; i++) {
                if (!ej.isNullOrUndefined(data[i]) && !ej.isNullOrUndefined(data[i][key]) && data[i][key].toString() == searchId) {
                    return i;
                }
                if (data[i].hasOwnProperty('child')) {
                    var pos = this._getObjectPosition(data[i].child, searchId, key);
                    if (pos >= 0) return pos;
                }
            }
            return -1;
        },

        _convertDataSourceTypes: function (data, resultobj) {
            for (var j = 0; j < data.child.length; j++) {
                ej.createObject(this.model.fields.parentId, ej.getObject(this.model.fields.id, data), data.child[j]);
                resultobj.push(data.child[j]);
                if (data.child[j].hasOwnProperty('child') && data.child[j].child.length > 0) {
                    this._convertDataSourceTypes(data.child[j], resultobj);
                }
            }
            if (data['child']) {
                delete data['child'];
                ej.createObject(this.model.fields.hasChild, true, data);
            }
            return resultobj;
        },

        _childObjectCollection: function (childNodes, groupedObj, resultobj, tempType) {
            for (var j = 0, len = childNodes.length; j < len; j++) {
                var temp = this._getChildNodes(groupedObj, { id: ej.getObject(this.model.fields.id, childNodes[j]) });
                if (temp) {
                    if (tempType == 2) {
                        if (!resultobj[j].hasOwnProperty('child'))
                            resultobj[j].child = [];
                        resultobj[j].child = this._childObjectCollection(temp, groupedObj, temp, tempType);
                    }
                    else {
                        resultobj = resultobj.concat(temp);
                        resultobj = this._childObjectCollection(temp, groupedObj, resultobj, tempType);
                    }
                }
            }
            return resultobj;
        },

        _updateCopyData: function (i, obj , childNodes) {
            var newTree = obj.model.fields ,temp = childNodes, arr = JSON.parse(JSON.stringify(childNodes[i])), proxy = this;
            $.each(this.model.fields, function (key, value) {
                if (key !== "dataSource" || key !== "query")
                    if (temp[i][proxy.model.fields[key]] !== undefined) {
                        delete arr[proxy.model.fields[key]];
                        arr[newTree[key]] = temp[i][proxy.model.fields[key]];
                    }
            })
            var tempArr = $.extend(tempArr, arr, false);
            return tempArr;
        },

        _updateDataFields: function (obj, childNodes, searchId, tree2, templateType) {
            var childData = [];
            for (var j = 0, len = childNodes.length; j < len; j++) {
                if (templateType == 1) {
                    this._removeObject(obj, searchId, this.model.fields.parentId);
                    this._deepPropertyDelete(this.model.fields.parentId, childNodes[j]);
                    this._deepPropertyDelete(this.model.fields.hasChild, childNodes[j]);
                }
                if (childNodes[j].hasOwnProperty('child'))
                    childNodes[j].child = this._updateDataFields(obj, childNodes[j].child, ej.getObject(this.model.fields.id, childNodes[j]), tree2, templateType);
                childData.push(this._updateCopyData(j, tree2, childNodes));
            }
            return childData;
        },
        _deepPropertyDelete: function (nameSpace, from) {
            if (!from || ej.isNullOrUndefined(nameSpace)) return undefined;
            var splits = nameSpace.split('.');
            if (splits.length > 1)
                deepDelete(splits.slice(1).join('.'), from[splits[0]]);
            else
                delete from[nameSpace];
        },

        _findAndUpdate: function (searchId, parentId, obj, index, tree2, dropEle, before) {
            if (ej.isNullOrUndefined(obj)) return;
            if (this._templateType == 1) {
                for (var i = 0, objlen = obj.length; i < objlen; i++) {
                    var fieldId = ej.getObject(this.model.fields.id, obj[i]);
                    if (!ej.isNullOrUndefined(obj[i]) && !ej.isNullOrUndefined(fieldId) && fieldId.toString() == searchId) {
                        if (this._id == tree2._id) {
                            (!ej.isNullOrUndefined(parentId)) ? (ej.createObject(this.model.fields.parentId, parentId, obj[i])) : (this._deepPropertyDelete(this.model.fields.parentId, obj[i]));
                            var list = this.dataSource(), proxy = this;
                            if (this._deepWatch) {
                                var remvObj = obj.splice(i, 1);
                                var pos = this._getObjectPosition(list, dropEle.attr("id"), this.model.fields.id);
                                (pos >= 0 && !dropEle.is("A")) ? obj.splice(before ? pos : pos + 1, 0, remvObj[0]) : obj.push(remvObj[0]);
                                this._oldDataSource = JSON.parse(JSON.stringify(obj));
								this.dataSource(obj);
                            }
                            this._templateType = this._getTemplateType(list, this.model.fields);
                            this._dataSource = (this._templateType == 1) ? this._groupingObjects(list, function (list) { return [!ej.isNullOrUndefined(list) && [ej.getObject(proxy.model.fields.parentId, list)].toString()]; }) : list;
                        } else {
                            var remObj = [], childNodes, proxy = this, groupedObj, result = [], nodeArr = [];
                            groupedObj = this._groupingObjects(obj, function (obj) { return [!ej.isNullOrUndefined(obj) && [ej.getObject(proxy.model.fields.parentId, obj)].toString()]; });
                            nodeArr = obj.splice(i, 1);
                            remObj.push(this._updateCopyData(0, tree2, nodeArr));
                            childNodes = this._getChildNodes(groupedObj, { id: searchId });
                            if (childNodes && childNodes.length > 0)
                                childNodes = this._childObjectCollection(childNodes, groupedObj, childNodes, tree2._templateType);
                            if (tree2._templateType == 2) {
                                if (childNodes && childNodes.length > 0) {
                                    var childData = this._updateDataFields(obj, childNodes, searchId, tree2, this._templateType);
                                    if (!remObj[0].hasOwnProperty('child'))
                                        remObj[0].child = [];
                                    remObj[0].child = childData;
                                }
                                this._deepPropertyDelete(tree2.model.fields.parentId, remObj[0]);
                                this._deepPropertyDelete(tree2.model.fields.hasChild, remObj[0]);
                                if (tree2._deepWatch) {
                                    var pos = this._getObjectPosition(tree2._newDataSource, dropEle.attr("id"), tree2.model.fields.id);
                                    pos = (pos >= 0 && !dropEle.is("A")) ? (before ? pos : pos + 1) : index;
                                    (parentId) ? tree2._changeObjectPos(parentId, remObj, tree2._newDataSource, pos) : tree2._newDataSource.splice(pos, 0, remObj[0]);
                                }
                                else {
                                    (parentId) ? tree2._changeObjectPos(parentId, remObj, tree2._newDataSource, index) : tree2._newDataSource.splice(index, 0, remObj[0]);
                                }
                            } else {
                                if (childNodes && childNodes.length > 0) {
                                    for (var j = 0, len = childNodes.length; j < len; j++) {
                                        this._removeObject(obj, ej.getObject(this.model.fields.id, childNodes[j]), this.model.fields.id);
                                    }
                                    this._dataSource = (this._templateType == 1) ? this._groupingObjects(obj, function (obj) { return [!ej.isNullOrUndefined(obj) && [ej.getObject(proxy.model.fields.parentId, obj)].toString()]; }) : obj;
                                }
                                (parentId) ? (ej.createObject(tree2.model.fields.parentId, parentId, remObj[0])) : this._deepPropertyDelete(tree2.model.fields.parentId, remObj[0]);
                                if (tree2._deepWatch) {
                                    var pos = this._getObjectPosition(tree2._newDataSource, dropEle.attr("id"), tree2.model.fields.id);
                                    (pos >= 0 && !dropEle.is("A")) ? tree2._newDataSource.splice(before ? pos : pos + 1, 0, remObj[0]) : tree2._newDataSource.push(remObj[0]);
                                }
                                else
                                    tree2._newDataSource.push(remObj[0]);
                                var childData = [];
                                if (childNodes && childNodes.length > 0) {
                                    if (!(this.dataSource() instanceof ej.DataManager)) {
                                        for (var i = 0; i < childNodes.length; i++) {
                                            childData.push(this._updateCopyData(i, tree2, childNodes));
                                        }
                                        childNodes = childData;
                                    }
                                    var collection = tree2._newDataSource = tree2._newDataSource.concat(childNodes);
                                    tree2._dataSource = (tree2._templateType == 1) ? tree2._groupingObjects(collection, function (collection) { return [!ej.isNullOrUndefined(collection) && [ej.getObject(tree2.model.fields.parentId, collection)].toString()]; }) : collection;
                                }
                            }
                            if (tree2._deepWatch) {
                                tree2.dataSource(tree2._newDataSource);
                                tree2._oldDataSource = JSON.parse(JSON.stringify(tree2._newDataSource));
                            }
                            if (this._deepWatch) {
                                this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
								this.dataSource(this._newDataSource);
                            }
                        }
                        break;
                    }
                }
            }
            else {
                for (var i = 0, objlen = obj.length; i < objlen; i++) {
                    if (ej.getObject(this.model.fields.id, obj[i]).toString() == searchId) {
                        var remObj = obj.splice(i, 1);
                        if (this._id == tree2._id) {
                            if (this._deepWatch) {
                                var pos = this._getObjectPosition(this._newDataSource, dropEle.attr("id"), this.model.fields.id);
                                pos = (pos >= 0 && !dropEle.is("A")) ? (before ? pos : pos + 1) : index;
                                (parentId) ? this._changeObjectPos(parentId, remObj, this._newDataSource, pos) : this._newDataSource.splice(pos, 0, remObj[0]);
                                this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
								this.dataSource(this._newDataSource);
                            }
                            else
                                (parentId) ? this._changeObjectPos(parentId, remObj, this._newDataSource, index) : this._newDataSource.splice(index, 0, remObj[0]);
                        } else {
                            remObj = this._updateDataFields(obj, remObj, searchId, tree2, this._templateType);
                            if (tree2._templateType == 1) {
                                // convert nested child datasource into id & parentId case datasource
                                var result = [];
                                if (remObj[0].hasOwnProperty('child')) {
                                    result = tree2._convertDataSourceTypes(remObj[0], result);
                                    remObj[0] = remObj.concat(result);
                                } else
                                    remObj[0] = remObj.concat();
                                (parentId) ? ej.createObject(tree2.model.fields.parentId, parentId, remObj[0][0]) : this._deepPropertyDelete(tree2.model.fields.parentId, remObj[0][0]);
                                if (tree2._deepWatch) {
                                    var pos = this._getObjectPosition(tree2._newDataSource, dropEle.attr("id"), tree2.model.fields.id);
                                    (pos >= 0 && !dropEle.is("A")) ? tree2._newDataSource.splice(before ? pos : pos + 1, 0, remObj[0][0]) : tree2._newDataSource.push(remObj[0][0]);
                                    tree2._newDataSource = tree2._newDataSource.concat(result);
                                }
                                else
                                    tree2._newDataSource = tree2._newDataSource.concat(remObj[0]);
                            } else {
                                if (tree2._deepWatch) {
                                    var pos = this._getObjectPosition(tree2._newDataSource, dropEle.attr("id"), tree2.model.fields.id);
                                    pos = (pos >= 0 && !dropEle.is("A")) ? (before ? pos : pos + 1) : index;
                                    (parentId) ? tree2._changeObjectPos(parentId, remObj, tree2._newDataSource, pos) : tree2._newDataSource.splice(pos, 0, remObj[0]);
                                }
                                else
                                    (parentId) ? tree2._changeObjectPos(parentId, remObj, tree2._newDataSource, index) : tree2._newDataSource.splice(index, 0, remObj[0]);
                            }
                            if (tree2._deepWatch) {
                                tree2.dataSource(tree2._newDataSource);
                                tree2._oldDataSource = JSON.parse(JSON.stringify(tree2._newDataSource));
                            }
                            if (this._deepWatch) {
                                this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
								this.dataSource(this._newDataSource);
                            }
                        }
                        return true;
                    }
                    else if (obj[i].hasOwnProperty('child')) {
                        if (this._findAndUpdate(searchId, parentId, obj[i].child, index, tree2, dropEle, before))
                            break;
                    }
                }
            }
        },

        _changeObjectPos: function (searchId, remObj, data, index) {
            for (var i = 0, objlen = data.length; i < objlen; i++) {
                if (ej.getObject(this.model.fields.id, data[i]).toString() == searchId) {
                    if (data[i].hasOwnProperty('child')) {
                        data[i].child.splice(index, 0, remObj[0]);
                    } else {
                        data[i].child = [];
                        data[i].child.push(remObj[0]);
                    }
                    return true;
                }
                else if (data[i].hasOwnProperty('child')) {
                    if (this._changeObjectPos(searchId, remObj, data[i].child, index))
                        break;
                }
            }
        },

        _finalizeEditing: function (element) {
            if ($(element)[0] != null) {
                var thisObj = element.closest('.e-treeview.e-js').data('ejTreeView');
                if (thisObj) {
                    thisObj._preventEditable();
                    thisObj.model.allowEditing && thisObj._allowEditable();
                }
            }
        },

        _updateCheckState: function (element) {
            if (this._isTreeElement(element)) {
                var thisObj = element.closest('.e-treeview.e-js').data('ejTreeView'), chdNodes;
                if (thisObj && thisObj.model.showCheckbox) {
                    chdNodes = element.children('ul').find('.e-item > div > .e-chkbox-wrap > .checked').closest('.e-item').addClass('checked');
                    if (chdNodes.length > 0)
                        thisObj._isCheckedAction();
                    else {
                        var action = (thisObj.isNodeChecked(element)) ? "_nodeCheck" : "_nodeUncheck";
                        thisObj[action](element.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
                    }
                }
            }
        },

        _autoGenerateNodes: function (element) {
            if ($(element)[0] != null) {
                var thisObj = element.closest('.e-treeview.e-js').data('ejTreeView');
                if (thisObj && thisObj.model.showCheckbox) {
                    if (element.find(".e-chkbox-wrap").length == 0) {
                        this._checkboxOnTemplate(element[0].children[0]);
                        var subItems = element.find('.e-item');
                        for (var i = 0, len = subItems.length; i < len ; i++)
                            this._checkboxOnTemplate(subItems[i].children[0]);
                        element.find(".nodecheckbox").ejCheckBox({ cssClass: thisObj.model.cssClass, change: thisObj._checkedChange });
                    }
                } else
                    element.find('.e-chkbox-wrap').remove();
            }
        },

        _appendNode: function (element, outerLi) {
            if (this._isTreeElement(element)) {
                var thisObj, outerUl, divTag, nodeid, nodeText, data, parentId, expandList, isExpanded;
                if (element.find('ul.e-treeview-ul')[0] == null) {
                    thisObj = element.closest('.e-treeview.e-js').data('ejTreeView');
                    if (thisObj) {
                        isExpanded = this._isNodeExpanded(element);
                        if (!isExpanded && thisObj.model.loadOnDemand && element.find('> div > div').first().hasClass('e-plus'))
                            thisObj._createChildNodesWhenExpand(element, null, null, null, outerLi, thisObj);
                    }
                    if (!(this.dataSource() instanceof ej.DataManager && thisObj.model.loadOnDemand && element.find('> div > div').first().hasClass('e-plus')))
                        this._doAfterExpand(element, outerLi, thisObj);
                    if (this._deepWatch && (this._templateType == 1)) {
                        this._updateField(this._newDataSource, element.attr("id"), this.model.fields, "hasChild", true);
                        this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
						this.dataSource(this._newDataSource);
                    }
                }
                else
				$(element.find('ul.e-treeview-ul')[0]).append(outerLi);
                (!this.isDisabled(element)) && this._expandNode(element);
            }
            else {
                if (this.element.is('UL')) {
                    this.element.append(outerLi);
                } else if (this.element.children('ul:first').length > 0) {
                    this.element.children('ul:first').append(outerLi);
                } else {
                    outerUl = ej.buildTag("ul.e-treeview-ul", "", {}, { role: "group" });
                    outerUl.append(outerLi);
                    this.element.append(outerUl);
                }
            }
            expandList = this.element.find(".e-item.expanded");
            for (var i = 0; i < expandList.length; i++) {
                (this.model.loadOnDemand && !(this.dataSource() instanceof ej.DataManager)) ? this._createChildNodesWhenExpand($(expandList[i])) : this._expandNode($(expandList[i]));
            }
            expandList.removeClass("expanded");
            this.model.showCheckbox && this._isCheckedAction();
        },

        _doAfterExpand: function (element, outerLi, thisObj) {
            var outerUl = ej.buildTag("ul.e-treeview-ul", "", {}, { role: "group", style: "display:none" });
            $(outerUl).append($(outerLi));
            if ($(element.find('div')[1]).length == 0) {
                var divTag = document.createElement('div');
                divTag.setAttribute('role', 'presentation');
                divTag.className = 'e-icon e-minus';
                $(element.find('div')).append($(divTag));
            } else if (!$(element.find('div')[1]).hasClass('e-minus'))
                $(element.find('div')[1]).addClass('e-icon e-plus');
            if (thisObj && thisObj.model.loadOnDemand && element.find('ul.e-treeview-ul').length > 0)
                element.children('ul.e-treeview-ul').append($(outerLi));
            else
                element.append($(outerUl));
        },

        _modifyCss: function (liElement) {
            liElement = $(liElement);
            if (liElement[0] != null && liElement.find('.e-item').length == 0) {
                liElement.removeClass('e-collapse').attr("aria-expanded", false).find('> div > .e-icon').removeClass('e-icon e-minus').closest('.e-item').find('ul').remove();
                if (this._deepWatch) {
                    this._updateField(this._newDataSource, liElement.attr("id"), this.model.fields, "expanded", false);
                    (this._templateType == 1) && this._updateField(this._newDataSource, liElement.attr("id"), this.model.fields, "hasChild", false);
                    this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
					this.dataSource(this._newDataSource);
                }
            }
        },

        _applyFirstLastChildClass: function () {
            $(this._liList).removeClass('first last').filter(':first-child:not(:last-child)').addClass('first');
            $(this._liList).filter(':last-child').addClass('last');
        },

        _expandEventHandler: function (event) {
            var target = $(event.target), selectedNode, liElement;
            if (target.hasClass("e-icon") || target.closest('.e-item').hasClass("e-node-disable")) return;
            if (!(event.type === "dblclick" && this.model.allowEditing)) {
                event.preventDefault();
                selectedNode = (target.is('A')) ? $(target.siblings('div')) : $(target.parents(".e-text-wrap").find('div'));
                if (this.model.fullRowSelect && (target.is('div.e-text-wrap') || target.is('div.e-fullrow')))
                    selectedNode = target.closest('.e-item').find("> .e-text-wrap > div");
                liElement = target.closest('.e-item');
                if (selectedNode.hasClass('e-minus'))
                    this._collapseNode(liElement);
                else {
                    if (this.model.loadOnDemand && selectedNode.find(".e-item").length == 0) {
                        this._ClickEventHandler({ target: selectedNode[0] });
                    }
                    else this._expandNode(liElement);
                }
            }
        },

        _inlineEdit: function (event) {
            event.preventDefault();
            var target = $(event.target);
            if (!target.hasClass('input-text') && !target.hasClass("e-node-disable") ) {
                if (!target.is('A'))
                    target = target.closest('.e-text');
                if (target.is('A') && !target.hasClass("e-node-disable")) {
                    this._inlineEditAction(target);
                }
            }
            return false;
        },

        _inlineEditAction: function (element) {
            var editTextBox = this.element.find('.e-item > div > .e-text > #Edit_Input');
            (editTextBox[0] == null) && this._createEditTextBox(element);
        },

        _createEditTextBox: function (values) {
            var argsData = { currentElement: values };
            if (this._triggerEvent('beforeEdit', argsData))
                return false;
            var editTextBox = this.element.find('.e-item > div > .e-text > #Edit_Input');
            if (editTextBox[0] == null) {
                var size, textBox = ej.buildTag('Input.input-text#Edit_Input', "", "", { type: 'text', value: $.trim(values.text()).replace(/\n\s+/g, " "), name: 'inplace_value' });
                $(textBox).css("width", (values.outerWidth() + 5) + "px");
                $(textBox).css("height", values.outerHeight() + "px");
                textBox.addClass("e-tree-input e-textbox");
                this._beforeEditText = values.text();
                values[0].lastChild.nodeValue = "";
                if(this.model.template) {
                   var template_id = values.closest("li")["0"].id;
                   var nodeText = this._getNodeObject(template_id, true);
				   values["0"].innerHTML = " ";
                   if (nodeText && nodeText.length != 0) {
                       if (nodeText["0"] != undefined) textBox["0"].value = nodeText["0"]; else textBox["0"].value = "";
                   $(textBox).css("width", (values.outerWidth() +80) + "px");
                   $(textBox).css("height", (values.outerHeight() +10)+ "px");
				   }
                }
                values.addClass('e-editable').append(textBox);
                editTextBox = textBox;
                size = (editTextBox.val().length == '') ? 3 : values.outerWidth() + 20;
                this._mousePositionAtEnd(editTextBox);
                this._currentEditableNode = values;
                this._on(editTextBox, 'keypress', this._editTextBoxKeyPress)
                    ._on(editTextBox, 'keydown', this, this._pressEscKey)
                    ._on(editTextBox, 'mousedown pointerdown MSPointerDown', this, this._preventPropagation)
                    ._on(editTextBox, this.model.expandOn, this, this._preventPropagation)
                    ._on(editTextBox, 'blur', this._focusout);
            }
            return editTextBox;
        },

        _preventPropagation: function (e) {
            e.stopImmediatePropagation();
            this._isTextbox = true;
        },

        _editTextBoxKeyPress: function (event) {
            event.target.size = event.target.value.length + 1;
        },

        _mousePositionAtEnd: function (ctl) {
            (ctl.focus) && ctl.focus();
            (ctl.select) && ctl.select();
            return true;
        },

        _focusElement: function (e) {
            if (this._isTextbox) return;
            if(e && (e.type == "touchstart" || e.type == "pointerdown" || e.type == "MSPointerDown")) {
                var ele = $(e.currentTarget);
                (ele.hasClass("e-text")) && this.selectNode(ele.closest('.e-item'));
            }
            if (this.model.template) {
                var aTag = $(e.target).closest('.e-text')[0];
                aTag = aTag ? aTag : e.target;
                this._focusNode(aTag);
            } else {
                this._focusNode(e.target);
            }
        },

        _blurElement: function (e) {
            ($(e.target).hasClass("e-text")) && e.target.removeAttribute("tabindex");
        },

        _focusout: function (e) {
            var editTextBox = $(e.currentTarget), data, element;
            this._isTextbox = false;
            data = { id: editTextBox.closest('.e-item').attr('id'), oldText: this._beforeEditText, newText: editTextBox.val() };
            (this._triggerEvent('inlineEditValidation', data)) ? this._cancelAction(editTextBox) : this._saveAction(editTextBox, e);
        },

        _pressEscKey: function (event) {
            event.cancelBubble = true;
            event.returnValue = false;
            var editTextBox = $(event.currentTarget);
            if (editTextBox[0] != null) {
                var aTag = editTextBox.closest('.e-text')[0];
                if (event.keyCode == 13) {
                    event.stopPropagation();
                    this._focusout(event);
                }
                if (event.keyCode == 27)
                    this._cancelAction(editTextBox);
                if (event.keyCode == 13 || event.keyCode == 27) {
                    var browserInfo = ej.browserInfo(), _isIE8;
                    _isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
                    (_isIE8) && this._focusNode(aTag);
                }
            }
        },

        _onFocusHandler: function (event) {
            event.preventDefault();
        },

        _onKeyDown: function (currentEle, focusEle) {
            var currentSelectedElement = this.element.find("#" + this._id + "_active");
            currentSelectedElement.removeAttr("id");
            var currentNode = currentEle.find('> div > .e-text:first');
            var focusNode = focusEle.find('> div > .e-text:first');
            currentNode.removeClass('e-node-focus');
            focusNode.addClass('e-node-focus');
            this.element.removeAttr("aria-activedescendant");
            if (focusNode.closest(".e-item")[0].id != null && focusNode.closest(".e-item")[0].id != "") {
                this.element.attr("aria-activedescendant", focusNode.closest(".e-item")[0].id);
            } else {
                focusNode.closest(".e-item").attr("id", this._id + "_active");
                this.element.attr("aria-activedescendant", this._id + "_active");
            }
            if (this.model.fullRowSelect) {
                currentEle.removeClass("e-li-focus");
                focusEle.addClass("e-li-focus");
            }
        },

        _KeyPress: function (e) {
            var code, node, element;
            var proxy = this;
            element = (this.element.is("ul")) ? this.element : this.element.find("> ul");
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            if (proxy.model.allowKeyboardNavigation && (proxy.element.find('#Edit_Input').length < 1) && proxy.element.find(".e-chkbox-wrap.e-focus").length < 1) {
                this.element.find(".e-animate").removeClass("e-animate");
                var nextElement, selectedItem, liVisible, activeNode;
                selectedItem = $(element.find(".e-item > div > .e-text.e-active").closest('.e-item')[0]);
                liVisible = element.find('.e-item:visible');
                if (proxy._focusedNode) {
                    activeNode = proxy._focusedNode;
                    proxy._focusedNode = null;
                } else
                    activeNode = element.find('.e-text.e-node-focus').closest('.e-item');
                if (code == 113) {
                    e.preventDefault();
                    var element = (activeNode.length > 0) ? activeNode : selectedItem;
                    if (element.length > 0 && proxy.model.allowEditing && !this.model.template) {
                        e.target = element.find('> div > .e-text:first');
                        proxy._inlineEdit(e);
                    }
                }
                if (code == 40 && !e.altKey) {
                    e.preventDefault();
                    var ele = (activeNode.length > 0) ? activeNode : selectedItem;
                    var nextEle = this._getNextEle(liVisible, ele);
                    if (proxy._KeyPressEventHandler((nextEle.length > 0) ? nextEle : null, proxy, code, e)) return;
                    if (nextEle.length > 0)
                        proxy._onKeyDown(activeNode, nextEle);
                }
                else if (code == 38 && !e.altKey) {
                    e.preventDefault();
                    var ele = (activeNode.length > 0) ? activeNode : selectedItem;
                    var prevEle = this._getPrevEle(liVisible, ele);
                    if (proxy._KeyPressEventHandler((prevEle.length > 0) ? prevEle : null, proxy, code, e)) return;
                    if (prevEle.length > 0)
                        proxy._onKeyDown(activeNode, prevEle);
                }
                else if ((code == 39 && !this.model.enableRTL && !e.altKey) || (code == 37 && this.model.enableRTL)) {
                    e.preventDefault();
                    var nextEle, expandIcon;
                    expandIcon = (activeNode.length > 0) ? activeNode.find('> div > div').first() : selectedItem.find('> div > div').first();
                    nextEle = expandIcon.closest('.e-item');
                    if (expandIcon.hasClass('e-plus')) {
                        if (this.model.loadOnDemand && nextEle.find("> ul .e-item").length == 0) {
                            this._ClickEventHandler({ target: expandIcon[0] });
                        }
                        else this._expandNode($(liVisible[liVisible.index(nextEle)]));
                    } else {
                        var nextEle = this._getNextEle(liVisible, nextEle);
                        if (proxy._KeyPressEventHandler((nextEle.length > 0) ? nextEle : "", proxy, code, e)) return;
                        if (nextEle.length > 0 && nextEle[0] == expandIcon.closest('.e-item').find('ul > .e-item:first')[0] || nextEle.find('ul > .e-item').first().hasClass('e-node-disable'))
                            proxy._onKeyDown(activeNode, nextEle);
                    }
                }
                else if ((code == 37 && !this.model.enableRTL && !e.altKey) || (code == 39 && this.model.enableRTL)) {
                    e.preventDefault();
                    var prevEle, collapseIcon;
                    collapseIcon = (activeNode.length > 0) ? activeNode.find('> div > div').first() : selectedItem.find('> div > div').first();
                    prevEle = collapseIcon.closest('.e-item');
                    if (collapseIcon.hasClass('e-minus')) {
                        this._collapseNode($(liVisible[liVisible.index(collapseIcon.closest('.e-item'))]));
                    } else {
                        prevEle = $(liVisible[liVisible.index(prevEle)]).closest('ul').closest('.e-item');
                        if (proxy._KeyPressEventHandler((prevEle.length > 0) ? prevEle : "", proxy, code, e)) return;
                        if (prevEle.length > 0) {
                            proxy._onKeyDown(activeNode, prevEle);
                        }
                    }
                }
                else if (code == 36 && !e.altKey) {
                    e.preventDefault();
                    var firstEle, ele = (activeNode.length > 0) ? activeNode : selectedItem;
                    firstEle = $(liVisible).first();
                    if (firstEle.hasClass('e-node-disable') || firstEle.hasClass('hidden'))
                        firstEle = this._getNextEle(liVisible, firstEle);
                    if ((selectedItem.length > 0 && activeNode.length == 0 && selectedItem[0] != firstEle[0]) || (activeNode.length > 0 && activeNode[0] != firstEle[0])) {
                        if (proxy._KeyPressEventHandler(firstEle, proxy, code, e)) return;
                        proxy._onKeyDown(ele, firstEle);
                    }
                }
                else if (code == 35 && !e.altKey) {
                    e.preventDefault();
                    var lastEle, ele = (activeNode.length > 0) ? activeNode : selectedItem;
                    lastEle = $(liVisible).last();
                    if (lastEle.hasClass('e-node-disable') || lastEle.hasClass('hidden'))
                        lastEle = this._getPrevEle(liVisible, lastEle);
                    if ((selectedItem.length > 0 && activeNode.length == 0 && selectedItem[0] != lastEle[0]) || (activeNode.length > 0 && activeNode[0] != lastEle[0])) {
                        if (proxy._KeyPressEventHandler(lastEle, proxy, code, e)) return;
                        proxy._onKeyDown(ele, lastEle);
                    }
                }
                else if (code == 13) {
                    e.preventDefault();
                    var currentEle = (activeNode.length > 0) ? activeNode : selectedItem;
                    var angEle = currentEle.find('> div > .e-text');
                    angEle.removeClass('e-node-focus');
                    this.model.fullRowSelect && currentEle.removeClass("e-li-focus");
                    angEle.hasClass('e-active') ? (proxy.model.allowMultiSelection && proxy._nodeUnSelectionAction(currentEle, event)) : proxy._nodeSelectionAction(currentEle, e);
                    proxy._focusedNode = currentEle;
                }
                else if (code == 32) {
                    e.preventDefault();
                    var currentEle = (activeNode.length > 0) ? activeNode : selectedItem;
                    if (currentEle.length > 0 && this.model.showCheckbox) {
                        var chkBoxEle = currentEle.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0];
                        if (chkBoxEle.checked)
                            this._nodeUncheck(chkBoxEle);
                        else
                            this._nodeCheck(chkBoxEle);
                        proxy._focusedNode = currentEle;
                    }
                }
                else if (code == 46) {
                    e.preventDefault();
                    var currentEle = (activeNode.length > 0) ? activeNode : (this.model.allowMultiSelection ? element.find(".e-item > div > .e-text.e-active").closest('.e-item') : selectedItem);
                    if (currentEle.length > 0) {
                        this._removeNode(currentEle, e);
                        var nextEle = $(liVisible[0]).find('> div > .e-text:first');
                        this._focusNode(nextEle[0]);
                    }
                }
                else if (e && e.ctrlKey == true) {
                    if (code == 88 && this.model.allowDragAndDrop && this.model.allowDropChild) {
                        e.preventDefault();
                        var currentEle = (activeNode.length > 0) ? activeNode : selectedItem;
                        if (currentEle.length > 0) {
                            var parent = currentEle.parents('.e-item:first');
							if (this._triggerEvent('beforeCut', { target: currentEle, nodeDetails: this._getNodeDetails(currentEle), keyCode: code, event: e })) return;
                            this._cutNode = $(liVisible[liVisible.index(currentEle)]).detach();
                            if ($(this._cutNode)[0] != null) {                                
                                this._isRender = false;
                                this.unselectNode(currentEle);
                                if (parent.find('> ul > .e-item').length == 0) {
                                    this.collapseNode(parent);
                                    this._modifyCss(parent);
                                }
                                this._isRender = true;
                                this._triggerEvent('nodeCut', { parentElement: parent, parentDetails: this._getNodeDetails(parent), keyCode: code, event: e });
                            }
                        }
                    }
                    else if (code == 86 && this._cutNode != null && this.model.allowDragAndDrop && this.model.allowDropChild) {
                        e.preventDefault();
                        var currentEle = (activeNode.length > 0) ? activeNode : selectedItem;
                        currentEle = $(liVisible[liVisible.index(currentEle)]);
                        currentEle.length === 0 && (currentEle = this.element);
                        var element = this._cutNode.find(" > div > .e-text").first();
                        if ($(liVisible).length > 0) {
                            if (this._triggerEvent('beforePaste', { target: currentEle, nodeDetails: this._getNodeDetails(currentEle), keyCode: code, event: e })) return;
                            this._isRender = false;
                            this._dropAsChildNode(currentEle, element, e);
                            this._isRender = true;
                            this._cutNode = null;
                            var currentNode = element.closest('.e-item');
                            this._triggerEvent('nodePaste', { target: currentNode, nodeDetails: this._getNodeDetails(currentNode), keyCode: code, event: e });
                        }
                    }
                    else if (proxy.model.allowMultiSelection)
                        proxy._focusedNode = activeNode;
                }
            }
        },

        _getNextEle: function (liVisible, ele) {
            var index = liVisible.index(ele), nextEle;
            do {
                index++;
                nextEle = $(liVisible[index]);
            }
            while (nextEle.hasClass('e-node-disable') || nextEle.hasClass('hidden'))
            return nextEle;
        },

        _getPrevEle: function (liVisible, ele) {
            var index = liVisible.index(ele), prevEle;
            do {
                index--;
                prevEle = $(liVisible[index]);
            }
            while (prevEle.hasClass('e-node-disable') || prevEle.hasClass('hidden'))
            return prevEle;
        },

        _removeChildNodes: function (obj, groupedObj, id) {
            var len = 0, currentid;
            for (var i = 0; i < groupedObj.length; i++) {
                var parentId = ej.getObject(this.model.fields.parentId, groupedObj[i][0]);
                if (!ej.isNullOrUndefined(parentId) && (parentId).toString() == id) {
                    len = groupedObj[i].length; break;
                }
            }
            for (var i = 0; i < len; i++) {
                for (var j = 0; j < obj.length; j++) {
                    var parentID = ej.getObject(this.model.fields.parentId, obj[j]);
                    if (!ej.isNullOrUndefined(parentID) && (parentID).toString() == id) {
                        if (!ej.isNullOrUndefined(obj[j])) currentid = ej.getObject(this.model.fields.id, obj[j]).toString();
                        obj.splice(j, 1);
                        this._removeChildNodes(obj, groupedObj, currentid);
                        break;
                    }
                }
            }
        },

        _removeNode: function (node, event) {
            if (node[0] == null) return;
            if (node[0] != null && node.length > 0) {
                var parentNode, currentNode, _dataObj, liVisible, childNodes, proxy = this;
                parentNode = $(node[0]).closest('ul').closest('.e-item');
                currentNode = $(node[0]);
				var tempInstance = $(node).closest('.e-treeview.e-js').data('ejTreeView');
				if (tempInstance._triggerEvent('beforeDelete', { target: currentNode, nodeDetails: tempInstance._getNodeDetails(currentNode), parentElement: (parentNode[0] != null) ? parentNode : null, parentDetails: tempInstance._getNodeDetails(parentNode), event: event, removedNodes: node })) return;
                this._isRender = false;
                if (this.dataSource() instanceof ej.DataManager) {
                    _dataObj = this._newDataSource;
                    this._removeData(node, _dataObj);
                }
                else if (!ej.isNullOrUndefined(this.dataSource()) && this.dataSource().length > 0) {
                    _dataObj = this.dataSource();
                    this._removeData(node, _dataObj);
                    if (this._deepWatch) {
                        this._oldDataSource = JSON.parse(JSON.stringify(_dataObj));
						this.dataSource(_dataObj);
                    }
                }
                node.remove();
                this._modifyCss(parentNode);
                this._updateNodes();
                this._updateCheckState(parentNode);
                this._isRender = true;
				if (tempInstance._triggerEvent('nodeDelete', { parentElement: (parentNode[0] != null) ? parentNode : null, parentDetails: tempInstance._getNodeDetails(parentNode), event: event, removedNodes: node })) return;
                var proxy = this, _dataObj = this.dataSource();
                setTimeout(function () {
                    if (proxy.dataSource() != null && !(proxy.dataSource() instanceof ej.DataManager))
                        proxy._dataSource = proxy._groupingObjects(_dataObj, function (_dataObj) { return [!ej.isNullOrUndefined(_dataObj) && [ej.getObject(proxy.model.fields.parentId, _dataObj)].toString()]; });
                }, 300);
            }
        },

        _removeData: function (node, _dataObj) {
            for (var j = 0, len = node.length; j < len; j++) {
                (this._templateType == 2) ? this._removeRemoteData(_dataObj, $(node[j]), this.model.fields) : this._removeLocalData(_dataObj, $(node[j]));;
            }
        },

        _removeLocalData: function (_dataObj, currentNode) {
            var proxy = this;
            for (var i = 0; i < _dataObj.length; i++) {
                var id = currentNode.attr("id");
                var fieldId = ej.getObject(this.model.fields.id, _dataObj[i]);
                if (fieldId && (fieldId).toString() == id) {
                    var groupedObj = this._groupingObjects(_dataObj, function (_dataObj) { return [!ej.isNullOrUndefined(_dataObj) && [ej.getObject(proxy.model.fields.parentId, _dataObj)].toString()]; });
                    _dataObj.splice(i, 1);
                    this._removeChildNodes(_dataObj, groupedObj, id);
                    break;
                }
            }
        },

        _removeRemoteData: function (obj, currentNode, mapper) {
            for (var i = 0; i < obj.length; i++) {
                var id = currentNode.attr("id");
                var fieldId = ej.getObject(mapper.id, obj[i]);
                if (fieldId && (fieldId).toString() == id) {
                    obj.splice(i, 1);
                    break;
                }
                if (obj[i].hasOwnProperty('child'))
                    this._removeRemoteData(obj[i].child, currentNode, mapper.child ? mapper.child : mapper);
            }
        },

        _updateNodes: function () {
            this._beforeBaseClass();
            this._applyFirstLastChildClass();
            this._updateExpandedNodes();
            this._updateCheckedNodes();
            this._updateSelectedNode();
        },

        _updateField: function (obj, searchId, mapper, fieldName, fieldValue) {
            if (ej.isNullOrUndefined(mapper) || this.dataSource() == null || ej.isNullOrUndefined(obj) || ej.isNullOrUndefined(searchId) || ej.isNullOrUndefined(fieldName)) return;
            if (this._templateType == 1) {
                for (var i = 0, objlen = obj.length; i < objlen; i++) {
                    var fieldId = ej.getObject(mapper.id, obj[i]);
                    if (!ej.isNullOrUndefined(obj[i]) && !ej.isNullOrUndefined(fieldId) && fieldId.toString() == searchId) {
                        var fname = mapper[fieldName] ? mapper[fieldName] : fieldName;
                        obj[i][fname] = fieldValue;
                        if (fieldValue == false) delete obj[i][fname];
                        var newobj = obj[i];
                        obj.splice(i, 1, newobj);
                        break;
                    }
                }
            }
            else {
                for (var i = 0, objlen = obj.length; i < objlen; i++) {
                    var fieldID = ej.getObject(mapper.id, obj[i]);
                    if (!ej.isNullOrUndefined(obj[i]) && !ej.isNullOrUndefined(fieldID) && fieldID.toString() == searchId) {
                        var fname = mapper[fieldName] ? mapper[fieldName] : fieldName;
                        obj[i][fname] = fieldValue;
                        if (fieldValue == false) delete obj[i][fname];
                        var newobj = obj[i];
                        obj.splice(i, 1, newobj);
                        break;
                    }
                    if (obj[i].hasOwnProperty('child'))
                        this._updateField(obj[i].child, searchId, mapper.child ? mapper.child : mapper, fieldName, fieldValue);
                }
            }
        },

        _removeField: function (obj, mapper, fieldName) {
            if (ej.isNullOrUndefined(mapper) || this.dataSource() == null || ej.isNullOrUndefined(obj)) return;
            for (var i = 0; i < obj.length; i++) {
                if (obj[i][mapper[fieldName]] != undefined) delete obj[i][mapper[fieldName]];
                if (obj[i].hasOwnProperty('child'))
                    this._removeField(obj[i].child, mapper.child ? mapper.child : mapper, fieldName);
            }
        },

        _KeyPressEventHandler: function (nextElement, proxy, code, event) {
            var nodeDetails, data, path, isExpanded;
            if ($(nextElement)[0] != null) {
                isExpanded = this._isNodeExpanded(nextElement);
                nodeDetails = this._getNodeDetails(nextElement);
                path = proxy._getPath(nextElement);
                data = { keyCode: code, currentElement: nextElement, value: nodeDetails.text, isExpanded: isExpanded, path: path, event: event, id: nodeDetails.id, parentId: nodeDetails.parentId };
            } else {
                data = { keyCode: code, currentElement: nextElement, value: "", isExpanded: "", path: "", event: event, id: "", parentId: "" };
            }
            return this._triggerEvent('keyPress', data);
        },

        _documentClick: function (event) {
            if (event.target.id != 'Edit_Input')
                var editTextBox = $('#Edit_Input')[0], aTag, newText;
            if (editTextBox != null) {
                var aTag = $(editTextBox).closest('.e-text')[0], newText = editTextBox.value, parent = $(editTextBox).closest('.e-item');
                $(editTextBox).remove();
                aTag.lastChild.nodeValue = newText;
                $(aTag).removeClass('e-editable').removeAttr('style');
                this._updateField(this._newDataSource, parent.attr('id'), this.model.fields, "text", newText);
                if (this._deepWatch) {
                    this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
					this.dataSource(this._newDataSource);
                }
                this._triggerEvent('nodeEdit', { id: parent.attr('id'), oldText: this._beforeEditText, newText: newText, target: parent, nodeDetails: this._getNodeDetails(parent), event: event });
            }
            if (this.element.find(event.target).length == 0) {
                var ele = this.element.find('.e-item > div > .e-text.e-node-focus');
                this._focusedNode = ele.closest('.e-item');
                ele.removeClass('e-node-focus');
            }
            else if ($(event.target).hasClass("e-active"))
                this._focusedNode = this.element.find(event.target).closest('.e-item');
        },

        _saveAction: function (values, event) {
            var newText = values.val(), parent = values.closest('.e-item'), aTag = values.closest('.e-text')[0], template_id = values.closest("li")["0"].id;
            values.remove();
            if (aTag != null) {
                aTag.lastChild.nodeValue = newText;
                $(aTag).removeClass('e-editable');
                this._updateField(this._newDataSource, parent.attr('id'), this.model.fields, "text", newText);
                if (this.model.template){
                    var treeData = this._getNodeObject(template_id);
                   if (treeData && treeData.length != 0) aTag.innerHTML = this._renderEjTemplate(this.model.template, treeData["0"]);
                }
                if (this._deepWatch) {
                    this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
					this.dataSource(this._newDataSource);
                }
                this._triggerEvent('nodeEdit', { id: parent.attr('id'), oldText: this._beforeEditText, newText: newText, target: parent, nodeDetails: this._getNodeDetails(parent), event: event });
				this.element.focus();
                this._focusedNode = parent;
            }
        },

        _cancelAction: function (values) {
            var aTag = values.closest('.e-text')[0];
            values.remove();
            aTag.lastChild.nodeValue = this._beforeEditText;
            $(aTag).removeClass('e-node-hover e-editable');
			this.element.focus();
        },

        _focusNode: function (aTag) {
            ($(aTag).hasClass("e-text")) && aTag.setAttribute("tabindex", "0");
            aTag.focus();
        },

        _mouseEnterEvent: function (event) {
            this.element.find('.e-node-hover').removeClass("e-node-hover");
            if ($(event.currentTarget).hasClass("e-text") && !$(event.currentTarget).hasClass("e-node-disable"))
                $(event.currentTarget).addClass("e-node-hover");
        },

        _mouseLeaveEvent: function (event) {
            $(event.currentTarget).removeClass("e-node-hover");
        },

        _liMouseEnterEvent: function (event) {
            this.element.find('.e-node-hover').removeClass("e-node-hover");
            this.element.find('.e-li-hover').removeClass("e-li-hover");
            var curLi = $(event.currentTarget).closest('.e-item');
            var curAng = curLi.find("> div .e-text");
            if (curAng.length > 0 && !curAng.hasClass("e-node-disable")) {
                curAng.addClass("e-node-hover");
                curLi.addClass("e-li-hover");
            }
        },

        _liMouseLeaveEvent: function (event) {
            var curLi = $(event.currentTarget).closest('.e-item');
            curLi.find("> div .e-text").removeClass("e-node-hover");
            curLi.removeClass("e-li-hover");
        },

        _onFocusOutHandler: function (event) {
            if (!this._isPopup) this._hidePopup();
            this._isPopup = false;
        },

        _createObjectByText: function (text, targetNode) {
            if (typeof text != "string") return;
            var obj = {};
            ej.createObject(this.model.fields.text, text, obj);
            if ($(targetNode)[0] != null)
                ej.createObject(this.model.fields.parentId, targetNode[0].getAttribute('id'), obj);
            return obj;
        },

        _addNodesWhenObject: function (obj, selectedNode) {
            var tempObj = JSON.stringify(this._dataSource), _dataObj = this.dataSource(), parentId, tempType;
            this._dataSource = [];
            if (this.dataSource() != null && this.dataSource() instanceof ej.DataManager)
                _dataObj = [];
            if (selectedNode[0] != null && selectedNode.length > 0)
                parentId = selectedNode[0].getAttribute('id');
            if (ej.isNullOrUndefined(obj.length)) {
                this._dataSource.push(obj);
                if (!ej.isNullOrUndefined(this.dataSource())) {
                    this._setNodeId(obj, this.model.fields);
                    (!ej.isNullOrUndefined(parentId)) && (ej.createObject(this.model.fields.parentId, parentId, obj));
                    _dataObj.push(obj);
                }
            }
            else {
                this._dataSource = obj;
                if (!ej.isNullOrUndefined(this.dataSource())) {
                    for (var j = 0; j < obj.length; j++) {
                        this._setNodeId(obj[j], this.model.fields);
                        if (parentId)
                            ej.createObject(this.model.fields.parentId, parentId, obj[j]);
                        else
                            this._deepPropertyDelete(this.model.fields.parentId, obj[j]);
                        _dataObj.push(obj[j]);
                    }
                }
            }
            tempType = this._templateType;
            this._templateType = 2;
            if (!this._liList)
                this._liList = $("li", this.element);
            var fragmentObj = document.createDocumentFragment();
            for (var i = 0, len = this._dataSource.length ; i < len; i++) {
                fragmentObj.appendChild(this._genTemplate(this._dataSource[i], this.model.fields));
                this._liList.push($(fragmentObj).children()[0]);
                if (this.dataSource() instanceof ej.DataManager) {
                    this._addRemoteData(this._newDataSource, parentId, this._dataSource[i], this.model.fields);
                }
            }
            this._templateType = tempType;
            if (this.dataSource() != null && !(this.dataSource() instanceof ej.DataManager)) {
                this._dataSource = JSON.parse(tempObj);
                if (this._deepWatch) {
                    this._oldDataSource = JSON.parse(JSON.stringify(_dataObj));
					this.dataSource(_dataObj);
                }
            }
            return fragmentObj;
        },

        _setNodeId: function (dataObj, mapper) {
            var mapId = (mapper && mapper.id) ? mapper.id : this.model.fields.id;
            if (ej.isNullOrUndefined(dataObj[mapId]) || dataObj[mapId] == "") {
                dataObj[mapId] = this._id + "_" + this._indexID;
                this._indexID++;
            }
            if (dataObj.hasOwnProperty('child')) {
                var childObj = dataObj.child;
                for (var i = 0, len = childObj.length; i < len; i++) {
                    this._setNodeId(childObj[i], mapper.child);
                }
            }
        },

        _addExpandedNodes: function (index) {
            var _nodes = this.model.expandedNodes;
            this._removeNullInArray(_nodes);
            if ($.inArray(index, _nodes) == -1)
                this.model.expandedNodes.push(index);
            this._persistValues(this.model.expandedNodes, "expandedNodes");
        },

        _removeExpandedNodes: function (index) {
            var _nodes = this.model.expandedNodes;
            if ($.inArray(index, _nodes) > -1) {
                this.model.expandedNodes.splice($.inArray(index, _nodes), 1);
                _nodes.length == 0 && (_nodes.push(-1));
            }
            this._persistValues(this.model.expandedNodes, "expandedNodes");
        },

        _persistValues: function (indexColl, valueType) {
            if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
                var _nodes = indexColl, idColl = [], ele, id;
                for (var i = 0, len = _nodes.length; i < len; i++) {
                    if (!ej.isNullOrUndefined(_nodes[i]) && _nodes[i] >= 0) {
                        ele = this._liList[_nodes[i]], id = $(ele).attr('id');
                        (id) && idColl.push(id);
                    }
                }
                var cookieData = this._getCookies("_persistedValues");
                if (cookieData) {
                    var parsedData = JSON.parse(cookieData);
                    parsedData[valueType] = idColl;
                    parsedData = this._updatePersistAttr(parsedData);
                    this._setCookies("_persistedValues", JSON.stringify(parsedData));
                }
            }
        },

        _updatePersistAttr: function (parsedData) {
            if (ej.isNullOrUndefined(this._ignoreOnPersist)) {
                if ($.inArray('selectedNodes', this._addToPersist) == -1) delete parsedData.selectedNodes;
                if ($.inArray('expandedNodes', this._addToPersist) == -1) delete parsedData.expandedNodes;
                if ($.inArray('checkedNodes', this._addToPersist) == -1) delete parsedData.checkedNodes;
            }
            else {
                if ($.inArray('selectedNodes', this._ignoreOnPersist) > -1) delete parsedData.selectedNodes;
                if ($.inArray('expandedNodes', this._ignoreOnPersist) > -1) delete parsedData.expandedNodes;
                if ($.inArray('checkedNodes', this._ignoreOnPersist) > -1) delete parsedData.checkedNodes;
            }
            return parsedData;
        },

        _onChecked: function (element, args) {
            var liElement = element.closest('.e-item'), isChecked, evt, checknode, data;
            var nodeDetails = this._getNodeDetails(liElement);
            this._CurrenctSelectedNodes.push(nodeDetails.text);
            isChecked = this._isChecked(liElement);
            evt = !ej.isNullOrUndefined(args) ? !ej.isNullOrUndefined(args.event) ? args.event : "" : "";
            data = { currentElement: liElement, id: nodeDetails.id, parentId: nodeDetails.parentId, value: nodeDetails.text, currentNode: this._CurrenctSelectedNodes, currentCheckedNodes: this._checkedArray, isChecked: isChecked, event: evt };
            if (this._isRender) this._triggerEvent('nodeCheck', data);
        },

        _onUnChecked: function (element, args) {
            var liElement = element.closest('.e-item'), isUnChecked, evt, unchecknode, data;
            var nodeDetails = this._getNodeDetails(liElement);
            this._CurrenctSelectedNodes.push(nodeDetails.text);
            isUnChecked = this._isChecked(liElement);
            evt = !ej.isNullOrUndefined(args) ? !ej.isNullOrUndefined(args.event) ? args.event : "" : "";
            data = { currentElement: liElement, id: nodeDetails.id, parentId: nodeDetails.parentId, value: nodeDetails.text, currentNode: nodeDetails.text, currentUncheckedNodes: this._uncheckedArray, isChecked: isUnChecked, event: evt };
            this._triggerEvent('nodeUncheck', data);
        },

        _addCheckNodes: function (item) {
            var checkedArray = this.model.checkedNodes;
            this._removeNullInArray(checkedArray);
            !checkedArray instanceof Array && (checkedArray = []);
            if (checkedArray.indexOf(item) == -1) checkedArray.push(item);
        },

        _removeCheckNodes: function (item) {
            var checkedArray = this.model.checkedNodes;
            !checkedArray instanceof Array && (checkedArray = []);
            var i = checkedArray.indexOf(item);
            if (i != -1) {
                checkedArray.splice(i, 1);
                checkedArray.length == 0 && (checkedArray.push(-1));
            }
        },

        _removeNullInArray: function (array) {
            var i = array.indexOf(-1);
            if (i != -1) array.splice(i, 1);
        },

        _afterInsertingNode: function (outerLi) {
            this._addDragableClass();
            this._finalizeEditing(outerLi);
            var parentLi = outerLi.closest('ul').closest('.e-item');
            this._modifyCss(parentLi);
            this._updateCheckState(parentLi);
            this._isSelectedAction();
            if (parentLi.length > 0 && parentLi.hasClass('e-node-disable'))
                this._nodeDisableAction(parentLi);
            this._updateSelectedNode();
        },

        _insertBeforeOrAfter: function (txtobj, afterEle, before) {
            afterEle = this._getNodeByID(afterEle);
            if (afterEle[0] != null && afterEle.is('LI') && afterEle.hasClass('e-item')) {
                if (this._triggerEvent('beforeAdd', { data: txtobj, targetParent: (afterEle[0] != null) ? afterEle : null, parentDetails: this._getNodeDetails(afterEle) })) return;
                this._isRender = false;
                if (typeof txtobj != 'object')
                    txtobj = this._createObjectByText(txtobj);
                if (typeof txtobj != "object") return;
                (ej.getObject(this.model.parentId, txtobj)) && this._deepPropertyDelete(this.model.parentId, txtobj);
                var outerLi = this._addNodesWhenObject(txtobj, afterEle);
                var temp = document.createElement('ul');
                $(temp).append(outerLi); outerLi = $(temp.children);
                this.model.showCheckbox && outerLi.children().find(".nodecheckbox").ejCheckBox({ cssClass: this.model.cssClass, change: this._checkedChange });
                (afterEle.parents('.e-item:first').length > 0) ? afterEle.parents('.e-item:first').append(outerLi) : this.element.append(outerLi);
                this.model.showCheckbox && this._isCheckedAction();
                this._dropAsSiblingNode(afterEle, outerLi.find("> div > .e-text"), before, "");
                this._afterInsertingNode(outerLi);
                this._isRender = true;
                this._triggerEvent('nodeAdd', { data: txtobj, nodes: outerLi, parentElement: (afterEle[0] != null) ? afterEle : null, parentDetails: this._getNodeDetails(afterEle) });
                var proxy = this, _dataObj = this.dataSource();
                setTimeout(function () {
                    if (proxy.dataSource() != null && !(proxy.dataSource() instanceof ej.DataManager))
                        proxy._dataSource = proxy._groupingObjects(_dataObj, function (_dataObj) { return [!ej.isNullOrUndefined(_dataObj) && [ej.getObject(proxy.model.fields.parentId, _dataObj)].toString()]; });
                }, 300);
            }
        },

        _getNodeByID: function (node) {
            if (typeof node != "object" && node != "" && node != undefined) return this.element.find(this._checkValidId(node.toString()));
            node = $(node);
            (node.is("A") && node.hasClass('e-text')) && (node = node.closest('.e-item'));
            return node;
        },

        _checkValidId: function (myid) {
            return (myid[0] == "#") ? myid.replace(/(:|\.|\[|\]|,)/g, "\\$1") : "#" + myid.replace(/(:|\.|\[|\]|,)/g, "\\$1");;
        },

        _isTreeElement: function (node) {
            return $(node)[0] != null && node.is('LI') && node.hasClass('e-item');
        },

        _isUrl: function (url) {
            var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            return regexp.test(url);
        },

        _getChildUl: function (ele) {
            return this.model.fullRowSelect ? ele.children[2] : ele.children[1];
        },

        _sendAjaxOptions: function (url, trgt) {
            var proxy = this, dataobj, ajaxOptions;
            dataobj = this._getNodeDetails(trgt);
            dataobj['mapper'] = this.model.fields;
            dataobj['model'] = this.model;
            ajaxOptions = {
                url: url, data: dataobj, type: 'POST', async: true, crossDomain: true,
                dataType: 'JSON', contentType: "application/json; charset=utf-8",
                "success": function (data) {
                    try {
                        proxy._ajaxSuccessHandler(data, trgt);
                    } catch (e) { }
                }, "error": function (data) {
                    try {
                        proxy._ajaxErrorHandler(data);
                    } catch (e) { }
                }
            };
            this._sendAjaxRequest(ajaxOptions);
        },

        _sendAjaxRequest: function (ajaxOptions) {
            var temp = JSON.parse(JSON.stringify(ajaxOptions));
            delete temp.success;     // To prevent user to edit ajax success and edit event handler
            delete temp.error;
            if (this._triggerEvent('beforeLoad', { ajaxOptions: temp })) return;
            delete temp.success;
            delete temp.error;
            $.extend(ajaxOptions, temp);  // The modified data will be restored in ajaxOptions
            $.ajax({
                type: ajaxOptions.type,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                async: ajaxOptions.async,
                contentType: ajaxOptions.contentType,
                crossDomain: ajaxOptions.crossDomain,
                success: ajaxOptions.success,
                error: ajaxOptions.error,
            });
        },

        _ajaxSuccessHandler: function (data, targetNode) {
            this._isRender = false;        // To prevent event triggering
            (typeof data == "object") && this.addNode(data, targetNode);
            this._isRender = true;
            this._triggerEvent('loadSuccess', { data: data, targetParent: targetNode, parentDetails: this._getNodeDetails(targetNode) });
        },

        _ajaxErrorHandler: function (args) {
            this._triggerEvent('loadError', { error: args });
        },

        _wireEvents: function () {
            if (this._isDevice && $.isFunction($.fn.tap)) this._on(this.element.find('li'), 'tap', this._ClickEventHandler);
            else this._on(this.element, "click", this._ClickEventHandler)
            this._on(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? this._touchExpandOn : this.model.expandOn, this._expandEventHandler)
                ._on(this.element, "focus", this._onFocusHandler)
                ._on(this.element, "blur", this._onFocusOutHandler);
            this._wholeRowEvents("_on");
			this.model.allowEditing && this._allowEditable();
			this.model.allowDragAndDrop && this._addDragableClass();
			this.model.showCheckbox && this.element.find('.nodecheckbox').ejCheckBox("enable");
            this.model.allowKeyboardNavigation && this._on(this.element, "keydown", this._KeyPress);
        },

        _unWireEvents: function () {
            if (this._isDevice && $.isFunction($.fn.tap)) this._off(this.element.find('li'), "tap")
            else this._off(this.element, "click")
            this._off(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? this._touchExpandOn : this.model.expandOn)
                ._off(this.element, "focus")
                ._off(this.element, "blur");
            this._wholeRowEvents("_off");
            this._preventEditable();
            this._preventDraggable();
            this.model.allowKeyboardNavigation && this._off(this.element, 'keydown');
            this.model.showCheckbox && this.element.find('.nodecheckbox').ejCheckBox("disable");
        },

        _wholeRowEvents: function (action) {
            if (this.model.fullRowSelect) {
                this[action](this.element, (this._isDevice && $.isFunction($.fn.touchstart)) ? "touchstart" : "mouseenter", ".e-text-wrap", this._liMouseEnterEvent);
                this[action](this.element, (this._isDevice && $.isFunction($.fn.touchend)) ? "touchend" : "mouseleave", ".e-text-wrap", this._liMouseLeaveEvent);
                this[action](this.element, (this._isDevice && $.isFunction($.fn.touchstart)) ? "touchstart" : "mouseenter", ".e-fullrow", this._liMouseEnterEvent);
                this[action](this.element, (this._isDevice && $.isFunction($.fn.touchend)) ? "touchend" : "mouseleave", ".e-fullrow", this._liMouseLeaveEvent);
            }
            else {
                this[action](this.element, (this._isDevice && $.isFunction($.fn.touchstart)) ? "touchstart" : "mouseenter", ".e-text", this._mouseEnterEvent);
                this[action](this.element, (this._isDevice && $.isFunction($.fn.touchend)) ? "touchend" : "mouseleave", ".e-text", this._mouseLeaveEvent);
            }
        },

        _enableDragDrop: function () {
            if (this.model.allowDragAndDrop) {
                this._drag();
                this.model.allowDropChild && this._childDrop();
                this.model.allowDropSibling && this._siblingDrop();
            }
        },

        _allowEditable: function () {
                this.element.find('.e-item').addClass('AllowEdit');
                this._on($(document), 'click', this._documentClick)
                    ._on(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? 'doubletap' : 'dblclick', "a.e-text", this._inlineEdit);
        },

        _preventEditable: function () {
            this.element.find('.e-item').removeClass('AllowEdit');
            this._off($(document), 'click', this._documentClick)
                ._off(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? 'doubletap' : 'dblclick', "a.e-text");
        },

        _preventDraggable: function () {
            this.element.find('.e-draggable, .e-droppable').removeClass("e-draggable e-droppable");
            this._preventDropSibling();
            this._preventDropChild();
            this._off(this.element, "mouseup touchstart pointerdown MSPointerDown", this._anchors, this._focusElement);
            this._off(this.element, "focusout", this._anchors, this._blurElement);
        },

        _preventDropSibling: function () {
            this.element.find('.e-dropsibling').removeClass("e-dropsibling");
        },

        _preventDropChild: function () {
            this.element.find('.e-item > div > .e-dropchild').removeClass("e-dropchild");
        },

        _getNodeObject: function (id, text) {
            if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null && id != undefined) {
                if (this._templateType === 1) {
                    var query1 = ej.Query().where(this.model.fields.id, "equal", id, false);
                    var data = ej.DataManager(this._newDataSource).executeLocal(query1);
                    return (data.length > 0 && text) ? [data[0][this.model.fields.text]] : data;
                } else {
                    return this._getRemoteNode(this._newDataSource, this.model.fields, id, text);
                }
            }
            return [];
        },

        _getChildMapper: function (mapper) {
            return (typeof mapper.child === 'string' || ej.isNullOrUndefined(mapper.child)) ? mapper : mapper.child;
        },

        _getNodeData: function (id) {
            if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null && id != undefined) {
                this._updatePersistProb();
                var newList = [], orderedData = [];
				var length = this._orderDataSource().length;
				var treeId = null;
				for (var i = 0; i < length; i++) {
					if (this._orderDataSource()[i][this.model.fields.id] == id) {
						treeId = id;
						i = length;
					}
				}
				if (treeId) {
                if (this.dataSource() instanceof ej.DataManager && this._templateType == 2) {
                    newList = this._getRemoteNode(this._newDataSource, this.model.fields, id);
                    return newList;
                }
                if (this._templateType == 2) {
                    newList = JSON.parse(JSON.stringify(this._getRemoteNode(this._newDataSource, this.model.fields, id)));
                } else {
                    var predicats = [];
                    var list = this._orderDataSource();
                    var query1 = ej.Query().where(this.model.fields.id, "equal", id, false);
                    var filteredList = ej.DataManager(list).executeLocal(query1);
                    var filters = this._getFilterItems(filteredList[0], list);
                    for (var i = 0, flen = filters.length; i < flen; i++) {
                        predicats.push(new ej.Predicate(this.model.fields.id, 'equal', filters[i], false));
                    }
                    var query = ej.Query().where(ej.Predicate.or(predicats));
                    newList = JSON.parse(JSON.stringify(ej.DataManager(list).executeLocal(query)));
                }
                for (var k = 0, dlen = newList.length; k < dlen; k++) {
                    var fieldId = ej.getObject(this.model.fields.id, newList[k]);
                    if ($(document.getElementById(fieldId)).length > 0) {
                        if ($(document.getElementById(fieldId)).find('> ul .e-item').length == 0) {
                            this._deepPropertyDelete(this.model.fields.hasChild, newList[k]);
                            if (this._templateType == 2)
                                delete newList[k]["child"];
                        } else if (this._templateType == 1)
                            ej.createObject(this.model.fields.hasChild, true, newList[k]);
                        else
                            this._updateChildData(newList[k]["child"], this.model.fields);
                        orderedData.push(newList[k]);
                    }
                }
                return orderedData;
					}
            }
        },

        _updateChildData: function (newData, mapper) {
            if (newData == undefined) return;
            for (var i = 0, objlen = newData.length; i < objlen; i++) {
                var id = ej.getObject(mapper.id, newData[i]);
                if ($(document.getElementById(id)).length > 0) {
                    if ($(document.getElementById(id)).find('> ul .e-item').length == 0) {
                        this._deepPropertyDelete(mapper.hasChild, newData[i]);
                        delete newData[i]["child"];
                    } else
                        this._updateChildData(newData[i]["child"], mapper.child ? mapper.child : mapper);
                }
            }
        },

        _getFilterItems: function (fList, list) {
            var nodes = [];
            if (fList == undefined) return nodes;
            var id = ej.getObject(this.model.fields.id, fList);
            nodes.push(id);
            var query2 = ej.Query().where(this.model.fields.parentId, 'equal', id, false);
            var fList1 = ej.DataManager(list).executeLocal(query2);
            for (var l = 0, nlen = fList1.length; l < nlen ; l++) {
                var cNode = this._getFilterItems(fList1[l], list);
                for (var i = 0, clen = cNode.length; i < clen; i++) {
                    nodes.push(cNode[i]);
                }
            }
            return nodes;
        },

        _getRemoteNode: function (obj, mapper, id, text) {
            var newList = [];
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
                var fieldId = ej.getObject(mapper.id, obj[i]);
                if (fieldId && (fieldId.toString() == id)) {
                    if (text) {
                        newList.push(obj[i][mapper.text]);
                    } else {
                        newList.push(obj[i]);
                    }
                    return newList;
                }
                if (obj[i].hasOwnProperty('child')) {
                    newList = this._getRemoteNode(obj[i].child, this._getChildMapper(mapper), id, text);
                    if (newList.length > 0) return newList;
                }
            }
            return newList;
        },

        _updateRemoteData: function (obj, searchId, childObj, mapper) {
            if (this.dataSource() != null && this.dataSource().dataSource.offline) return;
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
                var fieldId = ej.getObject(mapper.id, obj[i]);
                if (fieldId && (fieldId.toString() == searchId)) {
                    obj[i]["child"] = childObj;
                    var newobj = obj[i];
                    obj.splice(i, 1, newobj);
                    break;
                }
                if (obj[i].hasOwnProperty('child'))
                    this._updateRemoteData(obj[i].child, searchId, childObj, mapper.child ? mapper.child : mapper);
            }
        },

        _addRemoteData: function (obj, searchId, childObj, mapper) {
            if (this.dataSource() != null && this.dataSource().dataSource.offline) return;
            if (ej.isNullOrUndefined(searchId)) {
                obj.push(childObj);
            } else {
                for (var i = 0, objlen = obj.length; i < objlen; i++) {
                    var fieldId = ej.getObject(mapper.id, obj[i]);
                    if (fieldId && (fieldId.toString() == searchId)) {
                        if (ej.isNullOrUndefined(obj[i]["child"])) {
                            obj[i]["child"] = [childObj];
                            var newobj = obj[i];
                            obj.splice(i, 1, newobj);
                        } else {
                            obj[i]["child"].push(childObj);
                        }
                        break;
                    }
                    if (obj[i].hasOwnProperty('child'))
                        this._addRemoteData(obj[i].child, searchId, childObj, mapper.child ? mapper.child : mapper);
                }
            }
        },

        refresh: function () {
            this._unWireEvents();
            this.element.html("");
            this._init();
        },

        expandAll: function (level, excludeHiddenNodes) {
            if (this.model.enableMultipleExpand)
                (level > 0) ? this._expandByLevel(this._getElement(), level, excludeHiddenNodes) : this._expandAll(excludeHiddenNodes);
        },

        collapseAll: function (level, excludeHiddenNodes) {
            if (this.model.enableMultipleExpand)
                (level > 0) ? this._collapseByLevel(this._getElement(), level, excludeHiddenNodes) : this._collapseAll(excludeHiddenNodes);
        },

        checkAll: function () {
            this.model.showCheckbox && this._checkAll();
        },

        unCheckAll: function () {
            this.model.showCheckbox && this._uncheckAll();
        },

        selectNode: function (node) {
            if (node && typeof node == "object" && node.length > 0) {
                this._unselectAll();
                this._doSelectNodes(node, true);
            }
            else {
                node = this._getNodeByID(node);
                this._isTreeElement(node) && this._nodeSelectionAction(node);
            }
        },

        unselectNode: function (node) {
            if (node && typeof node == "object" && node.length > 0)
                this._doUnselectNodes(node);
            else {
                node = this._getNodeByID(node);
                this._isTreeElement(node) && this._nodeUnSelectionAction(node);
            }
        },

        selectAll: function () {
            this.model.allowMultiSelection && this._selectAll();
        },

        unselectAll: function () {
            this.model.allowMultiSelection && this._unselectAll();
        },

        enableNode: function (node) {
            if (node && typeof node == "object" && node.length > 0) {
                for (var i = 0; i < node.length; i++)
                    this.enableNode(node[i]);
            }
            else {
                var item = this._getNodeByID(node);
                this._isTreeElement(item) && this._nodeEnableAction(item);
            }
        },

        disableNode: function (node) {
            if (node && typeof node == "object" && node.length > 0) {
                for (var i = 0; i < node.length; i++)
                    this.disableNode(node[i]);
            }
            else {
                var item = this._getNodeByID(node);
                this._isTreeElement(item) && this._nodeDisableAction(item);
            }
        },

        addNodes: function (collection, targetNode, preventTargetExpand) {
            if (collection && typeof collection == "object" && targetNode == undefined && collection.length > 0) {
                for (var i = 0; i < collection.length; i++)
                    this.addNode(collection[i], targetNode, preventTargetExpand);
            }
            else this.addNode(collection, targetNode, preventTargetExpand);
        },

        addNode: function (newNodeText, targetNode ,preventTargetExpand) {
            if (ej.isNullOrUndefined(newNodeText)) return;
            var outerLi = null, innerUl = null, temp, activeNode, id, selectedNode, template;
            selectedNode = targetNode ? this._getNodeByID(targetNode) : (this.model.allowMultiSelection ? this.getSelectedNodes() : this.getSelectedNode());
            if (typeof newNodeText == 'object' && ej.isNullOrUndefined(targetNode)) {
                var parentId = ej.getObject(this.model.fields.parentId, newNodeText);
                if (ej.isNullOrUndefined(newNodeText.length) && !ej.isNullOrUndefined(parentId))
                    id = parentId;
                else if (!ej.isNullOrUndefined(newNodeText.length) && newNodeText.length == 1)
                    id = ej.getObject(this.model.fields.parentId, newNodeText[0]);
                if (id) selectedNode = this._getNodeByID(id);
            }
            selectedNode = (this._isTreeElement(selectedNode)) ? $(selectedNode[0]) : [];
			var isNodeExpand = this._isParentExpand(selectedNode);
            if (this._triggerEvent('beforeAdd', { data: newNodeText, targetParent: (selectedNode[0] != null) ? selectedNode : null, parentDetails: this._getNodeDetails(selectedNode) })) return;
            (selectedNode.length != 0 && !selectedNode.hasClass('e-node-disable')) && this._expandNode(selectedNode);
            if (typeof newNodeText != 'object')
                newNodeText = this._createObjectByText(newNodeText, selectedNode);
            if (typeof newNodeText != "object" || (ej.isNullOrUndefined(newNodeText.length) && newNodeText.length == 0)) return;
            outerLi = this._addNodesWhenObject(newNodeText, selectedNode);
            temp = document.createElement('ul');
            $(temp).append(outerLi); outerLi = $(temp.children);
            this.model.showCheckbox && outerLi.children().find(".nodecheckbox").ejCheckBox({ cssClass: this.model.cssClass, change: this._checkedChange });
            this._appendNode(selectedNode, outerLi);
            if (selectedNode[0] != null) {
                var imgTag = $(selectedNode[0].childNodes[0].childNodes[0]);
                (imgTag.hasClass('e-plus') || imgTag.hasClass('e-minus')) ? imgTag.removeClass('e-load') : imgTag.removeClass('e-icon e-load');
            }
            (selectedNode[0] != null && selectedNode.find('> div > .e-minus').length > 0 && !this.model.enableMultipleExpand) && this._denyMultipleExpand(selectedNode);
            this._updateNodes();
            this._afterInsertingNode(outerLi);
            if (this._isDevice && $.isFunction($.fn.tap)&&selectedNode[0] == null) {
                this._on(outerLi, 'tap', this._ClickEventHandler);
            }
			if (preventTargetExpand && !isNodeExpand){
				this._preventParentNode(selectedNode);
			}
            this._triggerEvent('nodeAdd', { data: newNodeText, nodes: outerLi, parentElement: (selectedNode[0] != null) ? selectedNode : null, parentDetails: this._getNodeDetails(selectedNode) });
            var proxy = this, _dataObj = this.dataSource();
            setTimeout(function () {
                if (proxy.dataSource() != null && !(proxy.dataSource() instanceof ej.DataManager))
                    proxy._dataSource = proxy._groupingObjects(_dataObj, function (_dataObj) { return [!ej.isNullOrUndefined(_dataObj) && [ej.getObject(proxy.model.fields.parentId, _dataObj)].toString()]; });
            }, 300);
        },

        removeNode: function (node) {
            if (node && typeof node == "object" && node.length > 0) {
                for (var i = 0; i < node.length; i++)
                    this.removeNode(node[i]);
            }
            else {
                var item = node ? this._getNodeByID(node) : (this.model.allowMultiSelection ? this.getSelectedNodes() : this.getSelectedNode());
                this._isTreeElement(item) && this._removeNode(item);
            }
        },

        removeAll: function () {
            this._liList.remove();
            this._updateNodes();
        },

        checkNode: function (node) {
            if (!this.model.showCheckbox) return;
            if (node && typeof node == "object" && node.length > 0) {
                for (var i = 0; i < node.length; i++)
                    this.checkNode(node[i]);
            }
            else {
                var item = this._getNodeByID(node);
                this._isTreeElement(item) && this._nodeCheck(item.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
            }
        },

        uncheckNode: function (node) {
            if (!this.model.showCheckbox) return;
            if (node && typeof node == "object" && node.length > 0) {
                for (var i = 0; i < node.length; i++)
                    this.uncheckNode(node[i]);
            }
            else {
                var item = this._getNodeByID(node);
                this._isTreeElement(item) && this._nodeUncheck(item.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
            }
        },

        expandNode: function (node) {
            if (node && typeof node == "object" && node.length > 0) {
                this._allowOnDemand = true;
                this._expandNodes(node, true);
                this._allowOnDemand = false;
            }
            else {
                node = this._getNodeByID(node);
                if (this._isTreeElement(node)) {
                    this._allowOnDemand = true;
                    this._expandNode(node);
                    this._allowOnDemand = false;
                }
            }
        },

        collapseNode: function (node) {
            if (node && typeof node == "object" && node.length > 0) {
                for (var i = 0; i < node.length; i++)
                    this.collapseNode(node[i]);
            }
            else {
                var item = this._getNodeByID(node);
                this._isTreeElement(item) && this._collapseNode(item);
            }
        },

        showNode: function (node) {
            if (node && typeof node == "object" && node.length > 0) {
                for (var i = 0; i < node.length; i++)
                    this.showNode(node[i]);
            }
            else {
                var item = this._getNodeByID(node);
                this._isTreeElement(item) && item.css("visibility", "").removeClass('hidden');
            }
        },

        hideNode: function (node) {
            if (node && typeof node == "object" && node.length > 0) {
                for (var i = 0; i < node.length; i++)
                    this.hideNode(node[i]);
            }
            else {
                var item = this._getNodeByID(node);
                this._isTreeElement(item) && item.css("visibility", "hidden").addClass('hidden');
            }
        },

        show: function () {
            this.element.css("visibility", "").find('.e-item').removeClass('hidden');
        },

        hide: function () {
            this.element.css("visibility", "hidden").find('.e-item').addClass('hidden');
        },

        hasChildNode: function (node) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node))
                return node.find('> ul > .e-item').length > 0 ? true : false;
        },

        isChildLoaded: function (node) {
            node = this._getNodeByID(node);
            return (this._isTreeElement(node) && node.find('ul > .e-item').length > 0) ? true : false;
        },

        isNodeChecked: function (node) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node))
                return this._isChecked(node);
        },

        isExpanded: function (node) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node))
                return this._isNodeExpanded(node);
        },

        isVisible: function (node) {
            node = this._getNodeByID(node);
            return (this._isTreeElement(node) && node.css("visibility") != "hidden") ? true : false;
        },

        isExist: function (node) {
            node = this._getNodeByID(node);
            return (this._isTreeElement(node) && this._liList.index(node) != -1) ? true : false;
        },

        isSelected: function (node) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node)) return node.find('> div > .e-text').hasClass('e-active');
        },

        isDisabled: function (node) {
            node = this._getNodeByID(node);
            return (this._isTreeElement(node) && node.hasClass('e-node-disable')) ? true : false;
        },

        getTreeData: function (id) {
            if (id != undefined)
                return this._getNodeData(id);
            else if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null)
                return this._orderDataSource();
        },

        getText: function (node) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node))
                return $.trim(this.element.find(node).find('> div > .e-text').text());
        },

        getSelectedNode: function () {
            return !this.model.allowMultiSelection ? this.element.find('.e-item > div > .e-active').closest('.e-item') : null;
        },

        getSelectedNodes: function () {
            return this.element.find('.e-item > div > .e-active').closest('.e-item');
        },

        getCheckedNodes: function () {
            if (this.model.showCheckbox)
                return this._liList.find('> div > .e-chkbox-wrap[aria-checked="true"]').closest('.e-item');
        },

        getExpandedNodes: function () {
            return this.element.find('.e-item > div > .e-minus').closest('.e-item');
        },

        getExpandedNodesIndex: function () {
            return this._getNodesIndex(this.getExpandedNodes());
        },

        getCheckedNodesIndex: function () {
            return this._getNodesIndex(this.getCheckedNodes());
        },

        getSelectedNodeIndex: function () {
            return !this.model.allowMultiSelection ? this._getNodesIndex(this.getSelectedNode()) : null;
        },

        getSelectedNodesIndex: function () {
            return this._getNodesIndex(this.getSelectedNodes());
        },

        getVisibleNodes: function () {
            return this.element.find('.e-item:visible:not(.hidden, .e-node-disable)');
        },

        getNodeCount: function () {
            return this.element.find('.e-item').length;
        },

        getNode: function (node) {
            node = this._getNodeByID(node);
            return (this._isTreeElement(node)) ? this._getNodeDetails(node) : null;
        },

        getNodeIndex: function (node) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node))
                return this._liList.index(node);
        },

        getNodeByIndex: function (index) {
            if (typeof index == "number")
                return $(this._liList[index]);
        },

        getParent: function (node) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node))
                return node.parents('.e-item:first');
        },

        getChildren: function (node, includeNestedChild) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node))
                return includeNestedChild ? node.find('.e-item') : node.find('> ul > .e-item');
        },

        updateText: function (node, newText) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node) && !ej.isNullOrUndefined(newText)) {
                var aTag = this.element.find(node).children('div').find('> .e-text')[0], oldText, argsData;
				var template_id = node.closest("li")["0"].id;
                if (aTag != null) {
                    argsData = { currentElement: $(aTag) };
                    if (this._triggerEvent('beforeEdit', argsData))
                        return false;
                    oldText = aTag.lastChild.nodeValue;
                }
                aTag.lastChild.nodeValue = newText;
                this._updateField(this._newDataSource, node.attr('id'), this.model.fields, "text", newText);
                if(this.model.template){
                    var treeData = this._getNodeObject(template_id);
				   if (treeData && treeData.length != 0) aTag.innerHTML = this._renderEjTemplate(this.model.template, treeData["0"]);
				   else aTag.innerText = newText;
                }
                if (this._deepWatch) {
                    this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
					 this.dataSource(this._newDataSource);
                }
                this._triggerEvent('nodeEdit', { id: node.attr('id'), oldText: oldText, newText: newText, target: node, nodeDetails: this._getNodeDetails(node), event: null });
            }
        },

        insertAfter: function (nodeObj, afterEle) {
            this._insertBeforeOrAfter(nodeObj, afterEle, false);
        },

        insertBefore: function (nodeObj, afterEle) {
            this._insertBeforeOrAfter(nodeObj, afterEle, true);
        },

        moveNode: function (srcNode, desNode, index) {
            srcNode = this._getNodeByID(srcNode);
            desNode = this._getNodeByID(desNode);
            if (this._isTreeElement(srcNode)) {
                if ((srcNode.parents('.e-item')[0] == desNode[0] && ej.isNullOrUndefined(index)) || desNode.find(srcNode).index() == index || (desNode[0] == null && this._liList.index(srcNode) == index)) return;
                var target = (desNode[0] != null && index >= 0) ? desNode.find("> ul > .e-item").eq(index) : this.getNodeByIndex(index);
                this._isRender = false;
                if (this._isTreeElement(target)) {
                    if (target.parents('.e-item:first')[0] == srcNode.parents('.e-item:first')[0] && target.next('.e-item')[0] == null)
                        this._dropAsSiblingNode(target, srcNode.find(" > div > .e-text"), false, "");
                    else
                        this._dropAsSiblingNode(target, srcNode.find(" > div > .e-text"), true, "");
                } else {
                    this._dropAsChildNode(desNode, srcNode.find(" > div > .e-text"), "");
                }
                if (desNode.length > 0 && desNode.hasClass('e-node-disable'))
                    this._nodeDisableAction(desNode);
                this._isRender = true;
            }
        },

        loadData: function (url, targetNode) {
            targetNode = this._getNodeByID(targetNode);
            if (this._isUrl(url) && (targetNode[0] == null || (this._isTreeElement(targetNode))))
                this._sendAjaxOptions(url, targetNode);
        },

        ensureVisible: function (node) {
            node = this._getNodeByID(node);
            if (this._isTreeElement(node) && !this.isDisabled(node) && this.isVisible(node)) {
                var parents = node.parents('.e-item'), offset;
                for (var j = 0, len = parents.length; j < len; j++)
                    this._expandNode($(parents[j]));
                offset = node.offset();
                node.animate({ scrollTop: offset.top }, this.model.enableAnimation ? 350 : 0, 'linear', function () {
                    node.find("> div > a.e-text")[0].scrollIntoView(false);
                });
                return true;
            } else
                return false;
        },

        _triggerEvent: function (e, data) {
            if (this._isRender) return this._trigger(e, data);
        },

    });
})(jQuery, Syncfusion);
;
/**
* @fileOverview Plugin to style the Html Div elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejSplitter", "ej.Splitter", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _rootCSS: "e-splitter",
        _setFirst: false,
        angular: {
            terminal: false
        },

        defaults: {

            cssClass: "",

            orientation: "horizontal",

            enableAnimation: true,

            properties: [],

            height: null,

            width: null,

            // EnableAutoResize is a deprecated API, we can achieve this requirement by isResponsive property
            enableAutoResize: false,

            isResponsive: false,

            enableRTL: false,
			
			allowKeyboardNavigation: true,

            htmlAttributes: {},

            expanderTemplate: null,

            animationSpeed: 300,

            beforeExpandCollapse: null,
			
			clickOnExpander: null,

            expandCollapse: null,

            resize: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            cssClass: "string",
            orientation: "enum",
            properties: "data",
            enableAutoResize: "boolean",
            expanderTemplate: "string",
            isResponsive: "boolean",
            enableRTL: "boolean",
			allowKeyboardNavigation: "boolean",
            animationSpeed: "number",
            enableAnimation: "boolean",
            htmlAttributes: "data",
        },


        _init: function () {
            this._initialize();
            this._render();
            if (this.model.isResponsive || this.model.enableAutoResize)
                this._wireEvents(true);
            else
                this._wireEvents(false);
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "enableAutoResize": this._windowResizing(options[option]); break;
                    case "isResponsive": this._windowResizing(options[option]); break;
                    case "enableRTL": this._rtl(options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "orientation": this._refreshSplitter("orientation", options[option]); break;
                    case "properties": this._refreshSplitter("properties", options[option]); break;
                    case "width": this.model.width = options[option]; this._setHeightWidth(); break;
                    case "height": this.model.height = options[option]; this._setHeightWidth(); break;
                }
            }
        },

        refresh: function () {
            this._setPanesSize();
            this._getPanesPercent();
        },

        collapse: function (paneIndex) {
            this._clickArrow(paneIndex, true, true);
        },

        expand: function (paneIndex) {
            this._clickArrow(paneIndex, false, true);
        },

        _clickArrow: function (index, bool, canClick) {
            if (this._inMovement || index < 0 || index > this.panes.length || this.panes.length <= 1) return false;
            var arrow, cls = bool ? "e-collapse" : "e-expand", splitbars = this.element.children(".e-splitbar:not(.e-shadowbar)");
            if(ej.isNullOrUndefined(this.model.expanderTemplate)){
			if (index == splitbars.length) arrow = this._clickArrow(index - 1, !bool, false);
            else arrow = $(splitbars[index]).children("." + cls);
			}
			else{
			arrow = $(splitbars[index]).children(".e-splitter-"+this.model.orientation.substr(0, 1)+"-template");
			if(bool)
			this._collapseArrowClick(this.templateargs);
			else
			this._expandArrowClick(this.templateargs);
			}
			if(!ej.isNullOrUndefined(this.model.expanderTemplate)) this._templateIconPositioning(true);
            if (canClick) (arrow.css("display") != "none" || !ej.isNullOrUndefined(this.model.expanderTemplate)) && arrow.mouseup();
            else return arrow;
        },


        addItem: function (content, property, index) {
            var paneCount = this.panes.length;
            index = this._getNumber(index);
			 var totalSize = this.element[this.containerCss]();
            if (ej.isNullOrUndefined(index)) index = paneCount;
            if (index < 0 || index > paneCount) return "";
            var property = this._getPaneProperty(property), paneDiv, paneDivSize, requiredSize;
            property = this._checkMinMaxSize(property);
            paneDiv = ej.buildTag("div.e-pane e-" + this.model.orientation.substr(0, 1) + "-pane");
            this.element.append(paneDiv[this.containerCss](property.paneSize));
            paneDivSize = property.paneSize = paneDiv[this.containerCss]();
			 if(paneCount==0) this.panes.push(paneDiv);	
            paneDiv.remove();
            var start = index, end = (paneCount>0)?paneCount:this.panes.length, i, j, insert, before, direction = 2, getters = {}, taken = 0, canInsert = false;
            requiredSize = paneDivSize + this._bar;

            for (j = 0; j < direction; j++) {
                for (i = start; i < end; i++) {
                    var _paneSize = $(this.panes[i])[this.containerCss]();
					 var minSize=(!ej.isNullOrUndefined(this.model.properties[i]))?(this.model.properties[i].minSize): property.minSize;
                    var availableSpace = _paneSize - minSize;
                    if (availableSpace >= requiredSize - taken) {
                        getters[i] = _paneSize - (requiredSize - taken);
                        canInsert = true;
                        break;
                    }
					else if((paneCount==0)&&(availableSpace>=0)){
						  getters[i] = minSize;
                        taken += availableSpace;
						canInsert=true;
					}
                    else if (availableSpace > 0) {
                        getters[i] = minSize;
                        taken += availableSpace;
                    }
                }
                if (canInsert) break;
                else end = start, start = 0;
            }
            if (!canInsert) return "";
            for (var pos in getters)
                $(this.panes[pos])[this.containerCss](getters[pos]);
			if(paneCount<=0) paneDiv.append($(this.panes[index]));
			else{
            if (index == paneCount) {
                insert = "insertBefore", before = 1;
                paneDiv.insertAfter($(this.panes[index - 1]));
            }
            else {
                insert = "insertAfter", before = 0;
                paneDiv.insertBefore($(this.panes[index]));
            }
			 }
            this.model.properties.splice(index, 0, property);
			 if(paneCount==0)this.element.append(paneDiv[this.containerCss](totalSize));			
			 if(paneCount>0){
            this.panes.splice(index, 0, paneDiv);
            var splitBar = this._createSplitBar(index - before);
            splitBar[insert](paneDiv);
			 }
            paneDiv.append(content);
            this._updateModel();
            return paneDiv;
        },


        removeItem: function (index) {
            var paneCount = this.panes.length - 1;
            index = this._getNumber(index);
            if (ej.isNullOrUndefined(index)) index = paneCount;
            if (index < 0 || index > paneCount || paneCount < 0) return null;
            var targetPane, nextPane, splitbars, removedSize;
            targetPane = $(this.panes[index]);
            removedSize = targetPane[this.containerCss]() + this._bar;
            targetPane.remove();
            splitbars = this.element.children(".e-splitbar:not(.e-shadowbar)");
            if (index == paneCount) {
                nextPane = $(this.panes[index - 1]);
                $(splitbars[index - 1]).remove();
            }
            else {
                nextPane = $(this.panes[index + 1]);
                $(splitbars[index]).remove();
            }
            nextPane[this.containerCss](nextPane[this.containerCss]() + removedSize);
            this._removeArrays(index);
            this._updateModel();
        },
        _checkMinMaxSize: function (property) {
            if ((!ej.isNullOrUndefined(property.minSize))&&(property.paneSize < property.minSize))
                property.paneSize = property.minSize;
            if ((!ej.isNullOrUndefined(property.maxSize))&&(property.paneSize > property.maxSize))
                property.paneSize = property.maxSize;
            return property;
        },

        _removeArrays: function (index) {
            this.model.properties.splice(index, 1);
            this.panes.splice(index, 1);
            this.oldPaneSize.splice(index, 1);
            this.oldPanePercent.splice(index, 1);
            this._sizePercent.splice(index, 1);
        },

        _getNumber: function (value) {
            value = parseFloat(value);
            return isNaN(value) ? null : value;
        },

        _updateModel: function () {
            for (var i = 0; i < this.panes.length; i++)
                this.model.properties[i].paneSize = $(this.panes[i])[this.containerCss]();
            this._getPanesPercent();
        },

        _getPaneProperty: function (property) {
            var _default = { paneSize: 10, minSize: 10, maxSize: null, collapsible: true, resizable: true, expandable: true };
            return $.extend(_default, property);
        },

        _changeSkin: function (skin) {
            this.element.removeClass(this.model.cssClass).addClass(skin);
        },

        _windowResizing: function (boolean) {
            if (boolean) this._wireEvents(boolean);
            else this._unWireEvents();
        },

        _refreshSplitter:function(key,value){
            this._unWireEvents();
            this._refreshDestroy();
            this.model[key] = value;
            this._init();
        },

		_destroy: function() {
			this.element.removeClass("e-splitter");
			this._refreshDestroy();
			this._unWireEvents();
		},

        _refreshDestroy: function () {
            this.element.removeClass("e-widget e-box e-rtl" + this.model.cssClass + " e-" + this.model.orientation);
            this.element.children(".e-splitbar").remove();
            this.element.children(".e-pane").removeClass("e-pane e-" + this.model.orientation.substr(0, 1) + "-pane").height("").width("");
        },

        _initialize: function () {
            this.panes = [];
            this.oldPaneSize = [];
            this.oldPanePercent = [];
            this._initialPropertiesValue = [];
            this._updateHeightWidth = false;
            this.shadowBar = null;
            this._inMovement = false;
            this.containerCss = this.model.orientation == "horizontal" ? "width" : "height";
            this.displayCss = this.model.orientation == "horizontal" ? "left" : "top";
            this.borderCss = this.model.orientation == "horizontal" ? "right" : "bottom";
            this._bar = 9;      // For the center splitbar size
        },

        _render: function () {
            this.element.addClass("e-widget e-box " + this.model.cssClass + " e-" + this.model.orientation).attr("data-role", "splitter");
            var i, j, target = this.element[0];
            for (i = 0, j = 0; i < target.children.length; i++) {
                $(target.children[i]).addClass("e-pane");
                this.panes.push(target.children[i]);
            }
            this._setPanesProperty();
            this._insertSplitBar();
            this._setDimentions();
			if (!ej.isNullOrUndefined(this.model.expanderTemplate))
			    this.element.find(".e-splitter-" + this.model.orientation.substr(0, 1) +"-template").css("z-index",ej.getMaxZindex()+1);
            this._setPanesSize();
            this._getPanesPercent();
            this._addAttr(this.model.htmlAttributes);
            this._checkProperties();
            this.element.find(".e-pane").addClass("e-" + this.model.orientation.substr(0, 1) + "-pane");
			if(this.model.isResponsive){
				if (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0))
					this.element.css("height",this.model.height);
				if (isNaN(this.model.width) && (this.model.width.indexOf("%") > 0))
					this.element.css("width",this.model.width );
			}
        },
		_templateClick:function(event){
			var args = this.templateargs={
					cancel: false,
					targetElement: $(event.target),
					event: event.type,
					model: this.model,
					currentTarget: $(event.currentTarget)
				}
			this._trigger("clickOnExpander", args);
		},
		_templateIconPositioning:function(bool){
			var proxy = this;
			if(ej.browserInfo().name=="webkit" && bool){
		        proxy.element.find(".e-splitter-" + proxy.model.orientation.substr(0, 1) + "-template").css("display", "none")
		        setTimeout(function (e) {
		            proxy.element.find(".e-splitter-" + proxy.model.orientation.substr(0, 1) + "-template").css("display", "block");
		        }, proxy._isMouseMove ? 10 : proxy.model.animationSpeed);
		        proxy._isMouseMove = false;
		    }
		    if (!bool)
		        setTimeout(function (e) {
				proxy.element.find(".e-splitter-" + proxy.model.orientation.substr(0, 1) +"-template").css("display", "inline-block");
			}, 100);
		},
        _setPanesProperty: function () {
            for (var p = 0; p < this.panes.length; p++) {
                if (this.model.properties[p] != undefined) {
                    this.model.properties[p].paneSize = this.model.properties[p].paneSize == undefined ? "0px" : this.model.properties[p].paneSize;
                    this.model.properties[p].minSize = isNaN(parseFloat(this.model.properties[p].minSize)) ? 10 : parseFloat(this.model.properties[p].minSize);
                    this.model.properties[p].maxSize = isNaN(parseFloat(this.model.properties[p].maxSize)) ? null : parseFloat(this.model.properties[p].maxSize);
                    this.model.properties[p].collapsible = this.model.properties[p].collapsible != false ? true : false;
                    this.model.properties[p].resizable = this.model.properties[p].resizable != false ? true : false;
                    this.model.properties[p].expandable = this.model.properties[p].expandable != false ? true : false;
                }
                else this.model.properties.push({ paneSize: "0px", minSize: 10, maxSize: null, collapsible: true, resizable: true, expandable: true });
                this._initialPropertiesValue[p] = this.model.properties[p].paneSize;
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else proxy.element.attr(key, value)
            });
        },


        _insertSplitBar: function () {
            if (this.panes.length > 1) {
                var i, splitBar;
                for (i = 0; i < this.panes.length - 1; i++) {
                    splitBar = this._createSplitBar(i);
                    splitBar.insertAfter(this.panes[i]);
                }
            }
        },

        _createSplitBar: function (i) {
            var orient = this.model.orientation.substr(0, 1), arrow1, arrow2, arrow3, splitBar, accessible = false;
            splitBar = ej.buildTag("span.e-box e-splitbar e-split-divider e-" + orient + "-bar").attr("aria-expanded", true);
            ej.browserInfo().name == "msie" && splitBar.addClass("e-pinch");
			 if (!ej.isNullOrUndefined(this.model.expanderTemplate)) {
                var splitter = document.getElementsByClassName("e-split-divider")[0], splitterSpan = document.createElement("span");
                $(splitterSpan).append(this.model.expanderTemplate);
                $(splitterSpan).attr("class", "e-splitter-" + this.model.orientation.substr(0, 1) + "-template e-resize");
				$(splitterSpan).on( (ej.isTouchDevice())? 'tap' : 'click' , $.proxy(this._templateClick, this));
				splitBar.append(splitterSpan);
				this._templateIconPositioning(false);
            }
			else{
            arrow1 = ej.buildTag("span.e-icon e-collapse e-" + orient + "-arrow " + ((orient == "h") ? "e-arrow-sans-left" :"e-arrow-sans-up"));
            splitBar.append(arrow1);
            arrow3 = ej.buildTag("span.e-activebar e-" + orient + "-arrow ");
            splitBar.append(arrow3);
            arrow2 = ej.buildTag("span.e-icon e-expand e-" + orient + "-arrow " + ((orient == "h") ? "e-arrow-sans-right" :"e-arrow-sans-down"));
            splitBar.append(arrow2);
            accessible = true;
            this._on(arrow1, (ej.isDevice()) ? "tap" : "mouseup", this._collapseArrowClick);
			this._on(arrow2, (ej.isDevice()) ? "tap" : "mouseup", this._expandArrowClick);
            if (!this.model.properties[i].collapsible)
                arrow1.css("display", "none");
		   if(!this.model.properties[i].expandable)
			   arrow2.css("display", "none");
            if (this.model.properties[i + 1].collapsible)
                arrow2.css("display", "block");
		   }
            if (this.model.properties[i].resizable && this.model.properties[i + 1].resizable) {
                splitBar.addClass("e-resize").removeClass("e-icon-hide");
                accessible = true;
                this._on(splitBar, ej.eventType.mouseDown, this._mouseDownOnDivider);
                if (ej.isNullOrUndefined(this.model.expanderTemplate)) this._on(arrow3, ej.eventType.mouseDown, this._mouseDownOnDivider);
            }
            if (accessible) {
                splitBar.attr({ "role": "separator", "tabindex": "0" });
                this._on(splitBar, "focus focusout", this._focusOnDivider);
            }
            else splitBar.attr({ "role": "presentation" });
            return splitBar;
        },
        _getTemplatedString: function (list) {
            var str = this.model.expanderTemplate, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
            }
            return content;
        },
        _getPanesPercent: function () {
            this._sizePercent = [];
            var size = this.element[this.containerCss](), outerSize = size - ((this.panes.length - 1) * this._bar), i;
            for (i = 0; i < this.panes.length; i++) {
                if (!$(this.panes[i]).hasClass("collapsed"))
                    this.oldPaneSize[i] = $(this.panes[i])[this.containerCss]();
                this.oldPanePercent[i] = this._convertToPercent(outerSize, this.oldPaneSize[i]);
                this._sizePercent.push(this._convertToPercent(outerSize, $(this.panes[i])[this.containerCss]()));
            }
        },

        _setDimentions: function () {
			var parentObj = this._getParentObj(),_width = parseInt(this.model.width), _height = parseInt(this.model.height);
			if (isNaN(this.model.width) && (this.model.width.indexOf("%") > 0))
                _width = (this.model.isResponsive) ? this._convertToPixel(parentObj.innerWidth(), _width):this.model.width;
            if (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0))
                _height = (this.model.isResponsive) ? this._convertToPixel(parentObj.innerHeight(), _height):this.model.height;
            if (this.model.height)
                this.element.css("height",_height);
            if (this.model.width)
                this.element.css("width",_width );
        },

        _setHeightWidth: function () {
            this._updateHeightWidth = true;
   		    this._setDimentions();
            this._setPanesSize();
            this._getPanesPercent();
        },

         _getParentObj: function () {
            return this.element.parent();
        },
        _checkProperties: function () {
            if (this.model.enableRTL) this._rtl(this.model.enableRTL);
            this._prevSize = this.element[this.containerCss]();
        },
        _getExactInnerWidth: function () {
            var browser = ej.browserInfo(), exactInnerWidth;
            if (browser.name == "msie") {
                if (browser.version == 8 || browser.version == 9)
                    exactInnerWidth = $(this.element)[this.containerCss]();
                else
                    exactInnerWidth = parseFloat(window.getComputedStyle(this.element[0])[this.containerCss]);
            }
            else
                exactInnerWidth = parseFloat(window.getComputedStyle(this.element[0])[this.containerCss])
                                 - (parseFloat(this.element.css("border-" + this.displayCss + "-width")) +
                                     parseFloat(this.element.css("border-" + this.borderCss + "-width")) +
                                     parseFloat(this.element.css("padding-" + this.displayCss)) +
                                     parseFloat(this.element.css("padding-" + this.borderCss)));
            return exactInnerWidth;
        },

        _rtl: function (boolean) {
            if (boolean) this.element.addClass("e-rtl");
            else this.element.removeClass("e-rtl");
        },

        _setPanesSize: function () {
            var attr = this.containerCss,
            zeroPanes = 0,
            totalPaneSize = 0,
            totalSize = this.element[attr](),
            remainZero = false,
            bar = this._bar=($(this.element).find(">.e-splitbar").length>0)?parseFloat($(this.element).find(">.e-splitbar").css(attr)):this._bar,
            zerothPanes = [],
            panLength, j, paneCount = this.panes.length;

            if (paneCount > 1) {
                for (j = 0; j < paneCount ; j++) {
                    $(this.panes[j]).css(attr, (this._updateHeightWidth == true) ? this._initialPropertiesValue[j] : this.model.properties[j].paneSize);
                    this._updateHeightWidth = false;
                    bar = (j == paneCount - 1) ? 0 : bar;
                    panLength = parseFloat($(this.panes[j])[attr]());
                    if(!ej.isNullOrUndefined(this.model.properties[j].maxSize)) panLength = panLength > this.model.properties[j].maxSize ? this.model.properties[j].maxSize : panLength;
                    $(this.panes[j]).css(attr, panLength);
                    if (panLength <= 0) {
                        zeroPanes++;
                        zerothPanes.push(j);
                        totalPaneSize += bar;
                    }
                    else {
                        if (remainZero) {
                            $(this.panes[j]).css(attr, 0);
                            totalPaneSize += panLength + bar;
                            this.model.properties[j].paneSize = 0;
                        }
                        else {
                            totalPaneSize += panLength + bar;
                            if (totalPaneSize > totalSize) {
                                var currPane = totalPaneSize - totalSize + bar,
                                remainDivider = paneCount - j - 1;
                                currPane += remainDivider * bar;
                                $(this.panes[j]).css(attr, currPane);
                                remainZero = true;
                                totalPaneSize += currPane + bar;
                            }
                            this.model.properties[j].paneSize = panLength;
                        }
                    }
                }
            }
            else if (paneCount == 1) {
                $(this.panes[0]).css(attr, "100%");
                totalPaneSize = totalSize;
            }

            if (paneCount > 1 && totalPaneSize != totalSize) {
			     var remainingSize, lastPane = $(this.panes[paneCount - 1]);
                if (totalPaneSize > totalSize) {
                    remainingSize = totalPaneSize - totalSize;
                    lastPane.css(attr, remainingSize);
                }
                else if (totalPaneSize < totalSize) {
                    remainingSize = totalSize - totalPaneSize;
                    if (zeroPanes > 0) {
                        var z, avgWid = parseFloat(remainingSize / zeroPanes);
                        for (z = 0; z < zeroPanes ; z++) {
                            $(this.panes[zerothPanes[z]]).css(attr, avgWid);
                            this.model.properties[zerothPanes[z]].paneSize = avgWid;
                        }
                    }
                    else {
                        for(var i = paneCount; i > 0; i--){
                            if(ej.isNullOrUndefined(this.model.properties[i - 1].maxSize)){ lastPane = $(this.panes[i - 1]); break;	}
                        }
                        lastPane.css(attr, parseFloat(lastPane[attr]() + remainingSize));
                        this.model.properties[paneCount - 1].paneSize = lastPane[attr]();
                    }
                }
            }
            if (paneCount > 1) this._checkPaneSize();
        },

        _getUnit: function (str) {
            if (str == "px") return "px";
            else if (str == "pt") return "pt";
            else if (str.substr(1) == "%") return "%";
            else return "px";
        },

        _getNormalValue: function (position) {
            var currentLOB, currentLOBPercent, totalValue, currentValue;
            if (this.model.orientation == "vertical") {
                currentLOB = position.y - this.element.offset().top;
                currentLOBPercent = currentLOB / this.element.outerHeight();
                totalValue = this.element.height();
            }
            else {
                currentLOB = position.x - this.element.offset().left;
                currentLOBPercent = currentLOB / this.element.outerWidth();
                totalValue = this.element.width();
            }
            if (currentLOBPercent > 1) {
                currentLOBPercent = 1;
            }
            if (currentLOBPercent < 0) {
                currentLOBPercent = 0;
            }
            currentValue = currentLOBPercent * totalValue;
            return this._trimValue(currentValue);
        },

        _trimValue: function (value) {
            var step, stepModValue, correctedValue;
            step = 1;
            stepModValue = (value) % step;
            correctedValue = value - stepModValue;
            if (Math.abs(stepModValue) * 2 >= step)
                correctedValue += (stepModValue > 0) ? step : (-step);
            return parseFloat(correctedValue.toFixed(5));
        },

        _getSplitbarIndex: function () {
            return this.element.children(".e-splitbar:not(.e-shadowbar)").index(this.currentSplitBar);
        },

        _paneResize: function () {
            if (this.shadowBar == null) return false;
            this.currentSplitBar = this.shadowBar.next();
            var newPosition, prevPane, nextPane, prevPaneIndex, nextPaneIndex, index = this._getSplitbarIndex();
            prevPane = this.shadowBar.prev(), nextPane = this.currentSplitBar.next();
            prevPaneIndex = index, nextPaneIndex = index + 1;
            newPosition = this.shadowBar.offset()[this.displayCss];
            newPosition = newPosition - this.currentSplitBar.offset()[this.displayCss];
            $(prevPane).css(this.containerCss, newPosition + $(prevPane)[this.containerCss]() + "px");
            $(nextPane).css(this.containerCss, $(nextPane)[this.containerCss]() - newPosition + "px");
            this.oldPaneSize[prevPaneIndex] = $(prevPane)[this.containerCss]();
            this.oldPaneSize[nextPaneIndex] = $(nextPane)[this.containerCss]();
            this.shadowBar.remove();
            this._checkPaneSize();
            var prevObj = { item: prevPane, index: prevPaneIndex, size: this.oldPaneSize[prevPaneIndex] };
            var nextObj = { item: nextPane, index: nextPaneIndex, size: this.oldPaneSize[nextPaneIndex] };
            this._updateModelValue(prevObj, nextObj);
            this._trigger("resize", {
                prevPane: prevObj,
                nextPane: nextObj,
                splitbarIndex: index
            });
        },

        _checkPaneSize: function () {
            var total = 0, len, i, splitterLen, paneCount = this.panes.length;
            for (i = 0; i < paneCount; i++) {
                len = this.containerCss=='width' ? $(this.panes[i])['outerWidth']() :$(this.panes[i])['outerHeight']();
                total += len + this._bar;
            }
            total -= this._bar;
            splitterLen = this._getExactInnerWidth();
            if (total != splitterLen) {
                var remain = splitterLen - total;
                var last = $(this.panes[paneCount - 1])[this.containerCss]();
                if (last == 0) {
                    for (i = paneCount - 1; i >= 0; i--) {
                        if ($(this.panes[i]).hasClass("expanded") && !$(this.panes[i]).hasClass("collapsed")) {
                            last = $(this.panes[i])[this.containerCss]();
                            $(this.panes[i]).css(this.containerCss, parseFloat(last + remain));
                            break;
                        }
                    }
                }
                else
                    $(this.panes[paneCount - 1]).css(this.containerCss, parseFloat(last + remain));
            }
        },

        _maxminDraggableRange: function (shadowbarPos) {
            var prevPane, nextPane, prevPaneSize, nextPaneSize, splitbarPosition, prevPaneRange, nextPaneRange,
                prevPaneIndex, nextPaneIndex, PaneMax1, PaneMax2, PaneMin1, PaneMin2, index;
            prevPane = this.shadowBar.prev();
            this.currentSplitBar = this.shadowBar.next();
            nextPane = this.currentSplitBar.next();
            prevPaneSize = prevPane[this.containerCss]();
            nextPaneSize = nextPane[this.containerCss]();
            splitbarPosition = this.displayCss == "left" ? this.currentSplitBar[0].offsetLeft : this.currentSplitBar[0].offsetTop;
            prevPaneRange = splitbarPosition - prevPaneSize;
            nextPaneRange = nextPaneSize + splitbarPosition;
            index = this._getSplitbarIndex();
            prevPaneIndex = index;
            nextPaneIndex = index + 1;
            PaneMax1 = this.model.properties[prevPaneIndex].maxSize;
            PaneMax2 = this.model.properties[nextPaneIndex].maxSize;
            PaneMax1 = PaneMax1 != null ? parseInt(PaneMax1, 10) : null;
            PaneMax2 = PaneMax2 != null ? parseInt(PaneMax2, 10) : null;
            this.model.properties[prevPaneIndex].minSize = parseInt(this.model.properties[prevPaneIndex].minSize, 10);
            this.model.properties[nextPaneIndex].minSize = parseInt(this.model.properties[nextPaneIndex].minSize, 10);
            PaneMin1 = this.model.properties[prevPaneIndex].minSize;
            PaneMin2 = this.model.properties[nextPaneIndex].minSize;
            this.shadowBar.removeClass("e-end-indicaton");
            if (shadowbarPos > nextPaneRange - PaneMin2) {
                this.resizedPosition = nextPaneRange - PaneMin2;
                this.shadowBar.addClass("e-end-indicaton");
            }
            else if (shadowbarPos < prevPaneRange + PaneMin1) {
                this.resizedPosition = prevPaneRange + PaneMin1;
                this.shadowBar.addClass("e-end-indicaton");
            }
            if (PaneMax1 != null) {
                if (shadowbarPos > prevPaneRange + PaneMax1) {
                    this.resizedPosition = prevPaneRange + PaneMax1;
                    this.shadowBar.addClass("e-end-indicaton");
                }
            }
            else if (PaneMax2 != null) {
                if (shadowbarPos < nextPaneRange - PaneMax2) {
                    this.resizedPosition = nextPaneRange - PaneMax2;
                    this.shadowBar.addClass("e-end-indicaton");
                }
            }
        },

        _collapseArrowClick: function (event) {
            if (this.shadowBar != null) return;
            var $target = (!ej.isNullOrUndefined(event.target)) ? $(event.target): $(event.currentTarget);
            this._inMovement = true;
            this.currentSplitBar = $target.parent();
            var currBarNo, prevPane, nextPane, prevPaneIndex, nextPaneIndex, prevPaneSize, nextPaneSize, properties = {};
            var paneCount = this.panes.length;
            currBarNo = this._getSplitbarIndex();
            prevPane = this.currentSplitBar.prev();
            nextPane = this.currentSplitBar.next();
            prevPaneIndex = currBarNo;
            nextPaneIndex = currBarNo + 1;
            prevPaneSize = prevPane[this.containerCss]();
            nextPaneSize = nextPane[this.containerCss]();
            var proxy = this, collapsed, expanded;
            collapsed = { item: prevPane, index: prevPaneIndex, size: prevPaneSize };
            expanded = { item: nextPane, index: nextPaneIndex, size: nextPaneSize };
            if (this._raiseEvent("beforeExpandCollapse", collapsed, expanded, currBarNo, 'beforeCollapse'))
                return false;
            if (!nextPane.hasClass("collapsed")) {
                this.oldPaneSize[prevPaneIndex] = prevPaneSize;
                prevPane.addClass("collapsed");
                nextPane.addClass("expanded");
                this.currentSplitBar.attr("aria-expanded", false);
                $target.parent().removeClass("e-resize").addClass("e-icon-hide");
                if(ej.isNullOrUndefined(this.model.expanderTemplate)) $target.css("display", "none");
                if (!this.model.properties[nextPaneIndex].collapsible)
                     $($target.siblings()).not('.e-activebar').css("display", "block");
                if (prevPaneIndex != 0) {
                    var preBar = prevPane.prev();
                    preBar.find(".e-expand").css("display", "none");
                    if (!this.model.properties[prevPaneIndex - 1].collapsible && $(prevPane.prev().prev()[0]).hasClass("expanded"))
                        preBar.find(".e-collapse").css("display", "block");
                    preBar.removeClass("e-resize").addClass("e-icon-hide");
                }
                properties[this.containerCss] = 0;
                prevPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0);
                properties[this.containerCss] = prevPaneSize + nextPaneSize;
                nextPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0, function () {
                    proxy._raiseEvent("expandCollapse", collapsed, expanded, currBarNo, 'collapsed');
                });
            }
            else {
                if (prevPaneSize < this.oldPaneSize[nextPaneIndex]) {
                    $target.addClass("e-end-indicaton");
                    this._inMovement = false;
                    $(document).on("mouseup", $.proxy(this._mouseUpOnArrow, this));
                    return false;
                }
                else {
                    prevPane.removeClass("expanded");
                    nextPane.removeClass("collapsed");
                    $target.parent().addClass("e-resize").removeClass("e-icon-hide");
                    $($target.siblings()).not('.e-activebar').css("display", "block");
                    if (!this.model.properties[prevPaneIndex].collapsible)
                        $target.css("display", "none");
                    if (nextPaneIndex != paneCount - 1) {
                        var nextBar = nextPane.next();
                        if (!this.model.properties[nextPaneIndex + 1].collapsible)
                            nextBar.find(".e-expand").css("display", "none");
                        nextBar.find(".e-collapse").css("display", "block");
                        if (!nextBar.next().hasClass("collapsed")) {
                            nextBar.addClass("e-resize").removeClass("e-icon-hide");
                            nextBar.attr("aria-expanded", true);
                        }
                    }

                    properties[this.containerCss] = this.oldPaneSize[nextPaneIndex];
                    nextPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0);
                    properties[this.containerCss] = prevPaneSize - this.oldPaneSize[nextPaneIndex];
                    prevPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0, function () {
                        proxy._raiseEvent("expandCollapse", collapsed, expanded, currBarNo, 'collapsed');
                    });
                }
            }
        },

        _expandArrowClick: function (event) {
            if (this.shadowBar != null) return;
           var $target = (!ej.isNullOrUndefined(event.target)) ? $(event.target): $(event.currentTarget);
            this._inMovement = true;
            this.currentSplitBar = $target.parent();
            var currBarNo, prevPane, nextPane, prevPaneIndex, nextPaneIndex, prevPaneSize, nextPaneSize, properties = {};
            var paneCount = this.panes.length;
            currBarNo = this._getSplitbarIndex();
            prevPane = this.currentSplitBar.prev();
            nextPane = this.currentSplitBar.next();
            prevPaneIndex = currBarNo;
            nextPaneIndex = currBarNo + 1;
            prevPaneSize = prevPane[this.containerCss]();
            nextPaneSize = nextPane[this.containerCss]();
            var proxy = this, collapsed, expanded;
            collapsed = { item: nextPane, index: nextPaneIndex, size: nextPaneSize };
            expanded = { item: prevPane, index: prevPaneIndex, size: prevPaneSize };

            if (this._raiseEvent("beforeExpandCollapse", collapsed, expanded, currBarNo, 'beforeExpand'))
                return false;
            if (!prevPane.hasClass("collapsed")) {
                this.oldPaneSize[nextPaneIndex] = nextPaneSize;
                prevPane.addClass("expanded");
                nextPane.addClass("collapsed");
                $target.parent().removeClass("e-resize").addClass("e-icon-hide");
                if(ej.isNullOrUndefined(this.model.expanderTemplate)) $target.css("display", "none");
                if (!this.model.properties[prevPaneIndex].collapsible)
                      $($target.siblings()).not('.e-activebar').css("display", "block");
                if (nextPaneIndex != paneCount - 1) {
                    var nextBar = nextPane.next();
                    nextBar.find(".e-collapse").css("display", "none");
                    if (!this.model.properties[nextPaneIndex + 1].collapsible && $(nextPane.next().next()[0]).hasClass("collapsed"))
                        nextBar.find(".e-expand").css("display", "block");
                    nextBar.removeClass("e-resize").addClass("e-icon-hide");
                    nextBar.attr("aria-expanded", false);
                }
                properties[this.containerCss] = prevPaneSize + nextPaneSize;
                prevPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0);
                properties[this.containerCss] = 0;
                nextPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0, function () {
                    proxy._raiseEvent("expandCollapse", collapsed, expanded, currBarNo, 'expanded');
                });
            }
            else {
                if (nextPaneSize < this.oldPaneSize[prevPaneIndex]) {
                    $target.addClass("e-end-indicaton");
                    this._inMovement = false;
                    $(document).on("mouseup", $.proxy(this._mouseUpOnArrow, this));
                    return false;
                }
                else {
                    prevPane.removeClass("collapsed");
                    nextPane.removeClass("expanded");
                    this.currentSplitBar.attr("aria-expanded", true);
                    $target.parent().addClass("e-resize").removeClass("e-icon-hide");
                      $($target.siblings()).not('.e-activebar').css("display", "block");
                    if (!this.model.properties[nextPaneIndex].collapsible)
                        $target.css("display", "none");
                    if (prevPaneIndex != 0) {
                        var preBar = prevPane.prev();
                        if (!this.model.properties[currBarNo - 1].collapsible)
                            preBar.find(".e-collapse").css("display", "none");
                        preBar.find(".e-expand").css("display", "block");
                        if (!preBar.prev().hasClass("collapsed")) preBar.addClass("e-resize").removeClass("e-icon-hide");
                    }

                    properties[this.containerCss] = this.oldPaneSize[prevPaneIndex];
                    prevPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0);
                    properties[this.containerCss] = nextPaneSize - this.oldPaneSize[prevPaneIndex];
                    nextPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0, function () {
                        proxy._raiseEvent("expandCollapse", collapsed, expanded, currBarNo, 'expanded');
                    });
                }
            }
        },

        _raiseEvent: function (evtName, collapsed, expanded, index, type) {
            if (evtName == "expandCollapse") {
                this._inMovement = false;
                this._updateModelValue(collapsed, expanded);
            }
            return this._trigger(evtName, {
                collapsed: collapsed,
                expanded: expanded,
                splitbarIndex: index,
				action: type
            });

        },

        _updateModelValue: function (collapsed, expanded) {
            this.model.properties[collapsed.index].paneSize = collapsed.item[this.containerCss]();
            this.model.properties[expanded.index].paneSize = expanded.item[this.containerCss]();
            this._getPanesPercent();
        },

        _mouseUpOnArrow: function (event) {
            this.element.find(".e-end-indicaton").removeClass("e-end-indicaton");
            $(document).off("mouseup", $.proxy(this._mouseUpOnArrow, this));
        },

        _keydownOnDivider: function (e) {
            var key = e.keyCode;
            if (key == 37 || key == 38 || key == 39 || key == 40) {
                e.preventDefault();
                var oriTarget = $(e.data.target);
                if (e.ctrlKey) {
                    if (this.shadowBar == null) {
                        this.currentSplitBar = oriTarget;
                        var index = this._getSplitbarIndex();
                        if (this.model.orientation == "vertical") {
                            if (e.keyCode == 38) this.collapse(index);
                            else if (e.keyCode == 40) this.expand(index);
                        }
                        else {
                            if (e.keyCode == 37) this.collapse(index);
                            else if (e.keyCode == 39) this.expand(index);
                        }
                    }
                }
                else if (oriTarget.hasClass("e-resize")) {
                    var target = (this.shadowBar != null) ? this.shadowBar : oriTarget;
                    var offset = target.offset(), location = { pageX: offset.left, pageY: offset.top };
                    $.extend(true, e, location);
                    if ((this.model.orientation == "vertical" && (e.keyCode == 38 || e.keyCode == 40)) ||
                        (this.model.orientation == "horizontal" && (e.keyCode == 37 || e.keyCode == 39))) {
                        if (e.keyCode == 38) e.pageY -= 5;
                        else if (e.keyCode == 40) e.pageY += 5;
                        else if (e.keyCode == 37) e.pageX -= 5;
                        else if (e.keyCode == 39) e.pageX += 5;
                        this._mouseMoveOnDivider(e);
                    }
                }
            }
            else if (key == 13) {
                e.preventDefault();
                this._mouseUpOnDivider();
            }
            else if (key == 27) {
                e.preventDefault();
                if (this.shadowBar != null) this.shadowBar.remove();
                this.shadowBar = null;
                this._mouseUpOnDivider();
                this.element.children(".e-splitbar.e-hover").focusout();
            }
        },

        _focusOnDivider: function (e) {
            if (e.type == "focus") {
                if (!$(e.target).hasClass("e-hover")) {
                    $(e.target).addClass("e-hover");
                    if (this.model.allowKeyboardNavigation)
                        $(document).on("keydown", { target: e.target }, $.proxy(this._keydownOnDivider, this));
                }
            }
            else {
                this.element.children(".e-splitbar.e-hover").removeClass("e-hover");
                this._mouseUpOnDivider();
                $(document).off("keydown", $.proxy(this._keydownOnDivider, this));
            }
        },

        _mouseDownOnDivider: function (event) {
            event.preventDefault();
            var $target;
            ($(event.target).hasClass("e-activebar")) ? $target=$(event.target.parentElement) : (!ej.isNullOrUndefined(this.model.expanderTemplate) && $(event.target).parents(".e-splitbar").length>0) ? $target = $(event.target).parents(".e-splitbar") : $target=$(event.target);
            if ($target.hasClass("e-splitbar") && $target.hasClass("e-resize")) {
                this._overlayElement = ej.buildTag('div.e-pane-overlay');
                if (!$target.hasClass("e-hover")) $target.focus();
                this.element.find(".e-pane").not(".e-splitter").append(this._overlayElement);
                $(document).on(ej.eventType.mouseMove, { target: ($(event.target).hasClass("e-activebar")) ? event.target.parentElement : event.target }, $.proxy(this._mouseMoveOnDivider, this));
                $(document).on(ej.eventType.mouseUp, $.proxy(this._mouseUpOnDivider, this));
                $(document).on("mouseleave", $.proxy(this._mouseUpOnDivider, this));
            }
            else if ($target.hasClass("e-expand") || $target.hasClass("e-collapse")) {
                $target.parent().focus();
            }
        },

        _mouseMoveOnDivider: function (event) {
            var _data = event.data;
            event = event.type == "touchmove" ? event.originalEvent.changedTouches[0] : event;
            this._isMouseMove = true;
            var position = { x: event.pageX, y: event.pageY };
            this.resizedPosition = this._getNormalValue(position);
            if (this.shadowBar == null) {
                var target;
                ($(_data.target).hasClass('e-activebar')) ? target=$(_data.target.parentElement) : (!ej.isNullOrUndefined(this.model.expanderTemplate) && $(event.target).parents(".e-splitbar").length>0) ? target = $(_data.target).parents(".e-splitbar") : target=$(_data.target);
                this.shadowBar = target.clone().addClass("e-shadowbar").removeClass("e-hover").removeClass("e-split-divider").insertBefore(target);
                this.shadowBar.children().remove();
            }
            this._maxminDraggableRange(this.resizedPosition);
            this.shadowBar.css(this.displayCss, this.resizedPosition);
        },

        _mouseUpOnDivider: function (event) {
            this._paneResize();
			if(!ej.isNullOrUndefined(this.model.expanderTemplate)) this._templateIconPositioning(true);
            this.element.find(".e-pane").not(".e-splitter").find(".e-pane-overlay").remove();
            $(document).off(ej.eventType.mouseMove, $.proxy(this._mouseMoveOnDivider, this));
            $(document).off(ej.eventType.mouseUp, $.proxy(this._mouseUpOnDivider, this));
            $(document).off("mouseleave", $.proxy(this._mouseUpOnDivider, this));
            // sets shadowBar null after removing shadowBar element
            this.shadowBar = null;
        },

        _windowResized: function (event) {
            var size = this._getExactInnerWidth();
            if (this._prevSize == size) return false;
            var paneCount = this.panes.length, outerSize = size - ((paneCount - 1) * this._bar), i, val;
            this._prevSize = size;
            for (i = 0; i < paneCount; i++) {
                val = this._convertToPixel(outerSize, this._sizePercent[i]);
                $(this.panes[i]).css(this.containerCss, val + "px");
            }
            for (i = 0; i < this.oldPaneSize.length; i++)
                this.oldPaneSize[i] = this._convertToPixel(outerSize, this.oldPanePercent[i]);
            var last = $(this.panes[this.panes.length - 1])[this.containerCss]();
            if (last == 0) {
                this._checkPaneSize();
            }
        },

        _convertToPercent: function (outer, pane) {
            return (pane * 100) / outer;
        },
        _convertToPixel: function (tot, percent) {
            return parseFloat((tot * percent) / 100);
        },

        _wireEvents: function (boolean) {
            if (boolean) $(window).on('resize', $.proxy(this._windowResized, this));
        },

        _unWireEvents: function () {
            $(window).off('resize', $.proxy(this._windowResized, this));
        }
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Waiting pop elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejWaitingPopup", "ej.WaitingPopup", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        _requiresID: true,
        _rootCSS: "e-waitingpopup",


        defaults: {

            showOnInit: false,

            target: null,

            appendTo: null,

            showImage: true,

            htmlAttributes: {},

            cssClass: "",

            text: null,

            template: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            showOnInit: "boolean",
            showImage: "boolean",
            cssClass: "string"
        },
		_isTargetVisible: function(){
			return this.element.css('display') != 'none';
		},
        show: function () {
			if(this._isTargetVisible()){
				this._refreshPanel();
				this.maindiv.css("display", "block");
				this.model.showOnInit = true;
			}
        },

        hide: function () {
			this.maindiv.css("display", "none");
			this.model.showOnInit = false;
        },

        refresh: function () {
            if(this._isTargetVisible())
				this._refreshPanel();
        },

        _setText: function (text) {
            if (text) {
                if (this.popupText) this.popupText.html(text);
                else {
                    this._generateTextTag(text);
                    this._setContentPosition();
                }
            }
            else if (this.popupText) {
                this.popupText.remove();
                this.popupText = null;
            }
        },

        _showImage: function (boolean) {
            if (boolean) {
                this.popupImage = ej.buildTag("span.e-image");
                if (this.popupText) this.popupImage.insertBefore(this.popupText);
                else this.maindiv.append(this.popupImage);
            }
            else if (this.popupImage) {
                this.popupImage.remove();
                this.popupImage = null;
            }
        },

        _setTemplate: function () {
            var template = this.model.template;
            if (typeof template === "string") template = $(template);
            if (typeof template === "object" && typeof template.css === "function")
                this.templateObj = template;
            else
                this.templateObj = ej.buildTag("div", "", { "text-align": "center" }).append(template);

            this.templateObj.css({ "visibility": "visible", "display": "block" });
            this.maindiv.append(this.templateObj);
        },

        _setTheme: function (skin) {
            this.maindiv.removeClass(this.model.cssClass).addClass(skin);
        },



        _init: function () {
			this._initialize();
			this._render();
			this._wireEvents();
        },

        _wireEvents: function () {
            $(window).on('resize', $.proxy(this._resizeHandler, this));
        },
        _unwireEvents: function () {
            $(window).off("resize", $.proxy(this._resizeHandler, this));
        },

        _resizeHandler: function () {
            this.refresh();
         },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "text": this._setText(options[option]); break;
                    case "cssClass": this._setTheme(options[option]); break;
                    case "htmlAttributes ": this._addAttr(options[option]); break;
                    case "showOnInit": this._setVisibility(options[option]); break;
                    case "showImage": this._showImage(options[option]); this._setContentPosition(); break;
                    case "target": this.model.target = options[option]; this._setTarget(); this.refresh(); break;
                    case "appendTo": this.model.appendTo = options[option]; this._setTarget();
                        if (!ej.isNullOrUndefined(this.model.appendTo) && this.model.appendTo != "document" && this.model.appendTo != "window")
                            this.maindiv.appendTo($(this.model.appendTo));
                        else
                            $('body').append(this.maindiv);
                        this.refresh(); break;
                    case "template":
                        this.maindiv.empty();
                        if (options[option]) {
                            this.model.template = options[option];
                            this._setTemplate();
                        }
                        else {
                            this.model.template = options[option] = null;
                            this._showImage(this.model.showImage);
                            if (this.model.text) this._generateTextTag(this.model.text);
                        }
                        this._setContentPosition();
                        break;
                }
            }
        },
        _setTarget: function () {
            if (this.model.target == "document") 
                this.targetElement = $(document);
            else if (this.model.target == "window")
                this.targetElement = $(window);
            else
                this.targetElement = this.model.target ? $(this.model.target) : this.element;
        },
        _destroy: function () {
            this.maindiv.remove();
			this._unwireEvents();
        },

        _initialize: function () {
            this.maindiv = null;
            this.popupText = null;
            this.popupImage = null;
            this.templateObj = null;
            this.targetElement = null;
        },


        _render: function () {
            this._setTarget();
            var oldWrapper = $("#" + this.element[0].id + "_WaitingPopup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.maindiv = ej.buildTag("div.e-waitpopup-pane e-widget " + this.model.cssClass + "#" + this.element[0].id + "_WaitingPopup");
            if (this.model.template) {
                this._setTemplate();
            }
            else {
                this._showImage(this.model.showImage);
                if (this.model.text) {
                    this._generateTextTag(this.model.text);
                }
            }
            if (!ej.isNullOrUndefined(this.model.appendTo) && this.model.appendTo != "document" && this.model.appendTo != "window")
                this.maindiv.appendTo($(this.model.appendTo));
            else
                $('body').append(this.maindiv);
            this._setVisibility(this.model.showOnInit);
            this._addAttr(this.model.htmlAttributes);
        },

        _refreshPanel: function () {
            this.maindiv.width(this.targetElement.outerWidth());
            this.maindiv.height(this.targetElement.outerHeight());
            this._setPanelPosition();
            this._setContentPosition();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.maindiv.addClass(value);
                else proxy.maindiv.attr(key, value)
            });
        },

        _setPanelPosition: function () {			 
            var location = ej.util.getOffset(this.targetElement);
			if(this.model.appendTo != null && $(this.model.appendTo).length >0) {				
				if ((this.targetElement.css("position") == "relative" || this.targetElement.css("position") == "absolute") && this.targetElement[0] === $(this.model.appendTo)[0] ) {					
					location = {left:0, top:0};														
				}
				else{
					location.left -= this.targetElement.offsetParent().offset().left;
					location.top -= this.targetElement.offsetParent().offset().top;
				}
			}
            this.maindiv.css({
                "position": "absolute",
                "left": Math.ceil(location.left) + "px",
                "top": Math.ceil(location.top) + "px",
                "z-index": this._maxZindex() + 1
            });
        },

        _setContentPosition: function () {
            if (this.model.template == null) {
                var textHeight = 0, imgHeight = 0, targetHeight, top = null;
                targetHeight = this.targetElement.outerHeight();
                if (this.popupText) textHeight = this.popupText.outerHeight();
                if (this.popupImage) imgHeight = this.popupImage.outerHeight();

                if (this.popupImage) {
                    top = Math.ceil((targetHeight - (imgHeight + textHeight)) / 2);
                    this.popupImage.css("top", top + "px");
                }
                if (this.popupText) {
                    if (!top) top = Math.ceil((targetHeight - textHeight) / 2);
                    this.popupText.css("top", top + "px");
                }
            }
            else {
                this.templateObj.css({
                    "position": "relative",
                    "left": Math.ceil((this.targetElement.outerWidth() - this.templateObj.outerWidth()) / 2),
                    "top": Math.ceil((this.targetElement.outerHeight() - this.templateObj.outerHeight()) / 2)
                });
            }
        },

        _generateTextTag: function (text) {
            this.popupText = ej.buildTag("div.e-text", text);
            this.maindiv.append(this.popupText);
        },

        _setVisibility: function (showOnInit) {
            if (showOnInit && this._isTargetVisible()) this.show();
            else this.hide();
        },

        _maxZindex: function () {
            return ej.util.getZindexPartial(this.element);
        }
    });
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Radiobutton elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejRadioButton", "ej.RadioButton", {
        _rootCSS: "e-radiobtn",

        element: null,
        _requiresID: true,
        model: null,
        validTags: ["input"],
        _addToPersist: ["checked"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },

        defaults: {

            id: null,

            name: null,

            value: null,

            checked: false,

            cssClass: "",

            text: "",

            enableRTL: false,

            htmlAttributes: {},

            enablePersistence: false,

            idPrefix: "ej",

            size: "small",

            enabled: true,

            validationRules: null,

            validationMessage: null,
            validationMessages: null,

            beforeChange: null,

            change: null,

            create: null,

            destroy: null
        },


        dataTypes: {
            id: "string",
            name: "string",
            enablePersistence: "boolean",
            size: "enum",
            enabled: "boolean",
            idPrefix: "string",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data"
        },

        observables: ["checked"],
        checked: ej.util.valueFunction("checked"),

        _init: function (options) {
            var browserInfo = ej.browserInfo();
            this._cloneElement = this.element.clone();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            this._setValue();
            this._renderControl();
            if (this.isChecked)
                this._checkedHandler();
            if (!ej.isNullOrUndefined(this.radbtn.attr("disabled"))) this.model.enabled = false;
            this._setEnabled(this.model.enabled);
            this._addAttr(this.model.htmlAttributes);
            if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
                this.model.validationMessages = this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            this._wireEvents();
            this.initialRender = false;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.div.addClass(value);
                else if (key == "name") proxy.radbtn.attr(key, value);
                else if (key == "required") proxy.radbtn.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else if (key == "checked" && value == "checked") proxy._checkedChange(true, true);
                else proxy.div.attr(key, value);
            });
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            this.element.find("input").rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.find('input').attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },


        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        if (this.model.text)
                            (options[prop]) ? this.div.addClass("e-rtl") : this.div.removeClass("e-rtl") && this.element.closest('.e-radiobtn-wrap').hasClass('e-rtl') ? this.element.closest('.e-radiobtn-wrap').removeClass('e-rtl') : "";
                        else 
                            (options[prop]) ? this.element.closest('.e-radiobtn-wrap').addClass('e-rtl') : this.element.closest('.e-radiobtn-wrap').removeClass('e-rtl');
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.find('input').rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[prop];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessages = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "checked":
                        $(this.div).removeClass("e-material-animate");
                        if (typeof this.checked() == "boolean") {
                            this.model.checked = options[prop];
                            this._checkedChange(this.model.checked);
                        }
                        else if (options[prop]() != null) {
                            if (options[prop]() == this.element.find(".e-input").attr("value"))
                                this._checkedChange(options[prop]());
                        }
                        break;
                    case "enabled": this._setEnabled(options[prop]); break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.radbtn.attr('name', options[prop]); break;
                    case "value":
                        this.radbtn.attr("value", options[prop]);
                        break;
                    case "htmlAttributes": this._addAttr(options[prop]); break;
                }
            }
        },

        _destroy: function () {
            this.radbtn.remove();
            this._cloneElement.removeClass("e-js e-input e-radiobtn");
            this._cloneElement.insertBefore(this.element)
            this.element.remove();
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass).addClass(skin);
                this.div.removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setValue: function () {
            if (ej.isNullOrUndefined(this.element.attr("type")))
                this.element.attr("type", "radio");
            if (!ej.isNullOrUndefined(this.element.attr("id")))
                this.model.id = this.element.attr("id");
            if (!ej.isNullOrUndefined(this.element.attr("name")))
                this.model.name = this.element.attr("name");
            if (!ej.isNullOrUndefined(this.element.attr("value")))
                this.model.value = (this.element.attr("value"));
            this.element.attr({ "id": this.model.id, "name": this.model.name, "value": this.model.value });
            if (typeof this.checked() == "boolean")
                this.model.checked = this.isChecked = this.model.checked || this.element.attr('checked') == "checked"
            else
                this.isChecked = this.element.attr("value") == this.checked();
            if (this.isChecked) this.element.attr('checked', 'checked');
            this._hiddenValue = this.element.attr("value");
            this._isUI = false;
        },

        _setIdAttr: function (val) {
            $("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            $("#" + this.model.idPrefix + this.model.id).attr('id', this.model.idPrefix + val);
            this.radbtn.attr('id', val);
        },

        _setSize: function (val) {
            if (val == ej.RadioButtonSize.Medium) {
                this.span.removeClass('e-radsmaller').addClass('e-radmedium');
                this.div.removeClass('e-radsmall').addClass('e-radmed');
            }
            else {
                this.span.removeClass('e-radmedium').addClass('e-radsmaller');
                this.div.removeClass('e-radmed').addClass('e-radsmall');
            }
        },

        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },

        _renderControl: function () {
            this.initialRender = true;
            var browserInfo = ej.browserInfo();
            if (browserInfo.name == 'msie' && browserInfo.version == '8.0')
                this.div = $('<div class="e-radiobtn-wrap e-widget e-rad-outer e-ie8" ></div>');
            else
                this.div = $('<div class="e-radiobtn-wrap e-widget" ></div>');
            this.div.attr({ 'id': this.model.idPrefix + this.model.id, "role": "radio", "tabindex": 0, "aria-checked": false });
            this.span = $('<span></span>');
            this.span.addClass("e-spanicon");
            this._setSize(this.model.size);
            this.spanImg = $('<span class="e-rad-icon e-icon e-rad-select"></span>', "", {}, { "role": "presentation" });
            this.element.addClass("e-input");
            this.div.addClass(this.model.cssClass);
            this.span.append(this.spanImg);
            this.div.insertBefore(this.element);
            this.div.append(this.element);
            this.div.append(this.span);
            this._setTextWrapper(this.model.text);
            this.radbtn = this.element;
            this.element = this.div;
        },

        _setTextWrapper: function (val) {
            if (val != "") {
                this.txtSpan = ej.buildTag("div.e-text", val);
                this.div.append(this.txtSpan);
                if (this.model.enableRTL)
                    this.div.addClass("e-rtl");
            } else if (this.model.enableRTL)
                this.element.closest('.e-radiobtn-wrap').addClass('e-rtl');
        },

        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },

        _wireEvents: function () {
            this._on(this.element, "click", function (e) {
                this._isUI = true;
                this._checkedHandler(e);
            });
            this._on(this.element, "focus", this._focusIn);
            this._on(this.element, "focusout", this._focusOut);
        },
        _focusIn: function (evt) {
            $(this.element).addClass("e-focus");
            $(this.element).on("keydown", $.proxy(this._checkUnCheck, this));
        },
        _focusOut: function (evt) {
            $(this.element).removeClass("e-focus");
            $(this.element).off("keydown", $.proxy(this._checkUnCheck, this));
        },

        _checkUnCheck: function (evt) {
            //Space bar,and arrow keys to check and uncheck
            if (evt.keyCode == 32 || evt.keyCode == 37 || evt.keyCode == 38 || evt.keyCode == 39 || evt.keyCode == 40) {
                evt.preventDefault();
                this._checkedHandler();
            }
        },

        _checkedHandler: function (evt) {
            if (evt) this._interacted = true;
            if (!this.element.hasClass('e-disable')) {
                if (typeof this.checked() == "boolean")
                    this.isChecked = this.radbtn.attr('checked') == 'checked' ? true : false;
                else
                    this.isChecked = this.checked() == this.radbtn.attr('value');
                if (!$(this.element).find(".e-rad-icon").hasClass("e-circle_01")) this._changeEvent(true);
                if (evt) $(this.div).addClass("e-material-animate");
            }
        },

        _checkedChange: function (val, interaction) {
            this.isChecked = val;
            this._changeEvent(interaction);
        },

        _changeEvent: function (interaction) {
            var data = { isChecked: this.isChecked, isInteraction: !!interaction };
            if (!this.initialRender) {
                if (true == this._trigger("beforeChange", data))
                    return false;
            }

            if (!$(this.element).find(".e-rad-icon").hasClass("e-circle_01")) {
                var curname = this.element.find(".e-input").attr('name'),
                input = $('input.e-radiobtn[name="' + curname + '"]:radio'),
                proxy = this,
                currElement = this.element.find('.e-input'),
                currObj = $(currElement).data("ejRadioButton");
                if (data.isChecked) {
                    this.spanImg.addClass("e-circle_01").removeClass('e-rad-select');
                    this.span.addClass("e-rad-active");
                    this.div.attr({ "tabindex": 0, "aria-checked": true });
                    this.radbtn.attr("checked", "checked");
                }
                $.each(input, function (i, obj) {
                    if (proxy._interacted && $($(obj).closest(".e-widget")).find("span.e-spanicon").hasClass("e-rad-active")) $(obj).closest(".e-radiobtn-wrap").addClass("e-material-animate");
                    $(obj).closest(".e-radiobtn-wrap").find(".e-rad-icon").removeClass("e-circle_01").addClass("e-rad-select");
                    $(obj).closest(".e-radiobtn-wrap").find(".e-spanicon").removeClass("e-rad-active");
                    $(obj).closest(".e-radiobtn-wrap").attr({ "tabindex": 0, "aria-checked": false });
                    var prevObj = $(obj).data("ejRadioButton");
                    if (!ej.isNullOrUndefined(prevObj) && prevObj.checked() != null && typeof prevObj.checked() == "boolean") {
                        prevObj.model.checked = false;
						prevObj.isChecked = false;
                        prevObj.radbtn.removeAttr("checked");
                    }
                });
                if (currObj != null && currObj.checked() != null && typeof currObj.checked() == "boolean")
                    currObj.model.checked = true;
                else
                    currObj.checked(currObj.radbtn.attr("value"));
                this.element.find(".e-rad-icon").addClass("e-circle_01").removeClass("e-rad-select");
                this.span.addClass("e-rad-active");
                this.div.attr({ "tabindex": 0, "aria-checked": true });
                if (this._isUI) this.element.find(".e-input").click();
                this.isChecked = true;
                (this.isChecked == true) ? this.radbtn.attr("checked", "checked") : this.radbtn.removeAttr("checked");
            }
            else {
                this.spanImg.removeClass("e-circle_01").addClass('e-rad-select');
                this.span.removeClass("e-rad-active");
                this.div.attr({ "tabindex": 0, "aria-checked": false });
                this.radbtn.removeAttr("checked");
            }

            var data = { isChecked: this.isChecked, isInteraction: !!interaction };
            if (!this.initialRender)
                this._trigger("change", data);
            if (interaction) this._trigger("_change", { value: this._hiddenValue });
        },

        disable: function () {
            if (!this.element.hasClass("e-disable")) {
                this.element.addClass("e-disable");
                this.radbtn.attr("disabled", "disabled");
            }
            if (this._isIE8) this.span.addClass("e-disable");
            this.div.attr("aria-disabled", true);
            this.model.enabled = false;
        },

        enable: function () {
            if (this.element.hasClass("e-disable")) {
                this.element.removeClass("e-disable");
                this.radbtn.prop("disabled", false);
            }
            if (this._isIE8) this.span.removeClass("e-disable");
            this.div.attr("aria-disabled", false);
            this.model.enabled = true;
        }
    });

    ej.RadioButtonSize = {
        /**  Creates radio button with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates radio button with inbuilt medium size height, width specified */
        Medium: "medium"
    };
})(jQuery, Syncfusion);
;
/**
* @fileOverview Plugin provides support to display calendar within your web page and allows to pick the date.
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDatePicker", "ej.DatePicker", {

        element: null,
        _rootCss: "e-datepicker",

        model: null,
        validTags: ["input", "div", "span"],
        _setFirst: false,
        _addToPersist: ["value"],
        _cancelValue: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },


        defaults: {

            dayHeaderFormat: "min",

            showPopupButton: true,

            enableAnimation: true,

            showFooter: true,

            displayInline: false,

            htmlAttributes: {},

            dateFormat: '',

            watermarkText: "Select date",

            value: null,
            minDate: new Date("01/01/1900"),

            maxDate: new Date("12/31/2099"),

            startLevel: "month",

            depthLevel: "",

            cssClass: "",

            startDay: -1,

            stepMonths: 1,

            locale: "en-US",

            showOtherMonths: true,

            enableStrictMode: false,

            enablePersistence: false,

            enabled: true,

            width: "",

            height: "",

            enableRTL: false,

            showRoundedCorner: false,

            headerFormat: 'MMMM yyyy',

            buttonText: 'Today',

            readOnly: false,

            specialDates: null,

            fields: {

                date: "date",

                tooltip: "tooltip",

                iconClass: "iconClass",

                cssClass: "cssClass"
            },

            showTooltip: true,

            showDisabledRange: true,

            highlightSection: "none",

            highlightWeekend: false,

            validationRules: null,

            validationMessage: null,
            validationMessages: null,

            allowEdit: true,

            tooltipFormat: "ddd MMM dd yyyy",

            allowDrillDown: true,

            blackoutDates: [],

            beforeDateCreate: null,

            open: null,

            close: null,

            select: null,

            change: null,

            focusIn: null,

            focusOut: null,

            beforeOpen: null,

            beforeClose: null,

            navigate: null,

            create: null,

            destroy: null,

            weekNumber: false,

            timeZone: true

        },


        dataTypes: {
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            displayInline: "boolean",
            showPopupButton: "boolean",
            locale: "string",
            readOnly: "boolean",
            cssClass: "string",
            dateFormat: "string",
            watermarkText: "string",
            headerFormat: "string",
            buttonText: "string",
            specialDates: "data",
            showTooltip: "boolean",
            highlightSection: "enum",
            highlightWeekend: "boolean",
            enableAnimation: "boolean",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data",
            tooltipFormat: "string",
            allowEdit: "boolean",
            allowDrillDown: "boolean",
            weekNumber: "boolean"

        },

        _renderPopup: function () {
            this.sfCalendar = ej.buildTag('div.e-datepicker e-popup e-widget ' + this.model.cssClass + ' e-calendar ' + (this.model.specialDates ? (this.model.specialDates[0][this._mapField._icon] ? 'e-icons ' : '') : ''), "", {}, { id: (this._id ? 'e-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                     .insertBefore(this.element);
            if (this.model.displayInline && !this.element.is("input"))
                this.sfCalendar.addClass('e-inline');
            this.popup = this.sfCalendar;
            if (!ej.isTouchDevice()) this.sfCalendar.addClass('e-ntouch');
            this._setRestrictDateState(this.model.showDisabledRange);
            this._createCalender();
            this._setDisplayInline(this.model.displayInline);
            this._resizeCalender();
            this._setRTL(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
            this._wireCalendarEvents();
        },

        _setModel: function (jsondata) {
            
            var callRefresh = false, start = false, validate = false;
            for (var key in jsondata) {
				if(key != "showPopupButton" && key != "width" && key != "dateFormat" && key != "height" && key != "readOnly" && key != "allowEdit" && key != "enabled" && key != "watermarkText" && key != "htmlAttributes" && key != "validationMessages" && key != "validationRules"){
					if (ej.isNullOrUndefined(this.sfCalendar)) this._renderPopup();
				}
                switch (key) {
                    case "dayHeaderFormat":
                        this.model.dayHeaderFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "weekNumber":
                        this.model.weekNumber = jsondata[key];
                        this._refreshDatepicker();
                        break;
                    case "showPopupButton":
                        this._renderDateIcon(jsondata[key], true);
                        break;
                    case "displayInline":
                        if (!jsondata[key]) this._bindDateButton();
                        this._setDisplayInline(jsondata[key]);
                        if (!this.model.allowEdit && !jsondata[key] && this._isInputBox)
                            this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
                        break;
                    case "value":
                        if (ej.isPlainObject(jsondata[key])) jsondata[key] = null;
                        if (ej.isNullOrUndefined(jsondata["minDate"]) && ej.isNullOrUndefined(jsondata["maxDate"])) {
                            this._setDateValue(jsondata[key]);
                            if (this._specificFormat())
                                this._stopRefresh = true;
                            jsondata[key] = this.model.value;
                        }
                        else
                            this._updateDateValue(jsondata[key]);
                        validate = callRefresh = start = true;
                        break;
                    case "specialDates":
                        this.model.specialDates = jsondata[key];
                        this._createSpecialDateObject();
                        callRefresh = start = true;
                        break;
                    case "fields":
                        this.model.fields = jsondata[key];
                        this._mapField = this._getMapper();
                        callRefresh = start = true;
                        break;
                    case "showTooltip":
                        this.model.showTooltip = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "highlightWeekend":
                        this.model.highlightWeekend = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "highlightSection":
                        this.model.highlightSection = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "dateFormat":
                        this.model.dateFormat = jsondata[key];
                        this._ensureValue();
                        break;
                    case "minDate":
                        this._setMinDate(jsondata[key]);
                        jsondata[key] = this.model.minDate;
                        this._ensureValue();
                        validate = callRefresh = start = true;
                        break;
                    case "maxDate":
                        this._setMaxDate(jsondata[key]);
                        jsondata[key] = this.model.maxDate;
                        this._ensureValue();
                        validate = callRefresh = start = true;
                        break;
                    case "locale":
                        this.model.locale = jsondata[key];
                        this.model.startDay = ((ej.isNullOrUndefined(this._options.startDay)) && (this.model.startDay === this.culture.calendar.firstDay))
                            ? -1 : (this._options.startDay === this.defaults.startDay) ? -1 : this.model.startDay;
                        this.model.dateFormat = ((ej.isNullOrUndefined(this._options.dateFormat)) && (this.model.dateFormat === this.culture.calendar.patterns.d))
                            ? '' : this.model.dateFormat;
                        this._setCulture(jsondata[key]);
                        if (this.model.value) this._setDateValue(this.model.value);
                        jsondata[key] = this.model.locale;
                        callRefresh = start = true;
                        break;
                    case "showOtherMonths":
                        this.model.showOtherMonths = jsondata[key];
                        this._otherMonthsVisibility();
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = jsondata[key];
                        validate = callRefresh = start = true;
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = jsondata[key];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessages = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "readOnly":
                        this.model.readOnly = jsondata[key];
                        this._disbleMaualInput();
                        break;
                    case "width":
                        this._setWidth(jsondata[key]);
                        break;
                    case "height":
                        this._setHeight(jsondata[key]);
                        break;
                    case "cssClass":
                        this._setSkin(jsondata[key]);
                        break;
                    case "enableRTL":
                        this._setRTL(jsondata[key]);
                        break;
                    case "showRoundedCorner":
                        this._setRoundedCorner(jsondata[key]);
                        break;
                    case "enabled":
                        if (!jsondata[key]) this.disable();
                        else this.enable();
                        break;
                    case "buttonText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["buttonText"] = this.model.buttonText = jsondata[key];
                        this._localizedLabels.buttonText = this.model.buttonText;
                        this._setFooterText(jsondata[key]);
                        break;
                    case "showFooter":
                        this._enableFooter(jsondata[key]);
                        break;
                    case "watermarkText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["watermarkText"] = this.model.watermarkText = jsondata[key];
                        this._localizedLabels.watermarkText = this.model.watermarkText;
                        this._setWaterMark();
                        break;
                    case "startDay":
                        var initial = jsondata[key];
                        if (parseInt(jsondata[key]) < 0 || parseInt(jsondata[key]) > 6) {
                            jsondata[key] = this.culture.calendar.firstDay;
                            initial = -1;
                        }
                        this.model.startDay = jsondata[key];
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["startDay"] = initial;
                        callRefresh = start = true;
                        break;
                    case "startLevel":
                        this.model.startLevel = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "headerFormat":
                        this.model.headerFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "depthLevel":
                        this.model.depthLevel = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "allowEdit": this._changeEditable(jsondata[key]); break;
                    case "tooltipFormat":
                        this.model.tooltipFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "allowDrillDown":
                        this._allowQuickPick(jsondata[key]);
                        callRefresh = start = true;
                        break;
                    case "showDisabledRange":
                        this._setRestrictDateState(jsondata[key]);
                        break;
                    case "blackoutDates":
                        this.model.blackoutDates = jsondata[key];
                        this._initDisableObj(this.model.blackoutDates);
                        callRefresh = start = true;
                        break;
                }
            }
            if (validate) {
                this._validateMinMaxDate();
                jsondata["value"] = this.model.value;
                jsondata["maxDate"] = this.model.maxDate;
                jsondata["minDate"] = this.model.minDate;
            }
            this._setWaterMark();

            if (callRefresh && (this.isValidState || this.model.displayInline))
                this._refreshDatepicker();
            if (start && !this._startNavigate) this._startLevel(this.model.startLevel);
            this._triggerChangeEvent();
            this._checkErrorClass();
        },
        observables: ["value"],

        _destroy: function () {
            if (this.model.displayInline)
                $(window).off("resize", $.proxy(this._OnWindowResize, this));
            if (this._isOpen)
                this.hide();
            this.sfCalendar && this.sfCalendar.remove();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
            }
            this.element.removeClass('e-datepicker e-input');
            this.element.removeAttr('aria-atomic aria-live aria-activedescendant aria-expanded role placeholder tabindex' );
            !this._cloneElement.hasAttribute("name") && this.element.removeAttr("name");
        },

        _init: function (options) {
            this._options = options;
            this._cloneElement = this.element.clone();
            this._dt_drilldown = false;
            this._ISORegex();
            this._initDisableObj(this.model.blackoutDates);
            this.animation = {
                open: { duration: 200 },
                close: { duration: 100 }
            };
            this._animating = false;
            this._isInputBox = this._isInputBox();
            this._startNavigate = false;
            this._keyboardInteraction = false;
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            this._checkAttribute();
            this._setValues();
            this._createDatePicker();
            if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
                this.model.validationMessages = this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
        },

        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._isISODate = /[T]/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },

        setValue: function (date){
            if(typeof(date) === "string") date = new Date(date);
            var prevValue = this.model.value;
            this._setDateValue(date);
            this._checkErrorClass();
            if(prevValue != this.model.value)this._triggerChangeEvent();
        },
        _checkAttribute: function () {
            var attr = ["min", "max", "readonly", "disabled"], propName = ["minDate", "maxDate", "readOnly", "enabled"], value, propValue;
            for (var i = 0; i < attr.length; i++) {
                value = this.element.attr(attr[i]); propValue = propName[i];
                if (!ej.isNullOrUndefined(value)) {
                    if (ej.isNullOrUndefined(this._options))
                        this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                    else if (ej.isNullOrUndefined(this._options[propValue]))
                        this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                }
            }
        },
        _updateDateValue: function (value) {
            var date = this._checkDateObject(value);
            if (date != null) {
                this.isValidState = true;
                if (date == "") {
                    this.element.val("");
                    this.model.value = null;
                } else {
                    this.model.value = date;
                    this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
                }
            }
            else {
                (typeof date === "string" && this.model.enableStrictMode) ? this.element.val(value) : this.element.val("");
                this.model.value = null;
                this.isValidState = (this.element.val() == "") ? true : false;
            }
            this._removeWatermark();
        },
        _ensureValue: function () {
            var dateValue = this._parseDate(this.element.val(), this.model.dateFormat);
            if (this.model.value)
                this._setDateValue(this.model.value);
            else if (dateValue)
                this._setDateValue(dateValue);
        },
        _changeEditable: function (bool) {
            var action = bool ? "_on" : "_off";
            if (this.element.is(":input")) {
                if (bool) {
                    if (!this.model.readOnly) this.element.attr("readonly", false);
                    this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
                }
                else {
                    if (!this.model.readOnly) this.element.attr("readonly", "readonly");
                    if (!this.model.displayInline) this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
                }
                this[action](this.element, "blur", this._onFocusOut);
                this[action](this.element, "focus", this._onFocusIn);
                this[action](this.element, "keydown", this._onKeyDown);
            }
        },
        _allowQuickPick: function (value) {
            $('.e-datepicker-headertext', this.sfCalendar)[value ? "on" : "off"]("click", $.proxy(this._forwardNavHandler, this));
        },
        _setRestrictDateState: function (value) {
            var action = value ? "addClass" : "removeClass";
            this.sfCalendar[action]("e-dp-restrict-show");
        },
        _setValues: function () {
            this.Date = new Date();
            this._id = this.element[0].id;
            this.isValidState = true;
            this._setCulture(this.model.locale);
            this._setMinDate(this.model.minDate);
            this._setMaxDate(this.model.maxDate);
            this._calendarDate = this._zeroTime(new Date());
            if (this.model.startDay < 0 || this.model.startDay > 6) this.model.startDay = 0;
            this.Date.firstDayOfWeek = this.model.startDay;
            this.Date.fullYearStart = '20';
            this._showHeader = true;
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this.element[0].value;
            this._validateMinMaxDate();
            this._dateValue = new Date(this._calendarDate.toString());
            this._isIE7 = this._checkIE7();
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this._isIE9 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "9.0") ? true : false;
            // this variable is set to true in DateTimePicker control
            this._getInternalEvents = false;
            this._flag = true;
            this._ejHLWeekEnd = false;
            this._isOpen = false;
            this._prevDate = null;
            this._preValue = null;
            this._isFocused = false;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled") proxy.disable();
                else if (keyName == "readOnly") proxy.model.readOnly = true;
                else if (keyName == "style") proxy.wrapper.attr(key, value);
                else if (keyName == "id") {
                    proxy.wrapper.attr(key, value + "_wrapper");
                    proxy.element.attr(key, value);
                }
                else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);

            });
        },
        _createDatePicker: function () {
            this._createWrapper();
            this._wireEvents();
            if (this.model.displayInline) {
                this.show();
            }
            if (this.model.enableRTL) this._setRTL(true);
            if (this.model.showRoundedCorner) this._setRoundedCorner(true);
        },
        _checkNameAttr: function () {
            if (!this.element.attr("name") && this._isInputBox)
                this.element.attr("name", this.element[0].id);
            if (this.model.displayInline && !this._isInputBox)
                this._hiddenInput.attr("name", this.element[0].id);
        },
        _createWrapper: function () {
            this._getMapper();
            if (this.model.specialDates)
                this._createSpecialDateObject();
			if(!this.element[0].hasAttribute("tabindex"))this.element.attr("tabindex","0");
            if (this._isInputBox) {
			    this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'aria-expanded':'false','role':'combobox' });
                this.wrapper = ej.buildTag("span.e-datewidget e-widget " + this.model.cssClass);
                this.wrapper.attr("style", this.element.attr("style"));
                this.element.removeAttr('style');
                if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
                this.innerWrapper = ej.buildTag("span.e-in-wrap e-box e-padding");
                this.wrapper.append(this.innerWrapper).insertBefore(this.element);
                this.innerWrapper.append(this.element);
                this.dateIcon = ej.buildTag("span.e-select#" + this._id + "-img", "", {}, (this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(ej.buildTag("span.e-icon e-calendar", "", {}, { 'aria-label': 'Select' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})).insertAfter(this.element);
            }
            if (!this._isSupport || (this.model.displayInline && !this._isInputBox)) {
                this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                if (this._isInputBox) this._hiddenInput.val(this._localizedLabels.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                $(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
            this._checkNameAttr();
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            if (this._id)
                $("#e-" + this._id).remove();
            this._setDateValue(this.model.value);
            this._preValue = this._parseDate(this.element.val(), this.model.dateFormat);
            this._setWaterMark();
            this._dateValue = new Date(this._calendarDate.toString());
            if (this.model.displayInline) this._renderPopup();
            else if (this._isInputBox) this._renderDateIcon(this.model.showPopupButton, false);
            if (this.model.readOnly) this._disbleMaualInput();
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && $(this.element).hasClass("e-disable")) this.enable();
            this._layoutChanged();
            this._checkErrorClass();
            this._addAttr(this.model.htmlAttributes);
        },
        _isInputBox: function () {
			if(this.element.is("input[type=date]")) this.element.attr('type',"text");
            return (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type')));
        },

        _renderDateIcon: function (bool, reRender) {
            if (reRender && this.model.showPopupButton == bool) return;
            if (!bool && this.dateIcon) {
                this._bindInputEvent();
                this.dateIcon.css('display', 'none');
                this.innerWrapper.removeClass('e-padding');
            }
            else {
                if (this.innerWrapper) {
                    this.innerWrapper.addClass('e-padding');
                    this.dateIcon.css('display', 'block');
                }
                if (!this.model.displayInline)
                    this._bindDateButton();
            }
            this.model.showPopupButton = bool;
        },

        _resizeCalender: function () {
            if ((this.model.dayHeaderFormat == "short") || (this.model.dayHeaderFormat == "min") || (this.model.dayHeaderFormat == "none"))
                this.sfCalendar.removeClass("e-headerlong");
            else if (this.model.dayHeaderFormat == "long") {
                this.sfCalendar.addClass("e-headerlong");
            }
        },

        _setWidth: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.width(value);
                else this.element.width(value);
            }
            else
                this.model.width = this.wrapper ? this.wrapper.outerWidth() : this.element.width();
        },
        _setHeight: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.height(value);
                else this.element.height(value);
            }
            else
                this.model.height = this.wrapper ? this.wrapper.outerHeight() : this.element.height();
            if (this._isIE7) this.element.height(this.innerWrapper.height());
        },
        _setRTL: function (isRTL) {
            if (isRTL) {
                if (this.wrapper) {
                    this.wrapper.addClass("e-rtl");
                }
                this.sfCalendar && this.sfCalendar.addClass("e-rtl");
            }
            else {
                if (this.wrapper) {
                    this.wrapper.removeClass("e-rtl");
                }
                this.sfCalendar && this.sfCalendar.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (bool) {
            if (bool) {
                if (this.innerWrapper)
                    this.innerWrapper.addClass("e-corner");
                this.sfCalendar && this.sfCalendar.addClass("e-corner");
            }
            else {
                if (this.innerWrapper)
                    this.innerWrapper.removeClass("e-corner");
                this.sfCalendar && this.sfCalendar.removeClass("e-corner");
            }
        },

        _refreshDatepicker: function () {
            if (this._stopRefresh) {
                this._stopRefresh = false
                return;
            }
            var _currentVal = this.element.val();
            var dateSelection = false;
            if (this.model.navigate !== null) {
                if (this.sfCalendar.find('table')[0] !== undefined) {
                    var sfCalendarClassName = this.sfCalendar.find('table')[0].className;
                    if (sfCalendarClassName === 'e-dp-viewdays' && +this._dateValue !== +this._calendarDate) {
                        this._calendarDate = this._dateValue;
                        dateSelection = true;
                    } else if (sfCalendarClassName !== 'e-dp-viewdays') {
                        if (sfCalendarClassName === 'e-dp-viewmonths' || sfCalendarClassName === 'e-dp-viewyears' || sfCalendarClassName === 'e-dp-viewallyears') {
                            this._startNavigate = true;
                        }
                        return;
                    }
                }
            }
            //  For checking the year maximum range....
            if (this._specificFormat() && this._formatter(this._preValue, this.model.dateFormat, this.model.locale) != _currentVal)
                var currentValue = this._parseDate(_currentVal, true);
            else var currentValue = this._parseDate(_currentVal);
            currentValue = this._validateYearValue(currentValue);
            if (this.model.navigate !== null && currentValue !== null && currentValue !== this._calendarDate) currentValue = this._calendarDate;
            this._setDateValue(currentValue);
            if (this._specificFormat() && this._compareDate(this.model.value, this._calendarDate))
                this.element.val(_currentVal)
            $(".e-datepicker-headertext", this.sfCalendar).text(this._formatter(this._calendarDate, this.model.headerFormat));
            this._resizeCalender();
            this._dateValue = new Date(this._calendarDate.toString());
            this._hoverDate = this._calendarDate.getDate() - 1;
            this._renderCalendar(this, this._dateValue);
            if (dateSelection && _currentVal === '') this._addFocus('day', this._hoverDate);
            this._setFooterText(this._localizedLabels.buttonText);
            this._enableFooter(this.model.showFooter);
            this._layoutChanged();
        },

        _removeCurrentMonthFromHideDate: function() {
            var rowLength = this.sfCalendar.find('tbody.e-datepicker-days tr').length;
            for (var i = 0; i < rowLength; i++) {
                var cellLength = this.sfCalendar.find('tbody.e-datepicker-days tr')[i].cells.length;
                for (var j = 0; j < cellLength; j++) {
                    var hideDay = $(this.sfCalendar.find('tbody.e-datepicker-days tr')[i].cells[j]);
                    if (hideDay.hasClass('e-hidedate')) {
                        if(hideDay.hasClass('current-month')) hideDay.removeClass('current-month');
                    }
                }
            }
        },
        _validateYearValue: function (value) {
            if (value != null) {
                var twoDigitYearMax = ej.preferredCulture(this.model.locale).calendars.standard.twoDigitYearMax;
                twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
                if (this._calendarDate.getFullYear() - value.getFullYear() == 100) {
                    if (this._calendarDate.getFullYear() > twoDigitYearMax)
                        value.setFullYear(this._calendarDate.getFullYear())
                }
            }
            return value;
        },
        _setFooterText: function (footerText) {
            $('.e-footer-text', this.sfCalendar).html(footerText);
        },
        _setSkin: function (skin) {
            if (this.wrapper) {
                this.wrapper.removeClass(this.model.cssClass);
                this.wrapper.addClass(skin);
            }
            else {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
            this.sfCalendar.removeClass(this.model.cssClass);
            this.sfCalendar.addClass(skin);
        },
        _setDisplayInline: function (isDisplayInline) {
            this.model.displayInline = isDisplayInline;
            if (isDisplayInline && this._isInputBox) {
                this.sfCalendar.insertAfter(this.wrapper);
                this._setDatePickerPosition();
            }
            else if (isDisplayInline) {
                this.element.append(this.sfCalendar);
                if (!this._isSupport || !this._isInputBox) this._hiddenInput.css("display", "none");
            }
            else {
                this.sfCalendar.css('display', 'none');
                $('body').append(this.sfCalendar);
                this._isOpen = false;
            }
            if (isDisplayInline) {
                this.show();
                this._off(this.dateIcon, "mousedown", this._showDatePopUp);
                this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
            }

        },

        _disbleMaualInput: function () {
            if (this.model.readOnly) {
                $(this.element).attr("readonly", "readonly");
                if (!this.model.displayInline) this.hide();
            }
            else if (this.model.allowEdit)
                $(this.element).prop("readonly", false);

        },
        _checkDateObject: function (date, val) {
            if (!date || (typeof JSON === "object" && JSON.stringify(date) === "{}")) return date = null;
            else if (!(date instanceof Date)) {
                if (this._specificFormat())
                    var val = this._parseDate(date, true);
                else
                    var val = this._parseDate(date, val);
                date = val ? val : (val = this._checkJSONString(date)) ? val : null;
            }
            if (!isNaN(Date.parse(date))) {
                this._dateValue = this._calendarDate = this._zeroTime(date)
                if (this._validateDate(date))
                    return this._dateValue;
            }
            return null;
        },
        _checkJSONString: function(date) {
            // Validate the string value
            if (!isNaN(Date.parse(date))) {
                if ((new Date(date).toJSON() === date) || (new Date(date).toDateString() === date) || (new Date(date).toGMTString() === date) ||
                    (new Date(date).toISOString() === date) || (new Date(date).toLocaleString() === date) ||
                    (new Date(date).toString() === date) || (new Date(date).toUTCString() === date)) {
                    if (this.model.timeZone) {
                        return new Date(new Date(date).getTime() + (ej.serverTimezoneOffset * 60 * 60 * 1000));
                    } else {
                        if (date.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i) && date.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i).length > 0) {
                            date = date.split('T')
                            date = date[0];
                            return ej.parseDate(date, "yyyy-MM-dd", this.model.locale);
                        }
                    }
                } else if (typeof date == "string") return this._dateFromISO(date);
            }else if(this.model.enableStrictMode && ej.parseDate(date, this.model.value, this.model.locale) == null) return null; 
			else if (this._extISORegex.exec(date) || this._basicISORegex.exec(date)) return this._dateFromISO(date);
        },
        _dateFromISO: function (date) {
            var result = this._isISODate.test(date) && (this._extISORegex.exec(date) || this._basicISORegex.exec(date)), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            var char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _checkInstanceType: function (date) {
            date = this._stringToObject(date);
            if (!date) return null;
            else if (!(date instanceof Date)) {
                date = this._parseDate(date);
            }
            if (!isNaN(Date.parse(date))) return this._zeroTime(date);
            return null;
        },
        _stringToObject: function (value) {
            if (typeof value === "string") {
                var val = ej.parseDate(value, this.model.dateFormat, this.model.locale);
                value = (val != null) ? val : new Date(value);
            }
            return value;
        },
        _validateMinMaxDate: function () {
            var dateChange = false, valueExceed = false;
            if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
            if (!this.model.enableStrictMode) {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.value = this.model.minDate;
                        dateChange = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.value = this.model.maxDate;
                        dateChange = true;
                    }
                }
                else {
                    this.element.val("");
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
                this.isValidState = true;
            }
            else {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.minDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.maxDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else this.isValidState = true;
                }
                else {
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
            if (dateChange) this.element.val(this._formatter(this.model.value, this.model.dateFormat));
            if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
        },
        _setCulture: function (culture) {
            this.culture = ej.preferredCulture(culture);
            if (this.culture) {
                this.model.locale = this.culture.name == "en" ? "en-US" : this.culture.name;
                this.Date.dayNames = this.culture.calendar.days.names;
                this.Date.dayNamesMin = this.culture.calendar.days.namesShort;
                this.Date.abbrDayNames = this.culture.calendar.days.namesAbbr;
                this.Date.monthNames = this.culture.calendar.months.names;
                this.Date.abbrMonthNames = this.culture.calendar.months.namesAbbr;
                this.Date.format = this.culture.calendar.patterns.d;
                if (this.model.dateFormat == '') this.model.dateFormat = this.culture.calendar.patterns.d;
                if (this.model.startDay == -1) this.model.startDay = this.culture.calendar.firstDay;
            }
            this._separator = this._getSeparator();
            this._localizedLabels = this._getLocalizedLabels();

            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
                if (!ej.isNullOrUndefined(this._options.buttonText))
                    this._localizedLabels.buttonText = this._options.buttonText;
            }
            this._localizedLabelToModel();
        },

        _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            this.model.buttonText = this._localizedLabels.buttonText;
        },

        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this._localizedLabels.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "") {
                    this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
                }
                else {
                    $(this.element).attr("placeholder", this._localizedLabels.watermarkText);
                }
                return true;
            }
        },

        _setDatePickerPosition: function () {
            if (!this.model.displayInline || this._isInputBox) {
                var elementObj = this.element.is('input') ? this.wrapper : this.element;
                var pos = this._getOffset(elementObj), winLeftWidth, winRightWidth,
                winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
                winTopHeight = pos.top - $(document).scrollTop(),
                popupHeight = this.sfCalendar.outerHeight(),
                popupWidth = this.sfCalendar.outerWidth(),
                left = pos.left,
                totalHeight = elementObj.outerHeight(),
                border = (totalHeight - elementObj.height()) / 2,
                maxZ = this._getZindexPartial(), popupmargin = 3,
                topPos = (popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin; // popupmargin denotes space b/w the element and the popup.
                winLeftWidth = $(document).scrollLeft() + $(window).width() - left;
                winRightWidth = $(document).scrollLeft() + left + elementObj.width();
                if (this.model.enableRTL || popupWidth > winLeftWidth && (popupWidth < left + elementObj.outerWidth()) && !ej.isNullOrUndefined(this.wrapper))
                    left += this.wrapper.width() - this.sfCalendar.width();
                if (popupWidth > winRightWidth) left = pos.left;
                this.sfCalendar.css({
                    "left": left + "px",
                    "top": topPos + "px",
                    "z-index": maxZ
                });
            }
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.sfCalendar);
        },

        _setMinDate: function (d) {
            this.model.minDate = this._checkInstanceType(d);
            if (!this.model.minDate) {
                this.model.minDate = (new Date('11/31/1899'));
            }
        },

        _setMaxDate: function (d) {
            this.model.maxDate = this._checkInstanceType(d);
            if (!this.model.maxDate) {
                this.model.maxDate = (new Date('12/31/2099')); // using the JS Date.parse function which expects mm/dd/yyyy
            }
        },
        _setDateValue: function (date, val) {
            var newDate = this._checkDateObject(date, val);
            if (newDate != null) {
                this.isValidState = true;
                this.model.value = new Date(newDate);
                if (!this.model.displayInline)
                    this.wrapper.addClass('e-valid');
                this._validateMinMaxDate();
                this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
            }
            else {
                if (date instanceof Date) {
                    this._validateMinMaxDate();
                    date = this._formatter(date, this.model.dateFormat);
                }
                (this.model.enableStrictMode) ? this.element.val(date) : this.element.val(null);
                this.model.value = null; //updating model value as null to avoid the recursive call to this method
                if (!this.model.displayInline)
                    this.wrapper.removeClass('e-valid');
                this._triggerChangeEvent();
                this.isValidState = (this.element.val() == "" || ej.isNullOrUndefined(this.element.val())) ? true : false;
            }
            this._removeWatermark();
        },
        _updateInputVal: function () {
            var val = this._validateValue();
            if ((val != null || !this.model.enableStrictMode) && this.sfCalendar && this.sfCalendar.find('.e-datepicker-days').is(':visible'))
                this._refreshDatepicker();
        },
        _validateInputVal: function () {
            var val = this._validateValue();
            if (val != null) {
                if (!this.model.enableStrictMode) {
                    if (val <= this.model.maxDate && val >= this.model.minDate)
                        this.isValidState = true;
                    else {
                        this.model.value = null;
                        this.isValidState = true;
                    }
                }
            }
        },

        _validateValue: function () {
            if (this._specificFormat() && this.element.val() != this._formatter(this._preValue, this.model.dateFormat, this.model.locale))
                var value = this._parseDate(this.element.val(), true);
            else var value = this._parseDate(this.element.val());
            return this._validateYearValue(value);
        },
        _getSeparator: function () {
            var formats;
            if (this.culture) {
                formats = this.culture.calendar.patterns.d;
            }
            else formats = this.model.dateFormat;
            var regex = new RegExp("^[a-zA-Z0-9]+$");
            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats[i])) return formats[i];
            }
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },

        //Date formatter - Convert date object to specific date format
        _formatter: function (date, format) {
            var newFormat = this._checkFormat(format);
            return ej.format(date, newFormat, this.model.locale);
        },
        _parseDate: function (date, type) {
            var newFormat = this._checkFormat(this.model.dateFormat);
            var DateValue = date;
            if ((this._specificFormat()) && DateValue != undefined && date != "" && type != true && !(ej.format(ej.parseDate(DateValue, newFormat, this.model.locale), this.model.dateFormat, this.model.locale) == DateValue)) {
                return this._dateValue;
            }
            else return ej.parseDate(date, newFormat, this.model.locale);
        },
        _checkFormat: function (format) {
            var proxy = this;
            var dateFormatRegExp = this._regExp();
            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? ej.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
                return match;
            });
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },

        isLeapYear: function (year) {
            return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
        },
        //Sets the time component of this Date to zero for cleaner, easier comparison of dates where time is not relevant.
        _zeroTime: function (date) {
            var newDate = typeof date === "string" ? this._parseDate(date) : new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },

        _getDaysInMonth: function (date) {
            return [31, (this.isLeapYear(date) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][date.getMonth()];
        },

        _addDays: function (d, number) {
            d.setDate(d.getDate() + number);
            return d;
        },

        _addYears: function (d, number) {
            d.setFullYear(d.getFullYear() + number);
            return d;
        },

        _addMonths: function (d, number) {
            var tempDatedateMonth = d.getDate();
            d.setMonth(d.getMonth() + number);
            if (tempDatedateMonth > d.getDate())
                this._addDays(d, -d.getDate());
            return d;
        },
        //Checks if the day is a weekend day (Sat or Sun).
        _isWeekend: function (date) {
            return date.getDay() == 0 || date.getDay() == 6;
        },

        _isSpecialDates: function (dates) {
            if (this.model.specialDates) {
                for (var i = 0; i < this.model.specialDates.length; i++) {
                    if (this.model.specialDates[i] && this.model.specialDates[i][this._mapField._date]) {
                        if (dates.getDate() == this.model.specialDates[i][this._mapField._date].getDate() && dates.getMonth() == this.model.specialDates[i][this._mapField._date].getMonth() && dates.getFullYear() == this.model.specialDates[i][this._mapField._date].getFullYear()) {
                            this._getIndex = i;
                            return true;
                        }
                    }
                }
            }
            return false;
        },
        _getMapper: function () {
            var mapper = this.model.fields;
            this._mapField = {};
            this._mapField["_date"] = (mapper && mapper.date) ? mapper["date"] : "date";
            this._mapField["_tooltip"] = (mapper && mapper.tooltip) ? mapper["tooltip"] : "tooltip";
            this._mapField["_icon"] = (mapper && mapper.iconClass) ? mapper["iconClass"] : "iconClass";
            this._mapField["_custom"] = (mapper && mapper.cssClass) ? mapper["cssClass"] : "cssClass";
        },
        _createSpecialDateObject: function () {
            for (var i = 0; i < this.model.specialDates.length; i++) {
                this.model.specialDates[i][this._mapField._date] = this._checkInstanceType(this.model.specialDates[i][this._mapField._date]);
            }
        },

        _getMonthName: function (abbreviated, date) {
            return abbreviated ? this.Date.abbrMonthNames[date.getMonth()] : this.Date.monthNames[date.getMonth()];
        },



        _displayNewMonth: function (m, y) {
            this._setDisplayedMonth(this.displayedMonth + m, this.displayedYear + y, true);
            return false;
        },

        _setDisplayedMonth: function (m, y, rerender) {
            if (this.model.minDate == undefined || this.model.maxDate == undefined) {
                return;
            }
            var s = new Date(this.model.minDate.getTime());
            s.setDate(1);
            var e = new Date(this.model.maxDate.getTime());
            e.setDate(1);

            var t;
            if ((!m && !y) || (isNaN(m) && isNaN(y))) {

                t = this._zeroTime(new Date());
                t.setDate(1);
            } else if (isNaN(m)) {

                t = new Date(y, this.displayedMonth, 1);
            } else if (isNaN(y)) {

                t = new Date(this.displayedYear, m, 1);
            } else {

                t = new Date(y, m, 1);
            }

            if (t.getTime() < s.getTime()) {
                t = s;
            } else if (t.getTime() > e.getTime()) {
                t = e;
            }
            var oldMonth = this.displayedMonth;
            var oldYear = this.displayedYear;
            this.displayedMonth = t.getMonth();
            this.displayedYear = t.getFullYear();
            var tempDate = t;
            if (rerender && (this.displayedMonth != oldMonth || this.displayedYear != oldYear)) {
                this._renderCalendar(this, tempDate);
                this._dateValue = tempDate;
                this._trigger("monthChanged", [this.displayedMonth, this.displayedYear]);
            }
        },
        _clearSelected: function () {
            this.numSelected = 0;
            if (!ej.isNullOrUndefined(this.sfCalendar)) {
            if (this.model.highlightSection == "week") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().removeClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().parent().removeClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().removeClass('e-work-week');
            }
            else
                $('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false);
            }

        },
        _addSelected: function () {
            if (this.model.highlightSection == "week") {
                $('td.e-active', this.sfCalendar).parent().addClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                $('td.e-active, this.sfCalendar').parent().parent().addClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                $('td.e-active', this.sfCalendar).parent().addClass('e-work-week');
            }
        },

        _hideOtherMonths: function (sfCalendar) {
            $('td.other-month', sfCalendar).css("visibility", "hidden");
        },
        _showOtherMonths: function (sfCalendar) {
            $('td.other-month', sfCalendar).css({ 'visibility': 'visible' });
        },
        _otherMonthsVisibility: function () {
            if (this.model.showOtherMonths)
                this._showOtherMonths(this.sfCalendar);
            else
                this._hideOtherMonths(this.sfCalendar);
        },

        _createCalender: function () {
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-datepicker-headertext").text(this._formatter(this._calendarDate, this.model.headerFormat)).attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .appendTo(this.sfCalendar);
            this._enableHeader(this._showHeader);
            var table = ej.buildTag("table.e-dp-viewdays", "", {}).data("e-table", "data").attr({ 'role': 'grid'}).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.sfCalendar.append(table);
            this._renderCalendar(this);
            this._startLevel(this.model.startLevel);
            ej.buildTag("div.e-footer")
                .append(ej.buildTag("span.e-footer-icon"))
                .append(ej.buildTag("span.e-footer-text"))
                .appendTo(this.sfCalendar);
            $('.e-footer-text', this.sfCalendar).html(this._localizedLabels.buttonText);
            this._enableFooter(this.model.showFooter);
        },
        _enableHeader: function (show) {
            if (show) $(".e-header", this.sfCalendar).show();
            else $(".e-header", this.sfCalendar).hide();
        },
        _enableFooter: function (show) {
            if (show) $('.e-footer', this.sfCalendar).show();
            else $('.e-footer', this.sfCalendar).hide();
            this._todayBtnDisable();
        },
        _todayBtnDisable: function () {
            var today = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 0, 0, 0);
            if (!(+this.model.minDate <= +today && +this.model.maxDate >= +today)) {
                $('.e-footer', this.sfCalendar).addClass('e-footer-disable')
            } else {
                $('.e-footer', this.sfCalendar).removeClass('e-footer-disable')
            }
        },
        _checkArrows: function (min, max) {
            this._preArrowCondition(min, this.model.minDate.getFullYear());
            this._nextArrowCondition(max, this.model.maxDate.getFullYear());
        },
        _checkDateArrows: function () {
            this._preArrowCondition(this._tempMinDate, this.model.minDate);
            this._nextArrowCondition(this._tempMaxDate, this.model.maxDate);
        },
        _preArrowCondition: function (val1, val2) {
            if (val1 <= val2) this.sfCalendar.find(".e-prev").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-prev").removeClass("e-disable").attr({ "aria-disabled": false });
        },
        _nextArrowCondition: function (val1, val2) {
            if (val1 >= val2) this.sfCalendar.find(".e-next").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-next").removeClass("e-disable").attr({ "aria-disabled": false });
        },

        _previousNextHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled || $(event.target).hasClass("e-disable") || $(event.currentTarget).hasClass("e-disable")) return false;
            event.preventDefault();
            this._keyboardInteraction = false;
            var prevTable = $("table", this.sfCalendar), navFrom;
            navFrom = this._navigateFrom(prevTable);
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrevDate(progress);
            var currentTable = $("table", this.sfCalendar), tClassName, navTo;
            tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case "e-dp-viewdays": navTo = "month"; break;
                case "e-dp-viewmonths": navTo = "year"; break;
                case "e-dp-viewyears": navTo = "decade"; break;
                case "e-dp-viewallyears": navTo = "century"; break;
            }
            this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
        },
        _processNextPrevDate: function (progress) {
            if (this._DRPdisableFade) {
                var s = new Date(this.sfCalendar.find("td.current-month").attr("data-date"));
                this._dateValue = s;
            }
            if (progress && this.sfCalendar.find(".e-arrow-sans-left").hasClass("e-disable")) return false;
            else if (!progress && this.sfCalendar.find(".e-arrow-sans-right").hasClass("e-disable")) return false;

            var currentTable = $("table", this.sfCalendar), temp;
            var tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case 'e-dp-viewdays':
                    var step = this.model.stepMonths;
                    if (progress) {
                        if (this._dateValue <= this.model.minDate) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (this._dateValue >= this.model.maxDate) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addMonths(this._dateValue, (progress ? -step : step));
                    if (this._clickedDate)
                        this._calendarDate = this._clickedDate;
                    this._dateValue = this._dateValue < this.model.minDate ? new Date(this.model.minDate.toString()) : this._dateValue;
                    this._dateValue = this._dateValue > this.model.maxDate ? new Date(this.model.maxDate.toString()) : this._dateValue;
                    this._renderCalendar(this, this._dateValue);
                    if(this._keyboardInteraction) { 
                        this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat)});
                        this._removeCurrentMonthFromHideDate();
                        this._keyboardInteraction = false;
                    }
                    $('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
                    this._addFocus('day', this._hoverDate);
                    var dateRange = this._findFirstLastDay(new Date(this._dateValue.toString()));
                    this._preArrowCondition(dateRange.firstDay, this.model.minDate);
                    this._nextArrowCondition(dateRange.lastDay, this.model.maxDate);
                    break;
                case 'e-dp-viewmonths':
                    var dateValue = this._dateValue;
                    dateValue.setFullYear($('.e-datepicker-headertext', this.sfCalendar).text())
                    if (progress) {
                        if (dateValue.getFullYear() <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (dateValue.getFullYear() >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addYears(dateValue, (progress ? -1 : 1));
                    this._renderCalendar(this, dateValue);
                    temp = dateValue.getFullYear();
                    $('.e-datepicker-headertext', this.sfCalendar).text(temp);
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-months').hide();
                    $($(currentTable).find('.e-datepicker-months')).show();
                    this._addFocus('month', this._hoverMonth);
                    this._checkArrows(temp, temp);
                    break;
                case 'e-dp-viewyears':
                    var yearValue;
                    yearValue = this._dateValue
                    yearValue.setFullYear($(currentTable).find(".e-state-hover").text());
                    if (progress) {
                        if (parseInt(this.popup.find('td.e-year-first:first').text()) <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (parseInt($('td.e-year-last:first').prev().text()) >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    if (($(currentTable).find(".e-state-hover").hasClass('e-year-first') && progress) || ($(currentTable).find(".e-state-hover").hasClass('e-year-last') && !progress))
                        this._dateValue.setFullYear(yearValue.getFullYear());
                    else if (($(currentTable).find(".e-state-hover").hasClass('e-year-first') && !progress))
                        this._dateValue.setFullYear(yearValue.getFullYear() + 11);
                    else if (($(currentTable).find(".e-state-hover").hasClass('e-year-last') && progress))
                        this._dateValue.setFullYear(yearValue.getFullYear() - 11);
                    else
                        this._dateValue.setFullYear(yearValue.getFullYear() + (progress ? -10 : 10));
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    $(".e-datepicker-headertext", this.sfCalendar).text((setYear + 1) + ' - ' + (setYear + 10));
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-years').hide();
                    $($(currentTable).find('.e-datepicker-years')).show();
                    this._addFocus('year', this._hoverYear + (!($('.e-year-first.e-hidedate').length) ? 0 : -1));
                    this._checkArrows(setYear + 1, setYear + 10);
                    break;
                case 'e-dp-viewallyears':
                    var headYears;
                    if (progress) {
                        headYears = parseFloat($('td.e-allyear-first', currentTable.get(0)).text().split('-')[1]);
                        if (headYears <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else {
                            this._flag = true;
                        }

                    } else {
                        headYears = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                        if (headYears >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else
                            this._flag = true;
                    }
                    this._dateValue.setFullYear((!(this._lastHoveredYear) ? this._dateValue.getFullYear() : this._lastHoveredYear) + (progress ? -100 : 100));
                    this._lastHoveredYear = this._dateValue.getFullYear();
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 100) + 1);
                    temp = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                    $('.e-datepicker-headertext', this.sfCalendar).text((setYear + 1) + ' - ' + temp);
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-allyears').hide();
                    $($(currentTable).find('.e-datepicker-allyears')).show();
                    this._addFocus('allyear', this._hoverAllYear + (!($('.e-allyear-first.e-hidedate').length) ? 0 : -1));
                    this._checkArrows(setYear + 1, temp);
                    break;
            }
            this._layoutChanged();
        },
        _addFocus: function (selection, index) {
            var cls = 'e-current-' + selection;
            if (selection == 'day') cls = 'current-month';
            var items = this.sfCalendar.find('tbody tr td.' + cls);
            if (selection == "month") {
                $(items).each(function (i, ele) {
                    if (parseInt($(ele).attr("data-index")) == parseInt(index)) {
                        index = i;
                        return;
                    }
                });
            }
            var cell = items[index];
            if (!cell) cell = items.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            if (!$(cell).hasClass('e-hidedate')) $(cell).addClass("e-state-hover");
            this._setActiveState(selection);
            return index;
        },
        _setActiveState: function (selection) {
            if (!(this.model.value instanceof Date)) return;
            var items = this.sfCalendar.find('tbody tr td.e-current-' + selection), cell, proxy = this;
            var indx = -1;
            switch (selection) {
                case "month":
                    if (this.model.value.getFullYear() === parseInt($('.e-text', this.sfCalendar).text())) {
                        $(items).each(function (i, ele) {
                            if (parseInt($(ele).attr("data-index")) == parseInt(proxy.model.value.getMonth())) {
                                indx = i;
                                return;
                            }
                        });
                    }
                    break;
                case "year":
                    var value = this.model.value.getFullYear();
                    $(items).each(function (i, ele) {
                        if (parseInt(ele.innerHTML) == parseInt(value)) {
                            indx = i;
                            return;
                        }
                    });
                    break;
                case "allyear":
                    var start = parseInt(this.model.value.getFullYear()) - ((parseInt(this.model.value.getFullYear()) % 10) + 1);
                    var active = (start + 1) + ' - ' + (start + 10);
                    $(items).each(function (i, ele) {
                        if (parseInt(ele.innerHTML) == parseInt(active)) {
                            indx = i;
                            return;
                        }
                    });
                    break;
            }
            cell = items[indx];
            if (cell) {
                this.sfCalendar.find('table td').removeClass("e-active");
                if (!$(cell).hasClass('e-hidedate'))
                    $(cell).addClass("e-active");
            }
        },
        _setFocusByName: function (name, value) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            $(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            $(cell).addClass("e-state-hover");
            this._setActiveState(name);
            return index;
        },
        _getHeaderTxt: function () {
            return this.sfCalendar.find(".e-datepicker-headertext").text();
        },
        _findFirstLastDay: function (value) {
            var y = value.getFullYear(), m = value.getMonth();
            var firstDay = new Date(y, m, 1);
            var lastDay = new Date(y, m + 1, 0);
            return { firstDay: firstDay, lastDay: lastDay }
        },
        _forwardNavHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (event) event.preventDefault();

            var currentTable = $("table", this.sfCalendar);
            var tclassName = $("table", this.sfCalendar).get(0).className, proxy = this, headerTxt, navTo;
            var navFrom = this._navigateFrom(currentTable);
            switch (tclassName) {
                case 'e-dp-viewdays':
                    this._hoverMonth = this._getDateObj(currentTable.find(".e-state-hover")).getMonth() ||
                                this._getDateObj(currentTable.find(".e-active")).getMonth() || 0;
                    if (this._DRPdisableFade) {
                        this._renderCalendar(this, this._calendarDate);
                        $('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
                    }
                    this._startLevel("year"); navTo = "year";
                    this._addFocus('month', this._hoverMonth);
                    break;
                case 'e-dp-viewmonths':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("decade"); navTo = "decade";
                    this._hoverYear = this._setFocusByName('year', headerTxt);
                    break;
                case 'e-dp-viewyears':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("century"); navTo = "century";
                    this._hoverAllYear = this._setFocusByName('allyear', headerTxt);
                    break;
            }
            if (navFrom != "century") this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
            this._layoutChanged();
        },
        _cellSelection: function () {
            var currentTable = $("table", this.sfCalendar);
            var tclassName = $("table", this.sfCalendar).get(0).className;
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    this._hoverMonth = this._addFocus('month', this._dateValue.getMonth());
                    break;
                case 'e-dp-viewyears':
                    var dateValue = new Date(this._dateValue.toString());
                    // Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
                    this._navigationToPrevNext('year');
                    // Reasssign the old value
                    this._dateValue = dateValue;
                    this._hoverYear = this._setFocusByName('year', this._dateValue.getFullYear());
                    break;
                case 'e-dp-viewallyears':
                    var dateValue = new Date(this._dateValue.toString());
                    // Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
                    this._navigationToPrevNext('allyear');
                    // Reasssign the old value
                    this._dateValue = dateValue;
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    this._hoverAllYear = this._setFocusByName('allyear', setYear + 1 + ' - ' + setYear + 10);
                    break;
            }
            this._layoutChanged();
        },
        _navigationToPrevNext: function (name) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            var value = this._dateValue.getFullYear();
            $(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (cell) {
                if ($(cell).hasClass('e-' + name + '-last'))
                    this._processNextPrevDate(false)
                else if ($(cell).hasClass('e-' + name + '-first'))
                    this._processNextPrevDate(true);
            }
        },
        _navigateFrom: function (prevTable) {
            var tPrevClassName = prevTable.get(0).className, navFrom;
            switch (tPrevClassName) {
                case "e-dp-viewdays": navFrom = "month"; break;
                case "e-dp-viewmonths": navFrom = "year"; break;
                case "e-dp-viewyears": navFrom = "decade"; break;
                case "e-dp-viewallyears": navFrom = "century"; break;
            }
            return navFrom;
        },
        _backwardNavHandler: function (event) {
            this._animating = true;
            if (this.model.readOnly || !this.model.enabled) return false;
            var element;
            if (event.type) {
                event.preventDefault();
                element = $(event.currentTarget);
            }
            else element = event;
            var cTable = $("table", this.sfCalendar), temp;
            var tclassName = $("table", this.sfCalendar).get(0).className, proxy = this, navTo;
            var navFrom = this._navigateFrom(cTable);
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    cTable.removeClass("e-dp-viewmonths").addClass("e-dp-viewdays");
                    this._lastHoveredMonth = parseInt($(element).attr('data-index'));
                    this._dateValue = new Date(this._dateValue.getFullYear(), this._lastHoveredMonth, 1);
                    if (this._DRPdisableFade) this._trigger("_month_Loaded", { currentTarget: event.currentTarget });
                    this._renderCalendar(this, this._dateValue);
                    $('tbody', cTable).not('.e-datepicker-days,.e-week-header').hide();
                    $($(cTable).find('.e-datepicker-days,.e-week-header')).fadeIn("fast", function () {
                        proxy._addFocus('day', proxy._hoverDate || 0);
                        proxy._animating = false;
                    });
                    $('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat)); navTo = "month";
                    break;
                case 'e-dp-viewyears':
                    cTable.removeClass("e-dp-viewyears").addClass("e-dp-viewmonths");
                    this._lastHoveredYear = parseInt(element.text());
                    this._dateValue.setFullYear(this._lastHoveredYear);
                    this._renderCalendar(this, this._dateValue);
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-months').hide();
                    if (ej.isNullOrUndefined(this._hoverMonth) && !ej.isNullOrUndefined(this._dateValue)) this._hoverMonth = this._dateValue.getMonth();
                    $($(cTable).find('.e-datepicker-months')).fadeIn("fast", function () {
                        proxy._addFocus('month', proxy._hoverMonth || 0);
                        proxy._animating = false;
                    });
                    temp = element.text();
                    $('.e-datepicker-headertext', this.sfCalendar).text(temp);
                    this._checkArrows(temp, temp); navTo = "year";
                    break;
                case 'e-dp-viewallyears':
                    var headYears = element.text().split('-');
                    cTable.removeClass("e-dp-viewallyears").addClass("e-dp-viewyears");
                    if (headYears[0] < this.model.minDate.getFullYear()) headYears[0] = this.model.minDate.getFullYear().toString();
                    else if (headYears[0] > this.model.maxDate.getFullYear()) headYears[0] = this.model.maxDate.getFullYear().toString();
                    this._renderCalendar(this, (new Date(headYears[0], 0, 1)));
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    $($(cTable).find('.e-datepicker-years')).fadeIn("fast", function () {
                        proxy._addFocus('year', proxy._hoverYear || 0);
                        proxy._animating = false;
                    });
                    $('.e-datepicker-headertext', this.sfCalendar).text(headYears[0] + ' - ' + headYears[1]);
                    this._checkArrows(headYears[0], headYears[1]); navTo = "decade";
                    this._dateValue = new Date(this._dateValue.setFullYear(parseInt($.trim(headYears[0])) + ((!this._lastHoveredYear) ? this._dateValue.getFullYear() % 10 : this._lastHoveredYear % 10)));
                    break;
                default:
                    this._clearSelected();
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    element.not('td.e-hidedate').addClass('e-active').attr('aria-selected', true);
                    this._addSelected();

                    this._hoverDate = this._getDateObj(element).getDate() - 1;
                    this._dateValue = new Date(element.attr('data-date'));
                    this._clickedDate = new Date(element.attr('data-date'));
                    this._animating = false;
                    break;
            }
            if (navFrom != "month") this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
            this._layoutChanged();
        },

        _startLevel: function (start) {
            var cTable = $("table", this.sfCalendar);
            var headerText = $(".e-datepicker-headertext", this.sfCalendar), s, e;
            var dateValue = this._dateValue;
            switch (start) {
                case "decade":
                    cTable.removeClass("e-dp-viewallyears e-dp-viewmonths e-dp-viewdays").addClass("e-dp-viewyears");
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    $($(cTable).find('.e-datepicker-years')).show();
                    if (this.model.enableStrictMode && this._calendarDate < this._dateValue) dateValue = this._calendarDate;
                    else dateValue = dateValue;
                    var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
                    s = setYear + 1;
                    e = setYear + 10;
                    headerText.text(s + ' - ' + e);
                    this._checkArrows(s, e);
                    this._hoverYear = this._setFocusByName('year', dateValue.getFullYear());
                    break;
                case "century":
                    if (!(this._calendarDate < this._dateValue)) this._renderCalendar(this, dateValue);
                    cTable.removeClass("e-dp-viewyears e-dp-viewdays e-dp-viewmonths").addClass("e-dp-viewallyears");
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-allyears').hide();
                    $($(cTable).find('.e-datepicker-allyears')).show();
                    s = parseFloat($('td.e-allyear-first', cTable.get(0)).text().split('-')[1]) + 1;
                    e = parseFloat($('td.e-allyear-last', cTable.get(0)).prev().text().split('-')[1]);
                    var headYears = s + ' - ' + e;
                    headerText.text(headYears);
                    this._checkArrows(s, e);
                    var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
                    this._hoverAllYear = this._setFocusByName('allyear', (setYear + 1) + ' - ' + (setYear + 10));
                    break;
                case "year":
                    cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewdays").addClass("e-dp-viewmonths");
                    $('tbody,tr.e-week-header', cTable).hide();
                    $($(cTable).find('.e-datepicker-months')).show();
                    if (this.model.enableStrictMode && this._calendarDate < this._dateValue) s = this._calendarDate.getFullYear();
                    else s = dateValue.getFullYear();
                    headerText.text(s);
                    this._checkArrows(s, s);
                    this._hoverMonth = dateValue.getMonth();
                    this._addFocus('month', this._hoverMonth);
                    break;
                case "month":
                    cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewmonths").addClass("e-dp-viewdays ");
                    break;
            }
        },
        _depthLevel: function (depth) {
            var calendarTable = this.sfCalendar;
            switch (depth) {
                case "year":
                    $(calendarTable.find('.e-current-year,.e-current-allyear')).on("click", $.proxy(this._backwardNavHandler, this));
                    this._on($('.e-current-month', this.sfCalendar), "click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "decade":
                    $(calendarTable.find('.e-current-allyear')).on("click", $.proxy(this._backwardNavHandler, this));
                    $('.e-current-year', this.sfCalendar).on("click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "century":
                    $(calendarTable.find('.e-current-allyear')).on("click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "month":
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
            }
        },
        _onDepthSelectHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if ($(e.target).hasClass("e-current-month"))
                this._dateValue = new Date(this._dateValue.setMonth(parseInt(e.target.attributes["data-index"].value)));
            else if ($(e.target).hasClass("e-current-year"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            else if ($(e.target).hasClass("e-current-allyear"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            this._onSetCancelDateHandler(e);
        },

        _datepickerMonths: function (tbody, calendarTable, currentDate) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var month = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(dc('td'))
                        .addClass('e-current-month e-state-default')
                        .attr({ 'data-index': month }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .html(this.Date.abbrMonthNames[month++]);
                    if (currentDate.getFullYear() < this.model.minDate.getFullYear() || currentDate.getFullYear() > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-month');
                    }
                    else if ((currentDate.getFullYear() <= this.model.minDate.getFullYear() && month < this.model.minDate.getMonth() + 1) ||
                        (currentDate.getFullYear() >= this.model.maxDate.getFullYear() && month > this.model.maxDate.getMonth() + 1)) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-month');
                    }
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            var s = currentDate.getFullYear();
            this._checkArrows(s, s);
        },

        _datepickerYears: function (tbody, calendarTable, currentYear) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 10) + 1);
            var years = [];
            for (var j = 0; j < 12; j++) {
                years.push(Year + j);
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(dc('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0)
                        td.addClass('e-year-first e-current-year ');
                    else if (year == 11)
                        td.addClass('e-year-last e-current-year ');
                    else
                        td.addClass('e-current-year e-state-default');
                    if (years[year] < this.model.minDate.getFullYear() || years[year] > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-year');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            this._checkArrows(years[0], years[years.length]);
        },

        _datepickerAllYears: function (tbody, calendarTable, currentYear) {
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 100) + 10);
            var headYear = Year;
            var years = [], newline = this._isIE8 || this._isIE9 ? "" : "\n";

            for (var j = 0; j < 12; j++) {
                years.push(parseInt(Year) + " -" + newline + parseInt(Year + 9));
                Year = Year + 10;
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(document.createElement('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(document.createElement('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0)
                        td.addClass('e-allyear-first e-current-allyear ');
                    else if (year == 11)
                        td.addClass('e-allyear-last e-current-allyear ');
                    else
                        td.addClass('e-current-allyear e-state-default');
                    if (parseInt(years[year].split('-\n')[1]) < this.model.minDate.getFullYear() || parseInt(years[year].split('-\n')[0]) > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-allyear');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
        },
        _renderHeader: function (dpObject) {
            var thead = $(document.createElement('thead'));
            var cultureObj = ej.preferredCulture(this.model.locale).calendars.standard.days;
            if (dpObject.model.dayHeaderFormat != "none") {
                var headRow = ej.buildTag("tr.e-week-header").attr({ 'role': 'row' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                if (this.model.weekNumber == true) {
                    var WeekCulture = ej.preferredCulture(this.model.locale).calendars.standard.week;
                    var day = WeekCulture.name;
                    var headerday;
                    if (dpObject.model.dayHeaderFormat == "short")
                        headerday = WeekCulture.nameAbbr;
                    else if (dpObject.model.dayHeaderFormat == "long") headerday = week;
                    else headerday = WeekCulture.nameShort;
                    var tr = ej.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'data-date': day, 'title': this._formatter(day, "dddd") }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .html(headerday);
                    headRow.append(tr);
                }
                for (var i = this.Date.firstDayOfWeek; i < this.Date.firstDayOfWeek + 7; i++) {
                    var weekday = i % 7;
                    var day = cultureObj.names[weekday];
                    var headerday;
                    if (dpObject.model.dayHeaderFormat == "short")
                        headerday = cultureObj.namesAbbr[weekday];
                    else if (dpObject.model.dayHeaderFormat == "long") headerday = day;
                    else headerday = cultureObj.namesShort[weekday];
                    var th = ej.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'data-date': day, 'title': this._formatter(day, "dddd"), 'class': (weekday == 0 || weekday == 6 ? 'e-week-end' : 'e-week-day') }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                            .html(headerday);
                    headRow.append(th);
                }
            };
            return thead.append(headRow);
        },

        _renderCalendar: function (dpObject, date) {
            var proxy = this, today;
            dpObject = $.extend({}, ej.DatePicker.prototype.defaults, dpObject);
            this.Date.firstDayOfWeek = this.model.startDay;
            if (date) today = date;
            else if (this._calendarDate) today = this._calendarDate;
            else today = proxy._zeroTime(new Date());
            var calendarTable = $('table', this.sfCalendar);
            calendarTable.empty();

            calendarTable.append(this._renderHeader(dpObject));

            var tbody = ej.buildTag('tbody.e-datepicker-allyears', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerAllYears(tbody, calendarTable, today.getFullYear());

            tbody = ej.buildTag("tbody.e-datepicker-years", "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerYears(tbody, calendarTable, today.getFullYear());
            var month = dpObject.model.month == undefined ? today.getMonth() : dpObject.model.month;
            var year = dpObject.model.year || today.getFullYear();
            var currentDate = (new Date(year, month, 1, 0, 0, 0));
            var firstDayOffset = this.Date.firstDayOfWeek - currentDate.getDay() + 1;
            if (firstDayOffset > 1) firstDayOffset -= 7;
            var weeksToDraw = Math.ceil(((-1 * firstDayOffset + 1) + this._getDaysInMonth(currentDate)) / 7);
            this._addDays(currentDate, (firstDayOffset - 1));
            var newdate = proxy._zeroTime(new Date());
            var selected = this._calendarDate;
            tbody = ej.buildTag('tbody.e-datepicker-months', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            this._datepickerMonths(tbody, calendarTable, today);

            tbody = ej.buildTag('tbody.e-datepicker-days', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var w = 0, _first = true, _last = true;
            while (w++ < weeksToDraw) {
                var r = jQuery(document.createElement('tr')).attr({'role':'row'});
                if (this.model.weekNumber == true)
                {
                    var week = this._weekDate(currentDate);
                    week = $(document.createElement('td')).attr({}).addClass('e-weeknumber').html(week)
                    r.append(week);
                }
                for (var i = 0; i < 7; i++) {
                    var thisMonth = currentDate.getMonth() == month;
                    var checkSpecialDate = this._isSpecialDates(currentDate);
                    var disable = this._checkDisableRange(currentDate);
                    var index = this._getIndex;
                    var d = $(document.createElement('td')).
                        html(checkSpecialDate ? '<span></span>' + currentDate.getDate() : currentDate.getDate() + '')
                        .attr({

                            'data-date': currentDate.toDateString(),
                            'title': (this.model.showTooltip ? (checkSpecialDate && this.model.specialDates[index][this._mapField._tooltip] ? this.model.specialDates[index][this._mapField._tooltip] : this._formatter(currentDate, this.model.tooltipFormat)) : ''),
                            'aria-selected': false,
                            'role': 'gridcell',
                            'id': this._formatter(currentDate, "yyyyddMM")
                        }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .addClass((thisMonth ? 'current-month e-state-default ' : 'other-month e-state-default ') +
                            (this._isWeekend(currentDate) ? (this._ejHLWeekEnd ? 'e-dp-weekend e-week-end ' : (this.model.highlightWeekend ? 'e-week-end ' : '')) : 'e-week-day ') +
                            (thisMonth && currentDate.getTime() == newdate.getTime() ? 'today ' : ''));

                    d.find('span:first-of-type').addClass((checkSpecialDate ? (this.model.specialDates[index][this._mapField._icon] ? 'e-special-date-icon ' + this.model.specialDates[index][this._mapField._icon] + ' ' : 'e-special-day') : ''));
                    d.addClass(checkSpecialDate ? (this.model.specialDates[index][this._mapField._custom] ? this.model.specialDates[index][this._mapField._custom] : '') : '');
                    if (disable) this._disableDates({ date: currentDate, element: d });
                    if (selected.getTime() == currentDate.getTime() && thisMonth) {
                        if (!d.hasClass('e-hidedate'))
                            if (this.model.value) {
                                d.addClass('e-active').attr({ 'aria-selected': true });
                                if (this.model.highlightSection == "week") {
                                    r.addClass('e-selected-week');
                                }
                                if (this.model.highlightSection == "month") {
                                    tbody.addClass('e-selected-month');
                                }
                                if (this.model.highlightSection == "workdays") {
                                    r.addClass('e-work-week');
                                }
                            }
                            else { if(this.model.value!=null)d.addClass('e-state-hover').attr({ 'aria-selected': false }); }
                        if (!this._hoverDate) {
                            if (!d.hasClass('e-hidedate')) d.addClass('e-state-hover');
                            this._hoverDate = currentDate.getDate() - 1;
                        }
                    }
                    var cond = true;
                    if (currentDate < this.model.minDate || currentDate > this.model.maxDate) {
                        d.addClass('e-hidedate');
                        d.removeClass('current-month');
                        if (this.model.showOtherMonths) d.removeClass('other-month');
                        cond = _last = false;
                    }
                    if (thisMonth) {
                        if (cond && _first) {
                            this._tempMinDate = currentDate;
                            _first = false; _last = true;
                        }
                        if (_last) this._tempMaxDate = currentDate;
                    }
                    this._trigger("beforeDateCreate", { date: currentDate, value: this._formatter(currentDate, this.model.dateFormat), element: d });
                    r.append(d);
                    currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1, 0, 0, 0);
                }
                tbody.append(r);
            }
            calendarTable.append(tbody);
            if (this._DRPdisableFade) {
                $(tbody).css("display", "block");
                $(tbody).css({ display: "table-row-group", "vertical-align": "middle", "border-color": "inherit" });
            }
            else {
                (this._isIE8 || this._isIE7) ? $(tbody).css("display", "table-row-group") : $(tbody).fadeIn("fast");
            }
            if (this.model.startLevel === this.model.depthLevel)
                this._depthLevel(this.model.depthLevel);
            else if (this.model.depthLevel != "month" && this.model.depthLevel != "") {
                if (this.model.startLevel == "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "year" && this.model.depthLevel != "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else {
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
                }
            }
            else {
                this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
            }

            this._otherMonthsVisibility();
            this._checkDateArrows();
        },

        _checkDisableRange: function (value) {
            if (!ej.isNullOrUndefined(this._disableCollection[value.getFullYear()]))
                if (jQuery.inArray(value.getMonth(), this._disableCollection[value.getFullYear()]) !== -1)
                    return true;
            return false;
        },
        _initDisableObj: function (disableDates) {
            this._disableCollection = {};
            for (var i = 0; i < this.model.blackoutDates.length; i++) {
                var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                if (dateObj) {
                    var year = dateObj.getFullYear();
                    var month = dateObj.getMonth();
                    if (ej.isNullOrUndefined(this._disableCollection[year])) this._disableCollection[year] = [];
                    if (jQuery.inArray(month, this._disableCollection[year]) == -1) this._disableCollection[year].push(month);
                }
            }
        },

        _disableDates: function (args) {
            for (var i = 0; i < this.model.blackoutDates.length; i++) {
                var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                if (dateObj && +args.date === +dateObj)
                args.element.addClass('e-hidedate');
            }
        },

        _keyboardNavigation: function (e) {
            this._keyboardInteraction = true;
            if (this._animating) return false;
            if ((this._isOpen) && (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                if (e.altKey) { if (e.keyCode == 13) { this._setCurrDate(e); return false; } else return; }
                var t = { row: null, col: null };

                t.col = this.sfCalendar.find('tbody tr td.e-state-hover').index();
                t.row = this.sfCalendar.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this.sfCalendar.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this.sfCalendar.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this.sfCalendar.find('table')[0].className, next, rowLength = 3, colLength = 4;
                switch (tableClass) {
                    case "e-dp-viewallyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "yearall", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverAllYear = this.sfCalendar.find('tbody.e-datepicker-allyears tr td').index(next);
                        break;
                    case "e-dp-viewyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "year", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverYear = this.sfCalendar.find('tbody.e-datepicker-years tr td').index(next);
                        break;
                    case "e-dp-viewmonths":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "month", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverMonth = this.sfCalendar.find('tbody.e-datepicker-months tr td').index(next);
                        break;
                    case "e-dp-viewdays":
                        rowLength = this.sfCalendar.find('tbody.e-datepicker-days tr').length, colLength = 7;
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "day", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverDate = this._getDateObj(next).getDate() - 1;
                        break;
                }
                if (!e.ctrlKey) {
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                    this._setAriaAttributes(next);
                }
            }
            else if (!this.model.displayInline && (e.keyCode == 27 || e.keyCode == 9)) { this.hide(); }
            else if (e.altKey && e.keyCode == 40) { this.show(); return false; }
        },
        _setAriaAttributes: function (next) {
            if (this._popupOpen) {
                this.sfCalendar.find("[aria-selected=true]").attr("aria-selected", false)
                this.sfCalendar.find("[aria-label]").removeAttr("aria-label");
                $(this.element).attr("aria-activedescendant", next.attr('id'));
                $(next).attr("aria-selected", true);
                $(next).attr("aria-label", "The current focused date is " + this._formatter(this._getDateObj(next), "dddd, dd MMMM, yyyy"));
            }
        },
        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass, cls = { parent: null, child: null };
            switch (target) {
                case "day": eleClass = "tbody.e-datepicker-days tr td.current-month";
                    cls.parent = ".e-datepicker-days", cls.child = ".current-month";
                    break;
                case "month": eleClass = "tbody.e-datepicker-months tr td.e-current-month";
                    cls.parent = ".e-datepicker-months", cls.child = ".e-current-month";
                    break;
                case "year": eleClass = "tbody.e-datepicker-years tr td.e-current-year";
                    cls.parent = ".e-datepicker-years", cls.child = ".e-current-year";
                    break;
                case "yearall": eleClass = "tbody.e-datepicker-allyears tr td.e-current-allyear";
                    cls.parent = ".e-datepicker-allyears", cls.child = ".e-current-allyear";
                    break;
            }
            if (t.row <= 0 && t.col <= 0) {
                this._removeCurrentMonthFromHideDate();
                return this.sfCalendar.find(eleClass + ':first');
            }
            var cell, proxy = this;
            switch (key) {
                case 36:
                    return this.sfCalendar.find(eleClass + ':first');
                case 35:
                    return this.sfCalendar.find(eleClass + ':last');
                case 38:
                    if (ctrlKey && this.model.allowDrillDown) {
                        this._forwardNavHandler();
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 1) {
                        cell = this._findVisible(t, cls, "up");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                case 37:
                    if (ctrlKey) {
                        this._processNextPrevDate(true);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 1) {
                        cell = this._findVisible(t, cls, "left");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                    }
                    return cell;
                case 39:
                    if (ctrlKey) {
                        this._processNextPrevDate(false);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 1) {
                        cell = this._findVisible(t, cls, "right");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                    }
                    return cell;
                case 40:
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls);
                        if (cell.length <= 1) {
                            cell = this._findVisible(t, cls, "down");
                            if (cell !== null) return cell;
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                    }
                case 13:
                    var tclassName = $("table", this.sfCalendar).get(0).className, ele, element;
                    ele = this._getCell(t, cls); element = $(ele)[0];
                    if (tclassName == "e-dp-viewmonths" && this.model.startLevel == "year" && this.model.depthLevel == "year") {
                        this._dateValue = new Date(this._dateValue.setMonth(parseInt(element.attributes["data-index"].value)));
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else if ((tclassName == "e-dp-viewyears" && this.model.startLevel == "decade" && this.model.depthLevel == "decade") ||
                        (tclassName == "e-dp-viewallyears" && this.model.startLevel == "century" && this.model.depthLevel == "century")) {
                        this._dateValue = new Date(this._dateValue.setFullYear(parseInt(element.innerHTML)));
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else if (tclassName == "e-dp-viewdays") {
                        this._backwardNavHandler(ele);
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else
                        this._backwardNavHandler(ele);
                    break;
            }
            return this._getCell(t, cls);
        },
        _findVisible: function (t, cls, key) {
            var cols = t.col, rows = t.row, requiredClass = cls.child.slice(1, cls.child.length);
            for (var i = 0; i >= 0; i++) {
              var nextElement = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
                if (nextElement.length <= 0) {
                    return null;
                }
                if (nextElement.hasClass('e-hidedate') || !nextElement.is(":visible")) {
                    key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
                    if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                    // Column exceeds the range. 
                    if (cols > this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
                        //move to next row and select first column
                        rows++;
                        cols = 1;
                    }
                    if (cols <= 0) {
                        //move to previous row and select last column
                        rows--;
                        cols = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
                    }
                    // Row exceeds the range.
                    if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                } else if (nextElement.hasClass('other-month')) {
                    return null;
                } else if (nextElement.hasClass(requiredClass)) {
                    t.col = cols; t.row = rows;
                    return nextElement;
                }
            }
        },
        _getCell: function (t, cls) {
            return this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child + ':nth-child(' + t.col + ')');
        },
        _getDateObj: function (element) {
            return new Date(element.attr("data-date"));
        },
        _touchCalendar: function (e) {
            var tableClass = this.sfCalendar.find('table')[0].className;
            switch (e.type) {
                case "pinchin":
                    if (tableClass != "e-dp-viewdays")
                        this._keyboardNavigation({ keyCode: 13 });
                    break;
                case "pinchout":
                    if (tableClass != "e-dp-viewallyears" && this.model.allowDrillDown)
                        this._forwardNavHandler();
                    break;
                case "swipeleft":
                    this._processNextPrevDate(false);
                    break;
                case "swiperight":
                    this._processNextPrevDate(true);
                    break;
            }
        },

        show: function (e) {
            if (ej.isNullOrUndefined(this.sfCalendar)) this._renderPopup();
            if (this._isOpen) return false;
            var proxy = this;
            this._popupOpen = true;
            $(this.element).attr("aria-expanded", true);
            var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
            if (!this.model.enabled) return;
            if (!this.model.displayInline) this._setDatePickerPosition();
            if (this._trigger("beforeOpen", { element: this.sfCalendar, events: e })) return false;
            this.sfCalendar.attr({ 'aria-hidden': 'false' });
            proxy._isOpen = true;
            this.sfCalendar.slideDown(this.model.enableAnimation ? this.animation.open.duration : 0, function () {
                if (proxy.model && !proxy.model.displayInline)
                    $(document).on("mousedown", $.proxy(proxy._onDocumentClick, proxy));
            });
            if (this._isIE8) {
                if (this.element.val() && this._compareDate(new Date(this.element.val()), previous)) this._updateInputVal();
            }
            else this._updateInputVal();
            this._refreshLevel(previous);
            this._trigger("open", { prevDate: previous, date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
            $(window).on("resize", $.proxy(this._OnWindowResize, this));
            if (!this.model.displayInline) {
              this._on(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
              this._on(ej.getScrollableParents(this.wrapper), "touchmove", this.hide);
			}
            this._isInputBox && this.wrapper.addClass("e-active");
            if (this.model.value != null) {
                $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".e-active")).attr("id"));
            } else {
                $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".today")).attr("id"));
            }
        },


        hide: function (e) {
            if (!this._isOpen || this._getInternalEvents) return false;
            if (this._trigger("beforeClose", { element: this.sfCalendar, events: e })) return false;
            var proxy = this;
            this._popupOpen = false;
            $(this.element).attr("aria-expanded", false);
            this.sfCalendar.attr({ 'aria-hidden': 'true' });
            if (this._popClose && e != undefined && e.type != "click") {
                return;
            }
            this.sfCalendar.slideUp(this.model.enableAnimation ? this.animation.close.duration : 0, function () {
                proxy._isOpen = false;
                $(document).off("mousedown", $.proxy(proxy._onDocumentClick, proxy));
                proxy._setWaterMark();
            });
            if (this.element.val() != "") this._validateInputVal();
            this._trigger("close", { prevDate: this._prevDate, date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
            $(window).off("resize", $.proxy(this._OnWindowResize, this));
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            this._off(ej.getScrollableParents(this.wrapper), "touchmove", this.hide);
            this._isInputBox && this.wrapper.removeClass("e-active");
            if (this.model.value) {
                $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".e-active")).attr("id"));
            } else {
                $(this.element).removeAttr("aria-activedescendant");
            }
            
        },


        enable: function () {
            this.model.enabled = true;
            this.wrapper && this.wrapper.removeClass('e-disable');
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this.element.prop("disabled", false);
            if (this.dateIcon) this.dateIcon.removeClass('e-disable').attr({ "aria-disabled": false });
            if (this._isIE8 && this.dateIcon) this.dateIcon.children().removeClass("e-disable");
            this.element.prop("disabled", false);
            if (!this._isSupport)
                this._hiddenInput.prop("disabled", false);
            this.sfCalendar && this.sfCalendar.removeClass('e-disable').attr({ "aria-disabled": false });
        },


        disable: function () {
            this.model.enabled = false;
            this.wrapper && this.wrapper.addClass('e-disable');
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this.element.attr("disabled", "disabled");
            if (this.dateIcon) this.dateIcon.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isIE8 && this.dateIcon) this.dateIcon.children().addClass("e-disable");
            this.element.attr("disabled", "disabled");
            if (!this._isSupport)
                this._hiddenInput.attr("disabled", "disabled");
            this.sfCalendar && this.sfCalendar.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isOpen) {
                if (this.element.is(':input')) this.element.blur();
                if (!this.model.displayInline) this.hide();
            }
        },

        getValue: function () { return this._formatter(this.model.value, this.model.dateFormat); },

        _wireCalendarEvents: function () {
            this._allowQuickPick(this.model.allowDrillDown);
            this._on($('.e-next', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));
            this._on($('.e-prev', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));
            if (!this.model.displayInline) {
                this.sfCalendar.on("mouseenter touchstart", $.proxy(function () { this._popClose = true; }, this));
                this.sfCalendar.on("mouseleave touchend", $.proxy(function () { this._popClose = false; }, this));
            }
            if (this.model.showFooter)
                this._on($('.e-footer', this.sfCalendar), "click", this._setCurrDate);
            this.sfCalendar && this._on(this.sfCalendar, "pinchin pinchout swipeleft swiperight", $.proxy(this._touchCalendar, this));
        },

        _wireEvents: function () {
            if (this.element.is(":input") && (this.model.allowEdit)) {
                this._on(this.element, "blur", this._onFocusOut);
                this._on(this.element, "focus", this._onFocusIn);
                this._on(this.element, "keydown", this._onKeyDown);
            }

            if (!this.model.allowEdit) {
                this.element.attr("readonly", "readonly");
                this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
            }
        },
        _bindDateButton: function () {
            this._on(this.dateIcon, "mousedown", this._showDatePopUp);
            if (this.model.allowEdit)
                this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
        },
        _bindInputEvent: function () {
            this._off(this.dateIcon, "mousedown", this._showDatePopUp);
        },

        _specificFormat: function () {
            var parseInfo = ej.globalize._getDateParseRegExp(ej.globalize.findCulture(this.model.locale).calendar, this.model.dateFormat);
            return ($.inArray("dddd", parseInfo.groups) > -1 || $.inArray("ddd", parseInfo.groups) > -1)
        },

        _onFocusOut: function (e) {
            this._isFocused = false;
            var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
			if(this.model.enableStrictMode && this.element.val() && !isNaN(+new Date(this.element.val()))){
				this._formatArray = this.model.dateFormat.split(this._getSeparator());
				this._valArray = this.element.val().split(this._getSeparator());
				for(var i = 0; i < this._formatArray.length ; i++){
					if(this._formatArray[i].startsWith("y") && this._valArray.length > 1){
						if((this._formatArray[i].length == 4 && this._valArray[i].length == 2) || (this._formatArray[i].length == 2 && this._valArray[i].length == 2)){
							this._valArray[i] = (parseInt(this._valArray[i]) + 2000).toString();
							this.element.val(this._valArray.join(this._getSeparator()));
						}
					}
				}
				
			}
            this._validateOnFocusOut(this._validateValue(), e);
            this.wrapper.removeClass("e-focus");
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
            if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
            if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) { this._validateInputVal(); }
            this.element.off("keydown", $.proxy(this._keyboardNavigation, this));
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            var _currentVal = this.element.val();
            var data = { prevDate: this._prevDate, value: _currentVal };
            if (this._specificFormat()) {
                if (this._prevDate != _currentVal)
                    this._setDateValue(_currentVal, true);
            }
            else
                this._setDateValue(_currentVal);
            if (!this.model.value) this._clearSelected();
            this._trigger("focusOut", data);
            this._checkErrorClass();
        },
        _onFocusIn: function (e) {
            if (this._isSupport) {
                e.preventDefault();
                this._isFocused = true;
            }
            this.wrapper.removeClass('e-error');
            this.isValidState = true;
            this.wrapper.addClass("e-focus");
            this.wrapper.addClass('e-valid');
            if (this.model.readOnly)
                return;
            if (!this._isSupport) this._hiddenInput.css("display", "none");
            this.element.on("keydown", $.proxy(this._keyboardNavigation, this));
            if (!this.model.showPopupButton && !this.model.readOnly) this.show(e);
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
            this._trigger("focusIn", { date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
        },
        _elementClick: function (e) {
            if (!this._popupOpen) this.show(e);
        },
        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport)
                this._hiddenInput.css("display", "none");
        },
        _refreshPopup: function () {
            this._refreshDatepicker();
            this._startLevel(this.model.startLevel);
        },
        _weekDate: function (currentDate) {
            var time, checkDate = new Date(currentDate.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;

        },
        _refreshLevel: function (previous) {
            if ((this.model.startLevel == this.model.depthLevel) && this.model.startLevel != "month") {
                var val = this._stringToObject(this.element.val());
                val = this._validateYearValue(val);
                if (val)
                    if (!this._compareDate(previous, val))
                        this._refreshPopup();
            }
        },
        _validateOnFocusOut: function (val, e) {
            var dateVal = this._preValue != null ? this._calendarDate : this._preValue;
            var calenderDate = this._formatter(dateVal, this.model.dateFormat);
			this._prevDate = this._formatter(this._preValue, this.model.dateFormat);
			var _currentVal = calenderDate;
            var data = { prevDate: this._prevDate, value: _currentVal, isInteraction: !!e };
            if (this._specificFormat() && (val > this.model.minDate) && (val < this.model.maxDate)) {
                if (val == null) this.model.value = dateVal
                else {
                    this.model.value = val;
                    var currDate = this._formatter(val, this.model.dateFormat, this.model.locale);
                }
            }
            else var currDate = this._formatter(this._parseDate((this._formatter(new Date(), "MM/dd/yyyy"))), this.model.dateFormat);
            var dateChange = false, valueExceed = false;
            if (val != null && !this.model.enableStrictMode) {
                if (ej.isNullOrUndefined(this.model.value))
                    this.model.value = this._parseDate(this.element.val());
                if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
                if (!this.model.enableStrictMode) {
                    if (val) {
                        if ((val < this.model.minDate) || (val > this.model.maxDate)) {
                            dateChange = true,
                            this._calendarDate = val = val < this.model.minDate ? this.model.minDate : this.model.maxDate
                        }
                    }
                    else {
                        this.element.val("");
                        if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                        else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                    }
                    this.isValidState = true;
                }
                if (dateChange) this.element.val(this._formatter(val, this.model.dateFormat));
                if (!this._compareDate(this._preValue, this._parseDate(this.element.val(), true))) this._triggerChangeEvent(e);
            }
            else if (val == null && !this.model.enableStrictMode) {
                if (this._preTxtValue == null || this.element.val() == "") {
                    this.element.val("");
                    if (!this._isSupport) this._hiddenInput.css("display", "block");
                } else
                    this.element.val(calenderDate);
                this._triggerChangeEvent(e);
				if(this.model.value != null)
				this._trigger("change", data);
            }
            else {
                if (val) {
                    if ((val < this.model.minDate) || (val > this.model.maxDate)) {
                        this.isValidState = false, valueExceed = true,
                        this._calendarDate = val < this.model.minDate ? this.model.minDate : this.model.maxDate
                    }
                    else
                        this.isValidState = true;
                    this._triggerChangeEvent(e);
                    if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
                }
                else {
                    this.isValidState = false;
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
        },
        _onKeyDown: function (e) {
            if (e.keyCode === 13) {
                var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
                this._validateOnFocusOut(this._validateValue(), e);
                if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
                if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
                if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) { this._validateInputVal(); }
                this._checkErrorClass();
            }
        },
        _showhidePopup: function (e) {
            if (!this.model.enabled) return false;
            if (this._isOpen) {
                if (!this._isFocused && this.element.is(':input') && (!ej.isTouchDevice())) this.element.focus();
                if (!this._cancelValue) this.hide(e);
            }
            else {
                if (!this._isFocused && this.element.is(':input') && (!ej.isTouchDevice())) this.element.focus();
                this.show(e);
            }
        },
        _compareDate: function (first, second) {
            var result = (+first === +second) ? true : false;
            return result;
        },
        _validateDate: function (val) {
            var result = true;
            if (val != null) {
                for (var i = 0; i < this.model.blackoutDates.length; i++) {
                    var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                    if (dateObj && +val === +dateObj)
                        result = false;
                }
                if ((val < this.model.minDate || val > this.model.maxDate) && this.model.enableStrictMode) {
                    result = false;
                    this.isValidState = false;
                }
            }

            return result;
        },

        _triggerChangeEvent: function (e) {
            var currentValue;
            var _currentVal = this.element.val() == "" ? null : this.element.val();
            this._prevDate = this._formatter(this._preValue, this.model.dateFormat);
            var data = { prevDate: this._prevDate, value: _currentVal, isInteraction: !!e };
            if (this._specificFormat() && e != undefined && e.type == "keydown" && this._formatter(this._preValue, this.model.dateFormat, this.model.locale) != this.element.val())
                currentValue = this._parseDate(this.element.val(), true);
            else if ((this._specificFormat() && e != undefined && e.type == "blur"))
                currentValue = this.model.value;
            else currentValue = this._parseDate(_currentVal);
            currentValue = this._validateYearValue(currentValue);
            if (!this._validateDate(currentValue)) currentValue = null;
            if (!this._compareDate(this._preValue, currentValue)) {
                this._preValue = this.model.value = currentValue;
                data.value = this._formatter(this.model.value, this.model.dateFormat);
                if (this.model.value) this._clickedDate = this._calendarDate = this.model.value;
                if (this.model.displayInline && !this._isInputBox) this._hiddenInput.attr('value', _currentVal);
                if (!this.model.value && !this.model.enableStrictMode) this._setDateValue(this.model.value);
                data.value = _currentVal;
                this._trigger("_change", data);
                data.value = this._formatter(this.model.value, this.model.dateFormat);
                this._trigger("change", data);
                this._checkErrorClass();
            }
            else if (!(this.element.val() == "" && this._prevDate == null) && this.element.val() != this._prevDate) {
                data.value = this.element.val();
                this._trigger("_change", data);
            }
        },

        _triggerSelectEvent: function (e) {
            var val = this.element.val();
            if (this._parseDate(val)) {
                var data = { prevDate: this._prevDate, date: this.model.value, value: val, isSpecialDay: this._isSpecialDates(this.model.value) };
                if (this._prevDate != val) {
                    if (this._parseDate(data.value) && (this.model.value >= this.model.minDate && this.model.value <= this.model.maxDate)) {
                        this._cancelValue = this._trigger("select", data);
                    }
                }
                if (this._dt_drilldown) this._trigger("dt_drilldown", data);
            }
            if (this.model.value) {
                $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".e-active")).attr("id"));
            }
        },

        _onDocumentClick: function (e) {
            if (this.model) {
                if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-popup").is(this.popup) &&
                    !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datewidget").is(this.wrapper)) {
                    this.hide(e);
                }
                else if ($(e.target).is(this.popup) || $(e.target).parents(".e-popup").is(this.popup)) {
                    e.preventDefault();
                }
            }
        },

        _OnWindowResize: function (e) {
            if (this.sfCalendar) this._setDatePickerPosition();
        },

        _showDatePopUp: function (e) {
            var isRightClick = false;
            if (e.button)
                isRightClick = (e.button == 2);
            else if (e.which)
                isRightClick = (e.which == 3); //for Opera
            if (isRightClick) return;
            if (!this._isSupport && !this.model.showPopupButton) {
                e.preventDefault();
                this._onFocusIn();
            }
            if (this.model.readOnly) return;
            e.preventDefault();
            if (!this.model.enabled && this.model.displayInline) return false;
            this._showhidePopup(e);
        },
        _layoutChanged: function (e) {
            // this event internally used to observe the layout change in "DateTimePicker" control
            if (this._getInternalEvents) this._trigger("layoutChange");
        },
        _setCurrDate: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e) e.preventDefault();
            var proxy = this;
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._dateValue = this._zeroTime(new Date());
            this.model.value = this._calendarDate = new Date(this._dateValue.toString());
            this._setDateValue(this.model.value);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._refreshDatepicker();
            this._changeDayClass();
            this._startLevel(this.model.startLevel);
            this._onSetCancelDateHandler(e);
            this._layoutChanged();
        },
        _changeDayClass: function () {
            var className = this.popup.children("table")[0].className;
            if (className != "e-dp-viewdays") {
                this.popup.children("table").removeClass(className).addClass("e-dp-viewdays");
            }
        },

        _onSetCancelDateHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && ($(e.target).hasClass("e-disable") || $(e.target).hasClass("e-hidedate"))) return false;
            if (e && e.type) e.preventDefault();
            if (this._specificFormat()) this._prevDate = this.element.val();
            else this.model.value = this._parseDate(this.element.val());
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._setDateValue(this._dateValue);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._dateValue = (this.model.value == null)? null:new Date(this.model.value.toString());
            if (this.element.is(':input') && !this.model.displayInline) {
                this._showhidePopup(e);
            }
            if (e && $(e.currentTarget).hasClass("other-month"))
                this._refreshDatepicker();
            this._cellSelection();
        },
        _closeCalendar: function (ele) {
            if (!ele || ele == this.element) {
                this.sfCalendar.empty().remove();
            }
        },
        //Error class for input value validation
        _checkErrorClass: function () {
            if (this.wrapper) {
                if (this.isValidState) this.wrapper.removeClass("e-error");
                else this.wrapper.addClass("e-error");
            }
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        }
    });

    ej.DatePicker.Locale = ej.DatePicker.Locale || {};

    ej.DatePicker.Locale['default'] = ej.DatePicker.Locale['en-US'] = {
        watermarkText: "Select date",
        buttonText: 'Today'
    };


    ej.DatePicker.Header = {
        /**  Removes the day header */
        None: "none",
        /**  Shows the day header format in short like Sun, Mon, Tue … */
        Short: "short",
        /**  Shows the day header format in min like Su, Mo, Tu … */
        Min: "min",
        /**  Shows the day header format in long like Sunday, Monday, Tuesday … */
        Long: "long"
    };

    ej.DatePicker.HighlightSection = {
        /**  Highlight the Current Month. */
        Month: "month",
        /**  Highlight the Current Week. */
        Week: "week",
        /**  Highlight the Current WorkDays. */
        WorkDays: "workdays",
        /** Don't Highlight Anything. */
        None: "none"
    };


    ej.DatePicker.Level = {
        /**  Starts from month level view. */
        Month: "month",
        /**  Starts from year level view. */
        Year: "year",
        /**  Starts from year decade level view. */
        Decade: "decade",
        /**  Starts from century level view.  */
        Century: "century"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to craete a Timepicker with the Html input element
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejTimePicker", "ej.TimePicker", {

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _rootCSS: "e-timepicker",
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },
        _requiresID: true,

        defaults: {

            cssClass: "",

            timeFormat: "",

            value: null,

            enableAnimation: true,

            locale: "en-US",

            htmlAttributes: {},

            readOnly: false,

            showPopupButton: true,

            enableStrictMode: false,

            interval: 30,

            hourInterval: 1,

            minutesInterval: 1,

            secondsInterval: 1,

            height: "",

            width: "",

            minTime: "12:00 AM",

            maxTime: "11:59 PM",

            showRoundedCorner: false,

            enableRTL: false,

            popupHeight: "191px",

            popupWidth: "auto",

            enabled: true,

            enablePersistence: false,

            disableTimeRanges: null,

            validationRules: null,

            validationMessages: null,

            focusIn: null,

            focusOut: null,

            beforeChange: null,

            change: null,

            select: null,

            create: null,

            destroy: null,

            beforeOpen: null,

            beforeClose: null,

            open: null,

            close: null,

            watermarkText:"select a time"
        },


        dataTypes: {
            timeFormat: "string",
            minTime: "string",
            maxTime: "string",
            readOnly: "boolean",
            interval: "number",
            showPopupButton: "boolean",
            locale: "string",
            hourInterval: "number",
            minutesInterval: "number",
            secondsInterval: "number",
            enabled: "boolean",
            enablePersistence: "boolean",
            enableAnimation: "boolean",
            enableStrictMode: "boolean",
            disableTimeRanges: "data",
            htmlAttributes: "data",
            validationRules: "data",
            validationMessages: "data",
            watermarkText:"string"
        },

        observables: ["value"],

        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.element.prop("disabled", false);
                this.model.enabled = true;
                this.wrapper.removeClass('e-disable');
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (this.model.showPopupButton) {
                    this.timeIcon.removeClass("e-disable").attr("aria-disabled", false);
                    if (this.popupList) this.popupList.removeClass("e-disable").attr("aria-disabled", false);
                }
                if (this._isIE8) this.timeIcon.children().removeClass("e-disable");
            }
        },


        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.element.attr("disabled", "disabled");
                this.wrapper.addClass('e-disable');
                this.element.addClass("e-disable").attr("aria-disabled", true);
                if (this.model.showPopupButton) {
                    this.timeIcon.addClass("e-disable").attr("aria-disabled", true);
                    if (this.popupList) this.popupList.addClass("e-disable").attr("aria-disabled", true);
                }
                if (this._isIE8) this.timeIcon.children().addClass("e-disable");
                this._hideResult();
            }
        },


        getValue: function () {
            return this.element.val();
        },


        setCurrentTime: function () {
            if (!this.model.readOnly) this._setMask();
        },
        
        setValue: function (value) {
            var prevValue = this.model.value;
            this.model.value = ej.format(this._createObject(value, true), this.model.timeFormat, this.model.locale);
            this._ensureValue();
            this._enableMask();
            if (this.model.enableStrictMode && !this._isValid(value, true)) {
                    var tval = this._isValid(this.model.value) ? this._localizeTime(this.model.value) : this.model.value;
                     this.element.val(tval);
            }
            if (prevValue != this.model.value) {
                this._raiseChangeEvent(prevValue, true);
            }
            this._checkErrorClass();
        },

        show: function () {
            (!this.showDropdown && !this._getInternalEvents) && this._showResult();
        },

        hide: function () {
            (this.showDropdown) && this._hideResult();
        },


        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },

        _timeFormat: function (format) {
            if (!format)
                format = ej.preferredCulture(this.model.locale).calendars.standard.patterns.t;
            var validatedformat = this._validateTimeFormat(format);
            if (validatedformat) {
                this.model.timeFormat = validatedformat;
                // Only change the format when model is not null.   
                this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
                this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);

                if (this.model.value) {
                    this._setModelOption = true;
                    this.model.value = this._localizeTime(this.model.value);
                    this.element.val(this.model.value);
                }
                else {
                    this._setModelOption = false;
                    var timeValue = this._localizeTime(this.element.val());
                    if (timeValue && this._checkMinMax(timeValue)) {
                        this.model.value = timeValue;
                        this.element.val(timeValue);
                    }
                }
            }
            return validatedformat;
        },

        _getTimeFormat: function () {
            if (this._prevTimeFormat)
                this.model.timeFormat = ej.preferredCulture(this.model.locale).calendar.patterns.t || "h:mm tt";
            this.seperator = this._getSeperator();
        },

        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            if (this.popupList) this.popupList.removeClass(this.model.cssClass).addClass(skin);
        },

        _localize: function (culture) {
            var currentTime = this._createObject(this.model.value, true);
            this.model.locale = culture;
            this._getTimeFormat();

            this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
            this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            if (currentTime) {
                this.model.value = this._localizeTime(currentTime);
                this.element.val(this.model.value);
            }
            else {
                currentTime = this._localizeTime(this.element.val());
                if (currentTime && this._checkMinMax(currentTime)) {
                    this.model.value = currentTime;
                    this.element.val(currentTime);
                }
            }
            this._getAmPm();
        },
        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this._localizedLabels.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "") {
                    this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
                }
                else {
                    $(this.element).attr("placeholder", this._localizedLabels.watermarkText);
                }
                return true;
            }
        },
        _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            this.model.buttonText = this._localizedLabels.buttonText;
        },
        _setLocalize: function (culture) {
            var culture = ej.preferredCulture(culture);
            if (culture) {
                this.model.locale = culture.name == "en" ? "en-US" : culture.name;
                if (!ej.isNullOrUndefined(this._options) && (ej.isNullOrUndefined(this._options.timeFormat) || (!this._options.timeFormat)))
                    this.model.timeFormat = ej.preferredCulture(this.model.locale).calendars.standard.patterns.t;
                    this._prevTimeFormat = (ej.isNullOrUndefined(this._options.timeFormat)||this._options.timeFormat=="") ? true : false;
            }
        },
        _updateInput: function () {
            if (ej.isNullOrUndefined(this._options)) return;
            var value = this._localizeTime(this._options.value);
            if (!ej.isNullOrUndefined(value))
                if (typeof value === "string" && this.model.enableStrictMode && !this.model.value) {
                    this.element.val(this._options.value);
                    this.isValidState = (this.element.val() == "") ? true : false;
                    this._checkErrorClass();
                }
        },
        _createMinMaxObj: function () {
            // create minTime object
            this._minTimeObj = this._createObject(this.model.minTime);
            if (!this._minTimeObj)
                this.model.minTime = ej.format(this._createObject(new Date().setHours(0, 0, 0, 0)), this.model.timeFormat, this.model.locale);

            // create maxTime object
            this._maxTimeObj = this._createObject(this.model.maxTime);
            if (!this._maxTimeObj)
                this.model.maxTime = ej.format(this._createObject(new Date().setHours(23, 59, 59, 59)), this.model.timeFormat, this.model.locale);
        },
        _setMinMax: function () {
            var minVal = new Date().setHours(0, 0, 0, 0);
            var maxval = new Date().setHours(23, 59, 59, 59);
            if (!ej.isNullOrUndefined(this._options) && ej.isNullOrUndefined(this._options.minTime))
                this.model.minTime = ej.format(this._createObject(minVal), this.model.timeFormat, this.model.locale);
            if (!ej.isNullOrUndefined(this._options) && ej.isNullOrUndefined(this._options.maxTime))
                this.model.maxTime = ej.format(this._createObject(maxval), this.model.timeFormat, this.model.locale);
            this._createMinMaxObj();
        },
        _init: function (options) {
            this._options = options;
            this._cloneElement = this.element.clone();
            this._ISORegex();
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._initialize();
            this._render();
            this._wireEvents();
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
            this._updateInput();
            this._updateTextbox();
            if (this.model.validationRules != null) {
                this._initTimeValidator();
                this._setTimeValidation();
            }

        },
        _updateTextbox: function () {
            if (this._options.disableTimeRanges) {
                var isValid = true;
                for (var i = 0; i < this._options.disableTimeRanges.length; i++) {
                    if (this.model.minTime >= this._options.disableTimeRanges[i].startTime || this.model.minTime <= this._options.disableTimeRanges[i].endTime) {
                        if ((this._options.disableTimeRanges[i].startTime == this.model.minTime)) {
                            isValid = false;
                            break;
                        }
                    }
                }

                if (this._options === undefined || (this._options.value === undefined && !this.model.value && isValid))
                    this._setTime(this._localizeTime(this.model.minTime));
            }

            else if (this._options === undefined || (this._options.value === undefined && !this.model.value))
                this._setTime(this._localizeTime(this.model.minTime));
        },

        _setMinMaxTime: function (prev, options) {
            if (!ej.isNullOrUndefined(options["minTime"]) && $.trim(options["minTime"]) && this._isValid(options["minTime"])) {
                this.model.minTime = options["minTime"];
                this._minTimeObj = this._createObject(this.model.minTime);
                this._validateTimes();
            }
            if (!ej.isNullOrUndefined(options["maxTime"]) && $.trim(options["maxTime"]) && this._isValid(options["maxTime"])) {
                this.model.maxTime = options["maxTime"];
                this._maxTimeObj = this._createObject(this.model.maxTime);
                this._validateTimes();
            }

            this._validateMinMax();
            this._createMinMaxObj();
            if (!ej.isNullOrUndefined(options["minTime"])) options["minTime"] = this.model.minTime;
            if (!ej.isNullOrUndefined(options["maxTime"])) options["maxTime"] = this.model.maxTime;
            if (!this._checkMinMax(this.model.value)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                        this.model.value = this.model.minTime;
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                        this.model.value = this.model.maxTime;
                }
                else {
                    this.isValidState = false;
                    this.model.value = null;
                }
            }
            if (prev !== this.model.value && this._isValid(this.model.value, true))
                this.element.val(this.model.value);
        },
        _setModel: function (options) {
            var change = false, prev = this.model.value;
			
            for (var option in options) {
			if(option != "height" && option != "width" && option != "htmlAttributes" && option != "watermarkText" && option != "enabled" && option != "validationRules" && option != "validationMessages"){
				if (ej.isNullOrUndefined(this.popupList)) this._renderDropdown();
			}
                switch (option) {
                    case "timeFormat":
                        var prevTime = this._createObject(this.model.value);
                        this._preTimeformat = this.model.timeFormat;
                        var newFormat = this._timeFormat(options[option]);
                        options[option] = this.model.timeFormat;
                        if (newFormat)
                            this.seperator = this._getSeperator();
                        var currentTime = this._createObject(this.model.value);
                        change = (+prevTime === +currentTime) ? false : true;
                        break;
                    case "locale":
                        var prevTime = this._createObject(this.model.value);
                        this._localize(options[option]);
                        this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
                        this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);
                        var currentTime = this._createObject(this.model.value);
                        change = (+prevTime === +currentTime) ? false : true;
                        break;
                    case "interval":
                        this.model.interval = options[option];
                        break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "height":
                        this._setHeight(options[option]); break;
                    case "width":
                        this.wrapper.width(options[option]);
                        this._setListWidth();
                        break;
                    case "value":
                        if (ej.isPlainObject(options[option])) options[option] = null;
                        this.model.value = ej.format(this._createObject(options[option], true), this.model.timeFormat, this.model.locale);
                        this._ensureValue();
                        this._enableMask();
                        if (this.model.enableStrictMode && !this._isValid(options[option], true)) {
                            var tval = this._isValid(options[option]) ? this._localizeTime(options[option]) : options[option];
                            this.element.val(tval);
                        }
                        options[option] = this.model.value;
                        change = true;
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initTimeValidator();
                            this._setTimeValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initTimeValidator();
                            this._setTimeValidation();
                        }
                        break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "enabled": if (options[option]) this.enable(); else this.disable(); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "disableTimeRanges":
                        this.model.disableTimeRanges = options[option];
                        this._initStartEnd();
                        this.model.value = ej.format(this._createObject(this.element.val(), true), this.model.timeFormat, this.model.locale);
                        this._ensureValue();
                        this._enableMask();
                        if (this.model.enableStrictMode && !this._isValid(this.element.val(), true))
                            this.element.val(this.element.val());
                        change = true;
                        break;
                    case "watermarkText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options[option] = this.model.watermarkText = options[option];
                        this._localizedLabels.watermarkText = this.model.watermarkText;
                        this._setWaterMark();
                        break;
                }
            }
            if (!ej.isNullOrUndefined(options["minTime"]) || !ej.isNullOrUndefined(options["maxTime"])) {
                this._setMinMaxTime(prev, options);
                change = true;
            }
            if (!ej.isNullOrUndefined(options["showPopupButton"]))
                this._showButton(options[option]);
            else if (this.model.showPopupButton && (newFormat || !ej.isNullOrUndefined(options["minTime"]) || !ej.isNullOrUndefined(options["maxTime"]) ||
                   !ej.isNullOrUndefined(options["locale"]) || !ej.isNullOrUndefined(options["interval"]) || !ej.isNullOrUndefined(options["disableTimeRanges"]))) {
                this._reRenderDropdown();
            }
            if (change) {
                this._raiseChangeEvent(prev, true);
                options["value"] = this.model.value;
            }
            this._checkErrorClass();
        },


        _destroy: function () {
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-input").removeAttr("ondragstart draggable aria-atomic aria-live aria-readonly").val(this.element.attr("value"));
            if (!this._cloneElement.attr('name')) this.element.removeAttr('name');
            if (this.popupList) this.popupList.remove();
        },

        _initialize: function () {
            this.target = this.element[0];
            this.timeIcon = null;
            this._disabledItems = [];
            this.popupList = null;
            this.focused = false;
            this.start = 0;
            this.end = 0;
            this.min = null;
            this.max = null;
            this.incomplete = false;
            this.downPosition = 0;
            this._setLocalize(this.model.locale);
            this._setMinMax();
            this._getAmPm();
            this.showDropdown = false;
            this._activeItem = 0;
            this.isValidState = true;
            this._manualFocus = false;
            this._isIE7 = this._checkIE7();
            this._initStartEnd();
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this.element[0].value;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            // _getInternalEvents is used when TimePicker used as a subcontrol of DateTimePicker 
            this._getInternalEvents = false;
            this._dateTimeInternal = false;
            if (!this.model.timeFormat) this._getTimeFormat();
            else this.seperator = this._getSeperator();
        },

        _render: function () {
            this._renderWrapper();
            this._setDimentions();
            this._renderTimeIcon();
            this._validateTimes();
            this._createMinMaxObj();
            this._addAttr(this.model.htmlAttributes);
            this._checkProperties();
            this._enableMask();
            this._checkErrorClass();
            this.element.attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "aria-readonly": this.model.readOnly, "value": this.model.value });
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.addClass('e-valid') : this.wrapper.removeClass('e-valid');
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr({'tabindex':'0','role':'combobox','aria-expanded':'false'});
            this.wrapper = ej.buildTag("span.e-timewidget e-widget " + this.model.cssClass + "#" + this.target.id + "_timewidget").insertAfter(this.element);
            this.wrapper.attr("style", this.element.attr("style"));
            this.element.removeAttr('style');
            if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
            if (!this._isSupport) {
                this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                this._hiddenInput.val(this._localizedLabels.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                $(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
                else if (keyName == "style") proxy.wrapper.attr(key, value);
                else if (keyName == "id") {
                    proxy.wrapper.attr(key, value + "_wrapper");
                    proxy.element.attr(key, value);
                }
                else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);

            });
        },
        _initTimeValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setTimeValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
        _renderTimeIcon: function () {
            if (this.model.showPopupButton) {
                this.timeIcon = ej.buildTag("span.e-select").attr({ 'role': 'button', 'aria-label': 'select' });
                var icon = ej.buildTag("span.e-icon e-clock").attr('role', 'presentation');
                if (this._isIE8) {
                    this.timeIcon.attr("unselectable", "on");
                    icon.attr("unselectable", "on");
                }
                this.timeIcon.append(icon);
                this.container.append(this.timeIcon).addClass("e-padding");
                this._on(this.timeIcon, "mousedown", this._timeIconClick);
            }

        },
        _elementClick: function (e) {
            if (!this.showDropdown) this._showResult();
        },
        _renderDropdown: function () {
            var oldWrapper = $("#" + this.element[0].id + "_popup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            if (this.popupList) return false;
            this.popupList = ej.buildTag("div.e-time-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_popup", "", {}, { 'tabindex': 0, 'role':'listbox'});
            if (!ej.isTouchDevice()) this.popupList.addClass('e-ntouch');
            this.popup = this.popupList;
            this.ul = ej.buildTag("ul.e-ul");
            if (this._isIE8)
                this.ul.attr("unselectable", "on");
            var scrollDiv = ej.buildTag("div").append(this.ul);
            $('body').append(this.popupList.append(scrollDiv));
            this._renderLiTags();
            this._setListHeight();
            this._setListWidth();
            this.popupList.ejScroller({ height: this.popupList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.popupList.ejScroller("instance");
            this.popupList.css("display", "none");
            this._listSize = this.ul.find("li").length;
        },
        _renderLiTags: function () {
            this._disabledItems = [];
            var start, end, timeVal, interval = this.model.interval * 60000;
            // Maintain the min and max time as object;
            var disableTime = (!ej.isNullOrUndefined(this.model.disableTimeRanges) && this.model.disableTimeRanges.length > 0) ? true : false;
            start = this._minTimeObj;
            end = this._maxTimeObj;
            var i = 0;
            while (this._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start);
                var litag = $(document.createElement('li'));
                litag[0].appendChild(document.createTextNode(timeVal));
                if (this._isIE8) litag.attr("unselectable", "on");
                if (disableTime) {
                    if (this._ensureTimeRange(timeVal)) {
                        litag.addClass('e-disable');
                        this._disabledItems.push(i);
                    }
                    else {
                        litag.removeClass('e-disable');
                    }
                }
                this.ul[0].appendChild(litag[0]);
                start = new Date(start).getTime() + interval;
                i++;
            }

            var liTags = this.ul.find("li");
            if (!ej.isTouchDevice()) {
                this._on(liTags, "mouseenter", $.proxy(this._OnMouseEnter, this));
                this._on(liTags, "mouseleave", $.proxy(this._OnMouseLeave, this));
            }
            this._on(liTags, "click", $.proxy(this._OnMouseClick, this));
            if (this.model.showPopupButton || !ej.isNullOrUndefined(this.popupList))
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false,'role':'option' });
        },
        _ensureTimeRange: function (value) {
            if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
                var timeVal = this._makeDateTimeObj(value);
                for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
                    if (+timeVal >= +this._makeDateTimeObj(this.model.disableTimeRanges[i].startTime) && +timeVal <= +this._makeDateTimeObj(this.model.disableTimeRanges[i].endTime))
                        return true;
                }
            }
            return false;
        },
        _initStartEnd: function () {
            this._startTime = [];
            this._endTime = [];
            if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
                for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
                    this._startTime[i] = this._makeDateTimeObj(this.model.disableTimeRanges[i].startTime);
                    this._endTime[i] = this._makeDateTimeObj(this.model.disableTimeRanges[i].endTime);
                }
            }
        },
        _makeDateTimeObj: function (value) {
            if (typeof value === "string") {
                var dateFormat = ej.preferredCulture(this.model.locale).calendar.patterns.d;
                var dateValue = ej.format(new Date("1/1/2000"), dateFormat, this.model.locale);
                var obj = ej.parseDate(dateValue + " " + value, dateFormat + " " + this.model.timeFormat, this.model.locale);
                if (!obj) {
                    var isJSONString = new Date(value);
                    if (!isNaN(Date.parse(isJSONString)) && !ej.isNullOrUndefined(value))
                        return this._setEmptyDate(value);
                    else
                        obj = new Date("1/1/2000 " + value);
                }
                return obj;
            }
            else if (value instanceof Date)
                return this._setEmptyDate(value);
            else return null;
        },
        _reRenderDropdown: function () {
            this.ul.empty();
            this._renderLiTags();
            this._refreshScroller();
            this._changeActiveEle();
        },
        _refreshScroller: function () {
            var flag = this.popupList.css("display") == "none" ? true : false;
            this.popupList.css("height", "auto");
            this.popupList.find(".e-content, .e-vscroll").removeAttr("style");
            this.popupList.find(".e-vscroll div").removeAttr("style");

            if (flag) this.popupList.css("display", "block");
            this.scrollerObj.model.height = this.popupList.height();
            this.scrollerObj.model.scrollTop = 0;
            this.scrollerObj.refresh();
            if (this._isIE8) {
                $("#" + this.scrollerObj._id).children('.e-vscroll').children().attr("unselectable", "on");
                $("#" + this.scrollerObj._id).find('.e-vhandle').attr("unselectable", "on");
            }
            if (flag) this.popupList.css("display", "none");
        },

        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport)
                this._hiddenInput.css("display", "none");
        },

        _setListWidth: function () {
            if (this.popupList) {
                var timePopupWidth = this.model.popupWidth,width;
                if ((typeof (timePopupWidth) == "string" && timePopupWidth.indexOf("%") != -1) || typeof (timePopupWidth) == "string") width = parseInt(timePopupWidth) > 0 ? timePopupWidth : "auto" && (this.model.popupWidth = "auto");
                else {
                    width = timePopupWidth > 0 ? timePopupWidth : "auto" && (this.model.popupWidth = "auto");
                }
                if (width && width != "auto") this.popupList.css({ "width": width });
                else this.popupList.css({ "width": this.wrapper.width() });
            }
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _setListHeight: function () {
            if (this.popupList) this.popupList.css({ "max-height": this.model.popupHeight || "191px" });
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _updateScrollTop: function () {
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
        },
        _refreshPopup: function () {
            if (this.model.popupWidth == "auto") this.popupList.css({ "width": this.wrapper.width() });
            this._setListPosition();
            this._refreshScroller();
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popupList.outerHeight(),
            popupWidth = this.popupList.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupList.outerWidth() - elementObj.outerWidth();
            this.popupList.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popupList);
        },

        _enableMask: function () {
            var flag = false;
            if ((this.model.minTime && this._compareTime(this.model.minTime, this.model.value)) ||
                this.model.maxTime && this._compareTime(this.model.value, this.model.maxTime))
                this.isValidState = false;
            else this.isValidState = true;
            this._setTime(this.model.value);
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            if (this._getInternalEvents && !this.isValidState) this._trigger("outOfRange");
            this._changeActiveEle();
            this._preVal = this.element.val();
        },
        _setTime: function (time) {
            var modifiedTime = this._localizeTime(time);
            this.element.val(modifiedTime);
            if (this.model.enableStrictMode) {
                this.model.value = (this._compareTime(this.model.value, this.model.minTime, true) && this._compareTime(this.model.maxTime, this.model.value, true)) ? modifiedTime : null;
            } else {
                this.model.value = modifiedTime;
            }
            this._setWaterMark();
        },
        _timeFromISO: function (date) {
            var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            var char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _setMask: function () {
            this.model.value = new Date();
            this._enableMask();
        },

        _validateTimes: function () {
            var validatedformat = this._validateTimeFormat(this.model.timeFormat);
            if (validatedformat) this.model.timeFormat = validatedformat;
            else this.model.timeFormat = "h:mm tt";
            if (!this._isValid(this.model.minTime)) this.model.minTime = "12:00 AM";
            if (!this._isValid(this.model.maxTime)) this.model.maxTime = "11:59 PM";
            if (!this._isValid(this.model.value, true)) this.model.value = null;
            if (!this._checkMinMax(this.model.value) && !this.model.enableStrictMode) {
                if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                    this.model.value = this.model.minTime;
                if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                    this.model.value = this.model.maxTime;
            }
            this._validateMinMax();
        },
        _ensureValue: function () {
            if (!this._checkMinMax(this.model.value) && this._isValid(this.model.value, true)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                        this.model.value = this.model.minTime;
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                        this.model.value = this.model.maxTime;
                }
                else
                    this.isValidState = false;
            }
        },
        _validateMinMax: function () {
            if (this.model.minTime && this.model.maxTime && this._compareTime(this.model.minTime, this.model.maxTime)) {
                this.model.minTime = this.model.maxTime;
            }
        },
        _checkProperties: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.disable();
            }
            else if (this.model.enabled && this.element.hasClass("e-disable")) {
                this.model.enabled = false;
                this.enable();
            }
            this._addProperty();
            this._checkAttributes();
        },
        _addProperty: function () {
            this._setRtl(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                if (this.popupList) this.popupList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                if (this.popupList) this.popupList.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner");
                if (this.popupList) this.popupList.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if (this.popupList) this.popupList.removeClass("e-corner");
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderTimeIcon();
                this._renderDropdown();
                this._addProperty();
            }
            else {
                this.container.removeClass("e-padding");
                this.timeIcon.remove();
                this.popupList.remove();
                this.timeIcon = this.popupList = null;
                $(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
            }
        },
        _checkAttributes: function () {
            if (!this.element.attr("name"))
                this.element.attr({ "name": this.element[0].id });
            if ('ondragstart' in document.createElement('input'))
                this.element.attr({ "ondragstart": "return false" });
            if ('draggable' in document.createElement('input'))
                this.element.attr({ "draggable": "false" });
        },

        _getAmPm: function () {
            var dateObj = new Date();
            dateObj.setHours(0);
            this.ttAM = $.trim(this._localizeMeridian(dateObj));
            dateObj.setHours(23);
            this.ttPM = $.trim(this._localizeMeridian(dateObj));
        },

        _setDimentions: function () {
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this._setHeight(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
        },
        _setHeight: function (height) {
            if (height) this.wrapper.height(height);
            if (this._isIE7) this.element.height(this.container.height());
        },

        _validateTimeFormat: function (timeFormat) {
            var parts = timeFormat.split(" "), format = "";
            if (parts.length == 1 || parts.length == 2) {
                $(parts).each(function (i, part) {
                    format += $.trim(part) + " ";
                });
                return $.trim(format);
            }
            else return null;
        },

        _getSeperator: function () {
            var p = this._getElePlace(), formats = this._formatparts[p.time];
            var regex = new RegExp("^[a-zA-Z0-9]+$");

            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats.charAt(i))) return formats.charAt(i);
            }
        },

        _checkInComplete: function () {
            var pos = this._getCaretSelection(), cursor = this._getStartEnd(pos);
            var replace = "00", selected = this._getSelectedValue(cursor), category = this._getCategory(cursor);
            if (pos.end - pos.start == this.element.val().length) this._checkAll();

            if (category && category != "tt") {
                this._findCategoryPosition(category);
                if (selected == "__") {
                    if (category == "h" || category == "hh") replace = "12";
                    this._changeToDefault(replace);
                }
                else if (category.length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.target.value, this.start, this.end, selected));
                }
            }
        },
        _checkAll: function () {
            var i, p = this._getElePlace(), categories = this._formatparts[p.time].split(this.seperator);
            for (i = 0; i < categories.length; i++) {
                this._findCategoryPosition(categories[i]);
                var selected = this._getSelectedValue({ start: this.start, end: this.end });

                if (categories[i].length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.element.val(), this.start, this.end, selected));
                }
            }
        },

        _changeToDefault: function (replace) {
            this.incomplete = true;
            var preVal = this.element[0].value
            this.element[0].value = this._replaceAt(this.target.value, this.start, this.end, replace);
            var timeValue = this._checkExceedRange(this.target.value);
            if (!!timeValue) {
                this._setTime(this.model[timeValue]);
            }
            this._setSelection(this.start, this.end);
            this._raiseChangeEvent(preVal);
        },

        _setSelection: function (start, end) {
            var element = this.element[0];

            if (element.setSelectionRange)
                element.setSelectionRange(start, end);
            else if (element.createTextRange) {
                // For lower version browsers (IE8, IE7 ...)
                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', end);
                element.moveStart('character', start);
                element.select();
            }
        },

        _getSelectedValue: function (cursor) {
            return this.target.value.substring(cursor.start, cursor.end);
        },

        _getMinMax: function (currPart, keydown) {
            if (currPart == "hh" || currPart == "h") {
                this.min = 1; this.max = 11;
                if (keydown) this.max = 12;
            }
            else if (currPart == "HH" || currPart == "H") {
                this.min = 0; this.max = 23;
            }
            else if (currPart == "mm" || currPart == "m" || currPart == "ss" || currPart == "s") {
                this.min = 0; this.max = 59;
            }
        },

        _focusElement: function () {
            this._manualFocus = true;
            this.element.focus();
        },
        _targetFocus: function (e) {
            this._clearRange();
            e.preventDefault();
            this.focused = true;
            this.element.on('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
            this.wrapper.addClass("e-focus").removeClass("e-error").attr('aria-invalid', "false");
            this._getExactPostions();
            if (!this._manualFocus) {
                this._findCategoryPosition(this._getLeast(false));
                this._setSelection(this.start, this.end);
            }
            this._manualFocus = false;
            this._prevTimeVal = this.element.val();
            this._raiseEvent("focusIn");
            this.wrapper.addClass('e-valid');
            if (!this.model.showPopupButton) this._showResult();
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
        },
        _targetBlur: function () {
            this.focused = false;
            this.element.off('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            this.wrapper.removeClass("e-focus");
            if (!this.model.enableStrictMode) {
                // To remove the min value mask while focusout the timepicker.
                if (this.target.value.indexOf('_') > -1) this.element.val('');
            }
            if (!this._checkMinMax(this.target.value) && this._isValid(this.target.value, true)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this._createObject(this.target.value), this.model.minTime, true))
                        this.element.val(this.model.minTime);
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this._createObject(this.target.value), true))
                        this.element.val(this.model.maxTime);
                    if (!this._isValid(this.model.value, true))
                        this.element.val(null);
                    this.isValidState = true;
                    (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
                }
                else
                    this.isValidState = false;
            }
            else this.isValidState = true;
            this._ensureValue();
            this._raiseChangeEvent();
            this._checkErrorClass();
            this._raiseEvent("focusOut");
            if (!this.model.enableStrictMode) this._checkInComplete();
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
        },
        _clearRange: function () {
            var input = this.element[0];
            if (!isNaN(input.selectionStart)) {
                input.selectionStart = 0;
                input.selectionEnd = 0;
            }
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error").attr('aria-invalid', "false");
            else this.wrapper.addClass("e-error").attr('aria-invalid', "true");
        },

        _getExactPostions: function(){
            var timeFormat = this.model.timeFormat;
            var tempParts = this.model.timeFormat.split(" ");
            this._formatparts= []; this._valueparts = [];
            this._amPMPosition = timeFormat.match("([t][t]+)") ?timeFormat.match("([t][t]+)").index : null ;
            if(this._amPMPosition == undefined){
                this._formatparts= this.model.timeFormat.split(" "); 
                this._valueparts = this.element.val().split(" ");
                this._noTT = true;
            }
            else{
                if(this._amPMPosition == this.model.timeFormat.length - 2){
                    this._ttAtEnd = true;
                    this._isSpace = this.model.timeFormat[this.model.timeFormat.split("").indexOf("t") - 1] == " ";
                }
                else {
                    this._ttAtEnd = false;
                    this._isSpace = this.model.timeFormat[this.model.timeFormat.split("").indexOf("t") + 2] == " ";
                }

                if(this._ttAtEnd == true){
                    this._ttStartPostion = this.model.timeFormat.match("([t]?[t]+)").index; this._ttEndPosition = this.model.timeFormat.length;
                    this._formatStartPosition = 0; 
                    var difference = 0;
                    if(this.element && this.element.val()){
                        difference = this.element.val().length - this.model.timeFormat.length;
                    }
                    this._updatedttStartPosition = this._ttStartPostion + difference;
                    this._formatEndPostion= this.model.timeFormat.match("([t][t]+)").index;
                    this._formatparts[0] = this.model.timeFormat.substr(this._formatStartPosition, this._formatEndPostion).trim();
                    this._formatparts[1] = this.model.timeFormat.substr(this._ttStartPostion,this._ttEndPosition).trim();
                    this._valueparts[0] = this.element.val().substr(this._formatStartPosition, this._formatEndPostion + difference).trim();
                    this._valueparts[1] = this.element.val().substr(this._ttStartPostion + difference, this._ttEndPosition).trim();
                }
                else{
                    this._ttStartPostion = 0; this._ttEndPosition = this.model.timeFormat.match("([t]?[t]+)") ? this._ttStartPostion + this.model.timeFormat.match("([t]?[t]+)")[0].length: 0;
                    this._formatStartPosition = this._isSpace ? this._ttEndPosition + 1: this._ttEndPosition; 
                    this._formatEndPostion= this.model.timeFormat.length;
                    this._formatparts[1] = this.model.timeFormat.substr(this._formatStartPosition, this._formatEndPostion).trim();
                    this._formatparts[0] = this.model.timeFormat.substr(this._ttStartPostion,this._ttEndPosition).trim();
                    this._valueparts[1] = this.element.val().substr(this._formatStartPosition, this._formatEndPostion).trim();
                    this._valueparts[0] = this.element.val().substr(this._ttStartPostion, this._ttEndPosition).trim();
                }
            }
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;
            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }
            // For lower version browsers (IE8, IE7 ...)
            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },

        _mouseDownOnInput: function (e) {
            if (!this.focused && (!ej.isTouchDevice())) this._focusElement();
             this._getExactPostions();
            this.downPosition = this._getCaretSelection();
            $(document).on("mouseup", $.proxy(this._mouseUpOnInput, this));
        },

        _mouseUpOnInput: function (e) {
            e.preventDefault();
            $(document).off("mouseup", $.proxy(this._mouseUpOnInput, this));
            var pos = this._getCaretSelection();

            if (this.incomplete) {
                this.incomplete = false;
                pos = this.downPosition;
            }
            // Select the Complete Time value using mouse.            
            if (this.target.value != this._getSelectedText()) {
                pos = this._getStartEnd(pos);
                this._setSelection(pos.start, pos.end);
            }
        },

        _getCategoryPosition: function (category) {
            var s = 0, e = 0, parts = this._getTimeParts(), p = this._getElePlace(), sep = this.seperator, valid = false;
            var fParts = this._getFormatParts()[p.time].split(sep);
            var tParts = parts[p.time].split(sep);
            if (fParts.length > tParts.length) return { start: s, end: e, isValid: valid };

            if (category == "tt") {
                if (parts[p.tt] == this.ttAM || parts[p.tt] == this.ttPM) {
                    if (p.tt == 0) s = 0;
                    else s = parts[p.time].length + 1;
                    e = s + parts[p.tt].length;
                    if(!this._isSpace && this._ttAtEnd){
                        s = s -1;
                        e = e-1;
                    } 
                    valid = true;
                }
            }
            else {
                if (p.time == 0) s = 0;
                else s = parts[p.tt].length + 1;

                var index = fParts.indexOf(category);
                if (index != -1) {
                    for (var i = 0; i < fParts.length; i++) {
                        e = tParts[i].length + 1;
                        if (i == index) break;
                        else s += e;
                    }
                    e += s - 1;
                    if(!this._noTT && !this._isSpace && !this._ttAtEnd){
                        s = s -1;
                        e = e-1;
                    } 
                    valid = true;
                }
            }
            return { start: s, end: e, isValid: valid };
        },
        _getCategory: function (cursor) {
            var parts = this._getFormatParts(), sep = this.seperator;
            var p = this._getElePlace();
            if (cursor.isTT) return parts[p.tt];
            else return parts[p.time].split(sep)[cursor.index];
        },

        _getTimeParts: function(){
            if(this.model.timeFormat == "h:mm tt" || this.model.timeFormat == "h:m tt" || this.model.timeFormat == "hh:m tt" || this.model.timeFormat == "hh:mm:s tt"){
                var parts = this.element.val().split(" ");
            }
            else var parts = this._valueparts;
            return parts;
        },

        _getFormatParts: function(){
            if(this.model.timeFormat == "h:mm tt" || this.model.timeFormat == "h:m tt" || this.model.timeFormat == "hh:m tt" || this.model.timeFormat == "hh:mm:s tt"){
                var formatparts = this.model.timeFormat.split(" ");;
            }
            else var formatparts = this._formatparts;
            return formatparts;
        },

        _getStartEnd: function (pos) {
            this._getExactPostions();
            var tt, sep = this.seperator;
            var value = this.element.val(), parts = this._valueparts, s = 0, e = 0, place = tt = null, i, j;
            
            for (j = 0; j < parts.length; j++) {
                if (parts[j] != this.ttAM && parts[j] != this.ttPM) {
                    var time = parts[j].split(sep), tempS = s, tempE = s + time[0].length;
                    for (i = 0; i < time.length; i++) {
                        e = time[i].length + s;
                        if(!this._isSpace && this._ttAtEnd && pos.start >= this._updatedttStartPosition && pos.end <=  this._ttEndPosition
                            && this._formatparts[0].split(this._getSeperator())[1].length == this._valueparts[0].split(this._getSeperator())[1].length) {
                            s += time[i].length + 1;
                            continue;
                        }
                        if (pos.start <= e) {
                            place = i;
                            tt = false;
                            j = parts.length;
                            break;
                        }
                        else s += time[i].length + 1;
                    }
                }
                else {
                    if (!this._isSpace && !this._ttAtEnd ? pos.start < s + parts[j].length : pos.start <= s + parts[j].length) {
                        e = parts[j].length + s;
                        place = 0;
                        tt = true;
                        j = parts.length;
                        if(!this._isSpace && this._ttAtEnd){
                            s = s-1;
                            e = e-1;
                        }
                        break;
                    }
                    else s += parts[j].length + 1;
                    if(!this._isSpace && !this._ttAtEnd) s = s -1;
                }
            }
            if (place == null) s = tempS, e = tempE, place = 0, tt = false;

            return { start: s, end: e, index: place, isTT: tt };
        },

        _modifyValue: function (isIncrement) {
            if (!this._isValid(this.target.value)) return;
            if (!this.model.enableStrictMode) this._checkInComplete();
            var pos = this._getCaretSelection(), cursor;
            if (pos.start == pos.end) {
                var cate = this._getLeast(true);
                var position = this._getCategoryPosition(cate);
                cursor = this._getStartEnd(position);
            }
            else cursor = this._getStartEnd(pos);
            this.start = cursor.start; this.end = cursor.end;
            this._changeValue(cursor, isIncrement);
        },

        _keyUpOnInput: function (e) {
            e.preventDefault();
            if (this._preVal != this.element.val()) {
                this._preVal = this.element.val();
            }
            var proxy = this;
            var pos = this._getCaretSelection();
            var cursor = this._getStartEnd(pos);
            var category = this._getCategory(cursor);
            proxy = this;
            var currSelection = this._getSelectedValue(cursor);
            var spl = this.element.val();
            spl.split(":");
            if (spl[0] < 3)
                if (isNaN(spl[0] + spl[1]) == true && (spl[0]) < 10)
                    this._poschange = true;
                else
                    this._poschange = false;

            if (((category == 'h') && (pos.start == 2 && pos.end == 2) && (currSelection > 9 && currSelection < 13)) || ((category == 'H') && (currSelection > 9 && currSelection < 24)) || ((category == 'H') && (currSelection < 9) && (pos.start == 2 && pos.end == 2)) || (category == "mm" && this._poschange == true && (pos.start == 4 && pos.end == 4)) || (category == "ss" && (pos.start == 8 && pos.end == 8)) || (category == "ss" && this._poschange == true && (pos.start == 7 && pos.end == 7)) || (category == 'mm' && (pos.start == 5 && pos.end == 5))) {
                if (!((category == 'mm' && (this.model.timeFormat == "HH:mm" || this.model.timeFormat == "hh:mm" || this.model.timeFormat == "H:mm" || this.model.timeFormat == "h:mm")) || (category == "ss" && (this.model.timeFormat == "HH:mm:ss" || this.model.timeFormat == "hh:mm:ss" || this.model.timeFormat == "H:mm:ss" || this.model.timeFormat == "h:mm:ss"))))
                    this._movePosition(pos, null);
            }
            else if (((category == 'hh' || category == 'HH') && (pos.start && pos.end == 2)) && (currSelection < 24)) {
                this._movePosition(pos, null);
            }
        },

        _getNextCategory: function (cate, direction) {
            var categories = [], sep = this.seperator;
            var fParts = this._getFormatParts();
            $(fParts).each(function (i, part) {
                if (part == "tt") categories.push(part);
                else {
                    var inner = part.split(sep);
                    categories = inner.concat(categories);
                }
            });
            var index = categories.indexOf(cate), ix;
            if (index != -1) {
                if (direction) {
                    if (index == 0) ix = categories.length - 1;
                    else ix = index - 1;
                }
                else {
                    if (index == categories.length - 1) ix = 0;
                    else ix = index + 1;
                }
                return categories[ix];
            }
            return cate;
        },
        _getElePlace: function () {
            this._getExactPostions();
            var fParts = this._getFormatParts(), time, tt;
            if (fParts[0] == "tt") time = 1, tt = 0;
            else time = 0, tt = 1;
            return { time: time, tt: tt };
        },
        _movePosition: function (pos, direction) {
            var cursor = this._getStartEnd(pos);
            var currCate = this._getCategory(cursor);
            if (!currCate) currCate = this._getLeast(direction);
            var next = this._getNextCategory(currCate, direction);
            var cursor = this._getCategoryPosition(next);

            if (cursor.isValid) {
                this._setSelection(cursor.start, cursor.end);
            }
        },
        _findActiveIndex: function () {
            var elements = this.ul.find("li");
            var currTime = this.element.val(), firstTime = elements.first().html(), index;
            index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
            index = Math.round(index);
            this._activeItem = (index == elements.length) ? index : index + 1;
            if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem)) this._activeItem = 0;
        },
        _keyDownOnInput: function (e) {
            if (this.model.readOnly && !this._readOnlyKeys(e)) return false;
            var pos, cursor, category, key = e.keyCode, activeItem, prevActiveItem;

            // _getInternalEvents is set to true when TimePicker used inside DateTimePicker control
            // in DateTimePicker control it allows Up, Down, Home, End, Tab keys only
            if (this._getInternalEvents && key != 38 && key != 40 && key != 36 && key != 35 && key != 9) return false;
            // Up, Down, Esc
            if (!this.model.enableStrictMode) {
                // Prevent type operation on popup open in state.
                if (this.showDropdown && key != 38 && key != 40 && key != 27 && !this._readOnlyKeys(e)) return false;
                else if (this.showDropdown && (key == 37 || key == 39)) e.keyCode = (key == 37) ? 38 : 40;
            }
            pos = this._getCaretSelection();
            cursor = this._getStartEnd(pos);
            category = this._getCategory(cursor);
            switch (e.keyCode) {
                case 38:
                    e.preventDefault();
                    if (!this.showDropdown) {
                        if (this._isValid(this.target.value)) this._modifyValue(true);
                    }
                    else if (this.showDropdown) {
                        e.preventDefault();
                        this._findActiveIndex();
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectUp(this._activeItem - 1);
                        if (this._activeItem == 0) this._activeItem = prevActiveItem;
                        this._addListHover();
                        activeItem = this._getActiveItem();
                        if (activeItem.length) this._selectTimeItem(activeItem);
                    }
                    break;
                case 40:
                    e.preventDefault();
                    if (e.altKey && this.model.showPopupButton)
                        this._showhidePopup();
                    else if (!this.showDropdown) {
                        if (this._isValid(this.target.value)) this._modifyValue(false);
                    }
                    else if (this.showDropdown) {
                        e.preventDefault();
                        this._findActiveIndex();
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectDown(this._activeItem);
                        if (this._activeItem < this._listSize) this._activeItem += 1;
                        else
                            this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 37:
                    e.preventDefault();
                    if (pos.start == pos.end) this._setSelection(pos.start - 1, pos.start - 1);
                    else this._movePosition(pos, true);
                    break;
                case 39:
                    e.preventDefault();
                    if (pos.start == pos.end) this._setSelection(pos.start + 1, pos.start + 1);
                    else this._movePosition(pos, false);
                    break;

                case 36:
                    // Home key 
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var homecate = this._firstlastVal(true);
                        var hPos = this._getCategoryPosition(homecate);
                        if (hPos.isValid) this._setSelection(hPos.start, hPos.end);
                    }
                    else {
                        this._activeItem = 0;
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectDown(this._activeItem);
                        if (this._activeItem < this._listSize) this._activeItem += 1;
                        else
                            this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 35:
                    // End key
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var endcate = this._firstlastVal(false);
                        var ePos = this._getCategoryPosition(endcate);
                        if (ePos.isValid) this._setSelection(ePos.start, ePos.end);
                    }
                    else {
                        this._activeItem = this._listSize + 1;
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectUp(this._activeItem - 1);
                        if (this._activeItem == 0) this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 9:
                    if (this._getInternalEvents) break;
                    this._hideResult();
                    var flag = null;
                    if (e.shiftKey && pos.start > 0) flag = true;
                    else if (!e.shiftKey && pos.end < this.element.val().length) flag = false;
                    if (flag != null) {
                        e.preventDefault();
                        this._checkInComplete();
                        this._movePosition(pos, flag);
                    }
                    break;
                case 13:
                    if (!this.showDropdown) {
                        this._raiseChangeEvent();
                        break;
                    }
                case 27:
                    e.preventDefault();
                    this._hideResult();
                    break;
                case 8:
                case 46:
                    if (this.model.enableStrictMode) return;
                    if (this.target.value != this._getSelectedText()) {
                        e.preventDefault();
                        if (category && category != "tt") {
                            this._findCategoryPosition(category);
                            var _doBackspace = (key == 8 && pos.start != this.start), _doDelete = (key == 46 && pos.end != this.end), len;
                            len = this.end - this.start;

                            if ((pos.start != pos.end || len == 1) && (_doBackspace || _doDelete || pos.start != pos.end)) {
                                var s1 = this.start, s2 = this.end, te;
                                this.element[0].value = this._replaceAt(this.target.value, s1, s2, "__");
                                te = (s2 - s1 != 2) ? s2 + 1 : s2;
                                this._setSelection(s1, te);
                            }
                            else {
                                if (_doBackspace) {
                                    this.element[0].value = this._replaceAt(this.target.value, pos.start - 1, pos.start, "");
                                    this._setSelection(pos.start - 1, pos.start - 1);
                                }
                                else if (_doDelete) {
                                    this.element[0].value = this._replaceAt(this.target.value, pos.end, pos.end + 1, "");
                                    this._setSelection(pos.end, pos.end);
                                }
                            }
                        }

                    }
                    break;

            }

            var currSelection = this._getSelectedValue(cursor);
            var unicode = e.keyCode ? e.keyCode : e.charCode, actualkey;

            if (e.keyCode > 47 && e.keyCode < 58)
                actualkey = String.fromCharCode(unicode);
            else if (e.keyCode > 95 && e.keyCode < 106)
                actualkey = String.fromCharCode(unicode - 48);
            if (category == "tt" && ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 64 && e.keyCode < 91) || (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106))) {
                e.preventDefault();
                var ttPos = this._getCategoryPosition(category);
                this.start = ttPos.start;
                this.end = ttPos.end;
                this._changeAmPm(currSelection);
                this._raiseChangeEvent();
            }

            // Select complete text and then press time value in the textbox               
            if (this.target.value == this._getSelectedText() && (!e.shiftKey && !e.ctrlKey && !e.altKey)) {
                if (e.keyCode > 64 && e.keyCode < 91 && !this.model.enableStrictMode) e.preventDefault();
                if ((e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
                    var cursor = this._getStartEnd(pos);
                    this._setSelection(cursor.start, cursor.end);
                }
            }

            if ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
                if (category != "tt") {
                    this._getMinMax(category, true);
                    if (pos.start == pos.end) {
                        this._findCategoryPosition(category);
                        var newVal;
                        if (pos.start == this.start) {
                            newVal = actualkey + currSelection;
                            if (this.model.enableStrictMode == false) {
                                this._validateTimes();
                                this._targetBlur();
                            }
                            if (this.model.value == null) this.element.val(this.model.minTime);
                            var cursor = this._getStartEnd(pos);
                            this._setSelection(cursor.start, cursor.end);
                        }
                        else {
                            newVal = currSelection + actualkey;
                        }
                        if (newVal.length > 2 || !(Number(newVal) >= this.min && this.max >= Number(newVal))) {
                            !this.model.enableStrictMode && e.preventDefault();
                        }
                    }
                    else if (!(Number(actualkey) >= this.min && this.max >= Number(actualkey))) {
                        !this.model.enableStrictMode && e.preventDefault();
                    }
                }
            }
            else if (!this._allowKeyCodes(e)) {
                !this.model.enableStrictMode ? (e.keyCode == 8 || e.keyCode == 46) ? e.stopPropagation() : e.preventDefault() : e.stopPropagation();
            }
        },

        _getSelectedText: function (e) {
            if (window.getSelection) {
                var element = $('#' + this.element[0].id).get(0);
                return element.value.substring(element.selectionStart, element.selectionEnd);
            }
                // For IE
            else return document.selection.createRange().text;
        },
        _allowKeyCodes: function (e) {
            if ((e.ctrlKey && (e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 90 || e.keyCode == 89))
                || e.keyCode == 9 || e.keyCode == 116 || e.keyCode == 13)
                return true;
            return false;
        },
        _readOnlyKeys: function (e) {
            if (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || this._allowKeyCodes(e))
                return true;
            return false;
        },

        _firstlastVal: function (initial) {
            var parts = this._getFormatParts(), sep = this.seperator;
            if (initial) {
                if (parts[0] != "tt") return parts[0].split(sep)[0];
                return "tt";
            }
            else {
                if (parts[0] != "tt") return "tt";
                else if (parts[1]) {
                    var lastItem = parts[1].split(sep);
                    return lastItem.length ? lastItem[lastItem.length - 1] : "tt";
                }
                return "tt";
            }
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (this.model.readOnly) return false;
            var delta, rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._modifyValue(true);
            else if (delta < 0)
                this._modifyValue(false);
        },

        _addListHover: function () {
            this._addSelected();
            this._updateScrollTop();
        },
        _addSelected: function () {
            this.ul.find("li").removeClass("e-active e-hover");
            var activeItem = this._getActiveItem();
            if (activeItem.length && !activeItem.hasClass('e-disable'))
                activeItem.addClass('e-active');
        },
        _disableItemSelectDown: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0)
                    return current;
                else
                    return this._disableItemSelectDown(current + 1);
            }
            else return this._listSize;
        },

        _disableItemSelectUp: function (current) {
            current = current - 1;
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0)
                    return current + 1;
                else if (current > 0)
                    return this._disableItemSelectUp(current);
            }
            return 0;
        },
        _getActiveItem: function () {
            return $(this.ul.find("li")[this._activeItem - 1]);
        },

        _timeIconClick: function (event) {
            if (ej.isNullOrUndefined(this.popupList)) {
                this._renderDropdown();
                this._addProperty();
            };
            var isRightClick = false;
            if (event.button)
                isRightClick = (event.button == 2);
            else if (event.which)
                isRightClick = (event.which == 3); //for Opera
            if (isRightClick) return;
            event.preventDefault();
            if (!this.model.enabled || this.model.readOnly || this.ul.find("li").length < 1) return false;
            this._showhidePopup();
            var len = this.element.val().length;
            if (!ej.isTouchDevice()) this._setSelection(len, len);
        },
        _showhidePopup: function () {
            if (this._getInternalEvents) return false;
            if (!this.showDropdown)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            if (this.popupList == null) this._renderDropdown();
            if (this._raiseEvent("beforeOpen")) return false;
            if (!this.focused && (!ej.isTouchDevice())) this._focusElement();
            if (this.model.value) this._changeActiveEle();
            else
                this.ul.find("li").removeClass("e-active");

            var proxy = this, sTop = this._visibleAndCalculateTop();
            this.popupList.slideDown(this.model.enableAnimation ? 200 : 0, function () {
                $(document).on("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
            });
            this.scrollerObj.setModel({ "scrollTop": sTop });
            this.showDropdown = true;
            this._listSize = this.ul.find("li").length;
            $(window).on("resize", $.proxy(this._OnWindowResize, this));
            this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._on(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this._raiseEvent("open");
            this.wrapper.addClass("e-active");
        },
        _hideResult: function (e) {
            if (this._raiseEvent("beforeClose")) return false;
			if ( e && (e.type == "touchmove" || e.type== "scroll")) {
				if ($(e.target).parents("#"+this.popupList[0].id).length > 0)
			   return;
			}           
			if (this.showDropdown && !this._getInternalEvents) {
			this.showDropdown = false;
			this.popupList.slideUp(this.model.enableAnimation ? 100 : 0);
			$(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
			$(window).off("resize", $.proxy(this._OnWindowResize, this));
			this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
			this._off(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
			this._raiseEvent("close");
			this.wrapper.removeClass("e-active");
            }
        },

        _visibleAndCalculateTop: function () {
            this.popupList.css({ "display": "block" });
            var scrollTop = this._calcScrollTop();
			this._refreshPopup();
            this.popupList.css({ "display": "none" });
            return scrollTop;
        },
        _calcScrollTop: function () {
            var ulH = this.ul.outerHeight(), liH = this.ul.find("li").outerHeight(), index, top;
            index = this.ul.find("li.e-active").index();
            top = (liH * index) - ((this.popupList.outerHeight() - liH) / 2);
            return top;
        },
        _changeActiveEle: function () {
            if (!this.popupList) return false;
            var elements = this.ul.find("li");
            var currTime = this.element.val(), firstTime = elements.first().html(), index;
            index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
            index = Math.round(index);
            this._activeItem = (index == elements.length) ? index : index + 1;
            if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem) || this._ensureTimeRange(currTime)) this._activeItem = 0;
            this._addListHover();
        },

        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-time-popup").is(this.popupList) &&
                !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-timewidget").is(this.wrapper)) {
                this._hideResult();
            }
            else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-time-popup").is(this.popupList))
                e.preventDefault();
        },
        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

        _OnMouseEnter: function (e) {
            var targetEle = e.target;
            this.ul.find("li").removeClass("e-hover");
            if (!$(targetEle).hasClass('e-disable'))
                $(targetEle).addClass("e-hover");
        },
        _OnMouseLeave: function (e) {
            if (!this._dateTimeInternal || this.model.value)
                this.ul.find("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            e.preventDefault();
            if ($(e.target).hasClass('e-disable')) return;
            if (this.model.enabled && !this.model.readOnly) {
                this._activeItem = $(e.target).index() + 1;
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false });
                $(e.target).attr({ 'aria-selected': true, 'tabindex': 0 });
                this._addSelected();
                this._selectTimeItem($(e.target));
            }
            this._showhidePopup();
        },
        _selectTimeItem: function (ele) {
            this._beforeChange(ele);
            var flag = this._raiseChangeEvent();
            if (flag)
                this._trigger("select", { value: this.model.value, prevTime: this._previousValue });
        },

        _findCategoryPosition: function (category) {
            if (category == "least") category = this._getLeast(true);
            var pos = this._getCategoryPosition(category);
            this.start = pos.start;
            this.end = pos.end;
        },

        _getLeast: function (lower) {
            var formats = this._getFormatParts(), sep = this.seperator, res = null;
            $(formats).each(function (i, e) {
                if (e != "tt") {
                    var times = e.split(sep);
                    if (lower) res = times[times.length - 1];
                    else res = times[0];
                }
            });
            return res;
        },

        _changeValue: function (cursor, isIncrement) {
            var preVal = this.target.value, currValue, category = this._getCategory(cursor);
            if (!category) return false;
            this._setSelection(this.start, this.end);
            currValue = this.target.value.substring(this.start, this.end);
            if (this._checkMinMax(this.target.value)) {
                if (currValue != this.ttAM && currValue != this.ttPM) {
                    currValue = this._changeCurrentValue(currValue, category, isIncrement);
                    if (category.length != 1) currValue = this._changeWhole(currValue);
                    this._findCategoryPosition(category);
                    this.element.val(this._replaceAt(this.target.value, this.start, this.end, currValue));
                    this.end = this.start + currValue.toString().length;
                    this._setSelection(this.start, this.end);
                    if (this._ensureTimeRange(this.target.value) && this._checkMinMax(this.target.value)) {
                        var timeObject = this._createObject(this.target.value);
                        var hour = timeObject.getHours();
                        var fromTime = isIncrement ? this._startTime : this._endTime;
                        var toTime = isIncrement ? this._endTime : this._startTime;
                        if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
                            for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
                                if ((fromTime[i].getHours() === hour) || ((+timeObject >= +this._startTime[i]) && +timeObject <= +this._endTime[i])) {
                                    this.target.value = this._localizeTime(toTime[i]);
                                    this._findCategoryPosition(category);
                                    this._setSelection(this.start, this.end);
                                    this._changeValue(cursor, isIncrement);
                                }
                            }
                        }
                    }
                }
                else this._changeAmPm(currValue);
            }
            else {
                var timeValue = this._checkExceedRange(this.target.value);
                this._setTime(this.model[timeValue]);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            if (!this._checkMinMax(this.target.value)) {
                this.element.val(this.model.value);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            else this._raiseChangeEvent();
        },

        _checkMinMax: function (value) {
            var res = this._checkExceedRange(value);
            if (res == null) res = false;
            return !res;
        },
        _checkExceedRange: function (value) {
            if (value) {
                if (this.model.minTime && !this._compareTime(value, this.model.minTime, true)) return "minTime";
                if (this.model.maxTime && !this._compareTime(this.model.maxTime, value, true)) return "maxTime";
            }
            return null;
        },

        _changeWhole: function (currValue) {
            return currValue > 9 ? "" + currValue : "0" + currValue;
        },
        _changeAmPm: function (ampm) {
            ampm = ampm == this.ttAM ? this.ttPM : this.ttAM;
            this.element.val(this._replaceAt(this.target.value, this.start, this.end, ampm));
            this._setSelection(this.start, this.end);
        },
        _changeMinute: function (isIncrement) {
            var formats = ["mm", "m"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var minute = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (minute == this.max) {
                        minute = this.min;
                        this._changeHour(isIncrement);
                    }
                    else minute += 1;
                }
                else {
                    if (minute == this.min) {
                        minute = this.max;
                        this._changeHour(isIncrement);
                    }
                    else minute -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) minute = this._changeWhole(minute);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, minute));
            }
        },
        _changeHour: function (isIncrement) {
            var formats = ["hh", "h", "HH", "H"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var hour = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (hour == this.max) {
                        hour += 1;
                        this._changeMeridian();
                    }
                    else if (hour > this.max) hour = this.min;
                    else hour += 1;
                }
                else {
                    if (hour == this.min) hour = this.max + 1;
                    else if (hour > this.max) {
                        hour = this.max;
                        this._changeMeridian();
                    }
                    else hour -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) hour = this._changeWhole(hour);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, hour));
            }
        },
        _getExactFormat: function (cate) {
            var tFormat = this.model.timeFormat;
            for (var i = 0; i < cate.length; i++) {
                if (tFormat.indexOf(cate[i]) != -1) return cate[i];
            }
            return null;
        },
        _changeMeridian: function () {
            var start = this.model.timeFormat.indexOf("tt");
            if (start != -1) {
                this._findCategoryPosition("tt");
                var meridian = this.target.value.substring(this.start, this.end);
                meridian = (meridian == this.ttAM) ? this.ttPM : this.ttAM;
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, meridian));
            }
        },
        _changeCurrentValue: function (current, category, isIncrement) {
            current = Number(current);
            var c = category, step = 1, change = true;
            this._getMinMax(c);

            if (c == "hh" || c == "h" || c == "HH" || c == "H") step = this.model.hourInterval;
            else if (c == "mm" || c == "m") step = this.model.minutesInterval;
            else if (c == "ss" || c == "s") step = this.model.secondsInterval;
            if (step <= 0) return current;

            if (isIncrement) {
                if ((c == "hh" || c == "h") && current > this.max) current = this.min - 1 + step;
                else if (current < this.max) current += step;
                else {
                    change = false;
                    if (c != "hh" && c != "h") current = this.min - 1 + step;
                    else current += step;
                    this._changeAdjacent(c, isIncrement);
                }
                if ((c == "hh" || c == "h") && current == this.max + 1)
                    change && this._changeAdjacent(c, isIncrement);
                else if (current > this.max + 1) {
                    current = current - (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
                if ((c != "hh" && c != "h") && current == this.max + 1) {
                    current = this.min;
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            else {
                if ((c != "hh" && c != "h") && current > this.min) current -= step;
                else if ((c == "hh" || c == "h") && current > this.min && current <= this.max) current -= step;
                else if ((c == "hh" || c == "h") && current == this.min) current = this.max + 2 - step;
                else {
                    change = false;
                    current = this.max + 1 - step;
                    this._changeAdjacent(c, isIncrement);
                }
                if (current < this.min) {
                    current = current + (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            return current;
        },
        _changeAdjacent: function (c, isIncrement) {
            if (c == "ss" || c == "s") this._changeMinute(isIncrement);
            else if (c == "mm" || c == "m") this._changeHour(isIncrement);
            else if (c == "hh" || c == "h" || c == "HH" || c == "H") this._changeMeridian();
        },

        _valueChange: function (e) {
            this._raiseChangeEvent();
        },

        _beforeChange: function (ele) {
            if (!this._raiseEvent("beforeChange")) {
                this.element.val(ele.text());
            }
            return true;
        },

        _raiseChangeEvent: function (prev, isCode) {
            prev = (prev === undefined) ? this.model.value : prev;
            this._previousValue = prev;
            var current = !this.target.value ? null : this.target.value;
            if (prev == current) return false;
            if (this._checkMinMax(this.target.value) && this._isValid(this.target.value, this.model.enableStrictMode) || !this.target.value) this.isValidState = true;
            else this.isValidState = false;
            this.model.value = this._isValid(this.target.value, true) && this._checkMinMax(this.target.value) ? this.target.value : null;
            if (!this.model.value && !this.model.enableStrictMode) this._setTime(this.model.value);
            if (this.model.value == this._previousValue) return false;
            this._raiseEvent("change", isCode);
            this._raiseEvent("_change", isCode);
            return true;
        },
        _raiseEvent: function (name, isCode) {
            var data = { value: this.model.value, prevTime: this._previousValue };
            if (name == "change") data.isInteraction = !isCode;
            return (this._trigger(name, data));
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _replaceAt: function (mainString, from, to, replace) {
            return mainString.substring(0, from) + replace + mainString.substring(to);
        },
        _localizeTime: function (value) {
            if (value)
                return $.trim(ej.format(this._createObject(value), this.model.timeFormat, this.model.locale));
            return null;
        },
        _localizeMeridian: function (value) {
            return $.trim(ej.format(value, "tt", this.model.locale));
        },
        _compareTime: function (time1, time2, orEqual) {
            orEqual = (!orEqual) ? false : true;
            if (orEqual) return this._parse(time1) >= this._parse(time2);
            else return this._parse(time1) > this._parse(time2);
        },
        _isValid: function (time, validate) {
            time = this._createObject(time, validate);
            return time && typeof time.getTime === "function" && isFinite(time.getTime());
        },
        _parse: function (time) {
            return Date.parse(this._createObject(time));
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _createObject: function (value, validate) {
            var obj = null;
            if (typeof value === "string") {
                var format = this._setModelOption ? this._preTimeformat : this.model.timeFormat;
                var dateFormat = ej.preferredCulture(this.model.locale).calendar.patterns.d;
                var dateValue = ej.format(new Date("1/1/2000"), dateFormat, this.model.locale);
                obj = ej.parseDate(dateValue + " " + value, dateFormat + " " + format, this.model.locale);
                if (this._extISORegex.exec(value) || this._basicISORegex.exec(value)) this.model.value = obj = this._timeFromISO(value);
                this._setModelOption = false;
                if (!obj) {
                    var isJSONString = new Date(value);
                    if (!isNaN(Date.parse(isJSONString)) && !ej.isNullOrUndefined(value))
                        obj = this._setEmptyDate(value);
                    else
                        obj = !this._dateTimeInternal || value == "" ? null : new Date("1/1/2000 " + value);
                }
            }
            else if (typeof value === "number")
                obj = new Date(value);
            else if (value instanceof Date)
                obj = this._setEmptyDate(value);

            if (obj && !this._dateTimeInternal && validate) {
                var timeVal = this._localizeTime(obj);
                if (this._ensureTimeRange(timeVal))
                    obj = null;
            }
            return obj;
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },

        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.element, "mousedown", this._mouseDownOnInput);
            this._on(this.element, "keydown", this._keyDownOnInput);
            this._on(this.element, "keyup", this._keyUpOnInput);
        }
    });
    ej.TimePicker.Locale = ej.TimePicker.Locale || {};

    ej.TimePicker.Locale['default'] = ej.TimePicker.Locale['en-US'] = {
        watermarkText: "select a time",
    };
    
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to select the date and time values.
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDateTimePicker", "ej.DateTimePicker", {

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _setFirst: false,
        _rootCSS: "e-datetimepicker",
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },
        _requiresID: true,


        defaults: {

            cssClass: "",

            locale: "en-US",

            readOnly: false,

            showRoundedCorner: false,

            enableRTL: false,

            htmlAttributes: {},
            allowEdit: true,

            enabled: true,

            value: "",

            name: null,

            minDateTime: new Date("1/1/1900 12:00:00 AM"),

            maxDateTime: new Date("12/31/2099 11:59:59 PM"),

            height: "",

            width: "",

            dateTimeFormat: "",

            showPopupButton: true,

            enableStrictMode: false,

            buttonText: {

                today: "Today",

                timeNow: "Time Now",

                done: "Done",

                timeTitle: "Time"
            },

            watermarkText: "Select datetime",

            enablePersistence: false,

            interval: 30,

            timeDisplayFormat: "",

            timePopupWidth: 105,
            popupPosition: "bottom",

            dayHeaderFormat: "short",

            startLevel: "month",

            depthLevel: "",

            startDay: -1,

            stepMonths: 1,

            showOtherMonths: true,

            specialDates: null,

            highlightWeekend: false,

            enableAnimation: true,

            headerFormat: 'MMMM yyyy',

            validationRules: null,

            validationMessage: null,

            validationMessages: null,
            timeDrillDown: {
                enabled: false,
                interval: 5,
                showMeridian: false,
                autoClose: true,
                showFooter: true
            },

            beforeOpen: null,

            beforeClose: null,

            open: null,

            close: null,

            change: null,

            create: null,

            destroy: null,

            focusIn: null,

            focusOut: null,

            disableDateTimeRanges: null,

            timeZone: true,
			
			disableTimeRanges: null,
        },


        dataTypes: {
            allowEdit: "boolean",
            cssClass: "string",
            locale: "string",
            readOnly: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            enabled: "boolean",
            enableAnimation: "boolean",
            dateTimeFormat: "string",
            showPopupButton: "boolean",
            buttonText: "data",
            watermarkText: "string",
            enablePersistence: "boolean",
            enableStrictMode: "boolean",
            interval: "number",
            timeDrillDown: "data",
            timeDisplayFormat: "string",
            dayHeaderFormat: "string",
            startLevel: "string",
            depthLevel: "string",
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            highlightWeekend: "boolean",
            specialDates: "data",
            headerFormat: "string",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data",
            disableDateTimeRanges: "data",
			disableTimeRanges: "data"
        },

        _setModel: function (options) {
		
            var option, validate = false;
            for (option in options) {
			if(option != "allowEdit" && option != "readOnly" && option != "enabled" && option != "validationRules" && option != "validationMessages" && option != "enableStrictMode" &&
			option != "height" && option != "width" && option != "showPopupButton" && option != "dateTimeFormat" && option != "watermarkText" && option != "htmlAttributes"){
					if (!this.popup) this._renderDropdown();
				}
                switch (option) {
                    case "allowEdit": this._changeEditable(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "locale": this._localize(options[option]); break;
                    case "readOnly": this._readOnly(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "value":
                        options[option] = this._setValue(options[option]);
                        if (this._specificFormat())
                            this._stopRefresh = true
                        validate = true;
                        this._prevDateTime = this._prevDateTimeVal || this._preVal;
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        validate = true;
                        break;
                    case "minDateTime":
                        var temp = this._stringToObject(options[option]);
                        var mintime = this._getFormat(temp, this.timePicker.model.timeFormat);
                        if (this._isValidDate(temp)) {
                            this.datePicker.option("minDate", temp);
                            if(this.datePicker.model.value && this.datePicker.model.value.toDateString() == this.datePicker.model.minDate.toDateString() )this.timePicker.option("minTime", mintime);
                            options[option] = temp;
                            this.model.minDateTime = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true;
                        break;
                    case "maxDateTime":
                        var temp = this._stringToObject(options[option]);
                        var maxtime = this._getFormat(options[option], this.timePicker.model.timeFormat);
                        if (this._isValidDate(temp)) {
                            this.datePicker.option("maxDate", temp);
                            if(this.datePicker.model.value && this.datePicker.model.value.toDateString() == this.datePicker.model.maxDate.toDateString() )this.timePicker.option("maxTime", maxtime);
                            options[option] = temp;
                            this.model.maxDateTime = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true; break;
                    case "height": this.wrapper.height(options[option]); break;
                    case "width": this.wrapper.width(options[option]); break;
                    case "dateTimeFormat":
                        this.model.dateTimeFormat = options[option];
                        if (this.isValidState) this._setValue(this.model.value);
                        break;
                    case "showPopupButton": this._showButton(options[option]); break;
                    case "watermarkText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options[option] = this.model.watermarkText = options[option];
                        this._localizedLabels.watermarkText = this.model.watermarkText;
                        this._setWaterMark();
                        break;
                    case "buttonText":
                        if (!ej.isNullOrUndefined(this._options))
                            this._options["buttonText"] = this.model.buttonText = options[option];
                        this._localizedLabels.buttonText = this.model.buttonText;
                        this._buttonText(options[option]); break;
                    case "interval":
                        this._updateTimeHeight();
                        this.timePicker.option("interval", options[option]); break;
                    case "timeDisplayFormat":
                        this._updateTimeHeight();
                        this.timePicker.option("timeFormat", options[option]); break;
					case "disableDateTimeRanges": 
					if(this._disabledDate) this._disabledDates = false;
					this.model.disableDateTimeRanges = (options[option]);
					this._setValue(this.model.value);
					break;
					case "disableTimeRanges":
                        this.model.disableTimeRanges = options[option];
                        this.timePicker.option('disableTimeRanges', this.model.disableTimeRanges);
                        break;
                    case "timePopupWidth":
                        this._updateTimeHeight();
                        var width = options[option];
                        if ((typeof (width) == "string" && width.indexOf("%") != -1) || typeof (width) == "string" )  options[option] = parseInt(width) > 0 ? width : 105;
                        else {
                            options[option] = width > 0 ? width : 105;
                        }
                        this.timePicker.option("popupWidth", options[option]);
                        break;
                    case "dayHeaderFormat": this.datePicker.option("dayHeaderFormat", options[option]); break;
                    case "startLevel": this.datePicker.option("startLevel", options[option]); break;
                    case "depthLevel": this.datePicker.option("depthLevel", options[option]); break;
                    case "startDay": this.datePicker.option("startDay", options[option]);
                        this.model.startDay = this.datePicker.model.startDay;
                        options[option] = this.model.startDay; break;
                    case "stepMonths": this.datePicker.option("stepMonths", options[option]); break;
                    case "showOtherMonths": this.datePicker.option("showOtherMonths", options[option]); break;
                    case "highlightWeekend": this.datePicker.option("highlightWeekend", options[option]); break;
                    case "specialDates": this.datePicker.option("specialDates", options[option]); this.model.specialDates = this.datePicker.model.specialDates; break;
                    case "headerFormat": this.datePicker.option("headerFormat", options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "popupPosition": this.model.popupPosition = options[option]; this._setListPosition(); break;
                    case "timeDrillDown":

                        // For timeDrillDown.enabled
                        if (!ej.isNullOrUndefined(options[option].enabled)) {
                            this.model.timeDrillDown.enabled = options[option].enabled; this._changeDesign();
                        }

                        // For timeDrillDown.interval
                        if (!ej.isNullOrUndefined(options[option].interval)) {
                            this.model.timeDrillDown.interval = options[option].interval;
                            this._generateMins($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));
                        }

                        // For timeDrillDown.showMeridian
                        if (!ej.isNullOrUndefined(options[option].showMeridian)) {
                            this.model.timeDrillDown.showMeridian = options[option].showMeridian;
                            this._sfTimeHour.empty(); this._renderHourTable();
                        }

                        // For timeDrillDown.showFooter
                        if (!ej.isNullOrUndefined(options[option].showFooter)) {
                            this.model.timeDrillDown.showFooter = options[option].showFooter;
                            this._changeDesign();
                        }
                        break;

                }
            }
            if (validate) this._validateMinMax();
            this._valueChange(true);
            if (option == "value") options[option] = this.model.value;
            if(this.popup)this._updateTimeHeight();
            this._checkErrorClass();
        },
        observables: ["value"],

        _destroy: function () {
            if (this.isPopupOpen)
                this._hideResult();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
            }
            this.element.removeClass("e-js e-input").removeClass(ej.util.getNameSpace(this.sfType));
            this.element.removeAttr(" type aria-atomic aria-live tabindex aria-expanded aria-disabled placeholder role")
            !this._cloneElement[0].hasAttribute("name") && this.element.removeAttr("name");
            if (!ej.isNullOrUndefined(this.datePicker))
                this.datePicker.destroy();
            if (!ej.isNullOrUndefined(this.timePicker))
                this.timePicker.destroy();
            if(this.popup)this.popup.remove();
        },
        _initDisableTimeRanges: function (currvalue) {
            var value = this._getDateObj(currvalue, this.datePicker.model.dateFormat);
                for (var i = 0; i < this.model.disableDateTimeRanges.length; i++) {
					if(ej.isNullOrUndefined(this.model.disableDateTimeRanges[i].endDateTime)) this.model.disableDateTimeRanges[i].endDateTime = this.model.disableDateTimeRanges[i].startDateTime;
					if(this.model.disableDateTimeRanges[i].startDateTime instanceof Date || this.model.disableDateTimeRanges[i].endDateTime instanceof Date){
						var sdate = this._getFormat(this.model.disableDateTimeRanges[i].startDateTime, this.datePicker.model.dateFormat);
						var edate = this._getFormat(this.model.disableDateTimeRanges[i].endDateTime, this.datePicker.model.dateFormat);
					}
                    else{
						var sdate = this.model.disableDateTimeRanges[i].startDateTime.split(' ')[0];
						var edate = this.model.disableDateTimeRanges[i].endDateTime.split(' ')[0];
					}
                    var startval = new Date(this.model.disableDateTimeRanges[i].startDateTime);
                    var endval = new Date(this.model.disableDateTimeRanges[i].endDateTime);
                    if (sdate == edate) {
                        if (this._compare(value, this._setEmptyTime(this.model.disableDateTimeRanges[i].startDateTime))) {
                            var stime = this._getFormat(startval, this.timePicker.model.timeFormat);
                            var etime = this._getFormat(endval, this.timePicker.model.timeFormat);
                            var values = [];
                            values.push({ startTime: stime, endTime: etime });
                            this.timePicker.option("disableTimeRanges", values);
							return;
                        }
                        else
                            this.timePicker.option("disableTimeRanges", this._defaultMinVal());
					if(!this._disabledDates && this.model.disableDateTimeRanges[i].endDateTime == this.model.disableDateTimeRanges[i].startDateTime){
						if(this.model.disableDateTimeRanges[i].endDateTime instanceof Date == false){
							if((this._getFormat(this.model.disableDateTimeRanges[i].endDateTime,this.model.dateTimeFormat) == this._getFormat(this.model.disableDateTimeRanges[i].endDateTime,this.model.dateFormat) && ej.isNullOrUndefined(this.model.disableDateTimeRanges[i].endDateTime.split(' ')[1]))){
									this._between.push(new Date(this.model.disableDateTimeRanges[i].endDateTime));
								}
						}
					}
                   }
                    else if (sdate != edate) {                            
						if (this._compare(value, this._setEmptyTime(this.model.disableDateTimeRanges[i].startDateTime))||this._compare(value, this._setEmptyTime(this.model.disableDateTimeRanges[i].endDateTime))) {
							var stime = this.timePicker.model.minTime,etime = this.timePicker.model.maxTime;
                            if(this.datePicker.model.value.toDateString() == new Date(this.model.disableDateTimeRanges[i].startDateTime).toDateString()) stime = this._getFormat(new Date(this.model.disableDateTimeRanges[i].startDateTime), this.timePicker.model.timeFormat);
                            if(this.datePicker.model.value.toDateString() == new Date(this.model.disableDateTimeRanges[i].endDateTime).toDateString()) etime = this._getFormat(new Date(this.model.disableDateTimeRanges[i].endDateTime), this.timePicker.model.timeFormat);
                            var values = [];
                            values.push({ startTime: stime, endTime: etime });
                            this.timePicker.option("disableTimeRanges", values);
							return;
                        }
						if(!this._disabledDates){
							var stime = this._getFormat(new Date(this.model.disableDateTimeRanges[i].startDateTime), this.timePicker.model.timeFormat);
							var etime = this._getFormat(new Date(this.model.disableDateTimeRanges[i].endDateTime), this.timePicker.model.timeFormat);
							if(stime == this.timePicker.model.minTime){
								this._between.push(new Date(this.model.disableDateTimeRanges[i].startDateTime));
							}
							if(this.model.disableDateTimeRanges[i].endDateTime instanceof Date == false){
								if(this._getFormat(this.model.disableDateTimeRanges[i].endDateTime,this.model.dateTimeFormat) == this._getFormat(new Date(this.model.disableDateTimeRanges[i].endDateTime), this.datePicker.model.dateFormat)){
									etime = this.timePicker.model.maxTime;
								}
							}
							if(etime == this.timePicker.model.maxTime){
								this._between.push(new Date(this.model.disableDateTimeRanges[i].endDateTime));
							}
						}
                    }

            }
        },
		_disableBetweenDates: function(){
			for (var i = 0; i < this.model.disableDateTimeRanges.length; i++) {
					var datePickedStr1 = this.model.disableDateTimeRanges[i].startDateTime;
                    var datePickedDate1 = this._setEmptyTime(datePickedStr1);
					var startDateTimeVal = this._getFormat(new Date(this.model.disableDateTimeRanges[i].startDateTime), this.timePicker.model.timeFormat);
                    var endDateTimeVal = this._getFormat(new Date(this.model.disableDateTimeRanges[i].endDateTime), this.timePicker.model.timeFormat);
                    var datePickedStr2 = this.model.disableDateTimeRanges[i].endDateTime;
                    var datePickedDate2 = this._setEmptyTime(datePickedStr2);
                        while (datePickedDate1 < datePickedDate2) {
                           datePickedDate1.setDate(datePickedDate1.getDate() + 1);
							if(new Date(datePickedDate1) < datePickedDate2){
								this._between.push(new Date(datePickedDate1));
								}
                        }
					
			}
			this._datesDisabled = true;
		},
		_init: function (options) {
		    this._cloneElement = this.element.clone();
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._options = options;
            this._ISORegex();
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            this._validateMeridian();
            this._checkAttribute();
            this._initialize();
            this._initial = true;
            this._interval = 60;
            this._render();
            this._wireEvents();
            this._addAttr(this.model.htmlAttributes);
            if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
                this.model.validationMessages = this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
			this._removeWatermark();
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
        },
        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },
        _changeDesign: function () {
            if (this.model.timeDrillDown.enabled) {
                var state = this.model.timeDrillDown.showFooter ? "block" : "none";
                this.popup.addClass("e-drill-down");
                this._timeContainer.css("display", "none");
                this._buttonContainer.css("display", "none");
                this.datePicker.option("showFooter", this.model.timeDrillDown.showFooter);
                $('.e-footer', this._sfTimeHour).css("display", state);
                $('.e-footer', this._sfTimeMins).css("display", state);
            }
            else {
                this.popup.removeClass("e-drill-down");
                this._sfTimeHour.hide();
                this._sfTimeMins.hide();
                this._updateTimeHeight();
                this._dateContainer.show();
                this._timeContainer.show();
                this._buttonContainer.show();
                this.datePicker.option("showFooter", false);
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
            }
        },
        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _checkAttribute: function () {
            this.model.value = this.model.value === "" ? this.element[0].value : this.model.value;
            if (!this._options.minDateTime) this.model.minDateTime = this.element[0].min;
            if (!this._options.maxDateTime) this.model.maxDateTime = this.element[0].max;
            if (ej.isNullOrUndefined(this._options.readOnly)) this.model.readOnly = this.element.is("[readonly]");
            if (ej.isNullOrUndefined(this._options.enabled)) this.model.enabled = !this.element.is("[disabled]");
        },
        _setValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
		_validateDisableRanges: function(){
			for (var i = 0; i < this.model.disableDateTimeRanges.length; i++) {
				var tempValue = this.model.value;
				if(new Date(this.model.value).getTime() >= new Date(this.model.disableDateTimeRanges[i].startDateTime).getTime() && new Date(this.model.value).getTime() <= new Date(this.model.disableDateTimeRanges[i].endDateTime).getTime()) this.model.value = null;
				if(this.model.value == null && tempValue !=null && this.model.enableStrictMode) this.isValidState = false;	
				if(this.isValidState) this.element.val(this._getFormat(this.model.value,this.model.dateTimeFormat));
			}
		},
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled") proxy._enabled(false);
                else if (keyName == "readOnly") proxy._readOnly(true);
                else if (keyName == "style") proxy.wrapper.attr(key, value);
                else if (keyName == "id") {
                    proxy.wrapper.attr(key, value + "_wrapper");
                    proxy.element.attr(key, value);
                }
                else if (ej.isValidAttr(proxy.element[0], keyName)) proxy.element.attr(keyName, value);
                else proxy.wrapper.attr(keyName, value);
            });
        },
        _validateMeridian: function () {
            var culture = ej.preferredCulture(this.model.locale);
            if (culture) this.model.locale = culture.name == "en" ? "en-US" : culture.name;
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.timeDrillDown)) {
                    if (ej.isNullOrUndefined(this._options.timeDrillDown.showMeridian))
                        this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
                }
                else this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
            }
            else
                this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
        },
        _initialize: function () {
            var val;
            this.popup = null;
            this.isPopupOpen = false;
            this.isValidState = true;
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.buttonText))
                    $.extend(this._localizedLabels.buttonText, this._options.buttonText);
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            if (this.model.startDay == -1) this.model.startDay = ej.preferredCulture(this.model.locale).calendar.firstDay;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this._isIE9 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "9.0") ? true : false;
            if (!this.model.dateTimeFormat || !this.model.timeDisplayFormat) this._getDateTimeFormat();
            if (!this.model.value || (typeof JSON === "object" && JSON.stringify(this.model.value) === "{}")) val = null;
            else if (!(this.model.value instanceof Date)) {
                var dateTimeObj = ej.parseDate(this.model.value, this.model.dateTimeFormat, this.model.locale);
                val = dateTimeObj ? dateTimeObj : (dateTimeObj = this._checkJSONString(this.model.value)) ? dateTimeObj : null;
            }
            else val = this.model.value;
            if (val) this.model.value = val;
            var min = this.model.minDateTime = this._stringToObject(this.model.minDateTime);
            if (!min || !this._isValidDate(min)) this.model.minDateTime = this.defaults.minDateTime;
            var max = this.model.maxDateTime = this._stringToObject(this.model.maxDateTime);
            if (!max || !this._isValidDate(max)) this.model.maxDateTime = this.defaults.maxDateTime;
        },
        _checkJSONString: function (dateTimeString) {
            // Validate the string value
            var dateTimeObj = new Date(dateTimeString);
            if (!isNaN(Date.parse(dateTimeObj))) {
                if ((dateTimeObj.toJSON() === this.model.value) || (dateTimeObj.toGMTString() === this.model.value) ||
                    (dateTimeObj.toISOString() === this.model.value) || (dateTimeObj.toLocaleString() === this.model.value) ||
                    (dateTimeObj.toString() === this.model.value) || (dateTimeObj.toUTCString() === this.model.value))
                    if (this.model.timeZone) {
                        return new Date(new Date(dateTimeObj).getTime() + (ej.serverTimezoneOffset * 60 * 60 * 1000));
                    } else {
                        if (dateTimeString.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i) && dateTimeString.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i).length > 0) {
                            var date = dateTimeString.split('Z')
                            date = date[0];
                            return new Date(date);
                        }
                    }
                else if (typeof dateTimeString == "string") return this._dateFromISO(dateTimeString);
            } else if (this._extISORegex.exec(dateTimeString) || this._basicISORegex.exec(dateTimeString)) return this._dateFromISO(dateTimeString);
        },
        _render: function () {
            this._renderWrapper();
            this._renderIcon();
            this._setDimentions();
            this._checkProperties();
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "tabindex": "0", 'role':'combobox','aria-expanded':'false' });
            this.wrapper = ej.buildTag("span.e-datetime-wrap e-widget " + this.model.cssClass + "#" + this.element[0].id + "_wrapper").insertAfter(this.element);
            this._setValue(this.model.value);
            this.wrapper.attr("style", this.element.attr("style"));
            this.element.removeAttr("style");
            if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
            if (!this._isSupport) {
                this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                this._hiddenInput.val(this._localizedLabels.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                $(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
        },
        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport && this._hiddenInput)
                this._hiddenInput.css("display", "none");
        },
        _renderIcon: function () {
            if (!this.model.showPopupButton) return false;
            this.datetimeIcon = ej.buildTag("span.e-select", "", {}).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var icon = ej.buildTag("span.e-icon e-datetime", "", {}, { "aria-label": "select" }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.datetimeIcon.append(icon);
            this.container.append(this.datetimeIcon).addClass("e-padding");
            this._on(this.datetimeIcon, "click", this._iconClick);
            this._on(this.datetimeIcon, "mousedown", function (e) { e.preventDefault(); });
        },
        _setDimentions: function () {
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this.wrapper.height(this.model.height);
            this.wrapper.width(this.model.width);
        },

        _renderDropdown: function () {
            var oldWrapper = $("#" + this.element[0].id + "_popup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.popup = ej.buildTag("div.e-datetime-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.element[0].id + "_popup").css("visibility", "hidden");
            if (!ej.isTouchDevice()) this.popup.addClass('e-ntouch');
            $('body').append(this.popup);
            this._renderControls();

            var _timeTitle, _dateContainer, popupContainer, _today, _now, _done;

            _timeTitle = ej.buildTag("div.e-header", this._localizedLabels.buttonText.timeTitle).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._dateContainer = ej.buildTag("div.e-datecontainer").append(this.datePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._timeContainer = ej.buildTag("div.e-timecontainer").append(_timeTitle, this.timePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._drillDownContainer = ej.buildTag("div.e-drillDowncontainer").append().attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            popupContainer = ej.buildTag("div.e-popup-container").append(this._dateContainer, this._timeContainer, this._drillDownContainer).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            _today = ej.buildTag("div.e-dt-button e-dt-today e-btn e-select e-flat", this._localizedLabels.buttonText.today).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _now = ej.buildTag("div.e-dt-button e-dt-now e-btn e-select e-flat", this._localizedLabels.buttonText.timeNow).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _done = ej.buildTag("div.e-dt-button e-dt-done e-btn e-select e-flat", this._localizedLabels.buttonText.done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._buttonContainer = ej.buildTag("div.e-button-container").append(_today, _now, _done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._renderDrillDown();
            this.popup.append(popupContainer, this._buttonContainer);
            this._checkForResponsive();
            this._updateTimeHeight();

            this._bindOperations();
            this._updateValues();
            this.popup.css({ "visibility": "visible", "display": "none" });

            this._on(_today, "click", this._todayClick);
            this._on(_now, "click", this._nowClick);
            this._on(_done, "click", this._doneClick);
            this.popup.on("mouseenter touchstart", $.proxy(function () { this._popClose = true; }, this));
            this.popup.on("mouseleave touchend", $.proxy(function () { this._popClose = false; }, this));
            this._changeDesign();
        },
        _renderControls: function () {
            this._renderDateControl();
            this._renderTimeControl();
            var tempContainer = ej.buildTag("span").append(this.datePicker.wrapper, this.timePicker.wrapper);
            tempContainer.find("span").css("display", "none");
            this.popup.append(tempContainer);
        },
        _renderDrillDown: function () {
            this._renderHourPopup();
            this._renderMinsPopup();
        },
        _renderHourPopup: function () {
            var table;
            this._sfTimeHour = ej.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-hours ', "", {}, { id: (this._id ? 'e-hours-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
            if (!ej.isTouchDevice()) this._sfTimeHour.addClass('e-ntouch');
            this._drillDownContainer.append(this._sfTimeHour);
            this._renderHourTable();
        },
        _renderHourTable: function () {
            // Rendering header template
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                   .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-hours-headertext").text("October 2015").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .appendTo(this._sfTimeHour);

            // Render meridian calendar popup.
            if (this._interval < 1) return false;
            var start, end, timeVal, rowCount, table, tr, interval = this._interval * 60000;
            var tableCount = this.model.timeDrillDown.showMeridian ? 2 : 1; rowCount = this.model.timeDrillDown.showMeridian ? 6 : 4;
            var timeDisplayFormat = this.model.timeDrillDown.showMeridian ? "hh" : "HH:00";
            var meridianText = ["AM", "PM"], count = 0, meridianClass = "";

            start = this.timePicker._createObject("12:00:00 AM");
            end = this.model.timeDrillDown.showMeridian ? this.timePicker._createObject("11:59:59 AM") : this.timePicker._createObject("11:59:59 PM");

            for (var i = 0; i < tableCount; i++) {
                if (this.model.timeDrillDown.showMeridian) {
                    meridianClass = meridianText[i].toLowerCase();
                    var txt = !ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]]) ? ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
                    ej.buildTag("div.e-header-" + meridianClass).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                      .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-hours-meridiantxt-" + meridianClass).text(txt)
                      .attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                      .appendTo(this._sfTimeHour);
                }

                // Table for Time Value
                table = ej.buildTag("table.e-dp-viewhours", "", {}).data("e-table", "data").attr({ 'role': 'grid' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this._sfTimeHour.append(table);

                var tbody = ej.buildTag('tbody.e-timepicker-hours').attr((this._isIE8) ? { 'unselectable': 'on' } : {});

                tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});

                while (this.timePicker._compareTime(end, start, true)) {
                    timeVal = this._localizeTime(start, timeDisplayFormat);
                    var tdtag = ej.buildTag("td.e-hour e-state-default", timeVal);
                    this.model.timeDrillDown.showMeridian && tdtag.addClass("e-hour-" + meridianClass);
                    if (this._isIE8) tdtag.attr("unselectable", "on");
                    tr.append(tdtag);
                    count++;
                    if (count >= rowCount) {
                        count = 0;
                        tbody.append(tr);
                        tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    }
                    start = this.timePicker._createObject(start).getTime() + interval;
                }

                //tbody.append(tr);
                table.append(tbody);

                if (this.model.timeDrillDown.showMeridian) {
                    start = this.timePicker._createObject("12:00:00 PM");
                    end = this.timePicker._createObject("11:59:59 PM");
                }
            }

            // Rendering the footer template
            ej.buildTag("div.e-footer")
              .append(ej.buildTag("span.e-footer-icon"))
              .append(ej.buildTag("span.e-footer-text"))
              .appendTo(this._sfTimeHour);
            $('.e-footer-text', this._sfTimeHour).html(this._localizedLabels.buttonText.timeNow);
            $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this.datePicker.model.value, "dd MMM yyyy"));

            // Bind action to the item.
            this._on(this._sfTimeHour.find('.e-hour'), "click", $.proxy(this._hourNavHandler, this));
            this._on($('.e-next', this._sfTimeHour), "click", $.proxy(this._prevNextHourHandler, this));
            this._on($('.e-prev', this._sfTimeHour), "click", $.proxy(this._prevNextHourHandler, this));
            this._on($('.e-footer', this._sfTimeHour), "click", this._todayBtn);
            $('.e-hours-headertext', this._sfTimeHour).on("click", $.proxy(this._forwardNavHandler, this));

            this._sfTimeHour.hide();
        },
        _localizeTime: function (value, format) {
            return $.trim(ej.format(this.timePicker._createObject(value), format, this.model.locale));
        },
        _renderMinsPopup: function () {
            this._sfTimeMins = ej.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-minitues ', "", {}, { id: (this._id ? 'e-time-minitues-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
            if (!ej.isTouchDevice()) this._sfTimeMins.addClass('e-ntouch');
            this._drillDownContainer.append(this._sfTimeMins);

            // Rendering header template
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                   .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-minitues-headertext").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .appendTo(this._sfTimeMins);

            // Meridian Header template
            ej.buildTag("div.e-mins-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                          .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-minitues-meridiantxt").text("AM")
                          .attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                          .appendTo(this._sfTimeMins);

            // Table for Time Value
            var table = ej.buildTag("table.e-dp-viewmins", "", {}).data("e-table", "data").attr({ 'role': 'grid' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._sfTimeMins.append(table);

            var tbody = ej.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            // Render Time value
            if (this._intervall < 1) return false;
            var start, end, timeVal, interval = this._interval * 60000;
            start = this.timePicker._createObject("12:00:00 AM");
            end = this.timePicker._createObject("11:59:59 PM");
            var tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var count = 0;
            while (this.timePicker._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start, "HH:00");
                var tdtag = ej.buildTag("td.e-mins e-state-default", timeVal);
                if (this._isIE8)
                    tdtag.attr("unselectable", "on");
                tr.append(tdtag);
                count++;
                if (count >= 4) {
                    count = 0;
                    tbody.append(tr);
                    tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                }
                start = this.timePicker._createObject(start).getTime() + interval;
            }
            //tbody.append(tr);
            table.append(tbody);
            $('.e-minitues-headertext', this._sfTimeMins).text($('.e-hours-headertext', this._sfTimeHour).text());

            // Rendering the footer template
            ej.buildTag("div.e-footer")
               .append(ej.buildTag("span.e-footer-icon"))
               .append(ej.buildTag("span.e-footer-text"))
               .appendTo(this._sfTimeMins);
            $('.e-footer-text', this._sfTimeMins).html(this._localizedLabels.buttonText.timeNow);
            $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this.datePicker.model.value, "dd MMM yyyy"));
            !this.model.timeDrillDown.showMeridian && $(".e-mins-header", this._sfTimeMins).css("display", "none");

            // Bind action to the item.
            this._on(table.find('.e-mins'), "click", $.proxy(this._minsNavHandler, this));
            this._on($('.e-next', this._sfTimeMins), "click", $.proxy(this._prevNextMinsHandler, this));
            this._on($('.e-prev', this._sfTimeMins), "click", $.proxy(this._prevNextMinsHandler, this));
            this._on($('.e-footer', this._sfTimeMins), "click", this._todayBtn);
            $('.e-minitues-headertext', this._sfTimeMins).on("click", $.proxy(this._forwardNavHandler, this));
            this._sfTimeMins.hide();
        },
        _todayBtn: function () {
            this._nowClick();
            this._hideResult();
        },
        _hourNavHandler: function (e) {
            var value;
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && $(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();

            $("table", this._sfTimeHour).find("td").removeClass("e-active");
            $(e.target).addClass("e-active");

            this._sfTimeHour.hide();
            this._sfTimeMins.show();
            this._addFocus(this._sfTimeMins);
            if (this.model.timeDrillDown.showMeridian) {
                var txt = $(e.target).hasClass("e-hour-am") ? "AM" : "PM";
                value = $(e.target).text() + ":00 " + txt;
            }
            else
                value = $(e.target).text();
            this._generateMins(value);
            var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
            var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
            var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));
            var index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
            index = Math.ceil(index);
            this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);
        },
        _minsNavHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && $(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();
            $("table", this._sfTimeMins).find("td").removeClass("e-active").removeClass("e-state-hover");
            $(e.target).addClass("e-active");
            if (this.model.timeDrillDown.showMeridian) {
                var value = $(e.target).text() + " " + ej.format(this._datetimeValue, "tt", "en-US");
                value = this.timePicker._localizeTime(value)
            }
            else
                value = $(e.target).text();
            this.timePicker.option("value", value);
            this.datePicker.option("value", this._datetimeValue);
            this._datetimeValue = new Date(this.model.value.toString());
            this._updateInput();
            this.model.timeDrillDown.autoClose && this._hideResult(e);
        },
        _generateMins: function (value) {
            var minsTable = $('table', this._sfTimeMins);
            minsTable.empty();
            this.model.timeDrillDown.showMeridian ? $(".e-mins-header", this._sfTimeMins).show() : $(".e-mins-header", this._sfTimeMins).hide()
            var displayFormat = this.model.timeDrillDown.showMeridian ? "hh:mm" : "HH:mm";
            $('.e-minitues-headertext', this._sfTimeMins).text($('.e-hours-headertext', this._sfTimeHour).text());
            var tbody = ej.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var start, tr, end, timeVal, count = 0, interval = this.model.timeDrillDown.interval * 60000;
            start = this.timePicker._createObject(value);
            this._datetimeValue.setHours(start.getHours());
            end = this.timePicker._createObject(start).getTime() + 59 * 60000;
            tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            tbody.append(tr);
            while (this.timePicker._compareTime(end, start, true)) {
                if (count >= 4) {
                    count = 0;
                    tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    tbody.append(tr);
                }
                timeVal = this._localizeTime(start, displayFormat);
                var tdtag = ej.buildTag("td.e-mins e-state-default", timeVal);
                if (this._isIE8)
                    tdtag.attr("unselectable", "on");
                tr.append(tdtag);
                count++;
                start = this.timePicker._createObject(start).getTime() + interval;
            }
            minsTable.append(tbody);
            $(".e-mins-header", this._sfTimeMins).find('.e-minitues-meridiantxt').text(ej.format(this._datetimeValue, "tt", this.model.locale))
            this._disableRange("mins");
            this._on(minsTable.find('.e-mins'), "click", $.proxy(this._minsNavHandler, this));
        },
        _prevNextHourHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrev(progress, this._sfTimeHour);
        },
        _prevNextMinsHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrev(progress, this._sfTimeMins);
        },
        _processNextPrev: function (progress, wrapper) {
            if (progress && wrapper.find(".e-arrow-sans-left").hasClass("e-disable")) return false;
            else if (!progress && wrapper.find(".e-arrow-sans-right").hasClass("e-disable")) return false;
            var currentTable = $("table", wrapper), temp;
            var incVal, tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case "e-dp-viewhours":
                    incVal = progress ? -1 : 1;
                    this._datetimeValue.setDate(this._datetimeValue.getDate() + incVal);
                    this._disableRange("hour");

                    this._hoverHour = this._setFocusByIndex("hour", this._hoverHour, this._sfTimeHour);
                    $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    break;
                case "e-dp-viewmins":
                    incVal = progress ? -1 : 1;
                    this._datetimeValue.setHours(this._datetimeValue.getHours() + incVal);
                    this._generateMins($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));

                    var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
                    var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
                    var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

                    var index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
                    index = Math.ceil(index);

                    this._disableRange("mins");

                    this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);

                    $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    break;
            }
        },
        _forwardNavHandler: function (event, table) {
            if (this.model.readOnly || !this.model.enabled) return false;
            var hclassName, proxy = this;
            if (event) event.preventDefault();
            if (event)
                hclassName = $(event.currentTarget).get(0).className;
            else
                hclassName = table.find(".e-text>span").get(0).className;

            switch (hclassName) {
                case "e-hours-headertext":
                    this._sfTimeHour.css("display", "none");
                    this._dateContainer.css("display", "block");
                    this._addFocus(this._dateContainer.find('.e-datepicker'));
                    break;
                case "e-minitues-headertext":
                    this._sfTimeMins.css("display", "none");
                    this._disableRange("hour");

                    var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
                    var val = $.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
                    var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
                    indx = Math.floor(indx);

                    this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

                    $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    this._sfTimeHour.css("display", "block");
                    this._addFocus(this._sfTimeHour);
                    break;
            }
        },
        _renderDateControl: function () {
            var dateInput = ej.buildTag("input#" + this.element[0].id + "_date", "", {}, { "type": "text" });
            this.popup.append(dateInput);
            dateInput.ejDatePicker({

                height: "0px", width: "0px",
                displayInline: true,
                showDateIcon: false,
                showFooter: this.model.timeDrillDown.enabled ? this.model.timeDrillDown.showFooter : false,
                enableStrictMode: true,
                buttonText: this._localizedLabels.buttonText.today,

                minDate: this._stringToObject(this.model.minDateTime),
                maxDate: this._stringToObject(this.model.maxDateTime),

                dayHeaderFormat: this.model.dayHeaderFormat,
                startLevel: this.model.startLevel,
                depthLevel: this.model.depthLevel,
                startDay: this.model.startDay,
                stepMonths: this.model.stepMonths,
                showOtherMonths: this.model.showOtherMonths,
                specialDates: this.model.specialDates,
                highlightWeekend: this.model.highlightWeekend,
                headerFormat: this.model.headerFormat,

                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale,
                
            });
            if (!ej.isNullOrUndefined(this.model.value))
                this._datetimeValue = new Date(this.model.value.toString());
            this.datePicker = dateInput.data("ejDatePicker");
            this._datetimeValue = new Date(this.datePicker._dateValue.toString());
            this.model.startDay = this.datePicker.model.startDay;
            this.datePicker._getInternalEvents = true;
            this.datePicker._dt_drilldown = true;
            this.datePicker.popup.css({ "position": "static", "display": "block" });
        },
        _renderTimeControl: function () {
            var timeInput = ej.buildTag("input#" + this.element[0].id + "_time", "", {}, { "type": "text" });
            this.popup.append(timeInput);
            var popupWidth = this.model.timePopupWidth,width;
            if ((typeof (popupWidth) == "string" && popupWidth.indexOf("%") != -1) || typeof (popupWidth) == "string") width = parseInt(popupWidth) > 0 ? popupWidth : 105 && (this.model.timePopupWidth = 105);
            else {
                width = popupWidth > 0 ? popupWidth : 105 && (this.model.timePopupWidth = 105);
            }
            timeInput.ejTimePicker({
                height: "0px", width: "0px",
                interval: this.model.interval,
                timeFormat: this.model.timeDisplayFormat,
                popupWidth: width,
                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale,
				disableTimeRanges: this.model.disableTimeRanges,
            });
            this.timePicker = timeInput.data("ejTimePicker");
            this.timePicker._renderDropdown();
            this.timePicker.popup.css({ "position": "static", "display": "block" });
            this.timePicker._getInternalEvents = true;
            this.timePicker.showDropdown = true;
            this.timePicker._dateTimeInternal = true;
            var min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            var max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;

        },
        _updateTimeHeight: function () {
            var height = this.popup.find(".e-timecontainer .e-header").is(":visible") ? this.datePicker.popup.height() - this.popup.find(".e-header").height() : this.datePicker.popup.height();
            height = this.popup.hasClass("e-dt-responsive") ? "98px" : height;
            this.timePicker.option("popupHeight", height);
        },

        _bindOperations: function () {
            var proxy = this;
            this.datePicker.option("layoutChange", function () { proxy._updateTimeHeight(); });
            this.datePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.timePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.datePicker.option("change", function (a) {
                proxy._refreshTimes(a);
            });
            this.datePicker.option("select", function (e) {
                proxy._updateInput(e);
            });
            this.datePicker.option("dt_drilldown", function (e) {
                if (proxy.model.timeDrillDown.enabled) {
                    proxy._updateInput(e);
                    proxy._switchToDrilDown(e);
                }
            });
            this.timePicker.option("select", function () { proxy._updateInput(); });
        },
        _switchToDrilDown: function (e) {
            this._dateContainer.hide();
            this._sfTimeHour.show();
            this._addFocus(this._sfTimeHour);
            var selected = new Date(this.model.value.toString());
            this._datetimeValue = new Date(selected.setHours(this._datetimeValue.getHours(), this._datetimeValue.getMinutes(), this._datetimeValue.getSeconds(), this._datetimeValue.getMilliseconds()));

            // To hide the hours that exceeds the min and max.
            this._disableRange("hour");

            var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
            var val = $.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
            var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
            indx = Math.floor(indx);

            this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

            $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
            $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
        },
        _disableRange: function (view) {
            var interval = view == "hour" ? this._interval : this.model.timeDrillDown.interval, table = view == "hour" ? this._sfTimeHour : this._sfTimeMins
            var addClassName = view == "hour" ? "e-hide-hour e-disable" : "e-hide-mins e-disable";
            table.find('tbody tr td.e-' + view).removeClass(addClassName);
            table.find('.e-arrow-sans-left').removeClass("e-disable");
            table.find('.e-arrow-sans-right').removeClass("e-disable");
            var start = view == "hour" ? this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00") :
                this._localizeTime($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)), "HH:00");

            if (this._compareDate(this.model.minDateTime, this._datetimeValue)) {
                if (view == "mins")
                    if (!(this.model.minDateTime.getHours() === this._datetimeValue.getHours())) return false;
                var val = $.trim(ej.format(this.timePicker._createObject(this.model.minDateTime), "HH:mm", this.model.locale));
                var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
                indx = view == "hour" ? Math.floor(indx) : Math.ceil(indx);
                for (var i = 0; i < indx; i++) {
                    var allValues = table.find('tbody tr td.e-' + view), cell;
                    cell = allValues[i];
                    $(cell).addClass(addClassName);
                }
                table.find('.e-arrow-sans-left').addClass("e-disable");
            }
            if (this._compareDate(this.model.maxDateTime, this._datetimeValue)) {
                if (view == "mins")
                    if (!(this.model.maxDateTime.getHours() === this._datetimeValue.getHours())) return false;
                var val = $.trim(ej.format(this.timePicker._createObject(this.model.maxDateTime), "HH:mm", this.model.locale));
                var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
                indx = Math.floor(indx) + 1;
                var length = table.find('tbody tr td.e-' + view).length
                for (var i = indx; i < length; i++) {
                    var allValues = table.find('tbody tr td.e-' + view), cell;
                    cell = allValues[i];
                    $(cell).addClass(addClassName);
                }
                table.find('.e-arrow-sans-right').addClass("e-disable");
            }
        },
        _setFocusByName: function (name, value, table) {
            var allValues = table.find('tbody tr td.e-' + name), index, cell;
            $(allValues).each(function (i, ele) {
                if (ele.innerHTML == value) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            table.find('table td').removeClass("e-state-hover").removeClass('e-active');
            if (!$(cell).hasClass("e-hide-" + name))
                $(cell).addClass("e-state-hover");
            this._setActiveState(name, table);
            return index;
        },

        _setFocusByIndex: function (name, index, table) {
            var allValues = table.find('tbody tr td.e-' + name), cell;
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            table.find('table td').removeClass("e-state-hover").removeClass('e-active');
            if (!$(cell).hasClass("e-hide-" + name))
                $(cell).addClass("e-state-hover");
            this._setActiveState(name, table);
            return index;
        },

        _setActiveState: function (selection, table) {
            var items = table.find('tbody tr td.e-' + selection), cell, proxy = this;
            var indx = -1;
            switch (selection) {
                case "hour":
                    if (this._compareDate(this.model.value, this._datetimeValue)) {

                        var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
                        var val = $.trim(ej.format(this.timePicker._createObject(this.model.value), "HH:00", this.model.locale));
                        indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
                        indx = Math.floor(indx);

                    }
                    break;
                case "mins":
                    if (this._compareDate(this.model.value, this._datetimeValue) && (this.model.value.getHours() === this._datetimeValue.getHours())) {

                        var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
                        var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
                        var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

                        indx = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
                        indx = Math.ceil(indx);
                    }
                    break;
            }
            cell = items[indx];
            if (cell) {
                table.find('table td').removeClass("e-active");
                $(cell).removeClass("e-state-hover").addClass("e-active");
            }
        },

        _compareDate: function (first, second) {
            var val1 = new Date(first.toString()).setHours(0, 0, 0, 0);
            var val2 = new Date(second.toString()).setHours(0, 0, 0, 0);
            var result = (+val1 === +val2) ? true : false;
            return result;
        },

        _updateInput: function (e) {
            var minVal =  ((+new Date() < +this.model.minDateTime) || (+new Date() > +this.model.maxDateTime)) ? this.model.minDateTime : new Date().setHours(0, 0, 0, 0);
            var date = this._getDate() || new Date(minVal), time = this._getTime() || this.timePicker._createObject(minVal);
            this.model.value = new Date(date.getFullYear(), date.getMonth(), date.getDate(),
                time.getHours(), time.getMinutes(), time.getSeconds());
            this._updateDateTime();
            this._raiseChangeEvent();
            this._updateModel(e, true);
            if (e)
                e.cancel = true;
        },
        _updateDateTime: function () {
            this.isValidState = true;
            var datetime = this._objectToString(this.model.value);
            this.element.val(datetime);
            this._removeWatermark();
        },
        _refreshTimes: function (args) {
            var value = this._getDateObj(args.value, this.datePicker.model.dateFormat);
            if (!value) return false;
            this.isValidState = true;

            if (this._compare(value, this._setEmptyTime(this.model.minDateTime))) {
                var mintime = this._getFormat(this.model.minDateTime, this.timePicker.model.timeFormat);
                var preTime = this._getTime();
                this.timePicker.option("minTime", mintime);
                if (!this.model.enableStrictMode) {
                    this._updateInput();
                }
            }
            else
                this.timePicker.option("minTime", this._defaultMinVal());

            if (this._compare(value, this._setEmptyTime(this.model.maxDateTime))) {
                var maxtime = this._getFormat(this.model.maxDateTime, this.timePicker.model.timeFormat);
                var preTime = this._getTime();
                this.timePicker.option("maxTime", maxtime);
                if (!this.model.enableStrictMode) {
                    this._updateInput();
                }
            }
            else
                this.timePicker.option("maxTime", this._defaultMaxVal());

            this.timePicker._changeActiveEle();
            if (!ej.isNullOrUndefined(this.model.disableDateTimeRanges)) {
                this._setDisabledTimeRanges(args);				
            }

        },
		_setDisabledTimeRanges: function(args){
				var currvalue = args? args.value : this._setEmptyTime(this.model.value);
				this._between=[];
                this._initDisableTimeRanges(currvalue);
				if(!this._datesDisabled){
					this._disableBetweenDates();
					this.datePicker.option("blackoutDates", this._between);
				}
		},

        _defaultMinVal: function () {
            var minVal = new Date().setHours(0, 0, 0, 0);
            var minTimeVal = ej.format(this.timePicker._createObject(minVal), this.timePicker.model.timeFormat, this.timePicker.model.locale);
            return minTimeVal;
        },
        _defaultMaxVal: function () {
            var maxval = new Date().setHours(23, 59, 59, 59);
            var maxTimeVal = ej.format(this.timePicker._createObject(maxval), this.timePicker.model.timeFormat, this.timePicker.model.locale);
            return maxTimeVal;
        },
        _updateValues: function () {
            var dateValue = this.model.enableStrictMode && this.model.value == null ? this.element.val() : this.model.value;
            if (this.model.value != null) {
                this.datePicker.option("value", this.model.value);
                this.timePicker.option("value", this.model.value);
            }
            this._setValue(dateValue);
            this._validateMinMax();
            this._preVal = this.element.val();
            this._checkErrorClass();
        },
        _specificFormat: function () {
            var parseInfo = ej.globalize._getDateParseRegExp(ej.globalize.findCulture(this.model.locale).calendar, this.model.dateTimeFormat);
            return ($.inArray("dddd", parseInfo.groups) > -1 || $.inArray("ddd", parseInfo.groups) > -1)
        },
        _changeEditable: function (bool) {
            var action = bool ? "_on" : "_off";
            if (this.element.is(":input")) {
                if (bool) {
                    if (!this.model.readOnly) this.element.attr("readonly", false);
                    this.element.off("mousedown", $.proxy(this._showhidePopup, this));
                }
                else {
                    if (!this.model.readOnly) this.element.attr("readonly", "readonly");
                    this.element.on("mousedown", $.proxy(this._showhidePopup, this));
                }
                this[action](this.element, "blur", this._targetBlur);
                this[action](this.element, "focus", this._targetFocus);
                this[action](this.element, "keydown", this._keyDownOnInput);
            }
            this._change("allowEdit", bool);
        },
        _setValue: function (value) {
            if (!value || (typeof JSON === "object" && JSON.stringify(value) === "{}")) {
                this.element.val("");
                this.model.value = null;
                this.isValidState = true;
                this.wrapper.removeClass('e-valid');
            }
            else if (typeof value === "string") {
                if (this._extISORegex.exec(value) || this._basicISORegex.exec(value)) this._checkObject(this._dateFromISO(value));
                else {
                    this.element.val(value);
                    this._updateModel();
                    this._validateMinMax();
                    this._checkStrictMode();
                    this.wrapper.addClass('e-valid');
                }
            }
            else if (value instanceof Date && this._isValidDate(value)) {
                this._checkObject(value);
            }
			if(!ej.isNullOrUndefined(this.model.disableDateTimeRanges))this._validateDisableRanges();
            this._checkErrorClass();
            return this.model.value;
        },
        _checkObject: function (value) {
            if (value instanceof Date && this._isValidDate(value)) {
                this.model.value = value;
                this._updateDateTime();
                this._validateMinMax();
                this._checkStrictMode();
            }
        },
        _dateFromISO: function (date) {
            var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            var char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _validateValue: function (value) {
            var dateObj = ej.parseDate(value, this.model.dateTimeFormat,this.model.locale);
			var timeVal = null;
			if (this.timePicker != undefined) {
			    timeVal = this._getFormat(dateObj, this.timePicker.model.timeFormat);
			}
            if (!dateObj || dateObj < this.model.minDateTime || dateObj > this.model.maxDateTime || !ej.isNullOrUndefined(this.timePicker) && this.timePicker._ensureTimeRange(timeVal)) {
                this.model.value = null;
                this._change("value", this.model.value);
                this.isValidState = false;
            }
            else {
                this._change("value", this.model.value);
                this.isValidState = true;
            }
        },
        _validateMinMax: function () {
            var value, min, max;
            value = (this.model.value) ? this._stringToObject(this.model.value) : null;
            min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;
            if (!value || !min || !max) return false;
            if (min > max) this.model.minDateTime = this.model.maxDateTime;
            if (value < min) {
                if (!this.model.enableStrictMode) {
                    this._setValue(min);
                    this.isValidState = true;
                }
                else if (this.model.enableStrictMode) {
					if (this.popup){
                    this.datePicker.option('minDate', this._getFormat(min, this.datePicker.model.dateFormat));
                    this.timePicker.option('minTime', this._getFormat(min, this.timePicker.model.timeFormat));
					}
                    this.isValidState = false;
                }
            }
            if (value > max) {
                if (!this.model.enableStrictMode) {
                    this._setValue(max);
                    this.isValidState = true;
                }
                else if (this.model.enableStrictMode) {
					if (this.popup){
                    this.datePicker.option('maxDate', this._getFormat(max, this.datePicker.model.dateFormat));
                    this.timePicker.option('maxTime', this._getFormat(max, this.timePicker.model.timeFormat));
					}
                    this.isValidState = false;

                }
            }

            if (!(value < min) && !(value > max)) this.isValidState = true;
        },

        _checkProperties: function () {
            this.model.readOnly && this._readOnly(true);
            this.model.showRoundedCorner && this._setRoundedCorner(true);
            this.model.enableRTL && this._setRtl(true);
            this.model.enabled && this._enabled(true);
            if (!this.model.enabled) this._enabled(false);
            else if (this.model.enabled && this.element.hasClass("e-disable")) this._enabled(true);
            this.model.name = !this._options.name ? !this.element.attr("name") ? this.element[0].id : this.element.attr("name") : this.model.name;
            this.element.attr("name", this.model.name);
            this._checkStrictMode();
            this._checkErrorClass();
            this._setWaterMark();
        },

        _checkStrictMode: function () {
            if (!this.model.enableStrictMode) {
                if (!this.isValidState) {
                    if (this.model.value < this.model.minDateTime) {
                        this.element.val(this._objectToString(this.model.minDateTime));
                        this.model.value = this.model.minDateTime;
                        this.isValidState = true;
                    }
                    else if (this.model.value > this.model.maxDateTime) {
                        this.element.val(this._objectToString(this.model.maxDateTime));
                        this.model.value = this.model.maxDateTime;
                        this.isValidState = true;
                    }
                    else {
                        this.model.value = "";
                        this.element.val("");
                        this.isValidState = true;
                    }
                }
            }
            else if (this.model.enableStrictMode) {
                if (!this.isValidState) {

                    this.model.value = null;
                    this.isValidState = false;
                }
            }
        },

        _targetFocus: function (e) {
            e.preventDefault();
            this.isFocused = true;
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass("e-error");
            if (!this._isSupport) this._hiddenInput.css("display", "none");
            this._prevDateTimeVal = this.element.val();
            if (!this.model.showPopupButton && !this.model.readOnly) this._showResult();
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
            if (!this.model.showPopupButton && this.model.readOnly) this._off(this.element, "click", this._elementClick);
            this._trigger("focusIn", { value: this.model.value });
            this.wrapper.addClass('e-valid');
        },
        _targetBlur: function () {
            this.isFocused = false;
            this.wrapper.removeClass("e-focus");
            if (!this.model.showPopupButton) this._hideResult();
            var dateObj = ej.parseDate(this.element.val(), this.model.dateTimeFormat, this.model.locale);
            if (dateObj && !this.model.enableStrictMode) {
                if (dateObj < this.model.minDateTime || dateObj > this.model.maxDateTime) {
                    dateObj = dateObj < this.model.minDateTime ? this.model.minDateTime : this.model.maxDateTime;
                    this.element.val(this._objectToString(dateObj));
                }
            }
            var val = ej.parseDate(this.element.val(), this.model.dateTimeFormat, this.model.locale);
            if (val == null && !this.model.enableStrictMode) {
                if (this._prevDateTimeVal == null || this.element.val() == "") {
                    this.element.val("");
                } else
                    this.element.val(this._preVal);
            }
            this._valueChange();
            if (!this.model.enableStrictMode) {
                if (!this.isValidState) {
                    this.element.val(this._prevDateTimeVal);
                    this._preVal = this._prevDateTimeVal;
                    this.model.value = this._stringToObject(this._prevDateTimeVal);
                    this.isValidState = true;
                }
                else
                    this._prevDateTimeVal = this.element.val();
            } else if (this.element.val() != "")
                this._validateValue(this.element.val());
            if (!this._isSupport && this.element.val() == "")
                this._hiddenInput.css("display", "block");
            this._checkErrorClass();
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            this._trigger("focusOut", { value: this.model.value });
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            this._previousDateUpdate();
        },
        _previousDateUpdate: function () {
            var previous = ej.parseDate(this._prevDateTime, this.model.dateTimeFormat);
            var current = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
            if (!(+previous === +current)) {
                this._preValString = this._prevDateTime;
                this._prevDateTime = this.element.val();
            }
            return this._preValString;
        },
        _elementClick: function () {
            if (!this.isPopupOpen) this._showResult();
        },
        _keyDownOnInput: function (e) {
            switch (e.keyCode) {
                case 40:
                    if (e.altKey) this._showhidePopup();
                    break;
                case 37:
                case 39:
                    if (!this.model.timeDrillDown.enabled)
                        if (e.altKey && this.isPopupOpen) {
                            e.preventDefault();
                            this._addPrevNextFocus(e.keyCode == 37);
                        }
                    break;
                case 27:
                    e.preventDefault();
                case 9:
                    this._hideResult();
                    break;
                case 13:    // Enter Key
                    var val = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
                    if (val == null && !this.model.enableStrictMode) {
                        if (this._prevDateTimeVal == null || this.element.val() == "") {
                            this.element.val("");
                        } else
                            this.element.val(this._preVal);
                    }
                    this._valueChange();
                    if (!this.model.timeDrillDown.enabled) {
                        this._valueChange();
                        if (this.model.enableStrictMode)
                            this._checkErrorClass();
                        break;
                    }
            }
        },
        _addFocus: function (target) {
            if (!target.hasClass("e-focus")) {
                this._removeFocus();
                target.addClass("e-focus");
                if (target.hasClass("e-datepicker e-popup"))
                    $(document).on("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    $(document).on("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-time-hours"))
                    $(document).on("keydown", $.proxy(this._keyDownOnHours, this));
                else if (target.hasClass("e-time-minitues"))
                    $(document).on("keydown", $.proxy(this._keyDownOnMinutes, this));
                else if (target.hasClass("e-dt-button"))
                    $(document).on("keydown", $.proxy(this._buttonClick, this));
            }
        },
        _removeFocus: function () {
            var target = this._getFocusedElement();
            if (target.length > 0) {
                target.removeClass("e-focus");
                if (target.hasClass("e-datepicker e-popup"))
                    $(document).off("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    $(document).off("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-time-hours"))
                    $(document).off("keydown", $.proxy(this._keyDownOnHours, this));
                else if (target.hasClass("e-time-minitues"))
                    $(document).off("keydown", $.proxy(this._keyDownOnMinutes, this));
                else if (target.hasClass("e-dt-button"))
                    $(document).off("keydown", $.proxy(this._buttonClick, this));
            }
        },
        _addPrevNextFocus: function (flag) {
            // flag true means previous focus, false means next focus
            var target = this._getFocusedElement(), next;
            if (target.length > 0) {
                if (target.hasClass("e-datepicker e-popup"))
                    next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-timecontainer");
                else if (target.hasClass("e-timecontainer"))
                    next = flag ? this.popup.find(".e-datecontainer >.e-datepicker.e-popup") : this.popup.find(".e-dt-today");
                else if (target.hasClass("e-dt-today"))
                    next = flag ? this.popup.find(".e-timecontainer") : this.popup.find(".e-dt-now");
                else if (target.hasClass("e-dt-now"))
                    next = flag ? this.popup.find(".e-dt-today") : this.popup.find(".e-dt-done");
                else if (target.hasClass("e-dt-done"))
                    next = flag ? this.popup.find(".e-dt-now") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
            }
            else next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
            this._addFocus(next);
        },
        _getFocusedElement: function () {
            return this.popup.children("div").find("div.e-focus")
        },
        _keyDownOnHours: function (e) {
            if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this._sfTimeHour.find('tbody tr td.e-state-hover').index();
                t.row = this._sfTimeHour.find('tbody tr td.e-state-hover').parent().index();

                if (t.col != -1)
                    t.col = t.col + 1;
                else
                    t.col = this._sfTimeHour.find('tbody tr td.e-active').index() + 1;


                if (t.row != -1) {
                    t.row = t.row + 1;
                    if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-state-hover').hasClass('e-hour-pm'))
                        t.row = t.row + 2;
                }
                else {
                    t.row = this._sfTimeHour.find('tbody tr td.e-active').parent().index() + 1;
                    if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-active').hasClass('e-hour-pm'))
                        t.row = t.row + 2;
                }

                var tableClass = this._sfTimeHour.find('table')[0].className, next;
                var rowLength = this._sfTimeHour.find('tbody.e-timepicker-hours tr').length, colLength = this.model.timeDrillDown.showMeridian ? 6 : 4;
                next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "hours", e.ctrlKey);
                if (!e.ctrlKey) this._hoverHour = this._sfTimeHour.find('tbody.e-timepicker-hours tr td').index(next);

                if (!e.ctrlKey) {
                    this._sfTimeHour.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
        },

        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass, table, hiddenClass, cls = { parent: null, child: null };
            switch (target) {
                case "hours": eleClass = "tbody.e-timepicker-hours tr td.e-hour";
                    cls.parent = ".e-timepicker-hours", cls.child = ".e-hour";
                    hiddenClass = ".e-hide-hour";
                    table = this._sfTimeHour;
                    break;
                case "mins": eleClass = "tbody.e-timepicker-mins tr td.e-mins";
                    cls.parent = ".e-timepicker-mins", cls.child = ".e-mins";
                    hiddenClass = ".e-hide-mins";
                    table = this._sfTimeMins;
                    cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
                    break;

            }
            if (t.row <= 0 && t.col <= 0)
                return table.find(eleClass + ':not(.e-disable):first');
            var cell, proxy = this;
            switch (key) {
                case 36:
                    return table.find(eleClass + ':not(.e-disable):first');
                case 35:
                    return table.find(eleClass + ':not(.e-disable):last');
                case 38:
                    if (ctrlKey) {
                        this._forwardNavHandler(null, table);
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "up", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                case 37:
                    if (ctrlKey) {
                        this._processNextPrev(true, table);
                        return table.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                        // different columns for the mins popup.
                        if (target == "mins") t.col = cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
                    }
                    else {
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':not(.e-disable):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "left", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':not(.e-disable):last');
                    }
                    return cell;
                case 39:
                    if (ctrlKey) {
                        this._processNextPrev(false, table);
                        return table.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrev(false, table);
                        cell = table.find(eleClass + ':not(.e-disable):first');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "right", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(false, table);
                        cell = table.find(eleClass + ':not(.e-disable):first');
                    }
                    return cell;
                case 40:
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrev(false, table);
                            cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls, table).not(hiddenClass);
                        if (cell.length <= 0) {
                            cell = this._findVisible(t, cls, "down", table);
                            if (cell !== null) return cell;
                            this._processNextPrev(false, table);
                            cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                    }
                case 13:
                    var ele, args, element;
                    ele = this._getCell(t, cls, table); element = $(ele)[0];
                    args = { type: null, target: ele };
                    if (target == "hours") this._hourNavHandler(args);
                    if (target == "mins") this._minsNavHandler(args);
                    break;
            }
            return this._getCell(t, cls, table).not(hiddenClass);
        },
        _getCell: function (t, cls, table) {
            var row = t.row;
            if (this.model.timeDrillDown.showMeridian && t.row > 2 && table.hasClass('e-time-hours'))
                row = row - 2;
            var cell = table.find('tbody' + cls.parent + ' tr:nth-child(' + row + ') td' + cls.child + ':nth-child(' + t.col + ')');
            if (this.model.timeDrillDown.showMeridian && cell.length > 0 && table.hasClass('e-time-hours'))
                cell = t.row <= 2 ? $(cell[0]) : $(cell[1]);
            return cell;
        },
        _findVisible: function (t, cls, key, table) {
            var cols = t.col, rows = t.row, requiredClass = cls.child.slice(1, cls.child.length);
            for (var i = 0; i >= 0; i++) {
                //nextElement = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
                var nextElement = this._getCell({ row: rows, col: cols }, cls, table)
                if (nextElement.length <= 0) {
                    return null;
                }
                if (nextElement.hasClass('e-disable') || !nextElement.is(":visible")) {
                    key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
                    if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                    // Column exceeds the range. 
                    if (cols > table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
                        //move to next row and select first column
                        rows++;
                        cols = 1;
                    }
                    if (cols <= 0) {
                        //move to previous row and select last column
                        rows--;
                        cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
                    }
                    // Row exceeds the range.
                    if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                } else if (nextElement.hasClass(requiredClass)) {
                    t.col = cols; t.row = rows;
                    nextElement = this._getCell(t, cls, table)
                    return nextElement;
                }
            }
        },
        _keyDownOnMinutes: function (e) {
            if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this._sfTimeMins.find('tbody tr td.e-state-hover').index();
                t.row = this._sfTimeMins.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this._sfTimeMins.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this._sfTimeMins.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this._sfTimeMins.find('table')[0].className, next;
                var rowLength = this._sfTimeMins.find('tbody.e-timepicker-mins tr').length, colLength = 4;
                next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "mins", e.ctrlKey);
                if (!e.ctrlKey) this._hoverHour = this._sfTimeMins.find('tbody.e-timepicker-mins tr td').index(next);

                if (!e.ctrlKey) {
                    this._sfTimeMins.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
        },
        _valueChange: function (isCode) {
            if (!this.model.enableStrictMode) {
                if (this._preVal != this.element.val()) {
                    this._preVal = this.element.val();
                    this._updateModel();
                    this._validateMinMax();
                    this._raiseChangeEvent(isCode);
                }
                this._setWaterMark();
            }
            else if (this.model.enableStrictMode) {
                if (this._preVal != this.element.val() || this.model.value < this.model.minDateTime || this.model.value > this.model.maxDateTime) {
                    this._updateModel();
                    this._raiseChangeEvent(isCode);
                }
            }
        },
        _updateModel: function (e, stopUpdateModel) {
            if (this._stopRefresh) {
                this._stopRefresh = false
                return;
            }
            var value = this.element.val();
            if (value == "") {
                this.model.value = null;
                this._change("value", this.model.value);
                this.isValidState = true;
            }
            else {
                var dateObj;
                if (e != undefined && e.type == "select" || this._prevDateTimeVal == this.element.val()) dateObj = this.model.value;
                else dateObj = ej.parseDate(value, this.model.dateTimeFormat, this.model.locale);
                if (dateObj) {
                    this.model.value = dateObj;
                    this.isValidState = true;
                    this._refreshPopup(stopUpdateModel);
                    if (this._specificFormat() && this._prevDateTimeVal != this.element.val())
                        this.element.val(this._objectToString(this.model.value));
                }
                else {
                    this.model.value = null;
                    this._change("value", this.model.value);
                    this.isValidState = false;
                    if (!this.model.enableStrictMode)
                        this.element.val(this._objectToString(this.model.value));
                }
            }
        },
        _refreshPopup: function (stopUpdateModel) {
            if (this.isValidState && this.isPopupOpen) {
                var date = this._setEmptyTime(this.model.value), time = this._setEmptyDate(this.model.value);
                var getDate = this._getDate(), getTime = this._getTime();
                if (!getDate || !this._compare(getDate, date)) this.datePicker.option("value", date);
				if ((!getTime || !this._compare(getTime, time)) && !stopUpdateModel) this.timePicker.option("value", time);
            }
        },

        _buttonClick: function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                var target = this._getFocusedElement();
                if (target.hasClass("e-dt-today"))
                    this._todayClick();
                else if (target.hasClass("e-dt-now"))
                    this._nowClick();
                else if (target.hasClass("e-dt-done"))
                    this._doneClick();
            }
        },
        _todayClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            if (!this.datePicker.popup.find(".today").hasClass("e-active") ||
                !this.datePicker.popup.children("table").hasClass("e-dp-viewdays") ||
                this.element.val() == "" || !this.isValidState) {
                this.datePicker._setCurrDate();
                this._updateInput();
            }
        },
        _nowClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            this.timePicker.setCurrentTime();
            var mintime = this.model.minDateTime, maxtime = this.model.maxDateTime, date = this.datePicker.model.value, time = new Date();
            date = ej.isNullOrUndefined(date) ? new Date() : date;
            var currTime = new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());
            if (currTime < mintime)
                this.timePicker.option("value", this.timePicker._localizeTime(mintime));
            else if (currTime > maxtime)
                this.timePicker.option("value", this.timePicker._localizeTime(maxtime));
            this._updateInput();
        },
        _doneClick: function () {
            this._hideResult();
        },

        _iconClick: function (e) {
            e.preventDefault();
            if (!this.isFocused && (!ej.isTouchDevice())) this.element.focus();
            this._showhidePopup();
			if(this.model.disableDateTimeRanges && ej.isNullOrUndefined(this.model.value)) this._setDisabledTimeRanges(this.datePicker.model.value);
            if (this._isIE9)
                this.popup.find(".e-popup-container").css("display", "inline-block");
        },
        _setInitialSelection: function () {
            var elements = this.timePicker.ul.find("li");
            if (elements.hasClass('e-hover')) { this._calcScrollTop(); return; }
            var currentTime = this.timePicker._setEmptyDate(new Date()), selected;
            selected = currentTime;
            if (this.timePicker.minTime && !this._compareTime(this._createObject(currentTime), this.timePicker.minTime, true))
                selected = this.timePicker.minTime;
            if (this.timePicker.maxTime && !this._compareTime(this.timePicker.maxTime, this._createObject(currentTime), true))
                selected = this.timePicker.maxTime;
            var firstTime = elements.first().html(), index;
            index = (this.timePicker._parse(selected) - this.timePicker._parse(firstTime)) / (this.timePicker.model.interval * 60000);
            index = Math.round(index);
            var activeItem = (index == elements.length) ? index : index + 1;
            if (activeItem < 0 || activeItem > elements.length || isNaN(activeItem)) activeItem = 1;
            var activeEle = $(this.timePicker.ul.find("li")[activeItem - 1]);
            activeEle.addClass('e-hover');
            this._calcScrollTop();
        },
        _calcScrollTop: function () {
            var ulH = this.timePicker.ul.outerHeight(), liH = this.timePicker.ul.find("li").outerHeight(), index, top;
            index = this.timePicker.ul.find("li.e-hover").index();
            top = (liH * index) - ((this.timePicker.popupList.outerHeight() - liH) / 2);
            this.timePicker.scrollerObj.setModel({ "scrollTop": top });
        },
        _showhidePopup: function () {
            if (this.model.readOnly) return false;
            if (!this.isPopupOpen)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            if (!this.popup) this._renderDropdown();
            if (this.isPopupOpen || !this.model.enabled) return false;
			this._setRtl(this.model.enableRTL);
			this._setRoundedCorner(this.model.showRoundedCorner);
            if (this._trigger("beforeOpen", { element: this.popup })) return false;
            this.isPopupOpen = true;
			this.element.attr({'aria-expanded':'true'})
            this._setListPosition();
            this._checkForResponsive();
            var proxy = this;
            this.popup.slideDown(this.model.enableAnimation ? 200 : 0, function () {
                proxy._on($(document), "mousedown", proxy._OnDocumentClick);
                proxy.model.timeDrillDown.enabled && proxy._addFocus(proxy._dateContainer.find('.e-datepicker'));
                if (!proxy.timePicker.model.value) proxy._setInitialSelection();
            });
            this._updateModel();
            this._updateTimeHeight();
            this._validateMinMax();
            this._on($(window), "resize", this._OnWindowResize);
            this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._on(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this._raiseEvent("open");
            if (this._initial) {
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
                this._initial = false;
            }
            this.wrapper.addClass("e-active");
        },
        _hideResult: function (e) {
			if ( e && (e.type == "touchmove" || e.type== "scroll")) {
				if ($(e.target).parents("#"+this.popup[0].id).length > 0)
				return;
	        }
            var proxy = this;
            if (!this.isPopupOpen) return false;
            if (this._trigger("beforeClose", { element: this.popup })) return false;
            this.isPopupOpen = false;
			this.element.attr({'aria-expanded':'false'})
            this._removeFocus();
            if (this._popClose && e && e.type != "click") {
                this.isPopupOpen = true;
                return;
            }
            this.popup.slideUp(this.model.enableAnimation ? 100 : 0, function () {
                if (proxy.model) {
                    if (proxy.model.timeDrillDown.enabled) {
                        proxy._sfTimeHour.hide();
                        proxy._sfTimeMins.hide();
                        proxy._dateContainer.show();
                    }
                    if (!ej.isNullOrUndefined(proxy.model.value))
                        proxy._datetimeValue = new Date(proxy.model.value.toString());
                }
            });
            this._raiseEvent("close");
            this._off($(document), "mousedown", this._OnDocumentClick);
            this._off($(window), "resize", this._OnWindowResize);
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._off(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this.wrapper.removeClass("e-active");
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popup.outerHeight(),
            popupWidth = this.popup.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
			popupPosition = this.model.popupPosition;
            if (this.model.popupPosition == ej.PopupPosition.Bottom)
                var topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            else
                var topPos = ((popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popup.outerWidth() - elementObj.outerWidth();
            this.popup.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _OnDocumentClick: function (e) {
            if (this.model) {
                if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-datetime-popup").is(this.popup) &&
                    !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datetime-wrap").is(this.wrapper)) {
                    this._hideResult();
                }
                else if ($(e.target).is(this.popup) || $(e.target).parents(".e-datetime-popup").is(this.popup)) {
                    e.preventDefault();
                    if ($(e.target).parents(".e-datepicker").length > 0) this._addFocus($(e.target).parents(".e-datepicker"));
                    else if ($(e.target).parents(".e-timecontainer").length > 0) this._addFocus($(e.target).parents(".e-timecontainer"));
                    else if ($(e.target).hasClass("e-dt-button")) this._addFocus($(e.target));
                    else if ($(e.target).parents(".e-time-hours").length > 0) this._addFocus($(e.target).parents(".e-time-hours"));
                    else if ($(e.target).parents(".e-time-minitues").length > 0) this._addFocus($(e.target).parents(".e-time-minitues"));
                    else this._removeFocus();
                }
            }
        },
        _OnWindowResize: function (e) {
            this._setListPosition();
            this._checkForResponsive();
            this._updateTimeHeight();
        },

        _raiseChangeEvent: function (isCode) {
            var previous = ej.parseDate(this._prevDateTimeVal, this.model.dateTimeFormat);
            var current = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
            if (!(+previous === +current)) {
                this._preVal = this.element.val();
                var data = { prevDateTime: this._prevDateTimeVal, value: this.element.val(), isInteraction: !isCode, isValidState: this.isValidState };
				if (this.timePicker && this.timePicker.model) {
					var timeVal = this._getFormat(current, this.timePicker.model.timeFormat);
					if (!this.timePicker._ensureTimeRange(timeVal)) {
						this._prevDateTimeVal = this.element.val();
					}
					else {
						this._prevDateTimeVal = "";
						this.model.value = null;
						this.isValidState = false;
					}
				} else { 
					this._prevDateTimeVal = this.element.val();
				}
				this._trigger("_change", data);
				data.value = $.trim(this.element.val()) == "" ? null : this.element.val();
                data.value = this._formatter(this.model.value, this.model.dateTimeFormat);
                this._trigger("change", data);
			}
			
            else if ((this._prevDateTimeVal != this.element.val())) {
                var data = { prevDateTime: this._prevDateTimeVal, value: this.element.val(), isValidState: this.isValidState };
                this._prevDateTimeVal = this.element.val()
                this._trigger("_change", data);
            }
        },
		_formatter: function (date, format) {
            var newFormat = this._checkFormat(format);
            return ej.format(date, newFormat, this.model.locale);
        },
        _raiseEvent: function (name) {
            var dateStringVal = this._previousDateUpdate();
            if (this.element != null && this.model[name])
                return this._trigger(name, { prevDateTime: ej.isNullOrUndefined(dateStringVal || this._preValString) ? '' : dateStringVal || this._preValString, value: this.element.val() });
            return false;
        },
        _getDateTimeFormat: function () {
            var pattern = ej.preferredCulture(this.model.locale).calendar.patterns;

            if (!this.model.dateTimeFormat) this.model.dateTimeFormat = pattern.d + " " + pattern.t;
            if (!this.model.timeDisplayFormat) this.model.timeDisplayFormat = pattern.t;
        },
        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popup);
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
        _getDate: function () {
            return this.datePicker.model.value;
        },
        _getTime: function () {
            return this._getDateObj(this.timePicker.model.value, this.timePicker.model.timeFormat);
        },
        _setEmptyTime: function (date) {
            var newDate = new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _objectToString: function (obj) {
            return this._getFormat(obj, this.model.dateTimeFormat);
        },
        _stringToObject: function (value) {
            return this._getDateObj(value, this.model.dateTimeFormat);
        },
        _getFormat: function (value, format) {
            if (value instanceof Date) {
                var newFormat = this._checkFormat(format);
                return ej.format(value, newFormat, this.model.locale);
            }
            else return value;
        },
        _checkFormat: function (format) {
            var proxy = this;
            var dateFormatRegExp = this._regExp();
            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? ej.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
                return match;
            });
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },
        _getDateObj: function (value, format) {
            if (typeof value === "string") {
                var newFormat = this._checkFormat(format);
                var temp = ej.parseDate(value, newFormat, this.model.locale);
                if (temp != null)
                    return temp;
                else {
                    if (value != "" && value != null) {
                        var dateregexp = /^\s*(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d).*Z\s*$/, month, datetimesplit = dateregexp.exec(value);
                        var datevariable = new Date();
                        if (datetimesplit) {
                            datevariable = new Date();
                            month = +datetimesplit[2];
                            datevariable.setUTCFullYear(datetimesplit[1], month - 1, datetimesplit[3]);
                            datevariable.setUTCHours(datetimesplit[4], datetimesplit[5], datetimesplit[6]);
                            if (month != datevariable.getUTCMonth() + 1)
                                datevariable.setTime();
                        }
                        if (this._isValidDate(datevariable))
                            return datevariable;
                    }
                    else return null;
                }
            }
            else return value;
        },
        _compare: function (obj1, obj2) {
            return obj1 && obj2 && obj1.getTime() == obj2.getTime();
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },


        _change: function (property, value) {
            if (this.popup) {
                this.datePicker.option(property, value);
                this.timePicker.option(property, value);
            }
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.popup.removeClass(this.model.cssClass).addClass(skin);

            this._change("cssClass", skin);
        },
        _localize: function (culture) {
            this.model.locale = culture;
            if (ej.isNullOrUndefined(this._options.timeDisplayFormat))
                this.model.timeDisplayFormat = "";
            if (ej.isNullOrUndefined(this._options.dateTimeFormat))
                this.model.dateTimeFormat = "";
            var meridianText = ["AM", "PM"];
            this._getDateTimeFormat();
            this.timePicker.option("timeFormat", this.model.timeDisplayFormat);
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.buttonText))
                    $.extend(this._localizedLabels.buttonText, this._options.buttonText);
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            this._buttonText(this._localizedLabels.buttonText);
            if (this.isValidState || (this.model.value instanceof Date && this._isValidDate(this.model.value)))
                this.element.val(this._objectToString(this.model.value));
            this._preVal = this.element.val();
            this._change("locale", culture);
            this.model.startDay = this.datePicker.model.startDay;
            this._validateMeridian();
            this._sfTimeHour.empty();
            this._renderHourTable();

            // Update the meridian support
            if (this.model.timeDrillDown.showMeridian)
                for (var i = 0; i < 2; i++) {
                    var txt = !ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]]) ? ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
                    $("span.e-hours-meridiantxt-" + meridianText[i].toLowerCase(), this._sfTimeHour).text(txt);

                }
        },
        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this._localizedLabels.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "") {
                    this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
                }
                else {
                    $(this.element).attr("placeholder", this._localizedLabels.watermarkText);
                }
                return true;
            }
        },
        _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            this.model.buttonText = this._localizedLabels.buttonText;
        },
        _readOnly: function (boolean) {
            this.model.readOnly = boolean;
            if (boolean) this.element.attr("readonly", "readonly");
            else this.element.prop("readonly", false);

            this._change("readOnly", boolean);
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner");
                if(this.popup)this.popup.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if(this.popup) this.popup.removeClass("e-corner");
            }
            !ej.isNullOrUndefined(this.datePicker) && this.datePicker.option("showRoundedCorner", boolean);
			!ej.isNullOrUndefined(this.timePicker) && this.timePicker.option("showRoundedCorner", boolean);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                if(this.popup) this.popup.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                if(this.popup) this.popup.removeClass("e-rtl");
            }

            this._change("enableRTL", boolean);
        },
        _enabled: function (boolean) {
            if (boolean) {
                this.model.enabled = false;
                this.enable();
            }
            else {
                this.model.enabled = true;
                this.disable();
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderIcon();
            }
            else {
                this.container.removeClass("e-padding");
                this.datetimeIcon.remove();
                this.datetimeIcon = null;
            }
        },
        _buttonText: function (data) {
            $.extend(this.model.buttonText, data);
            this.popup.find(".e-dt-today").html(this.model.buttonText.today);
            this.popup.find(".e-dt-now").html(this.model.buttonText.timeNow);
            this.popup.find(".e-dt-done").html(this.model.buttonText.done);
            this.popup.find(".e-timecontainer").find(".e-header").html(this.model.buttonText.timeTitle);
        },
        _checkForResponsive: function () {
            if (($(window).outerWidth() > 200) && ($(window).outerWidth() <= 500)) {
                if (!this.popup.hasClass("e-dt-responsive")) {
                    this.popup.addClass("e-dt-responsive");
                    this.timePicker.option("popupWidth", this.datePicker.popup.outerWidth());
                    this.timePicker.option("popupHeight", 98);
                    this.timePicker._refreshScroller();
                    this.timePicker._changeActiveEle();
                }
            }
            else if (this.popup.hasClass("e-dt-responsive")) {
                this.popup.removeClass("e-dt-responsive");
                this.timePicker.option("popupWidth", this.model.timePopupWidth);
                var height = this.datePicker.popup.height() - this.popup.find(".e-header").height();
                this.timePicker.option("popupHeight", height);
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
            }
        },

        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.model.enabled = true;
                this.element.prop("disabled", false);
                this.wrapper.removeClass("e-disable");
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (!this._isSupport)
                    this._hiddenInput.prop("disabled", false);
                if (this.datetimeIcon) this.datetimeIcon.removeClass("e-disable").attr("aria-disabled", false);
                if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().removeClass("e-disable");
                if (this.popup) {
                    this.popup.children("div").removeClass("e-disable").attr("aria-disabled", false);
                    this._change("enabled", true);
                }
            }
        },


        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.wrapper.addClass("e-disable");
                this.element.addClass("e-disable").attr("aria-disabled", true);
                this.element.attr("disabled", "disabled");
                if (!this._isSupport)
                    this._hiddenInput.attr("disabled", "disabled");
                if (this.datetimeIcon) this.datetimeIcon.addClass("e-disable").attr("aria-disabled", true);
                if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().addClass("e-disable");
                this._hideResult();
                this._change("enabled", false);
                if (this.popup) {
                    this.popup.children("div").addClass("e-disable").attr("aria-disabled", true);
                    this.datePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
                    this.timePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
                }
            }
        },


        getValue: function () {
            return this._objectToString(this.model.value);
        },


        setCurrentDateTime: function () {
            if (!this.model.readOnly)
                this._setValue(new Date());
        },


        show: function () {
            this._showResult();
        },


        hide: function () {
            this._hideResult();
        },


        _wireEvents: function () {
            if (this.model.allowEdit) {
                this._on(this.element, "focus", this._targetFocus);
                this._on(this.element, "blur", this._targetBlur);
                this._on(this.element, "keydown", this._keyDownOnInput);
            }
            if (!this.model.allowEdit) {
                this.element.attr("readonly", "readonly");
                this.element.on("mousedown", $.proxy(this._showhidePopup, this));
            }
        },

        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        }
    });

    ej.DateTimePicker.Locale = ej.DateTimePicker.Locale || {};

    ej.DateTimePicker.Locale['default'] = ej.DateTimePicker.Locale['en-US'] = {
        watermarkText: "Select datetime",
        buttonText: {
            today: "Today",
            timeNow: "Time Now",
            done: "Done",
            timeTitle: "Time"
        }
    };

    ej.PopupPosition = {
        Bottom: "bottom",
        Top: "top"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 

    ej.widget("ejDropDownList", "ej.DropDownList", {
        element: null,

        model: null,
        validTags: ["select", "input"],
        _addToPersist: ["value", "text", "selectedIndex", "selectedItemIndex", "selectedItems", "selectedIndices", "popupWidth", "popupHeight", "itemValue"],
        _setFirst: false,

        _rootCSS: "e-dropdownlist",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },
        _requiresID: true,
      


        defaults: {
            cssClass: "",

            value: null,

            htmlAttributes: {},

            text: null,

            itemValue: "",

            itemsCount: 0,

            dataSource: null,

            delimiterChar: ',',

            query: null,

            fields: {
                id: null,

                text: null,

                value: null,

                category: null,
                
                groupBy:null,

                imageUrl: null,

                imageAttributes: null,

                spriteCssClass: null,

                htmlAttributes: null,

                selected: null,

                tableName: null
            },
            
            locale: "en-US",

            watermarkText: null,

            height: "",

            loadOnDemand: false,

            width: "",

            popupHeight: "152px",

            popupWidth: "auto",

            popupTarget: "body",

            maxPopupHeight: null,

            minPopupHeight: '20',

            maxPopupWidth: null,

            minPopupWidth: '0',

            targetID: null,

            template: null,

            headerTemplate: null,

            selectedItemIndex: -1,

            selectedIndex: -1,

            disableItemsByIndex: null,

            enableItemsByIndex: null,

            selectedItems: [],

            selectedIndices: [],

            cascadeTo: null,

            enablePopupResize: false,

            allowVirtualScrolling: false,

            virtualScrollMode: "normal",

            showRoundedCorner: false,

            showPopupOnLoad: false,

            enableRTL: false,

            enabled: true,

            filterType: "contains",

            sortOrder: "ascending",

            caseSensitiveSearch: false,

            showCheckbox: false,

            checkAll: false,

            uncheckAll: false,

            enablePersistence: false,

            enableFilterSearch: false,

            enableServerFiltering: false,

            enableIncrementalSearch: true,

            incrementalSearchDelay : 500,

            readOnly: false,

            enableAnimation: false,

            multiSelectMode: "none",

            allowGrouping: false,

            enableSorting: false,

            validationRules: null,

            validationMessage: null,

            actionBegin: null,

            actionComplete: null,

            actionFailure: null,

            actionSuccess: null,

            create: null,

            popupHide: null,

            popupShown: null,

            beforePopupShown: null,

            beforePopupHide: null,

            popupResizeStart: null,

            popupResize: null,

            popupResizeStop: null,

            change: null,

            select: null,

            dataBound: null,

            search: null,

            checkChange: null,

            cascade: null,

            destroy: null

        },

        dataTypes: {
            cssClass: "string",
            itemsCount: "number",
            watermarkText: "string",
            template: "string",
            disableItemsByIndex: "string",
            enableItemsByIndex: "string",
            enableIncrementalSearch: "boolean",
            incrementalSearchDelay: "number",
            cascadeTo: "string",
            delimiterChar: "string",
            showRoundedCorner: "boolean",
            showPopupOnLoad: "boolean",
            enableRTL: "boolean",
            enablePersistence: "boolean",
            allowVirtualScrolling: "boolean",
            virtualScrollMode: "enum",
            enabled: "boolean",
            readOnly: "boolean",
            multiSelectMode: "enum",
            dataSource: "data",
            query: "data",
            fields: "data",
            selectedItems: "array",
            selectedIndices: "array",
            enableAnimation: "boolean",
            allowGrouping: "boolean",
            enableSorting: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
            locale:"string"
        },

        observables: ["value", "selectedItemIndex", "selectedIndex","dataSource"],
        value: ej.util.valueFunction("value"),
        selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),
        selectedIndex: ej.util.valueFunction("selectedIndex"),
        _dataSource: ej.util.valueFunction("dataSource"),
        

        enable: function () {
            if (this._visibleInput.hasClass("e-disable")) {
                this.target.disabled = false;
                this.model.enabled = true;
                this.container.removeClass('e-disable');
                this._visibleInput.removeClass('e-disable');
                this.dropdownbutton.removeClass('e-disable');
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.removeClass('e-disable');
                if (this._isIE8) this.drpbtnspan.removeClass("e-disable");
                //Element not Maintain in Multiselection
                this.container.on("mousedown", $.proxy(this._OnDropdownClick, this));
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable");
            }
            this._wireEvents();
            this.wrapper.attr("tabindex", 0);
        },

        disable: function () {
            if (!this._visibleInput.hasClass("e-disable")) {
                this.target.disabled = true;
                this.model.enabled = false;
                this.container.addClass('e-disable');
                this._visibleInput.addClass('e-disable');
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.addClass('e-disable');
                this.dropdownbutton.addClass('e-disable');
                if (this._isIE8) this.drpbtnspan.addClass("e-disable");
                if (this.model.multiSelectMode == "visualmode") this._ulBox.addClass("e-disable");
                //Element not Maintain in Multiselection
                this.container.off("mousedown", $.proxy(this._OnDropdownClick, this));
                this._unwireEvents();
                this.wrapper.removeAttr('tabindex');
                if (this._isPopupShown()) this._hideResult();
            }
        },

        /* will deprecate with text property */
        getValue: function () {
            return this._visibleInput.val();
        },
        _setValue: function (value,e) {
            if (!ej.isNullOrUndefined(value)) {
                if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
                if (this.ultag.children().length != 0) {
                    this._setDynamicSelectByVal(this, value, e);
                }
            }
        },
        _setDynamicSelectByVal: function (proxInstance, value, e) {
            proxInstance._raiseEvents = false;
                    if (!ej.isNullOrUndefined(proxInstance.model.text)) proxInstance.unselectItemByText(proxInstance.model.text, e);
                    proxInstance._raiseEvents = true;
                    if (proxInstance.model.allowVirtualScrolling) proxInstance._addValue(value);
                    proxInstance.selectItemByValue(value);
        },
        _addValue: function (args) {
            if (this.model.itemsCount > 0 && args != "") {
                this._checkValue = true; var listitems;
                if(typeof(args) == "object")
                    listitems = args; 
                else if (typeof(args) == "number") 
                  listitems =  [args]
                else listitems = args.split(this.model.delimiterChar); //if args value is string split it
                if(!ej.isNullOrUndefined(this._mapFields())) this._mapFields();
                var field = this.mapFld._value; 
                if(!ej.isNullOrUndefined(this._rawList)) this._addListItems(listitems, this._rawList, "local");
                if (this._checkValue) {
                    var source = this._dataSource();
                    if (ej.DataManager && source instanceof ej.DataManager) {
                        if (source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0))
                            this._addListItems(listitems, source.dataSource.json,"remote");
                        else {
                            var proxy = this;
                            var value= args; var queryval,resultList;
                                queryval = (this.model.fields.value) ?  this.model.fields.value : this.model.fields.text; //assign text field when value field is null
                                if(this._isSingleSelect())
                                {
                                source.executeQuery(ej.Query().select(queryval, this.model.fields.text).where(queryval, "equal", value,false)).done(function (e) {
                                proxy._addListItems(listitems, e.result, "remote");
                                proxy.selectItemByValue(value);
                                });
                              }
                              else
                              {
                                  for(var i=0;i<listitems.length;i++)
                                  {
                                    source.executeQuery(ej.Query().select(queryval, this.model.fields.text).where(queryval, "equal", listitems[i],false)).done(function (e) {
                                    resultList = e.result.slice(0, i); //combine the result 
                                    if(i == listitems.length)
                                    {
                                    proxy._addListItems(listitems, resultList, "remote"); //add items based on result
                                    proxy.selectItemByValue(value);									
                                    }
                                  });						  
                                    
                                }
                            
                              }
                        }
                    }
                    else
                        this._addListItems(listitems, source, "remote");
                }

            }
        },
        _addListItems: function (listitems, source, checkValue) {
            var mapVal = (this.mapFld._value == this.model.fields.value) ? this.mapFld._value :this.model.fields.text; // assign text field when value field is null
            for (var k = 0; k < listitems.length; k++) {
                for (var i = 0; i < source.length; i++) {
                    if (checkValue == "local" && source[i][mapVal] == listitems[k]) //compare items based on value
                        this._checkValue = false;
                    if (checkValue == "remote" && source[i][mapVal] == listitems[k]) //compare items based on value
                        this.addItem(source[i]);
                }
            }
        },
        _setText: function (text) {
            if (!ej.isNullOrUndefined(text)) {
                if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
                this._raiseEvents = false;
                this.unselectItemByText(this.model.text);
                this._raiseEvents = true;
                this.selectItemByText(text);
            }
        },
        _setItemValue: function (itemValue) {
            this.model.itemValue = itemValue;
        },
        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this._isWatermark) this._visibleInput.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },

        hidePopup: function () {
            if (!this.model.enabled) return false;
            if (this.ultag.find('li').length > 0)
                this._hideResult();
        },

        showPopup: function () {
            if (!this.model.enabled) return false;
            var ultag = !ej.isNullOrUndefined(this.ultag) ? this.ultag.find('li').length > 0 : (this.model.loadOnDemand) ? true: false;
            if (ultag)
                this._showResult();
        },

        clearText: function () {
            this._clearTextboxValue(); 
            if (!this._isWatermark)
                this._setWatermark();
        },

        addItem: function (itemTag) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            if (!this.model.enabled || !itemTag) return false;
            this._mapFields();
            var list = $.isArray(itemTag) ? itemTag : [itemTag];
            if (list.length < 1) return false;
            var mapper = this.mapFld,
                mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null, _category: null };
            mapFld._id = list[0][mapper._id] ? mapper._id : "id";
            mapFld._imageUrl = list[0][mapper._imageUrl] ? mapper._imageUrl : "imageUrl";
            mapFld._imageAttributes = list[0][mapper._imageAttributes] ? mapper._imageAttributes : "imageAttributes";
            mapFld._spriteCSS = list[0][mapper._spriteCSS] ? mapper._spriteCSS : "spriteCssClass";
            mapFld._text = list[0][mapper._text] ? mapper._text : "text";
            mapFld._value = list[0][mapper._value] ? mapper._value : "value";
            mapFld._htmlAttributes = list[0][mapper._htmlAttributes] ? mapper._htmlAttributes : "htmlAttributes";
            mapFld._selected = list[0][mapper._selected] ? mapper._selected : "selected";
            mapFld._category = list[0][mapper._category] ? mapper._category : "groupBy";
            this._generateLi(list, mapFld);
            
            var i, listItems = this.dummyUl;
            for (var i = 0; i < list.length; i++)
                this._listItem(list[i], "add");
            if (this.model.showCheckbox) {
                this._appendCheckbox(listItems, true);               
            }
            else if (!this._isSingleSelect()) this._multiItemSelection(listItems, true);
            this._virtualUl.append($(this.dummyUl).clone(true));
            this.ultag.append(this.dummyUl);

            if (this._isPopupShown()) {
                var scrollerPosition = this.scrollerObj ? this.scrollerObj.scrollTop() : 0;
                this._refreshScroller();
                if (this.scrollerObj) this.scrollerObj.option("scrollTop", scrollerPosition);
            }
        },

        _toArray: function (index, mode) {
            var items;
            if (typeof index == "function") index = ej.util.getVal(index);
            if ($.isArray(index)) items = index;
            else if (typeof index == "string") {
                if ((mode && (this.model.multiSelectMode == "visualmode" || this.model.multiSelectMode == "delimiter" || this.model.showCheckbox))) {
                    items = this._getUpdatedListData(index);
                    if (items.length == 0) items = [index];
                }
                else if (!mode) {
                    items = this._getUpdatedListData(index);
                    if (items.length == 0) items = [index];
                }
                else items = [index];
            } else items = [index];
            return items;
        },
        _trim: function (val) {
            return typeof val == "string" ? $.trim(val) : val;
        },
        /*will deprecate with selectItemsByIndices */
        selectItemByIndex: function (index) {
            this._selectItemByIndex(index);
        },

        selectItemsByIndices: function (index) {
            this._selectItemByIndex(index);
        },

        _selectItemByIndex: function (val) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            this.listitems = this._getLi();
            this._selectedIndices = $.map(this._selectedIndices, function (a) { return parseInt(a); });
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            if( parseInt(val) == -1 && this.model.selectedItems.length > 0) {
                this._clearTextboxValue();
                this._trigger("change",{ text: this._visibleInput[0].value, selectedText: "", selectedValue: "", value: "" });
            }
            else {
            var items = this._toArray(val, true), index;
            for (var k = 0; k < items.length; k++) {
                index = parseInt(items[k]);
                if (index != null && index >= 0) {
                    if ($.inArray(index, this._selectedIndices) == -1)
                        for (var i = 0; i < this.listitems.length; i++) {
                            if (!$(this.listitems[i]).hasClass('e-disable')) {
                                if (i == index) {
                                    this.selectedIndexValue = i;
                                    this._activeItem = index;
                                    this._enterTextBoxValue();
                                }
                            }
                        }
                } else if (!this.model.showCheckbox && this.model.multiSelectMode == "none" && this.model.selectedItems.length > 0) {
                    this._clearTextboxValue();
                   this._trigger("change",{ text: this._visibleInput[0].value, selectedText: "", selectedValue: "", value: "" });
                } 
            }
            }
        },

        unselectItemsByIndices: function (val) { this._unselectItemByIndex(val); },

        /*will deprecate with unselectItemsByIndices method */
        unselectItemByIndex: function (val) { this._unselectItemByIndex(val); },

        _unselectItemByIndex: function (val) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            this._selectedIndices = $.map(this._selectedIndices, function (a) { return parseInt(a); });
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            var i, items = this._toArray(val, true), index;
            this.listitems = this._getLi();
            for (var k = 0; k < items.length; k++) {
                index = parseInt(items[k]);
                for (i = 0; i < this.listitems.length; i++) {
                    if (i == index) {
                        this.selectedIndexValue = i;
                        this._activeItem = index;
                        if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                        this._removeTextBoxValue();
                    }
                }
            }
        },

        /*Deprecated with selectedItemByValue */
        setSelectedValue: function (idvalue) { this.selectItemByValue(idvalue); },

        selectItemByValue: function (val) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            var i, hidelement; 
            this.listitems = this._getLi();
            if(this.inputSearch && this.inputSearch.val() != "" && this.model.enableServerFiltering && !ej.isNullOrUndefined(this._searchresult)){
                var field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";
                for(i=0; i< this._searchresult.length; i++){
                for (var j = 0; j < this.listitems.length; j++) {
                    if ($(this.listitems[j]).attr("data-value") == this._searchresult[i][field]) {
                        this._searchresult=null;
                    }
                }
            }
                this.addItem(this._searchresult);
            }
            if (ej.isNullOrUndefined(val)) this._clearTextboxValue();
            else { 
                if(this._unselectText)this._unselectText = false;
                this._selectUnSelectValue(val, "selectValue");
            }
        },

        _selectUnSelectValue: function(val, selectValue,e, ignoreCasing){
             var items = this._toArray(val, true);
                for (var k = 0; k < items.length; k++) {
                    for (var i = 0; i < this.listitems.length; i++) {
                        if (!$(this.listitems[i]).hasClass('e-disable') && (selectValue=="selectValue" || selectValue=="selectText")) {
                            if(selectValue=="selectValue"){
                                var fieldValue = (!ej.isNullOrUndefined(this._getAttributeValue(this.listitems[i])))? this._getAttributeValue(this.listitems[i])  : $(this.listitems[i]).text();
                                this._selectedValue = fieldValue == items[k]; 
                            }
                            if(selectValue=="selectText"){
                                this.selectedTextValue = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                                this._selectedValue = (this.selectedTextValue == items[k]) || (ignoreCasing && this.selectedTextValue.toString().toLowerCase() == items[k].toString().toLowerCase())
                            }  
                                if (this._selectedValue) {
                                    this._activeItem = i;
                                    this._aselectedItem = this._activeItem;
                                    this._enterTextBoxValue();
                                    break;
                                } 
                        }
                        else{ 
                             if (this._getAttributeValue(this.listitems[i])) {
                                 if(selectValue=="unselectValue"){
                                this._selectedValue = this._getAttributeValue(this.listitems[i]);
                                this._selectedValue = this._selectedValue == items[k]; 
                            }
                            if(selectValue=="unselectText"){
                                this.unselectedTextValue = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                                this._selectedValue = (this.unselectedTextValue == items[k]) || (ignoreCasing && this.unselectedTextValue.toString().toLowerCase() == items[k].toString().toLowerCase())
                                if (this._selectedValue && this._boxValue && this.model.showCheckbox && this.model.enableFilterSearch)
                                {
                                  this._activeItem = i;
                                  this._selectedValue = (this._boxValue.indexOf($(this._getActiveItem(this._activeItem)).attr("data-value")) == -1) ? false : this._selectedValue
                                }									
                           }   
                                if (this._selectedValue) {
                                    this._activeItem = i;
                                    if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                                      if(this._visibleInput.val()!= this._checkedValues || (e && e.type == "keyup") || this.model.enablePersistence) this._removeTextBoxValue();
                                     break;
                                }
                            }
                        }
                    }
                }
        },

        unselectItemByValue: function (val) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
            var i, hidelement;
            this.listitems = this._getLi(); 
            this._selectUnSelectValue(val, "unselectValue");
        },

        /* Deprecated with selectItemByText*/
        setSelectedText: function (value) { this.selectItemByText(value); },

        selectItemByText: function (val, ignoreCasing) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
            var i, hidelement;
            this.listitems = this._getLi();
            this._mapFields();
            if (ej.isNullOrUndefined(val)) this._clearTextboxValue();
            else { 
                this._selectUnSelectValue(val, "selectText", ignoreCasing);
            }
        },

        unselectItemByText: function (val,e, ignoreCasing) {
            var i, hidelement;
            this.listitems = this._getLi();
            this._mapFields();
            this._unselectText = true;
            this._selectUnSelectValue(val, "unselectText", e,ignoreCasing);
        },

        getSelectedValue: function () {
            return this.element.val();
        },

        getSelectedItem: function () {
            var k, selected = [];
            this.listitems = this._getLi();
            for (k = 0; k < this._selectedIndices.length; k++) {
                selected.push(this.listitems[this._selectedIndices[k]]);
            }
            return selected;
        },
        getItemDataByValue: function (value) {
            var listitems = this._toArray(value, false);
            var rawList  = (this.model.enableServerFiltering) ? ((!ej.isNullOrUndefined(this.resultList)) ? this._rawList.concat(this.resultList): this._rawList) : this._rawList;
            var k, m, selected = [], field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";
            if ( listitems.length > 0 && (rawList.indexOf(listitems[0]) > -1 || rawList.indexOf(Number(listitems[0])) > -1)) {
                for (k = 0; ((k < listitems.length) && ( rawList.indexOf(listitems[k]) > -1 || rawList.indexOf(Number(listitems[k])) > -1)); k++) {
                    selected.push({ text: listitems[k], value: listitems[k] });
                }
            }
            else {
            if ( rawList.length > 0 && ej.isNullOrUndefined(rawList[0][field]) ) {
                var textField = (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text";
                if (!ej.isNullOrUndefined(rawList[0][textField])) {
                    field = textField;
                }
            }
            for (k = 0; k < listitems.length; k++) {
                for (m = 0; m < rawList.length; m++) {
                    if (rawList[m][field] == listitems[k] || rawList[m][field] == Number(listitems[k]))
                        selected.push(rawList[m]);
                }
            }
            }
            return selected;
        },

        getListData: function () { return this._rawList; },

        /* will be deprecate in upcoming releases*/
        getSelectedItemsID: function () {
            return this._selectedItemsID;
        },

        disableItemsByIndices: function (value) { if (this._getLi().length > 0) { this._disableItemByIndex(value) } },

        /*Deprecated with disableItemsByIndices method */
        disableItemByIndex: function (value) { if (this._getLi().length > 0) { this._disableItemByIndex(value, true) } },

        _disableItemByIndex: function (value, isSingleIndex) {			
            if(!ej.isNullOrUndefined(value) && (typeof value == "string" || typeof value == "number"))
             value = value.toString().split(",");
            if(!this._isInteralCall){
                this._initDisabledItems = value;
            }
            if (!this.model.enabled) return false;
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            var listitems = this._toArray(value, false),index;
            for (var i = 0; i < listitems.length; i++) {
                if (listitems[i] != null && !isNaN(parseInt(listitems[i]))) {
                    if (listitems.length > 0 && !($.inArray(parseInt(listitems[i]), this._disabledItems) > -1)) {
                        index = $.inArray(listitems[i], this._disabledItems);
                        this._setClass(this._getLi()[parseInt(listitems[i])], "e-disable");
                        this._disabledItems.push(parseInt(listitems[i]));
                        this.model.disableItemsByIndex = String(this._disabledItems.join(","));
                    }
                }
            }
            this._prevDisabledItems = this._disabledItems;
        },

        enableItemsByIndices: function (value) { this._enableItemByIndex(value) },

        /*Deprecated with enableItemsByIndices method */
        enableItemByIndex: function (value) { this._enableItemByIndex(value) },

        _enableItemByIndex: function (value) {
            if(!ej.isNullOrUndefined(value) && (typeof value == "string" || typeof value == "number"))
               value = value.toString().split(",");
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            var listitems = this._toArray(value, false), index;
            this.model.enableItemsByIndex = value;
            for (var i = 0; i < listitems.length; i++) {
                if (listitems.length > 0 && ($.inArray(parseInt(listitems[i]), this._disabledItems) > -1) &&  !isNaN(parseInt(listitems[i]))) {
                    index = $.inArray(parseInt(listitems[i]), this._disabledItems);
                    this._removeClass(this._getLi()[parseInt(listitems[i])], "e-disable");
                    this._disabledItems.splice(index, 1);
                }
            }
            this.model.enableItemsByIndex = null;
            this.model.disableItemsByIndex = this._disabledItems.join(this.model.delimiterChar);
        },
        _validateDelimiter: function (deli) {
            if (this._trim(deli).length == 1) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _removeText: function (currentValue) {
            this.removeVal = ((this.checkChange || this.delIconClick) && ((this.model.fields.text || this.model.fields.value)||(this.mapFld._text || this.mapFld._value))) ? false: true;
            if(this._unselectText) 
            {
                this.removeVal = false;
                this._unselectText = false;
            }
            var eleVal = this._getUpdatedListData(this.element[0].value, true);
            this.removeVal = ((this.checkChange || this.delIconClick) && (this.model.fields.text || this.model.fields.value));
            if(!this._unselectText)this._unselectText = true;
            var hidVal = this._getUpdatedListData(this._visibleInput[0].value, (this.model.selectedIndices.length === this._visibleInput[0].value.split(this.model.delimiterChar).length) ? true : false);
            this._unselectText = false;
            var listData = this.getItemDataByValue(currentValue)[0];
            var textField = (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text";
            if($.inArray(currentValue, eleVal)>=0) eleVal.splice($.inArray(currentValue, eleVal), 1);
            if(!ej.isNullOrUndefined(listData[textField]) && $.inArray(this._decode(listData[textField]).toString(), hidVal)>=0) hidVal.splice($.inArray(this._decode(listData[textField]).toString(), hidVal), 1);
            if($.inArray(currentValue, this._valueContainer)>=0) this._valueContainer.splice($.inArray(currentValue, this._valueContainer), 1);
            if(!ej.isNullOrUndefined(listData[textField]) && $.inArray(listData[textField].toString(), this._textContainer)>=0) this._textContainer.splice($.inArray(listData[textField].toString(), this._textContainer), 1);
            this.element[0].value = eleVal.join(this.model.delimiterChar);
            this._visibleInput[0].value = hidVal.join(this.model.delimiterChar);
            this.removeVal = false;
        },
        _getUpdatedListData: function (elementValue, value) {
            var listValues; 
             var dataSource = this.getListData();
            if (value) {				
                listValues = [];
                if(!this.model.fields.value && !this.mapFld._value)
                {
                for (var i = 0; i < this.model.selectedIndices.length; i++) {
                    listValues.push(dataSource[this.model.selectedIndices[i]][this.model.fields.text ? this.model.fields.text : "text"]);
                }
                }
                else
                    listValues = elementValue.split(this.model.delimiterChar);                  
            }
            else {
               listValues = elementValue.split(this.model.delimiterChar)
            }
            var compareVal;
            var count = 0, initialPosition = 0, dataPosition;
            var listData = [];
            var updatedData = [];
            var listText = '';
            if (this.model.fields.value || this.model.fields.text) {
                compareVal = this.model.fields.text;
                if (!this.removeVal && !this._unselectText) {
                    compareVal = (this.model.fields.value) ? this.model.fields.value : compareVal;
                }
            }
            else if(this.mapFld._text || this.mapFld._value)
            {
                compareVal = this.mapFld._text ;
                if (!this.removeVal && !this._unselectText) {
                    compareVal = (this.mapFld._value) ? this.mapFld._value : compareVal;
                }
            }
            if (!ej.isNullOrUndefined(dataSource)){
            while (count < dataSource.length) {
                if (value)
                    listText = compareVal ? this._decode(dataSource[count][compareVal]) : this._decode(dataSource[count].text ? dataSource[count].text : dataSource[count] );
                else
                    listText = compareVal ? this._decode(dataSource[count][compareVal]) : this._decode(dataSource[count].value ? dataSource[count].value : dataSource[count] );
                if (listValues.indexOf(listText) !== -1) {
                    if (value) 
                        listValues[listValues.indexOf(listText)] = initialPosition;
                    listData.push(listText);
                    initialPosition++;
                } else if (!value && listValues === "") break;
                count++;
            }
            }
            count = 0;
            while (count < initialPosition) {
                if(value) {
                    updatedData[listValues.indexOf(count)] = listData[count];
                }
                else {
                    updatedData[count] = listData[count];
                }
                count++;
            }
            return updatedData;
        },
        _addText: function (currentValue) {
             var inputVal;
             if (this._checkContains(this._hiddenValue)) return false;
             if(this.value())
              {
                 inputVal = this.value().split(","); 
                 if(inputVal.indexOf(currentValue) > 0)
                    return false;	
             }
            var ele = ["element", "_visibleInput"], val;
            for (var i = 0; i < ele.length; i++) {
            val = ele[i] == "element" ? this._hiddenValue : currentValue;
                var srcContainer = ele[i] == "element" ? this._valueContainer : this._textContainer;
                if (this[ele[i]][0].value && this[ele[i]][0].value != "") {
                    var splitedText = this[ele[i]][0].value.split(this.model.delimiterChar);
                    if( ele[i] == 'element' && $.inArray(val, splitedText) === -1){
                        splitedText.push(val);
                    }
                    else if( ele[i] == '_visibleInput') {
                        var textField = (this.model.fields.text) ? this.model.fields.text: "text";
                        if($.inArray(val, splitedText) != -1) {
                            var popuplistArr = this.popupListItems.filter(function (item) { 
                                return item[textField] == val;
                           });
                           var selectedText = splitedText.filter(function (item) { 
                               return item == val;
                           });                            
                           if(popuplistArr.length > selectedText.length)
                               splitedText.push(val);
                       } else {                           
                       splitedText.push(val);
                       }
                    }                    
                    this[ele[i]][0].value = splitedText.join(this.model.delimiterChar);
                } else {
                    if(val =="")
                        this[ele[i]][0].value = val;
                    else if(val !="" && this[ele[i]][0].value == ""){
                        if($.inArray("",srcContainer) != -1){
                            var splitedText = this[ele[i]][0].value.split(this.model.delimiterChar);
                            splitedText.push(val);
                            this[ele[i]][0].value = splitedText.join(this.model.delimiterChar);
                        }
                        else
                            this[ele[i]][0].value = val;
                    }
                }
                srcContainer.push(val);
            }
        },
        _checkContains: function (chkValue) {
            this.contains = false;
            if(this._rawList !== undefined && (this.model.dataSource !== null || this.selectOptions !== undefined || this.model.targetID !== null)){
                for (var i = 0; i < this._valueContainer.length; i++) {
                    if (this._parseValue(this._valueContainer[i]) === this._parseValue(chkValue)) {
                        this.contains = true;
                        break;
                    }
                }
            }
            return this.contains;
        },
        _parseValue: function (value){
            return isNaN(parseInt(value)) || (this.mapFld && typeof(this._rawList[0][this.mapFld._value]) == 'string') ? value : parseInt(value);
        },
        _updateLocalConstant: function () {
            this._localizedLabels = ej.getLocalizedConstants("ej.DropDownList", this.model.locale);
        },
        _init: function () {
            var browserInfo = ej.browserInfo();
            this._updateLocalConstant();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0');
            this._textContent = this._isIE8 ? "innerText" : "textContent";
            if ((this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) || this.element.is("select")) {
                this._isWatermark = 'placeholder' in $(document.createElement('input')).attr("placeholder", '')[0];
                this._id = this.element[0].id;
                this._initialize();
                this._render();
                this._addAttr(this.model.htmlAttributes);
                this._enabled(this.model.enabled);
                this._initValue = false;
                this._checkboxValue = false;
                this._unselectText = false;
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
            }
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            if (this.element.closest("form").length != 0) {
                this.element.rules("add", this.model.validationRules);
                var validator = this.element.closest("form").data("validator");
                if (!validator) validator = this.element.closest("form").validate();
                var name = this.element.attr("name");
                validator.settings.messages[name] = {};
                for (var ruleName in this.model.validationRules) {
                    var message = null;
                    if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                        if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                            message = this.model.validationRules["messages"][ruleName];
                        else {
                            validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                            for (var msgName in this.model.validationMessage)
                                ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                        }
                        validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                    }
                }
            }
        },

        _setInitialPopup: function (value) {
            if (this.model.enabled && !this.model.readOnly)
                value == false ? this._hideResult() : this._showResult();
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            if(!ej.isNullOrUndefined(this.popupListWrapper))this.popupListWrapper.removeClass(this.model.cssClass).addClass(skin);
        },

        _setRTL: function (val) {
            if (this.model.enableRTL != val) {
                this.model.enableRTL = val;
                this._RightToLeft();
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this._dropbtnRTL();
            }
        },

        _changeHeight: function (height) {
            this.wrapper.height(height);
            this._setListHeight();
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": 
                        if (!this._isEqualDataSource(ej.util.getVal(options[option]))) {
                            if(this.model.loadOnDemand){
                                var oldWrapper = $("#" + this.element[0].id + "_popup_wrapper").get(0);
                                if (oldWrapper) $(oldWrapper).remove();
                                this.popupListWrapper = undefined;
                            }
                            this._checkModelDataBinding(ej.util.getVal(options[option]), this.model.query);
                            this._refreshScroller(); 
                            break;
                        }
                    case "query": this._checkModelDataBinding(this._dataSource(), options[option]); break;
                    case "fields": this.model.fields = $.extend(this.model.fields, options[option]); this._checkModelDataBinding(this._dataSource(), this.model.query); break;
                    case "itemsCount": this.model.itemsCount = options[option]; this._checkModelDataBinding(this._dataSource(), this.model.query);; break;
                    case "template": this.model.template = options[option]; this._checkModelDataBinding(this._dataSource(), this.model.query); break;
                    case "value":           
                    this._optionValue = ej.util.getVal(options[option]);
                    if (ej.isNullOrUndefined(this._optionValue) || this._optionValue === "") this._clearTextboxValue();
                    if (ej.isNullOrUndefined(this._optionValue) || this._optionValue === "") this._clearTextboxValue();
                    else { this._checkedValues.push(options.value); this._setValue(ej.util.getVal(options[option])); options[option] = this.model.value; } break;
                    case "incrementalSearchDelay": this.model.incrementalSearchDelay = options[option]; break;
                    case "delimiterChar": 
                        var delchar = this.model.delimiterChar; 
                        options[option] = this._validateDelimiter(options[option]);
                        this.model.delimiterChar = options[option];
                        if (!this._isSingleSelect()) {
                        if (this.model.text) {
                            this.model.text = this.model.text.split(delchar).join(this.model.delimiterChar);
                            this._visibleInput.val(this.model.text);							
                        }
                        if(!ej.isNullOrUndefined(this.value())) {
                            this.value(this.value().split(delchar).join(this.model.delimiterChar));
                            this.element.val(this.value());	
                        }
                    }
                        break;
                    case "text": if (ej.isNullOrUndefined(options[option]) || options[option] === "") this._clearTextboxValue();
                    else { this._setText(options[option]); options[option] = this.model.text; } break;
                    case "itemValue": this._setItemValue(options[option]); break;
                    case "enableRTL": this._setRTL(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "minPopupHeight": this.model.minPopupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "minPopupWidth": this.model.minPopupWidth = options[option]; this._setListWidth(); break;
                    case "maxPopupHeight": this.model.maxPopupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "maxPopupWidth": this.model.maxPopupWidth = options[option]; this._setListWidth(); break;
                    case "popupTarget": this.model.popupTarget = options[option]; this._renderPopupPanelWrapper(); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showCheckbox": this.model.showCheckbox = options[option];
                        var _text = this.model.text;
                        var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar) : this.model.text;
                        this._raiseEvents = false;
                        this._clearTextboxValue();
                        this._raiseEvents = true;
                        this._checkboxHideShow(options[option]);
                        if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
                            if (this.model.multiSelectMode == "visualmode")
                                this._renderBoxModel();
                            this._setText(_text);
                        }
                        else if (_textes && _textes.length)
                            this._setText(_textes[0]);
                        if (this._isPopupShown())
                            this._setListPosition();
                        break;
                        /* will depreciate with checkAll  Method*/
                    case "checkAll": this._setCheckAll(options[option]); return false; break;
                        /* will depreciate with uncheckAll  Method*/
                    case "uncheckAll": this._setUncheckAll(options[option]); return false; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "validationRules":
                        if (this.element.closest("form").length != 0) {
                            if (this.model.validationRules != null) {
                                this.element.rules('remove');
                                this.model.validationMessage = null;
                            }
                            this.model.validationRules = options[option];
                            if (this.model.validationRules != null) {
                                this._initValidator();
                                this._setValidation();
                            }
                        }
                        break;
                    case "locale":
                        this.model.locale = options[option];
                        this._updateLocalConstant();
                        break;
                    case "validationMessage":
                        if (this.element.closest("form").length != 0) {
                            this.model.validationMessage = options[option];
                            if (this.model.validationRules != null && this.model.validationMessage != null) {
                                this._initValidator();
                                this._setValidation();
                            }
                        }
                        break;
                    case "showRoundedCorner": this._roundedCorner(options[option]); this.model.showRoundedCorner = options[option]; break;
                    case "showPopupOnLoad": this._setInitialPopup(options[option]); break;
                    case "targetID": this.model.targetID = options[option]; this._showFullList(); break;
                        /* will depreciate with selectedIndex  Method*/
                    case "selectedItemIndex":
                    case "selectedIndex":
                        this._selectItemByIndex(options[option]);
                        this.model.selectedItemIndex = this.model.selectedIndex = options[option];
                        break;
                        /* will depreciate with unselectItemByIndex API Method*/
                    case "unselectItemByIndex": this._unselectItemByIndex(options[option]); break;
                        /* will depreciate with disableItemsByIndex API Method*/
                    case "disableItemsByIndex": this._disableItemByIndex(options[option]); break;
                        /* will depreciate with enableItemsByIndex API Method*/
                    case "enableItemsByIndex": this._enableItemByIndex(options[option]); break;
                        /* will depreciate with selectedIndices  Method*/
                    case "selectedItems":
                    case "selectedIndices":
                        this._selectCheckedItem(options[option]);
                        options[option] = this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        break;
                    case "multiSelectMode":
                        if (this.model.multiSelectMode == "visualmode") {
                            this._swapUlandInput(false);
                            this._ulBox.remove();                         
                            this._ulBox = null;                     
                        }
                        this.model.multiSelectMode = options[option];
                        var _text = this.model.text;
                        var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar) : this.model.text;
                        this._raiseEvents = false;
                        this._clearTextboxValue();
                        this._raiseEvents = true;
                        if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
                            if (this.model.multiSelectMode == "visualmode")
                                this._renderBoxModel();
                            this._setText(_text);
                        }
                        else {
                            this._setText(_textes[0]);
                            this.wrapper.find("input[name=" + this._name + "]").remove();
                        }
                        if (this._isPopupShown())
                            this._setListPosition();
                        break;
                        /* will deprecate with fields.groupBy and e-category element in target element binding */
                    case "allowGrouping":
                        this._setGroupingAndSorting("allowGrouping", options[option]);
                        break;
                    case "enableSorting":
                        this._setGroupingAndSorting("enableSorting", options[option]);
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "enablePopupResize": this.model.enablePopupResize = options[option];
                        (options[option]) ? this._enablePopupResize() : this.popupListWrapper.removeClass("e-resizable").find(".e-resizebar").remove() && this._hideResult();
                        break;
                    case "enableFilterSearch":
                        if (!options[option]) this._removeSearch();
                        else {
                            this.model.enableFilterSearch = true;
                            this._enableSearch();
                            break;
                        } 
                        case "enableServerFiltering": 
                            this._enableSearch();
                            break; 
                }
            }
        },

        _clearTextboxValue: function () {
            this.element.val("");
            this._visibleInput.val("");
            this._updateValue("");
            this._valueContainer = [];
            this._boxValue = [];
            this._textContainer = [];
            this.selectedTextValue = this._selectedValue = this._hiddenValue = this.model.itemValue = "";
            this._updateText();
            this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
            this._selectedItemsID = []; this._selectedIndices = [];
            this.model.selectedItems = [];
            this.model.selectedIndices = [];
            this.selectedIndex(null);
            if(!ej.isNullOrUndefined(this.ultag)){
            this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
            if (this.model.showCheckbox) this._resetCheck();
            }
            if (this.wrapper.find('ul.e-ul.e-boxes').length != 0) {
                this._ulBox.children("li").remove();
                if (this._name === "")
                    this.wrapper.find("input:hidden[id^='#']").remove();
                else
                    this.wrapper.find("input:hidden[id^='#'][name=" + this._name + "]").remove();
                $(this.element).attr("name", this._name);
            }
        },

        _destroy: function () {
            if( this.selectOptions) {
                if (!this._dataSource() && this.docbdy ) 
                    this.docbdy.append(this.selectOptions.removeClass("e-dropdownlist e-js").show()).show();
                else this.selectOptions.insertAfter(this.wrapper).removeClass("e-dropdownlist e-js").show();
                this.element.remove();
            }
            else {
                this.element.insertAfter(this.wrapper);
                this.element.width(this.element.width() + this.dropdownbutton.outerWidth());
                this._visibleInput.removeClass("e-input ");
                this._setAttr( this.element[0], { 'accesskey': this.wrapper.attr('accesskey'), type:"text" });
                if (this._isWatermark) this._visibleInput.removeAttr("placeholder");
                this.element[0].value = "";
                this.element.removeAttr("aria-expanded aria-autocomplete aria-haspopup aria-owns accesskey role").css({"width": "", "display": "block"});
                (!this._dataSource()) && this.docbdy && this.ultag.find("li").removeClass("e-active") && this.docbdy.append(this.ultag.html()).show();
            }
            this.wrapper.remove();
            this.container.off("mousedown", $.proxy(this._OnDropdownClick, this));
            this._hideResult();
            this.popupPanelWrapper.remove();
            this._unwireEvents();
        },


        _finalize: function () {
            if (this.value() == "" && this._visibleInput[0].value !== "")
                this._updateValue(this.element[0].value);
            if ((!ej.isNullOrUndefined(this.value())&& this.value() == "") || this.value() !== this.element.val() ) 
                this._setValue(this.value());
            if ((!ej.isNullOrUndefined(this.model.text) && this.model.text == "") || this.model.text != this._visibleInput.val())
                this._setText(this.model.text);
            this.selectedIndex((this.selectedIndex() != -1) ? this.selectedIndex() : this.selectedItemIndex());
            if (this.selectedIndex() != -1) {
                this._selectItemByIndex(this.selectedIndex());
            } else if (this._selectedIndices.length > 0) {
                this._selectCheckedItem(this._selectedIndices);
            } if (this.model.disableItemsByIndex != null)
                this._disableItemByIndex(this.model.disableItemsByIndex);
            if (this.model.enableItemsByIndex != null)
                this._enableItemByIndex(this.model.enableItemsByIndex);
        },


        _initialize: function () {
            this._selectedIndices = this.model.selectedIndices.length > 0 ? this.model.selectedIndices : this.model.selectedItems;
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            this.model.selectedIndex = this.model.selectedIndex != -1 ? this.model.selectedIndex : this.model.selectedItemIndex;
            if (this.element.is("select")) {
                this.selectelement = true;
                this._renderSelectToDropdown();
            }
            this._initDisabledItems = [];
            this._isInteralCall = false;
            this._prevSearchValue = "";
            this._selectedItemsID = [];
            this._hiddenInputElement = [];
            this._boxValue = [];
            this._valueContainer = [];
            this._textContainer =[];
            this._checkedValues=[];
            this.target = this.element[0];
            this._disabledItems = new Array();
            this._queryString = null;
            this.suggLen = 0;
            this._itemId = null;
            this.checkedStatus = false;
            this._incqueryString = "";
            this._activeItem = null;
            this.ddWidth = 0;
            this._initValue = true;
            this._virtualCount = 0;
            this._raiseEvents = true;
            this.popUpShow= false;
            this._matchedListItems = [];
            this._prevQueryString = "";
        },
        _renderSelectToDropdown: function () {
            var i, optionLength, optionText, item;
            this.inputElement = ej.buildTag("input.e-dropdownlist#" + this._id + "_input", "", {}, { "type": "text", "data-role": "none" });
            this.inputElement.insertAfter(this.element);
            if (this.element.attr("name")) {
                this.inputElement.attr("name", this.element.attr("name"));
                this.element.removeAttr("name");
            }
            this.selectOptions = this.element;
            this.selectOptions.attr('id', this._id);
            if( this._dataSource() == null ) {
            this.optionDiv = ej.buildTag("div#" + this._id + "_list");
            this.optionDiv.insertAfter(this.inputElement);
            this.optionUl = ej.buildTag("ul");
            this.optionDiv.append(this.optionUl);

            this.selectOptionItems = this.element.children("option");
            optionLength = this.selectOptionItems.length;
            this.optionDummyUl = $();

            for (i = 0; i < optionLength; i++) {
                item = this.selectOptionItems[i], optionText = $(item).attr('label') ? $(item).attr('label') : item.innerHTML;
                if (optionText != null) {
                    this.optionLi = ej.buildTag("li", optionText, {}, { 'data-value': item.value, "unselectable": "on" });
                    this.optionDummyUl.push(this.optionLi[0]);
                    if ($(item).attr("selected")) {
                        if (this.model.showCheckbox)
                            if ($.inArray(i, this._selectedIndices) == -1) {
                                this._selectedIndices.push(i);
                                this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                            }
                            else if (ej.isNullOrUndefined(this.selectedIndex())) this.selectedIndex(i);
                    }
                }
            }
            this.optionUl.append(this.optionDummyUl);

            }
            this.element.css('display', 'none');
            this.element = this.inputElement;
        },


        _render: function () {
            this._renderDropdown();
            this._setWatermark();
            if (this.model.loadOnDemand && (!this._dataSource() || (this._dataSource().length !== 0 && this._dataSource().length < 1))) {
            var predecessor = this.element.parents().last();
            this.docbdy = this.model.targetID ? predecessor.find("#" + this.model.targetID) : this.optionDiv ? this.optionDiv : null;
            this.itemsContainer = this.docbdy[0].nodeName == "UL" ? this.docbdy : this.docbdy.children("ol,ul");
            this.itemsContainer.css("display", "none");
            }
            if(!this.model.loadOnDemand){
            this._renderPopupPanelWrapper();
            this._showFullList();
            }
            this._roundedCorner(this.model.showRoundedCorner);
            //To call finalize() only local data source
            var source = this._dataSource();
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0)) {
                    var proxy = this;
                    proxy._finalize();
                }               
            }
            else this._finalize();
            if (!(ej.DataManager && this._dataSource() instanceof ej.DataManager)){
                
                 this._finalize();
            }        
            if(this.model.loadOnDemand && (ej.DataManager && this._dataSource() instanceof ej.DataManager && !this._dataSource().dataSource.offline)) this._finalize();       
            this._setCheckAll(this.model.checkAll);
            if(this.element.attr("disabled") || $(this.selectOptions).attr("disabled"))this.disable();
            if(this.model.loadOnDemand)this.model.showPopupOnLoad && this._showResult();
        },

        _isEqualDataSource: function (source) {
              if (!this._dataSource() || !source ||(this._rawList&& !(this._rawList.length === source.length)) || (ej.DataManager && source instanceof ej.DataManager)) return false;
             if(ej.isNullOrUndefined(this._rawList)||this._dataSource().length===0) return false;
            var equal = true;
            for (var i = 0, len = this._dataSource().length; i < len; i++) {
                if (this._dataSource()[i] !== source[i]) {
                    equal = false;
                    break;
                }
            }
            return equal;
        },

        _checkModelDataBinding: function (source, query) {
            this.element.val("");
            this._visibleInput.val("");
            (this.value()!==null && this.value()!=='') && this._updateValue("");
            this.selectedTextValue = this._selectedValue = this._hiddenValue = "";
            this._updateText();
            this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
            this._selectedItemsID = [];
            this._textContainer = [];
            this._valueContainer = [];
            if(ej.isNullOrUndefined(source) && ej.isNullOrUndefined(this.model.query) && ej.isNullOrUndefined(this.model.template) && this.model.itemsCount == 0 ){
                this._rawList = [];
                this.popupListItems = []; 
                this.listitems = [];
                this.ultag = this.popupListWrapper.find(".e-ul");
            }
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices = [];
            this.model.selectedIndex = this.model.selectedItemIndex = -1;
            if (this.model.multiSelectMode == "visualmode") this._destroyBoxModel();
            if(JSON.stringify(this._dataSource())!=JSON.stringify(source))this._dataSource(source);
            this.model.query = query;
            !ej.isNullOrUndefined(this.ultag) && this.ultag.empty();
            this._showFullList();
        },
        _initDataSource: function (source) {
            var proxy = this;
            if (ej.DataManager && source instanceof ej.DataManager) {
                proxy._addLoadingClass();
                if (!proxy._trigger("actionBegin", { requestFrom: "default" })) {
                    var queryPromise = source.executeQuery(this._getQuery());
                    queryPromise.done(function (e) {
                        proxy._trigger("actionSuccess", { e: e, requestFrom: "default" });
                        proxy._totalCount = e.count;
                        proxy._listItem(e.result);
                        proxy._removeLoadingClass();
                        proxy._renderPopupList();
                        proxy._finalize();
                        proxy._setDynamicSelectByVal(proxy, proxy._optionValue, e);
                        this._optionValue = null;
                    }).fail(function (e) {
                        proxy._dataSource(null);
                        proxy._addLoadingClass();
                        proxy._trigger("actionFailure", { e: e, requestFrom: "default" });
                    }).always(function (e) {
                        proxy._trigger("actionComplete", { e: e, requestFrom: "default" });
                    });
                }
            }
        },
        _listItem: function (list, type) {
            if (type == "add") {
                this.popupListItems.push(list);
                this._rawList.push(list);
            } else if ($.isArray(list)) {
                this.popupListItems = list.slice(0);
                this._rawList = list.slice(0);
            }
        },
        _getQuery: function (isLocal) {
            var remoteUrl, mapper = this.model.fields, queryManager = ej.Query();
            if (ej.isNullOrUndefined(this.model.query) && !this.model.template && !isLocal) {
                var column = [];
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
            }
            else if (this.model.query) queryManager = this.model.query.clone();

            if (this.model.allowVirtualScrolling) queryManager.requiresCount();
            if (this.model.itemsCount > 0) queryManager.take(this.model.itemsCount);

            remoteUrl = this._dataSource().dataSource;
            if (mapper)
                if ((remoteUrl && remoteUrl.url && !remoteUrl.url.match(mapper.tableName + "$")) || (remoteUrl && !remoteUrl.url) || (!remoteUrl))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);

            return queryManager;
        },

        _addLoadingClass: function () {
            if (this._isPopupShown()) {
                this.popupListWrapper.addClass("e-load");
            } else {
                this.dropdownbutton.addClass("e-load");
                this.drpbtnspan.removeClass("e-icon e-arrow-sans-down");
            }
            this._readOnly = true;
        },
        _removeLoadingClass: function () {
            this.dropdownbutton.removeClass("e-load");
            this.drpbtnspan.addClass("e-icon e-arrow-sans-down");
            this._readOnly = false;
            if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.removeClass("e-load");
        },

        _renderDropdown: function () {
            this.wrapper = ej.buildTag("span.e-ddl e-widget " + this.model.cssClass + "#" + this._id + "_wrapper", "", {}, { "accesskey": this.element.attr("accesskey"), "role": "listbox", "aria-expanded": false, "aria-haspopup": true, "aria-owns": this._id + "_popup", "tabIndex": "0" });
            this.container = ej.buildTag("span.e-in-wrap e-box " + "#" + this._id + "_container");
            this.element.removeAttr('accesskey');            
            if(this.model.value == null && this.element.attr("value") != null)
                this.model.value = this.element.attr("value");				
            this.element.attr("value","").val("");
            if(!this._isIE8)
            this._setAttr(this.element[0], { "type":"hidden", "unselectable": "on" }).element.hide();
            else
            this._setAttr(this.element[0], {"unselectable": "on"}).element.hide();			
            this.drpbtnspan = ej.buildTag("span.e-icon e-arrow-sans-down", "", {}, { "aria-label": "select", "unselectable": "on" });
            this.dropdownbutton = ej.buildTag("span.e-select#" + this._id + "_dropdown", "", {}, { "role": "button", "unselectable": "on" }).append(this.drpbtnspan);
            this.container.insertAfter(this.element);
            this.container.append(this.element);
            this.container.append(this.dropdownbutton);
            this.wrapper.insertBefore(this.container);
            this.wrapper.append(this.container);
            if (this.selectelement) {
                this.selectOptions.insertBefore(this.element);
            }
            this._visibleInput = ej.buildTag("input#" + this._id + "_hidden", "", {}).insertAfter(this.element);
            this._visibleInput.addClass("e-input ");
            this._setAttr(this._visibleInput[0],{ "readonly": "readonly", "tabindex": "-1","data-role": "textbox" });        
            if (!this._isWatermark) {
                var watermark=(this.model.watermarkText != null)? this.model.watermarkText:this._localizedLabels.watermarkText;
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(watermark);
                this._hiddenSpan.css("display", "none");
                this._hiddenSpan.on("mousedown", $.proxy(this._OnDropdownClick, this));
            }
            this._checkNameAttr();
            this._setDimentions();
            this._RightToLeft();
            this.ddWidth = (this.dropdownbutton.outerWidth() > 0) ? this.dropdownbutton.outerWidth() : 24;
            //Element not Maintain in Multiselection
            this.container.on("mousedown", $.proxy(this._OnDropdownClick, this));
        },

        _checkNameAttr: function () {
            this._name = ej.isNullOrUndefined(this.element.attr("name")) ? this._id : this.element.attr("name");
            this.element.attr("name", this._name);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value); 
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readOnly" && value == "readOnly") proxy.model.readOnly = true; 
                else if (keyName == "style") proxy.wrapper.attr(key, value);
                else if (keyName == "name") $(proxy.element).attr(key, value);
                else if (ej.isValidAttr(proxy._visibleInput[0], key)) $(proxy._visibleInput).attr(key, value);
                else proxy.wrapper.attr(key, value)
            });
        },
        _renderBoxModel: function () {
            if (!ej.isNullOrUndefined(this._ulBox) || this.model.multiSelectMode != "visualmode") return false;
            this._ulBox = ej.buildTag("ul.e-ul e-boxes");
            this.container.prepend(this._ulBox);
            this._ulBox.css('min-height', '30px');
            this._ulBox.css('display', 'none');
            this._on(this.container, "click", function (e) {
                if (!this.model.enabled) return false;
                var $target = $(e.target);
                if ($target.hasClass("e-options")) {
                    if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
                    if ($target.hasClass("e-active")) $target.removeClass("e-active");
                    else $target.addClass("e-active");
                }
                if (!e.ctrlKey && ($target.hasClass("e-boxes"))) this._removeActive();
            });
        },

        _renderPopupPanelWrapper: function () {
            var oldWrapper = $("#" + this.element[0].id + "_popup_wrapper").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.popupPanelWrapper = ej.buildTag("div#" + this._id + "_popup_wrapper");
            
            $(this.model.popupTarget).append(this.popupPanelWrapper);
            this.popupListWrapper = ej.buildTag("div.e-ddl-popup e-box e-widget  e-popup#" + this._id + "_popup_list_wrapper", "", { display: "none", overflow: "hidden" });
            this._setAttr(this.popupListWrapper[0], { "data-role":"popup", "aria-hidden": true });
            this.popupList = ej.buildTag("div", { "tabIndex": 0 });
            this.popupListWrapper.addClass(this.model.cssClass);
            this.popup = this.popupList;
            this.popupScroller = ej.buildTag("div"); if((ej.isNullOrUndefined(this.ultag))) this.ultag = ej.buildTag("ul.e-ul", "", {}, { "role": "listbox" });
            this._setAttr(this.ultag[0], { "id": this._id +"_popup" ,"aria-hidden": true, "unselectable":"on" });
            this.popupScroller.append(this.ultag);
            this.popupList.append(this.popupScroller);
            if (this.model.headerTemplate) {
                this.headerTemplate = $("<div>").append(this.model.headerTemplate);
                this.popupListWrapper.append(this.headerTemplate);
            }
            this.popupListWrapper.append(this.popupList);
            this.popupPanelWrapper.append(this.popupListWrapper);
            this.ultag.on({ mouseenter: $.proxy(this._OnMouseEnter, this), mouseleave: $.proxy(this._OnMouseLeave, this), click: $.proxy(this._OnMouseClick, this)}, "li:not('.e-category')");
            if (ej.isTouchDevice())
             {
             this.ultag.on({tap:$.proxy(this._OnMouseEnter, this) }, "li:not('.e-category')");
               }
            $(window).on("resize", $.proxy(this._OnWindowResize, this));

        },

        _updateText: function () {
            var val = this._visibleInput.val();
            this.model.text = (val == "") ? (this._textContainer.length == 0) ? null : "" : val;
        },
        _updateValue: function (val) {
            this.value(val == "" ? (this._valueContainer.length == 0)? null : "" : val);
        },
        _setGroupingAndSorting: function (prop, value) {
            this.model[prop] = value;
            var oldValue = this.model.text;
            this._updateValue("");
            this._selectedIndices = [];
            this.ultag.empty();
            this._showFullList();
            if (this.model.showCheckbox && oldValue) {
                var values = oldValue.split(this.model.delimiterChar);
                for (var i = 0; i < values.length; i++)
                    this.selectItemByText(values[i]);
            }
            else
                this.selectItemByText(oldValue);
        },
        _setSortingList: function () {
            var sortedlist = document.createElement("ul"), i, sortitems;
            $(sortedlist).append(this.itemsContainer.children());
            if (this.model.allowGrouping || $(sortedlist).find(">.e-category").length > 0) {
                this.popupListWrapper.addClass("e-atc-popup");
                for (i = 0; i < $(sortedlist).find(">.e-category").length; i++) {
                    sortitems = $(sortedlist).find(">.e-category").eq(0).first().nextUntil(".e-category").get();
                    this._setSortList(sortedlist, sortitems);
                }
            }
            else {
                $(sortedlist).children('>.e-category').remove();
                sortitems = $(sortedlist).children('li').get();
                this._setSortList(sortedlist, sortitems);
            }
            this.itemsContainer = $(sortedlist);
        },
        _setSortList: function (sortedlist, sortitems) {
            sortitems.sort(function (objA, objB) {
                var sortA = $(objA).text().toUpperCase();
                var sortB = $(objB).text().toUpperCase();
                return (sortA < sortB) ? -1 : (sortA > sortB) ? 1 : 0;
            });
            if (this.model.sortOrder == "descending") sortitems.reverse();
            if (this.model.allowGrouping || $(sortedlist).find(">.e-category").length > 0) {
                $(sortedlist).append($("<li>").text($(sortedlist).find(">.e-category").eq(0).text()).addClass("e-category"));
                $(sortedlist).find(">.e-category").eq(0).remove();
            }
            $.each(sortitems, function (index, item) {
                $(sortedlist).append(item);
            });
        },

        _renderPopupList: function () {
            this._doDataBind();
            if(this.model.loadOnDemand && (ej.DataManager && this._dataSource() instanceof ej.DataManager && !this._dataSource().dataSource.offline)){
            this.model.showCheckbox && this._checkboxHideShow(this.model.showCheckbox);
            }
            if(ej.isNullOrUndefined(this.scrollerObj) || this._ulBox==null)this._renderRemaining(); 
            if (this.model.loadOnDemand && (this.popUpShow && ej.DataManager && this._dataSource() instanceof ej.DataManager && !this._dataSource().dataSource.offline)){
                this._refreshPopup();
                this._refreshScroller();
            }
        },
        _renderRemaining: function () {
            var proxy = this;
           if(!ej.isNullOrUndefined(this.popupListWrapper)) this._dropbtnRTL();
            if (this.model.enableFilterSearch) this._enableSearch();
            if (this.model.enablePopupResize) this._enablePopupResize();
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                if (this._totalCount && this._totalCount > 0) {
                    this._totalHeight = this._totalCount * 29;
                    this._totalPages = this._totalCount / (this.model.itemsCount * 29);
                    this._loadedItemHeight =  this._getLi().length * 29;
                    this._getLi().attr("page", 0);
                    this._virtualPages = [0];
                    this.ultag.append($("<span>").addClass("e-virtual").css({ "height": this._totalHeight - this._loadedItemHeight, "display": "block" }));
                }
            }
            this._virtualUl = this.ultag.clone(true);
           if(!ej.isNullOrUndefined(this.popupListWrapper)){ 
                this._setListWidth();
                this._setListHeight();
            }
            if (!this._isSingleSelect()) {
                if (this.model.showCheckbox) this._checkboxHideShow(this.model.showCheckbox);
                else this._multiItemSelection(this._getLi());
            }
            this._setUncheckAll(this.model.uncheckAll);
            if(!ej.isNullOrUndefined(this.popupListWrapper)){
            this.popupScroller.css({ "height": "", "width": "" });
            this.popupList.ejScroller({
                height: this._getPopupHeight(), width: 0, scrollerSize: 20, scroll: function (e) {
                    if (proxy.model.allowVirtualScrolling) proxy._onScroll(e);
                },
                preventDefault: true
            });
            this.scrollerObj = this.popupList.ejScroller("instance");
            this.popupList.find("div.e-scrollbar div").attr("unselectable", "on");
            this._setListPosition();
            !this.popUpShow && this.popupListWrapper.css({ 'display': 'none', 'visibility': 'visible' });
            this._changeSkin(this.model.cssClass);
            }
            if(!this.model.loadOnDemand)this.model.showPopupOnLoad && this._showResult();
        },

        _enableSearch: function () {
            if (this.model.enableFilterSearch)
                if (!ej.isNullOrUndefined(this.popupListWrapper) && !this.inputSearch) {
                    this.inputSearch = ej.buildTag("input#" + this._id + "_inputSearch.e-input", "", {}, { "type": "text", "data-role": "none" });
                    this.popupListWrapper.prepend($("<span>").addClass("e-atc e-search").append($("<span>").addClass("e-in-wrap ").append(this.inputSearch).append($("<span>").addClass(" e-icon e-search"))));
                    var debounceListener = (this.model.enableServerFiltering) ? this._debounce(this._OnSearchEnter, 200): this._OnSearchEnter;
                    this._on(this.inputSearch, "keyup", debounceListener)._on(this.inputSearch, "keydown", function(args){
                        var keyCode = args.keyCode || args.which; 
                          if (keyCode == 9) { 
                            args.preventDefault(); 
                            this.wrapper.focus();
                            this._hideResult();
                          } 
                    });
                }
        },
        _removeSearch: function () {
            this.model.enableFilterSearch = false;
            this.popupListWrapper.find(".e-atc.e-search").remove();
            if (this._isPopupShown()) this.hidePopup();
            this.inputSearch = null;
        },

        _OnSearchEnter: function (e) {
            if (this._prevSearchValue != "" && this._prevSearchValue == this.inputSearch.val()) {
                return;
            } else {
                this._prevSearchValue = this.inputSearch.val()
            }
            if(ej.isNullOrUndefined(this._rawList))  {
                return;
            }
            if(e.keyCode == 8 && this.model.enableFilterSearch){
                this._disabledItems = this._initDisabledItems;
                this._prevDisabledItems = this._disabledItems;
            }  

            var proxy = this;
            if ($.inArray(e.keyCode, [38, 40, 13]) != -1 && this.ultag.find("li.e-nosuggestion").length <= 0) {
                if (e.keyCode == 13) this._OnKeyUp(e);
                else this._OnKeyDown(e);
            }
            else {
                this._activeItem = -1;
                this._queryString = this.inputSearch.val();
                if (this._queryString == "" && this._virtualUl) {
                    var args = { searchString: this._queryString, searchQuery: null, items: this._rawList };
                    this._trigger("search", args);
                    this._resetList(e);
                    this._updateSelectedIndexByValue(this.value());
                    this._refreshScroller();
                    this._setListPosition();
                    if(this._prevDisabledItems && this._prevDisabledItems.length > 0){
                        this._disabledItems = [];
                        this._isInteralCall = true;
                        this.disableItemsByIndices(this._prevDisabledItems);
                        this._isInteralCall = false;
                        this._prevDisabledItems = this._disabledItems;
                    }
                } else {
                    this._mapFields(); 
                    var searchQuery = this._addSearchQuery(ej.Query(), !this._isPlainType(this._rawList));
                    var args = { searchString: this._queryString, items: this._rawList, searchQuery: searchQuery };
                    this.popupListWrapper.find(".e-atc.e-search .e-search").addClass("e-cross-circle").removeClass("e-search");
                    this._on(this.popupListWrapper.find(".e-atc.e-search .e-cross-circle"), "mousedown", this._refreshSearch);
                    if (!this._trigger("search", args)){ 
                        proxy._onActionComplete(args); 
                }
                  
                }
            } 
        },
        _debounce: function(eventFunction, delay) { 
            var out;
            var proxy = this;
            return function (){
                var args= arguments;
                var later = function(){
                    out = null;
                return eventFunction.apply(proxy, args);
                };
                clearTimeout(out);
                out = setTimeout(later, delay);
            };
        },
        _onActionComplete: function(args){
            var proxy = this; 
            this._queryString = this.inputSearch.val();
                        var searchQuery = this._addSearchQuery(ej.Query(), !this._isPlainType(this._rawList));
                    var args = { searchString: this._queryString, items: this._rawList, searchQuery: searchQuery }; 
                if(ej.DataManager && this._dataSource() instanceof ej.DataManager && this.model.enableServerFiltering && (window.getSelection().type == "Caret" || ej.browserInfo().name == "msie" )){
                        var searchQuery = args.searchQuery.clone();
                        var queryPromise = proxy._dataSource().executeQuery(searchQuery);
                        queryPromise.done(function (e) { 
                        proxy._filterSearch(args.searchQuery, e); 
                    });
                        }
                        else{
                            proxy._filterSearch(searchQuery, args);
                        }
        },
        _refreshSearch: function () {
            this._resetSearch();
            this._refreshPopup();
            if(this._initDisabledItems && this._initDisabledItems.length > 0){
                this._disabledItems = [];
                this.disableItemsByIndices(this._initDisabledItems);
                this._prevDisabledItems = this._disabledItems;
            }
            
        },
        _filterSearch: function (searchQuery, args) {
            var flag = false; 
            this.resultList = args.result ? args.result : ej.DataManager(this._rawList).executeLocal(searchQuery);
            if (this.resultList.length == 0) {
                flag = true;
                this.resultList.push(this._getLocalizedLabels("emptyResultText"));
            }
            var disabledItems = [];
            this._initDisabledItems.forEach(function (disableIndex) {
                this._rawList.forEach(function(item) {
                    if(this._rawList.indexOf(item) == disableIndex){
                        disabledItems.push(item);
                    }
                }, this);
            }, this);
            var disabledIndices = [];
            if (disabledItems.length > 0) {
                this.resultList.forEach(function (resultItem) {
                    if (disabledItems.indexOf(resultItem) >= 0) {
                        disabledIndices.push(this.resultList.indexOf(resultItem));
                    }
                }, this);
            }
            this.popupListItems = this.resultList;
            this.ultag.empty();
            this._isPlainType(this.popupListItems) ? this._plainArrayTypeBinding(this.resultList) :
            this._objectArrayTypeBinding(this.resultList, "search");
            if (flag && this.ultag.find("li").length == 1) {
                this.ultag.find("li").eq(0).addClass("e-nosuggestion");
            }
            if (this.model.showCheckbox && !flag) {
                this._appendCheckbox( this._getLi());
            }
            this._onSearch = true;
            var value = this.value(), visibleText = this._visibleInput[0].value;
            this._setValue(this.value());
            var checkVal = typeof this.model.value === "function" ? this.model.value() : this.model.value;
            if(checkVal != value){
                this.element[0].value = value;
                this._visibleInput[0].value = visibleText;
                this.model.text = visibleText == "" ? null : visibleText;
                if (this.value() != value && !(this.value() == null && value =="" )) {
                    this._updateValue(value);
                }
            }
            this._onSearch = false;
            this._updateSelectedIndexByValue(this.value());
            this._refreshScroller();
            this._setListPosition();
            this._prevDisabledItems = this._disabledItems;
            this._disabledItems = [];
            if(disabledIndices.length > 0){
                this._isInteralCall = true;
                this.disableItemsByIndices(disabledIndices);
                this._isInteralCall = false;
            }
        },
        _updateSelectedIndexByValue: function (value) {
            if (!value || !this.model.enableFilterSearch) return;
            this._selectedIndices = this.model.selectedItems = this.model.selectedIndices = [];
            this._virtualList = this._virtualUl.children("li:not('.e-category')");
            var item = this._toArray(value);
            for (var k = 0; k < item.length; k++) {
                for (var m = 0; m < this._virtualList.length; m++) {
                    if (item[k] == this._getIndexedValue(this._virtualList[m])) {
                         if ($.inArray(m, this._selectedIndices) == -1) {
                         this._selectedIndices.push(m);
                        }
                        break;
                    }
                }
            }
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            if(this.model.selectedIndices.length == 1) this.model.selectedIndex = this.selectedIndexValue = this.model.selectedIndices[0];
        },
        _getIndexedValue: function (item) {
            return this._getAttributeValue(item) ? this._getAttributeValue(item) : item.innerText;
        },

        _resetSearch: function () {
            if (!this.inputSearch || !(this.model && this.model.enableFilterSearch)) return;
            if (this.inputSearch.val() != "" && this._virtualUl) {
                this.inputSearch.val("");
                this._prevSearchValue = "";
                this._resetList();
            }
        },
        _resetList: function (e) {
            if (this.popupListWrapper.find(".e-atc.e-search .e-cross-circle").length == 1) {
                this.popupListWrapper.find(".e-atc.e-search .e-cross-circle").addClass("e-search").removeClass("e-cross-circle");
                this._off(this.popupListWrapper.find(".e-atc.e-search .e-cross-circle"), "mousedown", this._refreshSearch);
            }
            if(this.model.enableServerFiltering){
            var field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";
            for (var i=0; i< this._rawList.length; i++){
                if(this._rawList[i][field] == this._selectedValue)
                    this._searchresult= null;
            } 
            if(!ej.isNullOrUndefined(this._searchresult) && !(this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal"))
                this.addItem(this._searchresult);
            }
            this._listItem(this._rawList);
            if (this.model.enableSorting) {
                var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                this._rawList = ej.DataManager(this._rawList).executeLocal(sortQuery);
                this.popupListItems = this._rawList;
            }
            this.ultag.empty().append(this._virtualUl.children().clone(true));           
            // this._onSearch variable will restrict the change and select event on searching
            this._onSearch = true;
            this._setValue(this.value(),e);
            this._onSearch = false;
            this._searchresult = [];
             if(this._initDisabledItems && this._initDisabledItems.length > 0){
                this._disabledItems = [];
                this.disableItemsByIndices(this._initDisabledItems);
                this._prevDisabledItems = this._disabledItems;
            }
        },

       
        _addSearchQuery: function (query, checkMapper) {
            var bindTo = "";
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
            if (this._queryString) query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
            if (this.model.itemsCount > 0) query.take(this.model.itemsCount);
            return query;
        },

        _targetElementBinding: function () {
            var predecessor = this.element.parents().last();
            this.docbdy = this.model.targetID ? predecessor.find("#" + this.model.targetID) : this.optionDiv ? this.optionDiv : null;
            if (!this.docbdy) return false;
            this.itemsContainer = this.docbdy[0].nodeName == "UL" ? this.docbdy : this.docbdy.children("ol,ul");
            if ((this.model.allowGrouping || this.itemsContainer.find(">.e-category").length > 0) && !this.model.enableSorting) {
                this.popupListWrapper.addClass("e-atc-popup");
                for (var k = 0; k < this.itemsContainer.find(">.e-category").length; k++) {
                    var ele = this.itemsContainer.find(">.e-category").eq(k);
                    ele.replaceWith($("<li>").text(ele.text()).addClass("e-category"));
                }
            }
            else if (this.model.enableSorting) this._setSortingList();
            this.itemsContainer.children("ol,ul").remove();
            if(this.model.loadOnDemand)
            this.items = (this.itemsContainer.children().length>0)?this.itemsContainer.children('li'): this.items;
            else
            this.items = this.itemsContainer.children('li');
            this.items.children("img,div").addClass("e-align");
            this._listItem([]);
            for (var i = 0; i < this.items.length; i++) {
                var fieldText = $(this.items[i]).text(), fieldValue = this._getAttributeValue(this.items[i]);
                if(!this.items[i].getAttribute("id") || this.items[i].getAttribute("id") == ""){
                    $(this.items[i]).attr("id", this._id +"_"+ i + "_popup_option");
                }
                if(!$(this.items[i]).attr("data-value")) $(this.items[i]).attr("data-value", fieldValue ? fieldValue : fieldText);
                this._listItem({ text: fieldText, value: fieldValue ? fieldValue : fieldText }, "add");
            }
            //This will append the list with the popup wrapper
            if(this.model.loadOnDemand)
            this.ultag.empty().append(this.items);
            else 
            this.ultag.empty().append(this.itemsContainer.children());
            this.ultag.children('li').attr("role", "option").attr("unselectable", "on").attr("aria-selected", "false").attr("tabindex", "-1");		
            this.docbdy.css({ 'display': 'none' }).children("ol,ul").remove();
        },
        _plainArrayTypeBinding: function (list) {
            this.dummyUl = $();
            if (this.model.enableSorting) {
                list.sort();
                if (this.model.sortOrder == "descending") list.reverse();
            }
            if (list.length > 0) {
                for (var i = 0; i < list.length; i++) {
                    if (!ej.isNullOrUndefined(list[i])) {
                        var litag = ej.buildTag("li", list[i], {}, { 'data-value': list[i], "unselectable": "on" });
                        this.dummyUl.push(litag[0]);
                    }
                }
                this.ultag.append(this.dummyUl);
                this._trigger('dataBound', { data: list });
            }

        },
        _mapFields: function () {
            this.model.fields.groupBy = this.model.fields.groupBy ? this.model.fields.groupBy : this.model.fields.category;
            var mapper = this.model.fields;
            this.mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null };
            this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
            this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
            this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
            this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
            this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
            this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
            this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
            this.mapFld._selected = (mapper && mapper.selected) ? mapper["selected"] : "selected";
            this.mapFld._category = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy";
        },
        _doDataBind: function () {
            var source = this._dataSource(), list = this.popupListItems;
            !source || !list || !list.length || list.length < 1 ? this._targetElementBinding()
            : this._isPlainType(list) ? this._plainArrayTypeBinding(list)
            : this._objectArrayTypeBinding(list);
        },
        _isPlainType: function (list) {
            return typeof list[0] != "object";
        },
        _objectArrayTypeBinding: function (list, from) {
            this.dummyUl = $();
            this._mapFields();
            if (this.model.enableSorting) {
                var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                list = ej.DataManager(list).executeLocal(sortQuery);
                this.popupListItems = list;
            }
            if (this.model.allowGrouping || this.model.fields.groupBy) {
              if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.addClass("e-atc-popup");
                var mapCateg = this.mapFld._category, groupedList, groupQuery;
                groupQuery = ej.Query().group(mapCateg);
                if (!this.model.enableSorting) groupQuery.queries.splice(0, 1);
                groupedList = ej.DataManager(list).executeLocal(groupQuery);
                this._swapUnCategorized(groupedList);
                (from == "search") ? this.popupListItems = [] : this._listItem([]);
                for (var i = 0; i < groupedList.length; i++) {
                    if (groupedList[i].key)
                        this.ultag.append(ej.buildTag("li.e-category", groupedList[i].key).attr("role", "option")[0]);
                    this._generateLi(groupedList[i].items, this.mapFld);
                    this.ultag.append(this.dummyUl);
                    for (var j = 0; j < groupedList[i].items.length; j++) {
                        (from == "search") ? this.popupListItems.push(groupedList[i].items[j]) : this._listItem(groupedList[i].items[j], "add");
                    }
                }
            }
            else {
                this._generateLi(list, this.mapFld);
                this.ultag.append(this.dummyUl);//ko binding
            }
            this._trigger('dataBound', { data: list });
        },
        _onScroll: function (e) {
            if (!e.scrollTop) return;
            var scrollerPositon = e.scrollTop, proxy = this;
            var source = this._dataSource();
            if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "continuous") {
                var list, queryPromise, skipQuery = ej.Query().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
                if (scrollerPositon >= Math.round($(proxy.popupList).find("ul,ol").height() - $(proxy.popupList).height()) && proxy._rawList.length < proxy._totalCount) {
                    proxy._addLoadingClass();
                    if (ej.DataManager && proxy._dataSource() instanceof ej.DataManager && !ej.isNullOrUndefined(proxy._dataSource().dataSource.url)) {
                        if (proxy.inputSearch && proxy.inputSearch.val() != "" && this.model.enableServerFiltering) 
                         skipQuery = proxy._addSearchQuery(ej.Query(), !proxy._isPlainType(proxy._rawList)).skip(proxy._getLi().length).clone();
                        else
                        skipQuery = proxy._getQuery().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
                        if (!proxy._trigger("actionBegin", { requestFrom: "scroll" })) {
                            queryPromise = proxy._dataSource().executeQuery(skipQuery);
                            queryPromise.done(function (e) {
                                if (!ej.isNullOrUndefined(proxy.model.value) && proxy.model.enableServerFiltering)
                                    e.result = proxy._removeSelectedValue(e.result);
                                proxy.addItem(e.result);
                                proxy._removeLoadingClass();
                                proxy._trigger("actionSuccess", { e: e, requestFrom: "scroll" });
                            }).fail(function () {
                                proxy._dataSource(null);
                                proxy._removeLoadingClass();
                                proxy._trigger("actionFailure", { e: e, requestFrom: "scroll" });
                            }).always(function (e) {
                                proxy._trigger("actionComplete", { e: e, requestFrom: "scroll" });
                            });
                        }
                    }
                    else if (ej.DataManager && source instanceof ej.DataManager && source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0)) {
                                proxy.addItem(this._localDataVirtualScroll());
                                window.setTimeout(function () {
                                proxy._removeLoadingClass();
                            }, 100);
                    }
                    else {
                        list = ej.DataManager(proxy._dataSource()).executeLocal(skipQuery);
                        proxy.addItem(proxy._removeSelectedValue(list));
                        proxy._removeLoadingClass();
                    }
                }
            } else if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "normal") {

                window.setTimeout(function () {
                    if (proxy._virtualCount == 0) {
                        proxy._loadList();
                    }
                }, 300);

            }

        },
        _localDataVirtualScroll: function () {
            var proxy = this;
            var selectValue = (!ej.isNullOrUndefined(proxy.value())) ? (typeof(proxy.value()) == "number") ? 1 : proxy.value().split(proxy.model.delimiterChar).length : 0;
            var _rawlist = (proxy._checkValue) ? proxy._rawList.length - selectValue : proxy._rawList.length;
            var queryPromise = ej.DataManager(proxy._dataSource().dataSource.json).executeLocal(ej.Query().skip(_rawlist).take(proxy.model.itemsCount).clone());
            return proxy._removeSelectedValue(queryPromise); 
        },
        _removeSelectedValue: function (data) { 
            if (!ej.isNullOrUndefined(this.value())) {
                var listitems = (typeof(this.value()) == "number") ? this.value() : this.value().split(this.model.delimiterChar);
                for (var k = 0; k < listitems.length; k++) {
                    for (var m = 0; m < data.length; m++) {
                        if (data[m][this.mapFld._value] == listitems[k]) 
                            data.splice(data.indexOf(data[m]), 1);
                    }
                }
                return data;
            }
            else
                return data;
        },
        _loadList: function () {
            this._virtualCount++;
            var source = this._dataSource();
            var top = this.scrollerObj.scrollTop(), proxy = this, prevIndex = 0, prevPageLoad, nextIndex = null;
            this._currentPage = Math.round(top / (29 * this.model.itemsCount));
            if(this._virtualPages){
            if (($.inArray(this._currentPage, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) {
                if (this._currentPage == 0) {
                    if (($.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPage = this._currentPage + 1;
                    }
                }
                else if (($.inArray(this._currentPage - 1, this._virtualPages)) != -1) {
                    if (($.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPage = this._currentPage + 1;
                    }
                }
                else {
                    this._currentPage = this._currentPage - 1;
                }
            }
            prevPageLoad = !($.inArray(this._currentPage - 1, this._virtualPages) != -1);
            this._addLoadingClass();
            for (var i = this._virtualPages.length - 1; i >= 0; i--) {
                if (this._virtualPages[i] < this._currentPage) {
                    prevIndex = this._virtualPages[i];
                    if (!(i + 1 == this._virtualPages.length))
                        nextIndex = this._virtualPages[i + 1];
                    break;
                }
            }
          }
            var firstArg = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
            var skipQuery = ej.Query().range(firstArg, this._currentPage * this.model.itemsCount + this.model.itemsCount), queryPromise, list;
            if (ej.DataManager && proxy._dataSource() instanceof ej.DataManager && !ej.isNullOrUndefined(proxy._dataSource().dataSource.url)) {
                var skipParam = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
                skipQuery = this._getQuery().skip(skipParam);
                if (prevPageLoad) {
                    for (i = 0; i < skipQuery.queries.length; i++) {
                        if (skipQuery.queries[i].fn == "onTake") {
                            skipQuery.queries.splice(i, 1);
                            break;
                        }
                    }
                    skipQuery.take(2 * this.model.itemsCount);
                }
                if (!proxy._trigger("actionBegin", { requestFrom: "scroll" })) {
                   if (proxy.inputSearch && proxy.inputSearch.val() != "" && this.model.enableServerFiltering) var skipQuery = proxy._addSearchQuery(ej.Query(), !proxy._isPlainType(proxy._rawList)).skip(proxy._getLi().length).clone();
                    queryPromise = proxy._dataSource().executeQuery(skipQuery);
                    queryPromise.done(function (e) {
                        e.result = proxy._removeSelectedValue(e.result);
                        proxy._appendVirtualList(e.result, prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
                        proxy._removeLoadingClass();
                        proxy._trigger("actionSuccess", { e: e, requestFrom: "scroll" });
                    }).fail(function (e) {
                        proxy._virtualCount--;
                        proxy._removeLoadingClass();
                        proxy._trigger("actionFailure", { e: e, requestFrom: "scroll" });
                    }).always(function (e) {
                        proxy._trigger("actionComplete", { e: e, requestFrom: "scroll" });
                    });
                }
            }
            else if (ej.DataManager && source instanceof ej.DataManager && source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0)) {
                proxy._appendVirtualList(this._localDataVirtualScroll(), prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
                window.setTimeout(function () {
                    proxy._removeLoadingClass();
                }, 100);
            }
            else {
                list = ej.DataManager(proxy._dataSource()).executeLocal(skipQuery);
                proxy._appendVirtualList(proxy._removeSelectedValue(list), prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
                proxy._removeLoadingClass();
            }
        },
        _appendVirtualList: function (list, prevIndex, currentIndex, nextIndex, prevPageLoad) {
          if(this._virtualPages){
            this._virtualCount--;
            this.ultag.find("span.e-virtual").remove();
            if (!ej.isNullOrUndefined(this.activeItem)) this.activeItem.attr("page", "0");
            if (($.inArray(currentIndex, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) return false;
            if (prevPageLoad && ($.inArray(currentIndex - 1, this._virtualPages.sort()) != -1)) {
                list.splice(0, this.model.itemsCount);
                prevPageLoad = false;
            }
            var items = this.model.itemsCount, tempUl = $("<ul>"), firstVirtualHeight, secondVirtualHeight;
            firstVirtualHeight = prevPageLoad ? ((currentIndex - 1) * items * 29) - (prevIndex * items + items) * 29 : (currentIndex * items * 29) - (prevIndex * items + items) * 29;
            if (firstVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: firstVirtualHeight }));
            this._mapFields();
            this._generateLi(list, this.mapFld);
            $(this.dummyUl).attr("page", currentIndex);
            if (prevPageLoad) {
                $(this.dummyUl).slice(0, items).attr("page", currentIndex - 1);
            }
            if (this.model.showCheckbox) {
                this._appendCheckbox(this.dummyUl);
            }
            tempUl.append(this.dummyUl);
            secondVirtualHeight = (currentIndex * items + items) * 29;
            if (nextIndex != null) secondVirtualHeight = (nextIndex * items * 29) - secondVirtualHeight;
            else secondVirtualHeight = this.ultag.height() - secondVirtualHeight;
            if (secondVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: secondVirtualHeight }));
            if (this.model.itemsCount > 0 && this.value() != "" && (this._dataSource() instanceof ej.DataManager && this._dataSource().dataSource.offline))
                var selector = this.ultag.find("li").last();
            else
                var selector = this.ultag.find("li[page=" + prevIndex + "]").last();
            selector.next().remove();
            tempUl.children().insertAfter(selector);
            this._virtualPages.push(currentIndex);
            if (prevPageLoad) this._virtualPages.push(currentIndex - 1);
            for (var i = 0; i < list.length; i++) {
                this._listItem(list[i], "add");
            }
            this._virtualUl = this.ultag.clone(true);
            this._renderBoxModel();
          }
        },

        _generateLi: function (list, mapFld) {
            this.mapFld = mapFld;
            this.dummyUl = [];
            if (!list || !list.length || list.length < 1) return false;
            for (var i = 0; i < list.length; i++) {
                var _did = this._getField(list[i], this.mapFld._id),
                    _dimageUrl = this._getField(list[i], this.mapFld._imageUrl),
                    _dimageAttributes = this._getField(list[i], this.mapFld._imageAttributes),
                    _dspriteCss = this._getField(list[i], this.mapFld._spriteCSS),
                    _dtext = this._getField(list[i], this.mapFld._text),
                    _dvalue = this._getField(list[i], this.mapFld._value),
                    _dhtmlAttributes = this._getField(list[i], this.mapFld._htmlAttributes),
                    _dselected = this._getField(list[i], this.mapFld._selected),
                    litag = document.createElement("li");
                litag.setAttribute('data-uid',Math.random().toString(36).substr(2,4));
                if (!ej.isNullOrUndefined(_dvalue)) {
                    litag.setAttribute('data-value', typeof _dvalue == "object" ? JSON.stringify(_dvalue) : _dvalue);
                }
                else {
                     litag.setAttribute('data-value', _dtext);
                }
                if (!ej.isNullOrUndefined(_did) && (_did !== "" || _did != 0))
                    litag.setAttribute('id', _did);
                if (!ej.isNullOrUndefined(_dhtmlAttributes) && (_dhtmlAttributes != "")) {
                    this._setAttr(litag, _dhtmlAttributes);
                }
                if (ej.isNullOrUndefined(_did) || (_did == "" && _did != 0)){
                    this._setAttr(litag, { id: this._id +"_"+ i + "_popup_option", "aria-selected": false, "tabindex": -1 });
                }
                if (this.model.template) {
                    $(litag).append(this._getTemplatedString(list[i]));
                } else {
                    if (!ej.isNullOrUndefined(_dimageUrl) && (_dimageUrl != "")) {
                        var imgtag = document.createElement("img");
                        this._setClass(imgtag, "e-align")._setAttr(imgtag, { 'src': _dimageUrl, 'alt': _dtext });
                        if ((_dimageAttributes) && (_dimageAttributes != "")) {
                            this._setAttr(imgtag, _dimageAttributes);
                        }
                        litag.appendChild(imgtag);
                    }
                    if (!ej.isNullOrUndefined(_dspriteCss) && (_dspriteCss != "")) {
                        var divtag = document.createElement("div");
                        this._setClass(divtag, 'div.e-align ' + _dspriteCss + ' sprite-image');
                        litag.appendChild(divtag);
                    }
                    if (_dselected) {
                        this._setClass(litag, "chkselect");
                    }
                    {
                        if (ej.isNullOrUndefined(_dtext)) _dtext = String(_dtext);
                        var textEle = document.createElement("span");
                        textEle.appendChild(document.createTextNode(_dtext));
                        this._setClass(textEle, "e-ddltxt");
                        litag.appendChild(textEle);
                    }
                }
                this._setAttr(litag, { "role": "option", "unselectable": "on" });
                this.dummyUl.push(litag);
             
            }
        },

        _setAttr: function (element, attrs) {
            if (typeof attrs == "string") {
                var sAttr = attrs.replace(/['"]/g, "").split("=");
                if (sAttr.length == 2) (element.hasAttribute(sAttr[0]) && sAttr[0] == "class") ? $(element).addClass(sAttr[1]) : element.setAttribute(sAttr[0], sAttr[1]);
            }
            else {
                for (var idx in attrs) {
                    if ((idx == 'styles' || idx == 'style') && typeof attrs[idx] == 'object') {
                        for (var prop in attrs[idx]) {
                            element.style[prop] = attrs[idx][prop];
                        }
                    }
                    else
                        element.setAttribute(idx, attrs[idx]);
                }
            }
            return this;
        },
        _setClass: function (element, classNme) {
            element.className += " " + classNme;
            return this;
        },
        _removeClass: function (element, classNme) {
            var index = element.className.indexOf(classNme);
            if (index >= 0) {
                if (index != 0 && element.className[index - 1] === " ")
                    element.className = element.className.replace(" " + classNme, "");
                else element.className = element.className.replace(classNme, "");
            }
            return this;
        },
        _hasClass: function (element, classNme) {
            return element.className.indexOf(classNme) >= 0;
        },
        _swapUnCategorized: function (list) {
            $(list).each(function (i, obj) {
                if (!obj.key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = obj;
                    return false;
                }
            });
        },

        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },

        _getTemplatedString: function (list) {

            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                str = str.replace(content, this._getField(list, field));
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },

        _setWatermark: function () {
            if ((this.element.val() == "") && this._trim(this._visibleInput.val()) == "") {
                var watermark=(this.model.watermarkText != null)? this.model.watermarkText:this._localizedLabels.watermarkText;
                if (this._isWatermark)
                    this._visibleInput.attr("placeholder", watermark);
                else
                    this._hiddenSpan.css("display", "block").text(watermark);
                //In visual mode, to show watermark text when no items selected.
                if (this.model.multiSelectMode == "visualmode" && this._ulBox && this._ulBox.find('li').length == 0) this._swapUlandInput(false);
            }
        },

        _checkboxHideShow: function (value) {
            if(!ej.isNullOrUndefined(this.ultag)){
            if (value) {
                this.listitems = this._getLi();
                var chklist = this.listitems.find('input[type=checkbox]');
                if (chklist.length == 0) {
                    this._appendCheckbox(this.listitems);
                }
            }

            else
                this._removeCheck(this.popupList);
            this.model.showCheckbox = value;
            this._virtualUl = this.ultag.clone(true);
            }
        },
        
        _setCheckAll: function (value) {
            if (!this._isSingleSelect() && (value))
                this.checkAll();
            else this.model.checkAll = false;
        },
        _setUncheckAll: function (value) {
            if (!this._isSingleSelect() && (value))
                this.uncheckAll();
            else this.model.uncheckAll = false;
        },

        checkAll: function () {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
            var _nodes = this._selectedIndices, isAlreadySelected = false;
            this._mapFields();
            this.listitems = this._getLi();
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            if (!this._isSingleSelect()) {
                for (var i = 0; i < this.listitems.length; i++) {
                    this._currentText = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._decode(this._getField(this.popupListItems[i], this.mapFld._text));
                    this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this._currentText;
                    if(!this._checkContains(this._hiddenValue))
                    if (this.model.showCheckbox) {
                        var checkboxWrap = $(this.listitems[i]).children(".e-checkwrap")[0];
                        if (checkboxWrap && !this._isChecked(checkboxWrap)) {
                            this._setClass(checkboxWrap, "e-check-act");
                            this._setAttr(checkboxWrap,{"aria-checked":true});
                            checkboxWrap.firstChild.checked = true;
                            isAlreadySelected = false;
                        }
                        else isAlreadySelected = true;
                    }
                    else {
                        isAlreadySelected = false;
                        $(this.listitems[i]).addClass("e-active");
                    }
                    else isAlreadySelected = true;
                    
                    if (!isAlreadySelected) {
                        this.checkedStatus = true;
                        this._itemID = $(this.listitems[i]).attr("id");
                        if (!ej.isNullOrUndefined(this._itemID) && (this._itemID != "" || this._itemID == 0))
                            this._selectedItemsID.push(this._itemID);
                        this._createListHidden(this._hiddenValue);
                        if (this.model.multiSelectMode == "visualmode") {
                            this._ulBox.append(this._createBox(this._currentText,this._hiddenValue));
                            if (this._isPopupShown()) this._setListPosition();
                        }
                        this._addText(this._currentText);
                        if ($.inArray(i, _nodes) == -1) {
                            this._selectedIndices.push(i);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                        this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                        var args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: i, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                        this._updateValue(this.element.val());
                        this._updateText();
                        if (!this._initValue)
                            this._trigger("change", args);
                        this._activeItem = i;
                        this.activeItem = this._getActiveItem();
                        this._cascadeAction();
                    }
                }
                this.model.itemValue = this._selectedValue;
                this.model.uncheckAll = false;
                this.model.checkAll = true;
                this._activeItem = -1;
                this._setWatermark();
            }
        },
        _createListHidden: function (value) {
            var arrayHidden = document.createElement("input");
            var quote = /'/;
            if(quote.test(value))
               value =value.replace(quote,"&apos;")
            this._setAttr(arrayHidden, { type: "hidden", name: this._name, value: value, id: "#" + value });
            if($.inArray(arrayHidden.value,this._hiddenInputElement) == -1){
                this._hiddenInputElement.push(arrayHidden.value);
                this._boxValue.push(arrayHidden.value);
                this.container.append(arrayHidden);
                $(this.element).attr("name", "hiddenEle");
            }
        },
        _removeListHidden: function (value) {
            var quote = /'/;
            if(quote.test(value))
                 value =value.replace(quote,"&apos;")
            var arrayEle = this.container.find("[id='#" + value + "']");
            this._hiddenInputElement.splice($.inArray(arrayEle.value,this._hiddenInputElement),1);
            var index = this._boxValue.indexOf(value)
            if(index != -1)this._boxValue.splice(index,1);
            $(arrayEle).remove();
            if (!this._isSingleSelect() && this.element.val() == "") this.element.attr("name", this._name);
        },
        _getAttributeValue: function (val) {
            if(!ej.isNullOrUndefined(val)) {
                var eleValue = ej.isNullOrUndefined(val.getAttribute("data-value"))? val.getAttribute("value") : val.getAttribute("data-value");
            }
            return val ? eleValue : null;
        },
       
        _selectCheckedItem: function (chkitems) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
            for (var i = 0; i < chkitems.length; i++) {
                this._activeItem = chkitems[i];

                if(this.ultag.children()[this._activeItem]){
                this._enterTextBoxValue();
                }
            }
        },

        /* will deprecate with uncheckAll method */
        unCheckAll: function () { this.uncheckAll(); },

        uncheckAll: function () {
            var isAlreadySelected = false;
            this.listitems = this._getLi();
            this._mapFields();
            if (!this._isSingleSelect()) {
                for (var i = 0; i < this.listitems.length; i++) {
                    this._currentText = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                    this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this._currentText;
                    if(this._checkContains(this._hiddenValue))
                    if (this.model.showCheckbox) {
                        var checkboxWrap = $(this.listitems[i]).children(".e-checkwrap")[0];
                        if (checkboxWrap && this._isChecked(checkboxWrap)) {
                            this._removeClass(checkboxWrap, "e-check-act");
                            this._setAttr(checkboxWrap,{"aria-checked":false});
                            checkboxWrap.firstChild.checked = false;
                            isAlreadySelected = true;
                        }
                        else isAlreadySelected = false;
                    }
                    else {
                        $(this.listitems[i]).removeClass("e-active");
                        isAlreadySelected = true;
                    }
                    else isAlreadySelected = false;
                    
                    if (isAlreadySelected) {
                        this.checkedStatus = false;
                        this._activeItem = i;
                        this.activeItem = this._getActiveItem();
                        this._removeText(this._hiddenValue);
                        this._removeListHidden(this._hiddenValue);
                        var _nodes = this._selectedIndices;
                        if ($.inArray(i, _nodes) > -1) {
                            this._selectedIndices.splice($.inArray(i, _nodes), 1);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                        this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
                        this._itemID = $(this.listitems[i]).attr("id");
                        if (!ej.isNullOrUndefined(this._itemID) && (this._itemID != "" || this._itemID == 0))
                            this._removeSelectedItemsID();
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                        var args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: i, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                        this._updateValue(this.element.val());
                        this._updateText();
                        if (!this._initValue)
                            this._trigger("change", args);
                        this._cascadeAction();
                        if (this.model.multiSelectMode == "visualmode") {
                            this._deleteBoxCheck(this._hiddenValue);
                            if (this._isPopupShown())
                                this._setListPosition();
                        }
                    }
                    
                }
                this.model.itemValue = this._selectedValue;
                this.model.checkAll = false;
                this.model.uncheckAll = true;
                this._setWatermark();
                this._activeItem = -1;
                this._clearTextboxValue();
            }

        },
        _removeSelectedItemsID: function () {
            var itemToRemove;
            itemToRemove = this._selectedItemsID.indexOf(this._itemID);
            this._selectedItemsID.splice(itemToRemove, 1);
            this._itemID = "";
        },


        _refreshScroller: function () {
            if(!ej.isNullOrUndefined(this.popupListWrapper))
            {
            if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
                this.popupList.css("height", "auto");
                this.popupListWrapper.css("height", "auto");
            }
            this.popupList.find(".e-content, .e-vhandle").removeAttr("style");
            this.popupList.find(".e-vhandle div").removeAttr("style");
            this.popupList.children(".e-content").removeClass("e-content");
            var flag = this._isPopupShown();
            this.popupListWrapper.css("display", "block");
            this.popupList.css({ "display": "block" });  // For get the height of the popup
            this.scrollerObj.model.height = Math.ceil(this._getPopupHeight());
            this.scrollerObj.refresh();
            if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
                this.popupList.css("height", "auto");
                this.popupListWrapper.css("height", "auto");
            }
            this.scrollerObj.option("scrollTop", 0);
            if (!flag) this.popupListWrapper.css("display", "none");
            }
        },
        _enablePopupResize: function () {
            if (this.model.enablePopupResize && !ej.isNullOrUndefined(this.popupListWrapper)) {
                this.popupListWrapper.addClass("e-resizable").append(ej.buildTag("div.e-resizebar").append(ej.buildTag("div.e-icon e-resize-handle")))
                .find(".e-resize-handle").addClass((this.model.enableRTL) ? "e-rtl-resize" : "");
                this._resizePopup();
            }
        },


        _resizePopup: function () {
            var proxy = this, started = false;
            this.popupListWrapper.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: proxy._validatePixelData(proxy.model.minPopupHeight),
                    minWidth:  proxy._validatePixelData(proxy.model.minPopupWidth),
                    maxHeight: proxy._validatePixelData(proxy.model.maxPopupHeight),
                    maxWidth:  proxy._validatePixelData(proxy.model.maxPopupWidth),
                    handle: "e-ddl-popup",
                    resizeStart: function (event) {
                        if (!proxy.model.enabled)
                            return false;
                        !started && proxy._trigger("popupResizeStart", { event: event });
                        started = true;
                    },
                    resize: function (event) {
                        var reElement = $(event.element).parents("div.e-ddl-popup");
                        proxy._refreshPopupOnResize($(reElement).outerHeight(), $(reElement).outerWidth());
                        proxy._trigger("popupResize", { event: event });
                    },
                    resizeStop: function (event) {
                        if (started) {
                            proxy._refreshPopupOnResize(proxy.model.popupHeight, proxy.model.popupWidth);
                            started && proxy._trigger("popupResizeStop", { event: event });
                            started = false;
                        }
                    },
                    helper: function (event) {
                        var reElement = $(event.element).parents("div.e-ddl-popup");
                        proxy._refreshPopupOnResize($(reElement).outerHeight(), $(reElement).outerWidth());
                        return $(proxy.popupListWrapper);
                    }
                });
        },

        _refreshPopupOnResize: function (currHeight, currWidth) {
            if (currHeight) this.model.popupHeight = currHeight;
            if (currWidth) this.model.popupWidth = currWidth;
            this.popupListWrapper.css({ "height": this._validatePixelData(this.model.popupHeight), "min-height": this._validatePixelData(this.model.minPopupHeight), "max-height": this._validatePixelData(this.model.maxPopupHeight) });
            this._setListWidth();
            this._refreshScroller();
        },

        _setListWidth: function () {
            if(!ej.isNullOrUndefined(this.popupListWrapper)){
            var width = this.model.popupWidth;
            if (width != "auto") this.popupListWrapper.css({ "width": width });
            else this.popupListWrapper.css({ "min-width": this._validatePixelData(this.model.minPopupWidth) });
            this.popupListWrapper.css({ "max-width": this._validatePixelData(this.model.maxPopupWidth) });
            }
        },

        _setListHeight: function () {
            if(!ej.isNullOrUndefined(this.popupListWrapper)){
            if (this.model.enablePopupResize && this.model.enableFilterSearch && this.model.minPopupHeight && this.model.minPopupHeight.toString().indexOf("%") <0 && this._validatePixelData(this.model.minPopupHeight) == 20)
                this.model.minPopupHeight = '65'; /* adding default height of search box*/
            this.model.enablePopupResize ? this.popupListWrapper.css({ "min-height": this._validatePixelData(this.model.minPopupHeight), "max-height": this._validatePixelData(this.model.maxPopupHeight), "height": this._validatePixelData(this.model.popupHeight) }) :
            this.popupListWrapper.css({ "max-height": this._validatePixelData(this.model.popupHeight), "min-height": this._validatePixelData(this.model.minPopupHeight) });
            }
        },
        _validatePixelData: function (data) {			
            return (data && !isNaN(data))? Number(data):data;
        },
        _getPopupHeight: function () {
            var wrap = this.popupListWrapper.height();
            if (this.model.enablePopupResize) wrap -= this.popupListWrapper.find(">div.e-resizebar").height();
            if (this.model.headerTemplate && this.headerTemplate) wrap -= this.headerTemplate.height();
            if (this.model.enableFilterSearch && this.inputSearch) {
                var ele = this.inputSearch.parent(".e-in-wrap");
                wrap -= (parseInt(ele.css("height")) + parseInt(ele.css('margin-top')) + parseInt(ele.css('margin-bottom')));
            }
            return wrap;
        },

        _refreshPopup: function () {
            if (this.model.popupWidth == "auto" && !this._validatePixelData(this.model.minPopupWidth)) this.popupListWrapper.css({ "min-width": this.wrapper.width() });
            else if(this._validatePixelData(this.model.minPopupWidth))this.popupListWrapper.css({ "min-width": this._validatePixelData(this.model.minPopupWidth) });
            if(this.scrollerObj != undefined) this._refreshScroller();
            this._setListPosition();
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popupListWrapper.outerHeight(),
            popupWidth = this.popupListWrapper.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupListWrapper.outerWidth() - elementObj.outerWidth();
            this.popupListWrapper.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });

        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popupListWrapper);
        },


        _showResult: function () {
            var proxy = this;
            this.popUpShow = true
            if(this.model.loadOnDemand) { 
                if(ej.isNullOrUndefined(this.popupListWrapper))this._renderPopupPanelWrapper();
                if(ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0){
                    this._showFullList();
               }
               this._renderRemaining();
            }
            if (this.model.allowGrouping || this.model.fields.groupBy) {
              this.popupListWrapper.addClass("e-atc-popup");
            }
            var args = { text: this._visibleInput[0].value, value: this._selectedValue, refreshPopup: true };
            if (this._trigger("beforePopupShown", args)) return;
            if (args.refreshPopup) this._refreshPopup();
            $(this.popupListWrapper).slideDown(this.model.enableAnimation ? 200 : 1, function () {
                $(document).on("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
                if(!(ej.isDevice()))
                proxy._on(ej.getScrollableParents(proxy.wrapper), "scroll", proxy._hideResult);
            });
            this._setAttr(this.wrapper[0], { "aria-expanded": true });
            this._setAttr(this.popupListWrapper[0], { "aria-hidden": false });
            this._setAttr(this.ultag[0],{ "aria-hidden": false });
            this._listSize =  this._getLi().length;
            this.wrapper.addClass("e-popactive");
            this._trigger("popupShown", { text: this._visibleInput[0].value, value: this._selectedValue });
            this.scrollerObj.setModel({ scrollTop: this._calcScrollTop('active') });
        },

        _OnWindowResize: function (e) {
            if (!ej.isNullOrUndefined(this.model) && this._isPopupShown()) {
                this._refreshPopup();
            }
        },
        _hideResult: function (e) {
            if (this.model && this._isPopupShown()) {
                if (!ej.isNullOrUndefined(e) && !ej.isNullOrUndefined(this.inputSearch) && $(this.inputSearch).is(":focus")){
                    if(e.type == "scroll" && ej.isTouchDevice())
                        return false;
                }
                var proxy = this;
                if (this._trigger("beforePopupHide", { text: this._visibleInput[0].value, value: this._selectedValue })) return;
                $(this.popupListWrapper).slideUp(this.model.enableAnimation ? 100 : 0, function () {
                    $(document).off("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
                });
                if (this.element != null)
                    this._setAttr(this.wrapper[0], { "aria-expanded": false });
                if (this.popupListWrapper[0]) this._setAttr(this.popupListWrapper[0], { "aria-hidden": true });
                if (this.ultag[0]) this._setAttr(this.ultag[0], { "aria-hidden": true });
                if(!(ej.isDevice()))
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                if (this._visibleInput != null)
                this.wrapper.removeClass("e-popactive");
               this.popUpShow= false;
                    this._trigger("popupHide", { text: this._visibleInput[0].value, value: this._selectedValue });

                setTimeout(function () {
                    proxy._resetSearch();                 
                }, 100);
                this._getLi().find(".e-ddl-anim").removeClass("e-ddl-anim");
            }
        },

        _isPopupShown: function () { 
            if(!ej.isNullOrUndefined(this.popupListWrapper)) return (this.popupListWrapper.css("display") == "block");
        },

        _enterTextBoxValue: function (isCheck) {
            var args, valueModified = true;
            this.removeID = false;
            this.checkedStatus = false;
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this._chooseSelectionType();
            if (this._activeItem >=0 || this._activeItem != null) {
                if (this.model.showCheckbox) {
                    var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
                    $(checkboxEle).removeClass('e-check-inact');
                    this.checkedStatus = this._isChecked(checkboxEle);                   
                }
                else{
                    this.checkedStatus = this.activeItem.hasClass('e-active')
                }            
            }
            args = { text: this._currentText, selectedText: this._currentText, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus, isInteraction: !!this._uiInteract };
            if (!this._initValue && !this._onSearch && this._raiseEvents){ 
                if(this._trigger("select", args)) {
                    this._setWatermark();
                    return;
                }
            }
            if (this._activeItem >=0 || this._activeItem != null) {
                if (!this._isSingleSelect() && (!this._checkContains(this._selectedValue) || this._checkedValues.length > 0)) {                   
                    if (this.model.showCheckbox) {
                        var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
                        if (!this._isChecked(checkboxEle)) {
                            this._removeClass(checkboxEle, "e-ddl-anim");	
                            this._setClass(checkboxEle, "e-check-act e-ddl-anim");
                            this._setAttr(checkboxEle,{"aria-checked":true});
                            $(checkboxEle).find(".e-check-input")[0].checked = true;
                        }
                    }
                    else {
                        this.activeItem.addClass('e-active');
                    }
                    if (this.model.multiSelectMode == "visualmode") {
                        var valueElement = this._createBox(this._currentText, this._selectedValue);
                        if(this._ulBox.children() && this._ulBox.children().length > 0 ? this._checkForDuplicates(valueElement) : true){
                            this._ulBox.append(valueElement);
                        }
                        if (this._isPopupShown())
                            this._setListPosition();
                    }

                    this._maintainHiddenValue();
                    this._addText(this._currentText);
                    
                 if (!this._isSingleSelect()&& JSON.stringify(this._boxValue) != JSON.stringify(this._valueContainer))
                    this._createListHidden(this._hiddenValue);
                    if ($.inArray(this.selectedIndexValue, this._selectedIndices) == -1) {
                        this._selectedIndices.push(this.selectedIndexValue);
                        this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                    }                
                } else if( this._isSingleSelect()){
                    this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
                    this.activeItem.addClass('e-active');                    
                    this._maintainHiddenValue();
                    this._visibleInput.val(this._currentText);
                    this.element.val(this._hiddenValue);
                    this.selectedItemIndex(this.selectedIndexValue);
                    this.selectedIndex(this.selectedIndexValue);
                    this._selectedIndices[0] = this.selectedIndexValue;
                }
                else valueModified = false;
                if(valueModified) {
                    this.checkedStatus = true;
                    if(isCheck)								
                      this._checkedValues.push(this.activeItem.text());
                    this._onValueChange();					
                    this._cascadeAction();
                    if (this.selectelement) {
                    if ($("#" + this._id).children().length > this.selectedIndexValue)
                        $("#" + this._id).children()[this.selectedIndexValue].selected = true;
                    }
                }
            }
            this.model.uncheckAll = false;
            this._setWatermark();
            this._uiInteract = false;
        },
        _checkForDuplicates: function (valueElement) {
            var isDuplicated = true;
            var childrenElement = this._ulBox.children().toArray();
            childrenElement.forEach(function (child) {
                if(valueElement.attr("data-value") == $(child).attr("data-value")){
                    isDuplicated = false;
                    return false;
                }
            }, this);
            return isDuplicated;
        },
        _onValueChange: function () {
            this.model.itemValue = this._selectedValue;
            this._updateText();
            if (!this._isSingleSelect()&& JSON.stringify(this._boxValue) != JSON.stringify(this._valueContainer))
            {
                this._valueContainer = this._boxValue;
            }
            if(this._visibleInput.val() == "" && this.element.val())
               this.element.val("");
            if ((this.value() != this.element.val()) || (this.value() == null && ($.inArray("", this._valueContainer) != -1))) {
                if (!ej.isNullOrUndefined($(this.getSelectedItem()).last()[0])) {
                    (this.model.enableFilterSearch && this.model.enableServerFiltering)?this._updateSelectedIndex(this.element.val(),$(this.getSelectedItem()).last().attr("data-uid")): this._updateSelectedIndexByValue(this.element.val());
                }
                if (!this._isSingleSelect() ) {
                    this._updateValue(this._valueContainer.toString());
                }
                else {
                    this._updateValue(this.element.val());
                }
                this.selectedTextValue = this.model.text;
                if (!this.model.showCheckbox && this.model.multiSelectMode == "none" && (this.model.value == null || this.model.value == "")){
                    this.model.itemValue = "";
                }
               var args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: this.selectedIndexValue, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus, isInteraction: !!this._uiInteract };

                if (!this._initValue && !this._onSearch && this._raiseEvents) {
                    if(typeof this.model._change == "function") this._trigger("_change", { isChecked: this.checkedStatus, text: this._visibleInput.val(), itemId: this.selectedIndexValue, selectedText: this._currentText, selectedValue: this._selectedValue, value: this.value(), data: this.model, isInteraction: !!this._uiInteract  });
                    this._trigger("change", args);
                    if (this.model.showCheckbox)
                        this._trigger('checkChange', { isChecked: this.checkedStatus, text: this._visibleInput.val(), itemId: this.selectedIndexValue, selectedText: this._currentText, selectedValue: this._selectedValue, value: this._selectedValue, data: this.model });
                }
                this._uiInteract = false;
                if(this.model.enableFilterSearch && this.model.enableServerFiltering){
                this._searchresult = [];
                this._searchresult = this.getItemDataByValue(this.value());
                }
                
            }
        },
        _updateSelectedIndex: function(value,uid)
        {
            if (!value) return;
            this._selectedIndices = this.model.selectedItems = this.model.selectedIndices = [];
            this._virtualList = this._virtualUl.children("li:not('.e-category')");
            var item = this._toArray(value);
                 for (var k = 0; k < item.length; k++) {
                for (var m = 0; m < this._virtualList.length; m++) {
                    if ((item[k] == this._getIndexedValue(this._virtualList[m]))&& (uid == $(this._virtualList[m]).attr("data-uid"))) {
                        this._selectedIndices.push(m);
                        break;
                    }
                }
            }
             this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
        },
        _decode: function (val) {
            return $("<span>").html(val).text();
        },
        _chooseSelectionType: function () {
            this.activeItem = this._getActiveItem();
            this.selectedIndexValue = this._activeItem;
            this._mapFields();
            var regEx = /([^"]*)\&[gl]t;([^"]*)/g;
            if (this._dataSource() != null && (!this._isPlainType(this._dataSource()) || !this._isPlainType(this.popupListItems))) {
                if(this.model.enableFilterSearch && this.ultag.children()[this._activeItem].textContent == this.activeItem.text() ) 
                    if(!regEx.test(this.ultag.children()[this._activeItem].textContent)) {
                       this._currentText = this.ultag.children()[this._activeItem].textContent;
                    } else {
                       this._currentText = this._decode(this.ultag.children()[this._activeItem].textContent);
                    }
                else
                    if (!regEx.test(this._getField(this.popupListItems[this._activeItem], this.mapFld._text))) {
                        this._currentText = this._getField(this.popupListItems[this._activeItem], this.mapFld._text);
                    } else {
                        this._currentText = this._decode(this._getField(this.popupListItems[this._activeItem], this.mapFld._text));
                    }
                this._currentText = (this._currentText === "" || this._currentText == null) ? this.activeItem.text() : this._currentText;
                this._selectedValue = this._getField(this.popupListItems[this._activeItem], this.mapFld._value);
                this._selectedValue = (this._selectedValue != null) ? this._selectedValue : this._currentText;
                this._itemID = this._getField(this.popupListItems[this._activeItem], this.mapFld._id);
            } else {
                this._currentText = this.activeItem.text();
                if (this._getAttributeValue(this.activeItem[0]))
                    this._selectedValue = this._getAttributeValue(this.activeItem[0]);
                else {
                    if (this._currentText != null) {
                        if(!ej.isNullOrUndefined(this.activeItem[0]))this.activeItem[0].setAttribute("value", this._currentText);
                        this._selectedValue = this._currentText;
                    }
                    else
                        this._selectedValue = "";
                }
                this._itemID = $(this.activeItem).attr("id");
            }
            if (!ej.isNullOrUndefined(this._itemID) && (this._itemID != "" || this._itemID == 0)) {
                if (!this.model.showCheckbox) {
                    this._selectedItemsID = [];
                    !this.removeID && this._selectedItemsID.push(this._itemID);
                }
                else
                    !this.removeID ? this._selectedItemsID.push(this._itemID) : this._removeSelectedItemsID();
            }
            this.selectedTextValue = this._currentText;
        },
        _maintainHiddenValue: function () {
            var val = this._getAttributeValue(this.activeItem[0]);
            this._hiddenValue = !ej.isNullOrUndefined(val)? val : this._currentText;
        },
        _removeTextBoxValue: function (delvalue) {
            this._uiInteract = true;
            this.removeID = true;
            this.checkedStatus = true;
            if(this._isFilterInput()){
                for (var j = 0; j < this._getLi().length; j++) {
                    if ($(this._getLi()[j]).attr("data-value") == delvalue) {
                        this._activeItem = j;
                    }
                }
            }
            this._chooseSelectionType();
            if (this._activeItem >=0 || this._activeItem != null) {
                if (this.model.showCheckbox) {
                    var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
                    $(checkboxEle).removeClass('e-ddl-anim').addClass('e-check-inact e-ddl-anim');
                    this.checkedStatus = this._isChecked(checkboxEle);                   
                }
                else{
                    this.checkedStatus = this.activeItem.hasClass('e-active')
                }            
            }			
            var args = { text: this._currentText, selectedText: this._currentText, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue && !this._onSearch && this._raiseEvents){
                if(this._trigger("select", args)){
                    this._setWatermark();
                    return;
                }
            }                
            this._maintainHiddenValue();
            this._hiddenValue = this._isFilterInput() && !ej.isNullOrUndefined(delvalue) ? delvalue : this._hiddenValue;
            this._removeText(this._hiddenValue);
             if (!this._isSingleSelect()&& JSON.stringify(this._boxValue) != JSON.stringify(this._valueContainer))
            this._removeListHidden(this._hiddenValue);
            if(this._isFilterInput() && !this.activeItem.attr("data-value") == delvalue)
                this.activeItem.removeClass('e-active');
            if (!this._isSingleSelect()) {
                if (this.model.showCheckbox) {
                    var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
                    if (this._isChecked(checkboxEle)) {
                        this._removeClass(checkboxEle, "e-check-act");
                        this._setAttr(checkboxEle,{"aria-checked":false});
                        $(checkboxEle).find(".e-check-input")[0].checked = true;
                    }
                }
                else this.activeItem.removeClass('e-active');

                if ($.inArray(this.selectedIndexValue, this._selectedIndices) > -1) {
                    this._selectedIndices.splice($.inArray(this.selectedIndexValue, this._selectedIndices), 1);
                    this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                }
                if (this.model.multiSelectMode == "visualmode") {
                    this._deleteBoxCheck(this._hiddenValue);
                    if (this._isPopupShown())
                        this._setListPosition();
                }
            }
            this.checkedStatus = false;            
            this._onValueChange();
            if ((this.model.cascadeTo != null) && !this._isSingleSelect() && !this._initValue ) this._cascadeAction();
            this.model.checkAll = false;
            this._setWatermark();
        },


        _createBox: function (text, value) {
            if (!this._checkContains(value) || this._checkedValues.length > 0) {

                if (this._ulBox.css('display') == "none" && this._visibleInput.css('display') != "none") this._swapUlandInput(true);
                var span = ej.buildTag("span.e-icon e-close", "", {}, { "unselectable": "on" });
                var li = ej.buildTag("li.e-options").text(text).attr("data-value",value).append(span);
                this._on(span, "click", function (e) {
                    if (!this.model.enabled) return false;
                    this.delIconClick = true;
                    this._deleteBox($(e.target).parent());
                    this.delIconClick = false;
                });
                return li;
            }
        },
        _deleteBoxCheck: function (val) {
            var items = this._ulBox.children('li');
            for (var i = 0; i < items.length; i++) {
                if ($(items[i]).attr("data-value") == val) {
                    $(items[i]).remove();
                    this._checkedValues.splice(i, 1);
                }
            }
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children("li:not(.e-search-box)");
            var item = items.last();
            if (item.hasClass("e-active")) this._deleteBox(item);
            else {
                this._removeActive();
                item.addClass("e-active");
            }
        },
        _deleteBox: function (items) {
            for (var i = 0; i < items.length; i++) {              
                var deltext = $(items[i]).attr("data-value");
                if(this._isFilterInput()){ 
                    var datalist = this.getListData();
                    for (var j = 0; j < datalist.length; j++) {
                        var val = this._getField(datalist[j], this.mapFld._value) ? this._getField(datalist[j], this.mapFld._value): this._getField(datalist[j], this.mapFld._text);
                        if (val == deltext) {
                            this._removeTextBoxValue(deltext);
                            break;
                        }
                    }
                    this._resetSearch();
                }else{
                    var listItems = this._getLi();
                    for (var j = 0; j < listItems.length; j++) {
                        if ($(listItems[j]).attr("data-value") == deltext) {
                            this._activeItem = j;
                            this._removeTextBoxValue();
                            break;
                        }
                    }
                }
            }
            if (!this._isFocused && !this._isPopupShown())
                this._setWatermark();
        },
        _isFilterInput: function(){
            if(this.model.enableFilterSearch && this.inputSearch){
                if(!this.inputSearch.val() == ""){
                       return true; 
                }
            }else{
                return false;
            }
        },
        _swapUlandInput: function (inputHide) {
            if (inputHide) {
                this._visibleInput.css('display', 'none');
                this._ulBox.css('display', 'block');
                this.wrapper.css({ 'height': 'auto' });
            }
            else {
                this._visibleInput.css('display', 'block');
                this._ulBox.css('display', 'none');
                this.wrapper.css({ 'height': this.model.height });
            }
        },
        _removeActive: function () {
            this._ulBox.children("li").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = ej.buildTag("span", this._visibleInput.val());
            this.container.append(tempSpan);
            this._visibleInput.width(tempSpan.width() + 30);
            tempSpan.remove();
        },
        _destroyBoxModel: function () {
            this._visibleInput.css('display', 'block');
            this.wrapper.height(this.model.height);
            this._ulBox.remove();
            this._ulBox = null;
            this._off(this.container, "click");
        },

        _removeListHover: function () {
            this.ultag.children("li").removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = this._getActiveItem();
            this._setAttr(activeItem[0],{ "aria-selected": true});
            this._setAttr(this.wrapper[0],{ "aria-activedescendant": activeItem[0].id.toString(), "aria-labelledby": activeItem[0].id.toString()});
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop('hover') });
        },
        _getLi: function () {
            if(this.ultag)
            return this.ultag.children("li:not('.e-category'):not('.e-nosuggestion')");
        },
        _calcScrollTop: function (val) {
            var ulH = this.ultag.outerHeight(), li = this.ultag.find("li"), liH = 0, index, top, i;
            if (this._selectedIndices && this._selectedIndices.length > 0 && val == "active") {
                var getLi = this._getLi();
                index = this._selectedIndices.length == getLi.length ? 0
                : this._selectedIndices[this._selectedIndices.length - 1];
                if (this.model.fields.groupBy != null || this.ultag.find("li.e-category").length > 0) {
                    index = $.inArray(getLi.eq(index)[0], li);
                }
            }
            else index = this.ultag.find("li.e-" + val).index();

            for (i = 0; i < index; i++) { liH += li.eq(i).outerHeight(true); }
            top = liH - ((this.popupList.outerHeight() - li.eq(index).outerHeight(true)) / 2);
            return top < 0 ? 0 : top;
        },
        _getActiveItem: function () {
            return this._getLi().eq(this._activeItem);
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },


        _roundedCorner: function (val) {
            if (val) {
                this.container.addClass("e-corner");
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.addClass("e-corner");
                if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.removeClass("e-corner");
                if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').removeClass("e-corner");
            }

        },

        _enabled: function (boolean) {
            if (boolean) this.enable();
            else this.disable();
        },

        _RightToLeft: function () {
            if (this.model.enableRTL) {
                this.wrapper.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
            }

        },
        _dropbtnRTL: function () {
            if (this.model.enableRTL) {
                this.popupListWrapper.addClass("e-rtl").find(".e-resize-handle").addClass("e-rtl-resize");
                this.popupList.addClass("e-rtl");
            }
            else {
                this.popupListWrapper.removeClass("e-rtl").find(".e-resize-handle").removeClass("e-rtl-resize");
                this.popupList.removeClass("e-rtl");
            }
        },
        _OnDropdownClick: function (e) {
            this._preventDefaultAction(e);
            if (($(e.target).is("li") && $(e.target).parent().hasClass("e-boxes")) || ($(e.target).parents("ul").hasClass("e-boxes") && $(e.target).hasClass("e-icon e-close")))
                return false;
            if (this.model.readOnly || this._readOnly) return false;
            var popuphideshow = !ej.isNullOrUndefined(this.ultag) ? this.ultag.find('li').length > 0 : (this.model.loadOnDemand && !ej.isNullOrUndefined(this.model.dataSource)) ? true: false;
            if (popuphideshow && ((e.which && e.which == 1 ) ||(e.button && e.button == 0) )) {
                this._OnPopupHideShow();
            }
        },
        _OnPopupHideShow: function () {
            if (this._isPopupShown()) {
                this._hideResult();
            }
            else {
                this._showResult();
                if (this.model.enableFilterSearch){
                    if(this.getSelectedItem().length == 0)
                        this.ultag.find("li:first").addClass("e-hover");
                    else{
                        var length = this.getSelectedItem().length;
                        $(this.getSelectedItem()[length -1]).addClass("e-hover");
                    }
                    $(this.inputSearch).focus();
                }
                else
                    this.wrapper.focus();
            }
        },

        _showFullList: function () {
            var source = this._dataSource();
            if(ej.isNullOrUndefined(this.ultag)) this.ultag = ej.buildTag("ul.e-ul", "", {}, { "role": "listbox" });
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
                    var proxy = this;
                    proxy._initDataSource(source);
                }
                else this._getFilteredList(source.dataSource.json);
            }
            else this._getFilteredList(source);
        },
        _getFilteredList: function (list) {
            if (!list || !list.length || list.length < 1) {
                this._targetElementBinding();
                this._renderRemaining();
            }
            else {
                var listItem = ej.DataManager(list).executeLocal(this._isPlainType(list) ? ej.Query() : this._getQuery(true));
                this._totalCount = listItem.count;
                this._listItem(listItem.result ? listItem.result : listItem);
                this._renderPopupList();
                this._rawList =  this.popupListItems.slice();
            }
        },

        _cascadeAction: function () {
            if (this.model.cascadeTo) {
                var citem = this.model.cascadeTo.split(","), i;
                for (i = 0; i < citem.length; i++) {
                    if ($('#' + citem[i]).hasClass("e-dropdownlist")) {
                        this._doCascadeAction(citem[i], this, this.checkedStatus);
                    }
                    else {
                        $('#' + citem[i]).on("ejDropDownListcreate", { Obj: this, status: this.checkedStatus }, function (e) {
                            if (!ej.isNullOrUndefined(e.data.Obj.getValue()) && e.data.Obj.getValue() != "") {
                                e.data.Obj._doCascadeAction(this.id, e.data.Obj, e.data.status);
                            }
                        });
                    }
                }
            }
        },
        _doCascadeAction: function (id, parentObj, status) {
            parentObj._currentValue = parentObj._getField(parentObj.popupListItems[parentObj._activeItem], parentObj.mapFld._value);
            parentObj.selectDropObj = $('#' + id).ejDropDownList('instance');
            var args = { cascadeModel: parentObj.selectDropObj.model, cascadeValue: parentObj._currentValue, setCascadeModel:{}, requiresDefaultFilter: true };
            this._trigger("cascade", args);
            parentObj.selectDropObj._setCascadeModel = args.setCascadeModel;
            if (ej.isNullOrUndefined(parentObj[id])) {
                parentObj[id] = parentObj.selectDropObj._dataSource();
            }
            (ej.DataManager && parentObj[id] instanceof ej.DataManager) ?
                parentObj._cascadeOdataInit(parentObj[id], args.requiresDefaultFilter, status, args.cascadeQuery) :
            parentObj._cascadeJsonInit(parentObj.selectDropObj, parentObj[id], parentObj.mapFld._value, args.requiresDefaultFilter, status, args.cascadeQuery);
        },
        _cascadeOdataInit: function (_dSource, requiresFilter, status, cascadeQuery) {
            var proxy = this, queryPromise, tempQuery;
            proxy._dQuery = this.selectDropObj._getQuery().clone();
            tempQuery = proxy._dQuery.clone();
            requiresFilter ? tempQuery.where(proxy.mapFld._value, "equal", proxy._currentValue) : tempQuery = cascadeQuery;
            proxy.selectDropObj._addLoadingClass();
            if (!proxy._trigger("actionBegin", { requestFrom: "cascade" })) {
                queryPromise = _dSource.executeQuery(tempQuery);
                queryPromise.fail(function (e) {
                    proxy._changedSource = null;
                    proxy.selectDropObj.setModel({ dataSource: proxy._changedSource, enabled: false });
                    proxy._trigger("actionFailure", { e: e, requestFrom: "cascade" });
                }).done(function (e) {
                    proxy._trigger("actionSuccess", { e: e, requestFrom: "cascade" });
                    proxy._cascadeDataBind(proxy.selectDropObj, e.result, status);
                    proxy.selectDropObj._removeLoadingClass();
                }).always(function (e) {
                    proxy._trigger("actionComplete", { e: e, requestFrom: "cascade" });
                });
            }
        },

        _cascadeJsonInit: function (cascadeDropDownObj, _dSource, mapFld, requiresFilter, status, cascadeQuery) {           
            var tempQuery = requiresFilter ? ej.Query().where(mapFld, "==", this._currentValue) : cascadeQuery
            var changedSource = ej.DataManager(_dSource).executeLocal(tempQuery);
            this._cascadeDataBind(cascadeDropDownObj, changedSource, status);
        },

        _cascadeDataBind: function (cascadeDropDownObj, changedSource, status) {
            var cascadeVal  = cascadeDropDownObj.value();
            if ((this.model.showCheckbox && status) || (this.model.multiSelectMode != "none" && this.activeItem.hasClass("e-active"))) {
                this._changedSource = (!ej.isNullOrUndefined(this._changedSource)) ? this._changedSource.concat(changedSource) : changedSource;
            }
            else if (!this.model.showCheckbox && this.model.multiSelectMode == "none") this._changedSource = changedSource;
            else {
                for (var i = 0; i < changedSource.length; i++) {
                    if (this._isPlainType(changedSource) && this._isPlainType(this._changedSource)) this._changedSource.splice(this._changedSource.indexOf(changedSource[i]), 1);
                    else {
                        for (var j = 0; j < this._changedSource.length; j++) {
                            if (JSON.stringify(this._changedSource[j]) == JSON.stringify(changedSource[i]))
                                this._changedSource.splice(j, 1);
                        }

                    }
                }
                cascadeDropDownObj.setModel({ dataSource: null });
            }
            var cascadeValFn = cascadeDropDownObj.model.value;
            var cascadeModel = JSON.parse(JSON.stringify(cascadeDropDownObj.model)),enable;
            cascadeDropDownObj.setModel({ dataSource: this._changedSource, enabled: this._changedSource.length > 0 });
            if( !this._isSingleSelect() ) cascadeDropDownObj.selectItemByValue(cascadeVal);
            if (cascadeDropDownObj.model.showCheckbox || cascadeDropDownObj.model.multiSelectMode != "none") {
                $("input:hidden[id^='#'][name=" + cascadeDropDownObj._id + "]").remove();
            }
            
            if (!cascadeDropDownObj._setSelectedItem) {
                var selectProp = ["value", "text", "selectedIndex", "selectedIndices"];
                for (var m = 0; m < selectProp.length ; m++)
                    cascadeDropDownObj.model[selectProp[m]] = cascadeModel[selectProp[m]];
                cascadeDropDownObj.model["value"] = cascadeValFn;
                cascadeDropDownObj._finalize();                
            }            
            else {                                               
               cascadeDropDownObj.setModel(cascadeDropDownObj._setCascadeModel);
            }
            cascadeDropDownObj._setSelectedItem = true;
        },        

        _OnMouseEnter: function (e) {
            if (!this.model.enabled || this.model.readOnly ) return false;
            var targetEle;
            this.ultag.children("li").removeClass("e-hover");
            if ($(e.target).is("li:not('.e-category')")) { $(e.target).addClass("e-hover"); }
            if ($(e.target).hasClass("e-disable"))
                $(e.target).removeClass('e-hover');
            else if (e.target.tagName != "li") {
                targetEle = $(e.target).parents("li:not('.e-category')");
                $(targetEle).addClass("e-hover");
            }
            var activeItem;
            this.ultag.children("li:not('.e-category')").each(function (index) {
                if ($(this).hasClass("e-hover")) {
                    activeItem = index;
                    return false;
                }
            });
            this._activeItem = activeItem;
        },
        _OnMouseLeave: function (e) {
            if (!this.model.enabled || this.model.readOnly || this._readOnly) return false;
            this.ultag.children("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            this._uiInteract = true;
            if (!this.model.enabled || this.model.readOnly || this._readOnly) return false;
            if (this.model.enableFilterSearch && $(e.target).is("li") && $(e.target).hasClass('e-nosuggestion')) return false;
            else if (($(e.target).is("li") && !$(e.target).hasClass('e-disable')) || (!$(e.target).is("li") && !$(e.target).closest("li").hasClass('e-disable'))) {
                if (this._isSingleSelect()) {
                    this._enterTextBoxValue();
                    this._hideResult();
                } else {
                    if (this.model.showCheckbox) {
                        var liEle = e.target.nodeName === "LI" ? e.target : $(e.target).parents("li.e-hover"),
                        checkboxEle = $(liEle).find('.e-checkwrap')[0];
                        this._onCheckChange({ target: checkboxEle });
                    }
                    else {
                        var ele = $(e.target).is("li") ? e.target : $(e.target).closest("li")[0];
                        this._activeItem = $.inArray(ele, this._getLi());
                        if ($(ele).hasClass("e-active")) this._removeTextBoxValue();
                        else this._enterTextBoxValue();
                    }
                   
                }
            }
        },        

        _OnDocumentClick: function (e) {
            if (this.model && (!this.model.enabled || this.model.readOnly || this._readOnly)) return false;
            if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-ddl-popup").is(this.popupListWrapper) &&
                !$(e.target).is(this._visibleInput) && !$(e.target).parents(".e-ddl").is(this.wrapper)) {
                this._hideResult();
            }
            else if ($(e.target).is(this.inputSearch)) {
                this.inputSearch.focus();
            }
            else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-ddl-popup").is(this.popupListWrapper))
                this._preventDefaultAction(e);
        },

        _OnKeyPress: function (e) {
            if (this.model.enableIncrementalSearch && e.keyCode != 13) {
                this._OnTextEnter((ej.browserInfo().name == "mozilla") ? e.charCode : e.keyCode);
            }
            if (e.keyCode == 32) this._preventDefaultAction(e);
        },
        _OnTextEnter: function (from) {
            var proxy = this;
            this._incqueryString += String.fromCharCode(from);
            if (this._incqueryString.length > 0) {
                setTimeout(function () { proxy._incqueryString = ""; }, this.model.incrementalSearchDelay);
            }
            var list = this._getLi(), i, matchedElement = null,
            caseSence = this.model.caseSensitiveSearch,            
            str, queryStr = this._incqueryString,
            querylength = this._incqueryString.length, searchflag = false;

            if (!caseSence) queryStr = queryStr.toLowerCase();
            if (this._prevQueryString == queryStr) {
                for (var i= 0; i < this._matchedListItems.length; i++) {
                    if (($(this._matchedListItems[i]).hasClass("e-active")) || ((this.model.showCheckbox) && $(this._matchedListItems[i]).hasClass("e-hover"))) {
                        if (i == this._matchedListItems.length - 1)
                            matchedElement = this._matchedListItems[0];
                        else
                            matchedElement = this._matchedListItems[i + 1];
                        break;
                    }
                }
            }
            else if(!ej.isNullOrUndefined(list)) {
                this._matchedListItems = [];
                var selectedIndexVal = this.selectedIndex();
                var index;

                for (  var i = 0 ; i < list.length; i++)
                {
                    if (i != selectedIndexVal){
                    if (i == list.length || i == -1) { i = -1; }
                    if(selectedIndexVal == -1) {selectedIndexVal = list.length; i = 0;}
                    i == -1 ? index = 0 : index = i;
                    var item = list[index];
                    var text = $(list[index]).text();
                    text = caseSence ? text : text.toLowerCase();
                    if (text.substr(0, querylength) == queryStr) {
                        this._matchedListItems.push(list[index]);
                    }
                    }
               }
                this._prevQueryString = queryStr;
                matchedElement = this._matchedListItems[0];
                
            }
            if(!ej.isNullOrUndefined(matchedElement)) {
                this._activeItem = $.inArray( matchedElement, list );
                 if (this._isSingleSelect() && !ej.isNullOrUndefined(this.scrollerObj)){
                     this._enterTextBoxValue();
                     this.scrollerObj.setModel({ scrollTop: this._calcScrollTop('active') });
                }
                 else if (this._isPopupShown()) {
                     this._removeListHover();                      
                     this._addListHover();
                 } 
            }   
        },

        _selectItem: function (current) {
            if (!this._isSingle) this._clearTextboxValue();
            if(this.activeItem){
                this._setAttr(this.activeItem[0],{ "aria-selected": false});
            }
            this._activeItem = current;
            this._addListHover();
            this.wrapper.focus();
            this._enterTextBoxValue();
        },
        _focusItem: function (current) {
            this._removeListHover();
            this._activeItem = current;
            this._addListHover();
        },
        _selectFocusedItem: function (current) {
            this._focusItem(current);
            this._enterTextBoxValue();
        },
        
        _selectShiftDown: function (start, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            for (var n = start; n <= stop; n++) {
                if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
                    this._selectFocusedItem(n);
                }
            }
        },
        _selectShiftUp: function (start, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            for (var n = stop; n >= start ; n--) {
                if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
                    this._selectFocusedItem(n);
                }
            }
        },
        _selectShiftHome: function (current, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            if (current >= 0 && current <= this._listSize - 1) {
                if (current == 0) this._clearTextboxValue();
                else {
                    for (var n = current; n >= stop ; n--) {
                        if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
                            this._activeItem = n;
                            this._enterTextBoxValue();
                        }
                    }
                }
                this._activeItem = current;
                if (current == 0) this._enterTextBoxValue();
                this.scrollerObj.setModel({ "scrollTop": 0 });
            }
        },
        _selectShiftEnd: function (current, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            if (current <= this._listSize - 1) {
                if (current == stop) this._clearTextboxValue();
                else 
                for (var n = current; n <= stop; n++) {
                    if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
                        this._activeItem = n;
                        this._enterTextBoxValue();
                    }
                }
                this._activeItem = current;
                if (current == stop) this._enterTextBoxValue();
                this.scrollerObj.setModel({ "scrollTop": this.ultag.outerHeight() });
            }
        },


        _getLastFocusedLi: function () {
            return this._selectedIndices && this._selectedIndices.length > 0 ? this._selectedIndices[this._selectedIndices.length - 1] : null;
        },

        _getLastShiftFocusedLi: function (index, isDown) {
            var step = isDown ? index - 1 : index + 1;
            if ($.inArray(step, this._selectedIndices) < 0) {
                return index;
            }
            else {
                return this._getLastShiftFocusedLi(step, isDown);
            }
        },

        _shiftUp: function (current, step, isCtrl) {
            if (current == null || current < 0) {
                this._checkDisableStep(0, step, false, false, true);
            }
            else if (current > 0 && current <= this._listSize - 1) {

                var select = this._disableItemSelectUp(current - step)
                if (select != null) {
                    if (this._getLastFocusedLi() != null) {
                        if (this._selectedIndices.length > 1 && current - 1 == this._selectedIndices[this._selectedIndices.length - 2])
                            for (var s = 1; s <= step; s++) {
                                if (current - s == this._selectedIndices[this._selectedIndices.length - 2]) {
                                    this._activeItem = current + 1 -s;
                                    this._removeTextBoxValue();
                                    this._focusItem(current - s);
                                }
                                else break;
                            }
                        else {
                            var next = this._getLastShiftFocusedLi(this._getLastFocusedLi(), false);
                            this._selectShiftUp(select, next, isCtrl);
                        }
                    }
                    else {
                        this._moveUp(current, step, false);
                    }

                }

            }
        },

        _shiftDown: function (current, step, isCtrl) {
            if (current == null || current < 0) {
                this._checkDisableStep(-1, step, true, false, true);
            }
            else if (current < this._listSize - 1) {
                var select = this._disableItemSelectDown(current + step)
                if (select != null) {
                    if (this._getLastFocusedLi() != null) {
                        if (this._selectedIndices.length > 1 && current + 1 == this._selectedIndices[this._selectedIndices.length - 2]) {
                           for (var s = 1; s <= step; s++) {
                                if (current + s == this._selectedIndices[this._selectedIndices.length - 2]) {
                                    this._activeItem = current - 1 +s;
                                    this._removeTextBoxValue();
                                    this._focusItem(current + s);
                                }
                                else break;
                            }
                        }
                        else {
                            var start = this._getLastShiftFocusedLi(this._getLastFocusedLi(), true);
                            this._selectShiftDown(start, select, isCtrl);
                        }
                    }
                    else {
                        this._moveDown(current, step, false);
                    }
                }

            }
        },
        _moveUp: function (current, step, isMulti) {
            if (current == null || current <= 0) {
                this._checkDisableStep(0, step, false, isMulti);
            }
            else if (current > this._listSize - 1) {
                this._checkDisableStep(this._listSize - 1, step, false, isMulti);
            }
            else if (current > 0 && current <= this._listSize - 1) {
                this._checkDisableStep(current, step, false, isMulti);
            }
        },
        _moveDown: function (current, step, isMulti) {
            if (current == null || current < 0) {
                this._checkDisableStep(-1, step, true, isMulti);
            }
            else if (current == 0) {
                this._checkDisableStep(0, step, true, isMulti);
            }
            else if (current >= this._listSize - 1) {
                this._checkDisableStep(this._listSize - 1, step, true, isMulti);
            }
            else if (current < this._listSize - 1) {
                this._checkDisableStep(current, step, true, isMulti);
            }
        },
        _checkDisableStep: function (current, step, isdown, isMulti, shift) {
            var command = isdown ? "_disableItemSelectDown" : "_disableItemSelectUp";
            var index = isdown ? current + step : current - step;
            var select = this[command](index);
            if (select == null) {
                for (var i = step; i >= 0; i--) {
                    index = isdown ? current + i : current - i;
                    select = this[command](index);
                    if (select != null) break;
                }
            }
            if (select != null) {
                isMulti ? this._focusItem(select) : this._selectItem(select);
                if (shift && isMulti) this._enterTextBoxValue();
            }

        },
        _disableItemSelectDown: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0) {
                    return current;
                }
                else {
                    return this._disableItemSelectDown(current + 1);
                }
            }
            else return this._listSize - 1;
        },

        _disableItemSelectUp: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0) {
                    return current;
                }
                else {
                    if (current > 0) {
                        return this._disableItemSelectUp(current - 1);
                    }
                }
            }
        },

        _preventDefaultAction: function (e, stopBubble) {
            e.preventDefault ? e.preventDefault() : (e.returnValue = false);
            if (stopBubble) {
                e.stopPropagation ? e.stopPropagation() : (e.cancelBubble = true);
            }
        },

        _OnKeyDown: function (e) {
            this._uiInteract = true;
            if (this.model.enabled && !ej.isNullOrUndefined(this.popupListWrapper)) {
                this._itemId = null;
                var _popupListItems = this._getLi(), liH, popupH, activeitem, flag;
                this._listSize = _popupListItems.length;                
                popupH = this.popupList.height();
                liH = this.ultag.children("li").outerHeight();
                activeitem = Math.round(popupH / liH) != 0 ? Math.round(popupH / liH) : 5;
                this._isSingle = this._isSingleSelect();
                if (this._isSingle) {
                    switch (e.keyCode) {
                        case 38: /* up arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._hideResult();
                                break;
                            }
                        case 33: /* page up */
                            var step = e.keyCode == 33 ? activeitem : 1;
                            this._moveUp(this._activeItem, step);
                            this._preventDefaultAction(e,true);
                            break;
                        case 8:
                            this._preventDefaultAction(e);
                            break;
                        case 40: /* down arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._showResult();
                                break;
                            }
                        case 34: /* page down */
                            var step = e.keyCode == 34 ? activeitem : 1;
                            this._moveDown(this._activeItem, step);
                            this._preventDefaultAction(e,true);
                            break;
                        case 37 /* left arrow*/:
                            if (this.model.enableRTL) this._moveDown(this._activeItem, 1);
                            else this._moveUp(this._activeItem, 1);
                            this._preventDefaultAction(e);
                            break;
                        case 39 /* right arrow */:
                            if (this.model.enableRTL) this._moveUp(this._activeItem, 1);
                            else this._moveDown(this._activeItem, 1);
                            this._preventDefaultAction(e);
                            break;
                        case 9 /* Tab */:
                        case 27 /*ESC*/:
                            if (this._isPopupShown()) this._hideResult();
                            break;
                        case 35 /*End*/:
                            this._moveDown(this._listSize - 1, 0);
                            this._preventDefaultAction(e);
                            break;
                        case 36 /*Home*/:
                            var step = this._activeItem != null ? this._activeItem : this._listSize - 1;
                            this._moveUp(step, step);
                            this._preventDefaultAction(e);
                            break;
                    }
                }
                else {
                    switch (e.keyCode) {
                        
                        case 38: /* up arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._hideResult();
                            }
                            else if (e.shiftKey) {
                                this._shiftUp(this._activeItem, 1, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, 1, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                        case 33: /* page up */
                            if (e.shiftKey) {
                                this._shiftUp(this._activeItem, activeitem, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, activeitem, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                        case 8:
                            this._preventDefaultAction(e);
                            break;
                        case 40: /* down arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._showResult();
                            }
                            else if (e.shiftKey) {
                                this._shiftDown(this._activeItem, 1, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, 1, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;

                        case 34: /* page down */

                            if (e.shiftKey) {
                                this._shiftDown(this._activeItem, activeitem, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, activeitem, e.ctrlKey);
                            this._preventDefaultAction(e);
                            break;
                        case 37 /* left arrow*/:
                            if (this.model.enableRTL) this._moveDown(this._activeItem, 1, false);
                            else this._moveUp(this._activeItem, 1, false);
                            this._preventDefaultAction(e);
                            break;
                        case 39 /* right arrow */:
                            if (this.model.enableRTL) this._moveUp(this._activeItem, 1, false);
                            else this._moveDown(this._activeItem, 1, false);
                            this._preventDefaultAction(e);
                            break;
                        case 9 /* Tab */:
                        case 27 /*ESC*/:
                            if (this._isPopupShown()) this._hideResult();
                            break;
                        case 35 /*End*/:
                            if (e.shiftKey) {
                                this._selectShiftEnd(this._activeItem, this._listSize - 1, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, this._listSize, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                        case 36 /*Home*/:
                            var step = this._activeItem != null ? this._activeItem : this._listSize - 1;
                            if (e.shiftKey) {
                                this._selectShiftHome(this._activeItem, 0, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, step, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                    }
                }
            }
        },

        _OnKeyUp: function (e) {
            if (this.model.enabled && !ej.isNullOrUndefined(this.popupListWrapper)) {
                this._preventDefaultAction(e);
                var target = e.target;
                if (this._activeItem == null) {
                    this._activeItem = this._getLi().index(this.popupList.find("ol,ul").children("li.e-hover"));
                }
                if (this._trim(this._visibleInput.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                    this._hideResult();
                    return false;
                }

                switch (e.keyCode) {
                    case 38: break;
                    case 40: break;
                    case 37: break;
                    case 39: break;

                    case 20: break;
                    case 16: break;
                    case 17: break;
                    case 18: break;
                    case 35: break;
                    case 36: break;
                    case 144: break;
                    case 27: break;
                    case 9: break;

                    case 13 /*Enter*/:
                        if (!this._isSingle && this._isPopupShown() && (e.ctrlKey || e.shiftKey) && this._activeItem >= 0) 
                            this._selectAndUnselect();
                        else if (this._isPopupShown() && !e.ctrlKey && !e.shiftKey){
                            if(!ej.isNullOrUndefined(this.inputSearch)){
                                if(this.getSelectedItem().length == 0 || !this.listitems[0].classList.contains("e-active") && this._activeItem >= 0) {
                                    this.selectItemByIndex(this._activeItem);
                                    $(this.listitems[this._activeItem]).removeClass("e-hover");
                                }
                                else {		
                                    var focusedItems = this._getLastFocusedLi();
                                    if(this.model.multiSelectMode  != "none" || this.model.showCheckbox) {
                                        this.unselectItemByIndex(focusedItems);
                                        $(this.listitems[focusedItems]).removeClass("e-hover");
                                    }
                                }
                            }
                            this._hideResult();
                        }
                        else if (this._isPopupShown()) this._hideResult();
                        this._preventDefaultAction(e);
                        break;

                    case 32 /*spacebar*/:
                        if (this._isPopupShown() && this._isSingle) this._hideResult();
                        if (!this._isSingle && this._isPopupShown() && this._activeItem >= 0) {
                            this._selectAndUnselect();
                        }
                        this._preventDefaultAction(e);
                        break;
                    case 8 /*backspace*/:
                        if(this.model.multiSelectMode =="visualmode") this._deleteLastBox();                        
                        this._preventDefaultAction(e);
                        break;
                    case 46 /*Del*/:
                        if (this.model.multiSelectMode == "visualmode" || this.model.showCheckbox) {
                            this._deleteBox(this._ulBox.children("li.e-active"));
                            break;
                        }
                }
            }
        },

        _isSingleSelect: function () {
            return !this.model.showCheckbox && this.model.multiSelectMode == "none";
        },

        _selectAndUnselect: function () {
            if (this.model.showCheckbox) {
                this._isChecked(this._getActiveItem().find(".e-checkwrap")[0]) ?
                        this._removeTextBoxValue() : this._enterTextBoxValue();
            }
            else if (this.model.MultiSelectMode != "none") {
                this._getActiveItem().hasClass("e-active") ? this._removeTextBoxValue() : this._enterTextBoxValue();
            }
        },

        _targetFocus: function () {
            if (this.model.enabled && !this._isFocused) {
                if (!this._isWatermark)
                    this._hiddenSpan.css("display", "none");
                this.wrapper.addClass("e-focus e-popactive");
                this._isFocused = true;
                this._trigger("focusIn");
            }
        },

        _targetBlur: function () {
            if (this.model.enabled) {
                this._isFocused = false;
                this.wrapper.removeClass("e-focus e-popactive");
                this._setWatermark();
                this._trigger("focusOut");
            }
        },

        _getLocalizedLabels: function (property) {
            return this._localizedLabels[property] === undefined ? ej.DropDownList.Locale["en-US"][property] : this._localizedLabels[property]
        },
        _wireEvents: function () {
            this._on(this.wrapper, "focus", this._targetFocus);
            this._on(this.wrapper, "blur", this._targetBlur);
            this._on(this.wrapper, "keydown", this._OnKeyDown);
            !ej.isNullOrUndefined(this.popupList) && this._on(this.popupList, "keydown", this._OnKeyDown);
            !ej.isNullOrUndefined(this.popupList) && this._on(this.popupList, "keyup", this._OnKeyUp);
            this._on(this.wrapper, "keyup", this._OnKeyUp);
            !ej.isNullOrUndefined(this.popupList) && this._on(this.popupList, "keypress", this._OnKeyPress);
            this._on(this.wrapper, "keypress", this._OnKeyPress);
        },

        _unwireEvents: function () {
            this._off(this.wrapper, "focus", this._targetFocus);
            this._off(this.wrapper, "blur", this._targetBlur);
            this._off(this.wrapper, "keydown", this._OnKeyDown);
            !ej.isNullOrUndefined(this.popupList) && this._off(this.popupList, "keydown", this._OnKeyDown);
            !ej.isNullOrUndefined(this.popupList) && this._off(this.popupList, "keyup", this._OnKeyUp);
            this._off(this.wrapper, "keyup", this._OnKeyUp);
            !ej.isNullOrUndefined(this.popupList) && this._off(this.popupList, "keypress", this._OnKeyPress);
            this._off(this.wrapper, "keypress", this._OnKeyPress);
            $(window).off("resize", $.proxy(this._OnWindowResize, this));
        },

        _multiItemSelection: function (listItems, isAddItem) {
            if (!this._ulBox && this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            for (var i = 0; i < listItems.length; i++) {
                var index = isAddItem ? this._rawList.length - (listItems.length - i) : i;
                if (this._hasClass(listItems[i], "chkselect")) {
                    this._activeItem = index;
                    this._enterTextBoxValue();
                    this._removeClass(listItems[i], "chkselect");
                }
            }
            this._setWatermark();
        },
        _appendCheckbox: function (listItems, isAddItem) {
            if (!this._ulBox && this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            for (var i = 0; i < listItems.length; i++) {
                var index = isAddItem ? this._rawList.length - (listItems.length - i) : i,
                $checkbox = document.createElement("input"),
                $spanCheck = document.createElement("span");
                this._setAttr($checkbox, { type: "checkbox", name: "list" + index, "data-role": "none", id: this._id + "_" + "check" + index })
                    ._setClass($checkbox, "e-check-input")
                    ._setAttr($spanCheck, { name: "list" + index + "_wrap", "data-role": "none", id: this._id + "_" + "check" + index + "wrap", unselectable: "on", "aria-checked": false})
                    ._setClass($spanCheck, "e-checkwrap e-icon ");
                $spanCheck.appendChild($checkbox);
                listItems[i].insertBefore($spanCheck, listItems[i].childNodes[0]);
                if (this._hasClass(listItems[i], "chkselect")) {
                    this._activeItem = index;
                    this._enterTextBoxValue();
                    this._removeClass(listItems[i], "chkselect");
                }
            }
            this._setWatermark();
        },

        _onCheckChange: function (e) {
            this.checkChange = true;
            var curEle = e.target.nodeName === "INPUT" ? e.target.parentElement : e.target;
            this._activeItem = $.inArray($(curEle).parents("li")[0], this._getLi());
            if (!this._hasClass(curEle, "e-check-act")) {
                this._enterTextBoxValue(true);
            }
            else {
                this._removeTextBoxValue();
            }
            this.checkChange = false;
        },
        _isChecked: function (checkEle) {
            return (this._hasClass(checkEle, "e-check-act") && $(checkEle).children(".e-check-input")[0].checked == true);
        },
        _removeCheck: function () {
            this._getLi().find(".e-checkwrap").remove();
        },
        _resetCheck: function () {
            var getLi = this._getLi(), checkEle;
            getLi.find(".e-check-act").removeClass("e-check-act").attr("aria-checked",false);
            checkEle = getLi.find(".e-check-input:checked");
            for (var e = 0; e < checkEle.length; e++) {
                checkEle[e].checked = false;
            }
        }

    });
    ej.DropDownList.Locale = ej.DropDownList.Locale || {};
    ej.DropDownList.Locale["default"] = ej.DropDownList.Locale["en-US"] = {        
        emptyResultText: "No suggestions",  
        watermarkText:""
    };
    ej.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    };
    ej.VirtualScrollMode = {      
        /** Make virtual scrollbar in normal mode */
        Normal: "normal",
        /** Make virtual scrollbar in continuous mode*/
        Continuous: "continuous"
    };
    
})(jQuery, Syncfusion);;

/**
* @fileOverview Plugin to style the Dialog control
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDialog", "ej.Dialog", {
        _rootCSS: "e-dialog",

        element: null,
        _ignoreOnPersist: ["drag", "dragStart", "dragStop", "resizeStop", "resizeStart", "resize", "beforeClose", "beforeOpen", "collapse", "expand", "close", "open", "destroy", "create", "ajaxSuccess", "ajaxError", "contentLoad", "actionButtonClick", "enableResize"],

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        angular: {
            terminal: false
        },

        defaults: {

            showOnInit: true,

            closeOnEscape: true,

            //currently we have deprecated this API
            closeIconTooltip: "close",

            enableAnimation: true,

            allowDraggable: true,

            backgroundScroll: true,

            height: "auto",

            minHeight: 120,

            minWidth: 200,

            maxHeight: null,

            maxWidth: null,

            enableModal: false,

            position: { X: "", Y: "" },

            containment: null,

            enableResize: true,

            htmlAttributes: {},

            showHeader: true,

            showFooter: false,

            contentType: null,

            contentUrl: null,

            ajaxSettings: {

                type: 'GET',

                cache: false,

                data: {},

                dataType: "html",

                contentType: "html",

                async: true
            },

            title: "",

            width: 400,

            zIndex: 1000,

            cssClass: "",

            enableRTL: false,

            allowKeyboardNavigation: true,

            showRoundedCorner: false,

            actionButtons: ["close"],

            animation:{
                show:{
                    effect:"fade",
                    duration:400
                },
                hide:{
                    effect:"fade",
                    duration:400
                }
            },            

            tooltip:{
                close: "Close",
                collapse: "Collapse",
                restore: "Restore",
                maximize: "Maximize",
                minimize: "Minimize",
                expand: "Expand",
                unPin: "UnPin",
                pin: "Pin"
            },

            footerTemplateId: null,
            
            locale:"en-US",
            
            faviconCSS: null,

            content: null,

            target: null,

            enablePersistence: false,

            enabled: true,

            isResponsive: false,

            actionButtonClick: null,

            beforeClose: null,

            close: null,            

            expand: null,

            collapse: null,

            beforeOpen: null,

            open: null,

            drag: null,

            dragStart: null,

            dragStop: null,

            resize: null,

            resizeStart: null,

            resizeStop: null,

            contentLoad: null,

            ajaxSuccess: null,

            ajaxError: null,

            create: null,

            destroy: null,

            /*Deprecated*/            
            Close:null
        },

        dataTypes: {
            showOnInit: "boolean",
            closeOnEscape: "boolean",
            enableAnimation: "boolean",
            backgroundScroll: "boolean",
            position: "data",
            animation:"data",
            closeIconTooltip: "string",
            tooltip: "data",
            allowDraggable: "boolean",
            enableModal: "boolean",
            enableResize: "boolean",
            isResponsive: "boolean",
            showHeader: "boolean",
            showFooter: "boolean",
            title: "string",
            faviconCSS:"string",
            zIndex: "number",
            cssClass: "string",
            enablePersistence: "boolean",
            contentUrl: "string",
            contentType: "string",
            enableRTL: "boolean",
            enabled: "boolean",
            allowKeyboardNavigation: "boolean",
            showRoundedCorner: "boolean",
            locale: "string",
            htmlAttributes: "data",
            ajaxSettings: "data",
            actionButtons: "array",
			footerTemplateId: "string"
        },

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "closeIconTooltip": this._dialogClose.attr("title", options[key]); break;
                    case "tooltip": this._tooltipText(options[key]); break;
                    case "title":
                        this.model.title = options[key];
                        if (this._ejDialog.find("span.e-title").length <= 0) 
                            this._addTitleText();
                        else
                            this._ejDialog.find("span.e-title").html(options[key]);
                        this._updateCaptionWidth();
                        break;
                    case "width": this.model.width = options[key]; this._changeSize(); this._updateCaptionWidth(); options[key] = this.model.width; break;
                    case "height": this.model.height = options[key]; this._changeSize(); options[key] = this.model.height; break;
                    case "position": this.model.position = options[key]; this._dialogPosition(); break;
                    case "cssClass": this._changeSkin(options[key]); break;
                    case "showRoundedCorner": this.model.showRoundedCorner=options[key]; this._roundedCorner(options[key]); break;
                    case "contentType": { this.model.contentType = options[key]; this._appendContent(options[key]); break; }
                    case "enabled": { this.model.enabled = options[key]; this._enabledAction(options[key]); break; }
                    case "contentUrl": { this.model.contentUrl = options[key]; this._appendContent(this.model.contentType); break; }
					case "backgroundScroll":
						this.model.backgroundScroll = options[key]; 
						if (!this.model.backgroundScroll && this.model.enableModal) $("body").addClass("e-dialog-modal");
						else $("body").removeClass("e-dialog-modal");
						break;
                    case "content":
                    case "target": 
                        this._ejDialog.appendTo($(options[key]));
                        this.model.target = this.model.content = options[key];
                        this._dialogPosition();
                        break;
                    case "containment":
                        this._setDragArea(options[key]);
                        !ej.isNullOrUndefined(this._target) ? this._ejDialog.appendTo(this._target) : this._ejDialog.appendTo(document.body);
                        this.model.position.X = this.model.position.Y = "";
                        this._dialogPosition();
                        this.model.containment = options[key] = this._target;
                        this.model.enableModal && this._createOverlay();
                        this._dialogTitlebar.ejDraggable({ dragArea: this._target });
                        break;
                    case "locale":
					    this.model.locale = options[key];
                        this.localizedLabels = this._getLocalizedLabels(); 
                        this._setLocaleCulture(this.localizedLabels, true);
                        this._tooltipText(this.model.tooltip);
						if (this._ejDialog.find("span.e-title").length <= 0) 
                            this._addTitleText();
                        else
                            this._ejDialog.find("span.e-title").html(this.model.title);
                        this._updateCaptionWidth();                       				
                        break;
                    case "minHeight": { this.model.minHeight = options[key]; this._ejDialog.css("minHeight", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "minWidth": { this.model.minWidth = options[key]; this._ejDialog.css("minWidth", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "maxHeight": { this.model.maxHeight = options[key]; this._ejDialog.css("maxHeight", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "maxWidth": { this.model.maxWidth = options[key]; this._ejDialog.css("maxWidth", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "zIndex": { this._ejDialog.css('z-index', options[key]); break; }
                    case "faviconCSS":
                        this.model.faviconCSS = options[key]; this._favIcon();this._updateCaptionWidth(); break;
                    case "isResponsive": {
                        this.model.isResponsive = options[key];
                        this.model.isResponsive ? this._ejDialog.addClass("e-dialog-resize") : this._ejDialog.removeClass("e-dialog-resize");
                        this._wireResizing();
                        break;
                    }
                    case "allowDraggable": {
                        this.model.allowDraggable = options[key];
                        if (options[key])
                            this._enableDrag();
                        else {
                            this._dialogTitlebar.removeClass("e-draggable");
                        }
                        break;
                    }
                    case "enableResize": {
                        this.model.enableResize = options[key];
                        if (options[key])
                            this._enableResize();
                        else {
                            this._ejDialog.removeClass("e-resizable");
                            this._ejDialog.find(".e-resize-handle").remove();
                        }
                        this._reRenderScroller();
                        break;
                    }
                    case "showHeader": {
                        this.model.showHeader = options[key];
                        if (options[key]) {
                            this._renderTitleBar();
                            this._iconsRender(this.model.actionButtons);
                            if (this.model.faviconCSS) { this._dialogFavIcon = false; this._favIcon(); }
                            this._enableDrag();
                            if (!this._maximize) this._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? (this._ejDialog.outerHeight(true) - (this._dialogTitlebar.outerHeight(true))) : this._ejDialog.outerHeight(true) - 1 - (this._dialogTitlebar.outerHeight(true)), (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.width() : this._ejDialog.width() - 2);
                        }
                        else {
                            this._ejDialog.find(".e-titlebar").remove();
                            this._maximize ? this.refresh() : this._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.outerHeight(true) : this._ejDialog.outerHeight(true) - 1, (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.width() : this._ejDialog.width() - 2);
                        }
                        this._roundedCorner(this.model.showRoundedCorner);
                        if (this.model.showFooter) this._setContainerSize()._resetScroller();
                        break;
                    }
                    case "showFooter": {
                        this.model.showFooter = options[key];
                        if (options[key]) {
                            this._appendContent();
                            this._ejDialog.find(".e-resizable").remove();
                        }
                        else 
                            this._ejDialog.find(".e-footerbar").remove();
                        this._enableResize()._enableDrag()._sizeInPercent();
                        this._reRenderScroller();
                        this._setContainerSize()._resetScroller();
                        this._roundedCorner(this.model.showRoundedCorner);
                        break;
                    }
                    case "footerTemplateId": {
                        this.model.footerTemplateId = options[key];
                        if (this.model.showFooter) {
                            this._ejDialog.find(".e-footerbar").empty();
                            var templateContent = $('body').find("#" + this.model.footerTemplateId).html();
                            this._dialogFooterbar.append(templateContent);
                            this._enableResize();
                        }
                        break;
                    }
                    case "enableRTL":
                        {
                            this.model.enableRTL = options[key];
                            if (this.model.faviconCSS) this._favIcon();
                            if (options[key]) {
                                this._ejDialog.addClass("e-rtl");
                                this.iframe && this.iframe.contents().find("body").css("direction", "rtl");
                                if (this.scroller) 
                                    this._resetScroller();
                            } else {
                                this._ejDialog.removeClass("e-rtl");
                                this.iframe && this.iframe.contents().find("body").css("direction", "ltr");
                                if (this.scroller) 
                                    this._resetScroller();
                            }
                            break;
                        }
                    case "actionButtons":
                        {
                            if (!ej.isNullOrUndefined(this._dialogTitlebar) ){
                                this._removeAllIcons();
                                this._iconsRender(options[key]);
                            }
                            this.model.actionButtons = options[key];
                            this._updateCaptionWidth();
                            break;
                        }
                    case "enableModal": {
                        this._enableModal(options[key]);
                        break;
                    }
                    case "htmlAttributes": this._addAttr(options[key]); break;
                }
            }
        },


        _destroy: function () {
            if (this._overLay) this._overLay.remove();
            this._cloneElement.appendTo(this._ejDialog.parent());
            this._ejDialog.remove();
            if (this.model.enableAnimation) this._ejDialog.stop();
            this._cloneElement.removeClass("e-dialog");
            this.element = this._cloneElement;
            this._isOpen = false;
            $(window).off("resize", $.proxy(this._reSizeHandler, this));
        },

        keyConfigs: [37, 38, 39, 40],

        _init: function () {
			this._init=true;
            this._widthPercent = null;
            this._heightPercent = null;
            this._windowSize = { outerWidth: $(window).outerWidth(), outerHeight: $(window).outerHeight() };
            this._initSize = { width: this.model.width, height: this.model.height };
            this._sizeType = { width: isNaN(this.model.width) ? this.model.width.match(/px|%|auto/g)[0] : null, height: isNaN(this.model.height) ? this.model.height.match(/px|%|auto/g)[0] : null };
            this._isOpen = this._maximize = this._minimize = false;
            this.localizedLabels = this._getLocalizedLabels(); 
            this._setLocaleCulture(this.localizedLabels);
            this._setDimension();
            if (!this.model.close) this.model.close = this.model.Close;
            if (!this.model.target) this.model.target = this.model.content;
			this._responsive();
            this._renderControl();
            this._wireEvents();    
            this.scrObj= this._ejDialog.closest(".e-dialog.e-js").data("ejDialog")
            if(this.scrObj) this.scrObj._resetScroller(); 
			this.hidden=false;			
            this._init=false;
            this._keyNavigation=false;	
        },
		
		_responsive: function () {
            this.width = this.model.width;
            $(this.element).width(this.width);

            this.height = this.model.height;
            $(this.element).height(this.height);
            $(window).on("resize", $.proxy(this._resizeHandler, this));
        },
        
        _resizeHandler: function () {
            if (this._maximize) {
                this.width = $(this._dialogTitlebar).outerWidth();
                $(this.contentDiv).width(this.width);
                $(this.contentDiv).children().width(this.width);

                this.model.height = this.height = $(window).height();
                this._ejDialog.css({ height: this.height });
                this.contentDiv.height(this._ejDialog.height() - $(this._dialogTitlebar).outerHeight() - $(this._dialogFooterbar).outerHeight());
                this.element.height(this.contentDiv.height());
            }
			if(!ej.isNullOrUndefined(this.element) && !this._collapsible) this._resetScroller();
        },
       
        _setLocaleCulture:function(localizedLabels, isSetModel){
            //Deprecated closeIconTooltip locale
            if(this.defaults.closeIconTooltip===this.model.closeIconTooltip)
                this.model.closeIconTooltip=localizedLabels.closeIconTooltip;
			
                if (isSetModel) {	
                 	 this.model.tooltip= this.localizedLabels.tooltip ;
                     this.model.title= this.localizedLabels.title;			 
				} 
				if(JSON.stringify(this.model.tooltip) === JSON.stringify(this.defaults.tooltip))
                this.model.tooltip=localizedLabels.tooltip;  				
				if(this.model.title === this.defaults.title)
				this.model.title=localizedLabels.title;  
        },

        _setDragArea: function (value) {
            if (!ej.isNullOrUndefined(value))
            {
                if (typeof value == "string") {
                    if (value == "parent") this._target = $(this.element).parent();
                    if (value.toLowerCase() == "document") this._target = $(document);
                    if (value.toLowerCase() == "window") this._target = $(window);
                    else if ($(value).length > 0) this._target = $(value);
                } else if (typeof value == "object") {
                    if (value.length > 0) this._target = value;
                }
                else this._target = null;
            } else this._target = null;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy._ejDialog.addClass(value);
                else if (key == "disabled" && value == "disabled") { proxy.model.enabled = false; proxy._enabledAction(false); }
                else{
					if(proxy._ejDialog[0].hasAttribute("style")){
					 var newValue = proxy._ejDialog[0].getAttribute("style") + value;
					 proxy._ejDialog.attr(key, newValue);
					}					
				} 
            });
        },
        _tooltipText: function(data){
            $.extend(this.model.tooltip, data);
            if(!ej.isNullOrUndefined(this._dialogClose) && this._dialogClose.hasClass('e-close'))
                this._dialogClose.attr("title", this.model.tooltip.close);
            if (!ej.isNullOrUndefined(this._dialogCollapsible) && (data.collapse || data.expand)) {
                if (this._dialogCollapsible.hasClass('e-arrowhead-up'))
                    this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                if (this._dialogCollapsible.hasClass('e-arrowhead-down'))
                    this._dialogCollapsible.attr("title", this.model.tooltip.expand);
            }
            if (!ej.isNullOrUndefined(this._dialogMaximize) && (data.maximize || data.restore)) {
                if (this._dialogMaximize.hasClass('e-maximize'))
                    this._dialogMaximize.attr("title", this.model.tooltip.maximize);
                if (this._dialogMaximize.hasClass('e-restore'))
                    this._dialogMaximize.attr("title", this.model.tooltip.restore);
            }
            if (!ej.isNullOrUndefined(this._dialogMinimize) && (data.minimize || data.restore)) {
                if (this._dialogMinimize.hasClass('e-minus'))
                    this._dialogMinimize.attr("title", this.model.tooltip.minimize);
                if (this._dialogMinimize.hasClass('e-restore'))
                    this._dialogMinimize.attr("title", this.model.tooltip.restore);
            }
            if (!ej.isNullOrUndefined(this._dialogPin) && (data.pin || data.unPin)) {
                if (this._dialogPin.hasClass('e-unpin'))
                    this._dialogPin.attr("title", this.model.tooltip.pin);
                if (this._dialogPin.hasClass('e-pin'))
                    this._dialogPin.attr("title", this.model.tooltip.unPin);
            }
        },
        _renderControl: function () {
            this._cloneElement = this.element.clone();
            this.element.attr("tabindex", 0).attr({ "role": "dialog", "aria-labelledby": this.element.prop("id") + "_title" });
            this._ejDialog = ej.buildTag("div.e-dialog e-widget e-box " + this.model.cssClass + " e-dialog-wrap e-shadow#" + (this.element.prop("id") == "" ? "" : this.element.prop("id") + "_wrapper"), "", { display: "none", zIndex: this.model.zIndex }, { tabindex: 0 });
            if(this.model.isResponsive) this._ejDialog.addClass("e-dialog-resize");
            this.wrapper = this._ejDialog;
            this._addAttr(this.model.htmlAttributes);
            this._setDragArea(this.model.containment);
            if(!ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target)) var target = this._target;                
            else if(!ej.isNullOrUndefined(this.model.target)) var target = this.model.target;
            var wrapperTarget = !ej.isNullOrUndefined(target) ? target : document.body;
            var oldWrapper = $(wrapperTarget).find("#" + this._id + "_wrapper").get(0);
            if (oldWrapper) $(oldWrapper).remove();
            this._ejDialog.appendTo(wrapperTarget);
            if (this.model.enableRTL) this._ejDialog.addClass("e-rtl");
            if (this.model.showHeader) {
                this._renderTitleBar();
                this._iconsRender(this.model.actionButtons);
                if (this.model.faviconCSS) this._favIcon();
            }
            this._appendContent(this.model.contentType);
            this._enableResize()._enableDrag()._setSize();
			if(this.model.height != "auto") this._sizeInPercent();
            if (this.model.contentType != "ajax"){                                                                  
                if (this.model.showOnInit && this.open()) {
                    this._setContainerSize()._resetScroller();
                }
                else this._setHiddenDialogSize();
            }
            this._roundedCorner(this.model.showRoundedCorner);
            this._enabledAction(this.model.enabled);
            if (this._sizeType.width == "auto") this._maxWidth = this.model.width;
            if (this._sizeType.height == "auto") this._maxHeight = this.model.height;
        },

        _setContainerSize: function () {
            if (this.model.height != "auto") {
                var cntHeight = this._ejDialog.outerHeight() - ((this.model.showHeader)? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0)  + ((this.model.showFooter)? $(this._ejDialog.find("div.e-footerbar")).outerHeight(true) : 0) - 1;
                this.contentDiv.height(cntHeight);
                this.element.outerHeight(cntHeight);
            }
            return this;
        },

        _changeSize: function () {
            this._initSize = { width: this.model.width, height: this.model.height };
            this._sizeType.width = isNaN(this.model.width) ? this.model.width.match(/px|%|auto/g) : null;
            this._sizeType.height = isNaN(this.model.height) ? this.model.height.match(/px|%|auto/g) : null;
            this._setSize()._sizeInPercent()._setContainerSize()._resetScroller();
        },

        _enableDrag: function () {
            if (this.model.allowDraggable && this.model.showHeader) {
                this._dialogTitlebar.addClass("e-draggable");
                this._dragDialog();
            }
            return this;
        },

        _enableResize: function () {
            if (this.model.enableResize) {
                this._ejDialog.addClass("e-resizable");
                var resizeDiv = ej.buildTag("div.e-icon e-resize-handle");
                if (this.model.showFooter) 
                    resizeDiv.appendTo(this._dialogFooterbar);
                else
                    resizeDiv.appendTo(this._ejDialog);
                this._resizeDialog();
            }
            return this;
        },


        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this._ejDialog.removeClass(this.model.cssClass).addClass(skin);
            }
        },
        _enableModal: function (value) {
            if (value) this._isOpen && this._createOverlay();
            else if (this._overLay) this._overLay.remove();
        },

        _enabledAction: function (flag) {
            if (flag) {
                this._ejDialog.removeClass("e-disable");
                this.wrapper.children(".e-disable-overlay").remove();
                if (!ej.isNullOrUndefined(this.scroller))
                    this.scroller.enable();
            }
            else {
                this._ejDialog.addClass("e-disable");
                ej.buildTag("div.e-disable-overlay").appendTo(this.wrapper);
                if (!ej.isNullOrUndefined(this.scroller))
                    this.scroller.disable();
            }
        },

        _renderTitleBar: function () {
            this._elementTitle = this.element.attr("title");
            if (typeof this._elementTitle !== "string")
                this._elementTitle = "";
            this.model.title = this.model.title || this._elementTitle;
            this._dialogTitlebar = ej.buildTag("div#" + this.element.prop("id") + "_title.e-titlebar e-header").prependTo(this._ejDialog);
            this._addTitleText();
        },

        _renderFooterBar: function () {
            this._dialogFooterbar = ej.buildTag("div#" + this.element.prop("id") + "_foot.e-footerbar e-js").appendTo(this._ejDialog);
        },

        _addTitleText: function () {
            if (this.model.title) 
                this._titleText = ej.buildTag("span.e-title", this.model.title).prependTo(this._dialogTitlebar);
            return this;
        },
        _updateCaptionWidth: function () {
            var addWidth=this.model.faviconCSS && !ej.isNullOrUndefined(this._dialogFavIcon)?this._dialogFavIcon.outerWidth():0;
			if(this._titleText && !ej.isNullOrUndefined(this._dialogTitlebar))
			    this._titleText.css("max-width", (this._dialogTitlebar.width() - 20 - (this._dialogTitlebar.find(".e-dialog-icon").width() * this._dialogTitlebar.find(".e-dialog-icon").length) - addWidth));
			return this;
        },
        _iconsRender: function (iconArray) {
            for (var icon = 0; icon < iconArray.length; icon++) {
                switch ((ej.browserInfo().name == "msie" && ej.browserInfo().version <= 8) ? $.trim(iconArray[icon]) : iconArray[icon].trim()) {
                    case "close": {
                        this._closeIcon();
                        break;
                    }
                    case "collapse":
                    case "collapsible": {
                        this._collapsibleIcon();
                        break;
                    }
                    case "maximize": {
                        this._maximizeIcon();
                        break;
                    }
                    case "minimize": {
                        this._minimizeIcon();
                        break;
                    }
                    case "pin": {
                        this._pinIcon();
                        break;
                    }
                    default: {
                        this._customIconsRender(iconArray[icon]);
                        break;
                    }
                }
            }
        },

        _customIconsRender: function (icon) {
            this._customIcon = ej.util.buildTag("div#" + this.element[0].id + "_" + icon + "button.e-dialog-icon e-icon e-" + icon, null, null).attr('tabIndex', '0').attr('title', icon);
            this._customIcon.appendTo(this._dialogTitlebar);
            this._on(this._customIcon, "touchstart click", this._iconClick);
        },

        _iconClick: function (event) {
            
            if (!this.element.hasClass("e-disable")) {
                var args = {
                    cancel: false,
                    buttonID: $(event.target).attr("id"),
                    event: event.type,
                    model: this.model,
                    currentTarget: event.currentTarget.title
                }
                this._trigger("actionButtonClick", args);
            }
        },

        _removeAllIcons: function () {
            this._dialogTitlebar.find("div.e-dialog-icon").remove();
        },

        _appendContent: function (contentType) {
            this.contentDiv = ej.isNullOrUndefined(this.contentDiv) ? ej.buildTag("div.e-dialog-scroller") : this.contentDiv;
            this.element.removeAttr("title").addClass("e-widget-content e-box");
            var proxy = this;
            if (!ej.isNullOrUndefined(this.model.contentUrl) && !ej.isNullOrUndefined(contentType)) {
                if (contentType == "ajax") {
                    this.model.ajaxSettings.url = this.model.contentUrl;
                    this._sendAjaxOptions(this.element, this.model.ajaxSettings.url);
                }
                else if (contentType == "iframe") {
                    if (this.element.children('.e-iframe').length > 0) {
                        this.iframe = this.element.find('iframe.e-iframe');
                        this.iframe.attr('src', this.model.contentUrl);
                    }
                    else {
                        this.iframe = ej.buildTag("iframe.e-iframe", "", { width: "100%", height:"100%" }, { scrolling: "auto", frameborder: 0, src: this.model.contentUrl });
                        this.element.appendTo(this.contentDiv).append(this.iframe).show();
                    }
                    if (this.model.enableRTL) {
                        $(this.iframe).load(function () {
                            proxy.iframe.contents().find("body").css("direction", "rtl");
                        });
                    }
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else if (contentType == "image") {
                    var img = ej.buildTag("img.e-images", "", "", { src: this.model.contentUrl });
                    this.element.append(img).show().appendTo(this.contentDiv);
                    $(img).on("load", function () {
                        proxy._dialogPosition();
                    });
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else
                    this.element.show().appendTo(this.contentDiv);
            }
            else {
				this.dialogIframeContent = this.element.children().find('iframe').contents()[0];
				if (!ej.isNullOrUndefined(this.dialogIframeContent)) {
				   this.element.show().appendTo(this.contentDiv).find('iframe').append(this.dialogIframeContent.lastChild);
				}
				else
					this.element.show().appendTo(this.contentDiv);
			}
            if (this._ejDialog.find("div.e-resize-handle").length > 0) {
                if (this._ejDialog.find(".e-footerbar").length == 0)
				this.contentDiv.insertBefore(this._ejDialog.find("div.e-resize-handle"));
			}
			else {
				var dialogIframeContent = this.element.children().find('iframe').contents()[0];
				if (!ej.isNullOrUndefined(dialogIframeContent)) {
                    this.contentDiv.appendTo(this._ejDialog);
					var getid = $("#"+this.contentDiv.find('iframe').attr('id'));
					$(getid[0].contentDocument.lastChild).remove();
				    getid[0].contentDocument.appendChild(dialogIframeContent);
					if(ej.browserInfo().name == "mozilla")
					setTimeout(function () {
						$(getid[0].contentDocument.lastChild).remove();
				        getid[0].contentDocument.appendChild(dialogIframeContent);
                    },500);
				}
				else {
					if(this._ejDialog.find(".e-footerbar").length == 0)
					this.contentDiv.appendTo(this._ejDialog);
				    else
                    this.contentDiv.insertBefore(this._dialogFooterbar);
				     }
				}
            if (this.model.showFooter && this._ejDialog.find(".e-footerbar").length == 0) {
                this._renderFooterBar();
                if (this.model.footerTemplateId != null) {
                    var templateContent = $('body').find("#" + this.model.footerTemplateId).html();
                    this._dialogFooterbar.append(templateContent);
                }
            }
        },

        _roundedCorner: function (value) {
            this._ejDialog[(value ? "addClass" : "removeClass")]('e-corner');
            this.contentDiv.removeClass('e-dialog-top e-dialog-bottom e-dialog-content');
            if (this.model.showRoundedCorner) {
                this.model.showHeader && !this.model.showFooter ? this.contentDiv.addClass('e-dialog-bottom') : !this.model.showHeader && this.model.showFooter ? this.contentDiv.addClass('e-dialog-top') : !this.model.showHeader && !this.model.showFooter ? this.contentDiv.addClass('e-dialog-content') : true;
            }
        },

        _reRenderScroller: function () {
            if (this.scroller != undefined) {
                    this.scroller.refresh(true);
                if (!this.model.enableRTL) {
                    if ((this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && this.model.enableResize) {
                        if (this.model.showFooter) 
                            var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(), padngSpace = 0, resizeHandleSize = 0;
                        else
                            var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(), padngSpace = 2, resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerHeight();
	                    if (Math.floor(this.contentDiv.outerHeight()) === Math.floor(this.scroller._vScrollbar.model.height + 1)) {
                            this.scroller._vScrollbar.model.height -= resizeHandleSize + padngSpace;
                            this.scroller._vScrollbar._scrollData.handle -= resizeHandleSize;
                            this.scroller._vScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
                            this.scroller._vScrollbar._updateLayout(this.scroller._vScrollbar._scrollData);
                            this.scroller._vScrollbar.element.find('> div.e-vscroll').height(height - resizeHandleSize - padngSpace);
                        }
                    }
                    if (!(this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && (this.scroller._hScrollbar && this.scroller._hScrollbar._scrollData) && this.model.enableResize) {
                        if (this.model.showFooter) 
                            var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(), padngSpace = 0, resizeHandleSize = 0;
                        else
                            var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(), padngSpace = 2, resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerWidth();
                        this.scroller._hScrollbar.model.width -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._scrollData.handle -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._updateLayout(this.scroller._hScrollbar._scrollData);
                        this.scroller._hScrollbar.element.find('> div.e-hscroll').width(width - resizeHandleSize - padngSpace);
                    }
                }
            }
        },       

        _dialogMaxZindex: function () {
            var parents = this.element.parents(), bodyEle, contEle;
            bodyEle = $('body').children();
            $(bodyEle).each(function (i, ele) { parents.push(ele); });
            contEle = $(this.model.target).children();
            $(contEle).each(function (i, ele) { parents.push(ele); });
            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },

        _setZindex: function () {
            var zindex = this._dialogMaxZindex();
            if (this.model.zIndex <= zindex)
                this._ejDialog.css({ zIndex: zindex + 1 });
        },

        _createOverlay: function () {
            var zindex = this._ejDialog.css('zIndex'), target, element, position;
            !ej.isNullOrUndefined(this._overLay) && this._overLay.remove();
            if (!this.model.backgroundScroll) $("body").addClass("e-dialog-modal");
            this._overLay = ej.buildTag("div#" + this.element.attr("id") + "_overLay.e-overlay", "", { zIndex: zindex - 1 });
			$(this._overLay).addClass("e-widget");
            if (!ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target)) target = this._target;
            else if (!ej.isNullOrUndefined(this.model.target)) target = this.model.target;
            this._overLay.appendTo(!ej.isNullOrUndefined(target) ? target : document.body);
            var position = !ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target) ? "absolute" : "fixed";
            var left =(ej.isNullOrUndefined(target) || position=="fixed") ? 0 : $(target).css('position').toLowerCase() != "static" ? 0 : $(target).offset().left;
            var top = (ej.isNullOrUndefined(target) || position=="fixed") ? 0 : $(target).css('position').toLowerCase() != "static" ? 0 : $(target).offset().top;
            this._overLay.css({ top: top, left: left, position: position });
        },

        _sendAjaxOptions: function (content, link) {
            //load waiting popup
            content.addClass("e-load");
            var proxy = this;
            var curTitle = this.model.title;
            var hrefLink = link;
            var ajaxOptions = {
                "success": function (data) {
                    try { proxy._ajaxSuccessHandler(data, content, link, curTitle); }
                    catch (e) { }
                },
                "error": function (e) {
                    try { proxy._ajaxErrorHandler({ "status": e.status, "responseText": e.responseText, "statusText": e.statusText }, content, link, curTitle); }
                    catch (e) { }
                },
                "complete": function () {
                    try {
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        if (!proxy.model.showOnInit) proxy._setHiddenDialogSize();
                    } catch (e) {}
                }
            };
            $.extend(true, ajaxOptions, this.model.ajaxSettings);
            this._sendAjaxRequest(ajaxOptions);
        },

        _setHiddenDialogSize: function () {
            if (!this._isOpen) {
                this._ejDialog.css({ "display": "block", "visibility": "hidden" });
                this._setContainerSize()._resetScroller();
                this._ejDialog.css({ "display": "none", "visibility": "" });
            }
        },

        _sendAjaxRequest: function (ajaxOptions) {
            $.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.success,
                error: ajaxOptions.error,
                beforeSend: ajaxOptions.beforeSend,
                complete: ajaxOptions.complete
            });
        },

        _ajaxSuccessHandler: function (data, content, link, curTitle) {
            content.removeClass("e-load");
            content.html(data).addClass("e-dialog-loaded").appendTo(this._ejDialog);
            content.appendTo(this.contentDiv);
            this._dialogPosition();
            if (this.model.showOnInit)
                this.open();
            this._trigger("ajaxSuccess", { data: data, url: link });
        },

        _ajaxErrorHandler: function (data, content, link, curTitle) {
            content.addClass("e-dialog-loaded").appendTo(this.contentDiv);
            this._dialogPosition().open();
            this._trigger("ajaxError", { data: data, url: link });
        },
        _closeIcon: function () {
            this._dialogClose = ej.util.buildTag("div#" + this.element[0].id + "_closebutton.e-dialog-icon e-icon e-close",null,null).attr('tabIndex','0');            
            if(this.model.closeIconTooltip == "close" && this.model.tooltip.close == "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            else if(this.model.closeIconTooltip != "close" && this.model.tooltip.close == "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.closeIconTooltip);
            else if(this.model.closeIconTooltip == "close" && this.model.tooltip.close != "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            else   this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            this._on(this._dialogClose, "touchstart click", this._closeClick);
        },
		
        _collapsibleIcon: function () {            
            this._dialogCollapsible = ej.util.buildTag("div#" + this.element[0].id + "_collapsbutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0');             
            if (this._collapsible) {
                this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.expand).addClass("e-arrowhead-down").removeClass("e-arrowhead-up");
            }
            else {
                this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.collapse).addClass("e-arrowhead-up").removeClass("e-arrowhead-down");
            }
            this._on(this._dialogCollapsible, "touchstart click", this._collapsibleClick);
        },

        _maximizeIcon: function () {
            this._dialogMaximize = ej.util.buildTag("div#" + this.element[0].id + "_maximizebutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0'); 
            if (this._maximize) {
                this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.restore).addClass("e-restore").removeClass("e-maximize");
            }
            else {
                this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.maximize).addClass("e-maximize").removeClass("e-restore");
            }
            this._on(this._dialogMaximize, "touchstart click", this._maximizeClick);
        },

        _minimizeIcon: function () {
            this._dialogMinimize = ej.util.buildTag("div#" + this.element[0].id + "_minimizebutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0');           
            if (this._minimize) {
                this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.restore).addClass("e-restore").removeClass("e-minus");
            }
            else {
                this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.minimize).addClass("e-minus").removeClass("e-restore");
            }
            this._on(this._dialogMinimize, "touchstart click", this._minimizeClick);
        },

        _pinIcon: function () {
            this._dialogPin = ej.util.buildTag("div#" + this.element[0].id + "_pinbutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0'); 
            this._dialogPin.appendTo(this._dialogTitlebar).attr("title", this.dialogPin ? this.model.tooltip.unPin : this.model.tooltip.pin).addClass(this.dialogPin ? "e-pin" : "e-unpin").removeClass(this.dialogPin ? "e-unpin" : "e-pin");
            this._on(this._dialogPin, "touchstart click", this._pinClick);
        },

        _favIcon: function () {
            if (!this._dialogFavIcon) {
                this._dialogFavIcon = ej.util.buildTag("div.e-dialog-favicon", "", {}, { style: "float:"+ (this.model.enableRTL?"right":"left") });
                var span = ej.util.buildTag("span.e-dialog-custom", "", {}, { role: "presentation" });
                span.appendTo(this._dialogFavIcon);
                this._dialogFavIcon.appendTo(this._dialogTitlebar);
            }
            else 
                span = this._dialogFavIcon.find("span").removeClass().addClass("e-dialog-custom");
            if (!this.model.faviconCSS) this._dialogFavIcon.remove();
            else span.addClass(this.model.faviconCSS); this._dialogFavIcon.css("float", (this.model.enableRTL ? "right" : "left"));
        },

        _minMaxValidation: function () {
            var _minWidth = parseInt(this.model.minWidth), _minHeight = parseInt(this.model.minHeight), _maxWidth = parseInt(this.model.maxWidth), _maxHeight = parseInt(this.model.maxHeight),_width = parseInt(this.model.width), _height = parseInt(this.model.height), parentObj = this._getParentObj();
            if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
                _minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
            if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
                _minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
            if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
                _maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
            if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
                _maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
			if (isNaN(this.model.width) && (this.model.width.indexOf("%") > 0))
                _width = this._convertPercentageToPixel(parentObj.innerWidth(), _width);
            if (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0))
                _height = this._convertPercentageToPixel(parentObj.innerHeight(), _height);
            if (_maxWidth && _width > _maxWidth || _minWidth && _width < _minWidth) {
                if (_width > _maxWidth) this.model.width = _maxWidth;
                else this.model.width = _minWidth;
            }
            if (_maxHeight && _height >_maxHeight || _minHeight && _height< _minHeight) {
                if (_height > _maxHeight) this.model.height = _maxHeight;
                else this.model.height = _minHeight;
            }
			 
        },

        _setSize: function () {
            var mdl = this.model;
            this._minMaxValidation();
            this._ejDialog.css({ width: mdl.width, minWidth: mdl.minWidth, maxWidth: mdl.maxWidth });
            this._ejDialog.css({ height: mdl.height, minHeight: mdl.minHeight, maxHeight: mdl.maxHeight });
            this._dialogPosition();
            return this;
        },

        _resetScroller: function () {		
			this.element.css({ "height": "auto", "max-width": "", "max-height": "", "width": "" });
            var scrHeight = this._ejDialog.outerHeight(true) - ((this.model.showHeader)? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0)-((this.model.showFooter)? $(this._ejDialog.find("div.e-footerbar")).outerHeight(true) : 0), eleHeight;
            var scrModel = { width: (this.contentDiv.css('border-width') == "0px" || this.contentDiv.css('border-left-width') == "0px") ? Math.round(this._ejDialog.width()) : Math.round(this._ejDialog.width() - 2), enableRTL: this.model.enableRTL, height: (this.contentDiv.css('border-width') == "0px") ? scrHeight : scrHeight - 1, enableTouchScroll: false }; // 2px border width
            if ((this.model.height == "auto") && (this.element.height() < this.model.maxHeight || !this.model.maxHeight) && !this._maximize)
                scrModel.height = "auto";
            if (this.model.width == "auto" && !this._maximize)
                scrModel.width = this.model.width;
            this.contentDiv.ejScroller(scrModel);
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
            this._padding = parseInt($(this.element).css("padding-top")) + parseInt($(this.element).css("padding-bottom"));
            if(($(this._ejDialog).css("display"))=="none"){
				  this.hidden=true;         
                  this._ejDialog.css({"display":"block"}); 
			}		
			if (!ej.isNullOrUndefined(this.contentDiv.height()) && this.contentDiv.height() > 0) {
                if (!ej.isNullOrUndefined(this.scroller))
                    if (!this.scroller._hScrollbar && this.scroller._vScrollbar)
                        eleHeight = this.contentDiv.outerHeight();
                    else if (this.scroller._hScrollbar)
                         eleHeight = this.contentDiv.outerHeight() - this.scroller.model.buttonSize;
                     else  eleHeight = this.contentDiv.outerHeight();
                 else
                    eleHeight = this.contentDiv.outerHeight() - this._padding;
                if ((this.model.height != "auto" && this.model.height != "100%"))
                    this.element.css({ "height": eleHeight-1 });
                else
                    this.element.css("height", this.model.height);
                if ((this.model.height == "auto" || this.model.height == "100%") && !this.scroller._vScrollbar)
                    this.element.css({ "min-height": this.model.minHeight -((this.model.showHeader)? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0)});
                if (!this.scroller._vScrollbar && (this.model.width != "auto" && this.model.width != "100%"))
                    this.element.outerWidth((this.contentDiv.css('border-width') == "0px" || this.contentDiv.css('border-left-width') == "0px") ? this._ejDialog.width() : this._ejDialog.width() - 2);
                else if (!this.scroller._vScrollbar)
                    this.element.css("width", this.model.width);
                this.element.css({"max-width": this.model.maxWidth, "max-height": this.model.maxHeight });
            }
			if(this.hidden) this._ejDialog.css({"display":"none"});					
			this.hidden=false;
        },

        _updateScroller: function (height, width) {
            this.contentDiv.ejScroller({ width: width, height: height, enableRTL: this.model.enableRTL, enableTouchScroll: false });
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
			this._changeSize();
        },

        _dragDialog: function () {
            var proxy = this;
            var pos = this._ejDialog.parents(".e-dialog-scroller");
            this._dialogTitlebar.ejDraggable({
                handle: ".e-titlebar",
                cursorAt: { top: 0, left: 0 },
                dragArea: proxy._target,
                dragStart: function (event) {
					event.element.attr('aria-grabbed', true);
                    proxy._clickHandler();
                    if (proxy.dialogPin || !proxy.model.allowDraggable || !proxy.model.enabled) {
                        event.cancel = true;
                        return false;
                    }
                    if (proxy._trigger("dragStart", { event: event })) {
                        event.cancel = true;
                        return false;
                    }
                },
                drag: function (event) {
                    proxy._trigger("drag", { event: event });
                },
                dragStop: function (event) {
                    proxy._ejDialog.focus();
					event.element.attr('aria-grabbed', false);
                    if (proxy.element.find("> .e-draggable.e-titlebar")) {
                       var dragobject = $("#" + proxy.element.find("> .e-draggable.e-titlebar").attr("id")).data("ejDraggable");
                        if (dragobject)
                            dragobject.option("cursorAt", proxy.element.offset());
                    }
                    var pos = this.helper.offsetParent().offset();
                    proxy._trigger("dragStop", { event: event });
                    proxy.model.position.X = ej.isNullOrUndefined(this.position.left) ? parseInt(this.helper.css('left')) : this.position.left - [pos.left + parseFloat(this.helper.offsetParent().css('border-left-width'))];
                    proxy.model.position.Y = ej.isNullOrUndefined(this.position.top) ? parseInt(this.helper.css('top')) : this.position.top - [pos.top + parseFloat(this.helper.offsetParent().css('border-top-width'))];
                    proxy._positionChanged = true;
                    proxy.dlgresized = true;
                },
                helper: function (event) {
                    return $(proxy._ejDialog).addClass("dragClone");
                }
            });
            return this;
        },

        _resizeDialog: function () {
            if (!this.model.enableResize)  return;
            var proxy = this, started = false, parentObj;
            var _minWidth = parseInt(this.model.minWidth), _minHeight = parseInt(this.model.minHeight);
            var _maxWidth = parseInt(this.model.maxWidth), _maxHeight = parseInt(this.model.maxHeight);
            parentObj = this._getParentObj();
            if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
                _minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
            if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
                _minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
            if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
                _maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
            if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
                _maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
            this._ejDialog.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: _minHeight,
                    minWidth: _minWidth,
                    maxHeight: _maxHeight,
                    maxWidth: _maxWidth,
                    handle: "e-widget-content",
                    resizeStart: function (event) {
                        proxy.dlgresized=true;
                        if (!proxy.model.enabled)
                            return false;
                        !started && proxy._trigger("resizeStart", { event: event });
                        started = true;
                        proxy.model.position = { X: proxy._ejDialog.css("left"), Y: proxy._ejDialog.css("top") };
                        proxy._dialogPosition();
                    },
                    resize: function (event) {
                        proxy.dlgresized=true;
                        var reElement = $(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = $(reElement).outerHeight();
                        proxy.model.width = $(reElement).outerWidth();
                        proxy._setSize();
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        proxy._updateCaptionWidth();
                        proxy._trigger("resize", { event: event });
                        proxy._sizeType = { width: "px", height: "px" };
                        if(this.scrObj) this.scrObj._resetScroller();                      
                    },
                    resizeStop: function (event) {
                        proxy.dlgresized=true;
                        proxy._ejDialog.focus();
                        proxy._sizeInPercent();
                        var reElement = $(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = $(reElement).outerHeight();
                        proxy.model.width = $(reElement).outerWidth();
                        proxy._setSize();
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        started && proxy._trigger("resizeStop", { event: event });
                        started = false;
                        proxy._setDimension();
                    },
                    helper: function (event) {
                        return $(proxy._ejDialog);
                    }
                });
            return this;
        },

        _dialogPosition: function () {
            if (this._ejDialog.parents("form").length > 0 && ej.isNullOrUndefined(this.model.containment) && ej.isNullOrUndefined(this.model.target)) {
                this._ejDialog.appendTo(this._ejDialog.parents("form"));
            }
            if (this.model.position.X != "" || this.model.position.Y != "") {
                this._ejDialog.css("position", "absolute");
                if(ej.isNullOrUndefined(this.model.target) && ej.isNullOrUndefined(this.model.containment)) {
                this._ejDialog.css("left", this.model.position.X);
                this._ejDialog.css("top", this.model.position.Y);
				}
				else {
					  var containerEle=ej.isNullOrUndefined(this.model.containment)?this.model.target:this.model.containment;
					  if (this.dlgresized || this._keyNavigation){
                         this._ejDialog.css("left", this.model.position.X);
                         this._ejDialog.css("top", this.model.position.Y);                   
                                    }
                      else{
                      this._ejDialog.css("left", $(containerEle).offset()["left"]+ parseInt(this.model.position.X));
					  this._ejDialog.css("top", $(containerEle).offset()["top"]+ parseInt(this.model.position.Y));
				}
            }
            }
            else {
                this._centerPosition();
            }
            return this;
        },
        _centerPosition:function(){
            var x = 0, y = 0;
            if (!ej.isNullOrUndefined(this.model.target) ||!ej.isNullOrUndefined(this._target) && !$(this._target).is($(document)) && !($(this._target).is($(window)))) {
                var $content = !ej.isNullOrUndefined(this._target) ? $(this._target) : $(this.model.target);
                if ($content.css("position") == 'static') {
                    var parentOffset = $content.offsetParent().offset();
                    var contentOffset = $content.offset();
                    x = contentOffset.left - parentOffset.left;
                    y = contentOffset.top - parentOffset.top;
                }
                if ($content.outerWidth() > this._ejDialog.width()) x += ($content.outerWidth() - this._ejDialog.width()) / 2;
                if ($content.outerHeight() > this._ejDialog.height()) y += ($content.outerHeight() - this._ejDialog.height()) / 2;
            }
            else {
                var doc = document.documentElement;
                x = (($(window).outerWidth() > this._ejDialog.width()) ? ($(window).outerWidth() - this._ejDialog.outerWidth()) / 2 : 0) + (window.pageXOffset || doc.scrollLeft);
                y = (($(window).outerHeight() > this._ejDialog.height()) ? ($(window).outerHeight() - this._ejDialog.outerHeight()) / 2 : 0) + (window.pageYOffset || doc.scrollTop);
            }
            this._ejDialog.css({ top: y, left: x });
            this._ejDialog.css("position", "absolute");
        },
        _closeClick: function (event) {
			if(event.type == "touchstart")
		    	event.preventDefault();
            if (this.model.enabled) {
                event.stopPropagation();
                this.close(event);
            }
        },

        _collapsibleClick: function (e) {
            if (this.model.enabled) {
                if ($(e.target).hasClass("e-arrowhead-up")) {
                    this._actionCollapse(e);
                }
                else if ($(e.target).hasClass("e-arrowhead-down")) {
                    this._actionExpand(e);
                }
            }
        },
        _actionCollapse: function (e) {
            if (!this._minimize) {
                this._dialogCollapsible&& this._dialogCollapsible.removeClass("e-arrowhead-up").addClass("e-arrowhead-down");
                this._dialogCollapsible && this._dialogCollapsible.attr("title", this.model.tooltip.expand);
                this._ejDialog.find("div.e-resize-handle").hide();
                this._ejDialog.find(".e-widget-content").parent().slideUp("fast");
                if(this.model.showFooter)  this._dialogFooterbar.slideUp("fast");
                this._ejDialog.removeClass("e-shadow");
                this._ejDialog.css("minHeight", "0");
                this._ejDialog.height("auto");
                this._trigger("collapse",{isInteraction :(e ? true : false )});
                this._collapsible = true;
            }
        },
        _actionExpand: function (e) {
            if (!this._minimize) {
                this._dialogCollapsible&& this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                this._dialogCollapsible && this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                this._ejDialog.addClass("e-shadow");
                this._ejDialog.find(".e-widget-content").parent().slideDown("fast");
                if (this.model.showFooter) this._dialogFooterbar.slideDown("fast");
                if (this._maximize) {
                    this._ejDialog.css({ width: "100%", height: "100%" });
                    this.element.css({ width: "100%", height: "100%" });
                    this.contentDiv.css({ width: "100%", height: "100%" });
                }
                else this._ejDialog.height(this.model.height);
                this._ejDialog.find("div.e-resize-handle").show();
                this._trigger("expand",{isInteraction :(e ? true : false )});
                this._collapsible = false;
            }
        },

        _maximizeClick: function (e) {
            if (this.model.enabled) {
                var _target = $(e.target);
                var hideIcon = this._dialogMaximize;
                if (_target.hasClass("e-maximize")) {
                    this._actionMaximize();
                    if (this._dialogTitlebar){
                        this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-minus');
                        this._dialogMinimize && this._dialogMinimize.attr('title', this.model.tooltip.minimize);
                    }
                    _target.removeClass("e-maximize").addClass("e-restore");
                    this._dialogMaximize.attr('title', this.model.tooltip.restore);
                    this._hideIcon(true);
                }
                else if (_target.hasClass("e-restore")) {
                    this._actionRestore();
                    _target.removeClass("e-restore").addClass("e-maximize");
                    this._dialogMaximize.attr('title', this.model.tooltip.maximize);
                    if (!ej.isNullOrUndefined(hideIcon) && $(hideIcon).hasClass('e-arrowhead-down')){
                        $(hideIcon).removeClass('e-arrowhead-down').addClass('e-arrowhead-up');
                        this._dialogMaximize.attr('title', this.model.tooltip.collapse);
                    }
                    this._hideIcon(true);
                }
            }
			this._resetScroller();
        },
        _actionMaximize: function () {
            this._ejDialog.css("top", "0px").css("left", "0px").css("overflow", "hidden").css("position", (this.model.containment ? "absolute" : this.model.target ? "absolute" : "fixed"));
            this._ejDialog.css({ width: "100%", height: "100%" });
            this.element.css({ width: "100%", height: "100%" });
            this.contentDiv.css({ width: "100%", height: "100%" });
            this._maximize = true;
            this._minimize = false;
            var proxy=this;
            if (this._dialogCollapsible && !ej.isNullOrUndefined(this._dialogCollapsible.hasClass("e-arrowhead-down"))) {
                this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                this._dialogCollapsible.attr('title', this.model.tooltip.collapse);
                this._collapseValue = true
            }
            if(this._collapseValue == true) {
                this._ejDialog.find(".e-widget-content").parent().slideDown("fast",function(){
					proxy.refresh();
                    proxy._reRenderScroller();
                });
            }
            this._resetScroller();
			if($(this.contentDiv).is(":hidden"))
			    this.contentDiv.show();
        },
        _actionRestore: function () {
            this.element.height("").width("");
            this.contentDiv.height("").width("");
            this._restoreDialog();
            this._maximize = this._minimize = false;
        },

        _minimizeClick: function (e) {
            if (this.model.enabled) {
                var _target = $(e.target);
                var hideIcon = this._dialogMinimize.hasClass("e-icon")&& this._dialogMinimize;
                if (_target.hasClass("e-minus")) {
                    if (this._maximize)
                        this._setSize();
                    this._actionMinimize();
                } else if (_target.hasClass("e-restore")) {
                    this._actionRestore();
                    _target.removeClass("e-restore").addClass("e-minus");
                    this._dialogMinimize.attr('title', this.model.tooltip.minimize);
                    if (!ej.isNullOrUndefined(hideIcon) && $(hideIcon).hasClass('e-arrowhead-down')){
                        $(hideIcon).removeClass('e-arrowhead-down').addClass('e-arrowhead-up');
                        this._dialogMinimize.attr('title', this.model.tooltip.collapse);
                    }
                    this._hideIcon(true);
                }
            }
        },

        _actionMinimize: function () {
            var top = ($(window).height() - this._ejDialog.height()) + this.element.height() + 14, _height;
            this._ejDialog.css("top", "").css("bottom", "0").css("left", "0").css("position", (this.model.containment ? "absolute" : this.model.target ? "absolute" : "fixed"));
            this._ejDialog.css("minHeight", "0");
            if (this._dialogTitlebar) {
                this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-maximize');
                this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.maximize);
                this._dialogTitlebar.find(".e-minus").removeClass("e-minus").addClass("e-restore");
                this._dialogMinimize && this._dialogMinimize.attr('title', this.model.tooltip.restore);
                if (this._isOpen)
                    _height = this._dialogTitlebar.outerHeight();
                else {
                    this._ejDialog.css({ "display": "block", "visibility": "hidden" });
                    _height = this._dialogTitlebar.outerHeight();
                    this._ejDialog.css({ "display": "none", "visibility": "" });
                }
                this._ejDialog.css("height", _height + 2); // 1px bordertop + 1px borderbottom of the dialog wrapper is added
                this._hideIcon(false);
            } else this._ejDialog.css("height", "");
            this.contentDiv.hide();
			if(this.model.showFooter) this._dialogFooterbar.hide();
            this._maximize = false;
            this._minimize = true;
        },

        _hideIcon: function (value) {
            var hideIcon = this._dialogCollapsible ? this._dialogCollapsible : null;
            if (value) {
                if (!ej.isNullOrUndefined(hideIcon)) $(hideIcon).parent('.e-dialog-icon').show();
                this._ejDialog.find("div.e-resize-handle").show();
            } else {
                if (!ej.isNullOrUndefined(hideIcon)) $(hideIcon).parent('.e-dialog-icon').hide();
                this._ejDialog.find("div.e-resize-handle").hide();
            }
        },

        _pinClick: function (e) {
            if (this.model.enabled) {
                var _target = $(e.target);
                if (_target.hasClass("e-unpin")) {
                    this.dialogPin = true;
                    _target.removeClass("e-unpin").addClass("e-pin");
                    this._dialogPin.attr('title', this.model.tooltip.unPin);
                }
                else if (_target.hasClass("e-pin")) {
                    this.dialogPin = false;
                    _target.removeClass("e-pin").addClass("e-unpin");
                    this._dialogPin.attr('title', this.model.tooltip.pin);
                }
            }
        },

        _restoreDialog: function () {
            this.contentDiv.show();
			if(this.model.showFooter) this._dialogFooterbar.show();
            this._ejDialog.css({"position": "absolute", "bottom": ""}).addClass("e-shadow");
            this._setSize()._resetScroller();
            if (this._dialogTitlebar) {
                this._dialogTitlebar.find(".e-minus").parent().show();
                if (this._dialogCollapsible) {
                    this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                    this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                }
            }
        },

        _clickHandler: function (e) {
            var zindex = this._dialogMaxZindex();
            if (parseInt(this._ejDialog.css("zIndex")) < zindex) 
                this._ejDialog.css({ zIndex: zindex + 1 });            
        },

        _mouseClick: function (e) {
			if(e.currentTarget==this._id)
				if ($(e.target).hasClass("e-dialog") || $(e.target).hasClass("e-icon e-resize-handle")) {
					this._setZindex();
					$(e.target).closest(".e-dialog.e-widget").focus();
				}
        },

        _keyDown: function (e) {
            var code;
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            if (this.model.allowKeyboardNavigation && this.model.enabled && $(e.target).hasClass("e-dialog"))
                if ($.inArray(code, this.keyConfigs) > -1 && this.model.allowDraggable && !this.dialogPin) {
                    this._keyPressed(code, e.ctrlKey);
                    e.preventDefault();
                }            
            if (this.model.closeOnEscape && code === 27 && this.model.enabled) 
                if (!this.element.find(".e-js.e-dialog").first().is(":visible")) {
                    this.close(e);
                    e.preventDefault();
                }
            if (code===13 && this.model.enabled){
                if($(e.target).hasClass("e-close")) this.close(e);
                else if ($(e.target).hasClass("e-arrowhead-up") || $(e.target).hasClass("e-arrowhead-down")) this._collapsibleClick(e);                
                if ($(e.target).hasClass("e-maximize") || ($(e.target).hasClass("e-restore") && $(e.target).is(this._dialogMaximize)))
				    this._maximizeClick(e);
                else if ($(e.target).hasClass("e-minus") || ($(e.target).hasClass("e-restore") && $(e.target).is(this._dialogMinimize)))
				    this._minimizeClick(e);
				if ($(e.target).hasClass("e-pin") || $(e.target).hasClass("e-unpin")){
				    this._pinClick(e);
					}
            }
            if (code == 9 && this.model.enableModal)
                this._focusOnTab(e);
        },

        _focusOnTab: function (e) {
            var focusEle = this._ejDialog.find("a, button, :input, select, [tabindex]:not('-1')");
            focusEle = $(focusEle).find("a, button, :input, select, [tabindex]:not('')");
            if (e.shiftKey) {
                if (!focusEle[focusEle.index(e.target) - 1]) {
                    e.preventDefault();
                    focusEle.last().focus();
                }
            }
            else if (!focusEle[focusEle.index(e.target) + 1]) {
                e.preventDefault();
                focusEle[0].focus();
            }
        },

        _keyPressed: function (code, ctrlKey) {
            this._keyNavigation=true;
            switch (code) {
                case 40:
                    ctrlKey ?  this._resizing("height", (this._ejDialog.outerHeight() + 3)) : this.option("position", { X: this._ejDialog.position().left, Y: (this._ejDialog.position().top + 3) });
                    break;
                case 39:
                    ctrlKey ? this._resizing("width", (this._ejDialog.outerWidth() + 3)) : this.option("position", { X: (this._ejDialog.position().left + 3), Y: this._ejDialog.position().top });
                    break;
                case 38:
                    ctrlKey ? this._resizing("height", (this._ejDialog.outerHeight() - 3)) : this.option("position", { 
						X: (this._ejDialog.position().left == 0 ? 0 : this._ejDialog.position().left),
						Y: (this._ejDialog.position().top > 3 ? this._ejDialog.position().top - 3 : 0) 
					});
                    break;
                case 37:
                    ctrlKey ? this._resizing("width", (this._ejDialog.outerWidth() - 3)) : this.option("position", { 
						X: (this._ejDialog.position().left > 3 ? this._ejDialog.position().left - 3 : 0), 
						Y: (this._ejDialog.position().top == 0 ? 0 : this._ejDialog.position().top)
					});
                    break;
            }
        },

        _resizing:function(key, value){
            if (this.model.enableResize) this.option(key, value);
        },

        _sizeInPercent: function () {
            if (!this._enableWindowResize()) return this;
            var parentObj = this._getParentObj();
            if (this._sizeType.width == "%") this._widthPercent = parseFloat(this.model.width);
            else this._widthPercent = this._convertPixelToPercentage(parentObj.outerWidth(), this._ejDialog.outerWidth());
            if (this._sizeType.height == "%") this._heightPercent = parseFloat(this.model.height);
            else this._heightPercent = this._convertPixelToPercentage(parentObj.outerHeight(), this._ejDialog.outerHeight());
            if (this._widthPercent >= 100) {
                this._widthPercent = 100;
                this._ejDialog.outerWidth(parentObj.outerWidth());
                this.model.width = this._ejDialog.width();
            }
            if (this._heightPercent >= 100) {
                this._heightPercent = 100;
                this._ejDialog.outerHeight(parentObj.outerHeight());
                this.model.height = this._ejDialog.height();
            }
            return this;
        },

        _getParentObj: function () {
            return (!ej.isNullOrUndefined(this.model.containment) ? $(this.model.containment) : !ej.isNullOrUndefined(this.model.target) ? $(this.model.target) : $(document));
        },

        _convertPercentageToPixel: function (parent, child) {
            return Math.round((child * parent) / 100);
        },

        _convertPixelToPercentage: function (parent, child) {
            return Math.round((child / parent) * 100);
        },

        _reSizeHandler: function () {
            var parentObj;
            if (this._maximize) { this._resetScroller(); return; }
            if (this.model.position.X == "" || this.model.position.Y == "" && !this._minimize) this._centerPosition();
            parentObj = this._getParentObj();
            this._change = false;
            if (this._windowSize.outerWidth != $(window).outerWidth()) {
                if (this._sizeType.width == "%") this._percentageWidthDimension(parentObj);
                else this._pixelsWidthDimension(parentObj);
            }
            else if (this._windowSize.outerHeight != $(window).outerHeight()) {
                if (this._sizeType.height == "%") this._percentageHeightDimension(parentObj);
                else this._pixelsHeightDimension(parentObj);
            }
            this._change && this._resizeContainer(parentObj);
            this._windowSize = { outerWidth: $(window).outerWidth(), outerHeight: $(window).outerHeight() };
			this._centerPosition();
        },
        _setDimension:function(){
            if (ej.isNullOrUndefined(this.model.maxWidth)) {
                if (ej.isNullOrUndefined(this._sizeType.width)) this._maxWidth = +this.model.width;
                else if (this._sizeType.width == "px" || this._sizeType.width == "auto") this._maxWidth = this.model.width;
            } else this._maxWidth = this.model.maxWidth;
            if (ej.isNullOrUndefined(this.model.maxHeight)) {
                if (ej.isNullOrUndefined(this._sizeType.height)) this._maxHeight = +this.model.height;
                else if (this._sizeType.height == "px" || this._sizeType.height == "auto") this._maxHeight = this.model.height;
            } else this._maxHeight = this.model.maxHeight;
        },
        _percentageWidthDimension: function (parentObj) {
            this._ejDialog.outerWidth(this._convertPercentageToPixel(parentObj.outerWidth(), this._widthPercent));
            this._change = true;
        },
        _percentageHeightDimension: function (parentObj) {
            this._ejDialog.outerHeight(this._convertPercentageToPixel(parentObj.outerHeight(), this._heightPercent));
            this._change = true;
        },
        _pixelsWidthDimension: function (parentObj) {
            if ($(parentObj).outerWidth() <= this._ejDialog.outerWidth()) this._setWidth(parentObj);
            if (($(parentObj).outerHeight() <= this._ejDialog.outerHeight()) && !this.model.isResponsive) this._setHeight(parentObj);
            if (parseInt(this._ejDialog.css("width")) < parseInt(this._maxWidth)) {
                if (parseInt(this._maxWidth) < $(parentObj).outerWidth()) this._ejDialog.outerWidth((parseInt(this._maxWidth)));
                else this._ejDialog.outerWidth((parentObj.outerWidth()));
                this._change = true;
            }
        },
        _pixelsHeightDimension: function (parentObj) {
            if (($(parentObj).outerHeight() <= this._ejDialog.outerHeight()) && !this.model.isResponsive) this._setHeight(parentObj);
            if ($(parentObj).outerWidth() <= this._ejDialog.outerWidth()) this._setWidth(parentObj);
            if (parseInt(this._ejDialog.css("height")) < parseInt(this._maxHeight)) {
                if (parseInt(this._maxHeight) < $(parentObj).outerHeight()) this._ejDialog.outerWidth((parseInt(this._maxHeight)));
                else this._ejDialog.outerHeight((parentObj.outerHeight()));
                this._change = true;
            }
        },
        _setWidth: function (parentObj) {
            this._ejDialog.outerWidth((parentObj.outerWidth()));
            this._change = true;
        },
        _setHeight: function (parentObj) {
            this._ejDialog.outerHeight((parentObj.outerHeight()));
            this._change = true;
        },
        _resizeContainer: function (parentObj) {
            this.contentDiv.width(this._ejDialog.width());
            this.element.outerWidth(this.contentDiv.width());
            var contentDivheight = this._ejDialog.height() - ((this.model.showHeader) ? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0);
            this.contentDiv.height((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? contentDivheight : contentDivheight - 1);
            this.element.outerHeight((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? contentDivheight : contentDivheight - 1);
            this.scroller = this.contentDiv.ejScroller({ width: (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") ? this._ejDialog.width() : this._ejDialog.width() - 2 : false , height: (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") ? this.element.outerHeight() : this.element.outerHeight() - 2 : false, rtl: this.model.rtl, enableTouchScroll: false });
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
            if ((this.model.position.X == "" || this.model.position.Y == "" && !this._minimize)||(this._positionChanged)) this._centerPosition();
            else this._ejDialog.css("height", this._dialogTitlebar.outerHeight());
            this._updateCaptionWidth();
            this._change = false;
        },
        _getLocalizedLabels:function(){
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        }, 

        _enableWindowResize: function () {
            return (this.model.isResponsive || ((isNaN(this.model.width) && (this.model.width.indexOf("%") > 0)) && (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0) && (this.model.height != "auto")))) ? true : false;
        },

        _wireResizing: function () {             
            $(window)[(this._enableWindowResize() ? "on" : "off")]('resize', $.proxy(this._reSizeHandler, this));                        
        },

        _wireEvents: function () {
            this._on(this._ejDialog, "keydown", this._keyDown);
            this._on(this._ejDialog, "click", this._mouseClick);
            this._wireResizing();
        },

        refresh: function () {
            this._resetScroller();
        },

        open: function () {
            if (this._isOpen) return true;
            if (true == this._trigger("beforeOpen")) return false;
            this.element.css("display", "block");
            this._setZindex();
            if (!this._minimize && !this._maximize && !this._init) this._dialogPosition();
            var proxy = this, effect = {}, height;
            this._ejDialog.show();
            if (this.model.enableAnimation) {
                this._ejDialog.css({ "opacity": 0});
                if (this.model.animation.show.effect == "slide") {
                    var eLeft = this._ejDialog.css("left");
                    this._ejDialog.css({ "left": -this._ejDialog.width() });
                    effect = { left: eLeft, opacity: 1 };
                }
                else {
                    effect = { opacity: 1 };
                }
            }
            this._ejDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.show.duration) : 0), function () {
                if (proxy.model) {
					  if (proxy._ejDialog.css("display") == "none") proxy._ejDialog.show();
                    proxy._ejDialog.eq(0).focus();
                    proxy._ejDialog.css({ "opacity": "" });
                    proxy.contentDiv.find("a:visible:enabled, button:visible:enabled, :input:visible:enabled, select:visible:enabled, .e-input").first().focus();
                    proxy._trigger("open");
                    proxy._updateCaptionWidth();
					if(proxy.model.enableModal && !proxy.model.backgroundScroll)
					{
						if( proxy._ejDialog.height() > $(window).height()) proxy._ejDialog.css("height",$(window).height());
						proxy.model.height=$(window).height(); proxy._overLay.css("position","fixed");
						proxy.scroller.refresh(true); proxy.refresh();
					}
                    if (proxy.model.maxHeight || proxy.model.maxWidth)
                    {
                        height = proxy._ejDialog.outerHeight(true) - ((proxy._dialogTitlebar ? proxy._dialogTitlebar.outerHeight(true) : 0));
                        if ((proxy.model.height == "auto" || proxy.model.height == "100%"))
                            height = proxy.model.height;
                        proxy._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? height : height - 2, (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? proxy._ejDialog.width() : proxy._ejDialog.width() - 2);
						proxy.scroller.refresh();
                    }
                }
            });
            if (this.model.enableModal == true) this._createOverlay();
            this._isOpen = true;
            if (this.element.find("> .e-draggable.e-titlebar")) {
               var dragobject = $("#" + this.element.find("> .e-draggable.e-titlebar").attr("id")).data("ejDraggable");
                if (dragobject)
                    dragobject.option("cursorAt", this.element.offset());
            }
            return this;
        },

        close: function (event) {
            if (!this._isOpen || !this.model.enabled) return true;
            var isInteraction= event ? true : false;            
            if (true == this._trigger("beforeClose", { event: event,isInteraction:isInteraction })) return false;
            this._isOpen = false;
            var proxy = this, effect = {};
            if (this.model.enableAnimation) 
            effect = this.model.animation.hide.effect == "slide" ? { left: -this._ejDialog.width(), opacity: 0 } : { opacity: 0 };
            this._ejDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.hide.duration) : 0), function () {
                proxy._trigger("close", { event: event, isInteraction:isInteraction });
                proxy._ejDialog.hide();
            });
            if (this.model.enableModal){
                if (this._overLay) this._overLay.remove();
                if (!this.model.backgroundScroll) $("body").removeClass("e-dialog-modal");
            }
            return this;
        },

        isOpened: function () { return this.isOpen() },
        isOpen: function () { return this._isOpen; },

        setTitle: function (titleText) {
            this.model.title = titleText;
            this._titleText.text(titleText);
            this._updateCaptionWidth();
            return this;
        },

        setContent: function (htmlContent) {
            if (!this.model.enabled) return false;
            this.element.html(htmlContent);
            this._resetScroller();
            return this;
        },      

        focus: function () {
            this._setZindex();
            this.element.focus();
            return this;
        },

        minimize: function () {
			if(this.model.showHeader){
            this._actionMinimize();
            $(this.wrapper.find(".e-minus")[0]).parent().hide();
            return this;
			}
        },

        maximize: function () {
			if(this.model.showHeader){
            this._actionMaximize();
            $(this.wrapper.find(".e-maximize")[0]).removeClass("e-maximize").addClass("e-restore");
            $(this.wrapper.find(".e-restore")[1]).removeClass("e-restore").addClass("e-minus");
            this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.restore);
            this._dialogTitlebar && this._dialogTitlebar.find(".e-minus").parent().show();
            this._hideIcon(true);
            return this;
			}
        },

        restore: function () {
			if(this.model.showHeader){
            var action = this._minimize;
            this._actionRestore();
            $(this.wrapper.find(".e-restore")[0]).removeClass("e-restore").addClass(action ? "e-minus" : "e-maximize");
            this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.maximize);
            this._hideIcon(true);
            return this;
			}
        },

        pin: function () {
			if(this.model.showHeader){
            this.dialogPin = true;
            $(this.wrapper.find(".e-unpin")[0]).removeClass("e-unpin").addClass("e-pin");
            this._dialogPin && this._dialogPin.attr('title', this.model.tooltip.unPin);
            return this;
			}
        },

        unpin: function () {
            if(this.model.showHeader){
			this.dialogPin = false;
            $(this.wrapper.find(".e-pin")[0]).removeClass("e-pin").addClass("e-unpin");
            this._dialogPin && this._dialogPin.attr('title', this.model.tooltip.pin);
            return this;
			}
        },

        collapse: function () {
			if(this.model.showHeader){
            this._actionCollapse();
            this._collapseValue=true;
            return this;
			}
        },

        expand: function () {
			if(this.model.showHeader){
            this._actionExpand();
            return this;
			}
        }
    });
    
ej.Dialog.Locale = ej.Dialog.Locale || {} ;
    
ej.Dialog.Locale["default"] = ej.Dialog.Locale["en-US"] = {
    tooltip:{
                close: "Close",
                collapse: "Collapse",
                restore: "Restore",
                maximize: "Maximize",
                minimize: "Minimize",
                expand: "Expand",
                unPin: "UnPin",
                pin: "Pin"
            },
    title:"",
     //currently we have deprecated this API
    closeIconTooltip: "close"
};

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejMaskEdit", "ej.MaskEdit", {

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },

        defaults: {

            maskFormat: "",

            value: null,

            watermarkText: "",

            name : null,

            height: "",

            width: "",

            showError: false,

            htmlAttributes: {},

            cssClass: "",

            customCharacter: null,

            inputMode: "text",

            readOnly: false,

            textAlign: ej.TextAlign.Left,

            hidePromptOnLeave: false,

            showRoundedCorner: false,

            enablePersistence: false,

            enabled: true,

            locale:"en-US",

            showPromptChar: true,

            validationRules: null,

            validationMessage: null,

            keydown: null,

            keyup: null,

            keyPress: null,

            change: null,

            mouseover: null,

            mouseout: null,

            focusIn: null,

            focusOut: null,

            create: null,

            destroy: null

        },

        dataTypes: {
            maskFormat: "string",
            showError: "boolean",
            enabled: "boolean",
            customCharacter: "string",
            cssClass: "string",
            watermarkText: "string",
            showRoundedCorner: "boolean",
            showPromptChar: "boolean",
            inputMode: "enum",
            textAlign: "enum",
            hidePromptOnLeave: "boolean",
            readOnly: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data"
        },

        _setModel: function (jsondata) {
            for (var key in jsondata) {
                switch (key) {
                    case "value":
					this.temp_index=0;
					this.indexValue=[];
                        if (ej.isPlainObject(jsondata[key])) jsondata[key] = null;
                        this._setValue(jsondata[key]);
                        this._initObjects();
                        jsondata[key] = this.get_UnstrippedValue(); this._raiseEvents("change", true); break;
						
                    case "width": this._setWidth(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "watermarkText": this.model.watermarkText = jsondata[key]; this._changeWatermark(jsondata[key]); break;
                    case "showRoundedCorner": this._roundedCorner(jsondata[key]); break;
                    case "showPromptChar": this._setShowPrompt(jsondata[key]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this._hiddenInput.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = jsondata[key];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "textAlign": this._setTextAlign(jsondata[key]); break;
                    case "inputMode": this._setInputMode(jsondata[key]); break;
                    case "maskFormat":
                        this.model.maskFormat = jsondata[key];
                        this._valueMapper();
                        this._maskModel = this.model.maskFormat;
                        this._setMask(jsondata[key]);
                        this._initObjects();
                        jsondata[key] = this.model.maskFormat;
                        break;
                    case "locale":
                         this.model.value = this.get_StrippedValue();
                         this.model.locale = jsondata[key];
                         this._setValue(this.model.value);
                         this._initObjects();                        
                         break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "readOnly": this._setReadOnly(jsondata[key]); break;
                    case "enabled": this.model.enabled = jsondata[key]; this._controlStatus(jsondata[key]); break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "hidePromptOnLeave": this.model.hidePromptOnLeave = jsondata[key];
                        if (this._textbox.value != "") {
                            if(this.model.hidePromptOnLeave) {
                                this._unStrippedMask = this._textbox.value;
                                this._textbox.value = this.get_UnstrippedValue();
                            }
                            else this._textbox.value = this._textbox.value.replace(/[ ]/g, '_');
                            this.model.value = this._textbox.value;
                        }
                }
            }
        },
        observables: ["value"],


        _destroy: function () {
            if (!ej.isNullOrUndefined(this._hiddenInput)) this.element.attr("name", this._hiddenInput.attr("name"));
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.element.insertAfter(this.wrapper);
            if (!ej.isNullOrUndefined(this.wrapper)) this.wrapper.remove();
            if (this.model.textAlign) this.element.css("text-align", "");
            this.element.val("").removeClass(' e-mask e-input e-disable').empty();
            this.element.removeAttr('aria-invalid aria-disabled');
        },


        _init: function (options) {
            this.indexValue = [];
            this.temp_index = 0;
            this._options = options;
            this._tempMask = this.model.maskFormat;
            this._keyFlag = false;
            this._keyupFlag = true;
            this._checkMask = false;
            this._isAndroid = (/android/i.test(navigator.userAgent.toLowerCase()));
            if (this.element.is("input") && (this.element.is("input[type=text]") || this.element.is("input[type=password]") || !this.element.attr('type'))) {
                this.element.attr('autocomplete', 'off');
                this._isWatermark = 'placeholder' in document.createElement('input');
                this._setValues();
                this._valueMapper();
                this._renderControl();
                this._initObjects();
                this._wireEvents();
				this._addAttr(this.model.htmlAttributes);
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
            } else {
                this._destroy();
                return false;
            }
            if (options && options.value != undefined && this.model.value !== options.value)
                this._trigger("_change", { value: this.get_UnstrippedValue(), unmaskedValue: this.get_StrippedValue()});            
        },

        _initValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
				else if(keyName == "name") proxy._hiddenInput.attr(key,value);
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readonly" && value == "readOnly") proxy._setReadOnly(true);
                else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
                else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);
            });
        },
        _setValidation: function () {
            this._hiddenInput.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this._hiddenInput.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },

        _setShowPrompt:function(value){
            this.model.showPromptChar = value;
            this._textbox.value = this.model.showPromptChar ? this._unStrippedMask : this.get_UnstrippedValue();
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _setValues: function () {
            this._unStrippedMask = null;
            //Predefined character definitions
            this._charMap = {
                '9': "[0-9 ]",
                'a': "[A-Za-z0-9 ]",
                'A': "[A-Za-z0-9]",
                'N': "[0-9]",
                '#': "[0-9]",
                '&': '[^\x7f]+',
                '<': "",
                '>': "",
                'C': this.model.customCharacter != null ? "[" + this.model.customCharacter + "]" : "[A-Za-z ]",
                '?': "[A-Za-z]",
            };
        },

        _renderControl: function () {
            this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
            if (this.element.attr("name") != null)
                this.element.removeAttr('name');
            this.wrapper = ej.buildTag("span.e-mask e-widget " + this.model.cssClass);
            this.innerWrapper = ej.buildTag("span.e-in-wrap e-box");
            this.wrapper.append(this.innerWrapper).insertBefore(this.element);
            this.innerWrapper.append(this.element);
            this._hiddenInput = ej.buildTag("input#" + this._id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            if (!this._isWatermark && this.model.inputMode != "password") {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                this._hiddenSpan.bind("mousedown", $.proxy(this._OnFocusHandler, this));
            }
            if(ej.isNullOrUndefined(this.model.value) && this.element[0].value != "") this.model.value =  this.element[0].value;
            if (!ej.isNullOrUndefined(this.model.value)) {
                this.wrapper.addClass('e-valid');
                if (typeof this.model.value == "number")
                    this.model.value = this.model.value.toString();
            }
            this._hiddenInput.attr({ "name": this.model.name, "value": this.model.value });
            this.element.attr({ 'aria-invalid': false }).addClass('e-input')
            if (this.model.maskFormat == "" && this.model.value == null) {
                var proxy = this;
                setTimeout(function () {
                    if (proxy.element.val() != "") {
                        proxy.option('value', proxy.element.val());
                        proxy.previousValue = proxy.model.value;
                        proxy._initObjects();
                    }
                }, 500)
            }
            else this.element.attr({ 'value': this.model.value });
            if (ej.isNullOrUndefined(this._options.inputMode) && !ej.isNullOrUndefined(this.element.attr("type")))
                this.model.inputMode = this.element.attr("type");
            else
                this._setInputMode(this.model.inputMode);
            this._setWidth(this.model.width);
            this._setHeight(this.model.height);
            this._roundedCorner(this.model.showRoundedCorner);
            this._setTextAlign(this.model.textAlign);
            this._setReadOnly(this.model.readOnly);
            this._controlStatus(this.model.enabled);
            this.previousValue = this.model.value;
        },

        _initObjects: function () {
            this._textbox = this.element[0];
            this._keypressFlag = 0;
            this._selectedTextKeyDown = 0;
            // KeyDown trace [ 0 - None, 1 - BackSpace, 2 - Delete]
            this._keydownFlag = 0;
            // Length of the Mask
            if (!(this.model.maskFormat.indexOf("\\") >= 0))
                this._maskLength = this.model.maskFormat.length;
            else {
                var _position = 0;
                for (var temp = 0; temp < this.model.maskFormat.length; temp++) {
                    if ((this.model.maskFormat[temp] == "\\"))
                        _position += 1;
                }
                this._maskLength = this.model.maskFormat.length - _position;
            }
            //Replacing all [9?$CANa*] to '_'           
            if (!(this.model.maskFormat.indexOf("\\") >= 0))
                this._maskModel = this.model.maskFormat.replace(/[9?CANa#&]/g, '_');
            else {
              if(!this.model.value) {
                this._maskModel = this._emptyMask;
              } else {
                this._maskModel = "";
                  for (var pos = 0; pos < this.model.maskFormat.length; ++pos) {
                      if (this.model.maskFormat[pos] == "\\"){
                            this._maskModel += this.model.maskFormat[++pos];
                        } else if (!(this.model.maskFormat[pos] == "\\"))
                            this._maskModel += this.model.maskFormat[pos].replace(/[9?CANa#&]/g, '_');
                    }
                }
            }
            this._changeMask(this.model.locale);
            if (this._maskModel.indexOf("<") >= 0 || this._maskModel.indexOf(">") >= 0) {
                this._maskModel = this._maskModel.replace(/[<>]/g, '');
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');
                this._valueMapper();
            }

            this._validatedValue = this._maskModel;
            if (this.model.inputMode != "password") {
                this._setValue(this.model.value);
                this._setWaterMark();
            }
            if (this.model.showError) {
                this.element.addClass("e-error").attr('aria-invalid', "true");
            }
            this._prevValue = this.model.watermarkText ? (this._textbox.value ? this._textbox.value : this._maskModel) : this._textbox.value;
        },


        _setWidth: function (value) {
            this.wrapper.width(value);
        },

        _setHeight: function (value) {
            this.wrapper.height(value);
        },

        _roundedCorner: function (value) {
            if (value && !this.innerWrapper.hasClass('e-corner')) {
                this.innerWrapper.addClass('e-corner');
            }
            else if (this.innerWrapper.hasClass('e-corner')) {
                this.innerWrapper.removeClass('e-corner');
            }
        },

        _setTextAlign: function (align) {
            if (align == "right") {
                this.element.css("text-align","");
                this.wrapper.addClass('e-rtl');
            }
            else {
                this.wrapper.removeClass('e-rtl');
                this.element.css("text-align",align);
            }
        },

        _setInputMode: function (type) {
            this.element.attr('type', type);
        },

        _setReadOnly: function (bool) {
            this.model.readOnly = bool;
            if (bool) this.element.attr("readonly", true);
            else this.element.removeAttr("readonly");
        },

        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass);
            this.wrapper.addClass(skin);
        },

        _setWaterMark: function () {
            var formatValue = this.model.showPromptChar ? this._maskModel : (this._maskModel != "" && this._maskModel != null) ? this._maskModel.replace(/[_]/g, " ") : this._maskModel;
            if (!(this.model.maskFormat.indexOf("\\") >= 0))
                this._maskModel = $.trim(this.model.maskFormat.replace(/[9?CANa#&]/g, '_')) === "" ? null : this.model.maskFormat.replace(/[9?CANa#&]/g, '_');
            else
                this._maskModel = this.model.maskFormat === "" ? null : formatValue;
            if ((this._maskModel != ''&&this._maskModel !=null&& this._textbox.value == formatValue) || (formatValue == '' && this._textbox.value == "") && this.model.inputMode != "password") this._textbox.value = "";
            if(this.model.watermarkText.length==0 && !ej.isNullOrUndefined(this.element.attr("placeholder"))) this.model.watermarkText = this.element.attr("placeholder");
            if (this.model.watermarkText) {
                if (this._isWatermark)
                    this.element.attr("placeholder", this.model.watermarkText);
                else {
                    if (this._textbox.value) this._hiddenSpan.css("display", "none").text(this.model.watermarkText);
                    else this._hiddenSpan.css("display", "block").text(this.model.watermarkText);
                }
            }
            if (!this.model.watermarkText && !this._textbox.value && this.model.maskFormat) {
                if (!this.model.hidePromptOnLeave) this._textbox.value = formatValue;
            else { this._unStrippedMask = this._maskModel; this._textbox.value = this.get_UnstrippedValue(); }
            }
        },

        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            var formatValue = this.model.showPromptChar ? this._maskModel : (this._maskModel != "" && this._maskModel != null) ? this._maskModel.replace(/[_]/g, " ") : this._maskModel;
            if ((this._textbox.value == formatValue || this._textbox.value == '' || $.trim(this.get_StrippedValue()) == "") && this.model.inputMode != "password") this._textbox.value = "";
            (this._isWatermark ? this.element.attr("placeholder", text) : this._hiddenSpan.text(text))
            if (!this.model.watermarkText && $.trim(this.get_StrippedValue()) == "" && this.model.maskFormat) {
                if (!this.model.hidePromptOnLeave) this._textbox.value = formatValue;
                else { this._unStrippedMask = this._maskModel; this._textbox.value = this.get_UnstrippedValue(); }
            }
        },

        _showAlert: function () {
            var ptr = this;
            this.element.addClass("e-error").attr('aria-invalid', "true").animate({ Opacity: 1 }, 700, null, function () {
                $(ptr._textbox).removeClass("e-error").attr('aria-invalid', "false");
            });
        },

        _unMask: function () {
            var tempModel = "";
            var indexValue = 0;
            var valueIndex = -1, maskIndex = 0, i = 0, chr, prompt = "_", rule;
            var newValue = this.model.value.toString();
            var tempValue = "";
            var rules = this._rules.slice();
            for (var k = 0; k < this._rules.length; k++) {
                for (var j = 0;j < newValue.length; j++) {
                    if (rules[k].rule && newValue[j].match(rules[k].rule) || rules[k].rule === undefined) {
                        tempValue += rules[k].rule ? newValue.charAt(j) : rules[k];
                        newValue = rules[k].rule ? newValue.slice(j + 1, newValue.length) : ((rules[k] === newValue[j]) ? newValue.slice(j + 1, newValue.length) : newValue);
						indexValue = 1;
                        break;
                    }
                }
                if (indexValue === 0 && newValue.length > 0) {
                    tempValue += (rules[k].rule === undefined) ? rules[k] : "";
                }
				indexValue = 0;
            }
            while (maskIndex < this._rules.length) {
                chr = tempValue[i];
                rule = this._rules[maskIndex];
                if (chr == undefined) break;
                if (chr === rule || chr === prompt) {
                    tempModel += chr === prompt ? prompt : chr;
                    i += 1;
                    maskIndex += 1;
                }
				else if (rule.rule === undefined) {
					tempModel += rule;
					maskIndex += 1;
				}
                else if (this._rules[maskIndex].rule != undefined && chr.match(this._rules[maskIndex].rule)) {
                    var charCode = tempValue.charCodeAt(i);
					var temp = maskIndex;
					if (this._rules["0"] === ">" || this._rules["0"] === "<") var temp = maskIndex-1;
                    if (this._validateChars(charCode, temp)) {
                        tempModel += tempValue.charAt(i);
                        maskIndex++;
                        i++;
                    } else maskIndex++;
                } 
                else if (typeof rule !== "string") {
                    if (chr.match(this._rules[maskIndex].rule)) {
                        var charCode = tempValue.charCodeAt(i);
                        if (this._validateChars(charCode, maskIndex)) {
                            tempModel += tempValue.charAt(i);
                            maskIndex++;
                            i++;
                        }
                    } else { i++; maskIndex++;}
                } else maskIndex++;
                if (i > tempValue.length) break;
            }
            return tempModel;
        },

        _validateValue: function () {
            if (ej.isNullOrUndefined(this.model.value)) return;
            var tempValue = this.model.value;
            var tempModel = this._maskModel;
            var valueIndex = -1, maskIndex = i = 0, chr, prompt = "_", rule;
            var oldvalue = this._unMask();
            if (!this._isWatermark && this.model.inputMode != "password")
                this._hiddenSpan.css("display", "none");
            // Check if Mask is Empty display the text
            if (this._maskLength == 0) {
                this._textbox.value = tempValue;
                this._setWaterMark();
                return true;
            }
            else {
                var replacestring = this.model.value.toString();
                if (!((this.model.maskFormat.indexOf("\\") >= 0)) && this.model.customCharacter == null)
                    tempValue = this.model.value = replacestring;
                else
                    tempValue = this.model.value;
            }

            while (maskIndex < this._rules.length) {
                chr = oldvalue[i];
				if(chr === "_" && this._rules[maskIndex].rule === "[^]+") {this.indexValue[this.temp_index]= maskIndex;
				this.temp_index++;}
                rule = this._rules[maskIndex];
                if (chr == undefined) break;
                if (chr === rule || chr === prompt) {
                    chr === prompt ? prompt : "";
                    var strBefore = tempModel.substring(0, maskIndex);
                    var strAfter = tempModel.substring(maskIndex);
                    tempModel = strBefore + chr + strAfter.substr(1, strAfter.length);
                    i += 1;
                    maskIndex += 1;
                }
                else if (this._rules[maskIndex].rule != undefined ) {
                    var charCode = oldvalue.charCodeAt(i);
					var temp = maskIndex;
					if(this._rules["0"] === ">" || this._rules["0"] === "<")var temp = maskIndex-1;
                    if (this._validateChars(charCode, temp)) {
                        var strBefore = tempModel.substring(0, temp);
                        var strAfter = tempModel.substring(temp);
                        tempModel = strBefore + oldvalue.charAt(i) + strAfter.substr(1, strAfter.length);
                        maskIndex++;
                        i++;
                    } else maskIndex++;
                } 
                else if (typeof rule !== "string") {
                    if (chr.match(this._rules[maskIndex].rule)) {
                        var charCode = oldvalue.charCodeAt(i);
                        if (this._validateChars(charCode, maskIndex)) {
                            var strBefore = tempModel.substring(0, maskIndex);
                            var strAfter = tempModel.substring(maskIndex);
                            tempModel = strBefore + oldvalue.charAt(i) + strAfter.substr(1, strAfter.length);
                            maskIndex++;
                            i++;
                        } else maskIndex++;
                    } else {
                        var strBefore = tempModel.substring(0, maskIndex);
                        var strAfter = tempModel.substring(maskIndex);
                        tempModel = strBefore + prompt + strAfter.substr(1, strAfter.length);
                        i++;
                        maskIndex++;
                    }
                } else maskIndex++;
            }
            if (this.model.value) {
                this._textbox.value = tempModel;
                this.model.value = this.get_UnstrippedValue();
				if (this.model.value === null) this.model.value = tempModel;
                if (!(this.model.maskFormat.indexOf("\\") >= 0)) {
                    if (!this.model.hidePromptOnLeave) this._textbox.value = tempModel;
                    else { this._unStrippedMask = tempModel.replace(/[ ]/g, '_'); this._textbox.value = tempModel; }
                }         
                else {
                    this._textbox.value = "";
                    var _tPos = 0;
                    for (var _pos = 0; _pos < this.model.maskFormat.length; _pos++) {
                        if (this.model.maskFormat[_pos] == "\\")
                            _tPos += 1;
                    }
                    var _position = 0;
                    if (this.model.value.length == tempModel.length - _tPos) {
                        for (var pos = 0; pos < this.model.maskFormat.length; ++pos) {
                            if (this.model.maskFormat[pos] == "\\")
                                _position = _position + 1;
                            else if (this.model.maskFormat[pos - 1] == "\\")
                                this._textbox.value += tempValue[pos - _position];
                            else if (!(this.model.maskFormat[pos] == "\\")) {
                                if (tempValue.length <= pos - _position)
                                    this._textbox.value += tempModel[pos].replace(/[9?CANa#&]/g, '_');
                                else
                                    this._textbox.value += tempValue[pos - _position].replace(/[9?CANa#&]/g, '_');
                            }

                        }
                    }
                    else {
                       this._textbox.value = tempModel;
                    }
                }
            }
            else {
                if (!(this.model.maskFormat.indexOf("\\") >= 0))
                    this._textbox.value = this.model.maskFormat.replace(/[9?CANa#&]/g, '_');
                else {
                    for (var pos = 0; pos < this.model.maskFormat.length; ++pos) {
                        var val;
                        if (this.model.maskFormat[pos - 1] == "\\")
                            this._textbox.value += this.model.maskFormat[pos];

                        else if (!(this.model.maskFormat[pos] == "\\"))
                            this._textbox.value += this.model.maskFormat[pos].replace(/[9?CANa#&]/g, '_');

                    }
                }
            }
            if (this._textbox.value != undefined && this.model.hidePromptOnLeave) {
                this._unStrippedMask = this._textbox.value.replace(/[ ]/g, '_');
                this._textbox.value = this.get_UnstrippedValue();
            }
            if (this._maskModel!=null &&(this._textbox.value.indexOf(">") >= 0 || this._textbox.value.indexOf("<") >= 0)) {
                this._textbox.value = this._textbox.value.replace(/[<>]/g, '');
                this._tempMask = this.model.maskFormat;
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');                
            }
            if (!this.model.showPromptChar)
                this._textbox.value = this._getUnstrippedValue(true);
            // Update the character to upper and lower case.
            if (this._tempMask != null) {
                for (var i = 0; i < this._textbox.value.length; i++) {
                    var tempkey = this._updateCasing(this._textbox.value[i], i);
                    if (!ej.isNullOrUndefined(tempkey))
                        this._textbox.value = this._textbox.value.substring(0, i) + tempkey + this._textbox.value.substring(i + tempkey.length);
                }
            }
            
            this._setWaterMark();
        },


        _selectionText: function (begin, end) {
            var replaceValue = !ej.isNullOrUndefined(this._maskModel)?this._maskModel.substring(begin, end):"";
            this._textbox.value = this._textbox.value.substring(0, begin) + replaceValue + this._textbox.value.substring(end);
            if (this._keydownFlag == 1) {
                this._setCaretPosition(begin);
                return begin;
            }
            else if (this._keydownFlag == 2) {
                this._setCaretPosition(end);
                return end;
            }
            return begin;
        },


        _caretPosition: function (textbox) {
            var caretPos = 0;
            // Microsoft supports only IE for using document.selection
            if (document.selection) {
                // Create a Range of selected position
                var selectedRange = document.selection.createRange();
                var selectionLength = selectedRange.text.length;
                // Move selection start to 0 position
                selectedRange.moveStart('character', -textbox.value.length);
                // Get caret position by selection length, becoz now range is from Zero to current focus
                caretPos = selectedRange.text.length - selectionLength;
                if (selectionLength != 0) {
                    caretPos = this._selectionText(caretPos, selectedRange.text.length);
                    this._selectedTextKeyDown = 1;
                }
            }
            // For Firefox
            else if (textbox.selectionStart || textbox.selectionStart == '0') {
                caretPos = textbox.selectionStart;
                if (textbox.selectionStart != textbox.selectionEnd) {
                    if (this._keydownFlag)
                        caretPos = this._selectionText(textbox.selectionStart, textbox.selectionEnd);
                    this._selectedTextKeyDown = 1;
                }
            }
            return (caretPos);
        },


        _setCaretPosition: function (caretPos) {
            var element = this._textbox;
            //For IE
            if (window.navigator.appName == "Microsoft Internet Explorer") {
                if (element.createTextRange) {
                    var range = element.createTextRange();
                    range.move('character', caretPos);
                    range.select();
                }
            }
            else
            /* For FireFox and Chrome */
                if (element.selectionStart || element.selectionStart == '0') {
                    element.focus();
                    if (this._isAndroid) {
                        setTimeout(function () {
                            element.setSelectionRange(caretPos, caretPos);
                        }, 0);
                    } else {
                        element.setSelectionRange(caretPos, caretPos);
                    }
                }
                else
                    element.focus();
        },


        _validateChars: function (keyChar, caretPos) {
            var charmap = this._charMap, match = false;
            if (this.model.maskFormat.indexOf("\\") >= 0) {
                var _position = this._getCunrrentPos(caretPos);
                var maskChar = this.model.maskFormat.substr(caretPos + _position, 1);
            }
            else
                var maskChar = this.model.maskFormat.substr(caretPos, 1);
            var customChar = this.model.customCharacter;
            var actualkey = String.fromCharCode(keyChar);
            $.each(charmap, function (key, value) {
                if (maskChar == key) {
                    if (customChar != null) {
                        if (key == "C")
                            value = "[" + customChar + "]";
                        else if (key == "A" || key == "N" || key == "#")
                            value = value.replace(("]"), "") + customChar + "]";
                    }
                    if (actualkey.match(new RegExp(value))) match = true;
                    else match = false;
                }
            });
            return match;
        },


        _seekNext: function (isAfter, diffLen) {
            var caretPos = this._caretPosition(this._textbox);
            var currentPos = isAfter ? (diffLen ? (caretPos - diffLen - 1) : caretPos - 1) : caretPos;
            var tempPos = currentPos;
            var seekFlag = true;
            //seeking the focus to next valid position on right of MaskEdit TextBox
            while (seekFlag) {
                if (currentPos >= 0 && currentPos < this._maskLength) {
                    var _position = 0;
                    for (var temp = 0; temp <= currentPos; temp++) {
                        if ((this.model.maskFormat[temp] == "\\"))
                            _position += 1;
                    }
                    if (this.model.maskFormat.charAt(currentPos) != "C") {
                        if (this.model.maskFormat.indexOf("\\") >= 0) {
                            if (this.model.maskFormat.charAt(currentPos + _position) != "\\" && this.model.maskFormat.charAt(currentPos + _position - 1) != "\\") {
                                if (!this._charMap[this.model.maskFormat.charAt(currentPos + _position)]) {
                                    currentPos++;
                                }
                            }
                            else{
                                if (this.model.maskFormat.charAt(currentPos + _position) != "\\" && this.model.maskFormat.charAt(currentPos + _position - 1) == "\\") {
                                       ++currentPos;
                                }
                            }
                        }
                        else {
                            if (!this._charMap[this.model.maskFormat.charAt(currentPos)]) {
                                currentPos++;
                            }
                        }
                        if (currentPos != tempPos) {
                            tempPos = currentPos;
                            continue;
                        }
                    }
                }
                seekFlag = false;
            }
            return currentPos;
        },


        _seekBefore: function (isBefore) {
            var caretPos = this._caretPosition(this._textbox);
            var currentPos = isBefore ? (caretPos + 1) : caretPos;
            var tempPos = --currentPos;
            var seekFlag = true;
            // Stop Seek when backspace of select more than a char
            if (this._selectedTextKeyDown == 1)
                seekFlag = false;
            //seeking the focus to next valid position on left of MaskEdit TextBox
            while (seekFlag) {
                if (currentPos >= 0 && currentPos < this._maskLength) {
                    var _position = 0;
                    for (var temp = 0; temp <= currentPos; temp++) {
                        if ((this.model.maskFormat[temp] == "\\"))
                            _position += 1;
                    }
                    if (this.model.maskFormat.charAt(currentPos) != "C") {
                        if (this.model.maskFormat.indexOf("\\") >= 0) {
                            if (this.model.maskFormat.charAt(currentPos + _position) != "\\" && this.model.maskFormat.charAt(currentPos + _position - 1) != "\\") {
                                if (!this._charMap[this.model.maskFormat.charAt(currentPos + _position)]) {
                                    this._setCaretPosition(--currentPos);
                                }
                            } else{
								if (this.model.maskFormat.charAt(currentPos + _position - 1) == "\\") {
                                   this._setCaretPosition(--currentPos + _position);
                                }
							}

                        }
                        else {
                            if (!this._charMap[this.model.maskFormat.charAt(currentPos)]) {
                                this._setCaretPosition(--currentPos);
                            }
                        }
                    }
                    if (currentPos != tempPos) {
                        tempPos = currentPos;
                        continue;
                    }
                }
                seekFlag = false;
            }
            return currentPos;
        },


        _writeBuffer: function (keyValue, cursorPos, evt) {
            if (cursorPos <= this._maskLength) {
                var input = this._textbox.value;
			 if (this.indexValue != null && evt.keyCode != "95") {
               for (var temp=0;temp<this.indexValue.length;temp++) {
                    if (this.indexValue[temp] == cursorPos) {
                        if (keyValue != "_" || evt.keyCode == "8") this.indexValue[temp]="";
                    }	
                }
            }	
            if (evt.keyCode == "95") { this.indexValue[this.temp_index] = cursorPos; this.temp_index++; }
           
                if (this._tempMask != null)
                    var tempkey = this._updateCasing(keyValue, cursorPos);
                    keyValue = (tempkey == undefined) ? keyValue : tempkey;
                var strBeforeCursor = input.substring(0, cursorPos);
                var strAfterCursor = input.substring(cursorPos);
                if (this.model.maskFormat.indexOf("\\") >= 0) {
                    var _position = 0;
                    for (var temp = 0; temp <= cursorPos; temp++) {
                        if ((this.model.maskFormat[temp].indexOf("\\") >= 0) && (cursorPos != 0))
                            _position += 1;
                    }
                    if (this.model.maskFormat[cursorPos + _position].indexOf("\\") >= 0)
                        this._textbox.value = strBeforeCursor + input[cursorPos] + strAfterCursor.substr(1, strAfterCursor.length);
                    else
                        this._textbox.value = strBeforeCursor + keyValue + strAfterCursor.substr(1, strAfterCursor.length);
                }
                else
                    this._textbox.value = strBeforeCursor + keyValue + strAfterCursor.substr(1, strAfterCursor.length);
                this._setCaretPosition(cursorPos + 1);
            }
        },

        _updateCasing: function (key, pos) {
            for (var i = 0; i < pos + 1; i++) {
                if (this._tempMask.substr(i, 1) == '<' || this._tempMask.substr(i, 1) == '>')
                    pos++;
            }

            for (var j = pos; j > -1; j--) {
                if (this._tempMask.substr(j, 1) == '<') {
                    return key.toLowerCase();
                }
                else if (this._tempMask.substr(j, 1) == '>') {
                    return key.toUpperCase();
                }
            }
        },


        _getStrippedValue: function (isEmpty) {
            var i, value, mask = this.model.maskFormat, stripVal = isEmpty ? '' : null;
            value = (this._textbox.value == "" && this.model.inputMode != "password") ? this._maskModel : this._textbox.value;
            if (mask.length == 0) return value;
            var _position = 0;
            for (var i = 0; i < mask.length; i++) {
                stripVal = isEmpty ? stripVal : $.trim(stripVal);
                if ((this.model.maskFormat.indexOf("\\") >= 0)) {
                    if ((this.model.maskFormat[i] == "\\"))
                        _position += 1;
                    else if (this.model.maskFormat[i - 1] == "\\")
                        stripVal += this._textbox.value[i - _position];
                    else {
                        var char = mask[i], exp = null;

                        if ("9?$a*".indexOf(char) != -1)
                            exp = this._charMap[char];
                        else if (char == "A" || char == "N" || char == "#")
                            exp = this._charMap[char].replace(("]"), "") + this.model.customCharacter + "]";
                        else if (char == "C")
                            exp = "[" + this.model.customCharacter + "]";
                        else if (char == "&")
                            stripVal += value[i - _position];
                        if (exp && value[i - _position] && value[i - _position].match(new RegExp(exp)))
                            stripVal += value[i - _position];
                    }

                }
                else {
                    var char = mask[i], exp = null;

                    if ("9?$a*".indexOf(char) != -1)
                        exp = this._charMap[char];
                    else if (char == "A" || char == "N" || char == "#")
                        exp = this._charMap[char].replace(("]"), "") + this.model.customCharacter + "]";
                    else if (char == "C")
                        exp = "[" + this.model.customCharacter + "]";
                    else if (char == "&")
                        stripVal += value[i - _position];
                    if (exp && value[i] && value[i].match(new RegExp(exp)))
                        stripVal += value[i];
                }
            }
            return stripVal;
        },


        _getUnstrippedValue: function (isEmpty) {
            var temp_val = 0;
            var value = (this._textbox.value == "" && this.model.inputMode != "password") ? this._maskModel : this._textbox.value, unstripVal = null;
            if (this.model.maskFormat.length == 0) return value;

            if (value != undefined)
                unstripVal = $.trim(value.replace(/[_]/g, " ")) == "" ? null : value.replace(/[_]/g, " ");
            if (this.model.customCharacter == "_" && unstripVal == null) unstripVal="";
			if (unstripVal == null && this.indexValue[temp_val] != null) unstripVal="";
            if (value != undefined && this.indexValue[temp_val] != null && unstripVal != null) {   
                for(;temp_val<this.indexValue.length;temp_val++) {
					if (this.indexValue[temp_val] != "" || this.indexValue[temp_val] == "0"){
                        unstripVal=unstripVal.substr(0, this.indexValue[temp_val])+"_"+unstripVal.substr(this.indexValue[temp_val]+1);
                    }
                }
            }
            return (unstripVal == null && isEmpty) ? '' : unstripVal;
        },

        get_StrippedValue: function () {
            return this._getStrippedValue();
        },

        get_UnstrippedValue: function () {
            return this._getUnstrippedValue();
        },

        _setValue: function (value) {
            if (ej.isNullOrUndefined(value) || $.trim(value) == "") value = null;
            this.model.value = value;
            if (!this._isWatermark && this.model.inputMode != "password")
                this._hiddenSpan.css("display", "none");
            if (!ej.isNullOrUndefined(this.model.maskFormat) && this.model.maskFormat != "") {
                this._validateValue();
                if (ej.isNullOrUndefined(this.model.value)) { 
				    this._textbox.value = ej.isNullOrUndefined(value) ? "" : value; 
                    this._unStrippedMask = this._maskModel; 
                }
            }
            else { this._textbox.value = ej.isNullOrUndefined(value) ? "" : value;  this._unStrippedMask = this._textbox.value; }
            this._setWaterMark();
            this._prevValue = this._textbox.value;
            this._prevPosition = this.element[0].selectionStart;
        },


        _valueMapper: function () {
            var mapper = [], mapperIdx = 0, mask = this.model.maskFormat || "", maskChars = mask.split(""), i = 0, chr,idx = 0;
            var emptyMask = "", rule, rules = this._charMap, promptChar = "_";

            for (; i < mask.length; i++) {
                chr = maskChars[i];
                rule = rules[chr];
                if (rule) {
                    mapper[mapperIdx] = { rule: rule };
                    emptyMask += promptChar;
                    mapperIdx += 1;
                } else {
                    if (chr === "\\") {
                        idx = i + 1;
                        i++;
                        chr = maskChars[idx];
                    }
                    chr = chr.split("");
                    for (var j = 0; j < chr.length; j++) {
                        mapper[mapperIdx] = chr[j];
                        emptyMask += chr[j];
                        mapperIdx += 1;
                    }
                }
            }
            this._rules = mapper;
            this._emptyMask = emptyMask;
            this._maskLength = emptyMask.length;
        },
        _changeMask:function(locale){
            if (this._maskModel.length != 0) {
                var preferredlocale = ej.preferredCulture(locale), groupSep, currecySymbol, decimalSep,unmask = "";
                groupSep = preferredlocale.numberFormat[','];
                currecySymbol = preferredlocale.numberFormat.currency.symbol;
                decimalSep = preferredlocale.numberFormat['.'];
                for (var i = 0; i < this._maskModel.length; i++) {
                    if (this._maskModel[i] == ",")
                        unmask += groupSep;
                    else if (this._maskModel[i] == ".")
                        unmask += decimalSep;
                    else if (this._maskModel[i] == "$")
                        unmask += currecySymbol;
                    else
                        unmask += this._maskModel[i];
                }
                this._maskModel = unmask;
            }
        },
        _setMask: function (maskValue) {
            this._maskLength = maskValue.length;
            this.model.maskFormat = maskValue;
            this._tempMask = this.model.maskFormat;
            this._maskModel = maskValue.replace(/[9?CANa]/g, '_');
            if (this._maskModel.indexOf("<") >= 0 || this._maskModel.indexOf(">") >= 0) {
                this._maskModel = this._maskModel.replace(/[<>]/g, '');
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');
            }            
            if (!ej.isNullOrUndefined(this.model.maskFormat) && this.model.maskFormat != "") 
                this._validateValue();
            else if (!this.model.watermarkText && this._textbox.value != this._maskModel) {
                if (!this.model.maskFormat) {
                    var unstripVal = this._unStrippedMask.replace(/[_]/g, " ");
                    this._textbox.value = (this.model.customCharacter == null) ? $.trim(unstripVal.replace(/[\(\)-]/g, "")) : $.trim(unstripVal);
                    this._unStrippedMask = this._textbox.value;
                }
                else if (this.model.hidePromptOnLeave) {
                    this._textbox.value = this._maskModel;
                    this._unStrippedMask = this._textbox.value;
                    this._textbox.value = this.get_UnstrippedValue();
                }
                else this._textbox.value = this._maskModel;
            }
        },

        enable: function () {
            this.element.disabled = false;			
            this.element.removeAttr("disabled").removeClass('e-disable').attr({ "aria-disabled": false });
            if (this.wrapper.find('.e-placeholder').length > 0) this.wrapper.find('.e-placeholder').removeAttr("disabled", "disabled");
			this.wrapper.removeClass('e-disable-wrap');
            this.model.enabled = true;
        },

        disable: function () {
            this.element.disabled = true;
            this.element.attr("disabled", "disabled").addClass('e-disable').attr({ "aria-disabled": true });
            if (this.wrapper.find('.e-placeholder').length > 0) this.wrapper.find('.e-placeholder').attr("disabled", "disabled");
			this.wrapper.addClass('e-disable-wrap');
            this.model.enabled = false;
        },

        clear: function () {
            this._textbox.value = this.model.maskFormat.replace(/[9?aCAN]/g, '_');
            this.model.value = this.get_StrippedValue();
        },

        _wireEvents: function () {
            this._on(this.element, 'focus', this._OnFocusHandler);
            this._on(this.element, 'blur', this._OnBlurHandler);
            this._on(this.element, 'keydown', this._OnKeyDownHandler);
            this._on(this.element, 'input', this._OnInputHandler);
            this._on(this.element, 'keypress', this._OnKeyPressHandler);
            this._on(this.element, 'keyup', this._OnKeyUpHandler);
            this._on(this.element, 'mouseover', this._OnMouseOverHandler);
            this._on(this.element, 'mouseout', this._OnMouseOutHandler);
            this._on(this.element, 'paste', this._OnPasteHandler);
            this._on(this.element, 'cut', this._OnCutHandler);
        },

        _OnCutHandler: function (e) {
            var selectedValue = !ej.isNullOrUndefined(this._maskModel)?this._maskModel.substring(this._textbox.selectionStart, this._textbox.selectionEnd):"";
            var beforeSelection = this._textbox.value.substring(0, this._textbox.selectionStart);
            var afterSelection = this._textbox.value.substring(this._textbox.selectionEnd);
            var cursorPosition = this._textbox.selectionStart;
            var context = this;
            setTimeout(function () {
                context._textbox.value = beforeSelection + selectedValue + afterSelection;
                context._setCaretPosition(cursorPosition);
                context._prevValue = context._textbox.value;
                context._prevPosition = context.element[0].selectionStart;
                context._raiseEvents("change");
            }, 0);
        },


        _OnPasteHandler: function (e) {
            var context = this;
            this._keyFlag = true;
            setTimeout(function () {
                var text = $(context._textbox).val();
                context._setValue(text);
                context._raiseEvents("change");
            }, 0);
            return true;
        },


        _OnFocusHandler: function (e) {
            this.wrapper.addClass("e-focus");
            var formatValue = this.model.showPromptChar ? this._maskModel : (this._maskModel != "" && this._maskModel != null) ? this._maskModel.replace(/[_]/g, " ") : this._maskModel;
            if (this.model.readOnly)
                return;
            this._focusValue = this.model.value;
            if (!this._isWatermark && this.model.inputMode != "password")
                this._hiddenSpan.css("display", "none");
            if (this._textbox.value == "" && this._maskModel != "" && this.model.inputMode != "password")
                if (this.model.maskFormat.indexOf("\\") >= 0) {
                    this._textbox.value = formatValue;
                }
                else
                    this._textbox.value = ej.isNullOrUndefined(this._maskModel) ? "" : formatValue;
            if (this._maskModel != null && (this._textbox.value.indexOf("<") >= 0 || this._textbox.value.indexOf(">") >= 0)) {
                this._textbox.value = this._textbox.value.replace(/[<>]/g, '');
                this._maskModel = this._textbox.value;
                this._tempMask = this.model.maskFormat;
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');
            }

            if (this._textbox.value != formatValue && this._unStrippedMask != null && this.model.hidePromptOnLeave)
                this._textbox.value = this._unStrippedMask;

            if (!this.model.showPromptChar) this._textbox.value = this._getUnstrippedValue(true);

            $.fn.selectRange = function (start, end) {
                return this.each(function () {
                    if (this.setSelectionRange) {
                        this.focus();
                        this.setSelectionRange(start, end);
                    } else if (this.createTextRange) {
                        var range = this.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', start);
                        range.select();
                    }
                });
            };
            if (this.model.maskFormat) {
                $(this.element).selectRange(0, 0);
            }
            var proxy = this;
            setTimeout(function () {
                proxy._prevPosition = proxy.element[0].selectionStart;
            }, 0);
            this._raiseEvents("focusIn");
        },

        _OnBlurHandler: function (e) {
            this.wrapper.removeClass("e-focus");            
            this.model.value = this.get_StrippedValue();
            var dup = new Array();
            var option = new Array();
            if ((this._textbox.value.indexOf('_') != -1 || this._textbox.value.indexOf(' ') != -1)&& !ej.isNullOrUndefined(this.model.value)) {
                for (var i = 0; i < this.model.maskFormat.length; i++) {
                    if ((this.model.maskFormat[i] == "A") || (this.model.maskFormat[i] == "?")) dup.push(i);
                    else if ((this.model.maskFormat[i] == "9") || (this.model.maskFormat[i] == "a") || (this.model.maskFormat[i] == "C")) {
                        option.push(i);
                    }
                }
                for (var i = 0; i < dup.length; i++) {
                    if (this._textbox.value[dup[i]] === "_") {
                        this._showAlert();
                        this.model.value = this._textbox.value;
                    }
                }
                for (var i = 0; i < option.length; i++) {
                    if ((this.model.value[option[i]] == "_") || (this.model.value[option[i]] == " ")) {
                        this.model.value = this.model.value.substr(0, option[i]) + this.model.value.substr(option[i] + 1, this.model.value.length)
                        for (var j = i; j < option.length; j++) {
                            option[j] = option[j] - 1;
                        }
                    }
                }
            }
            this.model.value = (this.model.value != null) ? this.model.value.replace(/\s+/g, "") : this.model.value;
            if (this._textbox.value != undefined && (this.model.watermarkText == "" || (this.model.watermarkText != "" && this.model.value != ""))) {
                if (this.model.hidePromptOnLeave) {
                    this._unStrippedMask = this._textbox.value;
                    this._textbox.value = this.get_UnstrippedValue();
                }
                else this._unStrippedMask = this._textbox.value;
            }
            if (this.model.inputMode != "password")
                this._setWaterMark();
            this._raiseEvents("change");
            this._raiseEvents("focusOut");
        },


        _OnKeyDownHandler: function (e) {
            if (this.model.readOnly) return;
            this._keyFlag = true;
            if (this._checkMask) {
                var pos = this.element[0].selectionStart;
                var txt = this._getStrippedValue(true);
                this._setValue(txt);
                this._setCaretPosition(pos);
                this._checkMask = false;
            }
            this._keypressFlag = 0;
            this._keyupFlag = true;
            var val = ej.browserInfo().name;
            var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
            if ((ej.isDevice() && ej.isTouchDevice()) && !iOS && (e.keyCode == 229 || ((val == "mozilla") && e.keyCode == 0 && e.charCode == 0) || val == "edge" || val == "msie")) {
                this._keyupFlag = false;
            }
            this._raiseEvents("onKeyDown", null, { keyCode: e.keyCode, altKey: e.altKey, shiftKey: e.shiftKey, ctrlKey: e.ctrlKey, originalArgs: e });
			this._raiseEvents("keyDown", null, { keyCode: e.keyCode, altKey: e.altKey, shiftKey: e.shiftKey, ctrlKey: e.ctrlKey, originalArgs: e });
            this.element.removeClass("error");

            if (this._maskLength == 0)
                return true;

            var unicode = e.keyCode ? e.keyCode : e.charCode;
            var actualkey = String.fromCharCode(unicode);
            var currentPos = this._seekNext();
            var promptChar = this.model.showPromptChar ? "_" : " ";
            var val = ej.browserInfo().name;
            if ((val == "msie") && (this._textbox.value == "")) {
                if (!(this.model.maskFormat.indexOf("\\") >= 0))
                    this._textbox.value = this.model.maskFormat.replace(/[9?CANa#&]/g, '_');
                else {
                    for (var pos = 0; pos < this.model.maskFormat.length; ++pos) {
                        var val;
                        if (this.model.maskFormat[pos - 1] == "\\")
                            this._textbox.value += this.model.maskFormat[pos];
                        else

                            if (!(this.model.maskFormat[pos] == "\\"))
                                this._textbox.value += this.model.maskFormat[pos].replace(/[9?CANa#&]/g, '_');
                    }
                }
                this._setCaretPosition(currentPos);
            }

            if (unicode >= 35 && unicode <= 41) {
                if (window.navigator.appCodeName == "Mozilla" || window.navigator.appCodeName == "opera") {
                    this._keypressFlag = 1;
                }
            }
            if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 88))) {
                this._keypressFlag = 1;
                return;
            }
            else if (unicode == 8) {

                if (this.model.inputMode != "password") {
                    this._keydownFlag = 1;
                    // Seek to next valid position
                    var currentPos = this._seekBefore();
                    if (!this._selectedTextKeyDown) {
                        if (currentPos >= 0 && currentPos < this._maskLength)
                            this._writeBuffer(promptChar, currentPos, e);                       
                        if (currentPos < 0) currentPos = 0;
                        this._setCaretPosition(currentPos);
                    }
                    else if (!this.model.showPromptChar && this._selectedTextKeyDown)
                    {                        
                        if (e.keyCode == 8 && currentPos == "-1" && this.indexValue != null) {
						    this.indexValue = [];
							this.temp_index = 0;
						}
						this._textbox.value = this.get_UnstrippedValue();
                        this._setCaretPosition(currentPos+1);
                    }
                    this._keydownFlag = 0;
                    this._selectedTextKeyDown = 0;
                    if (e.keyCode == 8 && currentPos == "-1" && this.indexValue != null) {
						this.indexValue = [];
						this.temp_index = 0;
					}
                    e.preventDefault();
                    this._prevValue = this._textbox.value;
                    this._prevPosition = this.element[0].selectionStart;
                    this._keyFlag = false;
                    return false;
                }
                this._keypressFlag = 1;
                return true;
            }
            else if (e.keyCode == 46 || e.keyCode == 127) {
                if (this.model.inputMode != "password") {
                    this._keydownFlag = 2;
                    // Seek to next valid position
                    currentPos = this._seekNext();
                    if (!this._selectedTextKeyDown) {
                    if (currentPos >= 0 && currentPos < this._maskLength) {                        
                       var _position=this. _getCunrrentPos(currentPos);
                            if (!((this.model.maskFormat[currentPos + _position] == "&")))
                                this._writeBuffer(promptChar, currentPos, e);
                        }
                    }
                    else if (!this.model.showPromptChar && this._selectedTextKeyDown) {
                        this._textbox.value = this.get_UnstrippedValue();
                        this._setCaretPosition(currentPos);
                    }
                    this._keydownFlag = 0;
                    this._selectedTextKeyDown = 0;
                    //if (e.keyCode == 46 && currentPos == "13" && this.indexValue != null) this.indexValue = [];
                    e.preventDefault();
                    return false;
                }
                this._keypressFlag = 1;
                return true;
            }
        },


        _ErrorHandler: function (currentPos) {
            var promptChar = this.model.showPromptChar ? "_" : " ";
            if (this._textbox.value == "") this._textbox.value = this.model.maskFormat.replace(/[9?$CANa*]/g, promptChar);
            this._setCaretPosition(currentPos);
            this._showAlert();
        },
        _getCunrrentPos: function (currentPos) {
            var _position = 0;
            for (var temp = 0; temp <= currentPos + _position; temp++) {
                if ((this.model.maskFormat[temp] == "\\"))
                    _position += 1;
            }
            return _position;
        },


        _OnKeyPressHandler: function (e) {
            if (this.model.readOnly) return;
            this._keyFlag = false;
            this._raiseEvents("keyPress", null, { keyCode: e.keyCode, altKey: e.altKey, shiftKey: e.shiftKey, ctrlKey: e.ctrlKey, originalArgs: e });
            if (this._maskLength == 0)
                return true;

            var unicode = e.keyCode ? e.keyCode : e.charCode;
            var actualkey = String.fromCharCode(unicode);
            var promptChar = this.model.showPromptChar ? "_" : " ";
            var currentPos = this._seekNext();
            var val = ej.browserInfo().name;
            var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
            if ((ej.isDevice() && ej.isTouchDevice()) && !iOS && (val == "edge" || val == "msie")) {
                return true;
            }
            if (this._validateChars(unicode, currentPos)) {
                if (((val == "mozilla") || (val == "opera")) && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39)) {
                }
                else if (((val == "mozilla") || (val == "opera")) && (e.ctrlKey && (unicode == 97 || unicode == 99 || unicode == 118 || unicode == 120))) {
                }
                else {
                    if (this._textbox.value == "") this._textbox.value = this.model.maskFormat.replace(/[9?$CANa&*]/g, promptChar);
                    if (this.model.maskFormat.indexOf("\\") >= 0) {
                        if (currentPos < this._maskLength)
                            this._writeBuffer(actualkey, currentPos, e);
                    }
                    else
                        this._writeBuffer(actualkey, currentPos, e);
                }
                this._prevValue = this._textbox.value;
            }
            else
                if (((val == "mozilla") || (val == "opera")) && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39)) {
                }
                else if (((val == "mozilla") || (val == "opera")) && (e.ctrlKey && (unicode == 97 || unicode == 99 || unicode == 118 || unicode == 120))) {
                }
                else if (this.model.maskFormat.indexOf("&") >= 0 || this.model.maskFormat.indexOf("\\") >= 0) {
                    var _position = this._getCunrrentPos(currentPos);
                    if (!((this.model.maskFormat[currentPos + _position] == "&") && (unicode == 127))) {
                        if (this.model.maskFormat.indexOf("\\") >= 0) {
                            if (currentPos < this._maskLength) {
                                if (this._validateChars(unicode, currentPos + _position) || (this.model.maskFormat[currentPos + _position - 1] == "\\"))
                                    this._writeBuffer(actualkey, currentPos, e);
                                else
                                    this._ErrorHandler(currentPos);
                            }
                        }
                        else {
                            if (this._validateChars(unicode, currentPos + _position))
                                this._writeBuffer(actualkey, currentPos, e);
                            else
                                this._ErrorHandler(currentPos);
                        }
                    }
                }
                else
                    this._ErrorHandler(currentPos);

            if (!this._keypressFlag && unicode != 9) {
                this._keypressFlag = 0;
                e.preventDefault();
                return false;
            }
            this._keypressFlag = 0;
        },

        _OnInputHandler: function (e) {
            var val = ej.browserInfo().name;
            var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream && !this._keyFlag;
            var isIE = (this._keyupFlag && (val == "edge" || val == "msie"));
			if (this._maskLength == 0)
                return true;
            if ((ej.isDevice() && ej.isTouchDevice()) && (iOS || isIE)) {
                var diffLen = this._textbox.value.length - this._prevValue.length;
                var pos = (diffLen == 1) ? this._seekNext(true) : this._seekNext(true, diffLen - 1), keyCode;
                var value = this._textbox.value[this.element[0].selectionStart - 1];
                keyCode = value.charCodeAt(0);
                if (!this._validateChars(keyCode, pos)) {
                    this._textbox.value = this._prevValue;
                    this._setCaretPosition(pos);
                    this._ErrorHandler(pos);
                }
                else {
                    this._textbox.value = this._prevValue;
                    var actualkey = String.fromCharCode(keyCode);
                    this._writeBuffer(actualkey, pos, e);
                }
                this._prevValue = this._textbox.value;
                this._prevPosition = this.element[0].selectionStart;
                this._checkMask = true;
            }
            if ((ej.isDevice() && ej.isTouchDevice()) && !iOS && !this._keyupFlag) {
                var start = this.element[0].selectionStart;
                var end = this.element[0].selectionEnd;
                if (start != end) {
                    this._textbox.setSelectionRange(end, end);
                }
                var promptChar = this.model.showPromptChar ? "_" : " ";
                var diffLen = this._textbox.value.length - this._prevValue.length;
                var isBackSpace = (diffLen <= 0) ? true : false;
                var currentPosition = isBackSpace ? this._seekBefore(true) : this._seekNext(true), keyCode;
                var value = this._textbox.value[this.element[0].selectionStart - 1];
                var start = 0;
                if (this.element[0].selectionStart > 0)
                    keyCode = value.charCodeAt(0);
                if (this._tempMask.length > this._textbox.value.length) {
                    if (ej.isNullOrUndefined(value) && this._emptyMask.slice(1, this._emptyMask.length) == this._textbox.value)
                        this._textbox.value = this._emptyMask;
                    else {
                        if (isBackSpace) {
                            this._textbox.value = this._prevValue;
                            this._writeBuffer(promptChar, currentPosition, e);
                        } else {
                            var pos = currentPosition;
                            if (!this._validateChars(keyCode, pos)) {
                                this._textbox.value = this._prevValue;
                                this._setCaretPosition(pos);
                                this._ErrorHandler(pos);
                            }
                            else {
                                this._textbox.value = this._prevValue;
                                var actualkey = String.fromCharCode(keyCode);
                                this._writeBuffer(actualkey, pos, e);
                            }
                        }
                    }
                    this._setCaretPosition(currentPosition);
                }
                else {
                    var pos = currentPosition;
                    if (!this._validateChars(keyCode, pos)) {
                        this._textbox.value = this._prevValue;
                        this._setCaretPosition(pos);
                        this._ErrorHandler(pos);
                    }
                    else {
                        this._textbox.value = this._prevValue;
                        var actualkey = String.fromCharCode(keyCode);
                        this._writeBuffer(actualkey, pos, e);
                        for (var i = 0; i < this._emptyMask.length; i++) {
                            if (this._emptyMask[i] == " " && this._textbox.value[i] != " " && value == this._textbox.value[i]) {
                                this._textbox.value = this._textbox.value.substring(0, startPos - 1) + " " + value + this._textbox.value.substring(endPos, this._textbox.value.length);
                                this._setCaretPosition(currentPosition + 1);
                            }
                        }
                    }
                }
                this._prevValue = this._textbox.value;
                this._prevPosition = this.element[0].selectionStart;
                this._keyupFlag = true;
            }
            this._keyFlag = false;
        },

        _OnKeyUpHandler: function (e) {
            if (this._maskLength == 0) this._raiseEvents("change");
            this._raiseEvents("keyUp", null, { keyCode: e.keyCode, altKey: e.altKey, shiftKey: e.shiftKey, ctrlKey: e.ctrlKey, originalArgs: e });
            if (!ej.isNullOrUndefined(this.model.validationRules)) this._hiddenInput.valid();
        },


        _OnMouseOverHandler: function (e) {
            this._raiseEvents("mouseOver");
        },


        _OnMouseOutHandler: function (e) {
            this._raiseEvents("mouseOut");
        },


        _raiseEvents: function (eventName, isCode, additionalArgs) {
            var eventArgs, strippedVal = this.get_StrippedValue(), unstrippedVal = this.get_UnstrippedValue();
            this.model.value = unstrippedVal !== null ? (this.model.customCharacter == null && $.trim(unstrippedVal.replace(/[\(\)-]/g, "")) == "") ? null : unstrippedVal : null;
            if (eventName == "change") {
                if (this.previousValue != this.model.value) {
                    this.previousValue = this.model.value;
                }
                else {
                    if (this._focusValue == this.model.value)
                        return false;
                }
            }
            eventArgs = { value: unstrippedVal, unmaskedValue: strippedVal };
            if (eventName == "change") eventArgs["isInteraction"] = !isCode ;
            if (eventName == "change") {
                this._trigger("_change", eventArgs);
                ej.isNullOrUndefined(this.model.value) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            }
            if (additionalArgs) $.extend(true, eventArgs, additionalArgs);
			this._hiddenInput.val(strippedVal);
			this._trigger(eventName, eventArgs);
			},

        _OnValueChange: function () {
            if (this._textbox.value == "" && this._maskModel != "")
                this._textbox.value = this._maskModel;
            this._setValue(this._textbox.value);
        }

    });

    ej.InputMode = {
		/**  support for user enter character in password format. */
		Password: "password", 
		/**  support for user enter character in normal format. */
        Text: "text"
    };
})(jQuery, Syncfusion);;