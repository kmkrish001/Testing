/*!
*  filename: bold.report-designer-widgets.js
*  version : 3.1.75
*  Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/**
* @fileOverview Plugin to style the Html ListView elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejListViewBase", "ej.ListViewBase", {
        _addToPersist: ["selectedItemIndex", "checkedIndices"],
        defaults: {
            
            height: null,

            width: null,

            selectedItemIndex: -1,

            enableGroupList: false,
            
            enableAjax: false,
            
            enableCache: false,
            
            enablePersistence: false,
			
			ready: null,
            
            load: null,

            itemRequestCount: 5,

            totalItemsCount: 5,
			
            loadComplete: null,
            
            ajaxBeforeLoad: null,

            ajaxSuccess: null,

            ajaxError: null,

            ajaxComplete: null,

            ajaxSettings: {
                type: 'GET',
                cache: false,
                async: true,
                dataType: "html",
                contentType: "html",
                url: "",
                data: {}
            },
                                    
            renderTemplate: false,

            templateId: null,

            persistSelection: false,

            preventSelection: false,

            dataSource: [],

            query: null,

            allowVirtualScrolling: false,

            virtualScrollMode: "normal",

            showHeader: false,
			
			showHeaderBackButton: false,

            cssClass: "",

            headerTitle: "Title",

            headerBackButtonText: null,

            enableFiltering: false,

            enableCheckMark: false,

            checkedIndices :[],
			
			locale:"en-US"

        },

        observables: ["selectedItemIndex", "dataSource"],
        selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),
        dataSource: ej.util.valueFunction("dataSource"),
        checkedIndices: ej.util.valueFunction("checkedIndices"),

        _updateModelItems: function () {
            this.model.items = eval(this.model.items);
            var ang_attr = this.model.items;
            if (ang_attr.length) {
                var ul = ej.buildTag("ul.e-m-clearall");
                for (var i = 0; i < ang_attr.length; i++) {
                    ang_attr[i].items = [];
                    var ang_li = ej.buildTag("li");
                    if (this.model.items[i].template)
                        ang_li.html(this.model.items[i].template);
                    if (!this.model.items[i].childId && this.model.items[i].href)
                        this.model.items[i].childId = ("page_" + parseInt(Math.random().toFixed(3) * 1000));
                    if (this.model.items[i].renderTemplate) {
                        if (!this._storedTemplate[i]) {
                            if (this.model.items[i].templateId) {
                                var ele = this._tempContent.find('#' + this.model.items[i].templateId).remove();
                                this._storedTemplate[i] = ele[0].nodeName && ele[0].nodeName.toLowerCase() == "script" ? ej.getClearString(ele[0].innerHTML) : ele[0].outerHTML;
                            }
                            else
                                this._storedTemplate[i] = this.model.items[i].template;
                            this.model.items[i].templateId = this._storedTemplate[i];
                        }
                    }
                    if (this.model.fieldSettings)
                        this.model.fieldSettings = $.extend(this.defaults.fieldSettings, this.model.fieldSettings);
                    ul.append(ang_li);
                }
                this.element.append(ul)
            }
            else {
                var ul = this.element.find(">ul");
                var groupid = 1;
                for (var ulindex = 0; ulindex < ul.length; ulindex++) {
                    this._listitems = $(ul[ulindex]).find(">li");
                    for (var index = 0; index < this._listitems.length; index++) {
                        var element = this._listitems[index];
                        if ((ej.getAttrVal(element, "data-ej-primarykey") == null) && ($(element).find("ul").length)) {
                            var primaryKey = Math.round(Math.random() * 100);
                            $(element).attr("data-ej-primarykey", primaryKey);
                        }
                        else
                            primaryKey = "";
                        var groupTitle = ej.getAttrVal($(ul[ulindex]), "data-ej-grouplistitle") ? ej.getAttrVal($(ul[ulindex]), "data-ej-grouplistitle") : "GroupList" + groupid;
                        this.model.items.push(this._itemsObjectCollection($(this._listitems[index]), primaryKey, null, groupTitle));
                        this._nestedListitems = $(this._listitems[index]).find("ul >li");
                        for (var index1 = 0; index1 < this._nestedListitems.length; index1++) {
                            var element1 = this._nestedListitems[index1];
                            if ((ej.getAttrVal(element1, "data-ej-primarykey") == null) && ($(element1).find("ul").length)) {
                                var primaryKey = Math.round(Math.random() * 100);
                                $(element1).attr("data-ej-primarykey", primaryKey);
                            }
                            else
                                primaryKey = "";
                            var parentPrimaryKey = ej.getAttrVal($($(element1).parent()).closest("li"), "data-ej-primarykey");
                            this.model.items.push(this._itemsObjectCollection($(this._nestedListitems[index1]), primaryKey, parentPrimaryKey, groupTitle));
                        }
                    }
                    groupid++;
                }
            }
        },

        _load: function () {
            this._orgEle = this.element.clone();
            this._index = 0;
            this._items = [];
            this._dummyUl = [];
            this._virtualCount = 0;
            this._liItemHeight = 0;
            this._requestType = null;
            this._checkedValues = [];
            this._checkedValues = this.model.checkedIndices;
            this.model.id = this.element[0].id;
            if (this.model.allowVirtualScrolling && this.model.query != null) {
                this._savedQueries = this.model.query.clone();
            }
            if (this.model.load)
                this._trigger("load");
            this.model.fieldSettings = eval(this.model.fieldSettings);
            if (this.model.fieldSettings) {
                if (ej.DataManager && this._dataUrl instanceof ej.DataManager) {
                    if (!this._dataUrl.dataSource.offline && !(this._dataUrl.dataSource.json && this._dataUrl.dataSource.json.length > 0)) {
                        this._queryPromise(0, this, this.model.totalItemsCount, null);
                    }
                    else {
                        if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "continuous") {
                            if (ej.isNullOrUndefined(this._totalitemscount)) this.model.totalItemsCount = this._dataUrl.dataSource.json.length;                                                            
                        }
                        this._queryPromise(0, this, this.model.totalItemsCount, null);
                    }
                }
                else if (!ej.isNullOrUndefined(this._dataUrl) && !(this._dataUrl instanceof ej.DataManager) && !ej.isNullOrUndefined(this._totalitemscount)) {
                    this._dataUrl = ej.DataManager(this._dataUrl);
                    this._rawList = ej.DataManager(this._dataUrl.dataSource.json).executeLocal(ej.Query().take(this.model.totalItemsCount).clone());
                    this.model.dataSource = this._rawList;
					this._renderControl();
                }
				else
					this._renderControl();
            }           
        },
       
        _loadVirtualData: function (args) {
            this._dummyUl=[];
            var list = this._renderLists();
            $.views.helpers({ _checkAjaxUrls: this._checkAjaxUrl, _checkImgUrls: this._checkImgUrl, _checkIsChecked: this._checkIsCheck, Object: this, ej: ej });           
            this.jsRender = ej.buildTag("script#" + this.model.id + "_Template", "", {}, { "type": "text/x-jsrender" }); //Template for parent item
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
                this.jsRender[0].text = list[0].outerHTML.replace(/&gt;/g, '>');
            else
                this.jsRender[0].text = list[0].outerHTML.replace(/&gt;/g, '>');          
            this.jsChildRender = ej.buildTag("script#" + this.model.id + "_ChildTemplate", "", {}, { "type": "text/x-jsrender" });  //Template for child item
            if(this.model.allowVirtualScrolling == true && this.model.virtualScrollMode == "normal") var ulContainer = ej.buildTag("div");
            var ul = ej.buildTag("ul." + this._prefixClass + "childcontainer " + this._prefixClass + "list-hdr " + this._prefixClass + "clearall");
            list.addClass(this._prefixClass + "childli");
            ul[0].innerHTML = "{{for items}}" + list[0].outerHTML + "{{/for}}";             
            var result = args;
            if (result) {
                ul.empty().html($(this.jsRender).render(result));
                var _ulItems = ul.clone().find('li'), temp = "";
                if (this._initEJCheckBox) this._initEJCheckBox(ul);                     				               
                var proxy = this;
                for (var j =0; j < result.length; j++) {              
                    if (result[j] && result[j].attributes) {
                        $.each(result[j].attributes, function (i, attr) {
                            if (attr && attr.name.toLowerCase() == "class") temp = $(_ulItems[j]).attr('class');
                        });
                    }
                    if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                        var k = this.realUllength;	
                        if(this.model.enableCheckMark){
                            if($(this.element.find('li').eq(k).find('.e-chkbox-wrap')).length!=0){
                                var x=$(this.element.find('li').eq(k).find('.e-chkbox-wrap'))[0];
                                var checked = x.getAttribute("aria-checked")=="true" ? true : false;
                                $($(_ulItems[j]).find(".e-lv-check")).ejCheckBox({ checked: checked });		
                            }
                            else{
                                var checked = false;
                                if(this._removeIndex!=j)
                                    $($(_ulItems[j]).find(".e-lv-check")).ejCheckBox({ checked: checked });	
                                else 
                                    $(_ulItems[j]).find('.e-lv-check').remove();									
                            }																							 													 									
                        }
                        if($(_ulItems[j]).find('.e-lv-check').length !=0) $(_ulItems[j]).find('.e-lv-check').parent().addClass("e-lv-checkdiv");
                        this._dummyUl.push(_ulItems[j]);
                        this._removeEmptyElements();
                        this.scrollerObj.refresh();
                    }
                    else if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "continuous") {
                        if(this.model.enableCheckMark){																										 				
                            $($(_ulItems[j]).find(".e-lv-check")).ejCheckBox();												
                        }
                        $(_ulItems[j]).find('.e-lv-check').parent().addClass("e-lv-checkdiv");
                        this._lContainer.find('ul').append(_ulItems[j]);
                        this._removeEmptyElements();
                        this._lContainer.find('ul li.e-lastitem').removeClass(this._prefixClass + "lastitem");
                        this._lContainer.find('ul li:last').addClass(this._prefixClass + "lastitem");
                        this.scrollerObj.refresh();
                    }
                    this.realUllength+=1;
                }
            }
        },
        _removeEmptyElements:function()
        {
            this.eLi = this.element.find('li.' + this._prefixClass + 'list');
            this.eLi.removeEleEmptyAttrs();
            this.eLi.find('.' + this._prefixClass + 'chevron-right_01').removeEleEmptyAttrs();
        },

        _renderControl: function () {
            var proxy = this;
            this.element.addClass(this._prefixClass + "parentlv " + this.model.cssClass);
            this._lbEle = ej.buildTag("div." + this._rootCSS);
            this._lbEle.addClass("subpage");
            if(this.model.allowVirtualScrolling == true && this.model.virtualScrollMode == "normal") var ulContainer = ej.buildTag("div." + this._prefixClass + "sub-list-container");
            this._lContainer = ej.buildTag("div." + this._prefixClass + "list-container#" + this.model.id + "_container");
            if (this._hasDataSource())
                var ul = this.element.find(">ul");
            else
                var ul = this.element.find("ul:first");
            if (this.model.showHeader) {
                var hdr = this._renderHeader(this.model.id, false , this.model.headerTitle, this.model.headerBackButtonText);
                this._lbEle.prepend(hdr);
            }
            if (this._hasDataSource() && !this.model.renderTemplate)
                this.element.empty();
            if (this.model.renderTemplate) {
                if (this.model.templateId) {
                    if (this._tempContent.find('#' + this.model.templateId).length) {
                        this._template = this._tempContent.find('#' + this.model.templateId);
                        ej.destroyWidgets(this._template);
                        if (this._template[0].nodeName.toLowerCase() != "script")
                            this._template.remove();
                        this._template = this._template[0].nodeName && this._template[0].nodeName.toLowerCase() == "script" ? ej.getClearString(this._template[0].innerHTML) : this._template[0].outerHTML;
                    }
                }
                else {
                    ej.destroyWidgets(this.element);
                    this._template = this.element.html();
                    this.element.empty();
                }
				this._lContainer.addClass(this._prefixClass+"template-list");
            }
            if (this.model.renderTemplate && !this._hasDataSource() && !this.model.enableGroupList) {
                this.element.append(this._lbEle.append(this._lContainer));
				$(this.element.find('.' + this._prefixClass + 'lv-check').parent()).addClass(this._prefixClass+'template-checkmark');
                if (this._template) {
                    this._lContainer.append(this._template);
                    if (ej.widget.init)
                        ej.widget.init(this._lContainer);
                }
            }
            else if (!this.model.renderTemplate || this.model.renderTemplate && this._hasDataSource() || this.model.renderTemplate && this.model.enableGroupList) {
                this._model_index = 0;
                if (this.model.enableGroupList) {
                    this._lContainer.addClass(this._prefixClass + "grouped");
                    var innerDiv = ej.buildTag("div." + this._prefixClass + "grouplist");
                    ul = this.element.children();
                    if (ul.length || this.dataSource().length) {
                        if (this.dataSource().length)
                            var group = ej.DataManager(this.dataSource()).executeLocal(ej.Query().from(this.dataSource()).group(this.model.fieldSettings['groupID']));
                        else
                            var group = ej.DataManager(this.model.items).executeLocal(ej.Query().from(this.model.items).group(this.model.fieldSettings['groupID']));
                        var length = group.length;
                        var title, ulItem;
                        for (var i = 0; i < length; i++) {
                            this._items = group[i].items;
                            if (this._hasDataSource()) {
                                ulItem = ej.buildTag('ul', "", {}, { "data-ej-grouplisttitle": group[i].key });
                                this._lbEle.append(ulItem);
                            }
                            else
                                ulItem = ul[i];
                            title = this._hasDataSource() ? group[i].key : ej.getAttrVal($(ulItem), 'data-ej-grouplisttitle', "GroupList" + (i + 1));
                            $(ulItem).attr("data-ej-grouplisttitle", title);
                            var groupdiv = ej.buildTag("div." + this._prefixClass + "groupdiv", ej.buildTag("div." + this._prefixClass + "grouptitle", title));
                            innerDiv.append(groupdiv.append(this._renderListItems($(ulItem).addClass(this._prefixClass + "grouped"))));
                        }
                    }
                    else if (this._template) {
                        ej.destroyWidgets(this._template);
                        innerDiv[0].innerHTML = this._template;
                    }
					this._lContainer.append(innerDiv);
                    if (ej.widget.init)
                        ej.widget.init(innerDiv);
                }
                else {
                    if (this._hasDataSource()) {
                        var ul = ej.buildTag('ul');
                        this._items = this.dataSource();
                        this._items = eval(this._items);
                        for (var j = 0; j < this._items.length; j++) {
                            if (this._items[j].href && !this._items[j].childId) {
                                this._items[j].childId = ("page_" + parseInt(Math.random().toFixed(3) * 1000));
                            }
                        }
                    }
                    if (ul.length) {
                        ej.destroyWidgets(ul);
                        if(this.model.allowVirtualScrolling == true && this.model.virtualScrollMode == "normal") {
                            ulContainer.append(this._renderListItems(ul));
                            $(ul).find('li').attr("data-ej-page",0);
                            this._lContainer.append(ulContainer);
                        }
                        else 
                            this._lContainer.append(this._renderListItems(ul));
                    }
                    else if (this._template) {
                        ej.destroyWidgets(this._template);
                        this._lContainer[0].innerHTML = this._template;
                    }
                }
                this.element.prepend(this._lbEle);
                if (this.model.enableFiltering)
                    this._createFilterWrapper(this._lbEle);
                this._setHeightWidth();
                this._lContainer.ejScroller({
                    height: this._lContainer.outerHeight(),
                    width: 0,
                    scrollerSize: 20,
                    scroll: function (e) {
                        proxy._onScroll(e);
                    },
                });
                this.scrollerObj = this._lContainer.ejScroller("instance");
                this._lbEle.append(this._lContainer);
                if (ej.widget.init)
                    ej.widget.init(this._lContainer);
                var eLi = this.element.find('li.' + this._prefixClass + 'list');
                eLi.removeEleEmptyAttrs();
                eLi.find('.' + this._prefixClass + 'chevron-right_01').removeEleEmptyAttrs();
                if(this.model.allowVirtualScrolling == true && this.model.virtualScrollMode == "normal") {
                    this._liItemHeight = $(this.element.find('li')[0]).outerHeight();
                    var totalHeight = this._totalCount * this._liItemHeight;
                    $('.e-sub-list-container ul').height(totalHeight);
                }
                if (ej.widget.init)
                    ej.widget.init(this._lbEle);
                var ulItems = this.element.find('ul');
                ulItems.find('li:first').addClass(this._prefixClass + "firstitem");
                ulItems.find('li:last').addClass(this._prefixClass + "lastitem");
                this._liEl = this.element.find("li");
                if (this.selectedItemIndex() >= 0 && !this.model.preventSelection && this.model.persistSelection) {
                    if (!ej.getBooleanVal(ulItems[this.selectedItemIndex()], 'data-preventselection', this.model.preventSelection) && ej.getBooleanVal(ulItems[this.selectedItemIndex()], 'data-persistselection', this.model.persistSelection)) {
                        this._currentItem = $(this._liEl[this.selectedItemIndex()]);
                        this._prevItem = this._currentItem;
                        this._currentItem.removeClass(this._prefixClass + "state-default").addClass(this._prefixClass + "state-active");
                    }
                }
                $(this.element.find('.' + this._prefixClass + 'lv-check').parent()).addClass(this._prefixClass + 'lv-checkdiv');
				if(this.model.renderTemplate) $(this.element.find('.' + this._prefixClass + 'lv-check').parent()).addClass(this._prefixClass+'template-checkmark');
                $(this.element.find('.' + this._prefixClass + 'lv-check').closest('li.' + this._prefixClass + 'list')).addClass(this._prefixClass + 'list-check');
                $(this.element.find('.' + this._prefixClass + 'lv-input').closest('.' + this._prefixClass + 'lv-filter')).addClass(this._prefixClass + 'lv-inputdiv');
                this._wireEvents();
            }
            this._setHeightWidth();
			if (this.model.height !== null) 
				if (this._lContainer.height() > this.model.height)
					this._refreshScroller(this._lContainer,false);
			if (this.scrollerObj) {
				this.scrollerObj.refresh();
				$(this.scrollerObj.element).find(".e-vhandlespace").css("height",($(this.scrollerObj.element).find(".e-vhandlespace").height() -1));
            }
            if (this.model.loadComplete)
                this._trigger("loadComplete");
        },

        _createFilterWrapper: function (element) {
            var fDiv = this._createFilterDiv();
            var fAnchor = ej.buildTag("a." + this._prefixClass + "lv-anchor", ej.buildTag('span.' + this._prefixClass + 'input-btn'), {}, { "Title": "Clear text", "data-role": "none" });
            $(fDiv).append(fAnchor);
            element.append(fDiv);
        },
        
		_refreshScroller: function (container,isChild) {
            //added start
               if (this.model.virtualScrollMode == "continuous") {
                this._lContainer.find(".e-content, .e-vhandle,.e-vhandle div").removeAttr("style");
                this._lContainer.css({ "display": "block" });
                if (this.scrollerObj) {
                    this.scrollerObj.model.height = this._lContainer.height();
                    this.scrollerObj.refresh();
                    this.scrollerObj.option("scrollTop", 0);
                }
            }
            //added end
            container.find(".e-vhandle div").removeAttr("style");
            var hgt;
            if(isChild)
                hgt = this.model.showHeader && this.model.enableFiltering ? this.model.height - ((ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'header'), 'outerHeight')) + (ej.getDimension($(id).find('.' + this._prefixClass + 'lv-filter'), 'outerHeight'))) - 2 : this.model.showHeader ? this.model.height - ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'header'), 'outerHeight') - 2 : this.model.enableFiltering ? this.model.height - (ej.getDimension($(id).find('.' + this._prefixClass + 'lv-filter'), 'outerHeight')) - 2 : this.model.height - 2;
            else
                hgt = this.model.showHeader && this.model.enableFiltering ? this.model.height - ((ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'header'), 'outerHeight')) + ($('.' + this._prefixClass + 'lv-filter').height())) - 2 : this.model.showHeader ? this.model.height - ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'header'), 'outerHeight') - 2 : this.model.enableFiltering ? this.model.height - $('.' + this._prefixClass + 'lv-filter').height() - 2 : this.model.height - 2;
            if (this.scrollerObj) {
                this.scrollerObj.model.height = hgt;
            }
        },
        
        _renderListItems: function (ul) {
            ul.addClass(this._prefixClass + "list-hdr " + this._prefixClass + "clearall");
            this._liItems = ul.find("li");
            if (this._liItems.length && !this._hasDataSource() || this._hasDataSource()) {
                this._renderParentChildTemplate();
                if (!this._hasDataSource() && !this.model.enableGroupList) {
                    this._items = this.model.items;
                }
                var items = this._items;
                var proxy = this;
                if (this.model.allowVirtualScrolling) {
                    var childItem = [];
                    var result =  { parent: items, child: childItem };
                }
                else {
                    var result = this._filterParentChild(items);
                }
                if (result.child.length)
                    this._childRendering(result.child);
                if (result.parent) {
                    ul.empty().html($(this.jsRender).render(result.parent));
                    var ulItems = ul.find('>li'), temp = "";
                    for (var j = 0; j < ulItems.length; j++) {
                        if (result.parent[j] && result.parent[j].attributes) {
                            $.each(result.parent[j].attributes, function (i, attr) {
                                if (attr && attr.name.toLowerCase() == "class") temp = $(ulItems[j]).attr('class');
                            });
							$(ulItems[j]).addEleAttrs(result.parent[j].attributes);
							$(ulItems[j]).addClass(temp);
                        }
                    }
                }
            }
            if (this._initEJCheckBox)
                this._initEJCheckBox(ul);
            return ul;
        },

        _onScroll: function (e) {
            if (!e.scrollTop) return;
            var scrollerPosition = e.scrollTop, proxy = this;
            var source = this.dataSource();
            if (this.model.actionBegin)
                this._trigger("actionBegin", {});
            this.realUllength = this.element.find('li.e-list').length;
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "continuous") {
                var liHeight = $(this.element.find('li')[0]).outerHeight();
                if(scrollerPosition + this.model.height >= this.element.find("li").length * liHeight) { 
                    this._updateLoadingClass(true);
                    if (ej.DataManager && this._dataUrl instanceof ej.DataManager && !ej.isNullOrUndefined(this._dataUrl.dataSource.url)) {
                        this._queryPromise(this.realUllength, proxy, this.realUllength + this.model.itemRequestCount, e);
                    }
                    else if ((ej.DataManager && this._dataUrl instanceof ej.DataManager && this._dataUrl.dataSource.offline && (this._dataUrl.dataSource.json && this._dataUrl.dataSource.json.length > 0)) || (!ej.isNullOrUndefined(this._dataUrl) && !(this._dataUrl instanceof ej.DataManager))) {
                        window.setTimeout(function () {
                            proxy._updateLoadingClass(false);
                        }, 300);
                    }
                }
            }            
            else if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                var source = this.dataSource();
                if (ej.DataManager && this._dataUrl instanceof ej.DataManager) {
                    if (e.scrollTop != e.scrollData.scrollOneStepBy + e.scrollData.scrollable) {
                        window.setTimeout(function () {
                            if (proxy._virtualCount == 0) {
                                proxy._loadList();
                            }
                        }, 300);
                    }
                }
            }           
        },

        _localDataVirtualScroll: function () {
            var _rawlist = this._rawList.length;
            var queryPromise = ej.DataManager(this._dataUrl.dataSource.json).executeLocal(ej.Query().skip(_rawlist).take(this.model.totalItemsCount).clone());
            return queryPromise;
        },

        _loadList: function () {
            this._virtualCount++;
            var top = this.scrollerObj.scrollTop(), proxy = this, prevIndex = 0, prevPageLoad, nextIndex = null;
            this._currentPageindex = Math.round(top / (this._liItemHeight * this._items.length));
            if (($.inArray(this._currentPageindex, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) {
                if (this._currentPageindex == 0) {
                    if (($.inArray(this._currentPageindex + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPageindex = this._currentPageindex + 1;
                    }
                }
                else if (($.inArray(this._currentPageindex - 1, this._virtualPages)) != -1) {
                    if (($.inArray(this._currentPageindex + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPageindex = this._currentPageindex + 1;
                    }
                }
                else {
                    this._currentPageindex = this._currentPageindex - 1;
                }
            }
            prevPageLoad = !($.inArray(this._currentPageindex - 1, this._virtualPages) != -1);
            this._updateLoadingClass(true);
            for (var i = this._virtualPages.length - 1; i >= 0; i--) {
                if (this._virtualPages[i] < this._currentPageindex) {
                    prevIndex = this._virtualPages[i];
                    if (!(i + 1 == this._virtualPages.length))
                        nextIndex = this._virtualPages[i + 1];
                    break;
                }
            }
            var firstArg = prevPageLoad ? (this._currentPageindex - 1) * this._items.length : this._currentPageindex * this._items.length;
            var skipQuery = ej.Query().range(firstArg, this._currentPageindex * this._items.length + this._items.length), queryPromise, list;
            if (ej.DataManager && this._dataUrl instanceof ej.DataManager && !ej.isNullOrUndefined(this._dataUrl.dataSource.url)) {
                var skipParam = prevPageLoad ? (this._currentPageindex - 1) * this._items.length : this._currentPageindex * this._items.length;
                if(this._dataUrl.dataSource.offline == true)
                    skipQuery = ej.Query().skip(skipParam).take(this.model.itemRequestCount);
                else 
                    skipQuery = this._getQuery().skip(skipParam);
                if (prevPageLoad) {
                    for (i = 0; i < skipQuery.queries.length; i++) {
                        if (skipQuery.queries[i].fn == "onTake") {
                            skipQuery.queries.splice(i, 1);
                            break;
                        }
                    }
                    skipQuery.take(2 * this._items.length);
                }
                if (!proxy._trigger("actionBegin")) {
                    queryPromise = proxy._dataUrl.executeQuery(skipQuery);
                    queryPromise.done(function (e) {
                        proxy._appendVirtualList(e.result, prevIndex, proxy._currentPageindex, nextIndex, prevPageLoad);
                        proxy._trigger("actionSuccess", { e: e });
                    }).fail(function (e) {
                        proxy._virtualCount--;
                        proxy._trigger("actionFailure", { e: e });
                    }).always(function (e) {
                        proxy._updateLoadingClass(false);
                        proxy._trigger("actionComplete", { e: e });
                    });
                }
            }
            else if (ej.DataManager && this._dataUrl instanceof ej.DataManager && this._dataUrl.dataSource.offline && (this._dataUrl.dataSource.json && this._dataUrl.dataSource.json.length > 0)) {
                this._appendVirtualList(this._localDataVirtualScroll(), prevIndex, this._currentPageindex, nextIndex, prevPageLoad);
                this._updateLoadingClass(false);
            }
            else {
                list = ej.DataManager(proxy.model.dataSource).executeLocal(skipQuery);
                this._appendVirtualList(list, prevIndex, this._currentPageindex, nextIndex, prevPageLoad);
                this._updateLoadingClass(false);                
            }
        },


        _appendVirtualList: function (list, prevIndex, currentIndex, nextIndex, prevPageLoad) {
            this._virtualCount--;
            if (($.inArray(currentIndex, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) return false;
            if (prevPageLoad && ($.inArray(currentIndex - 1, this._virtualPages.sort()) != -1)) {
                list.splice(0, this._items.length);
                prevPageLoad = false;
            }
            var items = this._items.length, tempUl = $("<ul>"), firstVirtualHeight, secondVirtualHeight;
            firstVirtualHeight = prevPageLoad ? ((currentIndex - 1) * items * this._liItemHeight) - (prevIndex * items + items) * this._liItemHeight : (currentIndex * items * this._liItemHeight) - (prevIndex * items + items) * this._liItemHeight;
            if (firstVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: firstVirtualHeight }));
            this._loadVirtualData(list);
            $(this._dummyUl).attr("data-ej-page", currentIndex);
            if (prevPageLoad) {
                $(this._dummyUl).slice(0, items).attr("data-ej-page", currentIndex - 1);
            }
            tempUl.append(this._dummyUl);
            var ulItems = this.element.find('ul');
            secondVirtualHeight = (currentIndex * items + items) * this._liItemHeight;
            if (nextIndex != null) secondVirtualHeight = (nextIndex * items * this._liItemHeight) - secondVirtualHeight;
            else secondVirtualHeight = ulItems.height() - secondVirtualHeight;
            if (secondVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: secondVirtualHeight }));
            var selector = ulItems.find("li[data-ej-page=" + prevIndex + "]").last();
            selector.next().remove();
            tempUl.children().insertAfter(selector);
            this._removeEmptyElements();
            this._virtualPages.push(currentIndex);
            if (prevPageLoad) this._virtualPages.push(currentIndex - 1);
            if (ej.DataManager && this._dataUrl instanceof ej.DataManager && this._dataUrl.dataSource.offline && (this._dataUrl.dataSource.json && this._dataUrl.dataSource.json.length > 0)) {
                for (var i = 0; i < list.length; i++) {
                    this._rawList.push(list[i]);
                }               
            }
            this._virtualUl = ulItems.clone(true);
            ulItems.find('li.e-lastitem').removeClass(this._prefixClass + "lastitem");
            ulItems.find('li:last').addClass(this._prefixClass + "lastitem");
        },

        _updateLoadingClass: function (value) {
            var _id = this.element.attr("id")
            if(value){
                $("#" + _id+" .e-list-container.e-scroller .e-sub-list-container").addClass("e-load");
                $(".e-lv .e-list.e-state-default").css("opacity","0.5");
            }
            else {
                $("#" + _id+" .e-list-container.e-scroller .e-sub-list-container").removeClass("e-load");
                $(".e-lv .e-list.e-state-default").css("opacity","");
            }
            return this;
        },

        _queryPromise: function (start, proxy, end, event) {
            if (ej.DataManager && this._dataUrl instanceof ej.DataManager) {
                if (event==null) {
                    proxy._requestType = "init";
                    var queryPromise = this._dataUrl.executeQuery(this._getQuery());
                }
                else if(event != null) {
                    proxy._requestType = "request";
                    this._trigger('itemRequest', { event: event, isInteraction: true });
                    if(this._dataUrl.dataSource.offline == true) var mQuery = ej.Query();
                    else var mQuery = this._savedQueries.clone();
                    var queryPromise = this._dataUrl.executeQuery(mQuery.range(start, end));
                    this._updateLoadingClass(true);
                }
                queryPromise.done(function (e) {
                    if(proxy._requestType == "init"){
                        proxy._totalCount = e.count;
                        proxy.model.dataSource = e.result;
                        proxy._renderControl();
                        proxy._virtualPages = [0];
                    }
                    if(proxy._requestType == "request"){
                        proxy._trigger("actionBeforeSuccess", e);
                        proxy.realUllength =start;
                        proxy._loadVirtualData(e.result);
                    }
                    proxy._trigger("actionSuccess", { e: e });
                }).fail(function (e) {
                    proxy._trigger("actionFailure", { e: e });
                }).always(function (e) {
                    proxy._updateLoadingClass(false);
                    proxy._requestType = null;
                    proxy._trigger("actionComplete", { e: e });
                });
            }
        },

        _getQuery: function() {
            var remoteUrl, mapper = this.model.fieldSettings, queryManager = ej.Query();
            if (ej.isNullOrUndefined(this.model.query)) {
                var column = [];
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
            }
            else if (this.model.query) 
                queryManager = this.model.query.clone();
            if (this.model.allowVirtualScrolling) { 
                queryManager.requiresCount();
                queryManager.take(this.model.totalItemsCount);
            }
            remoteUrl = this.model.dataSource.dataSource;
            if (mapper)
                if ((remoteUrl && remoteUrl.url && !remoteUrl.url.match(mapper.tableName + "$")) || (remoteUrl && !remoteUrl.url) || (!remoteUrl))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            return queryManager;
        },
        
        _filterParentChild: function (items) {
            var dataMgr = ej.DataManager(items);
            var childItem = dataMgr.executeLocal(ej.Query().from(items).where(ej.Predicate(this.model.fieldSettings['parentPrimaryKey'], ej.FilterOperators.notEqual, null)).group(this.model.fieldSettings['parentPrimaryKey']));
            var parentItem = dataMgr.executeLocal(ej.Query().from(items).where(ej.Predicate(this.model.fieldSettings['parentPrimaryKey'], ej.FilterOperators.equal, null)));
            return { parent: parentItem, child: childItem };
        },

        _childRendering: function (grouped) {
            var proxy = this;
            if (grouped.length) {
                proxy.element.append($(proxy.jsChildRender).render(grouped));
                $.each(grouped, function (index, element) {
                    if (ej.widget.init)
                        ej.widget.init(proxy.element.find('#child' + element.key));
                    var ul = proxy.element.find('#child' + element.key).find('ul');
                    var li = ul.find('li');
                   var k = 0;
                    for (var j = 0; j < li.length; j++) {
                        if (grouped[k].items[j] && grouped[k].items[j].attributes)
                            $(li[j]).addEleAttrs(grouped[k].items[j].attributes);
                    }
                    k++;
                });
            }
        },
        _renderParentChildTemplate: function () {
            var list = this._renderLists();
            $.views.helpers({ _checkAjaxUrls: this._checkAjaxUrl, _checkImgUrls: this._checkImgUrl, _checkIsChecked: this._checkIsCheck, Object: this, ej: ej });
            //Template for parent item
            this.jsRender = ej.buildTag("script#" + this.model.id + "_Template", "", {}, { "type": "text/x-jsrender" });
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
                this.jsRender[0].text = list[0].outerHTML.replace(/&gt;/g, '>');
            else
                this.jsRender[0].text = list[0].outerHTML.replace(/&gt;/g, '>');
            //Template for child item
            this.jsChildRender = ej.buildTag("script#" + this.model.id + "_ChildTemplate", "", {}, { "type": "text/x-jsrender" });
            if(this.model.allowVirtualScrolling == true && this.model.virtualScrollMode == "normal") var ulContainer = ej.buildTag("div");
            var ul = ej.buildTag("ul." + this._prefixClass + "childcontainer " + this._prefixClass + "list-hdr " + this._prefixClass + "clearall");
            list.addClass(this._prefixClass + "childli");
            ul[0].innerHTML = "{{for items}}" + list[0].outerHTML + "{{/for}}";
            var div = ej.buildTag("div." + this._rootCSS + " subpage " + this._prefixClass + "childitem", "", {}, { "id": "{{if key}}child{{>key}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}", "style": "display:none" });
            var innerdiv = ej.buildTag("div." + this._prefixClass + "list-container", "", {}, { "id": "{{if key}}child{{>key}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}_container" });
            if (this.model.showHeader)
                div.append(this._renderHeader("{{if key}}child{{>key}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}", true, "Title"));
            if (this.model.enableFiltering)
                this._createFilterWrapper(div);
            if(this.model.allowVirtualScrolling == true && this.model.virtualScrollMode == "normal") div.append(innerdiv.append(ulContainer.append(ul)));
            else  div.append(innerdiv.append(ul));
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
                this.jsChildRender[0].text = div[0].outerHTML.replace(/&gt;/g, '>');
            else
                this.jsChildRender[0].innerHTML = div[0].outerHTML.replace(/&gt;/g, '>');
        },
    
        _renderChild: function (childId, ignoreWidth) {
            this._currentItem.attr('data-childid', childId);
            if (!this._currentItem.attr('data-childtitle'))
                this._currentItem.attr('data-childtitle', this._currentItem.text());
            this._createListDiv(childId);
            this._div.hide();
            this._container = ej.buildTag("div." + this._prefixClass + "list-container#" + childId + "_container");
            this.element.append(this._div);
        },

        _getText: function (element) {
            return $(element).clone()
           .children()
           .remove()
           .end()
           .text();
        },

        
        _checkImgUrl: function (item) {
            var obj = this.getRsc("helpers", "Object");
            var img = this.data[obj.model.fieldSettings.imageUrl];
            if (!$.support.pushstate)
                img = typeof App == "object" ? App.route.makeUrlAbsolute(img, true) : img;
            return "<img src = " + img + " class='" + obj._prefixClass + "list-img " + obj._prefixClass + "rel " + obj._prefixClass + "user-select'/>";
        },

        
        
        _checkAjaxUrl: function () {
            var href = this.data.href;
            var childid = this.data.childId;
            var rendertemp = this.data.renderTemplate;
            var tempid = this.data.templateId;
            var listObj = this.getRsc("helpers", "Object");
            var ej = this.getRsc("helpers", "ej");
            var content = listObj._currentPage(listObj);
            if (href && href.indexOf("#") != -1 && href != "#") {
                if (!listObj._storedContent[childid]) {
                    content.find(href).show();
                    var ele = content.find(href).clone();
                    content.find(href).hide();
                    listObj._storedContent[childid] = ele[0].nodeName && ele[0].nodeName.toLowerCase() == "script" ? ej.getClearString(ele[0].innerHTML) : ele[0].outerHTML;
                }
            }
            else {
                if (listObj._storedContent[this.index])
                    listObj._storedContent = ej._pushValue(listObj._storedContent, "", this.index);
            }

        },

        _currentPage: function (obj) {
            return obj._prefixClass == "e-m-" ? ej.getCurrentPage() : $("body");
        },
        
        _checkIsCheck: function (item) {
            return this.data[this.getRsc("helpers", "Object").model.fieldSettings.checked] ? true : false;
        },

        _onTouchStartHandler: function (evt) {
             this._mouseDown = { x: (!ej.isNullOrUndefined(evt.clientX)) ? evt.clientX : evt.touches[0].clientX, y: (!ej.isNullOrUndefined(evt.clientY)) ? evt.clientY : evt.touches[0].clientY };
			if(($(evt.target.parentElement).hasClass(this._prefixClass + 'disable')) || ($(evt.currentTarget).hasClass(this._prefixClass + 'disable'))) 
				return false;
            if (!ej.isDevice() && !ej._preventDefaultException(evt.target, this._preventDefaultException))
                evt.preventDefault && evt.preventDefault();
            if (ej.isWindows && ej.isWindows())
                ej._touchStartPoints(evt, this);
            this._currentItem = $(evt.currentTarget);
            this._scroll = false;
            if (!ej.getBooleanVal(this._currentItem, 'data-preventSelection', this.model.preventSelection))
                this._addSelection();
			 if (this.model.renderMode == "windows" &&!this.model.windows.preventSkew)
			     this._currentItem.addClass(this._prefixClass + "m-skew-center");
			if (!ej.isNullOrUndefined(evt)) this._eventtrigger = $(evt.target);
            if(this.model.mouseDown) this._triggerStartEvent(this._returnData());
			ej.listenEvents([this._liEl, this._liEl],
                           [ej.endEvent(), ej.moveEvent(), ej.cancelEvent()],
                           [this._touchEndDelegate, this._touchMoveDelegate, this._touchMoveDelegate], false, this);
            $(window).on(ej.endEvent() + " MSPointerUp pointerup", this._docClickDelegate);
        },
        
        
        _onTouchMoveHandler: function (evt) {
		if ((ej.browserInfo().name == "msie" && ej.browserInfo().version > 8)|| ej.browserInfo().name != "msie"){
           if (((!ej.isNullOrUndefined(evt.clientX)) ? evt.clientX : evt.changedTouches[0].clientX !== this._mouseDown.x) || ((!ej.isNullOrUndefined(evt.clientY)) ? evt.clientY : evt.changedTouches[0].clientY !== this._mouseDown.y)) {
            this._isMoved = true;
             if (ej.isDevice() && (!ej.isWindows || (ej.isWindows && !ej.isWindows()) || (ej.isWindows && ej.isWindows() && ej._isTouchMoved(evt, this)))) {
                this._scroll = true;
                if (!ej.getBooleanVal(this._currentItem, 'data-persistSelection', this.model.persistSelection))
                    this._removeSelection();
                else if (this._prevItem && this._prevItem[0] != this._currentItem[0])
                    this._removeSelection();
                 if (this.model.renderMode == "windows" && !this.model.windows.preventSkew)					
                     ej._removeSkewClass(this._currentItem);
                else if (!ej.getBooleanVal(this._currentItem, 'data-preventselection', this.model.preventSelection) && this._prevItem && ej.getBooleanVal(this._currentItem, 'data-persistSelection', this.model.persistSelection))
                    this._prevItem.removeClass(this._prefixClass + "state-default").addClass(this._prefixClass + "state-active");
                    }
                }
            }
        },
        
        

        _onTouchEndHandler: function (evt) {
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version == 8)
                evt.stopImmediatePropagation();
            this._isFromAjax = false;
            if (!ej.getBooleanVal(this._currentItem, 'data-persistSelection', this.model.persistSelection))
                this._removeSelection();
            if (this.model.renderMode == "windows" && !this.model.windows.preventSkew)			
                ej._removeSkewClass(this._currentItem);
            if (this._scroll) {
                this._setCurrent();
                this._unbindEvents(evt);
                return false;
            }
            else if (!this._scroll) {
                if (this._currentItem.find('.' + this._prefixClass + 'lv-check').length) {
                    var lbCheck = this._currentItem.find('.' + this._prefixClass + 'lv-check');
					  if ((this._prefixClass == "e-" && !ej.isNullOrUndefined(evt) && !$(evt.target).closest('.e-lv-checkdiv').length))
                        this._toggleCheckboxValue(lbCheck);
                }
                var backButton = this._currentItem.attr('data-childheaderbackbuttontext') == undefined ? this._currentItem.closest('.' + this._rootCSS + '').find('.' + this._prefixClass + 'header').length && ! this.model.showHeaderBackButton ? this._currentItem.closest('.' + this._rootCSS + '').find('.' + this._prefixClass + 'header .' + this._prefixClass + 'htitle').text() : "Back" : ej.getAttrVal(this._currentItem, 'data-childheaderbackbuttontext');
                var urlVal = this._currentItem.attr('data-href');
                if (!this._currentItem.attr('data-navigateUrl')) {
                    var page = this._isInsideNavigation ? this._tempContent.find("[data-ajaxurl='" + this._convertToRelativeUrl(urlVal) + "']") : this.element.find("[data-ajaxurl='" + this._convertToRelativeUrl(urlVal) + "']");
                    if (ej.getBooleanVal(this._currentItem, 'data-loadajax', (this.model.enableAjax && typeof (urlVal) != "undefined" || !typeof (urlVal))) && (!this.model.enableCache || page.length == 0)) {
                        if (page.length)
                            page.remove();
                        if ((this._prefixClass == "e-" && this._currentItem.hasClass("e-arrow")) || this._prefixClass != "e-")
                            this.loadAjaxContent(urlVal, backButton);
                        this._unbindEvents(evt);
                        if (this._isInsideNavigation && this._nearestND.model.contentId)
                            this._closeNavigation();
                        return;
                    }
                    else if (urlVal && urlVal.indexOf("#") != -1) {
                        if (this._currentPage(this).find('#' + urlVal.replace('#', '')).length) {
                            this._renderChild(ej.getAttrVal(this._currentItem, 'data-childid', "page_" + parseInt(Math.random().toFixed(3) * 1000)));
                            var content = ej.buildTag("div." + this._prefixClass + "content", this._storedContent[this._currentItem.attr('data-childid')]);
                            this._div.append(this._container.append(content));
                            if (ej.widget.init)
                                ej.widget.init(this._div);
                        }
                    }
                    this._updateContent(this._currentItem, backButton);
					if (this.model.ready) this._trigger("ready");
                    if (this._isInsideNavigation)
                        var close = this._nearestND.model.contentId ? (!this._currentItem.attr("data-childid") || this._currentItem.attr("data-href")) : !(this._currentItem.attr("data-childid") || this._currentItem.attr("data-href"));
                    if (this._isInsideNavigation && close)
                        this._closeNavigation();
                    if (!ej.isNullOrUndefined(evt)) this._eventtrigger = $(evt.target);
                    this._touchEndEventHandler(evt);
                }
                else
                    this._touchEndEventHandler();
                this._prevItem = this._currentItem;
            }
            this._unbindEvents(evt);
        },

        _hasValue: function (data, index) {
            for (var i = 0; i < data.length; i++) {
                if (data[i] == index) return true;
            }
        },

        _generateData: function (items, elementId) {
            var collection = ej.DataManager(items).executeLocal(ej.Query().from(this.model.dataSource).where(ej.Predicate(typeof ej.getAttrVal(this._currentItem, "data-id") == "undefined" ? this.model.fieldSettings['text'] : this.model.fieldSettings['id'], ej.FilterOperators.equal, elementId)).group(elementId))[0];
            return collection ? collection.items[0] : [];
        },


        
        _closeNavigation: function () {
                this.element.closest('.' + this._prefixClass + 'nb').ejNavigationDrawer('close');
        },

        
        _setCurrent: function (e) {
            if (this._prevItem && ej.getBooleanVal(this._currentItem, 'data-persistSelection', this.model.persistSelection)) {
                this._currentItem = this._prevItem;
                this._currentItem.removeClass(this._prefixClass + "state-default").addClass(this._prefixClass + "state-active");
            }
        },
        
        _unbindEvents: function (e) {
            if (e && e.target.nodeName && e.target.nodeName.toLowerCase() != "a") {
                
                this._scroll = false;
            }
            ej.listenEvents([this._liEl, this._liEl],
                           [ej.endEvent(), ej.moveEvent(), ej.cancelEvent()],
                           [this._touchEndDelegate, this._touchMoveDelegate, this._touchMoveDelegate], true, this);
        },
        
        
        _addSelection: function () {
            if (!this._scroll) {
                this._currentItem.closest('.' + this._prefixClass + 'list-container').find('.' + this._prefixClass + 'state-active').removeClass(this._prefixClass + "state-active").addClass(this._prefixClass + "state-default");
                this._currentItem.removeClass(this._prefixClass + "state-default").addClass(this._prefixClass + "state-active");
            }
        },
        
        
        _removeSelection: function () {
            var proxy = this;
            proxy._currentItem.removeClass(this._prefixClass + "state-active").addClass(this._prefixClass + "state-default");
        },

        
        _setHeightWidth: function () {
            if (this.model.autoAdjustHeight)
                this.element.height(window.innerHeight);
            else if (this.model.height)
                this.element.height(this.model.height);
            else {
                var hgt = this.element[0].scrollHeight ? this.element[0].scrollHeight : ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'list-container'), 'outerHeight');
                this.element.height(hgt);
            }
            if (this.model.width)
                this.element.width(this.model.width);
        },
        
        
        _touchEndEventHandler: function (evt) {
            this._triggerEndEvent(this._returnData(),evt);
        },
                
        _docClick: function (evt) {
            if (this._scroll) {
                this._setCurrent();
                $(document).off(ej.endEvent() + " MSPointerUp pointerup", this._docClickDelegate);
                ej.listenEvents([this._liEl, this._liEl],
                               [ej.endEvent(), ej.moveEvent()],
                               [this._touchEndDelegate, this._touchMoveDelegate], true, this);
                $(window).off(ej.endEvent() + " MSPointerUp pointerup", this._docClickDelegate);
            }
        },
        
        
        _popStateNavigation: function (evt, data) {
            if (data.pageUrl && this.model.enableFiltering)
                this._initializeFiltering($("div[data-url='" + data.pageUrl.replace('#', '') + "']"));
        },
        
        
        _anchorClickHandler: function (e) {
            if (this._scroll) {
                ej.blockDefaultActions(e);
                return false;
            }
        },
        
        _onResize: function () {
            var proxy = this;
            setTimeout(function () {
                proxy._setHeightWidth();
            }, ej.isAndroid() ? 200 : 0);
        },
        _onScrollStop: function (e) {
            ej.blockDefaultActions(e);
        },
        
        
        _createDelegates: function () {
            this._anchorClickDelegate = $.proxy(this._anchorClickHandler, this);
            this._keyup = $.proxy(this._onKeyUp, this);
            this._touchStartDelegate = $.proxy(this._onTouchStartHandler, this);
            this._touchEndDelegate = $.proxy(this._onTouchEndHandler, this);
            this._touchMoveDelegate = $.proxy(this._onTouchMoveHandler, this);
            this._resizeDelegate = $.proxy(this._onResize, this);
            this._popStateDelegate = $.proxy(this._popStateNavigation, this);
            this._docClickDelegate = $.proxy(this._docClick, this);
        },
        
        
        _wireEvents: function (remove, items) {
            var listItems = this._liEl || items;
            if (listItems) {
                this._createDelegates();
                var eventType = remove ? "unbind" : "bind";
                if (this.model.autoAdjustHeight) {
                    var evt = !ej.isDevice() && "onorientationchange" in window ? "orientationchange" : "resize";
                    ej.listenEvents([window], [evt], [this._resizeDelegate], remove, this);
                }
                ej.listenEvents([listItems.find('a'), this.element.find('.' + this._prefixClass + 'lv-input'), listItems, listItems],
                ["click", "keyup", ej.startEvent(), ej.cancelEvent()],
                [this._anchorClickDelegate, this._keyup, this._touchStartDelegate, this._touchMoveDelegate], remove, this);
                this._lContainer.on("scrollstop", $.proxy(this._onScrollStop, this));
                $('body')[eventType]('viewpopstate', this._popStateDelegate);
                if (this.model.enableFiltering)
                    this._initializeFiltering(this._lbEle);
            }
        },
        
        
        _initializeFiltering: function (element) {
            this._searchItems = $(element).find("." + this._prefixClass + "list");
            this._emptyFilterTextValue(element);
            element.find('.' + this._prefixClass + 'list[style*="display: none"]').show();
            this._elementText = [];
            for (var i = 0; i < this._searchItems.length; i++) {
                if ($(this._searchItems[i]))
                    this._elementText.push($.trim($(this._searchItems[i]).html().replace(new RegExp('<[^<]+\>', 'g'), "").toLowerCase()));
                else
                    this._elementText.push("");
            }
        },
        
        
        _onKeyUp: function (evt) {
            for (var i = 0; i < this._searchItems.length; i++) {
                if (this._elementText[i].indexOf(evt.target.value.toLowerCase()) == -1)
                    $(this._searchItems[i]).css("display", "none");
                else
                    $(this._searchItems[i]).css("display", "");
            }
        },
        
        
        _setModel: function (options) {
            var refresh = false;
            for (var prop in options) {
                var setModel = "_set" + prop.charAt(0).toUpperCase() + prop.slice(1);
				 if (this[setModel] || prop == "locale") {
                    switch (prop) {                       
						case "locale":
							if (ej.ListView.Locale[options[prop]]) {
								this.model.locale = options[prop];
								this._setCulture();	
                                this._setHeaderVal(this.model.id,this.model.headerTitle, this.model.headerBackButtonText);						
							}
                            break;
                        default:
                            this[setModel](options[prop]);
                    }
                }               
                else
                    refresh = true;
            }
            if (refresh)
                this._refresh();
        },
        
        
        _setTheme: function (value) {
            if (value) {
                this.model.theme = value;
                this._lbEle.removeClass("e-m-dark e-m-light e-default").addClass("e-m-" + this.model.theme);
                if (this.model.enableFiltering)
                    this.element.find('.' + this._prefixClass + 'text-input').ejmTextBox('model.theme', this.model.theme);
                if (this.model.showHeader)
                    this._lbEle.find('#' + this.model.id + "_header").ejmHeader('model.theme', this.model.theme);
                if (this.element.find('.' + this._prefixClass + 'childitem').length) {
                    $(this.element.find('.' + this._prefixClass + 'childitem')).removeClass("e-m-dark e-m-light e-default").addClass("e-m-" + this.model.theme);
                    var header = this.element.find('.' + this._prefixClass + 'childitem .' + this._prefixClass + 'header');
                    var proxy = this;
                    header.each(function (index, element) {
                        $(element).ejmHeader('model.theme', proxy.model.theme);
                    });
                }
            }
        },
        
        
        _setDataSource: function (dataSource, fieldSettings) {
            if (this._hasDataSource() && dataSource) {
                if (fieldSettings)
                    this.model.fieldSettings = fieldSettings;
                this._refresh();
            }
        },
        
        
        _hasDataSource: function () {
            return this.dataSource() && this.dataSource().length;
        },
        
        
        _getElement: function (childId) {
            return childId ? this.element.find('#' + childId) : this._lbEle;
        },
        
        
        _isEnable: function (item) {
            return item.hasClass(this._prefixClass + 'state-disabled') ? false : true;
        },
        //To refresh the control
        _refresh: function () {
            this._destroy();
            this.element.addClass(this._rootCSS);
            this._load();
        },
        //To clear the element
        _clearElement: function () {
            this.element.removeAttr("class style");
            this.element.empty().html(this._orgEle.html());
        },
        // all events bound using this._on will be unbind automatically
        _destroy: function () {
			if (this._prefixClass == "e-")
			   ej.listenEvents([window], ["resize"], [this._resizeDelegate], true, this);
            this._wireEvents(true);
            this._clearElement();
        },

        loadAjaxContent: function (urlVal, backButton) {
            var proxy = this;
            this._isFromAjax = true;
            this._renderChild(ej.getAttrVal(this._currentItem, 'data-childid', "page_" + parseInt(Math.random().toFixed(3) * 1000)));
            if (!$.support.pushstate || ej.isWindowsWebView())
            var loadData = { content: proxy._div, item: proxy._currentItem, index: $(proxy._currentItem).index(), text: $(proxy._currentItem).text(), url: proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal };
            if (this.model.ajaxBeforeLoad)
                this._trigger("ajaxBeforeLoad", loadData);
            var ajaxSettings = {
                cache: proxy.model.ajaxSettings.cache,
                async: proxy.model.ajaxSettings.async,
                type: proxy.model.ajaxSettings.type,
                contentType: proxy.model.ajaxSettings.contentType,
                url: ej.isWindowsWebView() ? urlVal : proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal,
                dataType: proxy.model.ajaxSettings.dataType,
                data: proxy.model.ajaxSettings.data,
                "successHandler": function (data) { //Ajax post success event handler
                    var content = ej.buildTag("div." + this._prefixClass + "content", (/<\/?body[^>]*>/gmi).test(data) ? data.split(/<\/?body[^>]*>/gmi)[1] : data || "");
                    proxy._div.append(proxy._container.append(content));
                    proxy._updateContent(proxy._currentItem, backButton);                    
					var mobileApp =  proxy._prefixClass == "e-m-" ? App.angularAppName : false;
                    if ((mobileApp || ej.angular.defaultAppName))
                        ej.angular.compile(content);
                    var successData = { content: proxy._div, item: proxy._currentItem, index: $(proxy._currentItem).index(), text: $(proxy._currentItem).text(), url: proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal };
                    if (proxy.model.ajaxSuccess)
                        proxy._trigger("ajaxSuccess", successData);
                },
                "errorHandler": function (xhr, textStatus, errorThrown) {
                    var errorData = { "xhr": xhr, "textStatus": textStatus, "errorThrown": errorThrown, item: proxy._currentItem, index: $(proxy._currentItem).index(), text: $(proxy._currentItem).text(), url: proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal };
                    if (proxy.model.ajaxError)
                        proxy._trigger("ajaxError", errorData);
                },
                "completeHandler": function (data) {
                    var completeData = { content: proxy._div, item: proxy._currentItem, index: $(proxy._currentItem).index(), text: $(proxy._currentItem).text(), url: proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal };
                    if (proxy.model.ajaxComplete)
                        proxy._trigger("ajaxComplete", completeData);
                }
            };
            ej.sendAjaxRequest(ajaxSettings);
        },

        selectItem: function (index, childId) {
            if (index >= 0 && this._isEnable($(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]))) {
                this.setActive(index, childId);
                this._currentItem = $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]);
                this._prevItem = this._currentItem;
                this._onTouchEndHandler();
            }
        },

        setActive: function (index, childId) {
            if (index >= 0) {
               var element = this._getElement(childId);
                if (this._isEnable($(element.find('li.' + this._prefixClass + 'list')[index])) && ej.getBooleanVal($(element.find('li.' + this._prefixClass + 'list')[index]), 'data-persistSelection', this.model.persistSelection)) {
                    element.find('li.' + this._prefixClass + 'list.' + this._prefixClass + 'state-active').removeClass(this._prefixClass + 'state-active').addClass(this._prefixClass + 'state-default');
                    this._currentItem = $(element.find('li.' + this._prefixClass + 'list')[index]);
                    this._prevItem = this._currentItem;
                    this._currentItem.removeClass(this._prefixClass + 'state-default').addClass(this._prefixClass + 'state-active');
                }
            }
        },

        deActive: function (index, childId) {
            if (index >= 0 && this._isEnable($(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index])))
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).removeClass(this._prefixClass + 'state-active').addClass(this._prefixClass + 'state-default');
        },

        enableItem: function (index, childId) {
            if (index >= 0)
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).removeClass(this._prefixClass + 'disable').addClass(this._prefixClass + 'state-default').find('a').removeClass(this._prefixClass + 'disable').find('.' + this._prefixClass + 'lv-check').ejCheckBox("enable");
        },

        disableItem: function (index, childId) {
            if (index >= 0)
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).addClass(this._prefixClass + 'disable').removeClass(this._prefixClass + 'state-default').find('a').addClass(this._prefixClass + 'disable').find('.' + this._prefixClass + 'lv-check').ejCheckBox("disable");
        },

        removeCheckMark: function (index, childId) {
            this._removeIndex=index;
           var element = this._getElement(childId);
            if (index >= 0 && this._isEnable($(element.find('li.' + this._prefixClass + 'list')[index])))
                $(element.find('li.' + this._prefixClass + 'list')[index]).find('.' + this._prefixClass + 'lv-checkdiv').remove();
            else
                element.find('.' + this._prefixClass + 'lv-checkdiv').remove();
        },

        checkItem: function (index, childId) {
            if (index >= 0 && this._isEnable($(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index])))
                this._setCheckboxValue($(this._getElement(childId).find('.' + this._prefixClass + 'lv-check')[index]), true);
			this._checkedValues.push(index);
			this.checkedIndices(this._checkedValues);
        },

        unCheckItem: function (index, childId) {
            if (index >= 0 && this._isEnable($(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index])))
                this._setCheckboxValue($(this._getElement(childId).find('.' + this._prefixClass + 'lv-check')[index]), false);
			 this._checkedValues.splice(this._checkedValues.indexOf(index), 1);
        },

        checkAllItem: function (childId) {
            var proxy = this;
            this._getElement(childId).find('.' + this._prefixClass + 'lv-check').each(function (index, check) {
                if (proxy._isEnable($(proxy._getElement(childId).find('li.' + proxy._prefixClass + 'list')[index])))
                    proxy._setCheckboxValue($(check), true);
            });
			this._checkStatevalue();
        },

        unCheckAllItem: function (childId) {
            this.model.checkedIndices = [];
            this._checkedValues = [];
            var proxy = this;
            this._getElement(childId).find('.' + this._prefixClass + 'lv-check').each(function (index, check) {
                if (proxy._isEnable($(proxy._getElement(childId).find('li.' + proxy._prefixClass + 'list')[index])))
                    proxy._setCheckboxValue($(check), false);
            });
        },
		
        _checkStatevalue:function (){			
			this._currentItem = $(this._liEl);
			for(var i=0; i<this._currentItem.length; i++){
			  var index = this.element.find("li").index(this._currentItem[i]);
			  if (!this._hasValue(this._checkedValues, index))
                        this._checkedValues.push(index);
                    else
                        this._checkedValues.splice(this._checkedValues.indexOf(index), 1);}

				this.checkedIndices(this._checkedValues);
			    this.model.checkedIndices = this.checkedIndices();		
			
		},
		
        getActiveItem: function (childId) {
            return this._getElement(childId).find('li.' + this._prefixClass + 'list.' + this._prefixClass + 'state-active');
        },

        getActiveItemText: function (childId) {
            return this._getElement(childId).find('li.' + this._prefixClass + 'list.' + this._prefixClass + 'state-active').text();
        },

        getItemText: function (index, childId) {
            if (index >= 0)
                return $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).text();
        },

        getCheckedItems: function (childId) {
            if (childId != undefined)
                return this._getElement(childId).find('input.' + this._prefixClass + 'lv-check:checked').closest('li.' + this._prefixClass + 'list');
            else
                var checkedlist=[];
		        for(var i=0; i<this.checkedIndices().length; i++){
			    var clist = this.element.find("li")[this.checkedIndices()[i]];
			    checkedlist.push(clist);
		   }
			   return checkedlist;
        },

        getCheckedItemsText: function (childId) {
            return $(this.getCheckedItems(childId)).map(function () { return $(this).text(); }).get();
        },

        hasChild: function (index, childId) {
            if (index >= 0)
                return this.element.find('#' + $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).attr('data-childid')).length ? true : false;
        },
        
        isChecked: function (index, childId) {
            if (index >= 0)
                return $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).find('input.' + this._prefixClass + 'lv-check').prop('checked');
        },

        showItem: function (index, childId) {
            if (index >= 0)
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).css('visibility', '');
        },

        hideItem: function (index, childId) {
            if (index >= 0)
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).css('visibility', 'hidden');
        },

        show: function (childId) {
            this._getElement(childId).css('visibility', '');
        },

        hide: function (childId) {
            this._getElement(childId).css('visibility', 'hidden');
        },

		_objectSplice:function(list,index){
		    for (var i = 0; i < list.length; i++) {
		        this.model.items.splice(index, 0, list[i]);
		    }
		},
		
        addItem: function (list, index, groupid) {
			if (typeof (list) == 'object') list = $(list);
            if (index >= 0) {
                if (!this._hasDataSource()) {
					if($('.e-list-container').find('ul').length == 0){
                    var ul = ej.buildTag('ul'), li = ej.buildTag('li');
                    $('.e-list-container').find('div:first').append(ul);
                    $('.e-list-container > div > ul').append(li);
                }
                    if (typeof (list) == 'object')
                        this._objectSplice(list, index);
                    else
                        this.model.items.splice(index, 0, this._getLiAttributes(list, null, null, groupid));
                    var items = this.model.items;
                }
                else {
                    if (typeof (list) == 'object') {
                        for (var i = 0; i < list.length; i++) 
                            this.dataSource().splice(index, 0, list[i]);
                    }
                    else 
                    this.dataSource().splice(index, 0, this._itemsObjectCollection($(list), null, null, groupid));
                    var items = this.dataSource();
                }
            }
            else
                this._orgEle.children().append(list);
            if (!this.model.enableGroupList)
                var $ul = $(this.element.find("ul:visible"));
            else
                var $ul = $(this.element.find('ul[data-ej-grouplisttitle= ' + groupid + ']'));
            if (!ej.isNullOrUndefined(this.jsRender)) {
				 var ele;
				if (typeof (list) == 'object') {
                    for (var i = 0; i < list.length; i++) 
	                    ele = $($(this.jsRender).render(items[index+i])).insertBefore($ul.children()[index]);
                }
                else 
                      ele = $($(this.jsRender).render(items[index])).insertBefore($ul.children()[index]);    
                ej.widget.init && ej.widget.init(ele);
				if($(list).attrNotStartsWith(/^data-ej-/).length>0) $(ele).addEleAttrs($($(list).attrNotStartsWith(/^data-ej-/)));
            }
            else {
                this._renderControl();
                if ($(this.element).find('.subpage').length > 1) {
                    $(this.element).find('.subpage:nth-child(2)').remove();
                }
            }
            this._processing($ul);
            this._liEl = this.element.find('li.' + this._prefixClass + 'list');
            if (this._initEJCheckBox){
			this._initEJCheckBox($ul);
		    if(this.model.renderTemplate) $(this.element.find('.' + this._prefixClass + 'lv-check').parent()).addClass(this._prefixClass+'template-checkmark');
			}
            this._setHeightWidth();
            this._wireEvents();
        },

            _processing: function ($ul) {
            $ul.find("li." + this._prefixClass + "firstitem").removeClass(this._prefixClass + "firstitem");
            $ul.find('li:first').addClass(this._prefixClass + "firstitem");
            $ul.find("li." + this._prefixClass + "lastitem").removeClass(this._prefixClass + "lastitem");
            $ul.find('li:last').addClass(this._prefixClass + "lastitem");
            var eLi = $ul.find('li.' + this._prefixClass + 'list');
            eLi.removeEleEmptyAttrs();
            eLi.find('.' + this._prefixClass + 'chevron-right_01').removeEleEmptyAttrs();
            $ul.find('.' + this._prefixClass + 'lv-check').parent().addClass(this._prefixClass + 'lv-checkdiv');
            $ul.find('.' + this._prefixClass + 'lv-check').closest('li.' + this._prefixClass + 'list').addClass(this._prefixClass + 'list-check');
            $ul.find('.' + this._prefixClass + 'lv-input').closest('.' + this._prefixClass + 'lv-filter').addClass(this._prefixClass + 'lv-inputdiv');
        },

        removeItem: function (index, childId) {
            var removedItems = [];
            if (index >= 0) {
                element = this._getElement(childId);
                var child = $(element.find('li.' + this._prefixClass + 'list')[index]).attr('data-childid');
                if (this.element.find($('#' + child).length))
                    this.element.find($('#' + child)).remove();
                $(element.find('li.' + this._prefixClass + 'list')[index]).remove();
                var index = [parseInt(index)];
                this.dataSource(this.dataSource().filter(function (e, i) {
                    if (index.indexOf(i) != -1)
                        removedItems.push(e);
                    else
                        return true;
                }));
            }
        },

        clear: function () {
            this.element.empty().html();
            this._liEl = this.element.find('li.' + this._prefixClass + 'list');
        },

        getItemsCount: function (childId) {
            return this._getElement(childId).find('li.' + this._prefixClass + 'list').length;
        },
		
        getActiveItemData: function () {
            if (this.getActiveItem().attr("data-id"))
                return (this._generateData(this.dataSource().length ? typeof this.dataSource() == "string" ? eval(this.dataSource()) : this.dataSource() : this.model.items, this.getActiveItem().attr("data-id")));
        }
    });
	ej.VirtualScrollMode = {
        /** Supports to Virtual Scrolling mode with normal only */
        Normal: "normal",
        /** Supports to Virtual Scrolling mode with continuous only */
        Continuous: "continuous"
    };
})(jQuery, Syncfusion);;;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejAutocomplete", "ej.Autocomplete", {

        element: null,

        model: null,
        validTags: ["input"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "focusIn", "focusOut", "change", "select",
                            "create", "destroy", "open", "close", "actionComplete", "actionSuccess", "actionFailure"],
        _setFirst: false,

        _rootCSS: "e-autocomplete",
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },

        _requiresID: true,

        defaults: {

            dataSource: null,

            query: null,

            fields: {

                text: null,

                key: null,
                //Deprecated
                category: null,

                groupBy: null,

                htmlAttributes: null
            },
            locale: "en-US",
			
			name:null,

            template: null,
            //Deprecated
            allowGrouping: false,

            enableDistinct: false,
			
			ignoreAccent: false,

            allowSorting: true,

            sortOrder: "ascending",

            htmlAttributes: {},

            multiSelectMode: "none",

            delimiterChar: ',',

            allowAddNew: false,

            addNewText: "Add New",

            showRoundedCorner: false,

            readOnly: false,

            cssClass: "",

            watermarkText: null,

            value: "",

            selectValueByKey: null,

            filterType: "startswith",

            caseSensitiveSearch: false,

            showLoadingIcon: true,
			
			showResetIcon : false,

            itemsCount: 0,

            minCharacter: 1,

            delaySuggestionTimeout: 200,

            showPopupButton: false,

            highlightSearch: false,

            enableAutoFill: false,

            enableRTL: false,

            enabled: true,

            visible: true,

            height: "",

            width: "",

            emptyResultText: "No suggestions",

            animateType: "slide",

            showEmptyResultText: true,

            enablePersistence: false,

            popupHeight: "152px",

            popupWidth: "auto",

            autoFocus: false,
			
            multiColumnSettings: {
    
                enable:false,
    
                showHeader:true, 
                
                stringFormat:"{0}",

                searchColumnIndices:[],
                         columns:[{
                           field:null,
           
                            headerText:null,
							
							textAlign:"left",
							
							headerTextAlign:"left",
							
							cssClass: "",
							
							type:"string",

							filterType: "startswith"
       
                        }]
            },

            validationRules: null,

            validationMessage: null,

            focusIn: null,

            focusOut: null,

            change: null,

            select: null,

            create: null,

            open: null,

            close: null,

            destroy: null,

            actionBegin: null,

            actionComplete: null,

            actionSuccess: null,

            actionFailure: null
        },

        dataTypes: {
            autoFocus: "boolean",
            watermarkText: "string",
            locale: "string",
            cssClass: "string",
            filterType: "enum",
            caseSensitiveSearch: "boolean",
            showLoadingIcon: "boolean",
            template: "string",
            //Deprecated
            allowGrouping: "boolean",
            enableDistinct: "boolean",
            allowSorting: "boolean",
            sortOrder: "enum",
            allowAddNew: "boolean",
            addNewText: "string",
            showRoundedCorner: "boolean",
			showResetIcon:"boolean",
            readOnly: "boolean",
            itemsCount: "number",
            animateType: "enum",
            minCharacter: "number",
            showPopupButton: "boolean",
            highlightSearch: "boolean",
            enableAutoFill: "boolean",
            enableRTL: "boolean",
            multiSelectMode: "enum",
            delimiterChar: "string",
            emptyResultText: "string",
            showEmptyResultText: "boolean",
            enabled: "boolean",
            visible: "boolean",
            enablePersistence: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
            multiColumnSettings: "data",
            columns:"data",
            searchColumnIndices:"array"
        },
        observables: ["value", "selectValueByKey"],
        value: ej.util.valueFunction("value"),
        _selectValueByKey:ej.util.valueFunction("selectValueByKey"),
        enable: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.target.disabled = false;
                this.element.removeClass("e-disable").attr({ "aria-disabled": false });
                this.element.removeAttr("disabled");
                if (this.model.showPopupButton) this.dropdownbutton.removeClass("e-disable").attr({ "aria-disabled": false });
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable").attr({ "aria-disabled": false });
                this.wrapper.removeClass('e-disable-wrap');
            }
        },

        disable: function () {
            if (this.model.enabled) {
                this._hideResult();
                this.model.enabled = false;
                this.target.disabled = true;
                this.element.attr("disabled", "disabled");
                this.element.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.showPopupButton) this.dropdownbutton.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.multiSelectMode == "visualmode" && this._ulBox) this._ulBox.addClass("e-disable").attr({ "aria-disabled": true });
                this.wrapper.addClass('e-disable-wrap');
            }
        },

        clearText: function () {
            if (this.model.multiSelectMode == "visualmode")
                this._deleteBox(this._ulBox.children("li"));
            this.element.val("");
            this._valueChange();
            if (!this._isFocused) this._focusOutAction();
            this._hideResult()
        },

        getValue: function () {
            var value = this.value();
            return (value == null) ? "" : value; 
        },

        getSelectedItems: function () {
            if (this._isFocused && this.model.multiSelectMode != "visualmode")
                this._updateSelectedItemArray(this.getValue());
            return this._selectedItems;
        },
        _setValue: function (value) {
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            if (typeof value === "object" || (typeof value === "number" && isNaN(value)) || $.trim(value) == "") value = "";
            if (this.model.multiSelectMode == "visualmode")
                this._hiddenInput.val("");
            this.element.val("");
            if (!this._hiddenInput) this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden", "name": this.element.attr("name") }).insertBefore(this.element);
            if (value) {
                if (this.model.multiSelectMode == "visualmode") {
                    this._selectedItems = [];
                    this._modelValue = value;
                    this._deleteBox(this._ulBox.children("li"));
                    var values = value.split(this.model.delimiterChar);
					this.element.width(1).val("").removeAttr('placeholder');
					if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                        this._createBoxForObjectType(values);
                    }
                    else {
                        this.suggestionListItems = this.model.dataSource;
                        if (this.suggestionListItems && typeof this.suggestionListItems[0] != "object") {
							this._hiddenInput.val(value);
                            for (var i = 0, length = values.length; i < length; i++) {
                                if (values[i]) {
                                    this._ulBox.append(this._createBox(values[i]));
                                    this._selectedItems.push(values[i]);
                                }
                            }
                            }
                        else this._createBoxForObjectType(values);
                    }
                }
                else {
                    this.element.val(value);
                    this._updateSelectedItemArray(value);
                }
            }
            if (this.model.multiSelectMode != "visualmode") this.value(this.element.val());
            this._preVal = this.element.val();
            !this._isWatermark && this._setWatermarkTxt();
            return value;

        },
        _createBoxForObjectType: function (values) {
			var proxy=this, map=this._declareVariable();
            for (var data = 0, length = values.length; data < length; data++) {
                var _val = $.trim(values[data]);
				if(_val != ""){
                if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                    this._dataQuery = this._getQuery().where(map[0], "equal", _val, false);
                    this._promise = (this.model.dataSource).executeQuery(this._dataQuery);
                    this._promise.done(function (e) {
                        var res = e.result;
                        proxy._strData = res instanceof Array && res.length ? res[0] : _val;
                        if (!ej.isNullOrUndefined(proxy._strData[map[1]]))
                            proxy._selectKeyInit();
                        proxy._selectedItems.push(proxy._strData);
                    }).fail(function (e) {
                        proxy._selectedItems.push(_val);
                    });
                }
                else {
                    this._dataQuery = ej.Query().where(map[0], "equal", _val, false);
                    this._promise = ej.DataManager(this.suggestionListItems).executeLocal(this._dataQuery);
                    this._strData = this._promise instanceof Array && this._promise.length ? this._promise[0] : _val;
                    if (!ej.isNullOrUndefined(this._strData[map[1]])) 
					  this._selectKeyInit();
					this._selectedItems.push(this._strData);
                }
                if (this.model.multiSelectMode == "visualmode")
                    this._ulBox.append(this._createBox(_val));
            }
			}
			
        },

        _selectKeyInit: function () {
            var mapper = this._declareVariable();
            var delimiterChar = this._delimiterChar();
            if (this.model.multiSelectMode == "visualmode")
                this._hiddenInput.val(this._hiddenInput.val() + (!ej.isNullOrUndefined(this._strData[mapper[1]] || this._strData[mapper[0]]) ? (this._strData[mapper[1]] || this._strData[mapper[0]]) + this.model.delimiterChar : ""));
            if (!ej.isNullOrUndefined(this._strData[mapper[1]])) {
                if (this.model.multiSelectMode != "none") {
                    var keyValue = this._selectValueByKey() != null ? (this._selectValueByKey() + this._strData[mapper[1]] + delimiterChar) : this._strData[mapper[1]] + delimiterChar
                    keyValue = keyValue.split(delimiterChar).reduce(function (a, b) { if (a.indexOf(b) < 0) a.push(b); return a; }, []);
                    this._selectValueByKey(keyValue.join(delimiterChar));
                }
                else this._selectValueByKey(this._strData[mapper[1]]);
            }
        },
		    _declareVariable: function () {
		        var mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null }, keyText = [];
			 if(!ej.isNullOrUndefined(mapper)){
				mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text" ;
				mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key" ;
				keyText.push(mapFld._text,mapFld._key);
				return keyText;
			 }
		},

       selectValueByKey: function (key) {
            if (!ej.isNullOrUndefined(key)) {
                var proxy = this;
                key = key.toString();
                var result = this.model.multiSelectMode != "none" ? key.split(this.model.delimiterChar) : key.split(",");
                if (Object.prototype.toString.call(result) === '[object Array]') {
                    $.each(result, function (index, value) {
                        proxy._setOperation($.trim(value), "key");
                    });
                }
            }
        },

        selectValueByText: function (text) {
            this._setOperation(text, "text");
        },

        _eventTrigger: function () {
            var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val() == "" ? null : this.element.val();
            this._trigger("select", { isInteraction: true, value: this.value(), text: currValue, key: this._selectValueKey, item: this._selectedItems });
        },

        setValue: function (text) {
            this._setText(text);
        },

        _setOperation: function (source, value) {
            var bindTo = "", promise, dataQuery, proxy = this, list = this.model.dataSource;
            if (ej.isNullOrUndefined(list)) return false;
            if (typeof list[0] == "object" || list instanceof ej.DataManager) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper[value]) ? mapper[value] : value;
            } else if (value == "key")
                return false;
			if(source){
            if (ej.DataManager && list instanceof ej.DataManager) {
                dataQuery = this._getQuery().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = (list).executeQuery(dataQuery);
                promise.done(function (e) {
                    proxy._setText(e.result[0]);
                    proxy._eventTrigger();
                });
            }
            else {
                if ((!list || !list.length || list.length < 1)) return false;
                dataQuery = ej.Query().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = ej.DataManager(list).executeLocal(dataQuery);
                this._setText(promise[0]);
				this._eventTrigger();
            }
			}
        },

        _setText: function (data) {
            if (!data) return false;
            var currentValue, keyvalue, mapper = this.model.fields;
            if ((typeof this.model.dataSource[0] == "object") || (typeof data == "object")) {
                currentValue = typeof data == "string" ? data : (mapper && mapper["text"]) ? data[mapper["text"]] : data["text"];
                keyvalue = typeof data == "string" ? data : (mapper && mapper["key"]) ? data[mapper["key"]] : data["key"];
            }
            else currentValue = data;
            if (currentValue) {
                if (this.model.multiSelectMode == "visualmode" && this._removeDuplicates(data)) return false;
                this._valueToTextBox(currentValue, data, true);
                var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();
                this.value(currValue);
				if (this.model.showResetIcon) this._showReset();
            }
           this._selectValueKey = keyvalue;
           this._selectkey.push(keyvalue);
           if (!ej.isNullOrUndefined(keyvalue)) this._selectValueByKey(this._selectkey + this.model.delimiterChar);                
        },

        _textFormateString: function (data, index) {
            var _textFormatString = this.model.multiColumnSettings.stringFormat
			this._columnsIndex();
            if (!ej.isNullOrUndefined(data) && typeof data == "object") {
                for (var i = 0, length = this._columnIndex.length; i < length; i++)
                    _textFormatString = _textFormatString.replace("{" + this._columnIndex[i] + "}", data[this.model.multiColumnSettings.columns[parseInt(this._columnIndex[i])].field]);
            }
            else if (!ej.isNullOrUndefined(data) && typeof data != "object") {
                _textFormatString = _textFormatString.replace("{" + this._columnIndex[0] + "}", data);
            }
            else
                _textFormatString = this._currList[this._activeItem - 1];
            return _textFormatString;
        },

		_columnsIndex: function(){
			var _proxy = this; this._columnIndex = [];
			$.each(this.model.multiColumnSettings.stringFormat.match(/\{.+?\}/g),function (x,n){ 
				  _proxy._columnIndex[x] = n.slice(1,-1)
            });
            this._searchColumnIndex = [];
            $.each(this.model.multiColumnSettings.searchColumnIndices,function (x,m){ 
                _proxy._searchColumnIndex.push(m);
          });
        },
        _valueToTextBox: function (currentValue, data, flag) {
            var delimiterIndex;
         if(!this._addNewTemplate && this.model.multiColumnSettings.enable && typeof data != "string") 
             currentValue = this._textFormateString(data);
         delimiterIndex = this.model.delimiterChar;
         var key = this._getUniqueKey();
         key = key ? key : (this.model.fields && this.model.fields["key"]) ? data[this.model.fields["key"]] : !ej.isNullOrUndefined(data["key"]) ? data["key"] : key;
         if (!this._hiddenInput) this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden", "name": this.element.attr("name") }).insertBefore(this.element);
         if (!(this._hiddenInput.val() == key || key == null) || temp > -1) {
                 if (this.model.multiSelectMode == "none") this._hiddenInput.val(key || currentValue);
                 else this._hiddenInput.val(this._hiddenInput.val() + (key || currentValue) + delimiterIndex);
         }
         if (this.model.multiSelectMode == "visualmode") {
             data = (typeof data == "string" && this._addNewTemplate && data.substr(data.length - this._addNewTemplate.length) == this._addNewTemplate) ? data.replace(this._addNewTemplate, "") : data;
             if (typeof currentValue == "number") currentValue = this._textFormateString(currentValue);
				var temp = currentValue.indexOf(this._addNewTemplate);
                if (this._addNewTemplate) currentValue = currentValue.substr(0, currentValue.length - this._addNewTemplate.length);
                if(!(this._selectValueByKey() == key || key == null) || temp > -1 )					
			        this._selectValueByKey(this._selectValueByKey() != null ? (this._selectValueByKey() + (temp > -1 ? currentValue : key) + delimiterIndex) : (temp > -1 ? currentValue : key) + delimiterIndex);
			    this._modelValue = ej.isNullOrUndefined(this.value()) ? currentValue + delimiterIndex : this.value() + currentValue + delimiterIndex;
                this.element.val("").removeAttr('placeholder').width(1);
                this._ulBox.append(this._createBox(currentValue));
				if(this.model.height!=""){
                $(this._ulBox).parent().css("overflow","auto");	
                if((this.model.showPopupButton)&&(this._ulBox.parent()[0].scrollHeight!=0)) this.dropdownbutton.css("height",this._ulBox.parent()[0].scrollHeight);				
				}
                this._addNewTemplate = null;
            }
            else if (this.model.multiSelectMode == "delimiter") {
                var delimiterIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
                if (this._typed || this.element.val() == "" || flag || !this.model.showPopupButton) {
                    if (flag)
                        this.element.val(this.element.val() == "" ? (currentValue + this.model.delimiterChar) : (this.element.val() + currentValue + this.model.delimiterChar));
                    else					 
                        delimiterIndex == -1 ? this.element.val(this._queryString.substr(0, delimiterIndex + 1) + currentValue + this.model.delimiterChar):this.element.val(this._queryString.substr(0, delimiterIndex + ((this.model.delimiterChar).length)) + currentValue + this.model.delimiterChar)
                 }
                else {
                    if(!this.model.enableAutoFill || this.showSuggestionBox) {
					if (this._checkDeli())
                        this.element.val(this._queryString.substr(0, delimiterIndex) + this.model.delimiterChar + currentValue + this.model.delimiterChar);
                    else
                        this.element.val(this.element.val() + this.model.delimiterChar);
                    }
					else if(!this._checkDeli()) this.element.val(this.element.val() + this.model.delimiterChar);
				}
                this._typed = false;
            }
            else {
                this.element.val(currentValue);
                this._selectedItems = [];
            }
            this._selectedItems.push(data);
			this._originalval.push(currentValue);
            this._moveCaretToEnd(this.element[0]);
        },

        _removeDuplicates: function (currentValue) {
            if (this._selectedItems.length == 0) return false;
            if (this._selectedItems.indexOf(currentValue) != -1) return true;
        },

        search: function () {
            if (this.model.enabled && this._checkDelimiter()) {
                this._hideResult();
                this._autoFill = false;
                this._queryString = $.trim(this._queryString);
                if (this._queryString.length > 0) this._OnTextEnter();
            }
        },
        setVisible: function (value) {
            if (value)
                this.wrapper.show();
            else
                this.wrapper.hide();
        },

        hide: function () {
            this._hideResult();
        },

        open: function () {
            this._showFullList();
        },

        _changeWatermark: function (text) {
            if (this._isWatermark) this.element.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.suggestionList.removeClass(this.model.cssClass).addClass(skin);
        },
        _setDropdown: function (boolean) {
            this.model.showPopupButton = boolean;
            if (boolean) this._renderDropdown();
            else this._destroyDropdown();
        },
        _changeHeight: function (height) {
            this.wrapper.height(height);
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },
        _setCulture: function () {
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.addNewText)) this._localizedLabels.addNewText = this._options.addNewText;
                if (!ej.isNullOrUndefined(this._options.emptyResultText)) this._localizedLabels.emptyResultText = this._options.emptyResultText;
                if (!ej.isNullOrUndefined(this._options.watermarkText)) this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this.model.addNewText = this._localizedLabels.addNewText;
            this.model.emptyResultText = this._localizedLabels.emptyResultText;
            this.model.watermarkText = this._localizedLabels.watermarkText;
        },
        
        _init: function (options) {
            this._options = options;
            this._selectkey=[];
            this._setCulture();
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            //deprecated Property Added
            this.model.fields.groupBy = !this.model.fields.groupBy ? this.model.fields.category : this.model.fields.groupBy;
            this._initialize();
            this._render();
            this._wireEvents();
            this.initialRender = false;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            if (!this.model.validationRules) return;
            var element = this.model.multiSelectMode == "visualmode" ? this._hiddenInput : this.element;
            element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
		_removeDuplicateValue: function(values) {
			return values.split(this.model.delimiterChar).reduce(function (a, b) { if (a.indexOf(b) < 0) a.push(b); return a; }, []).join(this.model.delimiterChar);
		},
        _delimiterChar:function(){
            return (this.model.multiSelectMode != "none" ? this.model.delimiterChar : "");
        },
        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": this.model.dataSource = null; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "delaySuggestionTimeout": this.model.delaySuggestionTimeout = parseInt(options[option]); break;
                    case "value":
					var optionValue = ej.util.getVal(options[option]);
                        var deli = this._delimiterChar();
                        if (this.model.multiSelectMode != "none") {
                            value = optionValue.substr(optionValue.length - deli.length) == deli ? optionValue : optionValue + deli;
                            optionValue = optionValue == "" ? this.value() : (this.value() ? this.value() : "") + value;
                            if (this.model.multiSelectMode == "visualmode") {
                                optionValue = optionValue.split(deli).reduce(function (a, b) { if (a.indexOf(b) < 0) a.push(b); return a; }, []);
                                optionValue = optionValue.join(deli);
                            }
                        }
                        this.value(this._setValue(optionValue));
                        var data = this.model.dataSource;
                        if (ej.DataManager && data instanceof ej.DataManager) this._loadInitData();
                        else this._setHiddenkeyByValue(data);
                        this._modelValue = this.value()
                        var currValue = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
                        this._changeEvtTrigger(currValue);
                        if (this.model.showResetIcon) this._showReset();
                        break;
                    case "showPopupButton": this._setDropdown(options[option]); break;
                    case "enableRTL": this._RightToLeft(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "readOnly": this._checkReadOnly(options[option]); break;
                    case "delimiterChar": var delchar = this.model.delimiterChar;
                        options[option] = this._validateDelimiter(options[option]);
                        this.model.delimiterChar = options[option];
                        this.element.val(this.value().replace(new RegExp(delchar, 'g'), this.model.delimiterChar));
                        this.value(this.element.val());
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = options[option];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "locale":
                        if (ej.Autocomplete.Locale[options[option]]) {
                            this.model.locale = options[option];
                            this._setCulture();
                            this._setWatermark();
                        } else  this.model.locale = options[option];
                        break;
                    case "filterType":
                        var arr = [];
                        for (var key in ej.filterType)
                            if (ej.filterType.hasOwnProperty(key))
                                arr.push(ej.filterType[key]);
                        if (arr.indexOf(options[option]) > -1)
                            this.model.filterType = options[option];
                        else
                            options[option] = this.model.filterType;
                        break;
                    case "multiSelectMode":
                        this.model.multiSelectMode = options[option];
                         var delimiter =this._delimiterChar();
                         if (this.model.multiSelectMode != "none") {
                             var key = this._selectValueByKey(), value = this.value();
                             if (value) {
                                 value = value.substr(value.length - delimiter.length) == delimiter ? value : value + delimiter
                                 this.value(value);
								 if(this.model.multiSelectMode == "visualmode") this.value(this._removeDuplicateValue(this.value()))
                             }
                             if (key) {
                             this._selectValueByKey(key.substr(key.length - delimiter.length) == delimiter ? key : key + delimiter);
							 if(this.model.multiSelectMode == "visualmode") this._selectValueByKey(this._removeDuplicateValue(this._selectValueByKey()));
							 }
						 }
                         else {

                         }
                        if (options[option] == "visualmode") {
                            if (this.model.validationRules != null)
                                this.element.rules('remove');
							if (this.element.val() != "" && this._isWatermark ) this.element.removeAttr("placeholder");                            
                        }
                        else if (this.element.hasClass("e-visual-mode")) 
                            this._destroyBoxModel();
                        this._destroy();
                        this._init();
                        this._setValue(this.value());
                        this._setValidation();
                        if (ej.isNullOrUndefined(this.element.attr("placeholder")) && this._isWatermark)
                            this._setWatermark();
                        break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "visible":
                        this.setVisible(options[option]);
                        break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "itemsCount ": if (options[option] <= 0 || isNaN(options[option])) options[option] = 0; break;
                    case "popupHeight": this.suggestionList.css({ "max-height": isNaN(options[option]) ? options[option]: options[option] + "px" }); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "selectValueByKey":
                        deli = this._delimiterChar();
                        key = ej.util.getVal(options[option]);
                        this.selectValueByKey(key);
                        var keyValue =   (this.model.multiSelectMode != "none") ? this._selectValueByKey() + options[option]:options[option];
                        keyValue = keyValue.split(deli).reduce(function (a, b) { if (a.indexOf(b) < 0) a.push(b); return a; }, []);
                        keyValue=keyValue.join(deli);
                        options[option] = keyValue.substr(keyValue.length - deli.length) == deli ? keyValue  : keyValue+ deli;
                        break
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "emptyResultText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["emptyResultText"] = this.model.emptyResultText = options[option];
                        this._setCulture(); break;
                    case "addNewText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["addNewText"] = this.model.emptyResultText = options[option];
                        this._setCulture(); break;
					case "multiColumnSettings":
						if(!ej.isNullOrUndefined(options[option].enable)) this.model.multiColumnSettings.enable = options[option].enable;
						if(!ej.isNullOrUndefined(options[option].showHeader)) this.model.multiColumnSettings.showHeader = options[option].showHeader;
                        if(!ej.isNullOrUndefined(options[option].stringFormat)) this.model.multiColumnSettings.stringFormat = options[option].stringFormat;
                        if(!ej.isNullOrUndefined(options[option].searchColumnIndices)) this.model.multiColumnSettings.searchColumnIndices = options[option].searchColumnIndices;
						if(!ej.isNullOrUndefined(options[option].columns)) this.model.multiColumnSettings.columns = options[option].columns;
						this.suggestionList.remove();
						this._renderSuggestionList();
						break; 
                    case "showResetIcon": this.model.showResetIcon = options[option];
                        if (options[option] && !ej.isNullOrUndefined(this.value()) && this.value()!="") this._showReset();
						else this._removeReset();
						break;
                }
				this._hideResult();
            }
        },

        _destroy: function () {
            this.element.width("").removeAttr("role aria-label aria-expanded aria-haspopup aria-autocomplete autocomplete placeholder aria-owns aria-disabled disabled");
            this.element.insertAfter(this.wrapper);
            if (this.model.multiSelectMode == "visualmode")
                this.element.removeClass("e-visual-mode").attr("name", this._hiddenInput.attr("name"));
            if (!this.model.enabled) this.element.removeClass('e-disable');
            this.wrapper.remove();
            this.element.removeClass("e-input").val("");
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this._hideResult();
            this.suggestionList.remove();
        },

        _initialize: function () {
            this.value(this.value() === "" ? this.element[0].value : this.value());
            this.element.attr("role", "combobox").attr("aria-label", "Autocomplete textbox").attr("aria-expanded", false).attr("aria-autocomplete", "list");
            if(ej.isNullOrUndefined(this.element.attr('tabindex')))
				this.element.attr("tabindex", 0);
			if (/Edge\/12./i.test(navigator.userAgent)) this.element.addClass('edge-browser');
            this.target = this.element[0];
            this.dropdownbutton = null;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this.showSuggestionBox = false;
            this.noresult = true;
            this._queryString = null;
            this.suggLen = 0;
            this._selectedItems = [];
            this._modelValue = "";
            this._activeItem = 0;
			this._originalval = [];
            this.ctrlKeyPressed = false;
            this._isFocused = false;
            this._isOpened = false;
            this._typed = false;
            this._cancelEvent = false;
            this._isWatermark = this._checkWatermarkSupport();
			this._selectedObj = [];
			this.eleClick = false;
        },

        _render: function () {
            this._renderWrapper();
            this._addAttr(this.model.htmlAttributes);
            this._setDimentions();
            this._renderDropdown();
            this._checkProperties();
            this._isWatermark ? this._setWatermark() : this._setWatermarkTxt();
            this._renderSuggestionList();
            this._RightToLeft(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
            this.setVisible(this.model.visible);
            this._setListPosition();
        },
        _renderWrapper: function () {
            this.element.addClass("e-input").attr("autocomplete", "off");
			if(this.model.multiSelectMode == "visualmode"){
            this.wrapper = ej.buildTag("div.e-atc e-widget " + this.model.cssClass + "#" + this.target.id + "_wrapper").insertAfter(this.element);
            this.container = ej.buildTag("div.e-in-wrap e-box").append(this.element);
            }else{
            this.wrapper = ej.buildTag("span.e-atc e-widget " + this.model.cssClass + "#" + this.target.id + "_wrapper").insertAfter(this.element);
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            }
            if (document.activeElement == this.element[0]) var focus = true;
            this.wrapper.append(this.container);
            if (!this._isWatermark) {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                var proxy = this;
                this._hiddenSpan.click(function (event) {
                    if (!this._isFocused) proxy.element.focus();
                });
            }
            if (focus) this.element.focus();
        },

        _renderDropdown: function () {
            if (this.model.showPopupButton) {
                var span = ej.buildTag("span.e-icon e-search").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this.dropdownbutton = ej.buildTag("span.e-select#" + this.target.id + "_dropdown").attr((this._isIE8) ? { 'unselectable': 'on' } : {}).append(span);
                this.container.append(this.dropdownbutton).addClass("e-padding");
                if (!this.model.enabled)this.dropdownbutton.addClass("e-disable").attr({ "aria-disabled": true });
                this.dropdownbutton.on("mousedown", $.proxy(this._OnDropdownClick, this));
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "required") proxy.element.attr(key, value);
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "name") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._disabled(true);
                else if (key == "readOnly" && value === true) proxy._checkReadOnly(true);
                else proxy.wrapper.attr(key, value);
            });
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },

        _renderBoxModel: function () {
            this._ulBox = ej.buildTag("ul.e-ul e-boxes");
            var disableClass = this.model.enabled ? "" : "e-disable";
            this._ulBox.addClass(disableClass);
            this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            this._hiddenInput.attr("name", this.element.attr("name"));
            this.element.val("").removeAttr("name").addClass("e-visual-mode");
            if (!this._isWatermark) this.element.width(1);
            this.container.prepend(this._hiddenInput, this._ulBox);
            if(this.model.height!="")
			  this.wrapper.height(this.model.height);
			else 
				this.wrapper.height("auto");
            this._on(this.container, "mousedown", function (e) {
                if (!this.model.enabled) return false;
                var $target = $(e.target);
                if (!$target.is(this.element)) {
                    e.preventDefault();
                    if (!this._isFocused) this.element.focus();
                    if ($target.hasClass("e-options")) {
                        if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
                        if ($target.hasClass("e-active")) $target.removeClass("e-active");
                        else $target.addClass("e-active");
                    }
                    else this._moveCaretToEnd(this.element[0]);
                }
                if (!e.ctrlKey && ($target.hasClass("e-boxes") || $target.hasClass("e-input"))) this._removeActive();
            });
        },
        _destroyBoxModel: function () {
            this.container.prepend(this.element);
            this.element.attr({ name: this._hiddenInput.attr("name") }).removeAttr("style").removeClass("e-visual-mode");
            this.wrapper.height(this.model.height);
            this._hiddenInput.remove();
			this._hiddenInput = null;
            this._ulBox.remove();
            this._off(this.container, "mousedown");
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children();
            var item = items.last(), flag = item.hasClass("e-active");
            this._removeActive();
            flag ? this._deleteBox(item) : item.addClass("e-active");
        },
        _deleteBox: function (items) {
            for (var i = 0, length = items.length; i < length; i++) {
                var boxes = this._ulBox.children();
                var index = boxes.index(items[i]);
                this._selectedItems.splice(index, 1);

                var deli = this.model.delimiterChar;
                var values = this._hiddenInput.val().split(deli);
                values.splice(index, 1);
                this._hiddenInput.val(values.join(deli));
                this._selectValueByKey(values.join(deli));

                var val = this._modelValue.split(deli);
                val.splice(index, 1);
                this._modelValue = val.join(deli);
                $(items[i]).remove();
				this.deletedItem = $(items)[0].innerText;
            }
            if (this.showSuggestionBox) this._refreshPopup();
            this._valueChange();
            if (this.value() == "" && this.model.height != "") {
                $(this._ulBox).parent().css("overflow", "hidden");
                this.dropdownbutton.css("height", this.model.height);
            }
            if (this._hiddenInput.val() == "")
                this._setWatermark();
        },
        _removeActive: function () {
            this._ulBox.children("li.e-active").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = ej.buildTag("span", this.element.val()), wid, minWidth;
            this.container.append(tempSpan);
            minWidth = 30;  //  some additional width for textbox in visualmode
            wid = tempSpan.width() + minWidth;
            if (this.element.width() != wid)
                this.element.width(wid);
            if (this._hiddenInput.val() == "")
                this._setWatermark();
            tempSpan.remove();
        },

        _checkProperties: function () {
            this._checkReadOnly(this.model.readOnly);
            this.model.delimiterChar = this._validateDelimiter(this.model.delimiterChar);
            if (!this.model.enabled) {
                this.model.enabled = true;
                this._disabled(true);
            }
            else if (this.model.enabled && $(this.element).hasClass("e-disable")) {
                this.model.enabled = false;
                this._disabled(false);
            }
            this._checkNameAttr();
            if (this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            if (!ej.isNullOrUndefined(this._selectValueByKey())) {
                var key = this._selectValueByKey().toString();
                if (this.model.multiSelectMode != "none") {
                    key = key.substr(key.length - this.model.delimiterChar.length) == this.model.delimiterChar ? key : key + this.model.delimiterChar;
                    ((this.model.multiSelectMode == "visualmode") ? this._selectValueByKey(null) : this._selectValueByKey(key));
                }
                this.selectValueByKey(key);
				if (this.model.showResetIcon) this._showReset();
            }
            else {
				var value = (!ej.isNullOrUndefined(this.value())) ? this.value().toString() : this.value();
                if (this.model.multiSelectMode != "none" && (!ej.isNullOrUndefined(value) && value !="")) {
                    value = value.substr(value.length - this.model.delimiterChar.length) == this.model.delimiterChar ? value : value + this.model.delimiterChar;
                }
                this.value(this._setValue(value));
				if(value){
                var data = this.model.dataSource;
                if (ej.DataManager && data instanceof ej.DataManager) this._loadInitData(value);
                else this._setHiddenkeyByValue(data); 
				}
                if (this.model.showResetIcon && this.value() != "") this._showReset();
            }
        },

        _loadInitData: function (source) {
		        var results = this.model.dataSource, proxy = this;
		        var mapper = this.model.fields;
		        var bindTo = (mapper && mapper["text"]) ? mapper["text"] : "text";
		        if (this.model.multiSelectMode != "none")
		            source = source.split(this.model.delimiterChar);
		        if (ej.DataManager && results instanceof ej.DataManager) {
		            if (!proxy._trigger("actionBegin", { requestFrom: "default" })) {
		                var queryPromise, queryCollection = this._getQuery();
		                if (typeof (source) == "object") {
		                    for (var k = 0; k < source.length - 1; k++)
		                        queryCollection.queries.push(ej.Predicate(bindTo, "equal", source[k].trim(), !this.model.caseSensitiveSearch));
		                    queryPromise = results.executeQuery((queryCollection));
		                }
		                else
		                    queryPromise = results.executeQuery(this._getQuery().where(bindTo, "equal", source, !this.model.caseSensitiveSearch));
		                queryPromise.done(function (e) {
		                    proxy._trigger("actionSuccess", { e: e, requestFrom: "default" });
		                    if (!e.result || e.result.length > 0) proxy._setHiddenkeyByValue(e.result);
		                });
		            }
		        }
		    },

		    _setHiddenkeyByValue: function (data) {
				if(ej.isNullOrUndefined(this.value())) this.value("");
                var currValue = this.value(), results = data, totalValue = [], dval = [];
		        currValue = (this.model.multiSelectMode == "none") ? currValue : currValue.split(this.model.delimiterChar);
                if (!ej.isNullOrUndefined(results)) {
		            for (var i = 0; i < results.length; i++) {
		                var _text = this._getField(results[i], this.model.fields["text"]);
		                if (typeof (_text) == "number") _text = _text.toString();
		                if (!ej.isNullOrUndefined(this.model.fields["key"])) {
		                    var _key = this._getField(results[i], this.model.fields["key"]);
							if (typeof (currValue) == "string") {
							    if (_text == currValue)
							        this._hiddenInput.val(_key);
							} else {
							    for (var j = 0; j < currValue.length - 1; j++) {
							        if (_text == currValue[j]) {
							            if (this._hiddenInput.val() == "")
							                this._hiddenInput.val(_key);
							            else
							                this._hiddenInput.val(this._hiddenInput.val() + this.model.delimiterChar + _key + this.model.delimiterChar);
							        }
							    }
							}
		                }
		                else if (ej.isNullOrUndefined(this.model.fields["key"])) {
		                    if (typeof (currValue) == "object") {
		                        for (var k = 0; k < currValue.length - 1; k++)
		                            if (_text == currValue[k].trim())
		                                dval.push(_text);
		                        dval = this._removeDuplicateVal(dval);
                                this._hiddenInput.val(dval);
		                    }
		                    else if (_text == currValue) {
		                        this._hiddenInput.val(_text);
		                    }
		                }
		                totalValue.push(_text);
		            }
		            if (typeof (currValue) != "object" && totalValue.indexOf(currValue) == -1) this._hiddenInput.val(currValue);
		        }
		    },
        
        _checkNameAttr: function () {			
           this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
           this.element.attr("name", this.model.name);
        },

        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },

        _destroyDropdown: function () {
            this.dropdownbutton.off("mousedown", $.proxy(this._OnDropdownClick, this));
            this.dropdownbutton.remove();
            this.dropdownbutton = null;
            this.container.removeClass("e-padding");
        },

        _validateDelimiter: function (deli) {
           if ($.trim(deli).length == deli.length || deli.length != null) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _checkWatermarkSupport: function () {
            return 'placeholder' in document.createElement('input');
        },
        _setWatermark: function () {
            if ((this.model.watermarkText && (this.value() == ""|| ej.isNullOrUndefined(this.value()))) || (this.model.multiSelectMode != "visualmode"))
                this.element.attr("placeholder", this.model.watermarkText).width("");
        },
        _setWatermarkTxt: function () {
            if (this.model.watermarkText != null && $.trim(this.element.val()) == "" && (this.model.multiSelectMode != "visualmode" || $.trim(this._hiddenInput.val()) == "")) {
                var watermark = (this.model.watermarkText != null) ? this.model.watermarkText : this._localizedLabels.watermarkText;
                this._hiddenSpan.css("display", "block").text(watermark);
            }
        },

        _renderSuggestionList: function () {
            var oldWrapper = $("#" + this.element[0].id + "_suggestion").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.suggestionList = ej.buildTag("div.e-atc-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_suggestion", "", { "display": "none" }).attr("role", "listbox");
            this.element.attr("aria-owns", this.target.id + "_suggestion");
            this.popup = this.suggestionList;
            var scrollerDiv = ej.buildTag("div");
			if(this.model.multiColumnSettings.enable) {
				this._tableColumn = ej.buildTag("table","", {"border": 0, "padding": 0, "border-spacing": 0}, { "role": "listbox", "class" : "e-atc-tableContent" });
				this._listEventBind(this._tableColumn,"tr");
                this._headerColGroup = document.createElement("colgroup");				
				if(this.model.multiColumnSettings.showHeader) {
				this._tableHeaderDiv = ej.buildTag("div",{},{},{"class":"e-atc-tableHeader "+((this.model.enableRTL)? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll")});
				var headerDiv = ej.buildTag("div",{},{},{"class":"e-atc-tableHeaderContent e-atc-tableHeaderBorder"}); 
				var tr = document.createElement("tr");
				this._tableHeader = ej.buildTag("table" , "" ,{"border-spacing": "0.25px"},{});
									
                for (var z = 0, length = this.model.multiColumnSettings.columns.length; z < length; z++) {
					$(tr).append( ej.buildTag("th" , (this.model.multiColumnSettings.columns[z].headerText ? this.model.multiColumnSettings.columns[z].headerText : "column"+z) , {"text-align":(this.model.multiColumnSettings.columns[z].headerTextAlign ? this.model.multiColumnSettings.columns[z].headerTextAlign:"left")}, {"class":((z == this.model.multiColumnSettings.columns.length - 1) ? "" :(this.model.enableRTL ? "e-atc-thleft" : "e-atc-thright"))}) );
				    $(this._headerColGroup).append(document.createElement("col"));
				}
				$(this._tableHeaderDiv).append($(headerDiv).append($(this._tableHeader).append(tr).append(this._headerColGroup)));
				this.suggestionList.append(this._tableHeaderDiv);
				}
				else {
                    for (var z = 0, length = this.model.multiColumnSettings.columns.length; z < length; z++)
                        $(this._headerColGroup).append(document.createElement("col"));
					this._tableColumn.append(this._headerColGroup);
				}
				var scrollerParent = ej.buildTag("div");
				scrollerParent.append(this._tableColumn);
				scrollerDiv.append(scrollerParent);
			}
			else {
                this.ul = ej.buildTag("ul.e-ul").attr("role", "listbox");
				this._listEventBind(this.ul,"li:not('.e-category')");
				scrollerDiv.append(this.ul);
			}
            this.suggestionList.append(scrollerDiv);
            $('body').append(this.suggestionList);
            this._setListWidth();
            this._setListHeight();
			if(this.model.multiColumnSettings.enable) {
				scrollerDiv.ejScroller({ height: 0, width: 0, scrollerSize: 20 });
            this.scrollerObj = scrollerDiv.ejScroller("instance");
			}
			else {
            this.suggestionList.ejScroller({ height: 0, width: 0, scrollerSize: 20 });
            this.scrollerObj = this.suggestionList.ejScroller("instance");
				}
        },

		_listEventBind: function (element,target) {
			element.on({
					mouseenter: $.proxy(this._OnMouseEnter, this),
					mouseleave: $.proxy(this._OnMouseLeave, this),
					click: $.proxy(this._OnMouseClick, this)
				}, target);
		},
		
        _checkEmptyList: function () {
            if (this.model.multiSelectMode == "visualmode") this._removeRepeated();
            if (this.suggestionListItems.length == 0) {
                this.suggestionListItems.push(this.model.emptyResultText);
                this.noresult = true;
            }
            else this.noresult = false;
        },
        _showSuggestionList: function (e) {
            this.suggestionListItems = this.model.enableDistinct ? ej.dataUtil.distinct(this.suggestionListItems, (typeof this.suggestionListItems[0] != "object" ? "" : (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text"), true) : this.suggestionListItems;
            if(this.model.itemsCount > 0) this.suggestionListItems = ej.DataManager(this.suggestionListItems).executeLocal(ej.Query().take(this.model.itemsCount));
            this._checkEmptyList();
            this._addNewTemplate = null;
            if (this.noresult && this.model.multiSelectMode == "visualmode" && this.model.allowAddNew && this.element.val() != "" && !this._repeatRemove ) {
                this.noresult = false;
                this.suggestionListItems.pop();
                this._addNewTemplate = "   (" + this.model.addNewText + ")";
                this.suggestionListItems.push(this.element.val() + this._addNewTemplate);
                this._checkEmptyList();
            }

            if (!this.noresult || this.model.showEmptyResultText)
                this._generateSuggestionList(e);
        },

        _generateSuggestionList: function (e) {
            var list = this.suggestionListItems, i, suggList = [];
            (!this.model.multiColumnSettings.enable) ? this.ul.empty() : this._tableColumn.empty() && this.model.multiColumnSettings.showHeader && this._tableHeaderDiv.css("display", "");
            var _proxy = this;
            var fragmentParent = document.createDocumentFragment();
            if (typeof list[0] != "object") {
                if (_proxy.model.multiColumnSettings.enable) {
					var tbodyEle = ej.buildTag("tbody"); 
                    var trColumnEle = ej.buildTag("tr").attr("role", "option").attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {});
                    var tdEle = ej.buildTag("td", {}, {}, { "role": "option" });
                    for (var i = 0, listLength = list.length; listLength > i; i++) {
                        var _txt = (_proxy.model.highlightSearch && !_proxy.noresult) ? _proxy._highlightSuggestion(list[i]) : list[i];
                        var trColumn = trColumnEle.clone();
                        var td = tdEle.clone()
                         $(td).attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {}).attr((list[i] != (list.length - 1)) ? { "class": "e-atc-tdbottom" } : {}).html(_txt);
                        trColumn[0].appendChild(td[0]);
						tbodyEle[0].appendChild(trColumn[0]);
                        fragmentParent.appendChild(tbodyEle[0]);
                        _proxy.model.showEmptyResultText && _proxy.model.emptyResultText == _txt && _proxy.model.multiColumnSettings.showHeader && _proxy._tableHeaderDiv.css("display", "none") && $(td).removeClass("e-atc-tdbottom");
                        
                        if ((_proxy._addNewTemplate) && !ej.isNullOrUndefined(_proxy._tableHeaderDiv))
                            _proxy._tableHeaderDiv.css("display", "none");
                    }
                    _proxy._tableColumn[0].appendChild(fragmentParent);
                }
                else {
                    var liEle = ej.buildTag("li", {}, {}, { "role": "option" }).attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {})
                    for (var i = 0, listLength = list.length; listLength > i; i++) {
                        var _txt = (_proxy.model.highlightSearch && !_proxy.noresult) ? _proxy._highlightSuggestion(list[i]) : list[i];
                        var li = liEle.clone();
                        li[0].innerHTML=_txt;
                        fragmentParent.appendChild(li[0])
                    }
                    _proxy.ul[0].appendChild(fragmentParent);
                }
                this._currList = list;
                this._mapper = { txt: null, key: null };
            }
            else {
                var mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null };
                mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key";
                mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
                mapFld._attr = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
                this._mapper = { txt: mapFld._text, key: mapFld._key }, this._currList = [];
                if (this.model.fields.groupBy) {
                    var mapCateg = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy", groupedList, _query;
                    _query = ej.Query().group(mapCateg);
                    this._addSortingQuery(_query, "key");
                    groupedList = ej.DataManager(list).executeLocal(_query);
                    this._swapUnCategorized(groupedList);
                    groupedList.forEach(function (each, i) {
                        if (each.key)
                            if (_proxy.model.multiColumnSettings.enable) {
                                var trColumn = ej.buildTag("tr.e-category").attr("role", "option").attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {});
                                trColumn.append(ej.buildTag("td", each.key).attr("role", "option").attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {}).attr((i != (list.length - 1)) ? { "class": "e-atc-tdbottom" } : {}));
                                _proxy._tableColumn.append(trColumn);
                            }
                            else _proxy.ul.append(ej.buildTag("li.e-category", each.key).attr("role", "option").attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {}));
                        _proxy._generateLi(each.items, mapFld);
                    });
                }
                else this._generateLi(list, mapFld);
            }
            for (var i = 0, listLength = list.length; listLength > i; i++) {
                if (this.model.multiColumnSettings.enable) {
                    var data = this._textFormateString(this._currList[i]);
                    if (data == this.value()) {
                        var activeText = this._getLiTags()[i];
                        $(activeText).addClass('e-activeli');
                    }
                }
                else {
                    var value = this.value().split(this.model.delimiterChar);
                    for (var k = 0; k <= value.length; k++) {
                        if (this._currList[i] == value[k]) {
                            var activeText = this._getLiTags()[i];
                            $(activeText).addClass('e-activeli');
                        }
                    }
                }
            }
            if (this._getLiTags().length > 0) {
				this._showResult(e);
			}

        },

        _swapUnCategorized: function (list) {
            var length = list.length;
            for (var i = 0; i < length; i++) {
                if (!list[i].key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = list[i];
                    return false;
                }
            }
        },

        _generateLi: function (list, mapFld) {
            var _proxy = this;
            var fragmentParent = document.createDocumentFragment();
            var fragment = document.createDocumentFragment();
            if (_proxy.model.multiColumnSettings.enable) {
                var multiColumnLength = _proxy.model.multiColumnSettings.columns.length;
                this._tableColumn.append(ej.buildTag("tbody"));
                var trEle = ej.buildTag("tr");
                var tdEle = ej.buildTag("td");
                for (var j = 0, listLength = list.length; listLength > j; j++) {
                    var _text = this._getField(list[j],mapFld._text);
                    var _key = this._getField(list[j],mapFld._key);
                    if (!ej.isNullOrUndefined(_text) || _proxy.model.multiColumnSettings.enable) {
                        var fieldAttr = _proxy._getField(list[j]);
                        var tr = trEle.clone();
                        tr[0].className = (j % 2) ? "e-atc-trbgcolor" : "";
                        for (var z = 0; z < multiColumnLength; z++) {
                            var td = tdEle.clone();
                            if(this.model.multiColumnSettings.searchColumnIndices.length !=0)
                            td[0].innerHTML = (_proxy.model.highlightSearch && $.inArray(z, _proxy._searchColumnIndex) > -1) ? _proxy._highlightSuggestion(_proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field).toString()) : _proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field);
                            else
                                td[0].innerHTML = (_proxy.model.highlightSearch && $.inArray(z.toString(), _proxy._columnIndex) > -1) ? ((!ej.isNullOrUndefined(_proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field))) ? _proxy._highlightSuggestion(_proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field).toString()) : _proxy._highlightSuggestion("")) : _proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field);
                            td[0].className = (((j != (list.length - 1)) ? "e-atc-tdbottom " : "") + ((z != (_proxy.model.multiColumnSettings.columns.length - 1)) ? ((_proxy.model.enableRTL) ? "e-atc-tdleft " : "e-atc-tdright ") : ""))+(_proxy.model.multiColumnSettings.columns[z].cssClass ?_proxy.model.multiColumnSettings.columns[z].cssClass:"" );
                            td[0].style.textAlign = (_proxy.model.multiColumnSettings.columns[z].textAlign ? _proxy.model.multiColumnSettings.columns[z].textAlign:"left");
							fragment.appendChild(td[0])
                        }
                        tr[0].appendChild(fragment);
                        if (_key)
                            tr.attr("id", _key);
                        _proxy._setAttributes(_proxy._getField(list[j], mapFld._attr), tr[0]);
                        fragmentParent.appendChild(tr[0]);
                        _proxy._currList = _proxy._currList.concat([list[j]]);
                    }
                }
                $(_proxy._tableColumn).find("tbody")[0].appendChild(fragmentParent);
            }
            else {
				var liEle= $("<li></li>");
                for (var j = 0, listLength = list.length; listLength > j; j++) {
                    var _text = this._getField(list[j],mapFld._text);
                    var _key = this._getField(list[j],mapFld._key);
                    if (!ej.isNullOrUndefined(_text)) {
                        if (_proxy.model.highlightSearch) _text = _proxy._highlightSuggestion(_text);
                        if (_proxy.model.template) _text = _proxy._getTemplatedString(list[j], mapFld._text, _text);
                        var li = liEle.clone();
                        li[0].innerHTML += _text;
                        if (_key)
                             li[0].setAttribute("id", _key);
                        _proxy._setAttributes(_proxy._getField(list[j], mapFld._attr), li[0]);
                        fragmentParent.appendChild(li[0]);
                        _proxy._currList = _proxy._currList.concat([list[j]]);
                    }
                }
                _proxy.ul[0].appendChild(fragmentParent);
            }

        },

        _getLiTags: function () {
            return (!this.model.multiColumnSettings.enable) ? this.ul.children("li:not('.e-category')") :this._tableColumn.find("tbody tr:not('.e-category')") ;
        },

        _getTemplatedString: function (list, searchLabl, searchTxt) {
            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                var replace = this._getField(list, field);
                // if highlightSearch is enabled, it replaces the highlighted search text
                if (searchLabl == field) replace = searchTxt;
                if (!replace) replace = "";
                str = str.split(content).join(replace);
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },

        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },

        _setAttributes: function (data, element) {
            if (data) {
                if (typeof data == "string")
                    data = $.parseJSON(data);
                for (var key in data)
                    element.setAttribute(key, data[key]);
            }
        },

        _setListWidth: function () {
            var width = this.model.popupWidth;
            if (width && width != "auto") this.suggestionList.css({ "width": width });
            else this.suggestionList.css({ "width": this.wrapper.width() });
        },

        _setListHeight: function () {
            this.suggestionList.css({ "max-height": this.model.popupHeight });
        },

        _refreshPopup: function () {
            if (this.model.popupWidth == "auto" && Math.floor(this.wrapper.outerWidth()) != Math.floor(this.suggestionList.outerWidth())) {
                this.suggestionList.css({ "width": this.wrapper.width() });
                this._refreshScroller();
            }
            this._setListPosition();
        },

        _showResult: function (e) {
            this._refreshScroller();
            this._refreshPopup();
            if (this._isOpened)
                $(document).on("mousedown", $.proxy(this._OnDocumentClick, this));
            else {
                this.suggestionList.css("display", "none");
                var tis = this;
                clearTimeout(this._typing);
                this._typing = setTimeout(function () {
                    tis.suggestionList[(tis.model.animateType == "slide" ? "slideDown" : "fadeIn")]((tis.model.animateType == "none" ? 0 : 300), function () {
                        $(document).on("mousedown", $.proxy(tis._OnDocumentClick, tis));
                    });
                }, this.model.delaySuggestionTimeout);
                var args = (e != undefined) ? { event: e, isInteraction: true } : { isInteraction: false };
                this._trigger("open", args);
                this.wrapper.addClass("e-active");
            }

            this._isOpened = true;
            this.showSuggestionBox = true;
            var _suggestionListItems = this._getLiTags();
            this._listSize = _suggestionListItems.length;


            $(window).on("resize", $.proxy(this._OnWindowResize, this));
            var scrObj = ej.getScrollableParents(this.wrapper);
            if (scrObj[0] != window)
                this._on(scrObj, "scroll", this._hideResult);
        },

        _hideResult: function (e) {
            if (this.showSuggestionBox) {
                this.showSuggestionBox = false;
                this._activeItem = 0;
                clearTimeout(this._hiding);
                this.element.attr("aria-expanded", false);
                var proxy = this;
                if (this._isOpened) {
                    this.suggestionList.css("display", "none");
                    var args = (e != undefined) ? { event: e, isInteraction: true } : { isInteraction: false };
                    this._trigger("close", args);
                }
                else {
                    this._hiding = setTimeout(function () {
                        if( proxy.model ) proxy.suggestionList[(proxy.model.animateType == "slide" ? "slideUp" : "fadeOut")]((proxy.model.animateType == "none" ? 0 : 100));
                         proxy._activeItem = 0;
                    }, this.model.delaySuggestionTimeout);
                }
                $(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
                $(window).off("resize", $.proxy(this._OnWindowResize, this));
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                this.wrapper.removeClass("e-active");
            }
        },

        _refreshScroller: function () {
            this.suggestionList.css("height", "auto");
            this.suggestionList.find(".e-content , .e-scroller").removeAttr("style");
            
			if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
			$(this._tableColumn).css("width" ,"auto");
			$(this._tableHeader).css("width" ,"auto");
			}
            this.suggestionList.css("display", "block");
			if(this.model.multiColumnSettings.enable) {
				this.scrollerObj.option("height","auto");
				this._columnBorderAlign();
			}
            var _suggestHeight = this.suggestionList.height() > (parseInt($.isNumeric(this.model.popupHeight) ? this.model.popupHeight : this.model.popupHeight.replace("px", "")) - 4);
            if ( _suggestHeight || (this.model.multiColumnSettings.enable && (( this.suggestionList.height() <= this._tableColumn.height() )|| ( this.suggestionList.width() <= this._tableColumn.width() || (this.model.multiColumnSettings.showHeader && this.suggestionList.width() <= this._tableHeader.width()) )))){
                if( _suggestHeight ) this.scrollerObj.model.height = (this.model.multiColumnSettings.showHeader && this._tableHeader) ? parseInt(this.suggestionList.height()) - parseInt(this._tableHeader.height()) : this.suggestionList.height();
                if(!this.model.multiColumnSettings.enable && this.suggestionList.width() < this.suggestionList.find(".e-ul").width())  this.suggestionList.find(".e-ul").width(this.suggestionList.find(".e-ul").width());
				this.scrollerObj.model.width = this.suggestionList.width();
                this.scrollerObj.refresh();
                this.scrollerObj.option({"enableRTL" : this.model.enableRTL , "scrollTop": 0 , "scrollLeft" : 0 });
				if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._addThBorder();
                this.suggestionList.addClass("e-scroller")
				if(!this.scrollerObj._vScroll && this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._removeThBorder();
            }
            else {
				this.scrollerObj.setModel({height:"auto", width:this.suggestionList.width()});
				this.scrollerObj.refresh();
				if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._removeThBorder();
			}
            this.suggestionList.css("height", "auto");
            if (this._isIE8)
                this.suggestionList.find('.e-vscroll div, .e-hscroll div').attr("unselectable", "on");
			if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
		    this.suggestionList.find(".e-content").scroll(ej.proxy(function (e) {
                    this._tableHeader.parent(".e-atc-tableHeaderContent").scrollLeft($(e.currentTarget).scrollLeft());
            }, this));
			if(this.suggestionList.find(".e-content").length > 0) this._tableHeader.parent(".e-atc-tableHeaderContent").scrollLeft(this.model.enableRTL ?  this.suggestionList.find(".e-content")[0].scrollWidth - this.suggestionList.find(".e-content")[0].clientWidth : 0);
			}
        },
		
		_columnBorderAlign : function (){
			if (this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader && this._tableHeaderDiv.css("display") != "none") {
				this._tableWid = (this._tableHeader.outerWidth() > this._tableColumn.outerWidth() ) ? this._tableHeader.outerWidth() : this._tableColumn.outerWidth(); 
				this._tableColumn.find("colgroup").remove();
				$(this._headerColGroup.children).removeAttr("style");
                for (var z = 0, length = this._headerColGroup.children.length; z < length; z++) {
					$(this._headerColGroup.children[z]).css({"width": ( parseInt($(this._tableColumn).find("tr:first td").eq(z).outerWidth()) > parseInt(this._tableHeader.find("tr:first th").eq(z).outerWidth() ) ? $(this._tableColumn).find("tr:first td").eq(z).outerWidth() : this._tableHeader.find("tr:first th").eq(z).outerWidth()) });
				}
				this._tableColumn.append($(this._headerColGroup).clone());
				var wid = (this._tableWid > this.suggestionList.width()) ? this._tableWid : "100%" ;
				$(this._tableColumn).css("width" , wid );
				$( this._tableHeader ).css("width" , wid);
			}
			else if (this.model.multiColumnSettings.enable && !this.model.multiColumnSettings.showHeader ) {
				$(this._tableColumn).css("width" , "auto" );
				this._tableWid = this._tableColumn.outerWidth(); 
				$(this._headerColGroup.children).removeAttr("style");
				var wid = (this._tableWid > this.suggestionList.width()) ? this._tableWid : "100%" ;
				if(wid != "100%") {
                    for (var z = 0, length = this._headerColGroup.children.length; z < length; z++) {
						$(this._headerColGroup.children[z]).css({"width": $(this._tableColumn).find("tr:first td").eq(z).outerWidth() });
					}
					this._tableColumn.append(this._headerColGroup);
				}
				$(this._tableColumn).css("width" , wid );
			}	
			else $(this._tableColumn).css("width","100%");
		},

		_removeThBorder: function(){
			this._tableHeader.parents(".e-atc-tableHeader").removeClass((this.model.enableRTL)? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll");
			this._tableHeader.parent(".e-atc-tableHeaderContent").removeClass("e-atc-tableHeaderBorder");
		},
		
		_addThBorder: function(){
			this._tableHeader.parents(".e-atc-tableHeader").addClass((this.model.enableRTL)? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll").removeClass((this.model.enableRTL)? "e-atc-tableHeaderScroll" : "e-atc-tableHeaderRTL");
			this._tableHeader.parent(".e-atc-tableHeaderContent").addClass("e-atc-tableHeaderBorder");
		},
        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.suggestionList.outerHeight(),
            popupWidth = this.suggestionList.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.suggestionList.outerWidth() - elementObj.outerWidth();
            this.suggestionList.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },
        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.suggestionList);
        },

        _targetFocus: function (e) {
            var minWidth = 30;  //  minimum width for textbox in visualmode
            if (this.model.multiSelectMode == "visualmode")
                this._setWatermarkWidth(minWidth);
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.wrapper.addClass("e-focus");
			this._focusValue = this.model.value;
            this._isFocused = true;
            this._trigger("focusIn", { event: e, isInteraction: true, value: this.value() });
        },
        _focusOutAction: function (e) {
			var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();	
            this._isFocused = false;
            this.wrapper.removeClass("e-focus");
            if (ej.isNullOrUndefined(this.model.fields["key"])) {
                if (this.model.multiSelectMode == "none") {
                    var data = this.model.dataSource;
                    if (ej.DataManager && data instanceof ej.DataManager) this._loadInitData();
                    else this._setHiddenkeyByValue(data);
                }
                else this._hiddenInput.val(currValue);
            }
			if (this._focusValue != this.model.value){  
			   if(this._hiddenInput.val() == "")
                   this._hiddenInput.val(currValue);			
			this._changeEvtTrigger(currValue, e); }
			else
			     return false;
            if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
            !this._isWatermark && this._setWatermarkTxt();
            this._removeSelection();
			if(this.model.multiSelectMode == "visualmode" && this.model.showResetIcon && this.element.val() != "")
				this._removeReset();
            if (this.model.multiSelectMode == "visualmode") {
                this._removeActive();
                this.element.val("");
                this._setWatermarkWidth(1);
                this._preVal = "";
                this._addNewTemplate = null;
            }
            else {
                if (this.model.multiSelectMode == "delimiter") 
                        this._valueChange(e);
                this._updateSelectedItemArray(this.getValue());
            }
		    if(!ej.isNullOrUndefined(this.value()) && this.value()!="")
			{
				var values = this.value().split(this.model.delimiterChar);
				if(this.model.multiSelectMode == "delimiter" || this.model.multiSelectMode == "none" )
				{
					var result = this._removeDuplicateVal(values); 
					this._keyProcess(result);
				}
			}
			if(this.element.val() == "" && (this.value() == "" || this.value() == null))
				this._selectValueByKey(null);
        },
        _targetBlur: function (e) {
            this._focusOutAction(e);
            this._trigger("focusOut", { event: e, isInteraction: true, value: this.value() });
			this._targetEle();
        },
        _setWatermarkWidth: function (width) {
            this.model.watermarkText && this.element.attr('placeholder') ? this.element.width("") : this.element.val("").width(width);
        },
        _checkDeli: function () {
            var val = this.element.val(), deli = this.model.delimiterChar, last = val.substr(val.length - deli.length, val.length);
            if (last == deli) {
                this.element.val(val.substr(0, val.length - deli.length));
                return true;
            }
            else return false;
        },
        _removeSelection: function () {
            if (this.model.enableAutoFill) {
                this.element.attr("aria-autocomplete", "both");
                var selection = this._getCaretSelection();
                if (selection.end - selection.start != 0 && selection.end - selection.start != this.element.val().length)
                    this.target.value = this.target.value.substr(0, selection.start);
            }
        },

        _removeListHover: function () {
            this._getLiTags().removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = $(this._getLiTags()[this._activeItem - 1]);
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
        },

        _calcScrollTop: function () {
            var ulH = (this.model.multiColumnSettings.enable) ? ((this.model.multiColumnSettings.showHeader) ? this._tableColumn.outerHeight() + this._tableHeader.outerHeight()  : this._tableColumn.outerHeight() ): this.ul.outerHeight() , li = (!this.model.multiColumnSettings.enable) ? this.ul.find("li") : this._tableColumn.find("tr"), liH = 0, index, top, i;
            index = (!this.model.multiColumnSettings.enable) ? this.ul.find("li.e-hover").index() : this._tableColumn.find("tr.e-hover").index();
            liH = li.eq(1).outerHeight() * index;
            top = liH - ((((this.model.multiColumnSettings.enable) ? this._tableColumn.parent().outerHeight() : this.suggestionList.outerHeight()) - li.eq(index).outerHeight()) / 2);
            return top;
        },

        getActiveText: function () {
			if (this._activeItem > 0) {
				if(this.model.multiColumnSettings.enable) return this._textFormateString(this._currList[this._activeItem -1 ])
				else if (!ej.isNullOrUndefined(this._mapper) && this._mapper.txt) return this._getField(this._currList[this._activeItem - 1], this._mapper.txt);			
				else  return  this._currList[this._activeItem  - 1];
			}
        },

        _getUniqueKey: function () {
            var key = null;
			if(!ej.isNullOrUndefined(this._mapper))
			{
			    if (this._mapper.key) key = this._getField(this._currList[this._activeItem - 1], this._mapper.key);
			    ej.isNullOrUndefined(key) && (key = null);
			}
            return key;
        },

        _setTextBoxValue: function () {
            if (this._activeItem && !this.noresult) {
                var currentValue, selection, val, text;
                currentValue = this.model.multiColumnSettings.enable ? this._textFormateString(this._currList[this._activeItem -1 ]) : this.getActiveText();
                selection = this._getCaretSelection();
                this.suggLen = selection.start;
                val = this.target.value.substr(0, this.suggLen);
                var _deliIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
				if(_deliIndex == -1) { var query = $.trim(val.substr(_deliIndex + 1, this.suggLen));}
               else				
				var query = $.trim(val.substr(_deliIndex + ((this.model.delimiterChar).length) ,this.suggLen));			
                if (val && (val.toLowerCase() == currentValue.substr(0, this.suggLen).toLowerCase() || query.toLowerCase() == currentValue.substr(0, this.suggLen -( _deliIndex + ((this.model.delimiterChar).length))).toLowerCase())) {
                    if (this.model.multiSelectMode == "delimiter") 
                        text = val + currentValue.substr(query.length, currentValue.length);            
                    else 
                        text = val + currentValue.substr(val.length, currentValue.length);
                    this.element.val(text);
                    this._autofilSelection();
                    if (this.model.multiSelectMode == "visualmode") {
						this._adjustWidth();
						if(this.model.enableAutoFill) this._refreshPopup();
					}
                    if (this.model.autoFocus && !this.noresult) this._addListHover();
                }
                else {
					if (this.model.multiSelectMode == "delimiter" && currentValue && query) this.element.val(this.element.val().replace(query,currentValue))
					else if (currentValue) this.element.val(currentValue)
					this._removeSelection();
				} 
            }
        },

        _enterTextBoxValue: function (e) {
            if (this._activeItem && !this.noresult && !this.model.readOnly) {
                var currentValue = this.getActiveText(), currItem = this._currList[this._activeItem - 1];
                this._preVal = currentValue + ((this.model.multiSelectMode == "delimiter") ? this.model.delimiterChar : "");
                this._valueToTextBox(currentValue, currItem, false);
                var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val() == "" ? null : this.element.val();
                this._trigger("select", { event: e, isInteraction: true, value: currValue, text: currentValue, key: this._getUniqueKey(), item: currItem });
                this._valueChange(e);
                if (this.model.showResetIcon) this._showReset();
            }
            this._isOpened && this._trigger("close", { event: e, isInteraction: true });
        },

        _createBox: function (value) {
            var span = ej.buildTag("span.e-icon e-close");
            var li = ej.buildTag("li.e-options", value).append(span);

            this._on(span, "click", function (e) {
                if (!this.model.enabled) return false;
                this._deleteBox($(e.target).parent());
            });
            return li;
        },

        _addLoadingClass: function () {
            if (this.model.showLoadingIcon)
                this.element.addClass("e-load");
        },

        _removeLoadingClass: function () {
            this.element.removeClass("e-load");
        },


        _highlightSuggestion: function (suggestion) {
            if ($.trim(this._queryString) != "") {
                var caseSensitive, tempQueryString, RegEx, mch, split, query, str;
                caseSensitive = this.model.caseSensitiveSearch ? "g" : "gi";
                query = $.trim(this._queryString);
                query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                tempQueryString = this.model.filterType == "startswith" ? "^" + query : this.model.filterType == "endswith" ? query + "$" : query;
                RegEx = new RegExp(tempQueryString, caseSensitive);
                if (RegEx.test(suggestion)) {
                    mch = suggestion.match(RegEx);
                    //for IE-8 the regEx doesnt returns the empty string.So manually we replace string to return empty string.
                    str = suggestion.replace(RegEx, "~^");
                    split = str.split("~^");
                    suggestion = "";
                    for (var i = 0, splitlength = split.length; splitlength > i; i++)
                        suggestion += mch[i] ? split[i] + "<span class='e-hilight-txt'>" + mch[i] + "</span>" : split[i];
                }
            }
            return suggestion;
        },

        _RightToLeft: function (value) {
            if (value) {
                this.wrapper.addClass("e-rtl");
                this.suggestionList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                this.suggestionList.removeClass("e-rtl");
            }
			if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
					this._tableHeaderDiv.removeClass( value ? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll" );
					this._tableHeader.find("tr :not(th:last)").addClass(value ? "e-atc-thleft" : "e-atc-thright").removeClass(value ? "e-atc-thright" : "e-atc-thleft" );
			}
        },

        _setRoundedCorner: function (value) {
            if (value) {
                this.container.addClass("e-corner");
                this.suggestionList.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                this.suggestionList.removeClass("e-corner");
            }
        },

        _checkReadOnly: function (value) {
            this.model.readOnly = value;
            if (this.model.readOnly) {
                this.element.attr({ "readonly": "readonly", "aria-readonly": true });
                this._off(this.element, "keydown", this._OnKeyDown);
                this._off(this.element, "keyup", this._OnKeyUp);
				this._off(this.element, "paste", this._OnPaste);
				this._off(this.element, "keypress", this._onkeyPress);
            }
            else {
                this.element.removeAttr("readonly aria-readonly");
                this._on(this.element, "keydown", this._OnKeyDown);
                this._on(this.element, "keyup", this._OnKeyUp);
			    this._on(this.element, "paste", this._OnPaste);
				this._on(this.element, "keypress", this._onkeyPress);
            }
        },
		_onkeyPress: function (e) {
			if(e.keyCode == 13) this._PreventDefaultAction(e);
		},
		_OnPaste: function (e) {
			var _proxy = this;
			setTimeout(function () {
				 _proxy._OnKeyUp(e);
				}, 0);
		},
        _OnKeyDown: function (e) {
            if (this.model.filterType != "startswith")
                this.model.enableAutoFill = false;

            switch (e.keyCode) {
                case 37:
                case 35:
                case 36:
                    this._removeSelection();
				case 13:
                case 39:
                    break;
                case 38:
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem > 1)
                            this._activeItem -= 1;
                        else
                            this._activeItem = this._listSize;
                        this._navigationHover();
                    }
                    this._PreventDefaultAction(e);
                    break;
                case 40:
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem < this._listSize)
                            this._activeItem += 1;
                        else
                            this._activeItem = 1;
                        this._navigationHover();
                    } else {
                        if (e.ctrlKey && this.element.val() == "") {
                            this._showFullList(e);
                        }
                        else if (e.ctrlKey) {
                            this._showSuggestionList(e);
                        }
                    }
                    this._PreventDefaultAction(e);
                    break;
				case 33: /* page up */
				case 34:
				    if (this.showSuggestionBox && this.suggestionList) {
						this._removeListHover();             
                        var suggestionH = (this.model.multiColumnSettings.enable) ? this._tableColumn.parent().height() : this.suggestionList.height();
                        var liH = (this.model.multiColumnSettings.enable) ? this._tableColumn.find("tr").outerHeight() : this.ul.children("li").outerHeight();
                        var activeItem = Math.round(suggestionH / liH) != 0 ? Math.round(suggestionH / liH) : this._listSize;
                        this._activeItem = (e.keyCode == 33) ? this._activeItem - activeItem :  this._activeItem + activeItem
						if( this._activeItem < 1) this._activeItem = 1;
						if(this._activeItem > this._listSize ) this._activeItem = this._listSize;
						this._navigationHover();
					}
                        this._PreventDefaultAction(e);
                        break;
                case 8:
                    if ($.trim(this.element.val()) == "") this._isOpened = false;
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteLastBox();
                    }
                    break;
                case 17:
                    this.ctrlKeyPressed = true;
                    break;
                case 9:
                    if (this.showSuggestionBox) {
                        this._queryString = this.element.val();
                        this._enterTextBoxValue(e);
                        this._hideResult(e);
                        this._isOpened = false;
                        this._PreventDefaultAction(e);
                    }
                    break;
                case 27:
                    this._isOpened = false;
                    var _showSuggestionBox = this.showSuggestionBox;
                    this._hideResult(e);
                    this._PreventDefaultAction(e);
                    if (_showSuggestionBox) this._trigger("close", { event: e, isInteraction: true });
                    break;
            }
            if (this.model.multiSelectMode == "visualmode") {
                if (e.keyCode != 17 && e.keyCode != 8 && e.keyCode != 46) this._removeActive();
                this._adjustWidth();
            }
        },


        _PreventDefaultAction: function (e) {

            e.preventDefault();
            if (!this._cancelEvent) {
                e.stopPropagation();
                e.cancelBubble = true;
                e.returnValue = true;
            }

        },
        _bubbleEvent: function (cancelevent) {

            if (typeof cancelevent == "boolean")
                this._cancelEvent = cancelevent;
            return this._cancelEvent;
        },
        _navigationHover: function () {
			this._addListHover();
            if (this.model.enableAutoFill) {
                this.element.attr("aria-autocomplete", "both");
                this._queryString = this.target.value;
                this._setTextBoxValue();
            }
		},


        _OnKeyUp: function (e) {
            this._keyDownComplete(e);
            if (this.ctrlKeyPressed && e.type != "paste") {
                if (e.keyCode == 17)
                    this.ctrlKeyPressed = false;
                return false;
            }

            if ($.trim(this.element.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                this._hideResult(e);
                return false;
            }
            if (!this._checkDelimiter()) return false;
            this._queryString = $.trim(this._queryString);

            switch (e.keyCode) {
				case 34:
				case 33:
                case 38:
                case 40:
                case 37:
                case 39:
                case 20:
                case 16:
                case 17:
                case 18:
                case 35:
                case 36:
                case 144:
                case 9:
                case 27: break;

                case 13:
                    e.preventDefault();
                    this._queryString = this.element.val();
                    this._enterTextBoxValue(e);
                    if (this.model.enableAutoFill) {
                        this.element.attr("aria-autocomplete", "both");
                        this.suggLen = this.element.val().length;
                        this._autofilSelection();
                    }
                    this._isOpened = false;
                    this._hideResult(e);
                    break;

                case 46:
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteBox(this._ulBox.children("li.e-active"));
                        break;
                    }
                case 8:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = false;
                        this._OnTextEnter(e);
                    }
                    else {
                        this.noresult = true;
                        this._hideResult(e);
                        if ($.trim(this.element.val()) == "") 
                            this._isOpened = false;
                    }
                    this._typed = true;
                    break;

                default:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = true;
                        this._OnTextEnter(e);
                    }
                    else {
						this.noresult = true;
						this._isOpened = false;
					}
                    this._typed = true;
                    break;
            }
        },

        _getFilteredList: function (list, e) {
            clearTimeout(this.timeDelay);
            if (!ej.isNullOrUndefined(list) && typeof list[0] == "object") {
                var bindTo = (this.model.fields.text) ? this.model.fields["text"] : "text";
                if ( this.model.actionFailure && ej.isNullOrUndefined((ej.DataManager(list).executeLocal(ej.Query().select(bindTo))[0])) )
                    this._trigger("actionFailure", { error: this._localizedLabels["actionFailure"] });
            }
            if (!list || !list.length || list.length < 1) {
                this.suggestionListItems = [];
                if (this.model.actionFailure) this._trigger("actionFailure", { error: this._localizedLabels["actionFailure"] });
            }
            else {
                var tempQuery = ej.Query();
                this._addQuery(tempQuery, typeof list[0] == "object");
                this.suggestionListItems = ej.DataManager(list).executeLocal(tempQuery);
                if (this.model.actionSuccess) this._trigger("actionSuccess");
            }
            this._doneRemaining(e);
            if (this.model.actionComplete)
                this._trigger("actionComplete");
        },

        _performSearch: function (e) {
            if (this.model.actionBegin)
                this._trigger("actionBegin");
            var source = this.model.dataSource;
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
                    window.clearTimeout(this.timer);
                    var proxy = this;
                    this.timer = window.setTimeout(function () {
                        proxy._fetchRemoteDat(source);
                    }, 700);
                }
                else {
					this._getFilteredList(source.dataSource.json, e);
					this._selectedObj.push(source.dataSource.json);
				}
            }
            else this._getFilteredList(source, e);
        },

        _fetchRemoteDat: function (source) {
            var proxy = this, queryPromise, tempQuery = this._getQuery();
            this._addQuery(tempQuery, true);
            queryPromise = source.executeQuery(tempQuery);
            queryPromise.fail(function (e) {
                proxy.suggestionListItems = null;
                proxy._removeLoadingClass();
                proxy._trigger("actionFailure", e);
            }).done(function (e) {
                proxy.suggestionListItems = e.result;
				if(proxy.model.multiSelectMode == "none")
					proxy._selectedObj = e.result;
				else if(proxy.model.multiSelectMode == "delimiter")
					proxy._selectedObj = proxy._selectedObj.concat(e.result);
                proxy._doneRemaining(e);
                proxy._trigger("actionSuccess", e);
            }).always(function (e) {
                proxy._trigger("actionComplete", e);
            });
        },

        _addSortingQuery: function (query, key) {
            if (this.model.allowSorting) {
                var order = (this.model.sortOrder == "descending") ? true : false;
                query.sortBy(key, order);
            }
        },

        _addQuery: function (_query, checkMapper) {
            var bindTo = "";
            var predicate, index;
			this._predicates =[];
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
			if (this._queryString) {
            if (this.model.multiColumnSettings.enable) {
				this._columnsIndex();
				if (checkMapper) {
                    var bindTo = [];
                    if(this.model.multiColumnSettings.searchColumnIndices.length !=0){
				    for (var i = 0, length = this._searchColumnIndex.length; i < length; i++) {
				        bindTo.push(this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].field);
				        predicate = this._predicateConvertion(predicate, this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].field, (this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].filterType ? this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].filterType : this.model.filterType), this._queryString, !this.model.caseSensitiveSearch, (this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].type ? this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].type : "string"));
                    }
                }
                else{
                    for (var i = 0, length = this._columnIndex.length; i < length; i++) {
				        bindTo.push(this.model.multiColumnSettings.columns[this._columnIndex[i]].field);
				        predicate = this._predicateConvertion(predicate, this.model.multiColumnSettings.columns[this._columnIndex[i]].field, (this.model.multiColumnSettings.columns[this._columnIndex[i]].filterType ? this.model.multiColumnSettings.columns[this._columnIndex[i]].filterType : this.model.filterType), this._queryString, !this.model.caseSensitiveSearch, (this.model.multiColumnSettings.columns[this._columnIndex[i]].type ? this.model.multiColumnSettings.columns[this._columnIndex[i]].type : "string"));
                    }
                }
				    for (var i = 0; i < _query.queries.length; i++) {
				        if (_query.queries[i].fn == "onWhere") {
				            index = _query.queries.slice(i)[0].e;
				        }
				    }
				    if(ej.isNullOrUndefined(index) && this.model.multiColumnSettings.searchColumnIndices.length !=0)
                        this._predicates.length > 0 && (_query.where(ej.Predicate["or"](this._predicates)));
				    else if (this.model.multiColumnSettings.searchColumnIndices.length !=0)
					    _query.where((index).and(this._predicates));
				    else if (ej.isNullOrUndefined(index))
				        _query.where(predicate);
				    else
				        _query.where((index).and(predicate));
				}
				else _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch, this.model.ignoreAccent);

            }
            
			else _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch, this.model.ignoreAccent);
			}
            this._addSortingQuery(_query, bindTo);
        },

		_predicateConvertion: function( predicate, field, filterType, value, casing ,type){
			var _query, accent = this.model.ignoreAccent;
			if(type == "number")
				_query = Number(value);
			else if(type == "boolean") {
				if(value == "true" || value == "yes" || value =="1") _query = true;
				else if(value == "false" || value == "no" || value =="0") _query = false;
			}	
			else if(type =="date")
				_query = new Date(value);
			else _query = value;
			if( (type == "number" && isNaN(_query)) ||(type == "boolean" && _query == undefined ) )
				predicate = predicate;
			else if (this.model.multiColumnSettings.searchColumnIndices.length !=0)
			    this._predicates.push(new ej.Predicate(field, filterType, _query,casing, accent));
			else 
				predicate = predicate != undefined ? predicate["or"]( field, filterType, _query,casing, accent):ej.Predicate( field, filterType, _query,casing, accent);
			return predicate;
		}, 
		
        _getQuery: function () {
            if (ej.isNullOrUndefined(this.model.query)) {
                var column = [], queryManager = ej.Query(), mapper = this.model.fields;
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!ej.isNullOrUndefined(this.model.dataSource.dataSource.url) && !this.model.dataSource.dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else queryManager = this.model.query.clone();
            return queryManager;
        },

        _OnTextEnter: function (e) {
            var proxy = this;
			if( ej.isDevice() ) {
            clearTimeout(this.timeDelay);
            this.timeDelay = setTimeout(function () {
                proxy._onTextProcess(e);
            }, proxy.model.delaySuggestionTimeout);
			}
			else proxy._onTextProcess(e);
        },
		_onTextProcess: function (e) {
			this._addLoadingClass();
			this.element.attr("aria-expanded", false);
			this._performSearch(e);
			if (this.model.showResetIcon) this._showReset();
		},
        _showReset: function () {
            if (ej.isNullOrUndefined(this.resetSpan)) {
                this.resetSpan = ej.buildTag("span.e-icon e-iclose");
                if (!this.model.showPopupButton) {
                    this.container.append(this.resetSpan).addClass("e-reset");
                }
                else {
                    this.dropdownbutton.before(this.resetSpan);
                    this.container.addClass("e-popup e-reset");
                }
		        this._on(this.resetSpan, "mousedown", this._refreshSearch);
            }          
        },
		
		_targetEle:function(){
			if(this.eleClick){
            this.element[0].focus();
			this.eleClick = false;
			}
		},
		 
		_refreshSearch:function(){
			this.resetSpan = null;
			this.clearText();			
            this.eleClick = true;
			this._refreshPopup();
		},
		
		_removeReset:function (){
	        this.resetSpan = this.resetSpan && this.resetSpan[0].remove();		
            this._refreshPopup();			  
		  },

        _doneRemaining: function (e) {
            this._showSuggestionList(e);
            this.element.attr({"aria-expanded": true , "aria-haspopup": true});
            if (this.model.enableAutoFill && this._autoFill && !this.noresult || this.model.autoFocus) {
                this.element.attr("aria-autocomplete", "both");
                this._activeItem = 1;
                this._queryString = this.target.value;
            }
            if (this.model.enableAutoFill && this._autoFill && !this.noresult) this._setTextBoxValue();
            if (this.model.autoFocus && !this.noresult) { this._addListHover(); if (this.wrapper.width() > 0) this.suggestionList.children('div.e-content').css({ "width": this.wrapper.width() }); }
            this._removeLoadingClass();
            if (this.noresult && !this.model.showEmptyResultText)
                this._hideResult(e);
        },

        _removeRepeated: function () {
            var results = this.suggestionListItems;
            if (!results || results.length == 0 || this._selectedItems.length == 0 || ( this.suggestionListItems.length == 1 && this.suggestionListItems[0] == (this.element.val() + this._addNewTemplate)))
                return false;
			this._repeatRemove = false;
			for (var i = 0, length = this._selectedItems.length; i < length; i++) {
			    var index;
			    if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
			        var proxy = this, tempindex = 0;
			        results.forEach(function (data) {
			            if (!ej.isNullOrUndefined(data[proxy.model.fields["text"]]) ? (data[proxy.model.fields["text"]] == proxy._selectedItems[i][proxy.model.fields["text"]]) : true &&
                            !ej.isNullOrUndefined(data[proxy.model.fields["key"]]) ? (data[proxy.model.fields["key"]] == proxy._selectedItems[i][proxy.model.fields["key"]]) : true &&
                            !ej.isNullOrUndefined(data[proxy.model.fields["htmlAttributes"]]) ? (data[proxy.model.fields["htmlAttributes"]] == proxy._selectedItems[i][proxy.model.fields["htmlAttributes"]]) : true &&
                            !ej.isNullOrUndefined(data[proxy.model.fields["groupBy"]]) ? (data[proxy.model.fields["groupBy"]] == proxy._selectedItems[i][proxy.model.fields["groupBy"]]) : true)
			                index = tempindex;
			            tempindex++;
			        });
			    }
			    else{
                 index = results.indexOf(this._selectedItems[i]);
				 if (!isNaN(parseFloat(this._selectedItems[i]))) index = results.indexOf(parseFloat(this._selectedItems[i]));
				}
			    if (index != -1 && !ej.isNullOrUndefined(index)) this.suggestionListItems.splice(index, 1);
				if( this.element.val() == this._selectedItems[i] )this._repeatRemove = true;
            }
        },

        _checkDelimiter: function () {
            this._queryString = this.element.val();
            var _deliIndex = (this.model.multiSelectMode != "delimiter") ? -1 : this._queryString.lastIndexOf(this.model.delimiterChar);


            if (_deliIndex == -1) {
                return true;
            }
            else {
                this._queryString = this._queryString.substr(_deliIndex + ((this.model.delimiterChar).length), this._queryString.length);
                return true;
            }
        },

        _autofilSelection: function () {
            var element = this.element[0], totLen = this.element.val().length;

            if (element.setSelectionRange)
                element.setSelectionRange(this.suggLen, totLen);
            else if (element.createTextRange) {

                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', totLen);
                element.moveStart('character', this.suggLen);
                element.select();
            }
        },

        _OnDropdownClick: function (e) {
            if (this.model.enabled && !this.model.readOnly) {
                e.preventDefault();
                this.dropdownbutton.addClass("e-active");
                this._iconEventBind(this.dropdownbutton, "span");
				if ((e.which && e.which == 1) ||(e.button && e.button == 0)) {
                this._addLoadingClass();
                if (this.showSuggestionBox) {
                    this._hideResult(e);
                    this._isOpened = false;
                    this._removeLoadingClass();
                }
                else this._showFullList(e);
            }
		  }
        },

        _iconEventBind: function (element, target) {
            element.on({
                mouseleave: $.proxy(this._OnMouseIconClick, this)
            }, target);
        },

        _OnMouseIconClick: function (e) {
            this.dropdownbutton.removeClass("e-active");
        },

        _showFullList: function (e) {
            if (!this._isFocused)
                this.element.focus();
            this._queryString = null;
            this._autoFill = false;
            this._performSearch(e);
        },

        _OnMouseEnter: function (e) {
            this._getActiveItemIndex(e);
            if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
        },
        _getActiveItemIndex: function (e) {
            var targetEle = e.target;
            if (this.model.multiColumnSettings.enable && e.target.tagName.toLowerCase() != "tr") targetEle = $(e.target).parents("tr");
            else if (e.target.tagName.toLowerCase() != "li") targetEle = $(e.target).parents("li");
            this._getLiTags().removeClass("e-hover");
            $(targetEle).addClass("e-hover");
            this._queryString = this.element.val();
            this._activeItem = this._getLiTags().index($(targetEle)) + 1;
        },

        _OnMouseLeave: function (e) {
            this._getLiTags().removeClass("e-hover");
            if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
            if (this.model.highlightSearch)
                this._getLiTags().find(".e-hilight-txt").removeClass("e-hover");
        },

         _OnMouseClick: function (e) {
             this._getActiveItemIndex(e);
            if (!this.noresult) {
                this._enterTextBoxValue(e);
                this._isOpened = false;
                this._hideResult(e);
            }
        },
        
        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.suggestionList) && !$(e.target).parents(".e-atc-popup").is(this.suggestionList) &&
                !$(e.target).is(this.element) && !$(e.target).parents(".e-atc").is(this.wrapper)) {
                this._isOpened = true;
                this._hideResult(e);
            }
            else if ($(e.target).is(this.suggestionList) || $(e.target).parents(".e-atc-popup").is(this.suggestionList))
                e.preventDefault();
        },

        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

		_keyProcess: function (values) {
		    var map = this._declareVariable(), proxy = this;
		    var delimiterIndex;
		    delimiterIndex = this._delimiterChar();
		    if (!ej.isNullOrUndefined(values)){
                for (var data = 0, length = values.length; data < length; data++) {
                    var _val =values[data];
                    if (ej.DataManager && this.model.dataSource instanceof ej.DataManager)
                        proxy._selectValueByKey(null);
                 else {
                        this._dataQuery =this.model.multiColumnSettings.enable ? ej.Query(): ej.Query().where(map[0], this.model.filterType, _val, false);
                        this._promise = ej.DataManager(this.model.dataSource).executeLocal(this._dataQuery);
                        if (!this.model.multiColumnSettings.enable) {
                            if (this._promise instanceof Array && (this._promise.length == 0))
                                this._selectValueByKey() != null ? this._selectValueByKey() : null;
                            else
                                this._getFieldKey(this._promise[0], map[1], delimiterIndex);
                        }
                        else this._formatStringKey(values, map, delimiterIndex)
                    }
                }
			}
		},

		_formatStringKey: function (values, map, delimiterIndex) {
		    this._selectValueByKey(null);
            for (var data = 0, valueLength = values.length; data < valueLength; data++) {
		        if (values[data] != "") {
		            var _val = values[data];
		            var _isExistIndex
                    for (var i = 0, length = this._promise.length; i < length; i++) {
		                if (_val == this._textFormateString(this._promise[i]))
		                    _isExistIndex = i;
		            }
		            if (_isExistIndex) this._getFieldKey(this._promise[_isExistIndex], map[1], delimiterIndex);
		            else
		                this._selectValueByKey() != null ? this._selectValueByKey() : null;
		        }
		    }
		},
		_getFieldKey: function (data, _key, deliIndex) {
		    if (!ej.isNullOrUndefined(this.model.template) && ej.isNullOrUndefined(this._getField(data, _key))) return;
		    if (ej.isNullOrUndefined(this._getField(data, _key))) return;
		    key = this._getField(data, _key).toString();
		    if (this.model.multiSelectMode != "none") {
		        var keyval, splitval, eleVal, key = this._selectValueByKey();
		        var delimiterChar = this.model.delimiterChar;
		        keyval = this._getField(data, _key).toString();
		        if (key != null) {
		            splitval = key.toString().split(deliIndex).filter(function (v) { return v !== "" });
		            if ($.inArray(keyval, splitval) == -1) {
		                splitval.push(keyval);
		                key = splitval.join(delimiterChar) + delimiterChar;
		            }
		            else
		                key = keyval + delimiterChar;
		        }
		        else
		            key = keyval + delimiterChar;
		    }
		    this._selectValueByKey(key);
		},

		_removeDuplicateVal: function (values) {
		    var result = [];
		    $.each(values, function (i, e) {
		        if ($.inArray(e, result) == -1)
		            result.push(e);
		    });
		    if (values.length == 1 && !ej.isNullOrUndefined(this._originalval)) {
		        if ($.inArray(values[0], this._originalval) == -1)
		            this._selectValueByKey(null);
		    }
		    return result;
		},

        _valueChange: function (e) {
            var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();
            if (this.value() != currValue || (currValue == "" && this.element.val() != "")) {
                this.value(currValue);
                if (ej.isNullOrUndefined(this.model.fields["key"]) || currValue == "" ) this._hiddenInput.val(currValue);
                this._changeEvtTrigger(currValue, e);
            }
			if(this.model.showResetIcon && !currValue){
			this.wrapper.find("span.e-iclose").remove();
			this.resetSpan = null;}
        },
        _changeEvtTrigger: function (currValue, e) {
            var args = (e != undefined) ? { event: e, isInteraction: true, value: currValue } : { isInteraction: false, value: currValue, lastremovedItem : this.deletedItem };			
            if (!this.initialRender) {
				this._trigger("_change", { value: currValue });
                this._trigger("change", args);
            }
        },

        _updateSelectedItemArray: function (value) {
            var  values = [];
            this._selectedItems = [];
            this.suggestionListItems = this.model.dataSource;
            if (this.model.multiSelectMode == "delimiter" && value) {
                values = value.split(this.model.delimiterChar);
                if ((ej.DataManager && this.model.dataSource instanceof ej.DataManager) || ((!ej.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object"))) {
                    for (var i = 0, length = values.length; i < length; i++) {
                        if (values[i]) {
                            var _proxy = this;
							var _objLen = this._selectedObj.length;
							var result = {};
							for (var j = 0; j< _objLen; j++ ){
								if(this._selectedObj[j][_proxy.model.fields.text] == values[i]) {
									result = this._selectedObj[j];
									j = _objLen;
								}
							}
							this._selectedItems.push(!$.isEmptyObject(result) ? result : values[i]);
						}
                    }
                }
                else
                    this._createBoxForObjectType(values);
            }
            else if (this.model.multiSelectMode == "none" && value) {
                values.push(value);
                if ((ej.DataManager && this.model.dataSource instanceof ej.DataManager) || ((!ej.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object"))) {
                    var _proxy = this;
					var result = $.grep(this._selectedObj, function(e){ if(e[_proxy.model.fields.text] == value) return e; });
					this._selectedItems.push(result.length > 0 ? result : value);
				}
                else
                    this._createBoxForObjectType(values);
            }
        },

        _keyDownComplete: function (e) {
            var currValue = this.element.val();
            var prevValue = this.value();
            if (!ej.isNullOrUndefined(this.model.fields["key"])) {
                if ((e.keyCode == 46 || e.keyCode == 8 || e.keyCode == 65) && (this.model.multiSelectMode == "delimiter")) {
                    var data = this.value();
                    var array = data.split(",");
                    var deli = this.model.delimiterChar;
                    var index = array.indexOf(prevValue.replace(/,/g, ''));
                    var values = this._hiddenInput.val().split(deli);
                    this._hiddenInput.val(values.join(deli));
					values.splice(index, 1);
                }
            }
            if (this._preVal != currValue) {
                this._preVal = currValue;
                if (this.model.multiSelectMode == "visualmode") this._adjustWidth();
                this._valueChange(e);
            }
        },

        _moveCaretToEnd: function (el) {
            //Chrome Scroll content
            el.scrollLeft = el.scrollWidth;
            //IE Scroll the content
            if (el.createTextRange) {
                var rng = el.createTextRange();
                rng.moveEnd('textedit');
                rng.moveStart('textedit');
                rng.select();
            }
            if (typeof el.selectionStart == "number") {
                el.selectionStart = el.selectionEnd = el.value.length;
            } else if (typeof el.createTextRange != "undefined") {
                var range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;

            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }

            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },
        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
        }
    });
    ej.Autocomplete.Locale = ej.Autocomplete.Locale || {};
    ej.Autocomplete.Locale["default"] = ej.Autocomplete.Locale["en-US"] = {
        addNewText: "Add New",
        emptyResultText: "No suggestions",
        actionFailure: "The specified field doesn't exist in given data source",
        watermarkText: ""
    };

    ej.filterType = {
        /**  Supports to search text with startswith  */
        StartsWith: "startswith",
        /**  Supports to search text with contains */
        Contains: "contains",
        /**  Supports to search text with endswith */
        EndsWith: "endswith",
        /**  Supports only for number lessthan only */
        LessThan: "lessthan",
        /**  Supports only for number greaterthan only */
        GreaterThan: "greaterthan",
        /**  Supports only for number lessthanorequal only */
        LessThanOrEqual: "lessthanorequal",
        /**  Supports only for number greaterthanorequal only */
        GreaterThanOrEqual: "greaterthanorequal",
        /**  Supports only for number equal only */
        Equal: "equal",
        /** Supports only for number notequal only */
        NotEqual: "notequal"
    };

    ej.SortOrder = {
        /** Supports to sorts with ascending only */
        Ascending: "ascending",
        /** Supports to sorts with descending only */
        Descending: "descending"
    };

    ej.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    };
    ej.Animation = {
        /** Supports to animation type with none only */
        None: "none",
        /** Supports to animation type with slide only */
        Slide: "slide",
        /** Supports to animation type with fade only */
        Fade: "fade"
    };
	ej.Type = {
		Number: "number",
		String: "string",
		Boolean: "boolean",
		Date: "date"
	}
})(jQuery, Syncfusion);;
/*!
*  filename: ej.combobox.js
*  version : 12.3
*  Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function ($) {
    var ejComboBox = (function (_super) {
        __extends(ejComboBox, _super);
        function ejComboBox(element, options) {
            _super.call(this);
            this._rootCSS = "e-combobox";
            this._setFirst = false;
            this.selectFocus = false;
            this.PluginName = "ejComboBox";
            this.validTags = ["input"];
            this.type = "editor";
            this._requiresID = true;
            this.angular = {
                require: ['?ngModel', '^?form', '^?ngModelOptions']
            };
            this.boolean = true;
            this.isPreventBlur = false;
            this.isDocumentClick = false;
            this.isPopupOpen = false;
            this.popupObj = null;
            this.beforePopupOpen = false;
            this.preventFocus = false;
            this.isDropDownClick = false;
            this.isInteracted = false;
            this.isValidKey = false;
            this.isSelectCustom = false;
            this.preventAutoFill = false;
            this.isTyped = false;
            this.isSelected = false;
            this.prevSelectPoints = {};
            this.initial = true;
            this.typedString = '';
            this.actionCompleteData = { isUpdated: false };
            this.isEscapeKey = false;
            this.isFilterFocus = false;
            this.isRequested = false;
            this.isNotSearchList = false;
            this.initRemoteRender = false;
            this.searchKeyEvent = null;
            this.preventAltUp = false;
            this.isTabKey = false;
            this.model = null;
            this.defaults = {
                autofill: false,
                allowCustom: true,
                htmlAttributes: {},
                allowFiltering: false,
                query: null,
                showClearButton: true,
                valueTemplate: null,
                readonly: false,
                text: null,
                value: null,
                index: null,
                headerTemplate: null,
                footerTemplate: null,
                fields: { text: null, value: null, iconCss: null, groupBy: null, tooltip: null },
                groupTemplate: null,
                itemTemplate: null,
                noRecordsTemplate: 'No Records Found',
                actionFailureTemplate: 'The Request Failed',
                sortOrder: ('None'),
                dataSource: [],
                popupHeight: '300px',
                placeholder: null,
                cssClass: null,
                enabled: true,
                enableRtl: false,
                width: '100%',
                popupWidth: '100%',
                locale: 'en-US',
                customValueSpecifier: null,
                filtering: null,
                actionBegin: null,
                actionComplete: null,
                actionFailure: null,
                select: null,
                focus: null,
                change: null,
                blur: null,
                close: null,
                dataBound: null
            };
            this.dataTypes = {
                autofill: 'boolean',
                allowCustom: 'boolean',
                htmlAttributes: 'object',
                allowFiltering: 'boolean',
                showClearButton: 'boolean',
                valueTemplate: 'string',
                readonly: 'boolean',
                text: 'string',
                index: 'number',
                headerTemplate: 'string',
                footerTemplate: 'string',
                dataSource: "data",
                query: "data",
                fields: "data",
                groupTemplate: "string",
                itemTemplate: "string",
                noRecordsTemplate: "string",
                actionFailureTemplate: "string",
                sortOrder: "enum",
                placeholder: "string",
                cssClass: "string",
                enabled: "boolean",
                enableRtl: "boolean",
                locale: "string"
            };
            this.observables = ["value"];
            this.value = ej.util.valueFunction("value");
            if (element) {
                if (!element["jquery"]) {
                    element = $("#" + element);
                }
                if (element.length)
                    return $(element).ejComboBox(options).data(this.PluginName);
            }
        }
        ;
        ejComboBox.prototype._setModel = function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case 'allowFiltering':
                        this.model.allowFiltering = options[option];
                        this.setSearchBox();
                        break;
                    case 'allowCustom':
                        this.model.allowCustom = options[option];
                        break;
                    case 'htmlAttributes':
                        this.model.htmlAttributes = options[option];
                        this.setHTMLAttributes();
                        break;
                    case 'width':
                        this.model.width = options[option];
                        $(this.inputWrapper.container).css({ 'width': this.formatUnit(options[option]) });
                        break;
                    case 'placeholder':
                        this.model.placeholder = options[option];
                        this.setPlaceholder(options[option], this.inputElement);
                        break;
                    case 'readonly':
                        this.model.readonly = options[option];
                        this.setReadonly(options[option], this.inputElement);
                        break;
                    case 'cssClass':
                        this.model.cssClass = options[option];
                        this.setCssClass(options[option]);
                        if (this.popupObj) {
                            $(this.popupObj).addClass(options[option]);
                        }
                        break;
                    case 'enableRtl':
                        this.model.enableRtl = options[option];
                        this.setEnableRtl();
                        break;
                    case 'enabled':
                        this.model.enabled = options[option];
                        this.setEnable();
                        break;
                    case 'text':
                    case 'value':
                    case 'index':
                        if (options[option] === null) {
                            this.clear();
                            return;
                        }
                        if (!this.list) {
                            if (this.model.dataSource instanceof ej.DataManager) {
                                this.initRemoteRender = true;
                            }
                            this.renderList();
                        }
                        if (!this.initRemoteRender) {
                            var li = (option == 'text') ? this.getElementByText(options[option]) : (option == 'value') ? this.getElementByValue(options[option]) : this.liCollections[options[option]];
                            if (this.isValidLI(li)) {
                                this.setSelection(li, null);
                            }
                            else {
                                (option == 'text') ? this.setOldText(options[option]) : (option == 'value') ? this.setOldValue(this.value(options[option])) : null;
                            }
                        }
                        break;
                    case 'query':
                    case 'dataSource':
                    case 'fields':
                    case 'sortOrder':
                        if (option == 'sortOrder')
                            this.model.sortOrder = options[option];
                        if (option == 'fields')
                            this.model.fields = options[option];
                        if (option == 'query')
                            this.model.query = options[option];
                        if (option == 'dataSource')
                            this.model.dataSource = options[option];
                        this.clear();
                        this.resetList(this.model.dataSource);
                        break;
                    case 'footerTemplate':
                        this.model.footerTemplate = options[option];
                        if (this.popupObj) {
                            this.setFooterTemplate(this.popupObj);
                        }
                        break;
                }
            }
        };
        ejComboBox.prototype.wireEvent = function () {
            this._on($(this.inputWrapper.buttons[0]), 'mousedown', this.preventBlur);
            this._on($(this.inputWrapper.container), 'blur', this.onBlur);
            this._on($(this.inputElement), 'focus', this.targetFocus);
            this._on($(this.inputElement), 'blur', this.onBlur);
            if (!this.model.readonly) {
                this._on($(this.inputElement), 'input', this.onInput);
                this._on($(this.inputElement), 'keyup', this.onFilterUp);
                this._on($(this.inputElement), 'keydown', this.onFilterDown);
            }
            if (!ej.isNullOrUndefined(this.inputWrapper.buttons[0])) {
                this._on($(this.inputWrapper.buttons[0]), 'mousedown', this.dropDownClick);
            }
            if (!ej.isDevice()) {
                this._on($(this.inputElement), 'keydown', this.keyActionHandler);
            }
            if (this.model.showClearButton) {
                this._on($(this.inputWrapper.clearButton), 'mousedown', this.resetHandler);
            }
        };
        ejComboBox.prototype.unWireEvent = function () {
            this._off($(this.inputWrapper.buttons[0]), 'mousedown', this.preventBlur);
            this._off($(this.inputWrapper.container), 'blur', this.onBlur);
            this._off($(this.inputElement), 'focus', this.targetFocus);
            this._off($(this.inputElement), 'blur', this.onBlur);
            if (!ej.isNullOrUndefined(this.inputWrapper.buttons[0])) {
                this._off($(this.inputWrapper.buttons[0]), 'mousedown', this.dropDownClick);
            }
            if (!this.model.readonly) {
                this._off($(this.inputElement), 'input', this.onInput);
                this._off($(this.inputElement), 'keyup', this.onFilterUp);
                this._off($(this.inputElement), 'keydown', this.onFilterDown);
            }
            if (!ej.isDevice()) {
                this._off($(this.inputElement), 'keydown', this.keyActionHandler);
            }
            if (this.model.showClearButton) {
                this._off($(this.inputWrapper.clearButton), 'mousedown', this.resetHandler);
            }
        };
        ejComboBox.prototype.preventBlur = function (e) {
            if ((!this.model.allowFiltering && document.activeElement !== this.inputElement &&
                (ej.isNullOrUndefined(document.activeElement) || (document.activeElement.className && document.activeElement.className.indexOf(comboBoxClasses.input) == -1)) && ej.isDevice() || !ej.isDevice())) {
                e.preventDefault();
            }
        };
        ejComboBox.prototype.setOldText = function (text) {
            this.setInputValue(this.model.text, this.inputElement, this.model.showClearButton);
            this.customValue();
            this.removeSelection();
        };
        ejComboBox.prototype.setOldValue = function (value) {
            this.valueMuteChange((this.model.allowCustom) ? this.value() : null);
            this.removeSelection();
            this.setHiddenValue();
        };
        ejComboBox.prototype.valueMuteChange = function (value) {
            var inputValue = ej.isNullOrUndefined(value) ? null : value.toString();
            this.setInputValue(inputValue, this.inputElement, this.model.showClearButton);
            this.value(value);
            this.model.text = value ? value.toString() : null;
            this.model.index = null;
            this.activeIndex = this.model.index;
            var fields = this.getFields();
            var dataItem = {};
            dataItem[fields.text] = ej.isNullOrUndefined(value) ? null : value.toString();
            dataItem[fields.value] = ej.isNullOrUndefined(value) ? null : value.toString();
            this.itemData = dataItem;
            this.item = null;
            if (this.previousValue !== this.value()) {
                this.detachChangeEvent(null);
            }
        };
        ejComboBox.prototype.updateValues = function () {
            if (!ej.isNullOrUndefined(this.value())) {
                var li = this.getElementByValue(this.value());
                if (li) {
                    this.setSelection(li, null);
                }
                else if (this.model.allowCustom) {
                    this.valueMuteChange(this.value());
                }
                else {
                    this.valueMuteChange(null);
                }
            }
            else if (this.model.text && ej.isNullOrUndefined(this.value())) {
                var li = this.getElementByText(this.model.text);
                if (li) {
                    this.setSelection(li, null);
                }
                else {
                    this.setInputValue(this.model.text, this.inputElement, this.model.showClearButton);
                    this.customValue();
                }
            }
            else {
                this.setSelection(this.liCollections[this.activeIndex], null);
            }
            this.setHiddenValue();
            this.setInputValue(this.model.text, this.inputElement, this.model.showClearButton);
        };
        ejComboBox.prototype.getAriaAttributes = function () {
            var ariaAttributes = {
                'aria-owns': this.element[0].id + '_options',
                'role': 'combobox',
                'aria-autocomplete': 'both',
                'aria-hasPopup': 'true',
                'aria-expanded': 'false',
                'aria-readonly': this.model.readonly.toString(),
                'autocomplete': 'off',
                'autocorrect': 'off',
                'autocapitalize': 'off',
                'spellcheck': 'false'
            };
            return ariaAttributes;
        };
        ejComboBox.prototype.searchLists = function (e) {
            this.isTyped = true;
            if (this.model.allowFiltering) {
                this.listsearchLists(e);
                if ($.trim(this.filterInput.value) === '') {
                    this.setHoverList(this.ulElement.querySelector('.' + comboBoxClasses.li));
                }
            }
            else {
                if (this.ulElement && this.inputElement.value === '' && this.preventAutoFill) {
                    this.setHoverList(this.ulElement.querySelector('.' + comboBoxClasses.li));
                }
                this.incrementalSearch(e);
            }
        };
        ejComboBox.prototype.setSearchBox = function () {
            this.filterInput = this.inputElement;
            return (this.model.allowFiltering ? this.inputWrapper : inputObject);
        };
        ejComboBox.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {
            this.listonActionComplete(ulElement, list, e);
            if (this.isSelectCustom) {
                this.removeSelection();
            }
            if (!this.preventAutoFill && this.isTyped) {
                this.inlineSearch();
            }
        };
        ejComboBox.prototype.getFocusElement = function () {
            var dataItem = this.isSelectCustom ? { text: '' } : this.getItemData();
            var selected = this.list.querySelector('.' + comboBoxClasses.selected);
            var isSelected = dataItem["text"] === this.inputElement.value && !ej.isNullOrUndefined(selected);
            if (isSelected) {
                return selected;
            }
            if ((ej.isDevice() && !this.isDropDownClick || !ej.isDevice()) &&
                !ej.isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {
                var inputValue = this.inputElement.value;
                var activeItem = this.search(inputValue, this.liCollections, 'StartsWith', true);
                var activeElement = activeItem["item"];
                if (!ej.isNullOrUndefined(activeElement)) {
                    var count = this.getIndexByValue(activeElement.getAttribute('data-value')) - 1;
                    var height = parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.liCollections[0], null).getPropertyValue('height') : this.liCollections[0]["currentStyle"]['height'], 10);
                    if (!isNaN(height)) {
                        var fixedHead = this.model.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
                        this.list.scrollTop = count * height + fixedHead;
                        $(activeElement).addClass(comboBoxClasses.focus);
                    }
                }
                else {
                    if (this.isSelectCustom && $.trim(this.inputElement.value) !== '') {
                        this.removeFocus();
                        this.list.scrollTop = 0;
                    }
                }
                return activeElement;
            }
            else {
                return null;
            }
        };
        ejComboBox.prototype.setValue = function (e) {
            if (e && e.type === 'keydown' && e.KeyCode === 13) {
                this.removeFillSelection();
            }
            if (this.model.autofill && e && e.type === 'keydown' && e.keyCode !== 13) {
                this.preventAutoFill = false;
                this.inlineSearch(e);
                return false;
            }
            else {
                return this.listsetValue(e);
            }
        };
        ejComboBox.prototype.setAutoFill = function (activeElement, isHover) {
            if (!isHover) {
                this.setHoverList(activeElement);
            }
            if (this.model.autofill && !this.preventAutoFill) {
                var currentValue = this.getTextByValue(activeElement.getAttribute('data-value')).toString();
                var currentFillValue = this.getFormattedValue(activeElement.getAttribute('data-value'));
                if (!this.isSelected && this.previousValue !== currentFillValue) {
                    this.updateSelectedItem(activeElement, null);
                    this.isSelected = true;
                    this.previousValue = this.getFormattedValue(activeElement.getAttribute('data-value'));
                }
                else {
                    this.updateSelectedItem(activeElement, null, true);
                }
                if (!this.isAndroidAutoFill(currentValue)) {
                    this.setAutoFillSelection(currentValue);
                }
            }
        };
        ejComboBox.prototype.isAndroidAutoFill = function (value) {
            if (ej.isMobile()) {
                var currentPoints = this.getSelectionPoints();
                var prevEnd = this.prevSelectPoints["end"];
                var curEnd = currentPoints["end"];
                var prevStart = this.prevSelectPoints["start"];
                var curStart = currentPoints["start"];
                if (prevEnd !== 0 && ((prevEnd === value.length && prevStart === value.length) ||
                    (prevStart > curStart && prevEnd > curEnd) || (prevEnd === curEnd && prevStart === curStart))) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        ejComboBox.prototype.inlineSearch = function (e) {
            var isKeyNavigate = (e && (e.keyCode === 40 || e.keyCode === 38 ||
                e.keyCode === 36 || e.keyCode === 35 || e.keyCode === 33 || e.keyCode === 34));
            var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();
            if (!ej.isNullOrUndefined(activeElement)) {
                if (!isKeyNavigate) {
                    this.selectFocus = true;
                    var value = this.getFormattedValue(activeElement.getAttribute('data-value'));
                    this.activeIndex = this.getIndexByValue(value);
                    this.activeIndex = !ej.isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;
                }
                this.preventAutoFill = this.inputElement.value === '' ? false : this.preventAutoFill;
                this.setAutoFill(activeElement, isKeyNavigate);
            }
            else if (this.inputElement.value === '') {
                this.activeIndex = null;
                this.list.scrollTop = 0;
                var focusItem = this.list.querySelector('.' + comboBoxClasses.li);
                this.setHoverList(focusItem);
            }
            else {
                this.activeIndex = null;
                this.removeSelection();
                this.removeFocus();
            }
        };
        ejComboBox.prototype.incrementalSearch = function (e) {
            if (!(this.isWatermark)) {
                this.hiddenSpan.css("display", "none");
            }
            this.showPopup();
            if (!ej.isNullOrUndefined(this.listData)) {
                this.inlineSearch(e);
                e.preventDefault();
            }
        };
        ;
        ejComboBox.prototype.setAutoFillSelection = function (currentValue) {
            var selection = this.getSelectionPoints();
            var value = this.inputElement.value.substr(0, selection["start"]);
            if (value && (value.toLowerCase() === currentValue.substr(0, selection["start"]).toLowerCase())) {
                var inputValue = value + currentValue.substr(value.length, currentValue.length);
                this.setInputValue(inputValue, this.inputElement, this.model.showClearButton);
                this.inputElement.setSelectionRange(selection["start"], this.inputElement.value.length);
            }
            else {
                this.setInputValue(currentValue, this.inputElement, this.model.showClearButton);
                this.inputElement.setSelectionRange(0, this.inputElement.value.length);
            }
        };
        ;
        ejComboBox.prototype.setSelection = function (li, e) {
            this.listsetSelection(li, e);
            if (!ej.isNullOrUndefined(li) && !this.model.autofill && !this.isDropDownClick) {
                this.removeFocus();
            }
        };
        ejComboBox.prototype.selectCurrentItem = function (e) {
            var li;
            if (this.isPopupOpen) {
                li = this.list.querySelector('.' + comboBoxClasses.focus);
                if (li) {
                    this.setSelection(li, e);
                    this.isTyped = false;
                }
                if (this.isSelected) {
                    this.isSelectCustom = false;
                    if (!this.selectFocus)
                        this.onChangeEvent(e);
                }
            }
            if (this.isTyped && !this.isSelected && ej.isNullOrUndefined(li)) {
                this.customValue();
            }
            if (this.selectFocus)
                this.focusOutAction();
            else
                this.hidePopup();
        };
        ejComboBox.prototype.setHoverList = function (li) {
            this.removeSelection();
            if (this.isValidLI(li) && li.className.indexOf(comboBoxClasses.selected) == -1) {
                this.removeFocus();
                $(li).addClass(comboBoxClasses.focus);
            }
        };
        ;
        ejComboBox.prototype.targetFocus = function (e) {
            $(this.inputWrapper.container).addClass(comboBoxClasses.inputFocus);
            if (ej.isDevice() && !this.model.allowFiltering) {
                this.preventFocus = false;
            }
            if (!(this.isWatermark)) {
                this.hiddenSpan.css("display", "none");
            }
            this.onFocus();
        };
        ejComboBox.prototype.dropDownClick = function (e) {
            if (ej.isDevice() && !this.model.allowFiltering) {
                this.preventFocus = true;
            }
            this.listdropDownClick(e);
        };
        ejComboBox.prototype.customValue = function () {
            var value = this.getValueByText(this.inputElement.value, true);
            if (!this.model.allowCustom && this.inputElement.value !== '') {
                this._setModel({ "value": value });
                this.value(value);
                if (ej.isNullOrUndefined(this.value())) {
                    this.setInputValue('', this.inputElement, this.model.showClearButton);
                }
            }
            else if ($.trim(this.inputElement.value) !== '') {
                var previousValue = this.value();
                if (ej.isNullOrUndefined(value)) {
                    var value_1 = this.inputElement.value === '' ? null : this.inputElement.value;
                    var fields = this.getFields();
                    var eventArgs = void 0;
                    eventArgs = { text: value_1, item: {} };
                    if (!this.initial) {
                        this._trigger('customValueSpecifier', eventArgs);
                    }
                    var item = eventArgs["item"];
                    var dataItem = {};
                    if (item && item[fields.text] && item[fields.value]) {
                        dataItem = item;
                    }
                    else {
                        dataItem[fields.text] = value_1;
                        dataItem[fields.value] = value_1;
                    }
                    this.itemData = dataItem;
                    this.model.text = this.itemData[fields.text];
                    this.value(this.itemData[fields.value]);
                    this.model.index = null;
                    this.setSelection(null, null);
                    this.isSelectCustom = true;
                }
                else {
                    this.isSelectCustom = false;
                    this.value(value);
                }
                if (previousValue !== this.value()) {
                    this.onChangeEvent(null);
                }
            }
        };
        ejComboBox.prototype._init = function () {
            this.listrender();
            this.setSearchBox();
            if (this.model.allowFiltering && ej.isNullOrUndefined(this.list)) {
                this.renderList();
            }
        };
        ;
        ejComboBox.prototype.hidePopup = function () {
            if (!ej.isNullOrUndefined(this.listData)) {
                var isEscape = this.isEscapeKey;
                if (this.isEscapeKey) {
                    this.setInputValue(this.typedString, this.inputElement, this.model.showClearButton);
                    this.isEscapeKey = false;
                }
                if (this.model.autofill) {
                    this.removeFillSelection();
                }
                var dataItem = this.isSelectCustom ? { text: '' } : this.getItemData();
                var selected = this.list.querySelector('.' + comboBoxClasses.selected);
                if (dataItem["text"] === this.inputElement.value && !ej.isNullOrUndefined(selected)) {
                    if (this.isSelected) {
                        if (!this.selectFocus)
                            this.onChangeEvent(null);
                        this.isSelectCustom = false;
                    }
                    this.listhidePopup();
                    return;
                }
                if ($.trim(this.inputElement.value) !== '') {
                    var searchItem = this.search(this.inputElement.value, this.liCollections, 'Equal', true);
                    this.selectedLI = searchItem["item"];
                    if (ej.isNullOrUndefined(searchItem["index"])) {
                        searchItem["index"] = this.search(this.inputElement.value, this.liCollections, 'StartsWith', true)["index"];
                    }
                    this.activeIndex = searchItem["index"];
                    if (!ej.isNullOrUndefined(this.selectedLI)) {
                        this.updateSelectedItem(this.selectedLI, null, true);
                    }
                    else if (isEscape) {
                        this.isSelectCustom = true;
                        this.removeSelection();
                    }
                }
                if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {
                    this.customValue();
                }
            }
            this.listhidePopup();
        };
        ejComboBox.prototype.focusIn = function () {
            if (ej.isDevice() && !this.model.allowFiltering) {
                this.preventFocus = true;
            }
            this.listfocusIn();
        };
        ejComboBox.prototype.listhidePopup = function () {
            this.closePopup();
            var dataItem = this.getItemData();
            if ($.trim(this.inputElement.value) === '' && !this.isInteracted && (this.isSelectCustom ||
                !ej.isNullOrUndefined(this.selectedLI) && this.inputElement.value !== dataItem["text"])) {
                this.isSelectCustom = false;
                this.clear();
            }
        };
        ejComboBox.prototype.closePopup = function (delay) {
            this.isTyped = false;
            if (!(this.popupObj && document.body.contains(this.popupObj))) {
                return;
            }
            this._off($(document), 'mousedown', this.onDocumentClick);
            this.isActive = false;
            this.isDropDownClick = false;
            this.isDocumentClick = false;
            this.preventAutoFill = false;
            this._off(ej.getScrollableParents($(this.inputWrapper.container)), 'scroll', this.scrollHandler);
            $(this.inputElement).attr({ 'aria-expanded': 'false', 'aria-activedescendant': null });
            $(this.inputWrapper.container).removeClass(comboBoxClasses.iconAnimation);
            if (this.model.allowFiltering) {
                this.actionCompleteData.isUpdated = false;
            }
            this.beforePopupOpen = false;
            if (this.isPopupOpen) {
                var proxy_1 = this;
                this.isPopupOpen = false;
                $(this.popupObj).fadeOut(100, function () {
                    $(proxy_1.popupObj).removeClass("e-popup-open").addClass("e-popup-close");
                    proxy_1._trigger('close', { popup: proxy_1.popupObj });
                    proxy_1.destroyPopup();
                });
            }
            else {
                this.destroyPopup();
            }
        };
        ejComboBox.prototype.scrollHandler = function () {
            if (ej.isDevice() && (!this.model.allowFiltering && this.isDropDownClick)) {
                this.hidePopup();
            }
        };
        ejComboBox.prototype.destroyPopup = function () {
            this.isFilterFocus = false;
            this.popupObj && $("#" + this.popupObj.id + ".e-ddl.e-popup.e-control").remove();
            this.popupObj = null;
        };
        ejComboBox.prototype.onDocumentClick = function (e) {
            var target = e.target;
            if (!(!ej.isNullOrUndefined(this.popupObj) && $(target).closest('#' + this.popupObj.id).length > 0) &&
                !this.inputWrapper.container.contains(e.target)) {
                if (this.inputWrapper.container.className.indexOf(comboBoxClasses.inputFocus) > -1 || this.isPopupOpen) {
                    this.isDocumentClick = true;
                    var isActive = this.isRequested;
                    this.isInteracted = false;
                    this.hidePopup();
                    if (!isActive) {
                        this.onFocusOut();
                        $(this.inputWrapper.container).removeClass(comboBoxClasses.inputFocus);
                    }
                }
            }
            else if (target !== this.inputElement && !(this.model.allowFiltering && target === this.filterInput)
                && !(!this.model.allowFiltering && ej.isDevice() && target === this.inputWrapper.buttons[0])) {
                this.isPreventBlur = (ej.browserInfo().name == 'msie' || ej.browserInfo().name === 'edge') && (document.activeElement === this.inputElement ||
                    document.activeElement === this.filterInput);
                e.preventDefault();
            }
        };
        ejComboBox.prototype.onFocusOut = function () {
            if (this.isSelected) {
                this.isSelectCustom = false;
                if (!this.selectFocus)
                    this.onChangeEvent(e);
            }
            this.dispatchEvent(this.hiddenElement, 'change');
            if (this.inputWrapper.clearButton) {
                $(this.inputWrapper.clearButton).addClass(comboBoxClasses.clearIconHide);
            }
            this._trigger('blur');
        };
        ejComboBox.prototype.dispatchEvent = function (element, type) {
            if (document.createEvent) {
                var evt = document.createEvent('HTMLEvents');
                evt.initEvent(type, false, true);
                element.dispatchEvent(evt);
                this.onChangeEvent(null);
            }
        };
        ejComboBox.prototype.onBlur = function (e) {
            var target = e.relatedTarget;
            var currentTarget = e.target;
            var isPreventBlur = this.isPreventBlur;
            this.isPreventBlur = false;
            if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!ej.isNullOrUndefined(currentTarget) ||
                ej.isNullOrUndefined(target))) {
                this.inputElement.focus();
                return;
            }
            if (this.isDocumentClick || (!ej.isNullOrUndefined(this.popupObj)
                && document.body.contains(this.popupObj) &&
                this.popupObj.className.indexOf(comboBoxClasses.mobileFilter) > -1)) {
                if (!this.beforePopupOpen) {
                    this.isDocumentClick = false;
                }
                return;
            }
            if (((document.activeElement !== target || (document.activeElement === target &&
                currentTarget.className.indexOf(comboBoxClasses.inputFocus) > -1))) ||
                !this.inputWrapper.container.contains(target) || this.isTabKey) {
                this.isDocumentClick = this.isPopupOpen ? true : false;
                if (!this.selectFocus)
                    this.focusOutAction();
                this.isTabKey = false;
            }
        };
        ejComboBox.prototype.focusOutAction = function () {
            this.isInteracted = false;
            this.focusOut();
            this.onFocusOut();
        };
        ejComboBox.prototype.focusOut = function () {
            this.isTyped = true;
            this.hidePopup();
            this.inputElement.blur();
            $(this.inputWrapper.container).removeClass(comboBoxClasses.inputFocus);
        };
        ejComboBox.prototype.listdropDownClick = function (e) {
            if (this.inputElement.className.indexOf(comboBoxClasses.disable) > -1 || this.inputWrapper.clearButton === e.target) {
                return;
            }
            var target = e.target;
            if (!this.model.readonly) {
                if (this.isPopupOpen) {
                    this.hidePopup();
                }
                else {
                    this.focusIn();
                    this.queryString = $.trim(this.inputElement.value) === '' ? null : this.inputElement.value;
                    this.isDropDownClick = true;
                    this.showPopup();
                }
            }
        };
        ejComboBox.prototype.showPopup = function () {
            if (this.beforePopupOpen) {
                this.refreshPopup();
                return;
            }
            this.beforePopupOpen = true;
            if (this.model.allowFiltering && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {
                this.isActive = true;
                this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
            }
            else if (ej.isNullOrUndefined(this.list) || (this.list != undefined) && this.list.className.indexOf(comboBoxClasses.noData) > -1) {
                this.renderList();
            }
            if (!ej.isNullOrUndefined(this.list.children[0]) || this.list.className.indexOf(comboBoxClasses.noData) > -1) {
                this.renderPopup();
            }
            $(this.inputElement).attr({ 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });
            if (this.model.cssClass && this.popupObj)
                $(this.popupObj).addClass(this.model.cssClass);
        };
        ejComboBox.prototype.listfocusIn = function () {
            if (this.inputElement.className.indexOf(comboBoxClasses.disable) > -1) {
                return;
            }
            var isFocused = false;
            if (this.preventFocus && ej.isDevice()) {
                this.inputWrapper.container.tabIndex = 1;
                this.inputWrapper.container.focus();
                this.preventFocus = false;
                isFocused = true;
            }
            if (!isFocused) {
                this.inputElement.focus();
            }
            $(this.inputWrapper.container).addClass(comboBoxClasses.inputFocus);
            this.onFocus();
        };
        ejComboBox.prototype.onFocus = function () {
            if (!this.isInteracted) {
                this.isInteracted = true;
                this._trigger('focus');
            }
            this.updateIconState();
        };
        ejComboBox.prototype.updateIconState = function () {
            if (this.model.showClearButton) {
                if (this.inputElement.value !== '') {
                    $(this.inputWrapper.clearButton).removeClass(comboBoxClasses.clearIconHide);
                }
                else {
                    $(this.inputWrapper.clearButton).addClass(comboBoxClasses.clearIconHide);
                }
            }
        };
        ejComboBox.prototype.refreshPopup = function () {
            if (!ej.isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj)) {
                this.setPopupPosition();
            }
        };
        ejComboBox.prototype.renderPopup = function () {
            if (this.popupObj && document.body.contains(this.popupObj)) {
                this.refreshPopup();
                return;
            }
            var popupEle = ej.buildTag('div#' + this.element[0].id + '_popup' + '.e-ddl e-popup e-widget')[0];
            var searchBox = this.setSearchBox();
            this.listHeight = this.formatUnit(this.model.popupHeight);
            if (this.model.headerTemplate) {
                var compiledString = void 0;
                this.header = document.createElement('div');
                $(this.header).addClass(comboBoxClasses.header);
                this.header.innerHTML = this.model.headerTemplate;
                $(popupEle).append(this.header);
            }
            $(popupEle).append(this.list);
            if (this.model.footerTemplate) {
                this.setFooterTemplate(popupEle);
            }
            popupEle.style.visibility = 'hidden';
            popupEle.style.display = 'none';
            document.body.appendChild(popupEle);
            if (this.model.popupHeight !== 'auto') {
                this.searchBoxHeight = 0;
                if (!ej.isNullOrUndefined(searchBox.container)) {
                    this.searchBoxHeight = (searchBox.container.parentElement).getBoundingClientRect().height;
                    this.listHeight = (parseInt(this.listHeight, 10) - (this.searchBoxHeight)).toString() + 'px';
                }
                if (this.model.headerTemplate) {
                    var height = Math.round(this.header.getBoundingClientRect().height);
                    this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + 'px';
                }
                if (this.model.footerTemplate) {
                    var height = Math.round(this.footer.getBoundingClientRect().height);
                    this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + 'px';
                }
                this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + 'px';
                popupEle.style.maxHeight = this.formatUnit(this.model.popupHeight);
            }
            else {
                popupEle.style.height = 'auto';
            }
            var offsetValue = 2;
            var left;
            if (!ej.isNullOrUndefined(this.selectedLI) && (!ej.isNullOrUndefined(this.activeIndex) && this.activeIndex >= 0)) {
                this.setScrollPosition();
            }
            else {
                this.list.scrollTop = 0;
            }
            if (ej.isDevice() && (!this.model.allowFiltering &&
                (this.isDropDownClick))) {
                offsetValue = this.setPopupPosition();
                var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
                left = -(parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(firstItem).textIndent : firstItem["currentStyle"]['textIndent'], 10) -
                    parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.inputElement).textIndent : this.inputElement["currentStyle"]['textIndent'], 10) -
                    parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.inputElement.parentElement).borderLeftWidth : this.inputElement.parentElement["currentStyle"]['textIndent']), 10);
            }
            this.getFocusElement();
            this.popupObj = $(popupEle).css("width", this.setWidth()).addClass("e-control e-popup e-ddl")[0];
            this.model.enableRtl ? $(popupEle).addClass(comboBoxClasses.rtl) : $(popupEle).removeClass(comboBoxClasses.rtl);
            if (ej.isDevice()) {
                $(this.popupObj).addClass(comboBoxClasses.device);
            }
            this.setListPosition();
            popupEle.style.visibility = 'visible';
            this._on(ej.getScrollableParents($(this.inputWrapper.container)), 'scroll', this.scrollHandler);
            this._on(ej.getScrollableParents($(this.inputWrapper.container)), 'scroll', this.setListPosition);
            this._on($(window), 'resize', this.setListPosition);
            $(this.inputElement).attr({ 'aria-expanded': 'true' });
            var inputParent = this.model.allowFiltering ? this.filterInput.parentElement : this.inputWrapper.container;
            $(inputParent).addClass(comboBoxClasses.inputFocus);
            $(this.inputWrapper.container).addClass(comboBoxClasses.iconAnimation);
            this.beforePopupOpen = true;
            var proxy = this;
            $(this.popupObj).fadeIn(100, function () {
                proxy.isPopupOpen = true;
                proxy.activeStateChange();
                $(proxy.popupObj).addClass("e-popup-open");
                proxy._trigger('open', { popup: proxy.popupObj });
                if (proxy.model.allowFiltering)
                    proxy.filterInput.focus();
            });
            this._on($(document), 'mousedown', this.onDocumentClick);
            this.wireListEvents();
            if (this.model.fields.groupBy)
                this._on($(this.list), 'scroll', this.setFloatingHeader);
        };
        ejComboBox.prototype.setListPosition = function () {
            var elementObj = this.inputWrapper.container, pos = ej.getOffset($(elementObj)), winWidth, winBottomHeight = $(document).scrollTop() + $(window).height() - (pos["top"] + $(elementObj).outerHeight()), winTopHeight = pos["top"] - $(document).scrollTop(), popupHeight = $(this.popupObj).outerHeight(), popupWidth = $(this.popupObj).outerWidth(), left = pos["left"], totalHeight = $(elementObj).outerHeight(), border = (totalHeight - $(elementObj).height()) / 2, maxZ = ej.getZindexPartial(this.element, this.popupObj), popupmargin = 3, topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos["top"] + totalHeight + popupmargin : pos["top"] - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRtl || popupWidth > winWidth && (popupWidth < left + $(elementObj).outerWidth()))
                left -= $(this.popupObj).outerWidth() - $(elementObj).outerWidth();
            $(this.popupObj).css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        };
        ejComboBox.prototype.setFooterTemplate = function (popupEle) {
            if (this.footer) {
                this.footer.innerHTML = '';
            }
            else {
                this.footer = document.createElement('div');
                $(this.footer).addClass(comboBoxClasses.footer);
            }
            this.footer.innerHTML = this.model.footerTemplate;
            $(popupEle).append(this.footer);
        };
        ejComboBox.prototype.setPopupPosition = function () {
            var offsetValue;
            var popupOffset = 2;
            var selectedLI = this.list.querySelector('.' + comboBoxClasses.focus) || this.selectedLI;
            var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
            var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];
            var liHeight = firstItem.getBoundingClientRect().height;
            var listHeight = parseInt(this.listHeight, 10) / 2;
            var height = ej.isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
            var lastItemOffsetValue = lastItem.offsetTop;
            if (lastItemOffsetValue - listHeight < height && !ej.isNullOrUndefined(this.liCollections) &&
                this.liCollections.length > 0 && !ej.isNullOrUndefined(selectedLI)) {
                var count = parseInt(this.model.popupHeight, 10) / liHeight;
                var paddingBottom = parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.list).paddingBottom : this.list["currentStyle"]['paddingBottom'], 10);
                offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;
                this.list.scrollTop = selectedLI.offsetTop;
            }
            else if (height > listHeight) {
                offsetValue = listHeight - liHeight / 2;
                this.list.scrollTop = height - listHeight + liHeight / 2;
            }
            else {
                offsetValue = height;
            }
            offsetValue = offsetValue + liHeight - popupOffset + ((liHeight - this.inputWrapper.container.offsetHeight) / 2);
            return -offsetValue;
        };
        ejComboBox.prototype.activeStateChange = function () {
            if (this.isDocumentClick) {
                this.hidePopup();
                this.onFocusOut();
                $(this.inputWrapper.container).removeClass(comboBoxClasses.inputFocus);
            }
        };
        ejComboBox.prototype.isEmptyList = function () {
            return !ej.isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;
        };
        ejComboBox.prototype.formatUnit = function (value) {
            var result = value + '';
            return (result === 'auto' || result.indexOf('%') !== -1 || result.indexOf('px') !== -1) ? result : result + 'px';
        };
        ejComboBox.prototype.createInput = function (args) {
            var inputObject = { container: null, buttons: [], clearButton: null };
            inputObject.container = ej.buildTag("span." + comboBoxClasses.input + " " + "e-widget")[0];
            args.element.parentNode.insertBefore(inputObject.container, args.element);
            inputObject.container.appendChild($(args.element).addClass('e-input')[0]);
            if (args.properties.showClearButton)
                inputObject.clearButton = this.createClearButton(args.element, inputObject.container);
            var button = ej.buildTag('span' + "." + args.buttons[0])[0];
            if (ej.browserInfo()["name"] === "msie" && parseInt(ej.browserInfo()["version"]) <= 10) {
                if (parseInt(ej.browserInfo()["version"]) == 9)
                    $(button).addClass("e-comboie9");
                else if (parseInt(ej.browserInfo()["version"]) == 8)
                    $(button).addClass("e-comboie8");
                $(button).addClass("e-comboie");
            }
            inputObject.container.appendChild(button);
            inputObject.buttons.push(button);
            if (inputObject.container.className.indexOf(comboBoxClasses.input) == -1)
                $(inputObject.container).addClass('e-input-group');
            (args.properties.readonly) ? $(this.inputElement).attr({ readonly: '' }) : this.inputElement.removeAttribute('readonly');
            return inputObject;
        };
        ejComboBox.prototype.createClearButton = function (element, container) {
            var button = ej.buildTag('span.' + comboBoxClasses.clearIcon + ((ej.browserInfo().name === "msie" && parseInt(ej.browserInfo().version) <= 10) ? " e-comboie" : ""))[0];
            container.appendChild(button);
            (element.value) ? $(button).removeClass(comboBoxClasses.clearIconHide) : $(button).addClass(comboBoxClasses.clearIconHide);
            this._on($(button), 'click', function (event) {
                if (!(element.className.indexOf(comboBoxClasses.disable) > -1 || element.readOnly)) {
                    event.preventDefault();
                    if (element !== document.activeElement)
                        element.focus();
                    element.value = '';
                    $(button).addClass(comboBoxClasses.clearIconHide);
                }
            });
            return button;
        };
        ejComboBox.prototype.setWidth = function () {
            var width = this.formatUnit(this.model.popupWidth);
            if (width.indexOf('%') > -1) {
                var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;
                width = inputWidth.toString() + 'px';
            }
            if (ej.isDevice() && (!this.model.allowFiltering &&
                this.isDropDownClick)) {
                var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
                width = (parseInt(width, 10) + (parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(firstItem).textIndent : firstItem["currentStyle"]['textIndent'], 10) -
                    parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.inputElement).textIndent : this.inputElement["currentStyle"]['textIndent'], 10) +
                    parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.inputElement.parentElement).borderLeftWidth : this.inputElement.parentElement["currentStyle"]['borderLeftWidth'], 10)) * 2) + 'px';
            }
            return width;
        };
        ejComboBox.prototype.clearText = function () {
            this.filterInput.value = '';
            this.searchLists(null);
        };
        ejComboBox.prototype.onInput = function () {
            this.isValidKey = true;
            this.updateIconState();
        };
        ejComboBox.prototype.onFilterUp = function (e) {
            this.isValidKey = e.keyCode === 40 || e.keyCode === 38 || this.isValidKey;
            if (this.isValidKey) {
                this.isValidKey = false;
                switch (e.keyCode) {
                    case 38:
                    case 40:
                        this.preventAutoFill = false;
                        this.preventAltUp = false;
                        e.preventDefault();
                        break;
                    case 46:
                    case 8:
                        this.typedString = this.filterInput.value;
                        if (!this.isPopupOpen && this.typedString !== '' || this.isPopupOpen && this.queryString.length > 0) {
                            this.preventAutoFill = true;
                            this.searchLists(e);
                        }
                        else if (this.typedString === '') {
                            this.resetFocusElement();
                            this.activeIndex = null;
                        }
                        e.preventDefault();
                        break;
                    default:
                        this.typedString = this.filterInput.value;
                        this.preventAutoFill = false;
                        this.searchLists(e);
                        break;
                }
            }
        };
        ejComboBox.prototype.onFilterDown = function (e) {
            switch (e.keyCode) {
                case 13:
                    break;
                case 40:
                case 38:
                    this.queryString = this.filterInput.value;
                    e.preventDefault();
                    break;
                case 9:
                    if (this.isPopupOpen) {
                        e.preventDefault();
                    }
                    break;
                default:
                    this.prevSelectPoints = this.getSelectionPoints();
                    this.queryString = this.filterInput.value;
                    break;
            }
        };
        ejComboBox.prototype.resetHandler = function (e) {
            e.preventDefault();
            this.clear();
        };
        ejComboBox.prototype.clear = function () {
            if (this.list) {
                if (this.model.allowFiltering) {
                    this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);
                }
                this.resetFocusElement();
            }
            this.hiddenElement.innerHTML = '';
            this.inputElement.value = '';
            this.value(null);
            this.model.text = null;
            this.model.index = null;
            this.activeIndex = null;
            this.item = null;
            this.itemData = null;
            this.queryString = '';
            this.setSelection(null, null);
            this.isSelectCustom = false;
            this.onChangeEvent(null);
            this.updateIconState();
        };
        ejComboBox.prototype.resetFocusElement = function () {
            this.removeHover();
            this.removeSelection();
            this.removeFocus();
            this.list.scrollTop = 0;
            var li = this.ulElement.querySelector('.' + comboBoxClasses.li);
            if (li) {
                $(li).addClass(comboBoxClasses.focus);
            }
        };
        ejComboBox.prototype.keyActionHandler = function (e) {
            var preventAction = e.keyCode === 33 || e.keyCode === 34;
            var preventHomeEnd = (e.keyCode === 36 || e.keyCode === 35);
            this.isEscapeKey = e.keyCode === 27;
            this.isTabKey = !this.isPopupOpen && e.keyCode === 9;
            var isNavigation = (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 33 || e.keyCode === 34
                || e.keyCode === 36 || e.keyCode === 35);
            if ((preventAction || preventHomeEnd) && !this.isPopupOpen) {
                return;
            }
            if (!this.model.readonly) {
                var isTabAction = e.keyCode === 9 || (e.keyCode === 9 && e.shiftKey);
                if (this.list === undefined && !this.isRequested && !isTabAction && e.keyCode !== 27) {
                    this.searchKeyEvent = e;
                    this.renderList();
                }
                if (ej.isNullOrUndefined(this.list) || (!ej.isNullOrUndefined(this.liCollections) &&
                    isNavigation && this.liCollections.length === 0) || this.isRequested) {
                    return;
                }
                if (isTabAction && this.isPopupOpen || e.keyCode === 27) {
                    e.preventDefault();
                }
                this.isSelected = e.keyCode === 27 ? false : this.isSelected;
                this.isTyped = (isNavigation || e.keyCode === 27) ? false : this.isTyped;
                switch (e.keyCode) {
                    case 40:
                    case 38:
                        if (e.altKey && e.keyCode === 40) {
                            this.showPopup();
                            break;
                        }
                        if (e.altKey && e.keyCode === 38) {
                            this.preventAltUp = this.isPopupOpen;
                            this.hidePopup();
                            break;
                        }
                        var focusEle = this.list.querySelector('.' + comboBoxClasses.focus);
                        if (!ej.isNullOrUndefined(focusEle)) {
                            this.setSelection(focusEle, e);
                        }
                        else {
                            var nextItem = void 0;
                            var index = e.keyCode === 40 ? this.activeIndex + 1 : this.activeIndex - 1;
                            var startIndex = 0;
                            nextItem = ej.isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
                            this.setSelection(nextItem, e);
                        }
                        e.preventDefault();
                        break;
                    case 33:
                        this.pageUpSelection(this.activeIndex - this.getPageCount(), e);
                        e.preventDefault();
                        break;
                    case 34:
                        this.pageDownSelection(this.activeIndex + this.getPageCount(), e);
                        e.preventDefault();
                        break;
                    case 36:
                        e.preventDefault();
                        if (this.activeIndex === 0) {
                            return;
                        }
                        this.setSelection(this.liCollections[0], e);
                        break;
                    case 35:
                        e.preventDefault();
                        var lastLi = this.getItems().length - 1;
                        if (this.activeIndex === lastLi) {
                            return;
                        }
                        this.setSelection(this.liCollections[lastLi], e);
                        break;
                    case 13:
                        this.selectCurrentItem(e);
                        break;
                    case 27:
                    case 9:
                        if (this.isPopupOpen) {
                            this.hidePopup();
                        }
                        break;
                }
            }
        };
        ejComboBox.prototype.getPageCount = function () {
            var liHeight = (this.list.className.indexOf(comboBoxClasses.noData) > -1) ? null :
                typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.getItems()[0], null).getPropertyValue('height') : this.getItems()[0]["currentStyle"]['height'];
            return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
        };
        ejComboBox.prototype.pageUpSelection = function (steps, event) {
            var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
            this.setSelection(previousItem, event);
        };
        ;
        ejComboBox.prototype.pageDownSelection = function (steps, event) {
            var list = this.getItems();
            var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
            this.setSelection(previousItem, event);
        };
        ;
        ejComboBox.prototype.getValueByText = function (text, ignoreCase) {
            var value = null;
            var dataSource = this.listData;
            var textField = this.model.fields.text ? this.model.fields.text : 'text';
            var valueField = this.model.fields.value ? this.model.fields.value : textField;
            if (ignoreCase) {
                if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
                    for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
                        var item = dataSource_1[_i];
                        if (String(item).toLowerCase() === text.toString().toLowerCase()) {
                            value = typeof dataSource[0] === 'string' ? String(item) : this.getFormattedValue(String(item));
                            break;
                        }
                    }
                }
                else {
                    dataSource.filter(function (item) {
                        var itemText = item[textField].toString();
                        if (itemText.toLowerCase() === text.toLowerCase()) {
                            value = item[valueField];
                            return true;
                        }
                    });
                }
            }
            else {
                if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
                    for (var _a = 0, dataSource_2 = dataSource; _a < dataSource_2.length; _a++) {
                        var item = dataSource_2[_a];
                        if (String(item) === text.toString()) {
                            value = typeof dataSource[0] === 'string' ? text : this.getFormattedValue(text);
                            break;
                        }
                    }
                }
                else {
                    dataSource.filter(function (item) {
                        if (item[textField] === text) {
                            value = item[valueField];
                            return true;
                        }
                    });
                }
            }
            return value;
        };
        ;
        ejComboBox.prototype.removeSelection = function () {
            var selectedItems = this.list.querySelectorAll('.' + comboBoxClasses.selected);
            if (selectedItems.length) {
                $(selectedItems).removeClass(comboBoxClasses.selected);
                selectedItems[0].removeAttribute('aria-selected');
            }
        };
        ;
        ejComboBox.prototype.listonActionComplete = function (ulElement, list, e, isUpdated) {
            if (this.isNotSearchList) {
                this.isNotSearchList = false;
                return;
            }
            if (this.isActive) {
                var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;
                this.baseonActionComplete(ulElement, list, e);
                if (this.isRequested && !ej.isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === 'keydown') {
                    this.isRequested = false;
                    this.keyActionHandler(this.searchKeyEvent);
                    this.searchKeyEvent = null;
                }
                if (this.isRequested && !ej.isNullOrUndefined(this.searchKeyEvent)) {
                    this.incrementalSearch(this.searchKeyEvent);
                    this.searchKeyEvent = null;
                }
                this.list.scrollTop = 0;
                if (!ej.isNullOrUndefined(ulElement)) {
                    $(ulElement).attr({ 'id': this.element[0].id + '_options', 'role': 'listbox', 'aria-hidden': 'false' });
                }
                if (this.initRemoteRender) {
                    this.initial = true;
                    this.activeIndex = this.model.index;
                    this.updateValues();
                    this.initRemoteRender = false;
                    this.initial = false;
                }
                if (this.model.allowFiltering && !this.isTyped) {
                    if (!this.actionCompleteData.isUpdated) {
                        this.actionCompleteData = { ulElement: ulElement.cloneNode(true), list: list, isUpdated: true };
                    }
                    this.addNewItem(list, selectedItem);
                    if (!ej.isNullOrUndefined(this.itemData)) {
                        this.focusIndexItem();
                    }
                }
                if (this.beforePopupOpen) {
                    this.renderPopup();
                }
            }
        };
        ejComboBox.prototype.addNewItem = function (listData, newElement) {
            var _this = this;
            if (!ej.isNullOrUndefined(this.itemData) && !ej.isNullOrUndefined(newElement)) {
                var value_2 = this.getItemData()["value"];
                var isExist = listData.some(function (data) {
                    return data[_this.model.fields.value] === value_2;
                });
                if (!isExist) {
                    this.addItem(this.itemData);
                    this.actionCompleteData.list.push(this.itemData);
                    this.actionCompleteData.ulElement.appendChild(newElement);
                }
                var selectedItems = void 0;
                var ulElement = this.actionCompleteData.ulElement;
                selectedItems = ulElement.querySelectorAll('.' + comboBoxClasses.selected);
                if (selectedItems.length) {
                    $(selectedItems).removeClass(comboBoxClasses.selected);
                    selectedItems[0].removeAttribute('aria-selected');
                }
            }
        };
        ejComboBox.prototype.removeFocus = function () {
            var highlightedItem = this.list.querySelectorAll('.' + comboBoxClasses.focus);
            if (highlightedItem && highlightedItem.length) {
                $(highlightedItem).removeClass(comboBoxClasses.focus);
            }
        };
        ;
        ejComboBox.prototype.getItemData = function () {
            var textField = this.model.fields.text ? this.model.fields.text : 'text';
            var valueField = this.model.fields.value ? this.model.fields.value : textField;
            var dataItem = {};
            dataItem = this.itemData;
            var value = (!ej.isNullOrUndefined(dataItem) &&
                (!ej.isNullOrUndefined(dataItem[valueField])) ? dataItem[valueField] : dataItem);
            var text = (!ej.isNullOrUndefined(dataItem) &&
                (!ej.isNullOrUndefined(dataItem[textField])) ? dataItem[textField] : dataItem);
            return { value: value, text: text };
        };
        ejComboBox.prototype.isValidLI = function (li) {
            return (li && li.hasAttribute('role') && li.getAttribute('role') === 'option');
        };
        ;
        ejComboBox.prototype.getSelectionPoints = function () {
            var input = this.inputElement;
            return { start: Math.abs(input.selectionStart), end: Math.abs(input.selectionEnd) };
        };
        ejComboBox.prototype.updateSelectedItem = function (li, e, preventSelect) {
            this.removeSelection();
            $(li).addClass(comboBoxClasses.selected);
            this.removeHover();
            var value = this.getFormattedValue(li.getAttribute('data-value'));
            this.item = li;
            this.itemData = this.getDataByValue(value);
            if (!this.initial && !preventSelect) {
                this.isSelected = true;
                var eventArgs = {
                    e: e,
                    item: this.item,
                    itemData: this.itemData,
                    isInteracted: e ? true : false,
                    text: this.itemData[this.model.fields.text],
                    value: this.itemData[this.model.fields.value]
                };
                this._trigger('select', eventArgs);
            }
            var focusedItem = this.list.querySelector('.' + comboBoxClasses.focus);
            if (focusedItem) {
                $(focusedItem).removeClass(comboBoxClasses.focus);
            }
            li.setAttribute('aria-selected', 'true');
            this.activeIndex = this.getIndexByValue(value);
        };
        ejComboBox.prototype.setHiddenValue = function () {
            if (!ej.isNullOrUndefined(this.value())) {
                var optionEle = document.createElement('option');
                optionEle.innerText = this.model.text;
                optionEle.selected = true;
                optionEle.setAttribute('value', this.value());
                $(this.hiddenElement).append(optionEle);
            }
            else {
                this.hiddenElement.innerHTML = '';
            }
        };
        ejComboBox.prototype.detachChangeEvent = function (eve) {
            this.isSelected = false;
            this.previousValue = this.value();
            this.activeIndex = this.model.index;
            this.typedString = !ej.isNullOrUndefined(this.model.text) ? this.model.text : '';
            if (!this.initial) {
                this.setHiddenValue();
                var eventArgs = {
                    e: eve,
                    item: this.item,
                    itemData: this.itemData,
                    isInteracted: eve ? true : false,
                    value: this.value()
                };
                this._trigger("_change", { value: this.value() });
                this._trigger('change', eventArgs);
            }
        };
        ejComboBox.prototype.getElementByValue = function (value) {
            var item;
            var listItems = this.getItems();
            for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {
                var liItem = listItems_1[_i];
                if (this.getFormattedValue(liItem.getAttribute('data-value')) === value) {
                    item = liItem;
                    break;
                }
            }
            return item;
        };
        ;
        ejComboBox.prototype.getElementByText = function (text) {
            return this.getElementByValue(this.getValueByText(text));
        };
        ejComboBox.prototype.listsearchLists = function (e) {
            var _this = this;
            this.isTyped = true;
            this.activeIndex = null;
            if (this.filterInput.parentElement.querySelector('.' + comboBoxClasses.clearIcon)) {
                var clearElement = this.filterInput.parentElement.querySelector('.' + comboBoxClasses.clearIcon);
                clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';
            }
            if (this.model.allowFiltering) {
                this._trigger('filtering', {
                    text: this.filterInput.value,
                    updateData: function (dataSource, query, fields) {
                        if (!ej.isNullOrUndefined(_this.filterInput)) {
                            _this.beforePopupOpen = true;
                            if ($.trim(_this.filterInput.value) === '') {
                                _this.actionCompleteData.isUpdated = false;
                                _this.isTyped = false;
                                _this.onActionComplete(_this.actionCompleteData.ulElement, _this.actionCompleteData.list);
                                _this.isTyped = true;
                                _this.isNotSearchList = true;
                            }
                            else {
                                _this.isNotSearchList = false;
                                _this.resetList(dataSource, fields, query);
                            }
                        }
                    },
                    event: e
                });
            }
        };
        ejComboBox.prototype.focusIndexItem = function () {
            var value = this.getItemData()["value"];
            this.activeIndex = this.getIndexByValue(value);
            var element = this.list.querySelector('[data-value="' + value + '"]');
            this.selectedLI = element;
            this.activeItem(element);
            this.removeFocus();
        };
        ejComboBox.prototype.activeItem = function (li) {
            if (this.isValidLI(li) && li.className.indexOf(comboBoxClasses.selected) == -1) {
                this.removeSelection();
                $(li).addClass(comboBoxClasses.selected);
                this.removeHover();
                li.setAttribute('aria-selected', 'true');
            }
        };
        ejComboBox.prototype.removeFillSelection = function () {
            if (this.isInteracted) {
                var selection = this.getSelectionPoints();
                this.inputElement.setSelectionRange(selection["end"], selection["end"]);
            }
        };
        ejComboBox.prototype.listsetValue = function (e) {
            var dataItem = this.getItemData();
            if (ej.isNullOrUndefined(dataItem["value"])) {
                this.setInputValue(null, this.inputElement, this.model.showClearButton);
            }
            else {
                this.setInputValue(dataItem["text"], this.inputElement, this.model.showClearButton);
            }
            if (this.previousValue === dataItem["value"]) {
                this.isSelected = false;
                return true;
            }
            else {
                this.isSelected = !this.initial ? true : false;
                this.isSelectCustom = false;
                return false;
            }
        };
        ejComboBox.prototype.listsetSelection = function (li, e) {
            if (this.isValidLI(li) && li.className.indexOf(comboBoxClasses.selected) == -1) {
                this.updateSelectedItem(li, e, false);
            }
            if (this.list) {
                this.removeHover();
            }
            this.selectedLI = li;
            if (this.setValue(e)) {
                return;
            }
            if (this.model.valueTemplate && this.itemData !== null) {
                var compiledString = void 0;
                if (!this.valueTempElement) {
                    this.valueTempElement = ej.buildTag('span.' + comboBoxClasses.value)[0];
                    this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);
                    this.inputElement.style.display = 'none';
                    this.inputWrapper.container.focus();
                    $(this.inputWrapper.container).addClass(comboBoxClasses.inputFocus);
                }
                this.valueTempElement.innerHTML = '';
                this.valueTempElement.innerHTML = this.model.valueTemplate;
            }
            else if (this.inputElement.previousSibling === this.valueTempElement) {
                $(this.valueTempElement).remove();
                this.inputElement.style.display = 'block';
            }
            if (this.isPopupOpen) {
                $(this.inputElement).attr({ 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });
            }
            if ((!this.isPopupOpen && !ej.isNullOrUndefined(li)) || (this.isPopupOpen && !ej.isNullOrUndefined(e) &&
                (e.type !== 'keydown' || e.type === 'keydown' && e.keyCode === 13))) {
                this.isSelectCustom = false;
                this.onChangeEvent(e);
            }
            if (this.isPopupOpen && !ej.isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== 'click')) {
                this.setScrollPosition(e);
            }
        };
        ejComboBox.prototype.setScrollPosition = function (e) {
            if (!ej.isNullOrUndefined(e)) {
                switch (e.keyCode) {
                    case 34:
                    case 40:
                    case 35:
                        this.scrollBottom();
                        break;
                    default:
                        this.scrollTop();
                        break;
                }
            }
            else {
                this.scrollBottom(true);
            }
        };
        ejComboBox.prototype.scrollBottom = function (isInitial) {
            var currentOffset = this.list.offsetHeight;
            var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
            var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
            nextOffset = isInitial ? nextOffset + parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.list).paddingTop : this.list["currentStyle"]['paddingTop'], 10) * 2 : nextOffset;
            var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
            boxRange = this.model.fields.groupBy && !ej.isNullOrUndefined(this.fixedHeaderElement) ?
                boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
            if (this.activeIndex === 0) {
                this.list.scrollTop = 0;
            }
            else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
                this.list.scrollTop = nextOffset;
            }
        };
        ejComboBox.prototype.scrollTop = function () {
            var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
            var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
            nextOffset = this.model.fields.groupBy && !ej.isNullOrUndefined(this.fixedHeaderElement) ?
                nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
            var boxRange = (this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop);
            if (this.activeIndex === 0) {
                this.list.scrollTop = 0;
            }
            else if (nextOffset < 0) {
                this.list.scrollTop = this.list.scrollTop + nextOffset;
            }
            else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
                this.list.scrollTop = this.selectedLI.offsetTop - (this.model.fields.groupBy && !ej.isNullOrUndefined(this.fixedHeaderElement) ?
                    this.fixedHeaderElement.offsetHeight : 0);
            }
        };
        ejComboBox.prototype.onChangeEvent = function (eve) {
            var dataItem = this.getItemData();
            var index = this.isSelectCustom ? null : this.activeIndex;
            this.value(dataItem["value"]);
            this.model.index = index;
            this.model.text = dataItem["text"];
            if (!(this.isWatermark)) {
                if (ej.isNullOrUndefined(this.model.text)) {
                    this.hiddenSpan.css("display", "block");
                }
                else
                    this.hiddenSpan.css("display", "none");
            }
            this.detachChangeEvent(eve);
        };
        ;
        ejComboBox.prototype.setPlaceholder = function (placeholder, element) {
            var parentElement;
            parentElement = $(element).parent()[0];
            this.isWatermark = $(document.createElement('input')).attr("placeholder", '')[0].hasAttribute("placeholder");
            if (!ej.isNullOrUndefined(placeholder) && placeholder !== '') {
                $(element).attr({ 'placeholder': placeholder, 'aria-placeholder': placeholder });
                if (!(this.isWatermark)) {
                    this.hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(element);
                    this.hiddenSpan.text(placeholder);
                    this.hiddenSpan.css("display", "block");
                }
            }
            else {
                element.removeAttribute('placeholder');
                element.removeAttribute('aria-placeholder');
            }
        };
        ejComboBox.prototype.setReadonly = function (isReadonly, element) {
            if (isReadonly) {
                $(element).attr({ readonly: '' });
            }
            else {
                element.removeAttribute('readonly');
            }
        };
        ejComboBox.prototype.setEnableRtl = function () {
            if (this.model.enableRtl) {
                $(this.inputElement.parentElement).addClass(comboBoxClasses.rtl);
                if (this.popupObj)
                    $(this.popupObj).addClass(comboBoxClasses.rtl);
            }
            else {
                $(this.inputElement.parentElement).removeClass(comboBoxClasses.rtl);
                if (this.popupObj)
                    $(this.popupObj).removeClass(comboBoxClasses.rtl);
            }
        };
        ejComboBox.prototype.listrender = function () {
            if (this.element[0].tagName === 'INPUT') {
                this.inputElement = this.element[0];
            }
            else {
                this.inputElement = ej.buildTag('input')[0];
                if (this.element[0].tagName !== 'EJ-COMBOBOX') {
                    this.element[0].style.display = 'none';
                }
                this.element[0].parentElement.insertBefore(this.inputElement, this.element[0]);
            }
            this.inputWrapper = this.createInput({
                element: this.inputElement,
                buttons: [comboBoxClasses.icon],
                properties: {
                    readonly: this.model.readonly,
                    showClearButton: this.model.showClearButton
                },
            });
            this.setPlaceholder(this.model.placeholder, this.inputElement);
            this.setCssClass(this.model.cssClass);
            this.setEnable();
            this.setEnableRtl();
            if (this.element[0].tagName === 'EJ-COMBOBOX') {
                this.element[0].appendChild(this.inputWrapper.container);
            }
            else {
                this.inputElement.parentElement.insertBefore(this.element[0], this.inputElement);
            }
            var name = this.element[0].getAttribute('name') ? this.element[0].getAttribute('name') : this.element[0].getAttribute('id');
            this.hiddenElement = ej.buildTag('select', null, null, { 'name': name, 'aria-hidden': 'true', 'class': 'e-ddl-hidden', 'tabindex': '-1', })[0];
            $(this.inputWrapper.container).prepend(this.hiddenElement);
            this.element[0].removeAttribute('name');
            this.inputWrapper.container.style.width = this.formatUnit(this.model.width);
            $(this.inputWrapper.container).addClass('e-ddl');
            this.wireEvent();
            this.tabIndex = this.element[0].hasAttribute('tabindex') ? this.element[0].getAttribute('tabindex') : '0';
            this.element[0].removeAttribute('tabindex');
            var id = this.element[0].getAttribute('id') ? this.element[0].getAttribute('id') : 'dropdownlist' + ej.getGuid('dropdownlist');
            this.element[0].id = id;
            this.inputElement.setAttribute('tabindex', this.tabIndex);
            $(this.inputElement).attr(this.getAriaAttributes());
            this.setHTMLAttributes();
            if (!ej.isNullOrUndefined(this.model.index))
                this.activeIndex = this.model.index;
            if (!ej.isNullOrUndefined(this.value()) || !ej.isNullOrUndefined(this.activeIndex) || !ej.isNullOrUndefined(this.model.text)) {
                this.initValue();
            }
            else if (this.element[0].tagName === 'SELECT' && this.element[0].options[0]) {
                var selectElement = this.element[0];
                this.value(selectElement.options[selectElement.selectedIndex]["value"]);
                this.model.text = ej.isNullOrUndefined(this.value()) ? null : selectElement.options[selectElement.selectedIndex].textContent;
                this.initValue();
            }
            if (!this.model.enabled) {
                this.inputElement.tabIndex = -1;
            }
            this.initial = false;
            this.element[0].style.opacity = '';
        };
        ;
        ejComboBox.prototype.setHTMLAttributes = function () {
            if (!ej.isNullOrUndefined(Object.keys) && Object.keys(this.model.htmlAttributes).length) {
                for (var _i = 0, _a = Object.keys(this.model.htmlAttributes); _i < _a.length; _i++) {
                    var htmlAttr = _a[_i];
                    if (htmlAttr === 'class')
                        this.setCssClass(this.model.htmlAttributes[htmlAttr]);
                    else if (htmlAttr === 'disabled' && this.model.htmlAttributes[htmlAttr] === 'disabled') {
                        this.model.enabled = false;
                        this.setEnable();
                    }
                    else if (htmlAttr === 'readonly' && this.model.htmlAttributes[htmlAttr] === 'readonly')
                        this._setModel({ "readonly": true });
                    else if (htmlAttr === 'style')
                        this.inputWrapper.container.setAttribute('style', this.model.htmlAttributes[htmlAttr]);
                    else {
                        var defaultAttr = ['title', 'id', 'placeholder'];
                        var validateAttr = ['name', 'required'];
                        if (validateAttr.indexOf(htmlAttr) > -1) {
                            this.hiddenElement.setAttribute(htmlAttr, this.model.htmlAttributes[htmlAttr]);
                        }
                        else if (defaultAttr.indexOf(htmlAttr) > -1) {
                            htmlAttr === 'placeholder' ? this.setPlaceholder(this.model.htmlAttributes[htmlAttr], this.inputElement) :
                                this.element[0].setAttribute(htmlAttr, this.model.htmlAttributes[htmlAttr]);
                        }
                        else
                            this.inputWrapper.container.setAttribute(htmlAttr, this.model.htmlAttributes[htmlAttr]);
                    }
                }
            }
        };
        ejComboBox.prototype.setCssClass = function (cssClass) {
            $(this.inputWrapper.container).addClass(cssClass);
            if (this.popupObj)
                $(this.popupObj).addClass(cssClass);
        };
        ejComboBox.prototype.setEnable = function () {
            var disabledAttrs = { 'disabled': 'disabled', 'aria-disabled': 'true' };
            if (this.model.enabled) {
                $(this.inputElement).removeAttr("disabled aria-disabled").removeClass(comboBoxClasses.disable).attr('aria-disabled', 'false');
                $(this.inputWrapper.container).removeClass(comboBoxClasses.disable);
                this.inputElement.tabIndex = parseInt(this.tabIndex);
            }
            else {
                $(this.inputElement).attr(disabledAttrs).addClass(comboBoxClasses.disable).attr('aria-disabled', 'true');
                this.hidePopup();
                $(this.inputWrapper.container).addClass(comboBoxClasses.disable);
            }
        };
        ejComboBox.prototype.initValue = function () {
            this.renderList();
            if (this.model.dataSource instanceof ej.DataManager) {
                this.initRemoteRender = true;
            }
            else {
                this.updateValues();
            }
        };
        ejComboBox.prototype.renderList = function (isEmptyData) {
            this.baserender(isEmptyData);
            this.wireListEvents();
        };
        ejComboBox.prototype.wireListEvents = function () {
            this._on($(this.list), 'click', this.onMouseClick);
            this._on($(this.list), 'mouseover', this.onMouseOver);
            this._on($(this.list), 'mouseout', this.removeHover);
        };
        ;
        ejComboBox.prototype.onMouseClick = function (e) {
            var target = e.target;
            var li = $(target).closest('.' + comboBoxClasses.li)[0];
            if (!this.isValidLI(li)) {
                return;
            }
            this.setSelection(li, e);
            var delay = 100;
            this.closePopup(delay);
            this.selectFocus = false;
        };
        ejComboBox.prototype.onMouseOver = function (e) {
            var currentLi = $(e.target).closest('.' + comboBoxClasses.li)[0];
            this.setHover(currentLi);
        };
        ;
        ejComboBox.prototype.setHover = function (li) {
            if (this.model.enabled && this.isValidLI(li) && li.className.indexOf(comboBoxClasses.hover) == -1) {
                this.removeHover();
                $(li).addClass(comboBoxClasses.hover);
            }
        };
        ;
        ejComboBox.prototype.removeHover = function () {
            var hoveredItem = this.list.querySelectorAll('.' + comboBoxClasses.hover);
            if (hoveredItem && hoveredItem.length) {
                $(hoveredItem).removeClass(comboBoxClasses.hover);
            }
        };
        ;
        ejComboBox.prototype.baserender = function (isEmptyData) {
            this.list = ej.buildTag('div.' + comboBoxClasses.content, "", {}, { 'tabindex': '0' })[0];
            $(this.list).addClass('e-dropdownbase');
            var group = this.element[0].querySelector('select>optgroup');
            if (this.model.fields.groupBy || !ej.isNullOrUndefined(group)) {
                this._on($(this.list), 'scroll', this.setFloatingHeader);
            }
            this.setEnableRtl();
            this.setEnable();
            if (!isEmptyData) {
                this.initialize();
            }
        };
        ;
        ejComboBox.prototype.initialize = function () {
            this.bindEvent = true;
            if (this.element[0].tagName === 'SELECT') {
                var dataCount = void 0;
                if (this.model.dataSource instanceof Array)
                    dataCount = this.model.dataSource;
                var dataSource = this.model.dataSource instanceof Array ? (dataCount.length > 0 ? true : false)
                    : !ej.isNullOrUndefined(this.model.dataSource) ? true : false;
                if (!dataSource) {
                    this.renderItemsBySelect();
                }
            }
            else {
                this.setListData(this.model.dataSource, this.model.fields, this.model.query);
            }
        };
        ;
        ejComboBox.prototype.renderItemsBySelect = function () {
            var element = this.element[0];
            var fields = { value: 'value', text: 'text' };
            var jsonElement = [];
            var group = element.querySelectorAll('select>optgroup');
            var option = element.querySelectorAll('select>option');
            this.getJSONfromOption(jsonElement, option, fields);
            if (group.length) {
                for (var i = 0; i < group.length; i++) {
                    var item = group[i];
                    var optionGroup = {};
                    optionGroup[fields.text] = item.label;
                    optionGroup["isHeader"] = true;
                    var child = item.querySelectorAll('option');
                    jsonElement.push(optionGroup);
                    this.getJSONfromOption(jsonElement, child, fields);
                }
                var items = element.querySelectorAll('select>option');
            }
            this.model.fields.text = fields.text;
            this.model.fields.value = fields.value;
            this.resetList(jsonElement, fields);
        };
        ejComboBox.prototype.getJSONfromOption = function (items, options, fields) {
            for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
                var option = options_1[_i];
                var json = {};
                json[fields.text] = option.innerText;
                json[fields.value] = option.getAttribute(fields.value) ? option.getAttribute(fields.value) : option.innerText;
                items.push(json);
            }
        };
        ejComboBox.prototype.setFloatingHeader = function (e) {
            if (ej.isNullOrUndefined(this.fixedHeaderElement)) {
                this.fixedHeaderElement = ej.buildTag('div.' + comboBoxClasses.fixedHead)[0];
                if (this.list.querySelector('li').className.indexOf(comboBoxClasses.group) == -1) {
                    this.fixedHeaderElement.style.display = 'none';
                }
                $(this.list).prepend(this.fixedHeaderElement);
                this.setFixedHeader();
            }
            this.scrollStop(e);
        };
        ejComboBox.prototype.setFixedHeader = function () {
            this.list.parentElement.style.display = 'block';
            var liWidth = this.liCollections[0].offsetWidth;
            this.fixedHeaderElement.style.width = liWidth.toString() + 'px';
            $(this.fixedHeaderElement).css({ zIndex: 10 });
            var firstLi = this.ulElement.querySelector('.' + comboBoxClasses.group);
            this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
        };
        ejComboBox.prototype.scrollStop = function (e) {
            var target = e.target;
            var liHeight = parseInt(typeof getComputedStyle !== 'undefined' ? getComputedStyle(this.liCollections[0], null).getPropertyValue('height') : this.liCollections[0]["currentStyle"]['height'], 10);
            var topIndex = Math.round(target.scrollTop / liHeight);
            var liCollections = this.ulElement.querySelectorAll('li');
            for (var i = topIndex; i > -1; i--) {
                if (!ej.isNullOrUndefined(liCollections[i]) && liCollections[i].className.indexOf(comboBoxClasses.group) > -1) {
                    var currentLi = liCollections[i];
                    this.fixedHeaderElement.innerHTML = currentLi.innerHTML;
                    this.fixedHeaderElement.style.display = 'block';
                    break;
                }
                else {
                    this.fixedHeaderElement.style.display = 'none';
                }
            }
        };
        ejComboBox.prototype.getFormattedValue = function (value) {
            if (this.listData && this.listData.length) {
                if (typeof this.listData[0][this.model.fields.value ? this.model.fields.value : 'value'] === 'number' ||
                    typeof this.listData[0] === 'number') {
                    return parseInt(value, 10);
                }
            }
            return value;
        };
        ejComboBox.prototype.baseonActionComplete = function (ulElement, list, e) {
            this.listData = list;
            this.list.innerHTML = '';
            this.list.appendChild(ulElement);
            this.liCollections = this.list.querySelectorAll('.' + comboBoxClasses.li);
            this.ulElement = this.list.querySelector('ul');
            this.postRender(this.list, list, this.bindEvent);
        };
        ejComboBox.prototype.getIndexByValue = function (value) {
            var index;
            var listItems = this.getItems();
            for (var i = 0; i < listItems.length; i++) {
                if (listItems[i].getAttribute('data-value') === value.toString()) {
                    index = i;
                    break;
                }
            }
            return index;
        };
        ;
        ejComboBox.prototype.getItems = function () {
            return this.ulElement.querySelectorAll('.' + comboBoxClasses.li);
        };
        ;
        ejComboBox.prototype.postRender = function (listElement, list, bindEvent) {
            var focusItem = listElement.querySelector('.' + comboBoxClasses.li);
            var selectedItem = listElement.querySelector('.' + comboBoxClasses.selected);
            if (focusItem && !selectedItem) {
                $(focusItem).addClass(comboBoxClasses.focus);
            }
            if (list.length <= 0) {
                this.l10nUpdate();
                $(listElement).addClass(comboBoxClasses.noData);
            }
            else {
                $(listElement).removeClass(comboBoxClasses.noData);
            }
            if (this.model.groupTemplate) {
                this.renderGroupTemplate(listElement);
            }
        };
        ejComboBox.prototype.renderGroupTemplate = function (listEle) {
            if (this.model.fields.groupBy !== null && this.model.dataSource || this.element[0].querySelector('.' + comboBoxClasses.group)) {
                var dataSource = this.model.dataSource;
                var grouping = {};
                var headerItems = listEle.querySelectorAll('.' + comboBoxClasses.group);
                dataSource = this.listGroupDataSource(dataSource, this.model.fields);
                for (var _i = 0, _a = listEle.querySelectorAll('.' + comboBoxClasses.group); _i < _a.length; _i++) {
                    var header = _a[_i];
                    grouping[this.model.fields.groupBy] = header.textContent;
                    header.innerHTML = '';
                    $(header).append(this.getTemplatedString(this.model.groupTemplate, grouping));
                }
            }
        };
        ejComboBox.prototype.getTemplatedString = function (template, list) {
            var str = template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1), field = content.replace("${", "").replace("}", "");
                str = str.replace(content, ej.getObject(field, list).toString());
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        };
        ejComboBox.prototype.listGroupDataSource = function (dataSource, fields) {
            var ds = new ej.DataManager(dataSource).executeLocal(new ej.Query().group(fields.groupBy));
            dataSource = [];
            for (var j = 0; j < ds["length"]; j++) {
                var itemObj = ds[j].items, grpItem = {};
                grpItem[fields.text] = ds[j].key;
                grpItem['isHeader'] = true;
                grpItem["items"] = itemObj;
                dataSource.push(grpItem);
                for (var k = 0; k < itemObj.length; k++)
                    dataSource.push(itemObj[k]);
            }
            return dataSource;
        };
        ejComboBox.prototype.updateLocalConstant = function () {
            this.localizedLabels = ej.getLocalizedConstants("ej.ComboBox", this.model.locale);
        };
        ejComboBox.prototype.getLocalizedLabels = function (property) {
            return this.localizedLabels[property] === undefined ? ej.ComboBox.Locale['en-US'][property] : this.localizedLabels[property];
        };
        ejComboBox.prototype.l10nUpdate = function (actionFailure) {
            this.updateLocalConstant();
            if (this.model.noRecordsTemplate !== 'No Records Found' || this.model.actionFailureTemplate !== 'The Request Failed') {
                var template = actionFailure ? this.model.actionFailureTemplate : this.model.noRecordsTemplate;
                this.list.innerHTML = template;
            }
            else {
                this.list.innerHTML = actionFailure ? this.getLocalizedLabels('actionFailureTemplate') : this.getLocalizedLabels('noRecordsTemplate');
            }
        };
        ejComboBox.prototype.getTextByValue = function (value) {
            var text;
            var dataSource = this.listData;
            var fields = this.getFields();
            if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
                for (var _i = 0, dataSource_3 = dataSource; _i < dataSource_3.length; _i++) {
                    var item = dataSource_3[_i];
                    if (item.toString() === value.toString()) {
                        text = item.toString();
                        break;
                    }
                }
            }
            else {
                dataSource.filter(function (item) {
                    if (!ej.isNullOrUndefined(item[fields.value]) && item[fields.value].toString() === value.toString()) {
                        text = item[fields.text];
                        return true;
                    }
                });
            }
            return text;
        };
        ejComboBox.prototype.getFields = function () {
            var textField = this.model.fields.text ? this.model.fields.text : 'text';
            var valueField = this.model.fields.value ? this.model.fields.value : textField;
            var tooltipField = this.model.fields.tooltip ? this.model.fields.tooltip : null;
            return { value: valueField.toString(), text: textField, tooltip: tooltipField };
        };
        ejComboBox.prototype.resetList = function (dataSource, fields, query) {
            if (this.list) {
                this.setListData(dataSource, fields, query);
            }
        };
        ejComboBox.prototype.setListData = function (dataSource, fields, query) {
            var _this = this;
            fields = fields ? fields : this.model.fields;
            var ulElement;
            this.isActive = true;
            if (dataSource instanceof ej.DataManager) {
                this.isRequested = true;
                this._trigger('actionBegin');
                dataSource.executeQuery(query ? query : this.model.query ? this.model.query : new ej.Query()).done(function (e) {
                    _this._trigger('actionComplete', e);
                    if (e.cancel) {
                        return;
                    }
                    var listItems = e["result"];
                    ulElement = _this.renderItems(listItems, fields);
                    _this.onActionComplete(ulElement, listItems, e);
                    _this.isRequested = false;
                    _this._trigger('dataBound', { items: listItems, e: e });
                }).fail(function (e) {
                    _this.isRequested = false;
                    _this.onActionFailure(e);
                });
            }
            else {
                var dataManager = new ej.DataManager(dataSource);
                var listItems = dataManager.executeLocal(query ? query : this.model.query ? this.model.query : new ej.Query());
                var localDataArgs = { cancel: false, result: listItems };
                this._trigger('actionComplete', localDataArgs);
                if (localDataArgs.cancel) {
                    return;
                }
                ulElement = this.renderItems(listItems, fields);
                this.onActionComplete(ulElement, listItems);
                this._trigger('dataBound', { items: listItems });
            }
        };
        ejComboBox.prototype.onActionFailure = function (e) {
            this.liCollections = [];
            this._trigger('actionFailure', e);
            this.l10nUpdate(true);
            $(this.list).addClass(comboBoxClasses.noData);
            this.renderPopup();
        };
        ejComboBox.prototype.renderItems = function (listData, fields) {
            var ulElement;
            var dataSource = listData;
            fields["value"] = !(ej.isNullOrUndefined(fields["value"])) ? fields["value"] : fields["text"];
            this.model.fields = fields;
            if (this.model.itemTemplate && listData) {
                if (dataSource && fields.groupBy) {
                    dataSource = this.listgroupDataSource(dataSource, fields);
                    $(this.list).addClass('e-combobox-group');
                }
                else if (dataSource && this.model.sortOrder !== 'None') {
                    dataSource = (new ej.DataManager(dataSource).executeLocal((this.model.sortOrder.toLowerCase() == 'descending') ? new ej.Query().sortByDesc(this.model.fields.text) : new ej.Query().sortBy(this.model.fields.text)));
                }
                if (this.model.fields.value && !fields.text) {
                    fields.text = fields.value;
                }
                else if (!fields.value && fields.text) {
                    fields.value = fields.text;
                }
                ulElement = this.listrenderContentTemplate(this.model.itemTemplate, dataSource, fields);
            }
            else {
                if (dataSource && this.model.sortOrder !== 'None')
                    listData = (new ej.DataManager(dataSource).executeLocal((this.model.sortOrder.toLowerCase() == 'descending') ? new ej.Query().sortByDesc(this.model.fields.text) : new ej.Query().sortBy(this.model.fields.text)));
                if (dataSource && fields.groupBy) {
                    listData = this.listGroupDataSource(dataSource, fields);
                    $(this.list).addClass('e-combobox-group');
                }
                ulElement = this.createListItems(listData, (fields.text !== null || fields.value !== null) ? {
                    fields: fields, showIcon: ej.isNullOrUndefined(fields.iconCss) ? false : true
                } : { fields: { value: 'text' } });
            }
            return ulElement;
        };
        ;
        ejComboBox.prototype.listgroupDataSource = function (dataSource, fields) {
            var ds = new ej.DataManager(dataSource).executeLocal(new ej.Query().group(fields.groupBy));
            dataSource = [];
            for (var j = 0; j < ds["length"]; j++) {
                var itemObj = ds[j].items, grpItem = {};
                grpItem[fields.text] = ds[j].key;
                grpItem['isHeader'] = true;
                grpItem["items"] = itemObj;
                dataSource.push(grpItem);
                for (var k = 0; k < itemObj.length; k++)
                    dataSource.push(itemObj[k]);
            }
            return dataSource;
        };
        ejComboBox.prototype.listrenderContentTemplate = function (template, dataSource, fields) {
            var ulElement = ej.buildTag('ul.' + comboBoxClasses.ul, "", {}, { role: 'presentation' })[0];
            var liCollection = [];
            for (var _i = 0, dataSource_4 = dataSource; _i < dataSource_4.length; _i++) {
                var item = dataSource_4[_i];
                var isHeader = item.isHeader;
                var li = ej.buildTag('li.' + ((isHeader) ? comboBoxClasses.group : comboBoxClasses.li), "", {}, { role: 'presentation' })[0];
                if (isHeader)
                    li.innerText = item[fields.text];
                else {
                    $(li).append(this.getTemplatedString(template, item));
                    var value = item[fields.value];
                    li.setAttribute('data-value', value);
                    li.setAttribute('role', 'option');
                    if (fields.tooltip)
                        li.setAttribute('title', item[fields.tooltip]);
                }
                liCollection.push(li);
            }
            $(ulElement).append(liCollection);
            return ulElement;
        };
        ejComboBox.prototype.createListItems = function (dataSource, options) {
            if (typeof dataSource[0] === 'string') {
                var subChild = [];
                for (var i = 0; i < dataSource.length; i++)
                    subChild.push(this.generateSingleLevelListItem(dataSource[i], dataSource[i]));
                return ej.buildTag('ul.' + comboBoxClasses.ul, "", {}, { role: 'presentation' }).append(subChild)[0];
            }
            else {
                var curOpt = $.extend({}, defaultListBaseOptions, options), fields = $.extend({}, defaultMappedFields, curOpt.fields), child = [];
                for (var i = 0; i < dataSource.length; i++) {
                    var curItem = dataSource[i], innerEle = [];
                    if (curOpt.showIcon)
                        innerEle.push(ej.buildTag('span.' + 'e-list-icon' + ' ' + curItem[fields.iconCss])[0]);
                    child.push(this.generateSingleLevelListItem(curItem[fields.text], curItem[fields.value], curItem[fields.tooltip], curOpt.itemClass, innerEle, (curItem.hasOwnProperty('isHeader') && curItem.isHeader) ? true : false));
                }
                return ej.buildTag('ul.' + comboBoxClasses.ul + ' ' + curOpt.listClass, "", {}, { role: 'presentation' }).append(child)[0];
            }
        };
        ejComboBox.prototype.generateSingleLevelListItem = function (text, value, tooltip, className, innerElements, grpLI) {
            var li = ej.buildTag('li.' + (grpLI === true ? comboBoxClasses.group : comboBoxClasses.li) + ' ' + className, "", { role: (grpLI === true ? 'group' : 'presentation') })[0];
            if (grpLI)
                li.innerText = text;
            else {
                li.setAttribute('data-value', value);
                li.setAttribute('role', 'option');
                if (tooltip)
                    li.setAttribute('title', tooltip);
                if (innerElements)
                    $(li).append(innerElements);
                li.appendChild(document.createTextNode(text));
            }
            return li;
        };
        ejComboBox.prototype.getDataByValue = function (value) {
            if (typeof this.listData[0] === 'string' || typeof this.listData[0] === 'number') {
                for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (item === value) {
                        return item;
                    }
                }
            }
            else {
                for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
                    var item = _c[_b];
                    if (item[this.model.fields.value ? this.model.fields.value : 'value'] === value) {
                        return item;
                    }
                }
            }
            return null;
        };
        ejComboBox.prototype.search = function (inputVal, items, searchType, ignoreCase) {
            var listItems = items;
            ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;
            var itemData = { item: null, index: null };
            if (inputVal.length) {
                var strLength = inputVal.length;
                var queryStr = ignoreCase ? inputVal.toLowerCase() : inputVal;
                for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {
                    var item = itemsData[i];
                    var text = (ignoreCase ? $(item).text().toLowerCase() : $(item).text()).replace(/^\s+|\s+$/g, '');
                    if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) {
                        itemData["item"] = item;
                        itemData["index"] = i;
                        return { item: item, index: i };
                    }
                }
                return itemData;
            }
            return itemData;
        };
        ejComboBox.prototype.setInputValue = function (value, element, clearButton) {
            if (!(ej.isNullOrUndefined(value)))
                element.value = value;
            if (!ej.isNullOrUndefined(clearButton) && clearButton) {
                var parentElement = $(element).parent()[0];
                var button = $(parentElement).find("." + comboBoxClasses.clearIcon)[0];
                if (element.value && parentElement.className.indexOf('e-input-focus') > -1) {
                    $(button).removeClass(comboBoxClasses.clearIconHide);
                }
                else {
                    $(button).addClass(comboBoxClasses.clearIconHide);
                }
            }
        };
        ejComboBox.prototype.addItem = function (items, itemIndex) {
            if (!this.list || this.list.textContent === this.model.noRecordsTemplate) {
                this.renderList();
            }
            var itemsCount = this.getItems().length;
            var selectedItemValue = this.list.querySelector('.' + comboBoxClasses.selected);
            items = (items instanceof Array ? items : [items]);
            var items1 = (items instanceof Array ? items : [items]);
            var itemsLength = items1.length;
            var index;
            index = (ej.isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1) ? itemsCount : itemIndex;
            var fields = this.getFields();
            var liCollections = [];
            for (var i = 0; i < itemsLength; i++) {
                var item = items[i];
                var li = ej.buildTag('li#option-add-' + i + "." + comboBoxClasses.li)[0];
                li.setAttribute('data-value', item[fields.value]);
                li.setAttribute('role', 'option');
                if (fields.tooltip)
                    li.setAttribute('title', item[fields.tooltip]);
                li.appendChild(document.createTextNode(item[fields.text]));
                liCollections.push(li);
                this.listData.push(item);
            }
            if (itemsCount === 0 && ej.isNullOrUndefined(this.list.querySelector('ul'))) {
                this.list.innerHTML = '';
                this.list.appendChild(this.ulElement);
                $(this.ulElement).append(liCollections);
            }
            else {
                for (var i = 0; i < itemsLength; i++) {
                    if (this.liCollections[index]) {
                        this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);
                    }
                    else {
                        this.ulElement.appendChild(liCollections[i]);
                    }
                    var tempLi = [].slice.call(this.liCollections);
                    tempLi.splice(index, 0, liCollections[i]);
                    this.liCollections = tempLi;
                    index += 1;
                }
            }
        };
        return ejComboBox;
    }(ej.WidgetBase));
    window.ej.widget("ejComboBox", "ej.ComboBox", new ejComboBox());
    window["ejComboBox"] = null;
})(jQuery);
ej.ComboBox.Locale = ej.ComboBox.Locale || {};
ej.ComboBox.Locale["default"] = ej.ComboBox.Locale["en-US"] = {
    noRecordsTemplate: 'No Records Found',
    actionFailureTemplate: 'The Request Failed'
};
var defaultMappedFields = {
    id: 'id',
    text: 'text',
    value: 'value',
    isChecked: 'isChecked',
    enabled: 'enabled',
    iconCss: 'icon',
    tooltip: null,
    htmlAttributes: null,
    imageAttributes: null,
    imageUrl: 'imageUrl',
    groupBy: null
};
var defaultListBaseOptions = {
    showIcon: false,
    fields: defaultMappedFields,
    listClass: '',
    itemClass: '',
    sortOrder: 'None',
    template: null,
    groupTemplate: null
};
;
var comboBoxClasses = {
    input: 'e-input-group',
    mobileFilter: 'e-ddl-device-filter',
    disable: 'e-disabled',
    hover: 'e-hover',
    selected: 'e-active',
    rtl: 'e-rtl',
    li: 'e-list-item',
    focus: 'e-item-focus',
    inputFocus: 'e-input-focus',
    icon: 'e-input-group-icon e-ddl-icon',
    iconAnimation: 'e-icon-anim',
    value: 'e-input-value',
    device: 'e-ddl-device',
    filterInput: 'e-input-filter',
    group: 'e-list-group-item',
    ul: 'e-list-parent e-ul',
    noData: 'e-nodata',
    fixedHead: 'e-fixed-head',
    clearIcon: 'e-clear-icon',
    clearIconHide: 'e-clear-icon-hide',
    popupFullScreen: 'e-popup-full-page',
    footer: 'e-ddl-footer',
    header: 'e-ddl-header',
    backIcon: 'e-input-group-icon e-back-icon e-icons',
    filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',
    filterParent: 'e-filter-parent',
    content: 'e-content',
};
var inputObject = {
    container: null,
    buttons: []
};;
/// <reference path="../../common/jquery.d.ts" />
/// <reference path="../../ej.web.all.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};

var ejDateRangePicker = (function (_super) {
    __extends(ejDateRangePicker, _super);
    function ejDateRangePicker(element, options) {
        _super.call(this);
        this._rootCSS = "e-daterangepicker";
        this._setFirst = false;
        this.PluginName = "ejDateRangePicker";
        this.id = "myDateRange";
        this._addToPersist = ["value"];
        this.type = "editor";
        this.angular = {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        };
        this._requiresID = true;
        this.model = null;
        this.validTags = ["input"];
        this.defaults = {
            height: "",
            width: "",
			isResponsive:false,
            value: "",
            cssClass: "",
            enabled: true,
            startDate: null,
            endDate: null,
            enableTimePicker: false,
            backwardSelection: false,
            minDate: new Date("01/01/1900"),
            maxDate: new Date("12/31/2099"),
            ranges: null,
            locale: "en-US",
            separator: "-",
            watermarkText: "Select Range",
            dateFormat: "",
            timeFormat: "",
            showPopupButton: true,
            showRoundedCorner: false,
            allowEdit: true,
            enablePersistence: false,
            create: null,
            change: null,
            beforeClose: null,
            beforeOpen: null,
            close: null,
            open: null,
            hover: null,
            click: null,
            clear: null,
            destroy: null,
			select: null,
			htmlAttributes: {},

        };
        this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
        this._prevValue = null;
        this._validState = null;
        ejDateRangePicker.prototype.observables = ["value"];
        if (element) {
            if (!element["jquery"]) {
                element = $("#" + element);
            }
            if (element.length) {
                return $(element).ejDateRangePicker().data(this.PluginName);
            }
        }
    }
    ejDateRangePicker.prototype.setModel = function (opt, forceSet) {
        this.setModel(opt, forceSet);
    };
    ejDateRangePicker.prototype.option = function (opt, forceSet) {
        this.option(opt, forceSet);
    };

    ejDateRangePicker.prototype._setModel = function (options) {
        var option;
        for (option in options) {
            switch (option) {
                case "allowEdit":
                    if (!options[option]) {
                        this.element.attr("readonly", "readonly");
                        this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
                        this.element.off("blur", $.proxy(this._onMainFocusOut, this));
                    }
                    break;
                case "startDate":
                    var status = this._validateValues(options[option], "left");
                    if (status == false)
                        options[option] = null;
                    else {
                        if (!this._startEndValidation() && this.model.endDate != null) {
                            this._resetValues();
                            this.model.endDate = null;
                        }
                        this._updateValues();
                        this._selectedStartDate = this.model.startDate;
                        options[option] = this.model.startDate;
                    }

                    break;
                case "endDate":
                    var status = this._validateValues(options[option], "right");
                    if (status == false)
                        options[option] = null;
                    else {
                        if (!this._startEndValidation()) {
                            this._rightDP.element.parents(".e-datewidget").addClass("e-val-error");
                            this.model.endDate = null;
                        }
                        this._updateValues();
                        options[option] = this.model.endDate;
                    }
                    break;
                case "minDate":
                    if (this._leftDP)
                        this._leftDP.option(option, options[option]);
                    if (this._rightDP)
                        this._rightDP.option(option, options[option]);
                    this._updateInput();
                    break;
                case "maxDate":
                    if (this._leftDP)
                        this._leftDP.option(option, options[option]);
                    if (this._rightDP)
                        this._rightDP.option(option, options[option]);
                    this._updateInput();
                    break;
                case "enableTimePicker":
                    this.model.enableTimePicker = options[option];
                    if (options[option]) {
                        this._renderTimePicker();
                    } else
                        this._removeTimePicker();
                    if (this._scrollerObj) {
                        this._scrollerObj.model.height = this.datePopup.height();
                        this._scrollerObj.refresh();
                    }
                    break;
                case "backwardSelection":
                    this.model.backwardSelection = options[option];
                    this._mainValue();
                    break;    
                case "locale":
                    this._setCulture(options[option]);
                    options[option] = this.model.locale;
                    break;
                case "separator":
                    this.model.separator = options[option];
                    this._mainValue();
                    break;
                case "dateFormat":
                    if (this._leftDP)
                        this._leftDP.option(option, options[option]);
                    if (this._rightDP)
                        this._rightDP.option(option, options[option]);
                    this.model.dateFormat = options[option];
                    this._getDateTimeFormat();
                    this._updateInput();
                    break;
                case "timeFormat":
                    if (this._leftTP)
                        this._leftTP.option(option, options[option]);
                    if (this._rightTP)
                        this._rightTP.option(option, options[option]);
                    this.model.timeFormat = options[option];
                    this._getDateTimeFormat();
                    this._updateInput();
                    break;
                case "watermarkText":
                    if (ej.isNullOrUndefined(this._options))
                        this._options = {};
                    this._options["watermarkText"] = this.model.watermarkText = options[option];
                    this._localizedLabels.watermarkText = this.model.watermarkText;
                    this._setWaterMark();
                    break;
                case "cssClass":
                    this._changeSkin(options[option]);
                    break;

                case "showRoundedCorner":
                    this._setRoundedCorner(options[option]);
                    break;
                case "showPopupButton":
                    this._renderDateIcon(options[option]);
                    break;

                case "value":
                    this.element.val(options[option]);
                    this._onMainFocusOut();
                    options[option] = this.model.value;
                    break;

                case "height":
                    this.wrapper.height(options[option]);
                    break;
                case "width":
                    this.wrapper.width(options[option]);
                    break;
                case "enabled":
                    if (options[option])
                        this.enable();
                    else
                        this.disable();
                    break;
                case "htmlAttributes":
                    this._addAttr(options[option]);
                    break;
            }
        }
    };
    ejDateRangePicker.prototype._init = function (options) {
        this._cloneElement = this.element.clone();
        this._options = options;
        this._flagevents = false;
        this._id = this.element.attr("id");
        this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
		if (!this._startEndValidation()) this.model.endDate = null;
        if (this.element.val() == "" && this.model.value) {
            this.element.val(this.model.value);
        }
		this._getDateTimeFormat();
        if (this.element.val()) {
            this._setInitValue();
            this._updateValues();
        }
		else if (this.model.startDate != null && this.model.endDate != null && this._startEndValidation()) 
		{
        this._updateValues();			
		this._mainValue();
		}
        this._createWrapper();
		this.renderpopup();
        this._setLocalizedText();
        if (this._validState == false && this.element.val())
            this.wrapper.addClass("e-error");
        this._popupOpen = false, this._isPopScroll = false;
        if (!this.model.enabled) this.disable();
        this._wireEvents();
        };
    ejDateRangePicker.prototype._setInitValue = function () {
        var datestring = this.element.val().split(this.model.separator), _startdate = ej.parseDate(datestring[0], this._dateTimeFormat, this.model.locale), _enddate = ej.parseDate(datestring[1], this._dateTimeFormat, this.model.locale);
        if (_startdate && _enddate) {
            this.model.startDate = _startdate;
            this.model.endDate = _enddate;
        }
        if (this.model.startDate < new Date(this.model.minDate) || this.model.startDate > new Date(this.model.maxDate)) this.model.startDate = new Date(this.model.minDate);
        if (this.model.endDate > new Date(this.model.maxDate) || this.model.endDate < new Date(this.model.minDate)) this.model.endDate = new Date(this.model.maxDate);
    };
    ejDateRangePicker.prototype._getNextMonth = function (current) {
        var local = current;
        if (!(local instanceof Date))
            return new Date();
        var month = local.getMonth();
        if (month == 11) {
            var year = local.getFullYear() + 1;
            month = -1;
        } else
        var year = local.getFullYear();
    var dummy = new Date();
    dummy = new Date(dummy.setFullYear(year));
    dummy = new Date(dummy.setDate(1));
    dummy = new Date(dummy.setMonth(month + 1));
    if (dummy > new Date(this.model.maxDate))
        dummy = new Date(dummy.setMonth(month));
    if (new Date(this.model.minDate).getFullYear() == new Date(this.model.maxDate).getFullYear()) {
        if (new Date(this.model.minDate).getMonth() == new Date(this.model.maxDate).getMonth())
            dummy = new Date(dummy.setDate(new Date(this.model.minDate).getDate()));
    }
    return dummy;
};
    ejDateRangePicker.prototype._getDateTimeFormat = function () {
        var pattern = ej.preferredCulture(this.model.locale).calendars.standard.patterns;
        if (!this.model.dateFormat) this.model.dateFormat = pattern.d;
        if (this.model.enableTimePicker) {
            if (!this.model.timeFormat) this.model.timeFormat = pattern.t;
            this._dateTimeFormat = this.model.dateFormat + " " + this.model.timeFormat;
        }
        else
            this._dateTimeFormat = this.model.dateFormat;
    };
    ejDateRangePicker.prototype._setValues = function () {
        this._leftDP.option("value", this.model.startDate);
        this._rightDP.option("value", this.model.endDate || null);
        if (this.model.startDate) this._setStartDate(this.model.startDate, $('.current-month[data-date="' + this.model.startDate.toDateString() + '"]'), true);
        if (this.model.endDate) this._setEndDate(this.model.endDate, $('.current-month[data-date="' + this.model.endDate.toDateString() + '"]'), true);
        this._rangeRefresh(this._setArgs(this._leftDP.popup));
        this._rangeRefresh(this._setArgs(this._rightDP.popup));
        this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
        if (this.model.enableTimePicker) {
            this._leftTP.option("value", this.model.startDate);
            this._rightTP.option("value", this.model.endDate);
        }
        this._updateRanges("left");
        this._updateRanges("right");
    };

    ejDateRangePicker.prototype._customSet = function () {
        this._selectedStartDate = this.model.startDate;
        this._selectedEndDate = this.model.endDate;
        this._resetValues();
        if (this.popup && this.datePopup) this._setValues();
        if (!this._popupOpen)
            this._mainValue();
        this._refreshMinMax();
        this._setWaterMark();
    };
    ejDateRangePicker.prototype._setCulture = function (culture) {
        culture = ej.preferredCulture(culture).name;
        this.model.locale = culture;
        this._setOption("locale", culture);
        this._localizedLabels = this._getLocalizedLabels();
        this._setLocalizedText();
        this._updateInput();
    };
    ejDateRangePicker.prototype._setRoundedCorner = function (boolean) {
        if (boolean) {
            this._input_innerWrapper.addClass("e-corner");
            if (this.popup) this.popup.addClass("e-corner");
        } else {
            this._input_innerWrapper.removeClass("e-corner");
            if (this.popup) this.popup.removeClass("e-corner");
        }
        this._setOption("showRoundedCorner", boolean);
    };
    ejDateRangePicker.prototype._renderDateIcon = function (boolean) {
        if (boolean) {
            this.dateRangeIcon = ej.buildTag("span.e-select#" + this.id + "-img", "", {}, (this._isIE8) ? { 'unselectable': 'on' } : {}).append(ej.buildTag("span.e-icon e-calendar", "", {}, { 'aria-label': 'Select' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})).insertAfter(this.element);
            this._input_innerWrapper.addClass('e-padding');
            this._on(this.dateRangeIcon, "mousedown", this._showDatePopUp);
            this._off(this.dateRangeIcon, "click", this._showDatePopUp);

        }
        else {
            if (this.dateRangeIcon) {
                this.dateRangeIcon.remove();
            }
            this._input_innerWrapper.removeClass('e-padding');
            this._off(this.dateRangeIcon, "click", this._showDatePopUp);
        }
    },
	ejDateRangePicker.prototype._validateValues = function (val, cal_type) {
	    var obj = cal_type == "right" ? this._rightDP : this._leftDP;
	    var datavalu = val;
	    if (datavalu != null && typeof datavalu == "string") {
	        if (cal_type == "left") {
	            this.model.startDate = ej.parseDate(val, this.model.dateFormat, this.model.locale) || null;
	            this.model.startDate = (this.model.startDate != null) ? this.model.startDate : new Date(datavalu);
	        }
	        else {
	            this.model.endDate = ej.parseDate(val, this.model.dateFormat, this.model.locale) || null;
	            this.model.endDate = (this.model.endDate != null) ? this.model.endDate : new Date(datavalu);
	        }
	    } else {
	        if (val instanceof Date) {
	            if (cal_type == "left") {
	                this.model.startDate = val;
	                if (!isNaN(val.getDate())) {
	                    if (typeof this._formatter(this.model.startDate, this.model.locale) != "string")
	                        this.model.startDate = ej.parseDate(this._formatter(this.model.startDate, this.model.locale), this.model.dateFormat);
	                } else
	                    return false;
	            } else if (cal_type == "right") {
	                this.model.endDate = val;
	                if (!isNaN(val.getDate())) {
	                    if (typeof this._formatter(this.model.endDate, this.model.locale) != "string")
	                        this.model.endDate = ej.parseDate(this._formatter(this.model.endDate, this.model.locale), this.model.dateFormat);
	                } else
	                    return false;
	            }
	        } else
	            return false;
	    }
	    return true;
	};
    //Date formatter - Convert date object to specific date format
    ejDateRangePicker.prototype._formatter = function (date, format) {
        var newFormat = this._checkFormat(format);
        return ej.format(date, newFormat, this.model.locale);
    };

    ejDateRangePicker.prototype._checkFormat = function (format) {
        var proxy = this;
        var dateFormatRegExp = this._regExp();
        return format.replace(dateFormatRegExp, function (match) {
            match = match === "/" ? ej.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
            return match;
        });
    };
    ejDateRangePicker.prototype._regExp = function () {
        return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
    };

    ejDateRangePicker.prototype._setArgs = function (element) {
        var date = new Date($(element.find(".current-month")[0]).attr("data-date"));
        this.args = {};
        this.args.element = element;
        this.args.month = date.getMonth();
        this.args.year = date.getFullYear();
        return this.args;
    };
    ejDateRangePicker.prototype._changeSkin = function (skin) {
        this.wrapper.removeClass(this.model.cssClass).addClass(skin);
        this.popup.removeClass(this.model.cssClass).addClass(skin);

        this._setOption("cssClass", skin);
    };

    ejDateRangePicker.prototype._renderDatePicker = function () {
        this.calendar_left = ej.buildTag("input.leftDate_wrapper#" + this.element[0].id + "leftDate_wrapper", "", {}, { "type": "text" });
        this._leftDiv.append(this.calendar_left);
        this.calendar_right = ej.buildTag("input.rightDate_wrapper#" + this.element[0].id + "rightDate_wrapper", "", {}, { "type": "text" });
        this._rightDiv.append(this.calendar_right);
        var proxy = this;
        var DPSettings = {
            displayInline: true,
            showFooter: false,
            watermarkText: "",
            enableStrictMode: true,
            locale: this.model.locale,
            dateFormat: this.model.dateFormat,
            _month_Loaded: function (e) {
                proxy._previousNextHandler(e);
            },
            enablePersistence: this.model.enablePersistence,
            minDate: this.model.minDate,
            maxDate: this.model.maxDate,
        }
        this.calendar_left.ejDatePicker(DPSettings);
        this.calendar_left.ejDatePicker("option", "layoutChange", function (e) {
            proxy._refreshEvents("left");
            proxy._updateRanges("left");
            if (!proxy.popup.hasClass("e-daterange-responsive")) {
                if (proxy._scrollerObj) {
                    proxy._scrollerObj.model.height = proxy.datePopup.height();
                    proxy._scrollerObj.refresh();
                }
            }
        })
        this._leftDP = this.calendar_left.data("ejDatePicker");
        this._leftDP.option("showPopupButton", false);
        this._leftDP._getInternalEvents = true, this._leftDP._DRPdisableFade = true;
        this._leftDP.popup.css({ "position": "static", "visibility": "inherit" });
        this.calendar_right.ejDatePicker(DPSettings);
        this.calendar_right.ejDatePicker("option", "layoutChange", function (e) {
            proxy._refreshEvents("right");
            proxy._updateRanges("right");
            if (!proxy.popup.hasClass("e-daterange-responsive")) {
                if (proxy._scrollerObj) {
                    proxy._scrollerObj.model.height = proxy.datePopup.height();
                    proxy._scrollerObj.refresh();
                }
            }
        })
        this._rightDP = this.calendar_right.data("ejDatePicker");
        this._rightDP.option("showPopupButton", false);
        this._rightDP._getInternalEvents = true, this._rightDP._DRPdisableFade = true; // to get the layout change client side event
        this._rightDP.popup.css({ "position": "static", "visibility": "inherit" });
        this._on($(this._leftDP.sfCalendar.find('table .e-datepicker-months td')), "click", $.proxy(this._previousNextHandler, this));
        this._on(this._leftDP.element, "keydown", this._onKeyDown);
        this._on(this._rightDP.element, "keydown", this._onKeyDown);
    };

    ejDateRangePicker.prototype._renderPopup = function () {
		if (!this.popup) {
			this.popup = ej.buildTag("div.e-daterangepicker-popup e-popup e-widget e-box" + this.model.cssClass + "#" + this.element[0].id + "_popup").css("display", "none");
			$('body').append(this.popup);
		}
        this.datePopup = ej.buildTag("div.e-datepickers-popup");
        this.popup.append(this.datePopup);
        this._leftDiv = ej.buildTag("div.e-left-datepicker");
        this._rightDiv = ej.buildTag("div.e-right-datepicker");
        this.datePopup.append(this._leftDiv);
        this.datePopup.append(this._rightDiv);
        this._renderDatePicker();
        if (this.model.ranges && !this._customRangePicker)
            this._renderRanges();
        if (this.model.enableTimePicker)
            this._renderTimePicker();
        this._renderButton();
        this._bindDateButton();
        this._refreshEvents("left");
        this._refreshEvents("right");
        this._updateRanges("left");
        this._updateRanges("right");
        this._setRoundedCorner(this.model.showRoundedCorner);
        this._addAttr(this.model.htmlAttributes);
        this._on(this.popup.find(".leftDate_wrapper.e-datepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this._on(this.popup.find(".rightDate_wrapper.e-datepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this._on(this.popup.find(".leftDate_wrapper.e-timepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this._on(this.popup.find(".rightDate_wrapper.e-timepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this.popup.on("mouseenter touchstart", $.proxy(function () { this._isPopScroll = true; }, this));
        this.popup.on("mouseleave touchend", $.proxy(function () { this._isPopScroll = false; }, this));
        this._on($(window), "resize", this._resizePopup);
		this._wirePopupEvents();
    };

    ejDateRangePicker.prototype._createWrapper = function () {
        this._localizedLabels = this._getLocalizedLabels();
        this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'tabindex': '0', 'role':'combobox', 'aria-expanded':'false', 'name' : this.element.attr('name') == undefined ? this._id : this.element.attr('name') }); 
        this.wrapper = ej.buildTag("span.e-daterangewidget e-widget " + this.model.cssClass);
        if (!ej.isTouchDevice())
            this.wrapper.addClass('e-ntouch');
        this._input_innerWrapper = ej.buildTag("span.e-in-wrap e-box");
        this.wrapper.append(this._input_innerWrapper).insertBefore(this.element);
        this._input_innerWrapper.append(this.element);
        this._input_innerWrapper.addClass('e-padding');

        var proxy = this;
        this.culture = ej.preferredCulture(this.model.locale);
        this._setRoundedCorner(this.model.showRoundedCorner);
        this._renderDateIcon(this.model.showPopupButton);
        if (!this._isSupport) {
            this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
            this._hiddenInput.val(this._localizedLabels.watermarkText);
            this._hiddenInput.css("display", "block");
            var proxy = this;
            $(this._hiddenInput).focus(function () {
                proxy.element.focus();
            });
        }
        if (this.wrapper) {
            if (this.model.width) this.wrapper.width(this.model.width);
            if (this.model.height) this.wrapper.height(this.model.height);
        }
        this._setWaterMark();
    };
    ejDateRangePicker.prototype._updateOnRender = function (e) {
        if (this.model.enableTimePicker) {
            if (this._rightTime) {
                this._rightTP = this._rightTime.ejTimePicker("instance");
                this._updateValues();
            }
        } else {
            if (this.calendar_right) {
                this._rightDP = this.calendar_right.ejDatePicker("instance");
                this._updateValues();
            }
        }
    };
    ejDateRangePicker.prototype._updateRangesList = function () {
        $(".e-dateranges-ul").find(".rangeItem.e-active").removeClass("e-active");
        $(".e-dateranges-ul").find(".rangeItem.e-custompic").addClass("e-active");
    }
    ejDateRangePicker.prototype._updateValues = function () {
        this._updateRangesList();
        this._getDateTimeFormat();
        if (this._startEndValidation() || (this.model.startDate != null && this.model.endDate != null)) {
            this._validateValues(this.model.startDate, "left");
            this._validateValues(this.model.endDate, "right");
            if (this.popup && this.datePopup) this._setValues();
            this._mainValue();
        } else {
            this._clearRanges();
            this.element.val("");
        }
        this._refreshMinMax();
        this._setWaterMark();
    };
    ejDateRangePicker.prototype._startEndValidation = function () {
        if (this.model.startDate && this.model.endDate) {
            var start = this.model.startDate, end = this.model.endDate;
            return !(end && start > end);
        }
        return false;
    };
    ejDateRangePicker.prototype._addAttr=function (htmlAttr) {
        var proxy = this;
        $.map(htmlAttr, function (value, key) {
            var keyName = key.toLowerCase();
            if (keyName == "class") proxy.wrapper.addClass(value);
            else if (keyName == "disabled") proxy.disable();
            else if (keyName == "readOnly") proxy.model.readOnly = true;
            else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
            else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
            else proxy.wrapper.attr(key, value);

        });
    },
    ejDateRangePicker.prototype._renderButton = function () {
        this._buttonDiv = ej.buildTag("div.e-drpbuttons");
        var _reset = ej.buildTag("div.e-drp-button e-drp-reset e-btn e-select e-flat").attr({ 'tabindex': '0' });
        var _apply = ej.buildTag("div.e-drp-button e-drp-apply e-disable e-btn e-select e-flat").attr({ 'tabindex': '0' });
        var _cancel = ej.buildTag("div.e-drp-button e-drp-cancel e-btn e-select e-flat").attr({ 'tabindex': '0' });
        this._buttonDiv.append(_reset);
        this._buttonDiv.append(_apply);
        this._buttonDiv.append(_cancel);
        this.popup.append(this._buttonDiv);
        this._setLocalizedText();
        this._on($(this._buttonDiv.find("div.e-drp-reset")), "click", this.clearRanges);
        var $this = this;
        this._on($(this._buttonDiv.find("div.e-drp-apply")), "click", function (e) {
            if ($this._buttonDiv.find(".e-drp-apply").hasClass("e-disable")) {
                return;
            }
            $this._isPopScroll = false;
            $this._updateInput();
            $this._showhidePopup();
            $this._buttonDiv.find(".e-drp-apply").addClass("e-disable");
            this._trigger("change", { value: this.model.value, startDate: this.model.startDate, endDate: this.model.endDate });
            this._trigger("select", { startDate: this.model.startDate, endDate: this.model.endDate, value: this.model.value });
        });
        this._on($(this._buttonDiv.find("div.e-drp-cancel")), "click", this._cancelButton);
    };
    ejDateRangePicker.prototype._setLocalizedText = function () {
        if (!ej.isNullOrUndefined(this._options)) {
            if (!ej.isNullOrUndefined(this._options.buttonText))
                $.extend(this._localizedLabels.ButtonText, this._options.buttonText);
            if (!ej.isNullOrUndefined(this._options.watermarkText))
                this._localizedLabels.watermarkText = this._options.watermarkText;
        }
        this.model.buttonText = this._localizedLabels.ButtonText;
        if(this._buttonDiv){
        $(this._buttonDiv.find("div.e-drp-reset")).text(this.model.buttonText.reset);
        $(this._buttonDiv.find("div.e-drp-apply")).text(this.model.buttonText.apply);
        $(this._buttonDiv.find("div.e-drp-cancel")).text(this.model.buttonText.cancel);
        }
        if (this._customRangePicker && this._customRangePicker.find("ul li.e-custompic").length > 0)
            (this._customRangePicker.find("ul li.e-custompic")).text(this._localizedLabels.customPicker);
        this._setWaterMark();
    };

    ejDateRangePicker.prototype._renderRanges = function () {
        this._renderRangesWrapper();
        this.popup.append(this._customRangePicker);
        this._ranges_li = "";
        var proxy = this;
        if (this.model.ranges) {
            for (var i = 0; i < this.model.ranges.length; i++) {
                var s = this.model.ranges[i];
                var value = s.range;
                if (value.length === 2) {
                    var start = new Date(value[0]);
                    var end = new Date(value[1]);
                    if (ej.isNullOrUndefined(start))
                        start = new Date(value[0]);
                    if (ej.isNullOrUndefined(end))
                        end = new Date(value[1]);
                    if (start <= end) {
                        proxy._ranges_li += "<li role='menuitem' title='" + s.label + "' class='rangeItem' data-e-range='" + JSON.stringify(value) + "' data-e-value='" + s.range + "'>" + s.label + "</li>";
                    }
                }
            }
        }
        this._ranges_li += "<li role='menuitem' class='rangeItem e-active e-custompic' data-e-range='customPicker'>" + this._localizedLabels.customPicker + "</li>";
        this.popup.find("div.e-custom-dateranges ul").append(this._ranges_li);
        this._on(this._customRangePicker.find("ul li.rangeItem"), "click", this._customSelection);
        this._customRangePicker.ejScroller({ height: this.datePopup ? this.datePopup.height() : 200, width: 0, scrollerSize: 15 });
        proxy._scrollerObj = this._customRangePicker.ejScroller("instance");
    };
    ejDateRangePicker.prototype._removeTimePicker = function () {
        this._leftDiv.removeClass("e-left-timepicker");
        this._rightDiv.removeClass("e-right-timepicker");
        this._leftTP.destroy();
        this._rightTP.destroy();
        this._rightTP = null;
        this._leftTP = null;
        this._leftTime.remove();
        this._rightTime.remove();
        this._setOption("width", "");
        this._setOption("width", "100%");
        this._updateValues();
    };
    ejDateRangePicker.prototype._setOption = function (option, value) {
        if (this._leftDP)
            this._leftDP.option(option, value);
        if (this._rightDP)
            this._rightDP.option(option, value);
        if (this.model.enableTimePicker) {
            if (this._leftTP)
                this._leftTP.option(option, value);
            if (this._rightTP)
                this._rightTP.option(option, value);
        }
    };
    ejDateRangePicker.prototype._renderTimePicker = function () {
        if (this.model.timeFormat == '')
            this.model.timeFormat = this.culture.calendar.patterns.t;
        this._leftTime = ej.buildTag("input.leftTime#" + this._id + "_lTime");
        this._leftDiv.append(this._leftTime);
        this._leftDiv.addClass("e-left-timepicker");
        var proxy = this;
        var TPSettings = {
            popupWidth: "115px",
            locale: this.model.locale,
            timeFormat: this.model.timeFormat,
			watermarkText:"",
            open: function () {
                this.popup.addClass("e-daterange-timepopup");
                this.model.open = null;
            }
        }
        this._leftTime.ejTimePicker(TPSettings);
        this._leftTime.ejTimePicker({
            "select": function(e) {
                if (proxy._selectedStartDate) {
                    proxy.model.startDate = proxy._selectedStartDate = new Date(proxy._selectedStartDate.toDateString() + " " + e.value);
                    return;
                }
                proxy._selectedEndDate = null;
                proxy._leftDP.option("value", proxy._selectedStartDate ||
                    ((+new Date(new Date().setHours(0, 0, 0, 0)) >= +proxy.model.minDate && +new Date(new Date().setHours(0, 0, 0, 0)) <= +proxy.model.maxDate) ? new Date(new Date().setHours(0, 0, 0, 0)) : proxy.model.minDate));
                proxy._selectedStartDate = proxy.model.startDate = proxy._selectedStartDate || ((+new Date(new Date().setHours(0, 0, 0, 0)) >= +proxy.model.minDate && +new Date(new Date().setHours(0, 0, 0, 0)) <= +proxy.model.maxDate) ? new Date(new Date().setHours(0, 0, 0, 0)) : proxy.model.minDate)
                if (proxy._selectedStartDate) proxy._setStartDate(proxy.model.startDate, $('.current-month[data-date="' + proxy.model.startDate.toDateString() + '"]'), true);
                proxy._rangeRefresh(proxy._setArgs(proxy._leftDP.popup));
                if (proxy.model.startDate && proxy.model.endDate) {
                    proxy._updateRanges("left");
                    if (proxy._rightTP && proxy.model.startDate.toLocaleDateString() == proxy.model.endDate.toLocaleDateString())                
                    proxy._buttonDiv.find(".e-drp-apply").removeClass("e-disable");
                }

            }
        })
        this._leftTP = this._leftTime.ejTimePicker("instance");
        this._rightTime = ej.buildTag("input.rightTime#" + this._id + "_rTime");
        this._rightDiv.append(this._rightTime);
        this._rightDiv.addClass("e-right-timepicker");
        this._rightTime.ejTimePicker(TPSettings);
        this._rightTime.ejTimePicker({
            "select": function (e) {
                if (proxy._selectedEndDate) {
                    proxy.model.endDate = proxy._selectedEndDate = new Date(proxy._selectedEndDate.toDateString() + " " + e.value);
                    proxy._buttonDiv.find(".e-drp-apply").removeClass("e-disable");
                    return;
                }
                var tempDateVal = new Date(new Date().toDateString() + " " + this.model.value);
                proxy._rightDP.option("value", proxy._selectedEndDate ||
                    ((+new Date(tempDateVal) >= +proxy.model.minDate && +new Date(new Date(tempDateVal)) <= +proxy.model.maxDate) ? new Date(new Date(tempDateVal)) : proxy.model.minDate));
                proxy._selectedEndDate = proxy.model.endDate = proxy._selectedEndDate || ((+new Date(new Date(tempDateVal)) >= +proxy.model.minDate && +new Date(new Date(tempDateVal)) <= +proxy.model.maxDate) ? new Date(new Date(tempDateVal)) : proxy.model.minDate)
                var cal_type = ($($('.current-month[data-date="' + proxy.model.endDate.toDateString() + '"]')).parents(".e-left-datepicker").length > 0) ? "left" : "right";
                var currentDate = proxy._selectedEndDate;
                var dateString = proxy.model.endDate.toDateString();
                if ((proxy._selectedEndDate >= proxy._selectedStartDate)) {
                    proxy._setEndDate(proxy.model.endDate, $('.current-month[data-date="' + proxy.model.endDate.toDateString() + '"]'), true);
                } else if ((currentDate < proxy._selectedStartDate && proxy.model.backwardSelection)) {
                    var minDate = currentDate;
                    var dateString = $($('.current-month[data-date="' + proxy.model.endDate.toDateString() + '"]')).attr("data-date");
                    proxy._updateDP(proxy, new Date(currentDate), "rightDP");
                    proxy._rightDP._stopRefresh = false;
                    proxy._rightDP.element.parents(".e-datewidget").removeClass("e-error");
                    var endElement = $(proxy.datePopup.find('.current-month[data-date="' + dateString + '"]'));
                    proxy._selectedStartDate = proxy.model.startDate;
                    proxy._selectedEndDate = new Date(currentDate);
                    proxy._setEndDate(proxy._selectedEndDate, endElement, true);
                    proxy._startDate.date = proxy._selectedStartDate;
                    if (cal_type == "left") {
                        proxy.model.startDate = proxy._selectedEndDate;
                        proxy.model.endDate = proxy._selectedStartDate;
                        proxy._updateDP(proxy, proxy._selectedStartDate, "rightDP");
                        proxy._updateDP(proxy, proxy._selectedEndDate, "leftDP");
                    }
                    else if (cal_type == "right") {
                        proxy._updateDP(proxy,  proxy.model.endDate, "leftDP");
                        proxy._updateDP(proxy,  proxy.model.startDate, "rightDP");
                    }
                }
                else {
                    proxy._selectedStartDate = currentDate;
                    proxy._selectedEndDate = null;
                    if (proxy._endDate)
                        proxy._endDate.date = null;
                    proxy.popup.find(".in-range").removeClass("in-range");
                    proxy._leftDP.option("value", proxy._selectedStartDate ||
                        ((+new Date(new Date(tempDateVal)) >= +proxy.model.minDate && +new Date(new Date(tempDateVal)) <= +proxy.model.maxDate) ? new Date(new Date(tempDateVal)) : proxy.model.minDate));
                    proxy._leftTP.option("value", ej.format(proxy._selectedStartDate, proxy.model.timeFormat, proxy.model.locale));
                    if (cal_type == "right") {
                        proxy._updateDP(proxy, proxy._selectedStartDate, "leftDP");
                    }
                    proxy._updateDP(proxy, null, "rightDP");
                    proxy._setStartDate(proxy._selectedStartDate, $('.current-month[data-date="' + proxy.model.endDate.toDateString() + '"]'), true);
                }
                proxy._updateRanges("left");
                proxy._updateRanges("right");
                if (proxy.model.startDate && proxy.model.endDate) {
                    proxy._updateRanges("left");
                    proxy._buttonDiv.find(".e-drp-apply").removeClass("e-disable");
                }
            }
        })
        this._rightTP = this._rightTime.ejTimePicker("instance");
        this._on(this._leftTP.element, "keydown", this._onKeyDown);
        this._on(this._rightTP.element, "keydown", this._onKeyDown);
        //below code for position the timepicker and datepicker
        this._setTimePickerPos();
    };
    ejDateRangePicker.prototype._updateDP = function (obj, value, element) {
        var proxy = obj;
        var dpElement;
        if (element === "rightDP") {
            dpElement = proxy._rightDP;
            dpElement.option("value", value);
            dpElement.element.val(ej.format(value, proxy.model.dateFormat, proxy.model.locale));
            proxy._rightTP.option("value", ej.format(value, proxy.model.timeFormat, proxy.model.locale));
        } else {
            dpElement = proxy._leftDP;
            dpElement.option("value", value);
            dpElement.element.val(ej.format(value, proxy.model.dateFormat, proxy.model.locale));
            proxy._leftTP.option("value", ej.format(value, proxy.model.timeFormat, proxy.model.locale));
        }

    };
    ejDateRangePicker.prototype._setTimePickerPos = function () {
        $("#" + this._id + "_lTime_timewidget").css({
            position: "absolute",
            top: 0,
            left: this._leftDP.popup.width() + this._leftDP.popup.position().left - this.popup.find($("#" + this._id + "_lTime_timewidget")).outerWidth()
        });
        $("#" + this._id + "_rTime_timewidget").css({
            position: "absolute",
            top: !this.popup.hasClass("e-daterange-responsive") ? 0 : this._rightDP.wrapper.position().top,
            left: this._rightDP.popup.width() + this._rightDP.popup.position().left - this.popup.find($("#" + this._id + "_rTime_timewidget")).outerWidth()
        });
    };
    ejDateRangePicker.prototype._updateInput = function (e) {
        if (!(this.model.startDate && this.model.endDate)) {
            if (this.model.value)
                this.element.val(this.model.value);
            if (this._popupOpen)
                this.popupHide();
            return;
        }
        this._resetValues();
        this.wrapper.removeClass("e-error");
        this._mainValue();
        this._refreshMinMax();
    };
    ejDateRangePicker.prototype._removeWatermark = function () {
        if (this.element.val() != "" && !this._isSupport)
            this._hiddenInput.css("display", "none");
    };
    ejDateRangePicker.prototype._mainValue = function () {
        if (this.model.startDate < new Date(this.model.minDate) || this.model.startDate > new Date(this.model.maxDate)) this.model.startDate = new Date(this.model.minDate);
        if (this.model.endDate > new Date(this.model.maxDate) || this.model.endDate < new Date(this.model.minDate))
            this.model.endDate = new Date(this.model.maxDate);
        var startDt = this.model.startDate, endDt = this.model.endDate;
        if (startDt > endDt && endDt != null && this.model.backwardSelection) {
             var lefttime = ej.format(endDt, this.model.timeFormat, this.model.locale), righttime = ej.format(startDt, this.model.timeFormat, this.model.locale);
             var _startDateString = ej.format(endDt, this.model.dateFormat, this.model.locale);
             var _endDateString = ej.format(startDt, this.model.dateFormat, this.model.locale);
        } else {
        var lefttime = ej.format(startDt, this.model.timeFormat, this.model.locale), righttime = ej.format(endDt, this.model.timeFormat, this.model.locale);
        var _startDateString = ej.format(startDt, this.model.dateFormat, this.model.locale);
        var _endDateString = ej.format(endDt, this.model.dateFormat, this.model.locale);
        }
        if (this.model.enableTimePicker) {
			if (this.popup && this.datePopup && this._leftTP && this._rightTP && this._leftTP.model.value && this._rightTP.model.value) {
				lefttime = this._leftTP.model.value;
				righttime = this._rightTP.model.value;
			}
			_startDateString = ej.format(_startDateString + " " + lefttime, this._dateTimeFormat, this.model.locale);
			_endDateString = ej.format(_endDateString + " " + righttime, this._dateTimeFormat, this.model.locale);
			this.model.startDate = ej.parseDate(_startDateString, this._dateTimeFormat, this.model.locale);
			this.model.endDate = ej.parseDate(_endDateString, this._dateTimeFormat, this.model.locale);
            }
		else {
			if (this.popup && this.datePopup) {
			this.model.startDate = ej.parseDate(_startDateString, this._leftDP.model.dateFormat, this.model.locale);
			this.model.endDate = ej.parseDate(_endDateString, this._rightDP.model.dateFormat, this.model.locale);
			}
		}
        if (_startDateString != null && _endDateString != null) {
            this.model.value = _startDateString + " " + this.model.separator + " " + _endDateString;
            this.element.val(this.model.value);
            if (this._hiddenInput)
                this._hiddenInput.attr('value', this.model.value);
            this._removeWatermark();
            this._validState = true;
        } else {
            this.model.value = null;
            this._setWaterMark();
            this._validState = false;
        }
        this._prevValue = this.model.value;
        if (this._buttonDiv)
            this._buttonDiv.find(".e-drp-apply").addClass("e-disable");
        this._trigger("_change", { value: this.model.value });
    };
    ejDateRangePicker.prototype._bindDateButton = function () {
        if (this.dateRangeicon)
            this._on(this.dateRangeIcon, "click", this._showDatePopUp);
        if (!this.model.allowEdit) {
            this.element.attr("readonly", "readonly");
            this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
            this.element.off("blur", $.proxy(this._onMainFocusOut, this));
        }
        if (this.model.allowEdit) {
            this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
        }
    };

    ejDateRangePicker.prototype._showDatePopUp = function (e) {
        if (!this.model.enabled)
            return false;
        var isRightClick = false;
        if (e.button)
            isRightClick = (e.button == 2);
        else if (e.which)
            isRightClick = (e.which == 3); //for Opera
        if (isRightClick)
            return;
        this._showhidePopup(e);
    };
    ejDateRangePicker.prototype._showhidePopup = function (e) {
        if (this._popupOpen) {
            if (!this._isFocused && this.element.is(':input') && (!ej.isTouchDevice())) {
                this.wrapper.addClass('e-focus');
            }
            this.popupHide(e);
        } else {
            if (!this._isFocused && this.element.is(':input') && (!ej.isTouchDevice())) {
                this.wrapper.addClass('e-focus');
            }
            this.popupShow(e);
        }
    };
    ejDateRangePicker.prototype.popupHide = function (e) {
	   if ( e && (e.type == "touchmove" || e.type== "scroll")) {
		   if ($(e.target).parents("#"+this.popup[0].id).length > 0)
			   return;
	   }
        if (!this._popupOpen || this._isPopScroll) return false;
        var proxy = this;
        if (this._trigger("beforeClose", { element: this.popup, events: e })) return false;
        this.popup.attr({ 'aria-hidden': 'true' });
		this.element.attr({'aria-expanded':'false'})
        if (this._leftTP && !this._leftTP._popupOpen)
            this._leftTP.hide();
        if (this._rightTP && !this._rightTP._popupOpen)
            this._rightTP.hide();
        this.popup.css("visibility", "visible").slideUp(100, function () {
            proxy._popupOpen = false;
        });
        this._off(ej.getScrollableParents(this.wrapper), "scroll", this.popupHide);
        this._off(ej.getScrollableParents(this.wrapper), "touchmove", this.popupHide);
        this._trigger("close", { element: this.popup, events: e });
        this.wrapper.removeClass("e-active");
    };

    ejDateRangePicker.prototype.renderpopup = function (e) {
        if (!this.popup) {
			this.popup = ej.buildTag("div.e-daterangepicker-popup e-popup e-widget e-box" + this.model.cssClass + "#" + this.element[0].id + "_popup").css("display", "none");
			$('body').append(this.popup);
			if (this.model.isResponsive) {
				if (this.model.ranges) {
					if (this.model.ranges) this._renderRanges();
					if (this._customRangePicker) this._customRangePicker.addClass("e-responsive");
					this._showRangesOnly = true;
				}
				else if (!this.model.ranges) {
					this._renderPopup();
					this._onMainFocusOut();
					this._showRangesOnly = false;
				}
			}
			else {
				this._renderPopup();
				this._onMainFocusOut();
				this._showRangesOnly = false;
			}
		}
		else if (this.model.isResponsive && this._customRangePicker && this.datePopup) {
			this.datePopup.hide();
			this._buttonDiv.hide();
			this._customRangePicker.show().addClass("e-responsive");
			this._showRangesOnly = true;
		}
		if (typeof (this.model.value) === "string" && !ej.isNullOrUndefined(this.model.value) && !this._notapplied) this._updateValues();
        else if (typeof (this.model.value) === "object" && this.model.value == null && !this._notapplied) this._updateValues();
	};
	ejDateRangePicker.prototype.popupShow = function (e) {
        if (!this.model.enabled)
            return false;
        if (this._popupOpen)
            return false;
        var proxy = this;
        if (this._trigger("beforeOpen", { element: this.popup, events: e })) return false;
        this.wrapper.addClass('e-focus');
        this.popup.attr({ 'aria-hidden': 'false' });
		this.element.attr({'aria-expanded':'true'})
        proxy._popupOpen = true;
        this.popup.css({ 'visibility': 'hidden', 'display': 'block' });
        this._resizePopup();
        this.popup.css({ 'display': 'none', 'visibility': 'visible' }).slideDown(100, function () {
        });
        this._on(ej.getScrollableParents(this.wrapper), "scroll", this.popupHide);
        this._on(ej.getScrollableParents(this.wrapper), "touchmove", this.popupHide);
        this._trigger("open", { element: this.popup, events: e });
        this.wrapper.addClass("e-active");
    };
    ejDateRangePicker.prototype._resizePopup = function () {
        var proxy = this, range_width = 0, ran_height = 0, cal_width = 300, cal_height= 200 ;
		if (!this._showRangesOnly && this.datePopup) {
        cal_width = this.datePopup.find(".e-popup.e-calendar").outerWidth();
        cal_height = this.datePopup.find(".e-popup.e-calendar").height();
		}
        if (this._customRangePicker && this._customRangePicker.height() <= 0)
            this._customRangePicker.height(!this._showRangesOnly ? this.datePopup.height() : 200);
        if (this.model.ranges && this.model.ranges.length > 0)
            var ran_height = this._customRangePicker.find("ul").height(), range_width = proxy._customRangePicker.outerWidth();
        if ($(window).width() - this.wrapper.position().left < ((cal_width * 2) + range_width) + 25) {
            proxy.popup.addClass("e-daterange-responsive");
			if (this.model.isResponsive) {
				this._isMobile = true;
				this._resetValues();
			}
            proxy._setOption("width", "95%");
            if (this.model.enableTimePicker) {
                this._setOption("width", "47%");
                this._setDatePickerPosition();
                $("#" + this._id + "_lTime_timewidget").css({
                    left: this._leftDP.wrapper.outerWidth() + 5
                });

                $("#" + this._id + "_rTime_timewidget").css({
                    left: this._rightDP.wrapper.outerWidth() + 5
                });
                if (proxy._scrollerObj) {
                    proxy._scrollerObj.model.height = ran_height < cal_height ? ran_height + 10 : cal_height;
                    proxy._scrollerObj.refresh();
                }
                return;
            }
            if (proxy._scrollerObj) {
                proxy._scrollerObj.model.height = ran_height < cal_height ? ran_height + 10 : cal_height;
                proxy._scrollerObj.refresh();
            }
        } else {
			if (this._isMobile) {
				this._isMobile = false;
				this._resetValues();
			}
            proxy.popup.removeClass("e-daterange-responsive");
            if (this.model.enableTimePicker && this.datePopup) {
                this._leftTP.option("width", "115px");
                this._rightTP.option("width", "115px");
                this._setTimePickerPos();
            }
            if (proxy._scrollerObj) {
                proxy._scrollerObj.model.height = !this._showRangesOnly ? this.datePopup.height() : "200px";
                proxy._scrollerObj.refresh();
            }
        }
		(this._isMobile && this.popup && this.datePopup) ? this.popup.addClass("e-responsive"): this.popup.removeClass("e-responsive")
        this._setDatePickerPosition();
    };
    ejDateRangePicker.prototype._onDocumentClick = function (e) {
        if (this.model) {
            if (!this.popup) this.wrapper.removeClass('e-focus');
            else if (this.popup && !$(e.target).is(this.popup) && !$(e.target).parents(".e-popup").is(this.popup) && !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-daterangewidget").is(this.wrapper)) {
                if (!this.model.enableTimePicker) {
                    if (this._popupOpen)
                        this.popupHide(e);
                    this.wrapper.removeClass('e-focus');
                }
                else if (this.model.enableTimePicker && !$(e.target).is(this._leftTP.popup) && !$(e.target).parents(".e-popup").is(this._leftTP.popup) && !$(e.target).is(this._rightTP.popup) && !$(e.target).parents(".e-popup").is(this._rightTP.popup)) {
                    if (this._popupOpen)
                        this.popupHide(e);
                    this.wrapper.removeClass('e-focus');
                }
				this._notapplied = !this._buttonDiv.find(".e-drp-apply").hasClass("e-disable");
            }
        }
    };
    ejDateRangePicker.prototype._getOffset = function (ele) {
        var pos = ele.offset() || { left: 0, top: 0 };
        if ($("body").css("position") != "static") {
            var bodyPos = $("body").offset();
            pos.left -= bodyPos.left;
            pos.top -= bodyPos.top;
        }
        return pos;
    };

    ejDateRangePicker.prototype._getZindexPartial = function (element, popupEle) {
        if (!ej.isNullOrUndefined(element) && element.length > 0) {
            var parents = element.parents(), bodyEle;
            bodyEle = $('body').children();
            if (!ej.isNullOrUndefined(element) && element.length > 0)
                bodyEle.splice(bodyEle.index(popupEle), 1);
            $(bodyEle).each(function (i, ele) {
                parents.push(ele);
            });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static')
                    return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000)
                maxZ = 10000;
            else
                maxZ += 1;
            return maxZ;
        }
    };

    ejDateRangePicker.prototype._setDatePickerPosition = function () {
        var elementObj = this.element.is('input') ? this.wrapper : this.element;
        var pos = this._getOffset(elementObj), winLeftWidth, winRightWidth, winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()), winTopHeight = pos.top - $(document).scrollTop(), popupHeight = this.popup.outerHeight(), popupWidth = this.popup.outerWidth(), left = pos.left, totalHeight = elementObj.outerHeight(), border = (totalHeight - elementObj.height()) / 2, maxZ = this._getZindexPartial(this.element, this.popup), popupmargin = 3, topPos = (popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin;
        winLeftWidth = $(document).scrollLeft() + $(window).width() - left;
		if (this._showRangesOnly) left = pos.left + this.wrapper.outerWidth() - this.popup.outerWidth();
        else if (popupWidth > winLeftWidth && (popupWidth < left + elementObj.outerWidth()))
            left -= this.popup.outerWidth() - elementObj.outerWidth();
        this.popup.css({
            "left": left + "px",
            "top": topPos + "px",
            "z-index": maxZ
        });

        if (this.model.enableTimePicker && this.datePopup) {
            $("#" + this._id + "_lTime_timewidget").css({
                position: "absolute",
                top: 0,
                left: this._leftDP.popup.width() + this._leftDP.popup.position().left - $("#" + this._id + "_lTime_timewidget").width()
            });
            $("#" + this._id + "_rTime_timewidget").css({
                position: "absolute",
                top: !this.popup.hasClass("e-daterange-responsive") ? 0 : this._rightDP.wrapper.position().top,
                left: this._rightDP.popup.width() + this._rightDP.popup.position().left - $("#" + this._id + "_rTime_timewidget").width()
            });
        }
    };
    ejDateRangePicker.prototype._dateEleClicked = function (e) {
        this._updateRangesList();
        this._activeItem = $(e.currentTarget);
        if (this._activeItem.hasClass("e-hidedate")) {
            e.stopPropagation();
            return;
        }
        if (this._activeItem.hasClass("other-month")) {
            this._refreshMinMax();
        }
        var dateString = this._activeItem.attr("data-date");
        var cal_type = ($(e.currentTarget).parents(".e-left-datepicker").length > 0) ? "left" : "right";
        if (ej.isNullOrUndefined(dateString) || dateString === "")
            return;
        var currentDate = new Date(dateString);
        if (this._selectedStartDate != null && this._selectedEndDate != null)
            this._selectedStartDate = null;
        if (this._selectedStartDate == null) {
            this._selectedStartDate = currentDate;
            this._selectedEndDate = null;
            if (this._startDate)
                this._startDate.date = null;
            this._rightDP.element.val(null);
            if (cal_type == "right") {
                this._leftDP._stopRefresh = true;
                this._leftDP.option("value", this._selectedStartDate);
                this._leftDP.element.val(ej.format(this._selectedStartDate, this.model.dateFormat, this.model.locale));
            }
            if (this._rightTP)
                this._rightTP.option("value", "");
            this.popup.find(".in-range").removeClass("in-range");
            this.datePopup.find("td.e-state-default.e-active").removeClass("e-active");
            this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
            var startElement = $(this.datePopup.find('.current-month[data-date="' + dateString + '"]'));
            this._selectedStartDate = new Date(startElement.attr("data-date"));
            this._setStartDate(this._selectedStartDate, startElement, true);
        } else if ((this._selectedStartDate !== null && this._selectedEndDate == null) && !(currentDate < this._selectedStartDate)) {
            var minDate = currentDate;
            var dateString = $(e.currentTarget).attr("data-date");
			this._leftDP._stopRefresh = true;
			this._leftDP.option("value", new Date(this._selectedStartDate));
			this._leftDP._stopRefresh = false;
            this._rightDP._stopRefresh = true;
            this._rightDP.option("value", new Date(dateString));
            this._rightDP._stopRefresh = false;
            if (this._rightTP)
                this._rightTP.option("value", new Date(dateString));
            this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
            var endElement = $(this.datePopup.find('.current-month[data-date="' + dateString + '"]'));
            this._selectedStartDate = this.model.startDate;
            this._selectedEndDate = new Date(dateString);
            this._setEndDate(this._selectedEndDate, endElement, true);
            this._startDate = {};
            this._startDate.date = this._selectedStartDate;
            this._updateRanges("left");
            this._updateRanges("right");
            if (cal_type == "left") {
                this._leftDP._stopRefresh = true;
                this._leftDP.option("value", this.model.startDate);
                this._leftDP.element.val(ej.format(this._selectedStartDate, this.model.dateFormat, this.model.locale));
            }
        }else if ((this._selectedStartDate !== null && this._selectedEndDate == null) && (currentDate < this._selectedStartDate && this.model.backwardSelection)) {
            var minDate = currentDate;
            var dateString = $(e.currentTarget).attr("data-date");
            this._rightDP._stopRefresh = true;
            this._rightDP.option("value", new Date(dateString));
            this._rightDP._stopRefresh = false;
            if (this._rightTP)
                this._rightTP.option("value", new Date(dateString));
            this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
            var endElement = $(this.datePopup.find('.current-month[data-date="' + dateString + '"]'));
            this._selectedStartDate = this.model.startDate;
            this._selectedEndDate = new Date(dateString);
            this._setEndDate(this._selectedEndDate, endElement, true);
            this._startDate = {};
            this._startDate.date = this._selectedStartDate;
            if (cal_type == "left") {
                this._rightDP._stopRefresh = true;
                this._rightDP.option("value", this.model.startDate);
                this._rightDP.element.val(ej.format(this._selectedStartDate, this.model.dateFormat, this.model.locale));
            }
            else if (cal_type == "right") {
                this._leftDP._stopRefresh = true;
                this._leftDP.option("value", this.model.endDate);
                this._leftDP.element.val(ej.format(this._selectedStartDate, this.model.dateFormat, this.model.locale));
                this._rightDP._stopRefresh = true;
                this._rightDP.option("value", this.model.startDate);
                this._rightDP.element.val(ej.format(this._selectedStartDate, this.model.dateFormat, this.model.locale));
            }

        } else {
            this._selectedStartDate = currentDate;
            this._selectedEndDate = null;
            if (this._endDate)
                this._endDate.date = null;
            this.popup.find(".in-range").removeClass("in-range");
            this._rightDP.option("value", null);
            if (this._rightTP)
                this._rightTP.option("value", "");
            if (cal_type == "right") {
                this._leftDP._stopRefresh = true;
                this._leftDP.option("value", this._selectedStartDate);
                this._leftDP.element.val(ej.format(this._selectedStartDate, this.model.dateFormat, this.model.locale));
            }
            this._setStartDate(this._selectedStartDate, this._activeItem, true);
            this._updateRanges("left");
            this._updateRanges("right");
        }
        this._trigger("click", { element: $(e.currentTarget), startDate: this.model.startDate, endDate: this.model.endDate, value: new Date($(e.currentTarget).attr("data-date")) });
    };
    ejDateRangePicker.prototype._setStartDate = function (value, current_element, newset) {
        this._startDate = {};
        this._startDate.date = value;
        if (newset) {
            this._endDate = {};
            this._endDate.date = null;
        }
        this._leftDP._checkDateArrows();
        this.datePopup.find("td.e-state-default").removeClass("e-select e-start-date e-active showrange e-end-date e-state-hover");
        this.popup.find(".in-range").removeClass("in-range");
        current_element.addClass("e-start-date");
        this.model.startDate = value;
        if (this._buttonDiv)
            this._buttonDiv.find(".e-drp-apply").addClass("e-disable");
        if (!this.model.enableTimePicker)
            return;
        var $this = this._leftTP;
        var _value = ej.format(this._leftTP.model.value || this._leftDP.model.value || this._rightDP.model.value, $this.model.timeFormat, this.model.locale);
        //if (_value)
         //   this._rightTP.option("minTime", _value);
        if (_value)
            this._leftTP.option("value", _value);
    };
    ejDateRangePicker.prototype._setEndDate = function (value, current_element, newset) {
        this._rightDP.element.parents(".e-datewidget").removeClass("e-val-error");
        this._endDate = {};
        this._endDate.date = value;
        this.popup.find("td.e-end-date").removeClass("e-select e-end-date");
        current_element.addClass("e-end-date");
        if (this._buttonDiv)
            this._buttonDiv.find(".e-disable").removeClass("e-disable");
        this.model.endDate = value;
        if (this.model.startDate > this.model.endDate) {
            this.popup.find("td.e-start-date").removeClass("e-start-date").addClass("e-end-date");
            current_element.removeClass("e-end-date").addClass("e-start-date showrange");
        }
        if ( this._startDate && !ej.isNullOrUndefined(this._startDate.date) && this._startDate.date.getFullYear() == this._endDate.date.getFullYear()) {
            if (this._startDate.date.getMonth() == this._endDate.date.getMonth()) {
                return;
            }
        }
        if (!this.model.enableTimePicker)
            return;
        if (this.model.startDate && this.model.startDate.getDate() == this.model.endDate.getDate()) {
            this._rightTP.option("minTime", this._leftTP.option("value") || "");
            this._rightTP.option("value", this._leftTP.option("value") || "");
        } else {
            var $this = this._rightTP;
            var _value = ej.format(this._rightTP.model.value, $this.model.timeFormat, this.model.locale);
         //   if (_value)
           //     this._rightTP.option("minTime", _value);
            if (_value)
                this._rightTP.option("value", _value);
        }
    };

    ejDateRangePicker.prototype._rangeRefresh = function (args) {
        var startElement, endElement;
        if (this._rightDP) {
            var popup = args.element.parent().hasClass("e-left-datepicker") ? this._leftDP.popup : this._rightDP.popup;
        }
        if (this._startDate && this._startDate.date && this._startDate.date.getMonth() == args.month && this._startDate.date.getFullYear() == args.year) {
            startElement = $(popup.find('.current-month[data-date="' + this._startDate.date.toDateString() + '"]'));
            this._setStartDate(this._startDate.date, startElement, false);
            if (this._startDate.date.getDate() + 1 == startElement.next("td").text())
                $(startElement).addClass("showrange");
        }
        if (this._endDate && this._endDate.date && this._endDate.date.getMonth() == args.month && this._endDate.date.getFullYear() == args.year) {
            endElement = $(popup.find('.current-month[data-date="' + this._endDate.date.toDateString() + '"]'));
            this._setEndDate(this._endDate.date, endElement, false);
        }
        if (startElement == endElement)
            $(startElement).removeClass("showrange");
        if (this._rightDP)
            if ((this._startDate && this._startDate.date) && (this._endDate && this._endDate.date)) {
                if (this._startDate.date.getFullYear() <= args.year && this._endDate.date.getFullYear() >= args.year) {
                    var s = args.element.parent().hasClass("e-left-datepicker") ? $(popup.find('td.current-month')[0]) : $(popup.find('td.current-month')[0]);
                    var type = args.element.parent().hasClass("e-left-datepicker") ? "left" : "right";
                    this._updateRanges(type);
                }
            }
    };
    ejDateRangePicker.prototype._renderRangesWrapper = function () {
        if (ej.isNullOrUndefined(this._customRangePicker)) {
            this._customRangePicker = ej.buildTag("div.e-custom-dateranges").css("height", this.datePopup ? this.datePopup.height() :"200px");
            this.popup.append(this._customRangePicker);
            if (this._buttonDiv) this._customRangePicker.insertBefore(this._buttonDiv);
            this._ranges_li = "<ul class='e-dateranges-ul' role=menu></ul>";
            this._customRangePicker.append(this._ranges_li);
        }
    };
    ejDateRangePicker.prototype.setRange = function (range) {
        var startDate, endDate, ranges;
        this._clearRanges();
        if (typeof range == "string") {
            for (var i = 0; i < this.model.ranges.length; i++) {
                ranges = this.model.ranges[i];
                if (ranges.label == range) {
                    this.model.startDate = ranges.range[0];
                    this.model.endDate = ranges.range[1];
                    this._updatePreRanges();
                    return;
                }
            }
        } else if (typeof range == "object") {
            if (range.length == 2) {
                this.model.startDate = range[0];
                this.model.endDate = range[1];
                this._updatePreRanges();
                return;
            }
        }
    };
    ejDateRangePicker.prototype._updatePreRanges = function () {
        this._selectedStartDate = this.model.startDate;
        this._selectedEndDate = this.model.endDate;
        this._resetValues();
        if (this.popup && this.datePopup) this._setValues();
        this._refreshMinMax();
        if (!this._popupOpen)
            this._mainValue();
        this._setWaterMark();
    };
    ejDateRangePicker.prototype.destroy = function () {
        this.destroy();
    };
    ejDateRangePicker.prototype._destroy = function () {
        if (this._popupOpen)
            this._showhidePopup();
        if (this.wrapper) {
            this.element.removeClass("e-input");
            this.element.removeAttr("aria-atomic aria-live placeholder");
            !this._cloneElement.attr("tabindex") && this.element.attr("tabindex") && this.element.removeAttr("tabindex");
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
        }
        if (!ej.isNullOrUndefined(this._leftDP))
            this._leftDP.destroy();
        if (!ej.isNullOrUndefined(this._rightDP))
            this._rightDP.destroy();
        if (!ej.isNullOrUndefined(this._rightTP))
            this._rightTP.destroy();
        if (!ej.isNullOrUndefined(this._leftTP))
            this._leftTP.destroy();
        if (!ej.isNullOrUndefined(this._scrollerObj))
            this._scrollerObj.destroy();
        this.popup.remove();
    };
    ejDateRangePicker.prototype.addRanges = function (label,range) {
        var proxy = this, _ranges_li = "", title;
        if (range) {
                var value = range;
                if (value.length === 2) {
                    var start = new Date(value[0]);
                    var end = new Date(value[1]);
                    if (ej.isNullOrUndefined(start))
                        start = new Date(value[0]);
                    if (ej.isNullOrUndefined(end))
                        end = new Date(value[1]);
                    if (start <= end) {
                        if (!label)
                            label = "PreDefined Ranges";
                        _ranges_li += "<li aria-selected='false' title='" + label + "'class='rangeItem' data-e-range='" + JSON.stringify(value) + "' data-e-value='" + range + "'>" + label + "</li>";
                    }
            }
        }
        this._renderRangesWrapper();
        this._customRangePicker.find(".e-dateranges-ul").append(_ranges_li);
        this._off(this._customRangePicker.find("ul li.rangeItem"), "click", this._customSelection);
        this._on(this._customRangePicker.find("ul li.rangeItem"), "click", this._customSelection);
        if (this._scrollerObj)
            this._scrollerObj.refresh();
    };
    ejDateRangePicker.prototype._righthoverRange = function (e) {
        this._activeItem = $(e.currentTarget);
        if (this._activeItem.hasClass("e-hidedate")) {
            e.stopPropagation();

            return;
        }
        this.popup.find(".range-hover").removeClass("range-hover");
        if (this._activeItem.hasClass("in-range"))
            this._activeItem.addClass("range-hover");
        var dateString = this._activeItem.attr("data-date");
        var currentDate = new Date(dateString);
        this._trigger("hover", { element: e.currentTarget, events: e, value: new Date(this._activeItem.attr("data-date")) });

        var that = this;
        if (!ej.isNullOrUndefined(that._selectedStartDate) && (ej.isNullOrUndefined(that._selectedEndDate)))
            this.popup.find(".current-month").each(function (index, el) {
                var element = $(el);
                var dateString = element.attr("data-date");
                if (ej.isNullOrUndefined(dateString) || dateString === "")
                    return;
                var date = new Date(dateString);
                if (date > that._startDate.date && date < currentDate) {
                    element.addClass("in-range");
                } else {
                    element.removeClass("in-range");
                }
                if (that.model.backwardSelection) {
                    if (date < that._startDate.date && date > currentDate && currentDate < that._startDate.date) {
                        element.addClass("in-range");
                    }
                }
                if (date.getTime() === that._selectedStartDate.getTime() && element.next().length !== 0 && element.next("td.current-month").length !== 0 && currentDate > that._selectedStartDate && new Date(new Date(that._selectedStartDate.getTime()).setDate(that._selectedStartDate.getDate() + 1)).getTime() !== currentDate.getTime()) {
                    element.addClass("showrange");
                } else {
                    element.removeClass("showrange");
                }
            });
    };
    ejDateRangePicker.prototype._customSelection = function (e) {
        this._customRangePicker.find(".e-active").removeClass("e-active");
        if ($(e.currentTarget).attr("data-e-range") != "customPicker") {
            var range = $(e.currentTarget).attr("data-e-value").split(",");
            this.model.startDate = new Date(range[0]);
            this.model.endDate = new Date(range[1]);
            if (!this._showRangesOnly){
				this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
				this._customSet();
			}
			else {
				this._mainValue();
				this._isPopScroll = false;
				this.popupHide();
			}
        } else {
			this._showRangesOnly = false;
            if (!this.datePopup) this._renderPopup();
            this.model.startDate = null;
            this.model.endDate = null;
			this.datePopup.show();
			this._buttonDiv.show();
			this.clearRanges();
			this._setDatePickerPosition();
			this._resizePopup();
			this._customRangePicker.removeClass("e-responsive");
			if (this.popup.hasClass("e-daterange-responsive")) this._customRangePicker.insertBefore(this._buttonDiv).hide();
        }
        $(e.currentTarget).addClass("e-active");
    };
    ejDateRangePicker.prototype._setWaterMark = function () {
        if (this.element != null && this.element.hasClass("e-input")) {
            if ((!this._isSupport) && this.element.val() == "") {
                this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
            }
            else {
                $(this.element).attr("placeholder", this._localizedLabels.watermarkText);
            }
            return true;
        }
    };
    ejDateRangePicker.prototype._clearRanges = function (e) {
        this._updateRangesList();
        this._setOption("value", "");
        if (this.popup && this.datePopup) this._rightDP.element.parents(".e-datewidget").removeClass("e-val-error");
        this._selectedStartDate = null;
        this._selectedEndDate = null;
        if (this._startDate)
            this._startDate.date = null;
        if (this._endDate)
            this._endDate.date = null;
        if (this.popup) this.popup.find("td").removeClass("e-start-date e-end-date in-range e-active e-state-hover today");
        this.model.value = null;
        this.model.startDate = null;
        this.model.endDate = null;
        if (this._buttonDiv)
            this._buttonDiv.find(".e-drp-apply").addClass("e-disable");
    };
    ejDateRangePicker.prototype.clearRanges = function () {
        this._clearRanges();
        this._refreshMinMax();
        this.element.val("");
        this._trigger("_change", { value: this.model.value });
        this._trigger("change", { value: this.model.value, startDate: this.model.startDate, endDate: this.model.endDate });
        this._trigger("clear", {});
    };
    ejDateRangePicker.prototype._getLocalizedLabels = function () {
        return ej.getLocalizedConstants("ej.DateRangePicker", this.model.locale);
    };
    ejDateRangePicker.prototype._unWireEvents = function () {
        this._off($('.e-next', this.popup), "click", $.proxy(this._previousNextHandler, this));
        this._off($('.e-prev', this.popup), "click", $.proxy(this._previousNextHandler, this));
        this._off($(this._buttonDiv.find("div.e-drp-cancel")), "click", this._cancelButton);
        this._off($(this._buttonDiv.find("div.e-drp-reset")), "click", this.clearRanges);
        this._off(this.popup.find(".leftDate_wrapper.e-datepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        this._off(this.popup.find(".rightDate_wrapper.e-datepicker.e-js.e-input"), "blur", this._onPopupFocusOut);
        if (this.model.allowEdit) {
            this._off(this.element, "blur", this._onMainFocusOut);
            this._off(this.element, "focus", this._onFocusIn);
            this._off(this.element, "keydown", this._onKeyDown);
        }
    };
    ejDateRangePicker.prototype._onDocumentKeyDown = function (e) {
        if (e.keyCode != "13")
            return;
        if (this.popup && !this._buttonDiv.find(".e-drp-apply").hasClass("e-disable") && this.wrapper.hasClass("e-focus")) {
            this._buttonDiv.find(".e-drp-apply").click();
        }
    };
    ejDateRangePicker.prototype._wirePopupEvents = function () {
		this._on($('.e-next', this.popup), "click", $.proxy(this._previousNextHandler, this));
        this._on($('.e-prev', this.popup), "click", $.proxy(this._previousNextHandler, this));
	};
    ejDateRangePicker.prototype._wireEvents = function () {
        $(document).on("mousedown", $.proxy(this._onDocumentClick, this));
        $(document).on("keydown", $.proxy(this._onDocumentKeyDown, this));
        if (this.model.allowEdit) {
            this._on(this.element, "blur", this._onMainFocusOut);
            this._on(this.element, "focus", this._onFocusIn);
            this._on(this.element, "keydown", this._onKeyDown);
        }
    };
    ejDateRangePicker.prototype._onFocusIn = function (e) {
        if (this._isSupport) {
            e.preventDefault();
            this._isFocused = true;
        }
        if (this.wrapper.hasClass("e-error")) {
            this._validState = false;
            this.wrapper.removeClass('e-error');
        }
        if (!this.model.showPopupButton && !this.model.readOnly) this.popupShow(e);
        if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
        this.wrapper.addClass("e-focus");
		if (!this._isSupport)
        this._hiddenInput.css("display", "none");
    };

    ejDateRangePicker.prototype._onKeyDown = function (e) {
        if (e.keyCode == 13) {
            if ($(e.currentTarget).hasClass("e-datepicker")) {
                this._validateValues($(e.currentTarget).val(), $(e.currentTarget).parents(".e-left-datepicker").length > 0 ? "left" : "right");
                $(e.currentTarget).parents(".e-left-datepicker").length > 0 ? this._leftDP.model.value = this.model.startDate : this._rightDP.model.value = this.model.endDate;
                this._onPopupFocusOut(e);
            } else if(this.popup && this.model.enableTimePicker){
                $(e.currentTarget).hasClass("leftTime") && this._leftTP && this._rightTP ? this._leftTP._trigger("select") : this._rightTP._trigger("select");
            }
        }
        e.stopImmediatePropagation();
    };
    ejDateRangePicker.prototype._cancelButton = function () {
        this._prevValue = null, this._isPopScroll = false;
        this._clearRanges();
        this._onMainFocusOut();
        this._showhidePopup();
    };
    ejDateRangePicker.prototype._updateRanges = function (cal_type) {
        var cal = cal_type == "left" ? this._leftDP : this._rightDP;
        var proxy = this;
        cal.popup.find("td.current-month").each(function (index, el) {
            var element = $(el);
            var dateString = element.attr("data-date");
            if (ej.isNullOrUndefined(dateString) || dateString === "")
                return;
            var date = new Date(dateString);
            if (!ej.isNullOrUndefined(proxy._startDate) && !ej.isNullOrUndefined(proxy._startDate.date) && !ej.isNullOrUndefined(proxy._endDate.date))
                if (date > proxy._startDate.date && date < proxy._endDate.date) {
                    element.addClass("in-range").removeClass("e-state-hover");
                } else {
                    element.removeClass("in-range");
                }
            if (!ej.isNullOrUndefined(proxy._startDate) && !ej.isNullOrUndefined(proxy._startDate.date) && !ej.isNullOrUndefined(proxy._endDate.date))
                if (date > proxy._endDate.date && date < proxy._startDate.date && proxy._endDate.date < proxy._startDate.date) {
                    element.addClass("in-range").removeClass("e-state-hover");
                }
            if (!ej.isNullOrUndefined(proxy._startDate) && !ej.isNullOrUndefined(proxy._startDate.date) && date.toDateString() == proxy._startDate.date.toDateString() && proxy._endDate.date >= proxy._startDate.date) {
                element.addClass("e-start-date").removeClass("e-active");
                if (!ej.isNullOrUndefined(proxy._endDate) && !ej.isNullOrUndefined(proxy._endDate.date) && proxy._startDate.date.toDateString() != proxy._endDate.date.toDateString())
                    element.addClass("showrange");
                element.removeClass("in-range");
            }
            if (!ej.isNullOrUndefined(proxy._startDate) && !ej.isNullOrUndefined(proxy._endDate.date))
                if (!ej.isNullOrUndefined(proxy._endDate) && date.toDateString() == proxy._endDate.date.toDateString() && proxy._endDate.date >= proxy._startDate.date) {
                    element.addClass("e-end-date").removeClass("e-state-hover e-active");
                    element.removeClass("in-range");
                }
            if (!ej.isNullOrUndefined(proxy._startDate) && !ej.isNullOrUndefined(proxy._startDate.date) && date.toDateString() == proxy._startDate.date.toDateString() && proxy._endDate.date < proxy._startDate.date) {
                element.addClass("e-end-date").removeClass("e-state-hover e-active");
                element.removeClass("in-range");
            }
            if (!ej.isNullOrUndefined(proxy._startDate) && !ej.isNullOrUndefined(proxy._endDate.date))
                if (!ej.isNullOrUndefined(proxy._endDate) && date.toDateString() == proxy._endDate.date.toDateString() && proxy._endDate.date < proxy._startDate.date) {
                    element.addClass("e-start-date").removeClass("e-active");
                    if (!ej.isNullOrUndefined(proxy._endDate) && !ej.isNullOrUndefined(proxy._endDate.date) && proxy._startDate.date.toDateString() != proxy._endDate.date.toDateString())
                        element.addClass("showrange");
                    element.removeClass("in-range");
                }
        });
        if (cal.popup.find(".e-start-date").length > 0) {
            if ($(cal.popup.find(".e-start-date")).next("td.in-range").length > 0)
                return;
            else
                $(cal.popup.find(".e-start-date")).removeClass("showrange");
        }
    };

    ejDateRangePicker.prototype.getSelectedRange = function () {
        var args = { startDate: this.model.startDate, endDate: this.model.endDate };
        return args;
    };
    ejDateRangePicker.prototype.enable = function () {
        this.element[0].disabled = false;
        this.model.enabled = true;
        this.wrapper.removeClass('e-disable');
        this.element.removeClass("e-disable");
        this.element.attr("aria-disabled", "false");        
        if (!this._isSupport)
            this._hiddenInput.attr("enabled", "enabled");
        if (this.dateRangeIcon)
            this.dateRangeIcon.removeClass("e-disable").attr("aria-disabled", "false");
        if (this.popup) this.popup.children("div").removeClass("e-disable").attr("aria-disabled", "false");
        this._setOption("enabled", true);
    };
    ejDateRangePicker.prototype.disable = function () {
        this.element[0].disabled = true;
        this.model.enabled = false;
        this.wrapper.addClass('e-disable');
        this.element.addClass("e-disable");
        this.element.attr("aria-disabled", "true");
        this.element.attr("disabled", "disabled");
        if (!this._isSupport)
            this._hiddenInput.attr("disabled", "disabled");
        if (this.dateRangeIcon)
            this.dateRangeIcon.addClass("e-disable").attr("aria-disabled", "true");
        if (this.popup) this.popup.children("div").addClass("e-disable").attr("aria-disabled", "true");
        this.popupHide();
        this._setOption("enabled", false);
    };

    ejDateRangePicker.prototype._onMainFocusOut = function (e) {
        var element_value = this.element.val(), setError;
        this.wrapper.removeClass('e-focus');
        if (!this._isSupport && this.element.val() == "") {
            this._hiddenInput.css("display", "block");
        }
        if (this.element.val() == "" && this._prevValue == null) return;
        if (this._prevValue && this._prevValue == this.element.val()) {
            this._validState ? this.wrapper.removeClass('e-error') : this.wrapper.addClass('e-error');
            return;
        }
        else this._updateRangesList();
        if ((this.element.val() == "" || this.element.val() == null) && !this._isSupport)
            this._hiddenInput.css("display", "block");
        if (this.element.val() == "") {
            this.wrapper.removeClass('e-error');
            this._clearRanges();
            this._setWaterMark();
            this._refreshMinMax();
            this._prevValue = this.model.value;
            this._trigger("change", { value: this.model.value, startDate: null, endDate: null });
            this._trigger("_change", { value: this.model.value });
            return;
        }
        this.wrapper.removeClass("e-error");
        var datestring = this.element.val().split(this.model.separator), _startdate = ej.parseDate(datestring[0], this._dateTimeFormat, this.model.locale), _enddate = ej.parseDate(datestring[1], this._dateTimeFormat, this.model.locale);
        this._validState = true;
        if (!this._validateValues(_startdate, "left") || !this._validateValues(_enddate, "right") || !this._startEndValidation()) {
            this._clearRanges();
            this._refreshMinMax();
            setError = true;
        }
        if (element_value != "" && setError) {
            this.element.val(element_value);
            this.wrapper.addClass("e-error");
            this.model.value = null;
            this._prevValue = this.model.value;
            this._validState = false;
            this._trigger("_change", { value: this.element.val() });
            this._trigger("change", { value: this.model.value, startDate: null, endDate: null });
            return;
        }
        this._resetValues();
        if (this.popup && this.datePopup) this._setValues();
        this._refreshMinMax();
        this.model.value = this._validState && element_value != "" ? element_value : null;
        if (!this._popupOpen)
            this._mainValue();
        this._prevValue = this.model.value;
        this._validState ? this.wrapper.removeClass('e-error').removeClass("e-focus") : this.wrapper.addClass('e-error').removeClass("e-focus");
        this._trigger("change", { value: this.model.value, startDate: this.model.startDate, endDate: this.model.endDate });
    };
    ejDateRangePicker.prototype._onPopupFocusOut = function (e) {
        if (ej.format(this._selectedStartDate, "M/d/yyyy") != $("#daterangeleftDate_wrapper").val() || ej.format(this._selectedEndDate, "M/d/yyyy") != $("#daterangerightDate_wrapper").val()) {
            this._updateRangesList();
        }
        var picker = $(e.currentTarget).parents(".e-left-datepicker").length > 0 ? this._leftDP : this._rightDP;
        this._validateValues($(e.currentTarget).val(), $(e.currentTarget).parents(".e-left-datepicker").length > 0 ? "left" : "right");
        $(e.currentTarget).parents(".e-left-datepicker").length > 0 ? this._leftDP.model.value = this.model.startDate : this._rightDP.model.value = this.model.endDate;
        var _prevStartValue = this.model.startDate;
        var _prevEndValue = this.model.endDate, stop = false;
        this._rightDP.element.parents(".e-datewidget").removeClass("e-val-error");
        if (!this._startEndValidation()) {
            if ($(e.currentTarget).parents(".e-left-datepicker").length > 0) {
                this._clearRanges();
                this.model.startDate = _prevStartValue;
                this._selectedStartDate = this.model.startDate;
            } else {
                this._rightDP.element.parents(".e-datewidget").addClass("e-val-error");
                this.model.endDate = null;
                stop = true;
            }
        }
        if (_prevStartValue == null) {
            this._clearRanges();
            return;
        }
        this._selectedStartDate = this.model.startDate;
        this._selectedEndDate = this.model.endDate;
        this._resetValues();
        if (this.popup && this.datePopup) this._setValues();
        if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
        this._refreshMinMax();
        if (!this._popupOpen)
            this._mainValue();
        if (stop)
            this._rightDP.element.val(_prevEndValue.toLocaleDateString());
        this._setWaterMark();
    };
    ejDateRangePicker.prototype._resetValues = function () {
		if (this._isMobile) {
			if (this._leftDP) this._leftDP.option("maxDate", null);
			return;
		}
        if (this.popup && this.datePopup) {
            this._leftDP.option("maxDate", null);
            this._rightDP.option("minDate", null);
            this._leftDP.option("value", this._leftDP.model.value);
            this._rightDP.option("value", this._rightDP.model.value);
        }
    };
    ejDateRangePicker.prototype._resetRanges = function () {
        if (this.popup) {
            this._leftDP.option("maxDate", null);
            this._rightDP.option("minDate", null);
            this._leftDP.option("value", this._leftDP.model.value);
            this._rightDP.option("value", this._rightDP.model.value);
        }
    };
    ejDateRangePicker.prototype._setMinMax = function () {
        var rightdate = this._rightDP.popup.find("td.e-state-default").length;
        for (var i = 0; i < rightdate; i++) {
            var rightDateString = $(this._rightDP.popup.find("td.e-state-default")[i]).attr("data-date");
            var rightDate = new Date(rightDateString);
            if (rightDate < new Date(this.model.minDate))
                $(this._rightDP.popup.find("td.e-state-default")[i]).addClass("e-hidedate");
        }
        var leftdate = this._leftDP.popup.find("td.e-state-default").length;
        for (var i = 0; i < leftdate; i++) {
            var leftDateString = $(this._leftDP.popup.find("td.e-state-default")[i]).attr("data-date");
            var leftDate = new Date(leftDateString);
            if (leftDate < new Date(this.model.minDate))
                $(this._leftDP.popup.find("td.e-state-default")[i]).addClass("e-hidedate");
        }
    };
    ejDateRangePicker.prototype._refreshMinMax = function () {
		if (this._isMobile) return;
        if (this.popup && this.datePopup) {
            var local = this._getNextMonth(this._leftDP._calendarDate);
            if (local.toDateString() > this._rightDP._calendarDate.toDateString()) {
                var temp = this._rightDP.model.value;
                this._rightDP._calendarDate = local;
                this._rightDP._dateValue = local;
                this._rightDP.option("value", local);
            }
            this._rightDP.option("minDate", local);
            this._rightDP.option("value", temp);
            var temp = this._rightDP._calendarDate, y = temp.getFullYear(), m = temp.getMonth();
            this._leftDP.option("maxDate", new Date(y, m, 0));
            this._setMinMax();
        }
        if (this.popup) this.popup.find("td.e-state-default").removeClass("e-state-hover");
    };
    ejDateRangePicker.prototype._refreshEvents = function (cal_type) {
        this._off(this._rightDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "click", this._dateEleClicked);
        this._off(this._leftDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "click", this._dateEleClicked);
        this._off(this._rightDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "mouseover", this._righthoverRange);
        this._off(this._leftDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "mouseover", this._righthoverRange);
        this._on(this._leftDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "mouseover", this._righthoverRange);
        this._on(this._leftDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "click", this._dateEleClicked);
        this._on(this._rightDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "mouseover", this._righthoverRange);
        this._on(this._rightDP.sfCalendar.find('table .e-datepicker-days td.e-state-default'), "click", this._dateEleClicked);
        this._on($(this._leftDP.sfCalendar.find('table .e-datepicker-months td')), "click", $.proxy(this._previousNextHandler, this));
    };
    ejDateRangePicker.prototype._previousNextHandler = function (e) {
		if (this._isMobile) return;
        var selectedCalender = $(e.currentTarget).closest(".e-calendar").parent();
        var cal_type = selectedCalender.hasClass("e-left-datepicker") ? "left" : "right", leftDateString, rightDateString;
        if (e.type == "_month_Loaded") {
            if (cal_type == "left") {
                rightDateString = $(this._rightDP.popup.find("td.current-month")[0]).attr("data-date");
                leftDateString = this._leftDP._dateValue.toDateString();
            } else if (cal_type == "right") {
                leftDateString = $(this._leftDP.popup.find("td.current-month")[0]).attr("data-date");
                rightDateString = this._rightDP._dateValue.toDateString();
            }
        } else {
            rightDateString = $(this._rightDP.popup.find("td.current-month")[0]).attr("data-date");
            leftDateString = $(this._leftDP.popup.find("td.current-month")[0]).attr("data-date");
        }
        var leftDate = new Date(leftDateString);
        var rightDate = new Date(rightDateString);
        leftDate.setHours(0, 0, 0, 0);
        rightDate.setHours(0, 0, 0, 0);
        var status = true;
        if (cal_type == "right") {
            var cls = $("table", this._leftDP.sfCalendar).get(0).className;
            if (cls == "e-dp-viewdays")
                this._leftDP._stopRefresh = true;
            this._rightDP._stopRefresh = false;
            var temp = rightDate, y = temp.getFullYear(), m = temp.getMonth();
            this._leftDP.option("maxDate", new Date(y, m, 0));
            if (cls == "e-dp-viewmonths")
                this._leftDP._startLevel("year");
            this._leftDP._checkDateArrows();
        } else {
            var cls = $("table", this._rightDP.sfCalendar).get(0).className;
            if ($("table", this._rightDP.sfCalendar).get(0).className == "e-dp-viewdays")
                this._rightDP._stopRefresh = true;
            this._leftDP._stopRefresh = false;
            this._rightDP.option("minDate", this._getNextMonth(leftDate));
            if (cls == "e-dp-viewmonths")
                this._rightDP._startLevel("year");
            this._rightDP._checkDateArrows();
        }
        this._setMinMax();
        this._rightDP.element.parents(".e-datewidget").removeClass("e-error");
    };
    return ejDateRangePicker;
})(ej.WidgetBase);
window.ej.widget("ejDateRangePicker", "ej.DateRangePicker", new ejDateRangePicker());
window["ejDateRangePicker"] = null;

ej.DateRangePicker.Locale = {};

ej.DateRangePicker.Locale = ej.DateRangePicker.Locale || {};

ej.DateRangePicker.Locale['default'] = ej.DateRangePicker.Locale['en-US'] = {
    ButtonText: {
        apply: "Apply",
        cancel: "Cancel",
        reset: "Reset"
    },
    watermarkText: "Select Range",
    customPicker: "Custom Picker"
};
;
/**
* @fileOverview Plugin to style the Html ListView elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejListView", "ej.ListView", {
        _rootCSS: "e-lv e-js",
        validTags:['div'],
        _prefixClass: "e-",
        defaults: {

            fieldSettings: {
                "navigateUrl": "navigateUrl",
                "href": "href",
                "enableAjax": "enableAjax",
                "preventSelection": "preventSelection",
                "persistSelection": "persistSelection",
                "text": "text",
                "enableCheckMark": "enableCheckMark",
                "checked": "checked",
                "primaryKey": "primaryKey",
                "parentPrimaryKey": "parentPrimaryKey",
                "imageClass": "imageClass",
                "imageUrl": "imageUrl",
                "childHeaderTitle": "childHeaderTitle",
                "childId": "childId",
                "childHeaderBackButtonText": "childHeaderBackButtonText",
                "renderTemplate": "renderTemplate",
                "templateId": "templateId",
                "attributes": "attributes",
                "mouseUp": "mouseUp",
                "mouseDown": "mouseDown",
                "groupID": "groupID",
                "id": "id"
            },

            mouseDown: null,

            mouseUp: null,

            items: []

        },



        dataTypes: {
            dataSource: "data",
            query: "data",
            itemRequestCount: "number",
            totalItemsCount: "number",
            fieldSettings: "data",
            renderMode: "enum",
            theme: "enum",
            enablePersistence: "boolean"
        },
        observables: ["selectedItemIndex", "dataSource"],
        selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),
        dataSource: ej.util.valueFunction("dataSource"),
		checkedIndices: ej.util.valueFunction("checkedIndices"),

        _tags: [{
            tag: "items",
            attr:
                ["navigateUrl",
                "href",
                "text",
                "checked",
                "primaryKey",
                "parentPrimaryKey",
                "imageClass",
                "imageUrl",
                "childHeaderTitle",
                "childId",
                "childHeaderBackButtonText",
                "mouseUP",
                "mouseDown",
                "attributes",
                "renderTemplate",
                "templateId",
                "enableAjax",
                "preventSelection",
                "persistSelection",
                "enableCheckMark",
                "attributes"
                ],
            content: "template"
        }
        ],


        _init: function (options) {
            this._options = options;
            this._totalitemscount = options["totalItemsCount"];
            this._preventDefaultException = { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ };
            this._storedContent = [];
            this._storedTemplate = [];
            this._tempContent = $("body");
            this._touchStart = this.model.mouseDown;
            this._touchEnd = this.model.mouseUp;
            this._oldEle = this.element.clone();
            if (this._oldEle.find("ul").length)
                this.model.items = [];
            this._indexVal = 0;
			this._setCulture();
			this._updateModelItems();
			this._dataUrl = this.model.dataSource;
			if (!ej.isNullOrUndefined(this._dataUrl.dataSource)) this._rawList =  ej.DataManager(this._dataUrl.dataSource.json).executeLocal(ej.Query().take(this.model.totalItemsCount).clone());
            this._load();
            var navObj = this.element.closest(".e-nb.e-js");
            this._isInsideNavigation = navObj.length;
            if (this._isInsideNavigation)
                this._nearestND = navObj.ejNavigationDrawer("instance");
            this._responsive();
        },

        _responsive: function () {
			$(window).on("resize", $.proxy(this._resizeHandler, this));
        },

        _resizeHandler: function () {
			if ($(this.element).parent().width() == null && this.model == null) {
				$(this.element).width(this.width);
			}
			else if($(this.element).parent().width()<=this.model.width) {
				this.width = $(this.element).parent().width();
				$(this.element).width(this.width);
			}
			else
				$(this.element).width(this.model.width);
        },

        _itemsObjectCollection: function (element, primaryKey, parentPrimaryKey, groupid) {
            if (ej.getAttrVal(element, "data-ej-rendertemplate")) {
                var tempid = this._tempContent.find('#' + ej.getAttrVal(element, "data-ej-templateid"));
                if (tempid.length) {
                    var ele = tempid.remove();
                    this._storedTemplate[this._indexVal] = ele[0].nodeName && ele[0].nodeName.toLowerCase() == "script" ? ej.getClearString(ele[0].innerHTML) : ele[0].outerHTML;
                }
                else if (!this._storedTemplate[this._indexVal])
                    if ($(element)[0].innerHTML)
                        this._storedTemplate[this._indexVal] = $(element)[0].innerHTML;
                    else if (this._storedTemplate[this._indexVal] && this._tempContent.find('#' + template).length) {
                        var ele = this._tempContent.find('#' + template).remove();
                        ele = ele[0].nodeName && ele[0].nodeName.toLowerCase() == "script" ? ej.getClearString(ele[0].innerHTML) : ele[0].outerHTML;
                        this._storedTemplate = ej._pushValue(this._storedTemplate, ele, this._indexVal);
                    }
                this._indexVal++;
            }
          return  this._getLiAttributes(element, primaryKey, parentPrimaryKey, groupid);
        },

        _getLiAttributes: function (element, primaryKey, parentPrimaryKey, groupid) {
            var item = {};
            item.groupID = groupid ? groupid : "",
            item.text = ej.getAttrVal(element, "data-ej-text") ? ej.getAttrVal(element, "data-ej-text") : this._getText(element);
            item.preventSelection = ej.getAttrVal(element, "data-ej-preventselection");
            item.persistSelection = ej.getAttrVal(element, "data-ej-persistselection");
            item.navigateUrl = ej.getAttrVal(element, "data-ej-navigateurl");
            item.href = ej.getAttrVal(element, "data-ej-href");
            item.checked = ej.getAttrVal(element, "data-ej-checked");
            item.primaryKey = ej.getAttrVal(element, "data-ej-primarykey", primaryKey);
            item.parentPrimaryKey = ej.getAttrVal(element, "data-ej-parentprimarykey", parentPrimaryKey);
            item.imageClass = ej.getAttrVal(element, "data-ej-imageclass");
            item.imageUrl = ej.getAttrVal(element, "data-ej-imageurl");
            item.childHeaderTitle = ej.getAttrVal(element, "data-ej-childheadertitle");
            item.childId = item.href ? ej.getAttrVal(element, "data-ej-childid") ? ej.getAttrVal(element, "data-ej-childid") : ("page_" + parseInt(Math.random().toFixed(3) * 1000)) : "";
            item.childHeaderBackButtonText = ej.getAttrVal(element, "data-ej-childheaderbackbuttontext");
            item.mouseUp = ej.getAttrVal(element, "data-ej-mouseUp");
            item.mouseDown = ej.getAttrVal(element, "data-ej-mouseDown");
            if (this.element.find('li').length > 0) item.attributes = (typeof(element)=="object")? element.attrNotStartsWith(/^data-ej-/):$(element).attrNotStartsWith(/^data-ej-/);
            item.renderTemplate = ej.getAttrVal(element, "data-ej-rendertemplate");
            item.templateId = this._storedTemplate[this._indexVal - 1],
            item.enableAjax = ej.getAttrVal(element, "data-ej-enableajax");
            item.enableCheckMark = ej.getAttrVal(element, "data-ej-enablecheckmark");
            return item;
        },



        _renderLists: function () {
            var list = ej.buildTag("li", "", {}, {
                "class": this._prefixClass + "user-select " + this._prefixClass + "list " + this._prefixClass + "state-default{{if " + this.model.fieldSettings['primaryKey'] + " || " + this.model.fieldSettings['enableAjax'] + " || " + this.model.enableAjax + "}} " + this._prefixClass + "arrow{{/if}}{{if " + this.model.fieldSettings['imageClass'] + "}} " + this._prefixClass + "margin{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}} " + this._prefixClass + "margin{{/if}}{{/if}}",
                "data-childid": "{{if " + this.model.fieldSettings['primaryKey'] + "}}child{{>" + this.model.fieldSettings['primaryKey'] + "}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}",
                "data-childheadertitle": "{{>" + this.model.fieldSettings['childHeaderTitle'] + "}}",
                "data-childheaderbackbuttontext": "{{>" + this.model.fieldSettings['childHeaderBackButtonText'] + "}}",
                "data-preventSelection": "{{>" + this.model.fieldSettings['preventSelection'] + "}}",
                "data-persistSelection": "{{>" + this.model.fieldSettings['persistSelection'] + "}}",
                "data-navigateUrl": "{{>" + this.model.fieldSettings['navigateUrl'] + "}}",
                "data-loadajax": "{{>" + this.model.fieldSettings['enableAjax'] + "}}",
                "data-href": '{{>' + this.model.fieldSettings['href'] + '}}{{:~_checkAjaxUrls()}}',
                "data-checked": '{{>' + this.model.fieldSettings['checked'] + '}}',
                "data-templateid": "{{>" + this.model.fieldSettings['renderTemplate'] + "}}",
                "data-mouseup": "{{>" + this.model.fieldSettings['mouseUp'] + "}}",
                "data-mousedown": "{{>" + this.model.fieldSettings['mouseDown'] + "}}",
                "data-id": "{{>" + this.model.fieldSettings['id'] + "}}"
            });
            if (this.model.renderTemplate) {
               if (this._hasDataSource() && this._template){
                    var check = this._createCheckBox();
                    list[0].innerHTML = this._template+"{{if " + this.model.fieldSettings['enableCheckMark'] + " !== undefined}}{{if " + this.model.fieldSettings['enableCheckMark'] + ".toString() == 'false' ? " + this.model.fieldSettings['enableCheckMark'] + " : " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{else}}{{if " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{/if}}";
            }
            }
            else {
                var linkTag = ej.buildTag("a", "", {}, { "class": this._prefixClass + "chevron-right_01 " + this._prefixClass + "remove-shadow{{if " + this.model.fieldSettings['imageClass'] + "}} " + this._prefixClass + "margin{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}} " + this._prefixClass + "margin{{/if}}{{/if}}{{if " + this.model.fieldSettings['primaryKey'] + " || " + this.model.fieldSettings['enableAjax'] + " || " + this.model.enableAjax + "}} " + this._prefixClass + "fontimage e-icon{{/if}}", "href": (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 ? "" : "{{if " + this.model.fieldSettings['navigateUrl'] + " == '' || " + this.model.fieldSettings['navigateUrl'] + " == undefined }}{{else}}{{:" + this.model.fieldSettings['navigateUrl'] + "}}{{/if}}") }); 
                (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) && linkTag.removeAttr('href');
				var span = ej.buildTag("span", "{{>" + this.model.fieldSettings['text'] + "}}", {}, { "class": this._prefixClass + "list-text " + this._prefixClass + "rel " + this._prefixClass + "user-select{{if " + this.model.fieldSettings['imageClass'] + "}} " + this._prefixClass + "text{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}} " + this._prefixClass + "text{{/if}}{{/if}}" });
                var imgClass = ej.buildTag("div", "", {}, { 'class': this._prefixClass + "list-img " + this._prefixClass + "rel " + this._prefixClass + "user-select {{>" + this.model.fieldSettings['imageClass'] + "}}" });
                var check = this._createCheckBox();
                if (this.model.renderMode == "windows" && ej.isMobile())
                    linkTag[0].innerHTML = "{{if !" + this.model.fieldSettings['primaryKey'] + "}}{{if " + this.model.fieldSettings['enableAjax'] + " == undefined || " + this.model.fieldSettings['enableAjax'] + ".toString() == 'false'}}{{if !" + this.model.fieldSettings['navigateUrl'] + "}}{{if " + this.model.fieldSettings['enableCheckMark'] + " !== undefined}}{{if " + this.model.fieldSettings['enableCheckMark'] + ".toString() == 'false' ? " + this.model.fieldSettings['enableCheckMark'] + " : " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{else}}{{if " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{/if}}{{/if}}{{/if}}{{/if}}" + "{{if " + this.model.fieldSettings['imageClass'] + "}}" + imgClass[0].outerHTML + "{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}}{{:~_checkImgUrls()}}{{/if}}{{/if}}" + span[0].outerHTML;
                else
                    linkTag[0].innerHTML = "{{if " + this.model.fieldSettings['imageClass'] + "}}" + imgClass[0].outerHTML + "{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}}{{:~_checkImgUrls()}}{{/if}}{{/if}}" + span[0].outerHTML + "{{if !" + this.model.fieldSettings['primaryKey'] + "}}{{if " + this.model.fieldSettings['enableAjax'] + " == undefined || " + this.model.fieldSettings['enableAjax'] + ".toString() == 'false'}}{{if !" + this.model.fieldSettings['navigateUrl'] + "}}{{if " + this.model.fieldSettings['enableCheckMark'] + " !== undefined}}{{if " + this.model.fieldSettings['enableCheckMark'] + ".toString() == 'false' ? " + this.model.fieldSettings['enableCheckMark'] + " : " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{else}}{{if " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{/if}}{{/if}}{{/if}}{{/if}}";

                list[0].innerHTML = "{{if " + this.model.fieldSettings['renderTemplate'] + " == undefined || " + this.model.fieldSettings['renderTemplate'] + ".toString() == 'false'}}" + linkTag[0].outerHTML + "{{else}}{{:templateId}}{{/if}}";
            }
            if (this.model.renderMode == "ios7") {
                var innerDiv = ej.buildTag("div." + this._prefixClass + "list-div");
                innerDiv[0].innerHTML = list[0].innerHTML;
                list.empty().append(innerDiv);
            }
            return list;
        },


        _updateContent: function (currentItem, backButton) {
            var proxy = this;
            var $curIte = $(currentItem), childid = $curIte.attr('data-childid');
            var id = this._isInsideNavigation && currentItem.attr('data-href') ? $('body').find($("#" + childid)) : this.element.find($("#" + childid));
            if (id.length) {
                var hdr = this.element.find('#' + childid + '_header');
                if (this.model.enableFiltering)
                    this._initializeFiltering($(id));
                var title = $curIte.attr('data-childheadertitle') == undefined ? currentItem.text() : $curIte.attr('data-childheadertitle');
                if (hdr.hasClass('e-header')) {
                    this._setHeaderVal(childid, title, backButton);
                }
                id.attr("data-hdr-title", title).attr("data-hdr-bckbtn", backButton);
                this._initEJCheckBox(id);
                if (this._isInsideNavigation && currentItem.attr('data-href') && this._nearestND.model.contentId) {
                    if ($('body').find('.e-lv.subpage.e-childitem')) {
                        $("#" + this._nearestND.model.contentId).empty().append(id.show());
                    }
                }
                else {
                    $curIte.closest('.subpage').hide();
                    id.show();
					this._childContainer = id.find('.' + this._prefixClass + 'list-container');
					this._childContainer.ejScroller({
                        height: this._childContainer.height(),
                        width: 0,
                        scrollerSize: 20
                    });
			        this.scrollerObj = this._childContainer.ejScroller("instance");
					this._containerHeight = this.element.height() - ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'lv-inputdiv'), 'outerHeight')-ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'header'), 'outerHeight');
					if (this.model.height !== null) {
				        if (this._childContainer.height() > this._containerHeight) {
			                this._refreshScroller(this._childContainer,true);
					    }
				    }
				    if (this.scrollerObj) {
						this.scrollerObj.refresh();
						$(this.scrollerObj.element).find(".e-vhandlespace").css("height",($(this.scrollerObj.element).find(".e-vhandlespace").height() - 1));
					}
                    $(this.element.children()[0]).removeClass("e-slideright");
                    id.addClass("e-slideleft");
                }
            }
        },



        _renderHeader: function (id, showbutton, title, backtext) {
            var header = ej.buildTag("div", "", {}, { "id": id + "_header", "class": "e-header e-box" });
            if (showbutton) {
                header.append("<span class='e-hicon e-icon e-chevron-left_01'></span>");
                header.append("<div class='e-btn-text'>" + (backtext ? backtext : "Back") + "</div>");
            }
            else
                header.append("<div class='e-htitle'>" + title + "</div>");
            return header;
        },
        _setHeaderVal: function (id, title, backtext) {
            this._onBackButtonDelegate = $.proxy(this._onBackButtonClick, this);
            ej.listenTouchEvent($("#" + id + "_header"), ej.endEvent(), this._onBackButtonDelegate, false, this);
            var backButtonText = this.model.showHeaderBackButton ? this.model.headerBackButtonText ? this.model.headerBackButtonText : backtext : backtext;
            $("#" + id + "_header").find(".e-btn-text").text(backtext ? backButtonText : "Back");
            $("#" + id + "_header").find(".e-htitle").text(title);
        },
        _onBackButtonClick: function (e) {
            this.element.find(".e-slideleft").removeClass("e-slideleft");
            this.element.children(":visible").hide();
            $(this.element.children()[0]).show();
            $(this.element.children()[0]).addClass("e-slideright");
            if (this.model.enableFiltering)
            this._initializeFiltering($(this.element.children()[0]));
     },


        _returnData: function () {
            var checkedItem = this._currentItem.closest('ul.e-list-hdr').find('.e-chkbox-wrap[aria-checked="true"]').closest("li");
            var elementId = ej.getAttrVal(this._currentItem, "data-id", this._currentItem.text());
            var items = this.dataSource().length ? typeof this.dataSource() == "string" ? eval(this.dataSource()) : this.dataSource() : this.model.items;
            return {
                hasChild: this._currentItem.attr("data-childid") && this._currentItem.attr('data-childid').length > 0 ? (this.element.find('#' + this._currentItem.attr('data-childid')).length ? true : false) : false,
                item: this._currentItem,
                text: this._currentItem.text(),
                index: this._currentItem.index(),
                isChecked: (!ej.isNullOrUndefined(this._eventtrigger)) ? ((this._eventtrigger.hasClass("e-chk-image e-icon") || this.model.mouseDown) ? (this._currentItem.find('input.' + this._prefixClass + 'lv-check').prop('checked') == true ? false : true) : (this._currentItem.find('input.' + this._prefixClass + 'lv-check').prop('checked') == true ? true : false)) : false,
                checkedItems: checkedItem.length ? checkedItem : null,
                checkedItemsText: $(checkedItem).map(function () { return $(this).text(); }).get(),
                itemData: this._generateData(items, elementId),
                checkedValues: this.checkedIndices()  
            };
        },
        _initEJCheckBox: function (ul) {
            var liItems = ul.find("li");
            var count = liItems.length;
            for (var i = 0; i < count; i++) {
                if (this.model.enablePersistence || this.model.checkedIndices.length > 0 ) {   
                    var localItems = this.model.checkedIndices;
                    var checked = this._hasValue(localItems, i);
                }
                else {
                    var checked = ej.getAttrVal($(liItems[i]), "data-checked");
                    var checked = checked == "true" ? true : false;
                }
                $($(liItems[i]).find(".e-lv-check")).ejCheckBox({ checked: checked });
            }
            ul.find('.e-lv-checkdiv').removeClass("e-lv-checkdiv")
            ul.find('.e-lv-check').parent().addClass("e-lv-checkdiv")
        },
        _triggerStartEvent: function (data) {
			if (ej.browserInfo().name == "msie" && ej.browserInfo().version == 8)
				this.model.mouseDown = this._touchStart;
			else this.model.mouseDown = ej.getAttrVal(this._currentItem, 'data-mousedown', this._touchStart);
			var lbCheck = this._currentItem.find('.' + this._prefixClass + 'lv-check');
			$(lbCheck).closest('.e-chkbox-wrap').attr('aria-checked', data.isChecked);
			lbCheck.ejCheckBox({ checked: data.isChecked });
            this._trigger("mouseDown", data);
        },

        _triggerEndEvent: function (data, evt) {
			if (ej.browserInfo().name == "msie" && ej.browserInfo().version == 8)
				this.model.mouseUp = this._touchEnd;
            else this.model.mouseUp = ej.getAttrVal(this._currentItem, 'data-mouseup', this._touchEnd);
            this.selectedItemIndex(this._currentItem.index());
            if (this.model.enablePersistence || this.model.enableCheckMark) {
                var state = this._currentItem.find('.e-chkbox-wrap'), index = this._currentItem.index();
                if (state.attr('aria-checked') == 'true' || (index||$(evt.target).parent().hasClass('e-chk-inact'))) {
                    if (!this._hasValue(this._checkedValues, index))
                        this._checkedValues.push(index);
                    else
                        this._checkedValues.splice(this._checkedValues.indexOf(index), 1);
                }
                else
                    this._checkedValues.splice(this._checkedValues.indexOf(index), 1);
            }
            this.checkedIndices(this._checkedValues);
            if (this.model.mouseUp)
                this._trigger("mouseUp", data);
        },
        _createFilterDiv: function () {
            return ej.buildTag('div.e-lv-filter', ej.buildTag('input.e-lv-input', "", {}, { 'type': 'text', 'placeholder': 'search' }));
        },
        _emptyFilterTextValue: function (element) {
            element.find('.e-lv-input').val("");
        },
        _createListDiv: function (childId) {
            this._div = ej.buildTag("div#" + childId + "." + this._rootCSS + " subpage e-childitem e-ajaxchild", (this.model.showHeader && this._isInsideNavigation && !this._nearestND.model.contentId) ? this._renderHeader(childId, true, this._currentItem.text()) : "");
        },
        _createCheckBox: function () {
            return ej.buildTag("input.e-lv-check", "", {}, { "type": "checkbox", });
        },
        _toggleCheckboxValue: function (lbCheck) {
            lbCheck.ejCheckBox({ checked: ($(lbCheck).closest('.e-chkbox-wrap')).attr('aria-checked') == "true" ? false : true });
        },
        _setCheckboxValue: function (element, val) {
            element.ejCheckBox({ checked: val });
        },
        _convertToRelativeUrl: function (url) {
            return url;
        },
		_setCulture: function () {
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.headerTitle)) this._localizedLabels.headerTitle = this._options.headerTitle;
                if (!ej.isNullOrUndefined(this._options.headerBackButtonText)) this._localizedLabels.headerBackButtonText = this._options.headerBackButtonText;
            }
            this.model.headerTitle = this._localizedLabels.headerTitle;
            this.model.headerBackButtonText = this._localizedLabels.headerBackButtonText;
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },
		
    });
	 ej.ListView.Locale = ej.ListView.Locale || {};
        ej.ListView.Locale["default"] = ej.ListView.Locale["en-US"] = {
            headerTitle: "Title",
            headerBackButtonText: "",
        };
    $.extend(true, ej.ListView.prototype, ej.ListViewBase.prototype);
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html UL elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejListBox", "ej.ListBox", {

        element: null,
        _ignoreOnPersist: ["dataSource", "query", "itemRequestCount", "fields", "create", "change", "select", "unselect", "itemDragStart", "itemDrag", "itemDragStop", "itemDrop", "checkChange", "destroy", "actionComplete", "actionFailure", "actionSuccess", "actionBegin", "itemDropped", "selected"],
        model: null,
        validTags: ["ul"],
        _setFirst: false,
        _rootCSS: "e-listbox",
        defaults: {
            itemsCount: null,
            totalItemsCount: null,
            dataSource: null,
            query: ej.Query(),
            itemRequestCount: 5,
            itemHeight:null,
            fields: {
                id: null,
                text: null,
                imageUrl: null,
                imageAttributes: null,
                spriteCssClass: null,
                htmlAttributes: null,
                tooltipText: null,
                selectBy: null,
                checkBy: null,
                groupBy: null,
                tableName: null,

                //deprecated field properties
                selected: null,
                category: null,
                toolTipText: null
            },
            height: "auto",
            width: "200",
            template: null,
            text: "",
            selectedIndex: null,
            checkedIndices: [],
            selectedIndices: [],
            cascadeTo: null,
            value: "",
            cssClass: "",
            targetID: null,
            htmlAttributes: {},
            showRoundedCorner: false,
            enableRTL: false,
            enabled: true,
            showCheckbox: false,
            allowVirtualScrolling: false,
            virtualScrollMode: "normal",
            enablePersistence: false,
            allowMultiSelection: false,
            allowDrag: false,
            allowDrop: false,
            enableIncrementalSearch: false,
            enableWordWrap:true,
            caseSensitiveSearch: false,
            loadDataOnInit: true,
            create: null,
            change: null,
            select: null,
            unselect: null,
            itemDragStart: null,
            itemDrag: null,
            itemDragStop: null,
            itemDrop: null,
            checkChange: null,
            destroy: null,
            actionComplete: null,
            actionSuccess: null,
            actionBeforeSuccess:null,
            focusIn:null,
            focusOut:null,
            actionFailure: null,
            actionBegin: null,
			cascade: null,
            sortOrder: "none",

            //Deprecated Members
            enableVirtualScrolling: false,
            checkAll: false,
            uncheckAll: false,
            enableLoadOnDemand: false,
            itemRequest: null,
            allowDragAndDrop: undefined,
            selectedItemIndex: null,
            enableItemsByIndex: null,
            checkItemsByIndex: null,
            disableItemsByIndex: null,
            uncheckItemsByIndex: null,
            itemDropped: null,
            selected: null,
            selectIndexChanged: null,
            selectedItems: [],
            checkedItems: [],
            checkedItemlist: [],
            selectedItemlist: [],
        },
        dataTypes: {
            cssClass: "string",
            itemsCount: "number",
            itemRequestCount: "number",
            allowDrag: "boolean",
            allowDrop: "boolean",
            enableWordWrap:"boolean",
            enableIncrementalSearch: "boolean",
            caseSensitiveSearch: "boolean",
            template: "string",
            targetID: "string",
            cascadeTo: "string",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            enablePersistence: "boolean",
            enabled: "boolean",
            allowMultiSelection: "boolean",
            dataSource: "data",
            query: "data",
            checkedIndices: "data",
            selectedIndices: "data",
            htmlAttributes: "data",
            loadDataOnInit: "boolean",
            showCheckbox: "boolean",
            sortOrder: "enum"
        },
        observables: ["value", "dataSource"],
        value: ej.util.valueFunction("value"),
        dataSource: ej.util.valueFunction("dataSource"),
        enable: function () {
            if (this.listContainer.hasClass("e-disable")) {
                this.target.disabled = false;
                this.model.enabled = this.model.enabled = true;
                this.element.removeAttr("disabled");
                this.listContainer.removeClass('e-disable');
                if (this.model.allowMultiSelection) this.listContainer.removeClass("e-disable");
                var scroller = this.listContainer.find(".e-vscrollbar,.e-hscrollbar");
                if (this.model.showCheckbox) { 
                    var items = this.listContainer.find('li:not(.e-disable)');
                    items.find(".listcheckbox").ejCheckBox("enable");
                }
                if (scroller.length > 0)
                    this.scrollerObj.enable();
            }
        },
        disable: function () {
            if (!this.listContainer.hasClass("e-disable")) {
                this.target.disabled = true;
                this.model.enabled = this.model.enabled = false;
                this.element.attr("disabled", "disabled");
                this.listContainer.addClass('e-disable');
                if (this.model.allowMultiSelection) this.listContainer.addClass("e-disable");
                var scroller = this.listContainer.find(".e-vscrollbar,.e-hscrollbar");
                if (this.model.showCheckbox) this.element.find(".listcheckbox").ejCheckBox("disable");
                if (scroller.length > 0)
                    this.scrollerObj.disable();
            }
        },
        selectItemByIndex: function (index) {            
            var prevSelectedItem = this._lastEleSelect = this.model.selectedIndex, listitems= (this.listitems)?this.listitems:this.listitem;
			if(index!=0) index=parseInt(index);       
            if (index != null) {				
                if ((index > this.element.find("li:not('.e-ghead')").length) || (index < 0) || ((1 / index) == -Infinity))
					 index=this.model.selectedIndex;                    				
                var activeitem = $(this.element.find("li:not('.e-ghead')")[index]);
                if (!activeitem.hasClass("e-select")) {
                    this._activeItem = index;
                    this.element.children("li").removeClass("e-select");
                    this._selectedItems = [];
                    this.model.selectedIndices = [];
                    activeitem.addClass("e-select");
                    if (this.model.showCheckbox) {
                        if (!($(activeitem).find('.listcheckbox').ejCheckBox('isChecked'))) {
                            $(activeitem).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                            activeitem.removeClass("e-select");
                            if (!($.inArray(this._activeItem, this._checkedItems) > -1)) this._checkedItems.push(this._activeItem);
                            if (!($.inArray(activeitem[0], this.model.checkedIndices) > -1)) this.model.checkedIndices.push(this._activeItem);
                        }
                    }
                    this._selectedItems.push(activeitem);
                    this.model.selectedIndices.push(index);
                    var selectData = this._getItemObject(activeitem, null);
                    selectData["isInteraction"] = false;
                    if (this.model.select)
                        this._trigger('select', selectData);
                }
            }
            if (this.model.cascadeTo) {
                this._activeItem = index;
                this._cascadeAction();
            }
            this._setSelectionValues()._onlistselection(prevSelectedItem, this._activeItem);;
        },
        checkItemByIndex: function (index) {
            if (typeof (index) == "number")
                this.checkItemsByIndices(index.toString());
        },
        uncheckItemByIndex: function (index) {
            if (typeof (index) == "number")
                this.uncheckItemsByIndices(index.toString());
        },
        checkItemsByIndices: function (index) {
            if ((ej.isNullOrUndefined(index))) return false;
            var checkitems = index.toString().split(',');
            if (checkitems.length > 0) {
                for (var i = 0; i < checkitems.length; i++) {
                    if (checkitems[i] != null) {
                        this._activeItem = parseInt(checkitems[i]);
                        if (this._activeItem < 0) this._activeItem = 0;
                        var activeitem = $(this.element.children("li:not('.e-ghead')")[this._activeItem]);
                        if (this.model.showCheckbox) {
                            if (!($(activeitem).find('.listcheckbox').ejCheckBox('isChecked'))) {
                                $(activeitem).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                                this.checkedStatus = true;
                                if (!($.inArray(this._activeItem, this._checkedItems) > -1)) this._checkedItems.push(this._activeItem);
                                if (!($.inArray(activeitem[0], this.model.checkedIndices) > -1)) this.model.checkedIndices.push(this._activeItem);
                                var checkData = this._getItemObject(activeitem, null);
                                checkData["isInteraction"] = false;
                                if (this.model.checkChange)
                                    this._trigger('checkChange', checkData);
                            }
                        }
                    }
                }
            }
            this._setSelectionValues();
        },
        uncheckItemsByIndices: function (value) {
            if ((ej.isNullOrUndefined(value))) return false;
            var checkitems = value.toString().split(',');
            if (checkitems.length > 0) {
                for (var i = 0; i < checkitems.length; i++) {
                    if (checkitems[i] != null) {
                        var index = parseInt(checkitems[i]);
                        var unselectitem = $(this.element.children("li:not('.e-ghead')")[parseInt(index)]);
                        if (this.model.showCheckbox) {
                            if (($(unselectitem).find('.listcheckbox').ejCheckBox('isChecked'))) {
                                $(unselectitem).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                                this.checkedStatus = false;
                                var itemIndex = $.inArray(index, this.model.checkedIndices);
                                if ($.inArray(index, this._checkedItems) > -1) this._checkedItems.splice(itemIndex, 1);
                                if (itemIndex > -1) this.model.checkedIndices.splice(itemIndex, 1);
                                var unselectData = this._getItemObject(unselectitem, null);
                                unselectData["isInteraction"] = false;
                                if (this.model.checkChange)
                                    this._trigger('checkChange', unselectData);
                            }
                        }
                    }
                }
            }
            this._setSelectionValues();
        },
        selectAll: function () {
            if (!this.model.showCheckbox && this.model.allowMultiSelection) {
                var activeItem = this.element.children("li:not('.e-ghead')");
                for (var i = 0; i < activeItem.length; i++) {
                    if (!$(activeItem[i]).hasClass("e-select") && !$(activeItem[i]).hasClass("e-disable")) {
                        $(activeItem[i]).addClass("e-select");
                        this._selectedItems.push($(activeItem[i]));
                        this.model.selectedIndices.push(i);
                        var selectData = this._getItemObject(activeItem, null);
                        selectData["isInteraction"] = false;
                        if (this.model.select)
                            this._trigger('select', selectData);
                    }
                }
            }
            this._setSelectionValues();
        },
        //Deprecated Method
        unSelectAll: function () { this.unselectAll(); },
        unselectAll: function () {
            if (!this.model.showCheckbox)
                this._removeListHover();
            this._setSelectionValues();
            return this;
        },
        //deprecated function
        selectItemsByIndex: function (value) {
            this.selectItemsByIndices(value);
        },
        selectItemsByIndices: function (value) {
            if (ej.isNullOrUndefined(value)) return false;
            var selectitems = value.toString().split(',');
            if (this.model.allowMultiSelection) {
                for (var i = 0; i < selectitems.length; i++) {
                    if (selectitems[i] != null && !isNaN(parseInt(selectitems[i])) && selectitems[i] < this.element.children('li').length) {
                        var index = parseInt(selectitems[i]);
                        this._activeItem = index;
                        var activeitem = $(this.element.children("li:not('.e-ghead')")[this._activeItem]);
                        if (!activeitem.hasClass("e-select")) {
                            activeitem.addClass("e-select");
                            this._selectedItems.push(activeitem);
                            this.model.selectedIndices.push(index);
                            if (this.model.showCheckbox) {
                                if (!($(activeitem).find('.listcheckbox').ejCheckBox('isChecked'))) {
                                    $(activeitem).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                                    activeitem.removeClass("e-select");
                                    if (!($.inArray(this._activeItem, this._checkedItems) > -1)) this._checkedItems.push(this._activeItem);
                                    if (!($.inArray(activeitem[0], this.model.checkedIndices) > -1)) this.model.checkedIndices.push(this._activeItem);
                                }
                            }
                            var selectData = this._getItemObject(activeitem, null);
                            selectData["isInteraction"] = false;
                            if (this.model.select)
                                this._trigger('select', selectData);
                        }
                    }
                }
            }
            this._setSelectionValues();
        },
        //deprecated property
        unselectItemsByIndex: function (value) {
            this.unselectItemsByIndices(value);
        },
        unselectItemsByIndices: function (value) {
            var selectitems = value.toString().split(',');
            for (var i = 0; i < selectitems.length; i++) {
                if (selectitems[i] != null) {
                    var index = parseInt(selectitems[i]);
                    var activeitem = $(this.listItemsElement[index]);
                    this._activeItem = index;
                    activeitem.removeClass('e-active e-select');
                    if (this.model.showCheckbox) {
                        if (($(activeitem).find('.listcheckbox').ejCheckBox('isChecked'))) {
                            $(activeitem).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                            var itemIndex = $.inArray(index, this.model.checkedIndices);
                            if ($.inArray(index, this._checkedItems) > -1) this._checkedItems.splice(itemIndex, 1);
                            if (itemIndex > -1) this.model.checkedIndices.splice(itemIndex, 1);
                        }
                    }
                    if (this.model.selectedIndex == index) this.model.selectedIndex = this._activeItem = null;
                    var itemIndex = this._selectedItems.indexOf(activeitem[0]);
                    this._selectedItems.splice(this.model.selectedIndices.indexOf(itemIndex), 1);
                    this.model.selectedIndices.splice(this.model.selectedIndices.indexOf(itemIndex), 1);

                    var unselectData = this._getItemObject(activeitem, null);
                    unselectData["isInteraction"] = false;
                    if (this.model.unselect)
                        this._trigger('unselect', unselectData);
                }
            }
            this._setSelectionValues();
        },
        unselectItemByIndex: function (index) {
            index = parseInt(index);
            var unselectitem = $(this.element.children("li:not('.e-ghead')")[index]);
            if (this.model.showCheckbox) {
                if (($(unselectitem).find('.listcheckbox').ejCheckBox('isChecked'))) {
                    $(unselectitem).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                    var itemIndex = $.inArray(index, this.model.checkedIndices);
                    if ($.inArray(index, this._checkedItems) > -1) this._checkedItems.splice(itemIndex, 1);
                    if (itemIndex > -1) this.model.checkedIndices.splice(itemIndex, 1);
                }
            }
            if (unselectitem.hasClass('e-select')) {
                unselectitem.removeClass('e-active e-select');
                if (this.model.selectedIndex == index) this.model.selectedIndex = this._activeItem = null;
                var itemIndex = this._selectedItems.indexOf(unselectitem[0]);
                this._selectedItems.splice(this.model.selectedIndices.indexOf(itemIndex), 1);
                this.model.selectedIndices.splice(this.model.selectedIndices.indexOf(itemIndex), 1);
                var unselectData = this._getItemObject(unselectitem, null);
                unselectData["isInteraction"] = false;
                if (this.model.unselect)
                    this._trigger('unselect', unselectData);
            }
            this._setSelectionValues();
        },
        selectItemByText: function (text) {
            if (!ej.isNullOrUndefined(text))
            this[(this.model.allowMultiSelection ? "selectItemsByIndices" : "selectItemByIndex")](this.getIndexByText(text));
        },
        selectItemByValue: function (value) {
            this[(this.model.allowMultiSelection ? "selectItemsByIndices" : "selectItemByIndex")](this.getIndexByValue(value));
        },
        unselectItemByText: function (text) {
            this[(this.model.allowMultiSelection ? "unselectItemsByIndices" : "unselectItemByIndex")](this.getIndexByText(text));
        },
        unselectItemByValue: function (value) {
            this[(this.model.allowMultiSelection ? "unselectItemsByIndices" : "unselectItemByIndex")](this.getIndexByValue(value));
        },
        getSelectedItems: function () {
            var items = [], proxy = this;
            $(proxy.model.selectedIndices).each(function (index, elementIndex) {
                items.push(proxy.getItemByIndex(elementIndex));
            });
            return items;
        },
        getCheckedItems: function () {
            var items = [], proxy = this;
            $(proxy.model.checkedIndices).each(function (index, elementIndex) {
                items.push(proxy.getItemByIndex(elementIndex));
            });
            return items;
        },
        removeItem: function () {
            return this.removeSelectedItems();
        },
        removeItemByText: function (text) {
            if (ej.isNullOrUndefined(this.getItemByText(text))) return false;
            return this.removeItemByIndex(this.getItemByText(text).index);
        },
        hideSelectedItems: function () {
            var items = this.getSelectedItems();
            this._hideOrShowItemsByIndex(items, "hide");
        },
        hideCheckedItems: function () {
            var items = this.getCheckedItems();
            this._hideOrShowItemsByIndex(items, "hide");
        },
        _hideOrShowItemsByIndex: function (items, hideOrShow) {
            if ($.type(items) == "number") {
                if (hideOrShow == "hide") {
                    $(this.listItemsElement[items]).hide();
                    if ($(this.listItemsElement[items]).next().hasClass('e-ghead'))
                        $(this.listItemsElement[items]).prev().hide();
                }
                else {
                    $(this.listItemsElement[items]).show();
                    if ($(this.listItemsElement[items]).prev().hasClass('e-ghead'))
                        $(this.listItemsElement[items]).prev().show();
                }
            }
            else {
                for (var litem = 0; litem < items.length; litem++) {
                    if (hideOrShow == "hide")
                        items[litem].item ? items[litem].item.hide() : $(this.listItemsElement[items[litem]]).hide();
                    else
                        items[litem].item ? items[litem].item.show() : $(this.listItemsElement[items[litem]]).show();
                }
            }
            this._refreshScroller();
        },
        showItemsByIndices: function (items) {
            this._hideOrShowItemsByIndex(items, "show");
        },
        hideItemsByIndices: function (items) {
            this._hideOrShowItemsByIndex(items, "hide");
        },
        _hideOrShowItemsByValue: function (values, hideOrShow) {
            if ($.type(values) == "array") {
				for(var i=0;i < this.listItemsElement.length;i++){
					 for (var length = 0; length <= values.length; length++) {
                        if ($(this.listItemsElement[i]).attr("value") == values[length])
                            (hideOrShow == "hide") ? $(this.listItemsElement[i]).hide() : $(this.listItemsElement[i]).show();
                    }			
			 }                
            }
            else {
                for(var i=0;i < this.listItemsElement.length;i++){
                    if ($(this.listItemsElement[i]).attr("value") == values)
                        (hideOrShow == "hide") ? $(this.listItemsElement[i]).hide() :$(this.listItemsElement[i]).show();
                }
            }
            this._refreshScroller();
        },
        showItemsByValues: function (value) {
            this._hideOrShowItemsByValue(value, "show");
        },
        hideItemsByValues: function (value) {
            this._hideOrShowItemsByValue(value, "hide");
        },
        showItemByValue: function (value) {
            this._hideOrShowItemsByValue(value, "show");
        },
        hideItemByValue: function (value) {
            this._hideOrShowItemsByValue(value, "hide");
        },
        showItemByIndex: function (item) {
            this._hideOrShowItemsByIndex(item, "show");
        },
        hideItemByIndex: function (item) {
            this._hideOrShowItemsByIndex(item, "hide");
        },
        hide: function () {
            this.listContainer.hide();
        },
        show: function () {
            this.listContainer.show()
        },
        hideAllItems: function () {
            this.element.find("li:visible").hide()
            this._refreshScroller();
        },
        showAllItems: function () {
            this.element.find("li:hidden").show()
            this._refreshScroller();
        },
        _stateMaintained: function (index) {
            var lenth, len, value, j;
            this.model.disableItemsByIndex = [];
            this.model.selectedIndices = [];
            this.model.checkedIndices = [];
            if (this.model.selectedIndex >= index && this.model.selectedIndex != null) {
                if (this.model.selectedIndex == index || $(this.element.children()[index - 1]).hasClass('e-disable'))
                    this.model.selectedIndex = null;
                else if (this.model.selectedIndex != index)
                    this.model.selectedIndex -= 1;
            }
            len = $(index).length;
            if (len > 1) {
                for (var i = len; i >= 0; i--)
                    $(this.element.children()[index[i]]).remove();
                lenth = this.element.children().length;
                for (j = 0; j < lenth; j++)
                    if ($(this.element.children()[j]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(j);
            }
            else {
                value = index - 1;
                for (value; value >= 0; value--) {
                    if ($(this.element.children()[value]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(value);
                    if ($(this.element.children()[value]).hasClass('e-select'))
                        this.model.selectedIndices.push(value);
                    if ($(this.element.children()[value]).find('.listcheckbox').ejCheckBox('isChecked'))
                        this.model.checkedIndices.push(value);
                }
                index = parseInt(index) + 1;
                for (index; index < this._listSize; index++) {
                    if ($(this.element.children()[index]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(index - 1);
                    if ($(this.element.children()[index]).hasClass('e-select'))
                        this.model.selectedIndices.push(index - 1);
                    if ($(this.element.children()[index]).find('.listcheckbox').ejCheckBox('isChecked'))
                        this.model.checkedIndices.push(index - 1);
                }
            }
        },
        removeAll: function () {
            if (ej.isNullOrUndefined(this.dataSource())) {
                var text = [], lbItems = this.element.find("li");
                $(lbItems).each(function (i, e) {
                    text.push($(this).text());
                    e.remove();
                });
                this._refreshItems();
                return text;
            }
            else if (!(this.dataSource() instanceof ej.DataManager)) {
                var elements = [], count = $(this.listItemsElement).length;
                for (var i = 0; i < count; i++) {
                    elements.push(this._getRemovedItems([parseInt(0)]));
                }
                return elements;
            }
        },
        removeItemByIndex: function (index) {
            var text, selectItem = this.model.selectedIndex,removedElem=this.element.find("li:not('.e-ghead')");
            if (ej.isNullOrUndefined(this.dataSource())) {
                text = $(removedElem[index]).remove().text();
                this._stateMaintained(index);
                this._refreshItems();
            }
            else if (!(this.dataSource() instanceof ej.DataManager)) text = this._getRemovedItems([parseInt(index)]);
            this.model.selectedIndex = (index == selectItem) ? null : index < selectItem ? selectItem - 1 : selectItem;
            return text;
        },
        removeSelectedItems: function () {
            if (this.model.showCheckbox) return false;
            if (ej.isNullOrUndefined(this.dataSource())) {
                var text = this.value();
                $(this.getSelectedItems()).each(function (i, e) {
                    e.item.remove()
                });
                this._refreshItems();
                return text;
            }
            else if (!(this.dataSource() instanceof ej.DataManager)) {
                this.model.selectedIndex = null;
                return this._getRemovedItems(this.model.selectedIndices);
            }
        },
        _getRemovedItems: function (index) {
            var removedItems = [];
            this._stateMaintained(index);
            this.value(null);
            this._activeItem = null;
            this.dataSource(this.dataSource().filter(function (e, i) {
                if (index.indexOf(i) != -1)
                    removedItems.push(e);
                else
                    return true;
            }));
            this.refresh(true);
            return removedItems;
        },
        getIndexByValue: function (value) {
            var index;
			for(var i=0;i < this.listItemsElement.length;i++){
				if($(this.listItemsElement[i]).attr("value") == value){
					index=i;
                    break;					
				}             
			}                     
			return index;
        },
        getIndexByText: function (text) {
            var index;
            if (this.model.allowMultiSelection) {
                var text = text.split(",");
                index = [];
            }
			for(var i=0;i < this.listItemsElement.length;i++){
				if (typeof text == "object") {
                    for (var j = 0; j < text.length; j++) {
                        if ($(this.listItemsElement[i]).text() == text[j]) {                           
                            index.push(i);                          
                            break;							
                        }
                    }
                }
                else if ($(this.listItemsElement[i]).text() == text) {
                    index = i;  
                    break;					
                }				
				}			                    
            return index;
        },
        getTextByIndex: function (index) {
            return $(this.element.find("li:not('.e-ghead')")[index]).text();
        },
        getItemByText: function (text) {
            var proxy = this, obj;
            this.listItemsElement.each(function () {
                if ($(this).text() == text) {
                    obj = proxy._getItemObject($(this));
                    return false;
                }
            });
            return obj;
        },
        getItemByIndex: function (index) {
            return this._getItemObject($(this.element.children("li:not('.e-ghead')")[index]));
        },
        getListData: function () {
            if (ej.DataManager && this.dataSource() instanceof ej.DataManager) {
                if(this.model.allowVirtualScrolling) {
                    this.listitems = this.element.find('li');
                    return this.listitems;
                }
                else
                    return this.listitems;
            }
            else if (this.dataSource()){
				if(this.model.sortOrder != "none" && !(this.mapCateg && this.mapCateg != ""))
				{
                    var sortQuery = ej.Query().sortBy(this.model.fields.text, this.model.sortOrder, true);
                    var sublist = ej.DataManager(this.dataSource()).executeLocal(sortQuery);              
				    return sublist;
				}
			
			     return this.dataSource();
		}
            else
                return;
        },
        enableItem: function (text) {
            var proxy = this;
            this.listItemsElement.each(function () {
                if ($(this).text() == text) {
                    $(this).removeClass("e-disable");
                    if (proxy.model.showCheckbox) $(this).find(".listcheckbox").ejCheckBox("enable");
                    proxy._disabledItems.splice($(this).index().toString());
                    return false;
                }
            });
        },
        disableItem: function (text) {
            var proxy = this;
            this.listItemsElement.each(function () {
                if ($(this).text() == text) {
                    $(this).addClass("e-disable");
                    if (proxy.model.showCheckbox) $(this).find(".listcheckbox").ejCheckBox("disable");
                    proxy._disabledItems.push($(this).index().toString());
                    return false;
                }
            });
        },
        moveUp: function () {
            var process = (this.model.fields.groupBy != null) ? (this.model.allowMultiSelection || this.model.showCheckbox) ? false : true : true;
            if (process) {
                this.checkedorselected = this.model.checkedIndices.length == 0 ? this.model.selectedIndices.reverse() : this.model.checkedIndices.reverse();
				this._checkstate(true);
               
            }
        },
				
        moveDown: function () {
            var process = (this.model.fields.groupBy != null) ? (this.model.allowMultiSelection || this.model.showCheckbox) ? false : true : true;
            if (process) {
                this.checkedorselected = this.model.checkedIndices.length == 0 ? this.model.selectedIndices : this.model.checkedIndices;   this._checkstate();
                }
        },
		
		_checkstate:function(ismoveup){			
			 var curItem = $(this.element.children("li:not('.e-ghead')")[this.checkedorselected[0]]);
                if ((ismoveup && !curItem.prev().hasClass("e-ghead")) || !curItem.next().hasClass("e-ghead") ) {
                    if (!ej.isNullOrUndefined(this.checkedorselected)) {
                        var selectIndex = 0;
                        var listval = this._getItem(this.checkedorselected[selectIndex]);
                        this._moveupdown(listval, selectIndex, ismoveup ? "up":"down");
                    }
                }			
		},
		
        _moveItem: function (item, list, direction) {
            var selectedItem = item, index = item.index(), moveup = (direction == "up"), movedown = (direction == "down");
			this._addListHover();
			this._getItem(this._selectedItem).removeClass("e-hover");
            if (moveup) {
                list.insertAfter(selectedItem);
                if (list.hasClass('e-disable') && $.inArray(index.toString(), this._disabledItems) > -1) {
                    this._disabledItems.splice($.inArray(index.toString(), this._disabledItems), 1);
                    this._disabledItems.push((index + 1).toString());
                }
				  this._selectedItem -= 1;
                  this._refreshItems();
            } else if (movedown) {
                list.insertBefore(selectedItem);
                if (list.hasClass('e-disable') && $.inArray(index.toString(), this._disabledItems) > -1) {
                    this._disabledItems.splice($.inArray(index.toString(), this._disabledItems), 1);
                    this._disabledItems.push((index - 1).toString());
                }
				 this._selectedItem += 1;
                 this._refreshItems();
            }
        },
        _moveupdown: function (list, index, direction) {

            var j = this.checkedorselected[index], next, k;
            var i = 0, i = j;
            while (i < $(this.element.children("li:not('.e-ghead')")).length) {
                next = $(this.element.children("li:not('.e-ghead')")[i]);
                if (ej.isNullOrUndefined(next)) break;
                if (next.hasClass("e-select") || next.find("span").hasClass("e-checkmark")) {
                    k = i;
                    direction == "down" ? eval(i++) : eval(i--);
                    continue;
                }
                else break;
            }
            if (!ej.isNullOrUndefined(next) && i < $(this.element.children("li")).length) this._moveItem(list, next, direction);

            if (index < this.checkedorselected.length) {
                var ele = $(this.element.children("li")[this.checkedorselected[index]]);
                if (ele.next().hasClass("e-select") || ele.next().find("span").hasClass("e-checkmark")) var oneafter = direction == "down" ? true : false;
                else if (ej.isNullOrUndefined(ele[0])) var oneafter = direction == "up" ? true : false;
                else if (ele.hasClass("e-select") || ele.find("span").hasClass("e-checkmark")) {
                    this._moveupdown(ele, index + 1, direction);
                }

            }

            var length = this.element.children("li:not('.e-ghead')").length;
            if (this.model.checkedIndices.length == 0) {
                this.model.selectedIndices = [];
                for (var i = 0; i < length; i++) {
                    if ($(this.element.children("li:not('.e-ghead')")[i]).hasClass('e-select'))
                        this.model.selectedIndices.push(i);
                }
            } else {
                this.model.checkedIndices = [];
                for (var j = 0; j < length; j++)
                    if ($.parseJSON($(this.element.children("li:not('.e-ghead')")[j]).find("span").attr("aria-checked")))
                        this.model.checkedIndices.push(j);
            }

        },


        checkAll: function () {
            if (!this.model.showCheckbox) return false;
            var items = this.element.find("li:not('.e-ghead')");
            for (var i = 0; i < items.length; i++) {
                if (!($(items[i].firstChild).find('.listcheckbox').ejCheckBox('isChecked'))) {
                    $(items[i].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                    this._checkedItems.push(items[i]);
                    this.model.checkedIndices.push(i);
                }
            }
			this._setSelectionValues();
            this.model.uncheckAll = false;
        },
        //Deprecated Method
        unCheckAll: function () { this.uncheckAll(); },
        uncheckAll: function () {
            if (!this.model.showCheckbox) return false;
            var items = this.element.find("li:not('.e-ghead')");
            for (var i = 0; i < items.length; i++)
                if ($(items[i].firstChild).find('.listcheckbox').ejCheckBox('isChecked'))
                    $(items[i].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
            this._checkedItems = [];
            this.model.checkedIndices = [];
			this._setSelectionValues();
            this.model.checkAll = false;
        },
        addItem: function (val, index) {
            var text, value, id;
            var index = (!ej.isNullOrUndefined(index) && index <= this.element.find("li:not('.e-ghead')").length) ? index : this.element.find("li:not('.e-ghead')").length;
            var proxy = this, num = index;
            if (ej.isNullOrUndefined(this.dataSource())) {
                if (!(val instanceof Array)) {
					 if(this.model.fields.groupBy && typeof val == "object" ){ 
                          var _query = ej.Query().group(this.model.fields.groupBy);
                          var groupedList = ej.DataManager([val]).executeLocal(_query);
                            this.dataSource([]);  
                            for (var i = 0; i < groupedList.length; i++) {
							this._setMapFields();
                            this.dummyUl.push(ej.buildTag('li.e-ghead', groupedList[i].key)[0]);
                            this._loadlist(groupedList[i].items);
                            this.dataSource(this.dataSource().concat(groupedList[i].items));										
					               } 
					    }
					 else{						 
					     text = (typeof val == "object") ? val[this.model.fields.text] : val;
					     value = (!ej.isNullOrUndefined(this.model.fields.value)) ? val[this.model.fields.value] : "";
					     id = (!ej.isNullOrUndefined(this.model.fields.id)) ? val[this.model.fields.id] : "";
                    this.listitem = (this.element.find("li:not('.e-ghead')").length ?
                                        ((index - 1 < 0) ? $(this.element.find("li:not('.e-ghead')")[0]).before('<li role="option" value="' + value + '" id="' + id + '">' + text + '</li>') : $(this.element.find("li:not('.e-ghead')")[index - 1]).after('<li role="option" value="' + value + '" id="' + id + '">' + text + '</li>'))
                                         : $(this.element).html('<li role="option" value="' + value + '" id="' + id + '">' + text + '</li>'));
					 }
                    this.listitems = this.element.find("li:not('.e-ghead')");
                    this._addItemIndex = index;
                    if (this.model.showCheckbox) {
                        var $checkbox = ej.buildTag("input.listcheckbox e-align#popuplist" + (this.listitems.length - 1) + "_" + this._id, "", {}, {
                            type: "checkbox",
                            name: "list" + (this.listitems.length - 1)
                        });
                        $(this.listitems[index]).prepend($checkbox);
                        $($(this.listitems[index]).find(".listcheckbox")).ejCheckBox({
                            change: $.proxy(this._onClickCheckList, this)
                        });
                    }
                    if (this.model.allowDrag || this.model.allowDrop) this._enableDragDrop();
                    this._addItemIndex = null;
                    this._refreshItems();
                }
                else {
                    $(val).each(function (i, e) {
                        proxy.addItem(e, index);
                        index = index + 1;
                    })
                }
            }
            else if (!(this.dataSource() instanceof ej.DataManager)) {
                if (proxy.dataSource() instanceof Object) {
					var dup = new Object();
                    if (!(val instanceof Object)) {
                        dup[proxy.model.fields.text] = val;
                        val = dup;
                    }
                }
                else if (!(val instanceof Array)) val = [val];
                $(val).each(function (i, e) {
                    if(proxy.model.fields.groupBy==null||!ej.isNullOrUndefined(e[proxy.model.fields.groupBy])){
                    proxy.dataSource().splice(index, 0, e);
                    index = index + 1;
                 }
                })
                this.model.disableItemsByIndex = [];
                this.model.selectedIndices = [];
                this.model.checkedIndices = [];
                if (this.model.selectedIndex >= num)
                    this.model.selectedIndex += 1;
                var value = num - 1;
                for (value; value >= 0; value--) {
                    if ($(this.element.find("li:not('.e-ghead')")[value]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(value);
                    if ($(this.element.find("li:not('.e-ghead')")[value]).hasClass('e-select'))
                        this.model.selectedIndices.push(value);
                    if ($(this.element.children()[value]).hasClass("e-checkmark"))
                        this.model.checkedIndices.push(value);
                }
                for (num; num < this._listSize; num++) {
                    if ($(this.element.find("li:not('.e-ghead')")[num]).hasClass('e-disable'))
                        this.model.disableItemsByIndex.push(num + 1);
                    if ($(this.element.find("li:not('.e-ghead')")[num]).hasClass('e-select'))
                        this.model.selectedIndices.push(num + 1);
                    if ($(this.element.find("li:not('.e-ghead')")[num]).find('.listcheckbox').ejCheckBox('isChecked'))
                        this.model.checkedIndices.push(num + 1);
                }
                this.refresh(true);
				this.listItemsElement=this.element.find("li:not('.e-ghead')");
            }
        },
        enableItemByIndex: function (index) {
            if (typeof (index) == "number")
                this.enableItemsByIndices(index.toString());
        },
        disableItemByIndex: function (index) {
            if (typeof (index) == "number")
                this.disableItemsByIndices(index.toString());
        },
        disableItemsByIndices: function (value) {
            if (ej.isNullOrUndefined(value)) return false;
            var selectitems = value.toString().split(',');
            for (var i = 0; i < selectitems.length; i++) {
                if (selectitems.length > 0 && !($.inArray(selectitems[i], this._disabledItems) > -1)) {
                    var disable = $(this.element.children("li:not('.e-ghead')")[parseInt(selectitems[i])]).addClass('e-disable');
                    disable.find(".listcheckbox").ejCheckBox("disable");
                    this._disabledItems.push(selectitems[i]);
                }
            }
        },
        enableItemsByIndices: function (value) {
            var selectitems = value.toString().split(','), index;
            for (var i = 0; i < selectitems.length; i++) {
                if (selectitems.length > 0 && ($.inArray(selectitems[i], this._disabledItems) > -1)) {
                    index = $.inArray(selectitems[i], this._disabledItems);
                    var enable = $(this.element.children("li:not('.e-ghead')")[parseInt(selectitems[i])]).removeClass('e-disable');
                    enable.find(".listcheckbox").ejCheckBox("enable");
                    this._disabledItems.splice(index, 1);
                }
            }
        },
        _init: function () {
            this._id = this.element[0].id;
            this._isMozilla = ej.browserInfo().name == "mozilla" ? true : false;
            this._cloneElement = this.element.clone();
            this._deprecatedValue()._initialize()._render()._wireEvents();
            this._initValue = this.focused = this.datamerged = this.groupData = false;
            this._typeInterval = null;
            this._dummyVirtualUl = [];
            this._virtualCount = 0;
            this._liItemHeight = 0;
            this._typingThreshold = 2000;
            this._dataUrl = this.dataSource();
            //deprecatedFunction
            if (this.model.checkAll)
                this.checkAll();
            if (this.model.uncheckAll)
                this.uncheckAll();
            if (this.model.disableItemsByIndex)
                this.disableItemsByIndices(this.model.disableItemsByIndex.toString());
            if (this.model.enableItemsByIndex)
                this.enableItemsByIndices(this.model.enableItemsByIndex.toString());
            if (this.model.uncheckItemsByIndex)
                this.uncheckItemsByIndices(this.model.uncheckItemsByIndex.toString());
            this._deprecatedValue()._enabled(this.model.enabled);

        },
        _deprecatedValue: function () {
            this.model.itemDrop = (this.model.itemDrop || this.model.itemDropped);
            this.model.change = (this.model.change || this.model.selectIndexChanged);
            this.model.fields.checkBy = this.model.fields.selected || this.model.fields.checkBy;
            this.model.fields.tooltipText = this.model.fields.toolTipText || this.model.fields.tooltipText;
            this.model.fields.groupBy = this.model.fields.category || this.model.fields.groupBy;
            this.model.select = (this.model.select || this.model.selected);
            if (this.model.allowDragAndDrop != undefined)
                this.model.allowDrag = this.model.allowDrop = true;
            this.model.selectedIndex = this.model.selectedIndex != null ? this.model.selectedIndex : this.model.selectedItemIndex;
            this.model.checkedIndices = ((this.model.checkedIndices.length ? this.model.checkedIndices : null) || (this.model.checkItemsByIndex ? this.model.checkItemsByIndex : null) || (this.model.checkedItems.length ? this.model.checkedItems : null) || (this.model.checkedItemlist.length ? this.model.checkedItemlist : []));
            this.model.selectedIndices = ((this.model.selectedIndices.length ? this.model.selectedIndices : null) || (this.model.selectedItems.length ? this.model.selectedItems : null) || (this.model.selectedItemlist.length ? this.model.selectedItemlist : []));
            return this;
        },
        _setModel: function (options) {
            var option, refresh = false;
            for (option in options) {
                switch (option) {
                    case "value":
                        this._setText(ej.util.getVal(options[option]));
                        break;
                    case "dataSource":
                        if (!ej.isNullOrUndefined(this._isCasCadeTarget))
                            this.model.selectedIndex = null;
						this.model.checkedIndices = [];
                        options[option] = ej.util.getVal(options[option])
                        this._checkModelDataBinding(options[option]);
                        break;
                    case "query":
                        this._queryCheck(options[option]);
                        break;
                    case "fields":
                        this.model.fields = $.extend(this.model.fields, options[option]);
                        this._checkModelDataBinding(this.dataSource());
                        break;
                    case "template":
                        this.model.template = options[option];
                        this.refresh(true);
                        break;
                    case "loadDataOnInit":
                        this._loadContent = options[option];
                        this._checkModelDataBinding(this.dataSource());
                        break;
                    case "enableRTL":
                        this.model.enableRTL = options[option];
                        (this.model.enableRTL) ? this.listContainer.addClass("e-rtl") : this.listContainer.removeClass("e-rtl");
                        break;
                    case "enabled":
                        this.model.enabled = options[option];
                        this._enabled(options[option]);
                        break;
				    case "enableWordWrap":
					      this.model.enableWordWrap=options[option];
					      this._wordWrapItems(options[option]);
						  break;
                    case "height":
                    case "width":
                        this.model[option] = options[option];
                        this._setDimensions();
                        break;
                    case "cssClass":
                        this.model.cssClass = options[option];
                        this.listContainer.addClass(this.model.cssClass);
                        break;
                    case "showCheckbox":
                        this._checkboxHideShow(options[option]); if (options[option]) this._removeListHover();
                        break;
                    case "showRoundedCorner":
                        this.model.showRoundedCorner=options[option];
                        this._roundedCorner();
                        break;
                    case "selectedItemIndex":
                    case "selectedIndex":
                         if (this.listitem[options[option]] || options[option] == null || this.listitems[options[option]]) {
                            this.selectItemByIndex(options[option]);
                            this.model.selectedIndex = this.model.selectedItemIndex = options[option];
                        } else options[option] = this.model.selectedIndex;
                        break;
                    case "sortOrder":
                        this.model.sortOrder = options[option];
						this.display = true;
                        if (this.dataSource() != null)
                            this._showFullList();
                        else
                            this._renderlistContainer();
                        break;
                    case "checkItemsByIndex":
                    case "checkedItemlist":
                    case "checkedItems":
                    case "checkedIndices":
                        this.uncheckAll();
                        this.checkItemsByIndices(options[option].toString());
                        options[option] = this.model[option] = this.model.checkedIndices;
                        break;
                    case "uncheckItemsByIndex":
                        this.uncheckItemsByIndices(options[option].toString());
                        this.model[option] = options[option];
                        break;
                    case "selectedItemlist":
                    case "selectedItems":
                    case "selectedIndices":
                        this.unselectAll();
                        this.selectItemsByIndices(options[option].toString());
                        options[option] = this.model.selectedIndices;
                        break;
                    case "enableItemsByIndex":
                        this.model[option] = options[option];
                        this.enableItemsByIndices(options[option].toString());
                        break;
                    case "disableItemsByIndex":
                        this.model[option] = options[option];
                        this.disableItemsByIndices(options[option].toString());
                        break;
                    case "enableVirtualScrolling":
                        this.model.allowVirtualScrolling = options[option]; refresh = true;
                        break;
                    case "allowDrag":
                    case "allowDrop":
                    case "allowDragAndDrop":
                    case "allowVirtualScrolling":
                    case "virtualScrollMode":
                        this.model[option] = options[option]; refresh = true;
                        break;
                    case "checkAll":
                        this.model[option] = options[option]; if (options[option]) this.checkAll(); else this.uncheckAll();
                        break;
                    case "uncheckAll":
                        this.model[option] = options[option]; if (options[option]) this.uncheckAll(); else this.checkAll();
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "itemsCount":
                        var items = this.model.itemsCount;
                        if (this.model.height) {
                            this.model.itemsCount = options[option];
                            this._setItemsCount()._setDimensions();
                        } else options[option] = items;
                        break;
                    case "itemHeight":
                        var $liElements = this.listItemsElement;
                        var optionHeight = ej.isNullOrUndefined(options[option]) ? options[option] : options[option].toString().replace("px", "");
                        var modelHeight= ej.isNullOrUndefined(this.model.itemHeight) ? this.model.itemHeight :this.model.itemHeight.toString().replace("px", "");
                        for (var z = 0; z < $liElements.length; z++) {
                            var style = ej.isNullOrUndefined(options[option]) ? { "min-height": ej.isNullOrUndefined(this.model.itemHeight)? "20px":modelHeight } : { "min-height": optionHeight + "px", "height": optionHeight + "px" };
                            $liElements.eq(z).css(style);
                        } this.refresh();
                        break;
                    case "allowMultiSelection":
                        this.model.allowMultiSelection = options[option];
                        if (!options[option]) {
                            var index = this.model.selectedIndex;
                            this._removeListHover();
                            ej.isNullOrUndefined(index) ? "" : this.selectItemByIndex(index);
                        };
                        break;
                    case "totalItemsCount":
                        if (!ej.isNullOrUndefined(this.dataSource())) {
                            this.model.totalItemsCount = options[option];
                            if (this.model.query)
                                this._queryCheck(this.model.query);
                        }
                        break;
                }
            }
            if (refresh) this._refresh();
        },
        _destroy: function () {
            if (!ej.isNullOrUndefined(this._lilist)) $(this._lilist).ejDraggable("destroy");
            this.element.insertAfter(this.listContainer);
            this.element.find(".e-chkbox-wrap").remove();
            this.listContainer.remove();
			this.element.removeClass("e-ul");
            if (!this._isList) this.element.empty();
            $(window).off("resize", $.proxy(this._OnWindowResize, this));
			this._ListEventUnbind(this.element.children("li"));
            return this;
        },
		_ListEventUnbind: function (_ListItemsContainer) {
			_ListItemsContainer.off("contextmenu", $.proxy(this._OnMouseContext, this));
            _ListItemsContainer.off("click", $.proxy(this._OnMouseClick, this));
            _ListItemsContainer.off("touchstart mouseenter", $.proxy(this._OnMouseEnter, this));
            _ListItemsContainer.off("touchend mouseleave", $.proxy(this._OnMouseLeave, this));
		},
        _refresh: function () {
            this._destroy()._init();
        },
        _finalize: function () {
            if (this.model.selectedIndex != null)
                this.selectItemByIndex(this.model.selectedIndex);
            else if ((this.model.showCheckbox == true) && (this._selectedItems.length > 0))
                this._selectCheckedItem(this._selectedItems);
            if (this.model.checkedIndices != null) this.checkItemsByIndices(this.model.checkedIndices.toString());
            return this;
        },
        _initialize: function () {
            this._isList = this.element.children().length ? true : false;
            this.target = this.element[0];
            this._queryString = null;
            this._disabledItems = [];
            this._itemId = null;
            this._up = this._down = this._ctrlClick = false;
            this.checkedStatus = this._isScrollComplete = false;
            this._incqueryString = "";
            this._totalCount = 0;
            this._activeItem = null;
            this._initValue = true;
            this.model.allowVirtualScrolling = (this.model.allowVirtualScrolling) ? this.model.allowVirtualScrolling : this.model.enableLoadOnDemand;
            this.model.virtualScrollMode = (this.model.enableVirtualScrolling) ? "continuous" : this.model.virtualScrollMode;
            this._selectedItems = [];
            this._checkedItems = [];
            this._loadContent = this.model.loadDataOnInit;
            this._loadInitialRemoteData = true;
            this._skipInitialRemoteData = false;
            if (this.model.enableVirtualScrolling) this.model.allowVirtualScrolling = true;
            this._setItemsCount();
            return this;
        },
        _render: function () {
            this._savedQueries = this.model.query.clone();
            if (this.model.totalItemsCount)
                this._savedQueries.take(this.model.totalItemsCount);
            this._renderContainer()._addAttr(this.model.htmlAttributes);
            if (ej.DataManager && this.dataSource() instanceof ej.DataManager) {
                if (this._loadInitialRemoteData)
                    this._initDataSource(this.dataSource());
            }
            else
                this._showFullList();
            if (!this.dataSource()) this._finalize();
			this.listItemsElement=this.element.find("li:not('.e-ghead')");
            if (this.model.showRoundedCorner)
                this._roundedCorner();
            return this;
        },
        _queryCheck: function (value) {
            this._savedQueries = value.clone();
            this.element.empty();
            if (this.dataSource())
                this._checkModelDataBinding(this.dataSource());
        },
        _checkModelDataBinding: function (source) {
            this.mergeValue = null;
            this.dataSource(source);
            if (source != null && source.length != 0) {
                if (ej.DataManager && source instanceof ej.DataManager) this._initDataSource(source);
                else this._showFullList();
            } else { this.element.empty(); this._refreshScroller(); }
        },
        _initDataSource: function (source) {
            var proxy = this;
			if (proxy.model.actionBegin)
            proxy._trigger("actionBegin", {});
            proxy.listitems = proxy.dataSource();
            proxy._updateLoadingClass(true);
            var queryPromise = source.executeQuery(this._getQuery());
            queryPromise.done(function (e) {
                proxy._totalCount = e.count;
                proxy.listitems = e.result;
                proxy._updateLoadingClass()._showFullList()._trigger("actionSuccess", e);
                proxy._finalize();
                proxy._virtualPages = [0];
            }).fail(function (e) {
                proxy.dataSource(null);
                proxy._updateLoadingClass(true)._trigger("actionFailure", e);
            }).always(function (e) {
                if (proxy.model.checkAll)
                    proxy.checkAll();
                if (proxy.model.uncheckAll)
                    proxy.uncheckAll();
                proxy._trigger("actionComplete", e);
            });
        },
        _getQuery: function () {
            var queryManager;
            if (ej.isNullOrUndefined(this.model.query)) {
                var column = [],
                    mapper = this.model.fields;
                queryManager = ej.Query();
                for (var col in mapper)
                    if (col !== "tableName") column.push(mapper[col]);
                if (column.length > 0) queryManager.select(column);
                if (!this.dataSource().dataSource.url.match(mapper.tableName + "$")) !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            } else queryManager = this.model.query.clone();
            if(this.model.allowVirtualScrolling) {
                queryManager.requiresCount();
                queryManager.take(this.model.itemRequestCount);
            }
            return queryManager;
        },
        _getLiHeight: function () {
            this._liItemHeight = $(this.element.find('li')[0]).outerHeight();
        },
        _addDragableClass: function () {
            if (this.model.allowDrag || this.model.allowDrop) {
                this.element.css("cursor", "pointer");
                if (this.model.allowDrop) {
                    this.listContainer.addClass("e-droppable");
                    this.listBoxScroller.addClass("e-droppable");
                }
                var proxy = this;
                this.element.children("li").each(function (index) {
                    if (proxy.model.allowDrag) ($(this).addClass("e-draggable"));
                    if (proxy.model.allowDrop) ($(this).addClass("e-droppable"));
                });
            }
            return this;
        },
        _enableDragDrop: function () {
            if (this.model.allowDrag || this.model.allowDrop) this._drag();
        },
        _updateLoadingClass: function (value) {
            this.listContainer[(value ? "addClass" : "removeClass")]("e-load"); return this;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.listContainer.addClass(value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._enabled(false);
                else proxy.listContainer.attr(key, value);
            });
        },
        _renderContainer: function () {
            this.listContainer = ej.buildTag("div.e-ddl-popup e-box e-popup e-widget " + this.model.cssClass, "", {
                "visibility": "hidden"
            }, {
                "tabIndex": 0,
                "id": this._id + "_container"
            });
            this.listBoxScroller = ej.buildTag("div.e-listbox-container");
            this.ultag = ej.buildTag("ul.e-ul", "", {}, {
                "role": "listbox"
            });
            this.element = this.element.addClass("e-ul");
            this.listContainer.append(this.listBoxScroller).insertAfter(this.element);
            this.listBoxScroller.append(this.element);
            this.element.attr('data-ej-unselectable', 'on').css('user-select', 'none');
            this._hiddenInput = ej.buildTag("input#" + this._id + "_hidden", "", {}, {
                type: "hidden"
            }).insertBefore(this.element);
            this._hiddenInput.attr('name', this._id);
            return this;
        },
        _setMapFields: function () {
           var mapper = this.model.fields;
            this.mapFld = {
                _id: null,
                _imageUrl: null,
                _imageAttributes: null,
                _tooltipText: null,
                _spriteCSS: null,
                _text: null,
                _value: null,
                _htmlAttributes: null,
                _selectBy: null,
                _checkBy: null
            };
            this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
            this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
            this.mapFld._tooltipText = (mapper && mapper.tooltipText) ? mapper["tooltipText"] : "tooltipText";
            this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
            this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
            this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : this.listitems[0].text ? "text" : this._getObjectKey(this.listitems[0])[0];
            this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
            this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
            this.mapFld._checkBy = (mapper && mapper.checkBy) ? mapper["checkBy"] : "checkBy";
            this.mapFld._selectBy = (mapper && mapper.selectBy) ? mapper["selectBy"] : "selectBy";
            this.mapCateg = (mapper && mapper.groupBy) ? mapper["groupBy"] : ""
        },
        _getObjectKey: function (obj) {
            if (!Object.keys) {
                var keys = [];
                for (var i in obj) {
                    if (obj.hasOwnProperty(i)) {
                        keys.push(i);
                    }
                }
                return keys;
            }
            else return Object.keys(obj)
        },
        _itemStyle:function(){
            var height = ej.isNullOrUndefined(this.model.itemHeight) ? this.model.itemHeight : this.model.itemHeight.toString().replace("px", "");
            var itemHeight = ej.isNullOrUndefined(this.model.itemHeight) ? "" : "min-height:" + height + "px;height:" + height + "px";
            return { style: itemHeight }
        },
        sort: function () {
            var sortedlist = document.createElement("ul"), i, sortitems;
            $(sortedlist).append(this.itemsContainer.children());
            if (this.model.fields.groupBy != null || $(sortedlist).find(">.e-ghead").length > 0) {
                for (i = 0; i < $(sortedlist).find(">.e-ghead").length; i++) {
                    sortitems = $(sortedlist).find(">.e-ghead").eq(0).first().nextUntil(".e-ghead").get();
                    this._setSortList(sortedlist, sortitems);
                }
                var headerlist = document.createElement("ul"), headeritems, j;
                headeritems = $(sortedlist).clone().find('>.e-ghead').get();
                for (var k = 0; k < headeritems.length; k++)
                    headerlist.append(headeritems[k]);
                var headerdata = this._customSort(headerlist, headeritems);
                var groupSort = document.createElement("ul"), groupitems;
                var temp = $(sortedlist).find('li.e-ghead').get();
                if (this.model.sortOrder.toLowerCase() == "descending")
                    headerdata.reverse();
                for (var j = 0; j < headerdata.length; j++) {
                    groupSort.append(headerdata[j]);
                    for (var l = 0; l < temp.length; l++) {
                        if (headerdata[j].textContent == temp[l].textContent) {
                            groupitems = $(sortedlist).find(">.e-ghead").eq(l).first().nextUntil(".e-ghead").get();
                            for (var m = 0; m < groupitems.length; m++) {
                                groupSort.append(groupitems[m]);
                            }
                        }
                    }
                }
                this.itemsContainer = $(groupSort);
            }
            else {
                sortitems = $(sortedlist).children('li').get();
                this._setSortList(sortedlist, sortitems);
                this.itemsContainer = $(sortedlist)
            }
        },
        _customSort: function (headerlist, headeritems) {
            headeritems.sort(function (objA, objB) {
                var sortA = $(objA).text().toUpperCase();
                var sortB = $(objB).text().toUpperCase();
                return (sortA < sortB) ? -1 : (sortA > sortB) ? 1 : 0;
            });
            return headeritems;
        },
        _setSortList: function (sortedlist, sortitems) {
            this._customSort(sortedlist, sortitems);
            if (this.model.sortOrder.toLowerCase() == "descending") sortitems.reverse();
            if (this.model.fields.groupBy != null || $(sortedlist).find(">.e-ghead").length > 0) {
                $(sortedlist).append($("<li>").text($(sortedlist).find(">.e-ghead").eq(0).text()).addClass("e-ghead"));
                $(sortedlist).find(">.e-ghead").eq(0).remove();
            }
            $.each(sortitems, function (index, item) {
                $(sortedlist).append(item);
            });
        },
        _renderlistContainer: function () {
            this.hold = this.touchhold = false;
            this.item = "";
            this.startime = 0;
            this.listitemheight = 24;
            var list = this.listitems,
                i, ulempty, ulno, litag, _id, _txt, mapper = this.model.fields,
                predecessor;
            this.lastScrollTop = -1;
            this.dummyUl = $();
            if (this.model.enableRTL) this.listContainer.addClass("e-rtl");
            this._wordWrapItems();
            if (this.dataSource() == null || this.dataSource().length < 1) {
                predecessor = this.element.parents().last();
                if (this.model.targetID) this.docbdy = predecessor.find("#" + this.model.targetID);
                else this.docbdy = predecessor.find("#" + this._id);
                this.itemsContainer = this.docbdy;
                if(this.model.sortOrder != "none") this.sort();
                this.itemsContainer.children("ol,ul").remove();
                this.items = this.itemsContainer.children('li');
                this.items.children("img").addClass("e-align");
                this.items.children("div").addClass("e-align");
                var iHeight = parseInt(this.model.itemHeight) + "px";
                if (this.model.itemHeight) $('li').css({ "min-height": iHeight, "height": iHeight });
                this.element.append(this.itemsContainer.children());
            }
            else if (this.dataSource() != null && typeof list[0] != "object") {
                if (this._loadInitialRemoteData && this.mergeValue && this.model.virtualScrollMode == "continuous" && this.model.totalItemsCount)
                    this._loadlist(this.mergeValue);
                else if (this._loadInitialRemoteData && this.mergeValue && this.model.virtualScrollMode == "normal" && this.model.totalItemsCount) {
                    this.realUllength = 0;
                    this.mergeUl = [];
                    for (i = 0; i < this.mergeValue.length; i++)
                         this.mergeUl.push(ej.buildTag('li', this.mergeValue[i][this.model.fields.text], null, this._itemStyle())[0]);
                    this.element.append(this.mergeUl);
                    for (i = 0; i < this.model.totalItemsCount - this.mergeValue.length; i++)
                        this.dummyUl.push(ej.buildTag('li', null, null, this._itemStyle())[0]);
                    this.element.append(this.dummyUl);
                    this._refreshScroller();
                }
                else if (this._loadInitialRemoteData && this.mergeValue && !this.model.totalItemsCount)
                    this._initDataSource(this.dataSource());
            }
            else {
                this._setMapFields();
                var groupedList, _query;
                _query = this._savedQueries;
                this.listContainer.height(this.model.height);
                this.listitemheight = 24;
                if (this.model.allowVirtualScrolling) {
                    if (this.model.virtualScrollMode == "normal") {
                        this.realUllength = 0;
                        if (this.dataSource().length < 0) {
                            var query = this._savedQueries.take(parseInt(this.listContainer.height() / this.listitemheight));
                            var proxy = this;
                            if (ej.DataManager && this.dataSource() instanceof ej.DataManager) {
                                proxy.listitems = proxy.dataSource();
                                var queryPromise = this.dataSource().executeQuery(query);
                                queryPromise.done(function (e) {
								    proxy._trigger("actionBeforeSuccess", e);
                                    proxy.listitems = e.result;
                                    proxy._trigger("actionSuccess", e);
                                }).fail(function (e) { proxy._trigger("actionFailure", e); })
                                  .always(function (e) { proxy._trigger("actionComplete", e); });
                            }
                        }
                        if (this.mergeValue != groupedList && !ej.isNullOrUndefined(this.mergeValue)) {
                            this.mergeUl = [];
                            for (var i = 0; i < this.mergeValue.length; i++) {
                                var $liEle = ej.buildTag('li', this.model.template ? "" : this.mergeValue[i][this.model.fields.text], null,  this._itemStyle())[0]
                                if (this.model.template) $liEle.append(this._getTemplatedString(list[i]));
                                this.mergeUl.push($liEle[0]);
                            }
                            this.element.append(this.mergeUl);
                        }
                        if (!this.model.totalItemsCount)
                            var originalliLength = this.listitems.length;
                        else
                            var originalliLength = (this.mergeValue) ? this.model.totalItemsCount - this.mergeValue.length : this.model.totalItemsCount;
                        for (var i = 0; i < originalliLength; i++) {
                            var $listEle = ej.buildTag('li', null, null,  this._itemStyle());
                            this.dummyUl.push($listEle[0]);
                        }
                        this.dummyUl.attr("data-ej-page", 0);
                        this.element.append(this.dummyUl);
                    }
                    this._loadInitialData(_query, list);
                } else {
                    if (this.mapCateg && this.mapCateg != "") {
						if (this.model.sortOrder.toLowerCase() != "none") {
                            var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                            groupedList = ej.DataManager(list).executeLocal(sortQuery);
                        }
                        _query = ej.Query().group(this.mapCateg);
                        if(this.model.sortOrder.toLowerCase() == "none")
                       _query.queries.splice(0, 1);
                        groupedList = ej.DataManager(list).executeLocal(_query);                      
                        this.dataSource([]);
                        if(this.datamerged && this.model.fields.groupBy){
                                this.mergeUl = [];
                                for (var i = 0; i <this.mergeValue.length; i++) {
                                    this.mergeUl.push(this.mergeValue[i]);
                                   for(var j=0;j<groupedList[0].items.length;j++){
                                       if(this.mergeValue[i].category==groupedList[0].items[j].key)
                                           groupedList[0].items[j].items.push(this.mergeUl[i]);
                                        }     
                                    }
                           for(i = 0; i < groupedList[0].items.length; i++) {
                            this.dummyUl.push(ej.buildTag('li.e-ghead', groupedList[0].items[i].key)[0]);
                            this._loadlist(groupedList[0].items[i].items);
                            this.dataSource(this.dataSource().concat(groupedList[0].items[i].items));
                        }
                    }
                    else{
                            for (i = 0; i < groupedList.length; i++) {
                            this.dummyUl.push(ej.buildTag('li.e-ghead', groupedList[i].key)[0]);
                            this._loadlist(groupedList[i].items);
                            this.dataSource(this.dataSource().concat(this._newList));
                        }
                    } }
                    else {
                        groupedList = ej.DataManager(list).executeLocal(_query);
                        if (groupedList.length > 0) {
                            if (this.mergeValue != groupedList && !ej.isNullOrUndefined(this.mergeValue)) {
                                this.mergeUl = [];
                                for (i = 0; i < this.mergeValue.length; i++) {
                                    this.mergeUl.push(ej.buildTag('li', this.mergeValue[i][this.model.fields.text], null,  this._itemStyle())[0]);
                                    groupedList.push(this.mergeValue[i]);
                                }
                            }
                            if (this.model.template != null && this._loadContent) {
                                if (this.model.sortOrder.toLowerCase() != "none") {
                                    var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                                    list = ej.DataManager(list).executeLocal(sortQuery);
                                }
                                for (i = 0; i < list.length; i++) {
                                    var _dhtmlAttributes = this._getField(list[i], this.mapFld._htmlAttributes);
                                    var _did = this._getField(list[i], this.mapFld._id);
                                    litag = ej.buildTag('li');
                                    if ((_dhtmlAttributes) && (_dhtmlAttributes != "")) litag.attr(_dhtmlAttributes);
                                    if (_did) litag.attr('id', _did);
                                    if (this.model.template) litag.append(this._getTemplatedString(list[i]));
                                    this.dummyUl.push(litag[0]);
                                }
                                if (!this.model.allowVirtualScrolling) this.element.children().remove();
								var k = (this.model.virtualScrollMode == "continuous" && this.mergeValue) ? this.realUllength + this.mergeValue.length : this.realUllength;
                                if (this.element.children()[k] == null && (!this.model.allowVirtualScrolling || this.model.virtualScrollMode == ej.VirtualScrollMode.Continuous) && this._loadContent)								
                                this.element.append(this.dummyUl);
                            }
                            else {
                                this.realUllength = 0;
                                this._loadlist(groupedList);
                            }
                        }
                    }
                }
            }
            var proxy = this;
            if (groupedList) this.listitems = groupedList;
            this._setDimensions();
            this.listContainer.css({ "position": "relative", "height": "" });
            this.listBoxScroller.css({ "height": "", "width": "" });
            if(this.model.allowVirtualScrolling == true && this.model.virtualScrollMode == "normal") {
                this._getLiHeight();
                var totalHeight = this._totalCount * this._liItemHeight;
                this.element.height(totalHeight);
            }
            else if(this.model.allowVirtualScrolling == true && this.model.virtualScrollMode == "continuous") {
                this.element.css("height", "auto");
            }
            this.listContainer.ejScroller({
                height: this.listContainer.height(),
                width: 0,
                scrollerSize: 20,
                scroll: function (e) {
                    proxy._onScroll(e);
                },
            });
            this.scrollerObj = this.listContainer.ejScroller("instance");
            this._setDimensions();
            if(ej.isNullOrUndefined(this.display)){ 
			this.listContainer.css({ 'display': 'none', 'visibility': 'visible' }); }
			else
			this.display = null;	
            this._checkboxHideShow(this.model.showCheckbox)._checkitems()._showResult();
            //if (this.model.totalItemsCount)
            //    this._setTotalItemsCount();
        },
		  _wordWrapItems:function(){
			   this.model.enableWordWrap?this.listContainer.addClass("e-wrap").removeClass("e-nowrap"):this.listContainer.addClass("e-nowrap").removeClass("e-wrap");
			},
	
        _loadInitialData: function (query, list) {
            var _query = query.clone();
            this.realUllength = 0;
            if ((ej.DataManager && this.dataSource() instanceof ej.DataManager))
                _query = _query.range(0, parseInt(this.listContainer.height() / this.listitemheight));
            else
                _query = _query.range(0, this.listitems.length);
            var groupedList = list;
            if (this.mergeValue != groupedList && this.mergeValue != undefined && this.model.virtualScrollMode == "continuous") {
                this.mergeUl = [];
                for (var i = 0; i < this.mergeValue.length; i++)
                    this.mergeUl.push(ej.buildTag('li', this.mergeValue[i][this.model.fields.text], null,  this._itemStyle())[0]);
                this.element.append(this.mergeUl);
            }
            if (!this.mergeValue || (this.mergeValue && this._loadInitialRemoteData))
                this._loadlist(groupedList);
        },
        _loadlist: function (sublist) {
            this._dummyVirtualUl = []; this._newList = [];
            if (this.element != null) {
                var selectionArray = [];
                if (this.model.sortOrder.toLowerCase() != "none") {
                    var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                    sublist = ej.DataManager(sublist).executeLocal(sortQuery);
                }
                for (var j = 0; j < sublist.length; j++) {
                    var _did = this._getField(sublist[j], this.mapFld._id);
                    var _dimageUrl = this._getField(sublist[j], this.mapFld._imageUrl);
                    var _dimageAttributes = this._getField(sublist[j], this.mapFld._imageAttributes);
                    var _dspriteCss = this._getField(sublist[j], this.mapFld._spriteCSS);
                    var _dtext = this._getField(sublist[j], this.mapFld._text);
                    var _dvalue = this._getField(sublist[j], this.mapFld._value);
                    var _dhtmlAttributes = this._getField(sublist[j], this.mapFld._htmlAttributes);
                    var _dselectBy = this._getField(sublist[j], this.mapFld._selectBy);
                    var _dcheckBy = this._getField(sublist[j], this.mapFld._checkBy);
                    var _dtooltipText = this._getField(sublist[j], this.mapFld._tooltipText);
                    var k = (this.model.virtualScrollMode == "continuous" && this.mergeValue) ? this.realUllength + this.mergeValue.length : this.realUllength;
                    if ((_dvalue) && (_dvalue != "")) litag = ej.buildTag('li', "", "", $.extend( this._itemStyle(), {value: _dvalue}));
                    else var litag = ej.buildTag('li', null, null,  this._itemStyle()); if (_did) litag.attr('id', _did);

                    if ((_dimageUrl) && (_dimageUrl != "")) {
                        var imgtag = ej.buildTag('img.e-align', '', {}, {
                            'src': _dimageUrl,
                            'alt': _dtext
                        });
                        if ((_dimageAttributes) && (_dimageAttributes != "")) imgtag.attr(_dimageAttributes);
                        litag.append(imgtag);
                    }
                    if ((_dspriteCss) && (_dspriteCss != "")) {
                        var divtag = ej.buildTag('div.e-align ' + _dspriteCss + ' sprite-image');
                        litag.append(divtag);
                    }
                    if ((_dtext) && (_dtext != "")){
                    if(this.model.template) litag.append(this._getTemplatedString(sublist[j]))
                    else litag.append(_dtext);
                    }
                    if ((_dhtmlAttributes) && (_dhtmlAttributes != "")) litag.attr(_dhtmlAttributes);
                    if ((_dtooltipText) && (_dtooltipText != "")) litag.attr('data-content', _dtooltipText).addClass("e-tooltip");
                    if (_dcheckBy || this.model.checkAll) litag.addClass("checkItem");
                    if (_dselectBy || this.model.selectAll) litag.addClass("selectItem");
                    if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                        $(litag[0]).attr("data-ej-page", 0);
                        ($(this.dummyUl[k])).replaceWith(litag[0]);
                        this._dummyVirtualUl.push(litag[0]);
                    }
                    else
                        this.dummyUl.push(litag[0]);
                    this.realUllength += 1;
                }
                if (!this.model.allowVirtualScrolling) this.element.children().remove();
                if (this.element.children()[k] == null && (!this.model.allowVirtualScrolling || this.model.virtualScrollMode == ej.VirtualScrollMode.Continuous) && this._loadContent)
                    this.element.append(this.dummyUl);
                var listItems = this.element.find("li:not('.e-ghead')"); this.listItemsElement = this.element.find("li:not('.e-ghead')");
                if (this.model.showCheckbox && this.model.checkedIndices) {
                    for (var i = 0; i < listItems.length; i++)
                        if (this.model.checkedIndices.indexOf(i) != -1)
                            $(listItems[i]).addClass("checkItem");
                }
                else if (!this.model.showCheckbox) {
					if(this.value()!="" && !this.mapCateg && !this.mapCateg != "") this.selectItemByText(this.value());
                    for (var i = 0; i < listItems.length; i++)
                        if (this.model.selectedIndices.indexOf(i) != -1 || this.model.selectedIndex == i)
                            $(listItems[i]).addClass("selectItem");
                }
                this.element.find('.selectItem').each(function (i, e) {
                    selectionArray.push($(e).parent().find("li").index($(e)));
                });
                var proxy = this;
                if (!proxy.model.showCheckbox && !this.mapCateg && !this.mapCateg != "")
                    proxy._selectListItems();
                this.element.find('.checkItem').each(function (i, e) {
                    proxy.model.checkedIndices.push(proxy._elementIndex(e));
                });
				if(!this.mapCateg && !this.mapCateg != ""){
                if (selectionArray.length)
                    this.model.allowMultiSelection ? this.model.selectedIndices = selectionArray : this.model.selectedIndex = selectionArray[0];
                if (this.model.checkedIndices)
                    this.model.checkedIndices = $.grep(proxy.model.checkedIndices, function (el, index) { return index == $.inArray(el, proxy.model.checkedIndices); });
                else if (this.model.selectedIndices)
                    this.model.selectedIndices = $.grep(proxy.model.selectedIndices, function (el, index) { return index == $.inArray(el, proxy.model.selectedIndices); });
				}
                this._loadContent = true;
            }
			this._newList = sublist;
            return this;
            
        },
        _applySelection: function () {
            if (!(this.model.fields.checkBy || this.model.fields.selectBy)) return false;
            if (this.model.showCheckbox) {
                this.uncheckAll();
                this.checkItemsByIndices(this.model.checkedIndices);
            }
            else {
                if (this.model.allowMultiSelection)
                    this.selectItemsByIndices(this.model.selectedIndices);
                else {
                    this.unselectAll();
                    this.selectItemByIndex(this.model.selectedIndex);
                }
            }
        },
        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },
        _getTemplatedString: function (list) {
            var str = this.model.template,
                start = str.indexOf("${"),
                end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                str = str.replace(content, this._getField(list, field));
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },
        _checkboxHideShow: function (value) {
            this.model.showCheckbox = value;
            (value) ? this._createCheckbox() : this._removeCheckbox();
            return this;
        },
        _createCheckbox: function () {
            var i, _extchk, chklist, me = this;
            this._listitems = this.listContainer.find("ol,ul").length > 0 ? this.listContainer.find("ol,ul").children("li:not('.e-ghead')") : this.element.children("li:not('.e-ghead')");
            chklist = this._listitems.find('input[type=checkbox]');
            for (i = 0; i < this._listitems.length; i++) {
                if ($(this._listitems[i]).text() != "") {
                    var $checkbox = ej.buildTag("input.listcheckbox e-align#popuplist" + i + "_" + this._id, "", {}, {
                        type: "checkbox",
                        name: "list" + i
                    });
                    if (!$(this._listitems[i]).find('input[type=checkbox]').length)
                        $(this._listitems[i]).prepend($checkbox);
                }
            }
            this.listContainer.find(".listcheckbox").ejCheckBox({
                cssClass: this.model.cssClass,
                change: $.proxy(this._onClickCheckList, this)
            });
            for (var i = 0; i < this._listitems.length; i++) {
                var checkbox = $(this._listitems[i]).find(".listcheckbox");
                if ($(this._listitems[i]).hasClass('e-disable')) checkbox.ejCheckBox('disable');
                else if ( $(this._listitems[i]).hasClass('checkItem') && !checkbox.ejCheckBox('isChecked')) {                    
                    checkbox.ejCheckBox({
                        "checked": true
                    });
                    this._activeItem = i;
                    this.checkedStatus = true;
                    var checkData = this._getItemObject($(this._listitems[i]), null);
                    checkData["isInteraction"] = true;
                    $(this._listitems[i]).removeClass('checkItem');
                }
            }
            for (var i = 0; i < this.model.selectedIndices.length; i++) {
                this.checkItemsByIndices(this.model.selectedIndices);
            }
        },
        _removeCheckbox: function () {
            var i, checkbox;
            this.listitem = this.listContainer.find("ol,ul").children("li");
            checkbox = this.listitem.find('.listcheckbox');
            if (checkbox.length > 0) {
                this.listitem.find('.listcheckbox').ejCheckBox('destroy');
                this.listitem.find('input[type=checkbox]').remove();
                if (this.model.allowMultiSelection) {
                    for (i = 0; i < this.model.checkedIndices.length; i++) {
                        this.selectItemsByIndices(this.model.checkedIndices);
                    }
                } else this.selectItemByIndex(this.model.checkedIndices[0]);
                this._checkedItems = this.model.checkedIndices = [];
            }
        },
        _selectCheckedItem: function (chkitems) {
            if (chkitems.length > 0)
                for (var i = 0; i < chkitems.length; i++)
                    this._selectedItems.push(chkitems[i]);
        },
        _refreshScroller: function () {
            if (this.model.virtualScrollMode == "continuous") {
                this.listContainer.css({ "display": "block" });
                if (this.scrollerObj) {
                    this.scrollerObj.model.height = this.listContainer.height();
                    this.scrollerObj.refresh();
                }
            } else {
                this.listContainer.find(".e-vhandle div").removeAttr("style");
                var listboxcontent = this.listBoxScroller.height();
                this.listContainer.css({ "display": "block" });
                if (this.scrollerObj) {
                    this.scrollerObj.model.height = this.listContainer.css("height");
                    this.scrollerObj.refresh();
                }
                this.listBoxScroller.css("height", "100%");
            }
            if (!this.model.enabled) {
                if (this.scrollerObj) this.scrollerObj.disable();
            }
            this.listContainer.css("height", this.model.height);
        },
        _setDimensions: function () {
            this.listContainer.css({ "width": this.model.width, "height": this.model.height });
            this._refreshScroller();
            return this;
        },
        _setItemsCount: function () {
            if(this.model.height=="auto"){
            if (this.model.itemsCount && this.model.itemsCount != 0 && this.model.height == "auto")
                this.model.height = this.model.itemsCount * 30;
            else
                this.model.height = (this.model.height == "auto") ? "220" : this.model.height;
              }
               else if (this.model.height != "auto" && this.model.itemsCount) {
                if (this.model.itemHeight)
                this.model.height = (this.model.height == "auto") ? "220" : this.model.itemsCount * this.model.itemHeight.replace(/[^-\d\.]/g, '');
                else
                    this.model.height = (this.model.height == "auto") ? "220" : this.model.itemsCount * 30;
            }
            else if (this.model.height != "auto" && this.model.itemsCount !=0) {
                this.model.height;
            }
            return this;
        },
        _setTotalItemsCount: function () {
            if (this.model.virtualScrollMode != "continuous") {
                this.element.height(this.element.find("li").outerHeight() * this.model.totalItemsCount);
                this.scrollerObj.refresh();
            }
        },

        _refreshContainer: function () {
            this.listContainer.css({ "position": "relative" });
            this._setDimensions()._roundedCorner()._refreshScroller();
        },
        _drag: function () {
            var proxy = this,
                pre = false,
                _clonedElement = null,
                dragContainment = null;
            this._listitem = this.element.parent();
            this._lilist = this._addItemIndex ? $($(this._listitem).find("li")[this._addItemIndex]) : $(this._listitem).find("li");
            this._lilist.not(".e-js").ejDraggable({
                dragArea: dragContainment,
                clone: true,
                dragStart: function (args) {
                  if( proxy.model.allowDrag || proxy.model.allowDragAndDrop ) {
                    if (!$(args.element.closest('.e-ddl-popup.e-js')).hasClass('e-disable') && !args.element.hasClass('e-disable')) {
                        var draggedobj = $("#" + this.element.parent()[0].id).data("ejListBox");
                        draggedobj._refreshItems();
                        var dragEle = proxy.getSelectedItems();
                        if (dragEle.length > 1 ? proxy._onDragStarts(dragEle, args.target) : proxy._onDragStarts([proxy._getItemObject(args.element, args)], args.target)) {
                            args.cancel = true;
                            _clonedElement && _clonedElement.remove();
                            return false;
                        }
                    } else {
                        _clonedElement && _clonedElement.remove();
                        return false;
                    }
                  }
                  else return false;
                },
                drag: function (args) {
                    var target = args.target;
                    var dragEle = proxy.getSelectedItems();
                    if (dragEle.length > 1 ? proxy._onDrag(dragEle, target) : proxy._onDrag([proxy._getItemObject(args.element, args)], target)) return false;
                    if ($(target).hasClass('e-droppable') || $(target).parent().hasClass('e-droppable'))
                        $(target).addClass("allowDrop");
                },
                dragStop: function (args) {
                    if (!args.element.dropped)
                        _clonedElement && _clonedElement.remove();
					if(!$(args.target).closest(".e-js.e-widget").hasClass("e-disable")){					
                    var target = args.target, targetObj = proxy;
                    var position = pre ? "Before" : "After";
                    var dragEle = proxy.getSelectedItems();
                    if (dragEle.length > 1 ? proxy._onDragStop(dragEle, target) : proxy._onDragStop([proxy._getItemObject(args.element, args)], target)) return false;
                    $(args.element).removeClass("e-active");
                    if (target.nodeName == 'UL') target = $(target)[0];
                    if ($(target).closest('li').length) target = $(args.target).closest('li')[0];
                    else if (target.nodeName != 'LI') target = $(target).closest('.e-ddl-popup.e-droppable')[0];
                    if (target && target.nodeName == 'LI' && $(target).hasClass('e-droppable') && $(target).closest('.e-ddl-popup.e-droppable').length) proxy._dropItem(target, args.element, pre, args.event);
                    else if ($(target).hasClass('e-droppable') && $(target).closest('.e-ddl-popup.e-droppable').length) proxy._dropItemContainer(target, args.element, args.event);
                    $(".allowDrop").removeClass("allowDrop");
                    if (args.target != proxy.element[0] && (args.element.parent().length && $(args.element.parent()[0]).data().ejWidgets[0] == "ejListBox")) {
                        proxy = $("#" + args.element.parent()[0].id).data($(args.element.parent()[0]).data().ejWidgets[0]);
                        if (dragEle.length > 1 ? proxy._onDropped(dragEle, target, args) : proxy._onDropped(proxy._getItemObject(args.element), args.target, args)) return false;
					}}
                    if( !proxy.model.allowDrag && !proxy.model.allowDragAndDrop ) proxy.element.children().removeClass("e-draggable");
                },
                helper: function (event, ui) {
                    if (!ej.isNullOrUndefined(event.element) && !$(event.element.closest('.e-ddl-popup.e-js')).hasClass('e-disable') && $(event.element).hasClass('e-draggable')) {
                        proxy = $(event.element).closest('.e-listbox.e-js').data('ejListBox');
                        proxy._tempTarget = $(event.element).text();
                        if ((proxy.model.allowDrag || proxy.model.allowDragAndDrop) && proxy) {
                            _clonedElement = $(event.sender.target).clone().addClass("dragClone e-dragClonelist");
                            _clonedElement.addClass(proxy.model.cssClass + (proxy.model.enableRTL ? ' e-rtl' : ''));
							 var maxZ = ej.util.getZindexPartial(proxy.element);
                            _clonedElement.css({ "width": proxy.element.width(), "height":$(event.element).height(), "padding": "5px 5px 5px 0.857em", "list-style": "none", "text-align": (proxy.model.enableRTL ? "right" : "left"), "opacity": "1", "z-index": maxZ});
                            return _clonedElement.appendTo($("body"));
                        }
                    }
                }
            });
        },
        _dropItem: function (target, element, pre, event) {
            element.addClass("e-droppable");
            var targetid = $(target).closest('.e-ddl-popup.e-droppable')[0].id.replace('_container', '');
            var dataIndex = [], dataObj = [];
            var droppedobj = $("#" + targetid).data("ejListBox");
            var preventDrop = (droppedobj.model.showCheckbox ? !this.model.showCheckbox : this.model.showCheckbox);
            if (preventDrop) return;
            var data = this._getDropObject(target, element, event);
            dataIndex = data.dataIndex;
            dataObj = data.dataObj;
			var dataItems  = droppedobj.element.find("li");
			var indexpos = dataItems.index(target);
			if( indexpos == 0) pre = true;
            pre ? $(this.li).insertBefore(target) : $(this.li).insertAfter(target);
            this._refreshItems();
            var ulElements =$(this.li.parent()[0]).find("li:not('.e-ghead')");
            if (dataObj && this.dataSource())
                this._dropDataSource(droppedobj, dataIndex, dataObj, ulElements.index(this.li));
            droppedobj._refreshItems();
        },
        _dropItemContainer: function (target, element, event) {
            element.addClass("e-droppable");
            var targetid = $(target)[0].id.replace('_container', '');
            var droppedobj = $("#" + targetid).data("ejListBox");
            var preventDrop = (droppedobj.model.showCheckbox ? !this.model.showCheckbox : this.model.showCheckbox);
            if (preventDrop) return;
            var dataIndex = [], dataObj = [];
            var data = this._getDropObject(target, element, event);
            dataIndex = data.dataIndex;
            dataObj = data.dataObj;
            this.li.insertAfter($($(target).find('li')).last());
			if($(target).find('ul').length > 0) $(target).find('ul').append(this.li);
			else $(target).find('ej-listbox').append(this.li);
            this._refreshItems();
            if (dataObj && this.dataSource())
                this._dropDataSource(droppedobj, dataIndex, dataObj, droppedobj.dataSource() ? droppedobj.dataSource().length : 0);
            if (!droppedobj.model.allowDrag)
                $(this.li).ejDraggable("instance")._destroy();
            droppedobj._refreshItems();
        },
        _dropDataSource: function (droppedobj, dataIndex, dataObj, droppedIndex) {
            var preventDropData = ej.DataManager && this.dataSource() instanceof ej.DataManager;
            if (preventDropData) return;
            if (dataIndex instanceof Array) {
                var proxy = this;
                $.each(dataObj, function (index) {
                   var indx = proxy.dataSource().indexOf(dataObj[index]);
                    proxy.dataSource().splice(indx, 1);
                });
            }
            else
                this.dataSource().splice(dataIndex, 1);
            if (droppedobj.dataSource() instanceof Array) {
                droppedobj.dataSource().splice.apply(droppedobj.dataSource(), [droppedIndex, 0].concat(dataObj));
            }
            else {
                droppedobj.dataSource(dataObj);
            }
        },
        _getDropObject: function (target, element, event) {
            var dataIndex = [], dataObj = [];
            if (this.model.allowMultiSelection) {
                this.li = $(element).parent().find(".e-select").removeClass("e-select e-hover");
                if(this.li.index(element[0]) == -1) this.li = element;
                if (!this.li.length)
                 this.li = element.removeClass("e-select e-hover");
            }
            else
                this.li = element.removeClass("e-select e-hover");

            if (this.li.length) {
               var proxy = this;
               var sortFlg=this.model.sortOrder.toLowerCase();
                $.each(this.li, function (ele) {
                    var ulElements=$(this.parentElement).find("li:not('.e-ghead')");
                    dataIndex.push(ulElements.index(this));
                            if( sortFlg!="none"){
                    var sortQuery = ej.Query().sortBy(proxy.mapFld._text,sortFlg, true);
                    var dataAfterSort = ej.DataManager(proxy.dataSource()).executeLocal(sortQuery);
                dataObj.push((proxy.dataSource()) ? dataAfterSort[ulElements.index(this)] : null);
            }
            else
                    dataObj.push((proxy.dataSource()) ? proxy.dataSource()[ulElements.index(this)] : null);
                });
            }
            else {
                dataIndex = this.li.index();
                dataObj = (this.dataSource()) ? this.dataSource()[dataIndex] : null;
            }
            return { "dataIndex": dataIndex, "dataObj": dataObj };
        },
        _showResult: function () {
            var proxy = this;
            this._refreshContainer();
            this.element.attr({
                "aria-expanded": true
            });
            var _ListItemsContainer = this.element.children("li:not('.e-ghead')");
            this._listSize = _ListItemsContainer.length;
			this._ListEventUnbind(_ListItemsContainer);
            _ListItemsContainer.on("touchstart mouseenter", $.proxy(this._OnMouseEnter, this));
            _ListItemsContainer.on("touchend mouseleave", $.proxy(this._OnMouseLeave, this));
            _ListItemsContainer.on("click", $.proxy(this._OnMouseClick, this));
            _ListItemsContainer.on("contextmenu", $.proxy(this._OnMouseContext, this));            
            if (proxy.model.showCheckbox) proxy.element.find(".listcheckbox").ejCheckBox({ enabled: proxy.model.enabled });
            return this;
        },
        _OnWindowResize: function (e) {
            this._refreshContainer();
            this.listContainer.css("display", "block");
        },
        refresh: function (value) {
		    if (!ej.isNullOrUndefined(this.model.query)) this._savedQueries = this.model.query; 
			this.display = true;
            if (this.model.dataSource) {
                if (this.model.template)
                    this.element.empty();
                this._checkModelDataBinding(this.dataSource());
            }
            else {
                this.listContainer.css({ "height": this.model.height, "width": this.model.width });
                this._refreshScroller();
            }
        },
        _removeListHover: function () {
            this._selectedItems = [];
            this.model.selectedIndices = [];
            this.model.selectedIndex = null;
            this.element.children("li").removeClass("e-hover e-select selectItem");
            return this;
        },
        _addListHover: function () {
            this._activeItem = this._selectedItem;
            var activeItem = this._getItem(this._selectedItem);
            activeItem.addClass("e-select e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
            this._OnListSelect(this.prevselectedItem, this._selectedItem);
        },
        _calcScrollTop: function (value) {
            var ulH = this.element.outerHeight(),
                li = this.element.find("li"),
                liH = 0,
                index, top, i;
            index = value ? value : this.element.find("li.e-select").index();
            for (i = 0; i < index; i++)
                liH += li.eq(i).outerHeight();
            top = liH - ((this.listContainer.outerHeight() - li.eq(index).outerHeight()) / 2);
            return top;
        },
        _refreshItems: function () {
            this.listBoxScroller.append(this.element);
            this.listContainer.append(this.listBoxScroller);
            this._refreshContainer();
            this._showResult();
            this._setSelectionValues();
            this._setDisableValues();
        },
        _selectedIndices: function () {
            var selectItem;
            this.element.children("li:not('.e-ghead')").each(function (index) {
                if ($(this).hasClass("e-select")) {
                    selectItem = index;
                    return false
                }
            });
            this._selectedItem = selectItem;
            return selectItem;
        },
        _addSelectedItem: function (e) {
            if ((!Array.isArray(this.model.disableItemsByIndex) && this.model.disableItemsByIndex != null) || (Array.isArray(this.model.disableItemsByIndex) && this.model.disableItemsByIndex.length > 0)) {
                if (e.keyCode == 40 || e.keyCode == 39) this._disableItemSelectDown();
                else this._disableItemSelectUp();
                this._selectedItem = this._activeItem
            }
            var activeItem = this._getItem(this._selectedItem);
            this._selectedItems.push(activeItem)
        },
        _getItem: function (val) {
            return $(this.element.children("li:not('.e-ghead')")[val])
        },
        _getItemObject: function (item, evt) {
            var index = this._elementIndex(item);
            return {
                item: item,
                index: index,
                text: item.text(),
                value: item.attr("value") ? item.attr("value") : item.text(),
                isEnabled: !item.hasClass("e-disable"),
                isSelected: item.hasClass("e-select"),
                isChecked: item.find('.e-chk-image').hasClass('e-checkmark'),
                data: this.dataSource() ? this.getListData()[index] : null,
                event: evt ? evt : null
            };
        },
        _roundedCorner: function () {
            this.listContainer[(this.model.showRoundedCorner ? "addClass" : "removeClass")]("e-corner-all");
            return this;
        },
        _enabled: function (boolean) {
            boolean ? this.enable() : this.disable();
            return this;
        },
        _showFullList: function () {
            if (this.dataSource() != null) {
                if (!(ej.DataManager && this.dataSource() instanceof ej.DataManager))
                    this.listitems = this.dataSource();
                if (this._savedQueries.queries.length && !(ej.DataManager && this.dataSource() instanceof ej.DataManager))
                    this.listitems = ej.DataManager(this.dataSource()).executeLocal(this._savedQueries);
            }
            this._renderlistContainer();
            if (!(this.dataSource() instanceof ej.DataManager)) this._trigger("actionComplete");
            this._addDragableClass()._enableDragDrop();
            this._disabledItems = [];
            this.disableItemsByIndices(this.model.disableItemsByIndex);
            if (this.model.selectedIndex == 0) this.selectItemByIndex(this.model.selectedIndex);
            else this.model.selectedIndex && this.selectItemByIndex(this.model.selectedIndex);
            this.selectItemsByIndices(this.model.selectedIndices);
            this.checkItemsByIndices(this.model.checkedIndices);
            this._tooltipList();
            return this;
        },
        _tooltipList: function(){
             if (this.listContainer.find('li').hasClass('e-tooltip')){
                $(this.listContainer).ejTooltip({
                    target: ".e-tooltip",
                    isBalloon: false,
                    position: {
                        target: { horizontal: "center", vertical: "bottom" },
                        stem: { horizontal: "left", vertical: "top" }
                    }
                });
            }
       },
        _cascadeAction: function () {
            if (this.model.cascadeTo) {
                this._currentValue = this._getField(this.listitems[this._activeItem], this.mapFld._value);
                this.selectDropObj = $('#' + this.model.cascadeTo).ejListBox('instance');
                 $.extend(true, this.selectDropObj, { _isCasCadeTarget: true });
                if (ej.isNullOrUndefined(this._dSource))
                    this._dSource = this.selectDropObj.dataSource();
                this._performJsonDataInit();
			     var args = { cascadeModel: this.selectDropObj.model, cascadeValue: this._currentValue, setCascadeModel:{}, requiresDefaultFilter: true };
                this._trigger("cascade", args);	
                this.selectDropObj._setCascadeModel = args.setCascadeModel;				
            }
        },
        _performJsonDataInit: function () {
            this._changedSource = ej.DataManager(this._dSource).executeLocal(ej.Query().where(this.mapFld._value, "==", this._currentValue));
            this.selectDropObj.setModel({
                dataSource: this._changedSource,
                enable: true,
                value: "",
                selectedIndex: -1                
            })
        },
        _OnMouseContext: function (e) {
            e.preventDefault();
            return false
        },
        _OnMouseEnter: function (e) {
            this.startime = 0;
            this.item = "";
            if (e.type == "touchstart") {
                this.item = $(e.target).text();
                this.startime = new Date().getTime()
            }
            if (this.model.enabled) {
                var targetEle;
                this.element.children("li").removeClass("e-hover");
                if ($(e.target).is("li")) $(e.target).addClass("e-hover");
                if ($(e.target).hasClass("e-disable")) $(e.target).removeClass('e-hover');
                else if (e.target.tagName != "li") {
                    targetEle = $(e.target).parents("li");
                    $(targetEle).addClass("e-hover")
                }
                var activeItem, selectItem = 0;
                this.element.children("li:not('.e-ghead')").each(function (index) {
                    if ($(this).hasClass("e-hover")) {
                        activeItem = index;
                        return false
                    }
                });
                this._hoverItem = activeItem
            }
        },
        _OnMouseLeave: function (e) {
            this.element.children("li").removeClass("e-hover");
            this.endtime = new Date().getTime();
            if ((((this.endtime - this.startime) / 200) > 2))
                if ((this.item == $(e.target).text())) this.hold = (((this.endtime - this.startime) / 200) > 2) ? !this.hold : false;
        },
        _OnMouseClick: function (e) {
            if($(e.currentTarget).hasClass("e-disable")) return false;
            if (e.which == 3)
                this.hold = true;
            this.endtime = new Date().getTime();
            if ((((this.endtime - this.startime) / 200) > 2))
                if ((!this.model.template && this.item == $(e.target).text()) && (!this.hold))
                    this.hold = (((this.endtime - this.startime) / 200) > 2);
            if (e.shiftKey && this._shiftkey) {
                this._shiftkey = false;
                this.prevselectedItem = this._activeItem;
            }
            if (!ej.isNullOrUndefined(this._hoverItem)) this._activeItem = this._hoverItem;
            if (this.model.enabled && this._activeItem != undefined) {
                if (!e.shiftKey || isNaN(this.prevselectedItem)) {
                    this._shiftkey = true;
                    this.prevselectedItem = this._lastEleSelect ? this._lastEleSelect : this._activeItem;                    
                     if(this._lastEleSelect == 0 )  this.prevselectedItem = this._lastEleSelect;                
                }
                if (!this.model.showCheckbox) {
                    var activeitem = $(this.element.children("li:not('.e-ghead')")[this._hoverItem]);
                    if (!this.model.allowMultiSelection || (!(e.ctrlKey || this.touchhold || this.hold) && !e.shiftKey))
                        this._removeListHover();
                    this.element.children("li").removeClass('e-hover');
                    if (!activeitem.hasClass('e-select') ||(e.shiftKey && this.model.allowMultiSelection)) {
                        activeitem.addClass('e-select');
                        this._selectedItems.push(activeitem);
                        this.model.selectedIndices.push(this._activeItem);
                        if (e.shiftKey && (this.model.allowMultiSelection)) {
                            if (!e.ctrlKey) this._removeListHover();
                            var initial, last;
                            if (this.prevselectedItem < this._activeItem)
                                initial = this.prevselectedItem, last = this._activeItem;
                            else
                                initial = this._activeItem, last = this.prevselectedItem;
                            this._activeItemLoop(initial,last);
                        }
                    } else {
                        activeitem.removeClass('e-select');
                        this._selectedItems.splice(this.model.selectedIndices.indexOf(this._activeItem), 1);
                        this.model.selectedIndices.splice(this.model.selectedIndices.indexOf(this._activeItem), 1);
                    }
                    this._selectedItem = this._selectedIndices();
                    this.model.selectedIndex = this._activeItem;
                    this._cascadeAction();
                    var selecteditem = $(this.element.children("li:not('.e-ghead')")[this._selectedItem]);
                    if ($(selecteditem).text() != "") {
                        this.element.val($(selecteditem).text());
                        this.element.attr({
                            "value": this.element.val()
                        });
                    }
                    this.model.selectedText = activeitem.text();
                    this._selectedData = this._getItemObject($(selecteditem), e);
                    this._selectedData["isInteraction"] = true;
                    if (this._prevSelectedData && (this._selectedData.text != this._prevSelectedData.text))
                        this._trigger("unselect", this._prevSelectedData)
                    this._trigger("select", this._selectedData);
                    this._prevSelectedData = this._selectedData;
                    this._lastEleSelect = this._activeItem;
                    if (this._selectedItems && this._selectedItems.length != 1)
                        this._ctrlClick = true;
                } else {
                    if (($(e.currentTarget).is("li")) && ($(e.target).is("li"))) {
                        if ($(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
                            $(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                            var index = this.model.checkedIndices.indexOf($(e.currentTarget).index());
                            this._checkedItems.splice(index, 1);
                            this.model.checkedIndices.splice(index, 1);
                            this.checkedStatus = false;
                        } else {
                            $(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                            this._checkedItems.push(this._activeItem);
                            this.model.checkedIndices.push(this._elementIndex(e.currentTarget));
                            this.checkedStatus = true;
                        }
                    }
                    else if (($(e.currentTarget).is("li")) && ($(e.target).is("span"))) {
                        if ($(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
                            this._checkedItems.push(this._activeItem);
                            this.model.checkedIndices.push($(e.currentTarget).index());
                            this.checkedStatus = true;
                        }
                        else {
                            var index = this.model.checkedIndices.indexOf($(e.currentTarget).index());
                            this._checkedItems.splice(index, 1);
                            this.model.checkedIndices.splice(index, 1);
                            this.checkedStatus = false;
                        }
                    }
                    else
                        return false;
                    this.selectedTextValue = $(e.currentTarget).text();
                    if (!this.element.hasClass("e-disable") && $(e.target).is("li")) {
                        var args = {
                            status: this.model.enabled,
                            isChecked: this.checkedStatus,
                            selectedTextValue: this.selectedTextValue
                        };
                        var checkData = this._getItemObject($(e.target), e);
                        checkData["isInteraction"] = true;
                        this._trigger("checkChange", checkData);
                    }
                    this._lastEleSelect = $(e.currentTarget).index();
                }
                if (e.ctrlKey || e.shiftKey) e.shiftKey ? (this._shiftSelectItem = this._activeItem, this._ctrlSelectItem = null)  : (this._ctrlSelectItem = this._activeItem, this._shiftSelectItem = null);
                else {
                    this._shiftSelectItem = null;
                    this._ctrlSelectItem = null;
                }
                this._setSelectionValues()._OnListSelect(this.prevselectedItem, this._activeItem);
            }
            if (e.target.nodeName != "INPUT")
                this.listContainer.focus();
			this._pageUpStep = this._pageDownStep = null;
        },
		_activeItemLoop: function (initial , last) {
		    if (this.model.showCheckbox) {
		        var items = this.listContainer.find('li:not(.e-disable)');
		        items.find(".listcheckbox").ejCheckBox('option', 'checked', false);
				this._checkedItems = [];
                this.model.checkedIndices = [];
			}
			for (var i = initial; i <= last; i++) {
			    if (this.model.showCheckbox && !this.listContainer.find('li').eq(i).hasClass('e-disable')) {
					this.element.find('.listcheckbox').eq(i).ejCheckBox('option', 'checked', true);
                    this._checkedItems.push(i);
                    this.model.checkedIndices.push(i);
                    this.checkedStatus = true;
                }
				else {
			       var activeitem = $(this.element.children("li:not('.e-ghead')")[i]);
                    if (!activeitem.hasClass('e-disable')) {
                        if (!activeitem.hasClass('e-select')) activeitem.addClass('e-select');
                        this._selectedItems.push(activeitem);
                        this.model.selectedIndices.push(i);
                    }
                }
            }
		},
        _setSelectionValues: function () {
            var selectionArray = [];
            var oldSelectedIndices = this.model.selectedIndices;
            var oldCheckedIndices = this.model.checkedIndices;
            this.model.selectedIndices = [];
            this.model.checkedIndices = [];
            var proxy = this;
            if (!this.model.showCheckbox) {
                if (!ej.isNullOrUndefined(this._activeItem) && this._activeItem >= 0) this.model.selectedIndex = this._activeItem;
                var liItem = this.element.children("li:not('.e-ghead')");
                this.element.children("li:not('.e-ghead').e-select").each(function (index, ele) {
                    selectionArray.push($(ele).attr("value") ? $(ele).attr("value") : !ej.isNullOrUndefined(proxy.model.fields.text) && proxy.dataSource() ? proxy.getListData()[proxy._elementIndex(ele)][proxy.model.fields.text] : $(ele).text());
                    proxy.model.selectedIndices.push(liItem.index(ele));
                });
            }
            else {
                this.element.find("li:not('.e-ghead') .listcheckbox:checked").closest('li').each(function (index, ele) {
                    selectionArray.push($(ele).attr("value") ? $(ele).attr("value") : !ej.isNullOrUndefined(proxy.model.fields.text) && proxy.dataSource() ? proxy.getListData()[proxy._elementIndex(ele)][proxy.model.fields.text] : $(ele).text());
                    proxy.model.checkedIndices.push(proxy._elementIndex(ele));
                });
            }
            if (ej.DataManager && ej.DataManager && this.dataSource() instanceof ej.DataManager && this.model.allowVirtualScrolling) {
                if (this.model.showCheckbox) {
                    for (var i = 0; i < oldCheckedIndices.length; i++) {
                        if (this.model.checkedIndices.indexOf(oldCheckedIndices[i]) == -1)
                            this.model.checkedIndices.push(oldCheckedIndices[i]);
                    }
                }
                else {
                    for (var i = 0; i < oldSelectedIndices.length; i++) {
                        if (this.model.selectedIndices.indexOf(oldSelectedIndices[i]) == -1)
                            this.model.selectedIndices.push(oldSelectedIndices[i]);
                    }
                }
            }
            this.model.selectedItemIndex = this.model.selectedIndex;
            this.model.selectedItems = this.model.selectedItemlist = this.model.selectedIndices;
            this.model.checkedItems = this.model.checkedItemlist = this.model.checkItemsByIndex = this.model.checkedIndices;
			this.model.text = "";
			if(this.model.showCheckbox){
               var checked = this.getCheckedItems();
				for(i = 0;i < checked.length;i++){			
				         this.model.text +=  checked[i].text + ","
			        }
			}else{
                var selected = this.getSelectedItems();
				for(i = 0;i < selected.length;i++){			
				         this.model.text +=  selected[i].text + ","
			        }	
			}
            this.value(selectionArray.toString());
            this._hiddenInput.val(this.value());
            return this;
        },
        _setDisableValues: function () {
            this._disabledItems = [];
            this.model.disableItemsByIndex = [];
            var lenth = this.element.children().length, indx;
            for (var indx = 0; indx < lenth; indx++)
                if ($(this.element.children()[indx]).hasClass('e-disable'))
                    this.model.disableItemsByIndex.push(indx);
            this.disableItemsByIndices(this.model.disableItemsByIndex);
        },
        _onClickCheckList: function (e) {
			if(!e.isChecked) $("#"+ e.model.id).closest('li').removeClass("checkItem");
            if (e.isInteraction) {
                this.checkedStatus = e.isChecked ? true : false;
                if (!this._initValue) {
                    this.checkedStatus ? this.model.checkedIndices.push($(e.event.target).closest('li:not(".e-ghead")').index()) : this.model.checkedIndices.splice($.inArray($(e.event.target).closest('li:not(".e-ghead")').index(), this.model.checkedIndices), 1);
                    var checkData = this._getItemObject($(e.event.target).closest('li'), e);
                    checkData["isInteraction"] = true;
                    this._trigger('checkChange', checkData);
                }
            }
        },
		_elementIndex: function (args) {
		    return $(args).parent().children("li:not('.e-ghead')").index(args);
		},
        _disableItemSelectCommon: function () {
            this.listitems = this.element.find('li');
            this._activeItem = this.listitems.index(this.element.find(".e-select"));
        },

        _disableItemSelectUp: function () {
            this._disableItemSelectCommon();
            var disableList = (typeof (this.model.disableItemsByIndex) != "object") ? this.model.disableItemsByIndex.split(",").sort().reverse() : this.model.disableItemsByIndex;
            if (this._activeItem == 0) this._activeItem = this.listitems.length - 1;
            else this._activeItem--;
            for (var lists = 0;
                ($.inArray(this._activeItem.toString(), disableList.toString())) > -1; lists++) {
                this._activeItem--;
                if (this._activeItem < 0) this._activeItem = this.listitems.length - 1
            }
            $(this.element.children("li")[this._activeItem]).addClass('e-select')
        },
        _disableItemSelectDown: function () {
            this._disableItemSelectCommon();
            var disableList = (typeof (this.model.disableItemsByIndex) != "object") ? this.model.disableItemsByIndex.split(",").sort() : this.model.disableItemsByIndex;
            ((this.listitems.length - 1) == this._activeItem) ? this._activeItem = 0 : this._activeItem++;
            for (var lists = 0;
                ($.inArray(this._activeItem.toString(), disableList.toString())) > -1; lists++) {
                this._activeItem++;
                if ((this.listitems.length) == this._activeItem) this._activeItem = 0
            }
            $(this.element.children("li")[this._activeItem]).addClass('e-select')
        },
        _checkitems: function () {
            if (this.model.showCheckbox) {
                var listitems = this.element.find("li:not('.e-ghead')");
                for (var i = 0; i < this.model.checkedIndices.length; i++) {
                    var item = this.model.checkedIndices[i];
                    $(listitems[item]).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                    this._checkedItems.push(listitems[item])
                }
            } else {
                if (this.model.allowMultiSelection) {
                    for (var i = 0; i < this.model.selectedIndices.length; i++) {
                        var item = this.model.selectedIndices[i];
                        if (!($(this.listitem[item]).hasClass("e-select"))) {
                            $(this.listitem[item]).addClass("e-select");
                            this._selectedItems.push($(this.listitem[item]));
                        }
                    }
                } else {
                    if (!($(this.listitem[this.model.selectedIndex]).hasClass("e-select")))
                        $(this.listitem[this.model.selectedIndex]).addClass("e-select");
                    this._selectedItems.push($(this.listitem[this.model.selectedIndex]))
                }
            }
            this._setSelectionValues();
            return this;
        },

        _onlistselection: function (previtem, selecteditem, e) {
            if (previtem != selecteditem) {
                var selectData = this._getItemObject($(this.element.find("li:not('.e-ghead')")[selecteditem]), e);
                selectData["isInteraction"] = true;
				if(!ej.isNullOrUndefined(selectData.event))
                this._trigger('change', selectData);
            }
        },

        _OnListSelect: function (previtem, selecteditem, e) {
            if (!ej.isNullOrUndefined(previtem) && previtem != selecteditem && !this.model.showCheckbox) {
                var selectData = this._getItemObject($(this.element.find("li:not('.e-ghead')")[selecteditem]), e);
                selectData["isInteraction"] = true;
                this._trigger('change', selectData);
            }
        },
        _OnKeyDown: function (e) {
            if (this.model.enabled) {
                if (this._selectedItems && this._selectedItems.length == 1 && !this.model.showCheckbox)
                    this._lastEleSelect = $(this.element.children("li.e-select")).index();
                this._itemId = null;
                var _ListItemsContainer = this.element.children("li:not('.e-ghead')"), proxy = this, liH, popupH, activeitem;
                popupH = this.listContainer.height();
                liH = _ListItemsContainer.outerHeight();
                activeitem = Math.round(popupH / liH) != 0 ? Math.floor(popupH / liH) : 7;
                this._listSize = this.element.children("li").length;
                var start, end;
                if (!e.shiftKey) this._up = this._down;
				if(e.keyCode != 33 && e.keyCode != 34) this._pageUpStep = this._pageDownStep = null;
                switch (e.keyCode) {
                    case 37:
                    case 38:
                        var liItems = this.listItemsElement;
                        var selectedIndex = this._shiftSelectItem ? this._shiftSelectItem : this._ctrlSelectItem ? this._ctrlSelectItem : (this.model.showCheckbox) ? (this._lastEleSelect || 0) : liItems.index(this.element.find("li.e-select"));
                        if (e.shiftKey && this.model.allowMultiSelection && !this.model.showCheckbox) {
                            if (this._lastEleSelect == 0) return false;
                            this._lastEleSelect = (this._ctrlClick) ? this._lastEleSelect - 1 : this._lastEleSelect;
                            selectedIndex = this._lastEleSelect;
                            this._selectedItem = (selectedIndex || selectedIndex == 0) ? (selectedIndex == 0 ? this._listSize - 1 : (this._down ? selectedIndex : selectedIndex - 1)) : 0;
                            for (var i = this._selectedItem; $(_ListItemsContainer[i]).hasClass("e-disable") ; i--)
                                this._selectedItem -= 1;
                            if($(_ListItemsContainer[this._selectedItem]).hasClass("e-select") && this.element.find("li.e-select").length == 1) this._selectedItem -= 1;
                            var activeItem = $(_ListItemsContainer[this._selectedItem]);
                            if (activeItem.hasClass("e-select")) {
                                if (this._selectedItem == 0) return;
                                activeItem.removeClass("e-select");
                                this._selectedItems.pop();
                            }
                            else {
                                activeItem.addClass("e-select");
                                this._selectedItems.push(activeItem);
                            }
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._selectedItem) });
                            this._up = true;
                            this._down = false;
                            this._ctrlClick = false;
                        }
                        else {
                            this._selectedItem = (selectedIndex || selectedIndex == 0) ? (selectedIndex == 0 ? this._listSize - 1 : selectedIndex - 1) : 0;
                            for (var i = this._selectedItem; $(_ListItemsContainer[i]).hasClass("e-disable") ; i--)
                                this._selectedItem -= 1;
                            if (this._selectedItem == -1) this._selectedItem = this._listSize - 1;
                            this._addSelectedItem(e);
                            $(_ListItemsContainer).removeClass("e-hover e-select");
                            var addClass = (this.model.showCheckbox) ? "e-hover" : "e-select";
                            $(_ListItemsContainer[this._selectedItem]).addClass(addClass);
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._selectedItem) });
                        }
						this._activeItem = this.prevselectedItem = this._selectedItem;
                        this._OnListSelect(this._selectedItem + 1, this._selectedItem, e);
                        this._lastEleSelect = this._selectedItem;
                        this._keyCascade(_ListItemsContainer[this._selectedItem]);
                        this._setSelectionValues();
                        this._shiftSelectItem = this._ctrlSelectItem = null;
                        e.preventDefault();
                        return false;
                        break;
                    case 39:
                    case 40:
                        var liItems = this.listItemsElement;
                        var selectedIndex = this._shiftSelectItem ? this._shiftSelectItem : this._ctrlSelectItem ? this._ctrlSelectItem : (this.model.showCheckbox) ? (this._lastEleSelect || 0) : liItems.index(this.element.find("li.e-select"));
                        if (e.shiftKey && this.model.allowMultiSelection && !this.model.showCheckbox) {
                            if (this._lastEleSelect == this._listSize - 1) return false;
                            this._lastEleSelect = (this._ctrlClick) ? this._lastEleSelect + 1 : this._lastEleSelect;
                            selectedIndex = this._lastEleSelect;
                            this._selectedItem = (selectedIndex || selectedIndex == 0) ? (selectedIndex == this._listSize - 1 ? 0 : ((this._up || this._ctrlClick) ? selectedIndex : selectedIndex + 1)) : 0;
                            for (var i = this._selectedItem; $(_ListItemsContainer[i]).hasClass("e-disable") ; i++)
                                this._selectedItem += 1;
							if($(_ListItemsContainer[this._selectedItem]).hasClass("e-select") && this.element.find("li.e-select").length == 1) this._selectedItem += 1;		
                            var activeItem = $(_ListItemsContainer[this._selectedItem]);
                            if (activeItem.hasClass("e-select")) {
                                activeItem.removeClass("e-select");
                                this._selectedItems.pop();
                            }
                            else {
                                activeItem.addClass("e-select");
                                this._selectedItems.push(activeItem);
                            }
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._selectedItem) });
                            this._up = false;
                            this._down = true;
                            this._ctrlClick = false;
                        }
                        else {
                            this._selectedItem = (selectedIndex || selectedIndex == 0) ? (selectedIndex == this._listSize - 1 ? 0 : selectedIndex + 1) : 0;
                            for (var i = this._selectedItem; $(_ListItemsContainer[i]).hasClass("e-disable") ; i++)
                                this._selectedItem += 1;
                            if (this._selectedItem == this._listSize) this._selectedItem = 0;
                            this._addSelectedItem(e);
                            $(_ListItemsContainer).removeClass("e-hover e-select");
                            var addClass = (this.model.showCheckbox) ? "e-hover" : "e-select";
                            $(_ListItemsContainer[this._selectedItem]).addClass(addClass);
                            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(this._selectedItem) });
							this.element.find("li").removeClass("selectItem");
							this.model.selectedIndices.length = 0;
							this.model.selectedIndices.push(this._selectedItem);
                        }
						this._activeItem = this.prevselectedItem = this._selectedItem;
                        this._OnListSelect(this._selectedItem - 1, this._selectedItem);
                        this._lastEleSelect = this._selectedItem;
                        this._keyCascade(_ListItemsContainer[this._selectedItem]);
                        this._setSelectionValues();
                        this._shiftSelectItem = this._ctrlSelectItem = null;
                        return false;
                        break;
                    case 8:
                    case 9:
                    case 13:
                        if (this.model.showCheckbox) {
                            if (this.model.checkedIndices.indexOf(this._selectedItem) < 0)
                                this.checkItemByIndex(this._selectedItem);
                            else
                                this.uncheckItemByIndex(this._selectedItem);
                        }
                        break;
                    case 18:
                    case 33: /* page up */
                        var step = e.keyCode == 33 ? activeitem : 1;
						if (e.shiftKey && this.model.allowMultiSelection) { 
							if(this._pageUpStep == null) this._pageUpStep = this.prevselectedItem;
							if(this._pageDownStep == null) this._pageDownStep = this.prevselectedItem;
							if(this._pageDownStep <= this.prevselectedItem) {
								start = this._pageUpStep - step > 0  ? this._pageUpStep - step : 0;
								end = this._pageDownStep;
							}
							else {
								start = this.prevselectedItem;
								end = this._pageDownStep - step > this.prevselectedItem  ? this._pageDownStep - step : this.prevselectedItem;
							}
							this._shiftHomeAndEndKeyProcess( start,end, end > this.prevselectedItem ? end:start);
							this._pageUpStep = start;
							this._pageDownStep =end;
						}
                        else this._moveUp(this._activeItem, step);
					    this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
                        this._preventDefaultAction(e);
                        break;
                    case 34: /* page down */
                        var step = e.keyCode == 34 ? activeitem : 1;
                        if (e.shiftKey && this.model.allowMultiSelection){
                            if(this._pageUpStep == null) this._pageUpStep = this.prevselectedItem;
                            if(this._pageDownStep == null) this._pageDownStep = this.prevselectedItem;
                            if( this._pageUpStep == 0 && this.prevselectedItem != 0) { 
								if( this._pageUpStep + step >= this.prevselectedItem) start = end = this.prevselectedItem;
								else {
									start = this._pageUpStep + step ;
									end = this._pageDownStep + step < this.element.children("li").length ?  this._pageDownStep + step : this.element.children("li").length-1;
                               }
                            }
                            else if(this._pageUpStep != this.prevselectedItem && this._pageUpStep + step >= this.prevselectedItem) start = end = this.prevselectedItem;
                            else {
                                start = this._pageUpStep;
                                end = this._pageDownStep + step < this.element.children("li").length ?  this._pageDownStep + step : this.element.children("li").length-1;
                            }
                            if(start < this.prevselectedItem && end > this.prevselectedItem ) end = this.prevselectedItem;
                            this._shiftHomeAndEndKeyProcess(start,end, start < this.prevselectedItem ? start:end);
                            this._pageUpStep = start;
                            this._pageDownStep =end;
                        } 
                        else this._moveDown(this._activeItem, step);
						this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
                        this._preventDefaultAction(e);
                        break;
                    case 35:
                        if (e.shiftKey && this.model.allowMultiSelection) this._shiftHomeAndEndKeyProcess(this._activeItem,(this._listSize - 1) , (this._listSize - 1));
                        else this._homeAndEndKeyProcess(e, _ListItemsContainer, (this._listSize - 1));
                        for (var i = this._listSize - 1; i > 0; i--) {
                            if (!$(this.element.find('li')[i]).hasClass('e-disable')) {
                                this.model.selectedIndex = i;
                                this._shiftSelectItem = i;
                               if (this.model.allowVirtualScrolling == true) proxy._onScroll(e);
                                return false;
                            }
                        }
                    break;
                case 36:
                    if (e.shiftKey && this.model.allowMultiSelection) this._shiftHomeAndEndKeyProcess(0, this._activeItem, 0);
                    else this._homeAndEndKeyProcess(e, _ListItemsContainer, 0);
                    for (var i = 0; i < this._listSize; i++) {
                        if (!$(this.element.find('li')[i]).hasClass('e-disable')) {
                            this.model.selectedIndex = i;
                            return false;
                        }
                    }
                    break;
                }
            }
        },
        _moveUp: function (current, step) {
            if (current == null || current <= 0)  this._checkDisableStep(0, step, false);
            else if (current > this._listSize - 1) this._checkDisableStep(this._listSize - 1, step, false);
            else if (current > 0 && current <= this._listSize - 1) this._checkDisableStep(current, step, false);
        },
        _moveDown: function (current, step) {
            if (current == null || current < 0) this._checkDisableStep(-1, step, true);
            else if (current == 0)  this._checkDisableStep(0, step, true);
            else if (current >= this._listSize - 1) this._checkDisableStep(this._listSize - 1, step, true);
            else if (current < this._listSize - 1)  this._checkDisableStep(current, step, true);
        },
        _checkDisableStep: function (current, step, isdown, shift) {
            var command = isdown ? "_disableItemSelectDown" : "_disableItemSelectUp";
            var index = isdown ? current + step : current - step;
            var select = this[command](index);
            if (select == null) {
                for (var i = step; i >= 0; i--) {
                    index = isdown ? current + i : current - i;
                    select = this[command](index);
                    if (select != null) break;
                }
            }
            if (select != null)
                this.selectItemByIndex(select);
        },
        _disableItemSelectDown: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0) 
                    return current;
                else
                    return this._disableItemSelectDown(current + 1);
            }
            else return this._listSize - 1;
        },

        _disableItemSelectUp: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0) 
                    return current;
                else {
                    if (current > 0) 
                        return this._disableItemSelectUp(current - 1);
                }
            }
        },

        _preventDefaultAction: function (e, stopBubble) {
            e.preventDefault ? e.preventDefault() : (e.returnValue = false);
            if (stopBubble) 
                e.stopPropagation ? e.stopPropagation() : (e.cancelBubble = true);
        },
        _homeAndEndKeyProcess: function (e, _ListItemsContainer, index) {
            if ($(':focus').length && $(':focus')[0].nodeName != "INPUT") {
                this._OnListSelect(this._selectedItem, index);
                this.selectItemByIndex(index);
                this._selectedItem = index;
                this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(index) });
                if (this.model.showCheckbox) {
                    this._removeListHover();
                    $(_ListItemsContainer[index]).addClass("e-hover");
                    this._lastEleSelect = this._selectedItem = index;
                }
                this._keyCascade(_ListItemsContainer[index],e);
                e.preventDefault();
                return false;
            }
        },
        _shiftHomeAndEndKeyProcess: function(initial , last , index) {
			this._removeListHover();
			this._activeItemLoop(initial ,last);
			this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop(index) });
            return false;
		},
        _keyCascade: function (obj, evt) {
            var selectData = this._getItemObject($(obj), evt);
            this.model.selectedText = selectData.text;
            selectData["isInteraction"] = true;
            this._trigger("select", selectData);
            if (this.model.cascadeTo) {
                this._activeItem = this._selectedItem;
                this._cascadeAction();
            }
        },

        mergeData: function (data,skipInitial) {
            this.datamerged=true;
            this.mergeUl = $();
            this._setMapFields();
            var proxy = this;
            this._skipInitialRemoteData = skipInitial ? skipInitial : false;
            if (ej.DataManager && data instanceof ej.DataManager) {
                var queryPromise = data.executeQuery(this._getQuery());
                queryPromise.done(function (e) {
                    proxy.mergeValue = e.result;
                    proxy._renderlistContainer();
                });
            }
            else {
                this.mergeValue = data;
                if(!ej.isNullOrUndefined(this.model.fields.groupBy) && this.datamerged && this.groupData)
                 this.listitems= this.listitems[0].items ? this.listitems[0].items:this.dataSource();
                else{
                this.groupData = true;
                this.listitems = this.listitems ? this.listitems : this.dataSource();
                }
                this._renderlistContainer();
            }
            this._loadInitialRemoteData = false;
        },

        _onScroll: function (e) {
            if (!e.scrollTop) return;
            var scrollerPosition = e.scrollTop, proxy = this;
            if (this.model.actionBegin)
                this._trigger("actionBegin", {});
            this.realUllength = this.element.find('li').length;
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                if(e.scrollTop!= e.scrollData.scrollOneStepBy + e.scrollData.scrollable){
                window.setTimeout(function () {
                    if (proxy._virtualCount == 0) {
                        proxy._loadVirtualList();
                    }
                }, 300);
            }
            }
            else if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "continuous") {
                if (scrollerPosition >= Math.round($(this.listContainer).find("ul").height() - $(this.listContainer).height()) && this.listitems.length < this._totalCount) {
                    this._updateLoadingClass(true);
                    if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                        this._queryPromise(this.realUllength, proxy, this.realUllength + this.model.itemRequestCount, e);
                    }
                }
            }
        },
        _queryPromise: function (start, proxy, end, e) {
            this._trigger('itemRequest', { event: e, isInteraction: true });
            this._setMapFields();
            var mQuery = this._savedQueries.clone();
            var queryPromise = this.dataSource().executeQuery(mQuery.range(start, end));
            this._updateLoadingClass(true);
            queryPromise.done(function (d) {
			    proxy._trigger("actionBeforeSuccess", d);
                proxy.realUllength = (e.source != "wheel") ? proxy.mergeValue ? proxy.mergeValue.length + start : start : start;
                proxy._loadlist(d.result)._checkboxHideShow(proxy.model.showCheckbox)._showResult()._updateLoadingClass();
                proxy._applySelection();
                if (proxy.model.virtualScrollMode == "continuous") {
                    proxy.scrollerObj.refresh();
                }
                proxy._trigger("actionSuccess", d);
            }).fail(function (e) {
                proxy._trigger("actionFailure", e);
            }).always(function (e) {
                proxy._trigger("actionComplete", e);
            });
        },
        _loadVirtualList: function () {
            this._virtualCount++;
            this._getLiHeight();
            var top = this.scrollerObj.scrollTop(), proxy = this, prevIndex = 0, prevPageLoad, nextIndex = null;
            this._currentPageindex = Math.round(top / (this._liItemHeight * this.model.itemRequestCount));
            if (($.inArray(this._currentPageindex, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) {
                if (this._currentPageindex == 0) {
                    if (($.inArray(this._currentPageindex + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPageindex = this._currentPageindex + 1;
                    }
                }
                else if (($.inArray(this._currentPageindex - 1, this._virtualPages)) != -1) {
                    if (($.inArray(this._currentPageindex + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPageindex = this._currentPageindex + 1;
                    }
                }
                else {
                    this._currentPageindex = this._currentPageindex - 1;
                }
            }
            prevPageLoad = !($.inArray(this._currentPageindex - 1, this._virtualPages) != -1);
            this._updateLoadingClass(true);
            for (var i = this._virtualPages.length - 1; i >= 0; i--) {
                if (this._virtualPages[i] < this._currentPageindex) {
                    prevIndex = this._virtualPages[i];
                    if (!(i + 1 == this._virtualPages.length))
                        nextIndex = this._virtualPages[i + 1];
                    break;
                }
            }
            var firstArg = prevPageLoad ? (this._currentPageindex - 1) * this.model.itemRequestCount : this._currentPageindex * this.model.itemRequestCount;
            var skipQuery = ej.Query().range(firstArg, this._currentPageindex * this.model.itemRequestCount + this.model.itemRequestCount), queryPromise, list;
            if (ej.DataManager) {
                var skipParam = prevPageLoad ? (this._currentPageindex - 1) * this.model.itemRequestCount : this._currentPageindex * this.model.itemRequestCount;
                if(this.dataSource().dataSource.offline == true)
                    skipQuery = ej.Query().skip(skipParam).take(this.model.itemRequestCount);
                else 
                    skipQuery = this._getQuery().skip(skipParam);
                if (prevPageLoad) {
                    for (i = 0; i < skipQuery.queries.length; i++) {
                        if (skipQuery.queries[i].fn == "onTake") {
                            skipQuery.queries.splice(i, 1);
                            break;
                        }
                    }
                    skipQuery.take(2 * this.model.itemRequestCount);
                }
                if (!proxy._trigger("actionBegin")) {
                    queryPromise = proxy._dataUrl.executeQuery(skipQuery);
                    queryPromise.done(function (e) {
                        proxy._appendVirtualList(e.result, prevIndex, proxy._currentPageindex, nextIndex, prevPageLoad);
                        proxy._trigger("actionSuccess", { e: e });
                    }).fail(function (e) {
                        proxy._virtualCount--;
                        proxy._trigger("actionFailure", { e: e });
                    }).always(function (e) {
                        proxy._updateLoadingClass(false);
                        proxy._trigger("actionComplete", { e: e });
                    });
                }
            } 
            else {
                list = ej.DataManager(proxy.model.dataSource).executeLocal(skipQuery);
                this._appendVirtualList(list, prevIndex, this._currentPageindex, nextIndex, prevPageLoad);
                this._updateLoadingClass(false);
            }
        },

        _appendVirtualList: function (list, prevIndex, currentIndex, nextIndex, prevPageLoad) {
            this._virtualCount--;
            this._getLiHeight();
            if (($.inArray(currentIndex, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) return false;
            if (prevPageLoad && ($.inArray(currentIndex - 1, this._virtualPages.sort()) != -1)) {
                list.splice(0, this.model.itemRequestCount);
                prevPageLoad = false;
            }
            var items = this.model.itemRequestCount, tempUl = $("<ul>"), firstVirtualHeight, secondVirtualHeight;
            firstVirtualHeight = prevPageLoad ? ((currentIndex - 1) * items * this._liItemHeight) - (prevIndex * items + items) * this._liItemHeight : (currentIndex * items * this._liItemHeight) - (prevIndex * items + items) * this._liItemHeight;
            if (firstVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: firstVirtualHeight }));
            this._loadlist(list);
            $(this._dummyVirtualUl).attr("data-ej-page", currentIndex);
            if (prevPageLoad) {
                $(this._dummyVirtualUl).slice(0, items).attr("data-ej-page", currentIndex - 1);
            }
            tempUl.append(this._dummyVirtualUl);
            var ulItems = this.element;
            secondVirtualHeight = (currentIndex * items + items) * this._liItemHeight;
            if (nextIndex != null) secondVirtualHeight = (nextIndex * items * this._liItemHeight) - secondVirtualHeight;
            else secondVirtualHeight = ulItems.height() - secondVirtualHeight;
            if (secondVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: secondVirtualHeight }));
            var selector = ulItems.find("li[data-ej-page=" + prevIndex + "]").last();
            selector.next().remove();
            tempUl.children().insertAfter(selector);
            if(this.model.showCheckbox) this._checkboxHideShow(true);
            this._virtualPages.push(currentIndex);
            if (prevPageLoad) this._virtualPages.push(currentIndex - 1);
            this._virtualUl = ulItems.clone(true);
            this._showResult();
            this._addDragableClass()._enableDragDrop();
        },

        _selectListItems: function () {
            var listItems = this.element.find("li:not('.e-ghead')");;
            for (var i = 0; i < listItems.length; i++) {
                if ($(listItems[i]).hasClass('selectItem') && !$(listItems[i]).hasClass('e-select'))
                    $(listItems[i]).addClass("e-select").removeClass('selectItem');
            }
        },
        _setText: function (text) {
            for (var i = 0; i < this.listitems.length; i++)
                if ($(this.element.children("li")[i]).text() == text) this.unselectAll().selectItemByIndex(i);
        },
        _getLiCount: function () {
            return parseInt(this.listContainer.height() / this.listItemsElement.height());
        },
        _onDragStarts: function (data, target) {
            return this._trigger("itemDragStart", { items: data, target: target });
        },
        _onDrag: function (data, target) {
            return this._trigger("itemDrag", { items: data, target: target });
        },
        _onDragStop: function (data, target) {
            return this._trigger("itemDragStop", { items: data, target: target });
        },
        _onDropped: function (data, target, args) {
            if(data.length > 1)
				data = { items: data, droppedElementData: data, dropTarget:[args.target], event:args.event};
            else
				data = { items: [data], droppedItemText: data.text, droppedItemValue: data.value, droppedItemIsChecked: data.isChecked, droppedElementData: data, dropTarget:[args.target], event:args.event};
            return this._trigger("itemDrop",data);
        },
        _OnKeyPress: function (e) {
            if (this.model.enableIncrementalSearch && this.model.enabled) {
                this._incrementalSearch(this._isMozilla ? e.charCode : e.keyCode)
            }
        },
        _incrementalSearch: function (from) {
            var _proxy = this;
            var typedCharacter = String.fromCharCode(from);
            if (this._incqueryString != typedCharacter) this._incqueryString += typedCharacter;
            else this._incqueryString = typedCharacter;
            if ((this._incqueryString.length > 0) && (this._typeInterval == null)) {
                this._typeInterval = setTimeout(function () {
                    _proxy._incqueryString = "";
                    _proxy._typeInterval = null
                }, _proxy._typingThreshold)
            }
            var list = this.listContainer.find("ol,ul").children("li:not('.e-ghead')"),
                i, strlen;
            var caseSence = this.model.caseSensitiveSearch,
                str, queryStr = this._incqueryString;
            var querylength = this._incqueryString.length,
                searchflag = false;
            if (!caseSence) queryStr = queryStr.toLowerCase();
            var initialSelection = this._activeItem;
            --initialSelection;
            var startIndex = this._activeItem != list.length - 1 ? (this._activeItem + 1) : 0;
            if (this._incqueryString.length > 1) startIndex = this._activeItem;
            for (var i = startIndex;
                (i < list.length && initialSelection != i) ; i++) {
                str = $.trim($(list[i]).text());
                str = caseSence ? str : str.toLowerCase();
                if (str.substr(0, querylength) === queryStr) {
                    this._removeListHover();
                    this.element.children("li").removeClass('e-active');
                    this._selectedItem = i;
                    this._addListHover();
                    searchflag = true;
                } else if ((i == list.length - 1) && (searchflag == false)) {
                    if (startIndex != 0) {
                        i = -1;
                        ++initialSelection;
                    } else searchflag = true;
                }
                if (searchflag) break;
            }
        },
        _wireEvents: function () {
            this._on(this.listContainer, "focus", this._OnFocusIn);
            this._on(this.listContainer, "blur", this._OnFocusOut);
            $(window).on("resize", $.proxy(this._OnWindowResize, this));
        },
        _OnFocusIn: function () {
            if (!this._focused) {
                this._trigger("focusIn");
                this._on(this.listContainer, "keydown", this._OnKeyDown);
                this._on(this.listContainer, "keypress", this._OnKeyPress);
                this._focused = true;
            }
        },
        _OnFocusOut: function () {
            if (this._focused) {
                this._trigger("focusOut");
                this._off(this.listContainer, "keydown", this._OnKeyDown);
                this._off(this.listContainer, "keypress", this._OnKeyPress);
                this._focused = false;
            }
        }
    });
    ej.VirtualScrollMode = {
        /** Supports to Virtual Scrolling mode with normal only */
        Normal: "normal",
        /** Supports to Virtual Scrolling mode with continuous only */
        Continuous: "continuous"
    };
    ej.SortOrder = {

        Ascending: "ascending",

        Descending: "descending",

	    None:"none"
    };
})(jQuery, Syncfusion);
;
/**
* @fileOverview Plugin to style the Menu control.
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejMenu", "ej.Menu", {

        element: null,

        model: null,
        validTags: ["ul"],
        _setFirst: false,
        _rootCss: "e-menu",
        angular: {
            terminal: false
        },


        defaults: {

            height: "",

            width: "",

            animationType: "default",

            orientation: ej.Orientation.Horizontal,

            menuType: "normalmenu",
			
			isResponsive: true,

            contextMenuTarget: null,

            htmlAttributes: {},

            cssClass: "",

            openOnClick: false,

            subMenuDirection: "none",

            enableCenterAlign: false,

            showRootLevelArrows: true,

            showSubLevelArrows: true,

            enableAnimation: true,
            
            container: null,

            enableSeparator: true,

            enabled: true,

            overflowHeight: "auto",

            overflowWidth: "auto",

            fields: {

                child: null,

                dataSource: null,

                query: null,

                tableName: null,

                id: "id",

                parentId: "parentId",

                text: "text",

                spriteCssClass: "spriteCssClass",

                url: "url",

                imageAttribute: "imageAttribute",

                htmlAttribute: "htmlAttribute",

                linkAttribute: "linkAttribute",

                imageUrl: "imageUrl",
            },

            enableRTL: false,

            titleText: "Menu",

            locale: "en-US",

            excludeTarget: null,

            beforeOpen: null,

            open: null,

            close: null,

            mouseover: null,

            mouseout: null,

            click: null,

            keydown: null,

            overflowOpen: null,

            overflowClose:null,

            create: null,

            destroy: null
        },

        dataTypes: {
            animationType: "enum",
            cssClass: "string",
            titleText: "string",
            locale: "string",
            openOnClick: "boolean",
            enabled: "boolean",
            enableCenterAlign: "boolean",
            showArrow: "boolean",
            showRootLevelArrows: "boolean",
            showSubLevelArrows: "boolean",
            enableSeparator: "boolean",
			isResponsive: "boolean",
            enableRTL: "boolean",
            enableAnimation: "boolean",
            fields: {
                dataSource: "data",
                query: "data",
                child: "data"
            },
            excludeTarget: "string",
            htmlAttributes: "data"
        },


        _setModel: function (jsondata) {
            for (var key in jsondata) {
                switch (key) {
                    case "menuType":
                        jsondata[key] = this.model.menuType;
                        break;
                    case "fields":
                        this._wireEvents("_off");
                        this.element.empty().insertBefore(this.wrapper);
                        this.wrapper.remove();
                        $.extend(this.model.fields, jsondata[key]);
                        this._intializeData();
                        if (!this.model.enabled)
                            this._wireEvents("_off");
                        break;
                    case "orientation": this._setOrientation(jsondata[key]); break;
                    case "showRootLevelArrows": this._addArrow(jsondata[key], this.model.showSubLevelArrows); break;
                    case "showSubLevelArrows": this._addArrow(this.model.showRootLevelArrows, jsondata[key]); break;
                    case "enableSeparator": this._setSeparator(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "isResponsive":
                        if (this.model.isResponsive)
                            this._responsiveLayout();
                        else {
                            $(this.resWrap).remove();
                            $(this.wrapper).removeClass("e-menu-responsive");
                            $(this.element).removeClass("e-menu-responsive");
                            this.resWrap = null;
                        }
                        break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "enableRTL": this._setRTL(jsondata[key]); break;
                    case "enableCenterAlign": this._centerAlign(jsondata[key]); break;
                    case "excludeTarget": this.model.excludeTarget = jsondata[key];
                        break;
                    case "enabled": this.model.enabled = jsondata[key]; this._controlStatus(jsondata[key]); break;
                    case "animationType":
                        this._setAnimation(jsondata[key]);
                        break;
                    case "enableAnimation": this.model.enableAnimation = jsondata[key]; break;
                    case "openOnClick":
                            this._hoverOpen = !jsondata[key];
                            this._hoverClose = !jsondata[key]; 
                        break;
                    case "subMenuDirection": this._setSubMenuDirection(this.model.subMenuDirection); break;
                    case "titleText":
						this._titleText(jsondata[key]);
                        break;
                    case "locale":
                        this.model.locale = jsondata[key];
                        this._updateLocalConstant();
                        this._setLocale();
                        break;
                    case "overflowHeight":                       
                            this._setOverflowDimensions("height",jsondata[key]); break;
                    case "overflowWidth":                      
                        this._setOverflowDimensions("width",jsondata[key]); break;

                }
            }
        },
        _updateLocalConstant: function () {
            this._localizedLabels = ej.getLocalizedConstants("ej.Menu", this.model.locale);
        },
        		
        _setLocale: function () {
            this._titleText(this._localizedLabels.titleText);
        },
        _titleText: function(val){
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
                $(this.label).text(val);
        },

        _destroy: function () {
            this.model.menuType == ej.MenuType.ContextMenu ? this._referenceElement.append(this._cloneElement) : this._cloneElement.insertBefore(this.wrapper);
            this._cloneElement.removeClass('e-menu e-js');
            this.wrapper.remove();
        },


        _init: function () {
            this._cloneElement = this.element.clone();
            this.element.css("visibility", "hidden");
            this._setValues();
            this._intializeData();
            this.element.css("visibility", "visible");
        },

        _setValues: function () {
            this._mouseOver = true;
            this._hoverOpen = true;
            this._hoverClose = true;
            this._isMenuOpen = false;
            this._hideSpeed = 100;
            this._showSpeed = 100;
            this._isSubMenuOpen = false;
            this._isContextMenuOpen = false;
            this._disabledMenuItems = new Array();
            this._hiddenMenuItems = new Array();
            this._delayMenuHover = 0;
            this._delaySubMenuHover = 0;
            this._delaySubMenuShow = 0;
            this._preventContextOpen = true;
            this._setAnimation(this.model.animationType);
            this._isFocused = true;
            this._menuOverflowItems = new Array();
            this._menuHeaderItems = new Array();
            this._menuCloneItems = new Array();
            this._itemWidth = 0; 
        },
        _intializeData: function () {
            if (!ej.isNullOrUndefined(this.model.fields) && this.model.fields["dataSource"] != null) {
                this._generateTemplate(this.model.fields["dataSource"]);
                this._renderMenu();
            }
            else {
                this._renderMenu();
                this._wireEvents("_on");
                this._calculateOverflowItems();
            }
        },
        _renderMenu: function () {
            this._renderControl();
            this._addArrow(this.model.showRootLevelArrows, this.model.showSubLevelArrows);
			this._renderArrow();
			this._intializeMenu();
            //item Width for width property		
			    this._itemWidth = this.element.width();
			    if (this.model.isResponsive) {
			        this._ensureResponsiveClasses($(window).width() < 767);
			    }
			    if (this.model.orientation == "horizontal") {
			        this._on(this.element.parent().find("span.e-check-wrap.e-icon"), "click", this._mobileResponsiveMenu);
			        if(this.model.fields["dataSource"] != null) this._calculateOverflowItems();
			    }
        },      

        _renderControl: function () {
            var label, checkBox, checkObj, list, spanlist, i;
            if (this.model.menuType == "normalmenu") {
                this.wrapper = ej.buildTag("div");
                this.wrapper.addClass(this.model.cssClass + " e-menu-wrap");
            } else
                this.wrapper = ej.buildTag("div.e-menu-wrap");
            if (this.model.isResponsive) this._responsiveLayout();
            if (this.model.menuType != ej.MenuType.ContextMenu) {
                this.wrapper.insertBefore(this.element);
                this.wrapper.append(this.element);
                }            
            this.element.addClass("e-menu e-widget e-box").attr({ "role": "menu", "tabindex": 0 });
            this._addAttr(this.model.htmlAttributes);
            if (this.model.enableRTL) this._setRTL(this.model.enableRTL);
            this._setSubMenuDirection(this.model.subMenuDirection);
            if (this.model.menuType == "normalmenu") {
                this.model.orientation == "horizontal" ? this.element.addClass("e-horizontal") : this.element.addClass("e-vertical");
            }
            //For ContextMenu Mode
            else this._contextMenu_Template();
            this._addClass();
            if (this.model.enableCenterAlign) this._centerAlign(this.model.enableCenterAlign);
            if (this.model.enableSeparator) this._setSeparator(true);
            (!this.model.enabled) && this.disable();
        },
        _renderPopupWrapper: function (e) {
            if(this._ensureOverflowPopup()){                          
                this.popupWrapper = ej.buildTag("div.e-menu-popwrap");                         
                this.popupWrapper.insertAfter(this.element);              
                var height = typeof value === "number" ? this.model.overflowHeight + "px" :this.model.overflowHeight;
                var width = typeof value === "number" ? this.model.overflowWidth + "px" : this.model.overflowWidth;
                this.popupWrapper.css({ "height": height,"width":width});
                this.popupWrapper.hide();
                this._addOverflowItems();                
            }
        
        },
        _calculateOverflowItems: function (e) {        
            if (this._ensureOverflowPopup()) {
                this.element.find("li.e-list").removeClass("e-menu-show");
                $(this.lastelement).removeClass("e-last");
                this._menuHeaderItems = [];  
                var menuHeaderWidth = this.element.outerWidth();               
                if (this.element.find("li.e-ham-wrap").length > 0) //for window resizing event neglect the hamburger icon list from the listCollection
                {                   
                    if ((this._itemWidth<=this.element.width())||(this._itemWidth>=this.element.width()) && (!(this._isOverflowPopupOpen()))) {
						if(!ej.isNullOrUndefined(this.popupWrapper))
							this.popupWrapper.hide();                        
                    }
                }
				this._renderHamburgerIcon();	
				this.element.find("li.e-ham-wrap").css({display: 'list-item'});
                var hamburgerWidth = this.element.find("li.e-ham-wrap").outerWidth(), itemsOuterWidth = 0, hideState=true;
				this.element.find("li.e-ham-wrap").hide();
                this._menuHeaderItems = this.element.find(">li.e-list");
                this._menuOverflowItems = [];
                for ( var i = 0; i < this._menuHeaderItems.length; i++) {
                   var menuItem = $(this._menuHeaderItems[i]);                                        
                        itemsOuterWidth = itemsOuterWidth + menuItem.outerWidth();
                        if (itemsOuterWidth < menuHeaderWidth) {                      
                            menuItem.removeClass('e-menu-hide');
							this.element.find(">li.e-list.e-haschild>ul").find("li.e-haschild").find("span.e-icon.e-arrowhead-down").removeClass("e-arrowhead-down").addClass("e-arrowhead-right");
                            if (this.model.enableSeparator) this._setSeparator(true);                  
                        }
                        else {
							if(hideState)
							{
								hideState=false;
								this.element.find("li.e-ham-wrap").css({display: 'list-item'}); 
								itemsOuterWidth = itemsOuterWidth - menuItem.outerWidth() + hamburgerWidth;
								if(i>1){
									(itemsOuterWidth = itemsOuterWidth - $(this._menuHeaderItems[i-1]).outerWidth());
									i=i-2;
								}								
								continue;
							}
                            this._menuOverflowItems.push($(menuItem).clone(true));                            
                            menuItem.addClass('e-menu-hide');                            
                        }
                }            
                if (this._menuOverflowItems.length>0) {
                    this._renderHamburgerIcon();
                    $('.e-menu-popwrap').length ?  this._addOverflowItems():  this._renderPopupWrapper();                     
                    this.lastelement = this.element.find('>li.e-list:visible').last().addClass('e-last');
                    this.element.find(">li.e-list.e-haschild>ul").find("li.e-haschild").find("span.e-icon.e-arrowhead-down").removeClass("e-arrowhead-down").addClass("e-arrowhead-right");            
                }
                else if (this._menuOverflowItems.length == 0 && $("li.e-ham-wrap").length > 0) {
                    this.element.find("li.e-ham-wrap").remove();
                }

            }           
            if (this.model.orientation == "vertical" || this.model.menuType == ej.MenuType.ContextMenu && ($(window).width() >= 768) && (this.model.isResponsive)) {
                this.element.find("span.e-icon.e-arrowhead-down").removeClass('e-arrowhead-down').addClass('e-arrowhead-right');
            }
            

        },
        _renderHamburgerIcon: function () {
            if((this._ensureOverflowPopup())&& (this.element.find("li.e-ham-wrap").length==0)){            
                var liTag = ej.buildTag("li.e-ham-wrap");
                var divTag = ej.buildTag("div");
                this.hamburgerspan = ej.buildTag('span.e-hamburger');                                                     
                divTag.append(this.hamburgerspan);
                liTag.append(divTag);    
                this.element.append(liTag);
                //to set border
                if (this.model.height != 0) this._setHeight(this.model.height);
                else {                       
                    $("li.e-ham-wrap").css({"height":this.element.find("li.e-list").first().height()});
                }
                //button click event
                this._on(this.element.find("li.e-ham-wrap"), "click", this._overflowOpen);                
            }
        },
        _addOverflowItems: function () {
            if ((this._ensureOverflowPopup()) && ($('.e-menu-popwrap').length>0)) {
				if(!ej.isNullOrUndefined(this.popupWrapper)){
					this.popupWrapper.empty();
					this._menuCloneItems.length = 0;                
					for (var i = 0; i < this._menuOverflowItems.length; i++) {
						this._menuCloneItems.push($(this._menuOverflowItems[i]).clone(true));                    
					}
					this.ulTag = ej.buildTag("ul");
					this.ulTag.addClass("e-menu e-js e-responsive e-widget e-box e-vertical");
					this.popupWrapper.append(this.ulTag);
					for (var i = 0; i < this._menuCloneItems.length; i++) {
						if ($(this._menuCloneItems[i]).hasClass('e-haschild')) {
							$(this._menuCloneItems[i]).find('span.e-icon').removeClass('e-arrowhead-down e-arrowhead-right').addClass('e-arrowhead-down');
							$(this._menuCloneItems[i]).children('span.e-menu-arrow.e-menu-left').remove();                       
						}
						this.ulTag.append(this._menuCloneItems[i]);
					}
					$(this.ulTag).children("li").removeClass("e-menu-hide");
					//to set width of ULTag          
					var popupWidth = Math.round(this.popupWrapper.width());
					if (popupWidth>0) {
						var popupWrapperWidth = this.popupWrapper.innerWidth();
						this.popupWrapper.find("ul.e-menu").css({ "width":popupWrapperWidth+ "px" });                
					}
					//to set the separator                  
					if (this.model.enableSeparator) this._setSeparator(true);                    
				}
            }         
        },
        _overflowOpen: function (e) {           
            if(this._isOverflowPopupOpen ()){   
                //set popup wrapper left position 
                 var location = ej.util.getOffset(this.element);
					var left = location.left + (this.model.enableRTL? 0 :(this.element.outerWidth() - this.popupWrapper.outerWidth()));
					var top = location.top + this.element.outerHeight();
					
					if(this.wrapper.parent().length && (this.wrapper.parent().css("position") == "absolute" || this.wrapper.parent().css("position") == "relative"))
					{
						location = ej.util.getOffset(this.wrapper.parent());
						left = left-location.left;
						top = top-location.top;
					}						
					this.popupWrapper.css({ "left": left,"top":top});                          
                this.popupWrapper.show();                                
                this._trigger("overflowOpen",  {e:e});
            }
            else {
                this._overflowClose(e);
            }
        },           
        _overflowClose: function (e) {
            if(this._ensureOverflowPopup() && !ej.isNullOrUndefined(this.popupWrapper)){            
                this.popupWrapper.find("li.e-list").removeClass(".e-mhover.e-active.e-mfocused");
                this._hideAnimation(this.popupWrapper.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
                this.popupWrapper.hide();                               
                this._trigger("overflowClose", { e: e });
            }
        },
        _isOverflowPopupOpen: function () {
		       if($(this.popupWrapper).length>0)
            return this.popupWrapper.css("display")=="none";           
        },
        _removePopup:function(e){
            if(($(window).width()<767)&& (this.model.isResponsive)){
			        this._ensureResponsiveClasses($(window).width());
                if ((this.element.find("li.e-ham-wrap").length > 0) && (this.popupWrapper.length>0)){
                    this.element.find("li.e-ham-wrap").remove();
                    $('.e-menu-popwrap').remove();                   
                    this.element.find("li.e-list").addClass("e-menu-show");             
                }
            }          
        },      
        _mobileResponsiveMenu:function(e){            
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && ((this.element.css("display")=="none"))) {
                    this.element.removeClass("e-res-hide").addClass("e-res-show");                 
                }
            else if((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && (!(this.element.css("display")=="none")))
                {
                    this.element.removeClass("e-res-show").addClass("e-res-hide");                    
                }          
        },
        _ensureOverflowPopup:function(e){
            return (this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && ($(window).width() >= 768) && (this.model.isResponsive);                
        },
        _onResize:function(e){
			this.element.find("li.e-ham-wrap").hide(); 
            $(window).width()>=768 ? this._calculateOverflowItems() : this._removePopup();
        },
        _ensureResponsiveClasses:function(viewport){
            if (viewport && this.element.find("span.e-icon").hasClass("e-arrowhead-right") ) this.element.find("span.e-icon.e-arrowhead-right").removeClass('e-arrowhead-right').addClass('e-arrowhead-down');            
        },

        _responsiveLayout: function () {
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
                this.wrapper.addClass("e-menu-responsive");
                this.element.addClass("e-menu-responsive")
                this.resWrap = ej.buildTag('span.e-menu-res-wrap e-menu-responsive');
                this.inResWrap = ej.buildTag('span.e-in-wrap e-box e-menu-res-in-wrap');
                this.label = ej.buildTag('span.e-res-title').html(this.model.locale == "en-US" ? this.model.titleText : (ej.Menu.Locale[this.model.locale] && ej.Menu.Locale[this.model.locale].titleText)?ej.Menu.Locale[this.model.locale].titleText:this.model.titleText);
                this.check = ej.buildTag('span.e-check-wrap e-icon');
                this.wrapper.append(this.resWrap)
                this.resWrap.append(this.inResWrap);
                this.inResWrap.append(this.label).append(this.check);
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },

        _oncheck: function (e) {
            var obj = this.element.parents('.e-menu-wrap').children('.e-menu');
            e.isChecked ? obj.removeClass('e-res-hide').addClass('e-res-show') : obj.removeClass('e-res-show').addClass('e-res-hide');
        },
        _addClass : function (){
            //Adding arrows to items with sub items
            this.element.find('li:has("> ul")').find('> a,> span').addClass('aschild');
            this.element.find('>li').addClass('e-list').attr({ "role": "menuitem" });
			this.element.find('li').find(">a, >span").addClass('e-menulink');
            var list = this.element.find('.e-list a.aschild');
            var spanlist = this.element.find('.e-list span.aschild');
            var listElement, spanElement;
            for ( var i = 0; i < list.length; i++) {
                listElement = $(list[i]);
                listElement.siblings().attr({ "aria-hidden": true });
                listElement.parent().attr({ "aria-haspopup": true, "role": "menuitem" }).addClass("e-haschild");
                listElement.siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
            for ( var i = 0; i < spanlist.length; i++) {
                spanElement = $(spanlist[i]);
                spanElement.siblings().attr({ "aria-hidden": true });
                spanElement.parent().attr({ "aria-haspopup": true, "role": "menu" }).addClass("e-haschild");
                spanElement.siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
        },
		_renderArrow : function(){
			 if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
				if( $($(this.element).find("span.e-menu-arrow")).length == 0){
					var arrow = ej.buildTag("span.e-menu-arrow e-menu-left");
					$(arrow).append("<span class='e-arrowMenuOuter'></span>").append("<span class='e-arrowMenuInner'></span>");
					this.element.find('>li.e-list.e-haschild').append(arrow);
				}
			 }
		},
        _generateTemplate: function (data) {
            var proxy = this, queryPromise;
            if (data instanceof ej.DataManager) {
                queryPromise = data.executeQuery(this._columnToSelect(this.model.fields));
                queryPromise.done(function (e) {
                    proxy._odataFlag = true;
                    proxy._generateItemTemplate(e.result);
                    if (proxy.model.height != 0) proxy._setHeight(proxy.model.height);
                    proxy._wireEvents("_on");
                });
            } else {
                proxy._odataFlag = false;
                this._generateItemTemplate(proxy.model.fields['dataSource']);
                this._wireEvents("_on");
            }
        },

        _generateItemTemplate: function (items) {
            for (var i = 0; i < items.length; i++) {
                if ((items[i][this.model.fields.parentId] == null) || (items[i][this.model.fields.parentId] == 0)) {
                    var subItem = this._menuTemplate(items[i], items, this.model.fields);
                    this.element.append(subItem);
                }
            }
        },

        _menuTemplate: function (item, tableData, mapper) {
            var liTag, aTag, imgTag, spanTag;
            liTag = $(document.createElement('li'));
            liTag.attr("class", 'e-list');
            if (item[mapper.htmlAttribute]) this._setAttributes(item[mapper.htmlAttribute], liTag);
			aTag = $(document.createElement('a'));
			aTag.attr("class", 'e-menulink');
			if (item[mapper.imageUrl] && item[mapper.imageUrl] != "") {
				imgTag = $(document.createElement('img'));
				imgTag.attr('src', item[mapper.imageUrl]);
				if (item[mapper.imageAttribute]) this._setAttributes(item[mapper.imageAttribute], imgTag);
				aTag.append(imgTag);
			}
			else if (item[mapper.spriteCssClass] && item[mapper.spriteCssClass] != "") {
				spanTag = $(document.createElement('span'));
				spanTag.addClass(item[mapper.spriteCssClass]);
				aTag.append(spanTag);
			}
			aTag.append(item[mapper.text]);
			if (item[mapper.linkAttribute]) this._setAttributes(item[mapper.linkAttribute], aTag);
			if (item[mapper.url])
				aTag.attr('href', item[mapper.url]);
			liTag.append(aTag);
            if (item[mapper.id]) {
                liTag.prop("id", item[mapper.id]);
            }
            if (!ej.isNullOrUndefined(mapper["child"])) {
                this._odataFlag = true;
                if (mapper["child"]["dataSource"] instanceof ej.DataManager) {
                    var proxy = this, queryManager = ej.Query();
					$(liTag).attr({ "aria-haspopup": true, "role": "menu" }).addClass("e-haschild");
                    queryManager = this._columnToSelect(mapper["child"]);
                    queryManager.where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]);
                    var queryPromise = mapper["child"]["dataSource"].executeQuery(queryManager);
                    queryPromise.done(function (e) {
                        var childItems = e.result;
                        if (childItems && childItems.length > 0) {
                            var ul = $(document.createElement('ul'));
                            for (var i = 0; i < childItems.length; i++) {
                                var liItem = proxy._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                                ul.append(liItem);
                            }
                            liTag.append(ul);
                            $(liTag).children('a').addClass('aschild');
                            if ($(liTag).parent().hasClass('e-menu') && (proxy.model.showRootLevelArrows))
                                $(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrowhead-down")).addClass("e-arrow-space");
                            else if (proxy.model.showSubLevelArrows)
                                $(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
                            if (proxy.model.height != 0) proxy._setHeight(proxy.model.height);
                        }
                    });
                    queryPromise.then(function (e) {
                        proxy._renderArrow();
                    });
                }
                else {
					var childItems;
					if(!ej.isNullOrUndefined(item.child)){
						if(ej.isPlainObject(item.child))
							childItems = ej.DataManager(mapper["child"]["dataSource"]).executeLocal(ej.Query().where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]));
						else if(item.child instanceof Array)
							childItems =  item.child;
					}	
                    if (childItems && childItems.length > 0) {
                        var ul = $(document.createElement('ul'));
                        for (var i = 0; i < childItems.length; i++) {
                            var liItem = this._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                            ul.append(liItem);
                        }
                        liTag.append(ul);
                    }
                }
            }
            else if (!this._odataFlag) {
                var childItems = ej.DataManager(mapper["dataSource"]).executeLocal(ej.Query().where(mapper["parentId"], ej.FilterOperators.equal, item[mapper.id]));
                if (childItems && childItems.length > 0) {
                    var ul = ej.buildTag('ul');
                    for (var i = 0; i < childItems.length; i++) {
                        var liItem = this._menuTemplate(childItems[i], mapper["dataSource"], mapper);
                        ul.append(liItem);
                    }
                    liTag.append(ul);
                }
            }
            return liTag;
        },

        _setAttributes: function (data, element) {
            for (var key in data) {
                if (key == "class")
                    element.addClass(data[key]);
                else
                    element.attr(key, data[key]);
            }
        },

        _addArrow: function (topArrows, bottomArrows) {
            if (topArrows) {
				var arrowIcon = (this.model.orientation == "horizontal") ? "e-arrowhead-down" : "e-arrowhead-right";
				this.element.find('>li.e-list:has("> ul")').children('a').append($('<span>').addClass("e-icon "+arrowIcon)).addClass("e-arrow-space");
			}
            else {
                this.element.find('>li.e-list:has("> ul")').children('a').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

            if (bottomArrows)
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
            else {
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

        },

        _intializeMenu: function () {
            if (this.model.height != 0) this._setHeight(this.model.height);
            if (this.model.width != 0) this._setWidth(this.model.width);
            if (this.model.menuType == "contextmenu")
                this.model.openOnClick = false;
            if (this.model.openOnClick) {
                this._hoverOpen = false;
                this._hoverClose = false;
            }
        },

        _setOrientation: function (val) {
            if (val == "horizontal") {
                this.element.removeClass("e-vertical e-horizontal").addClass("e-horizontal");
            } else {
                this.element.removeClass("e-horizontal e-vertical").addClass("e-vertical");
            }
            if (val == "vertical") {
                this._removePopup();
            }
        },

        _setHeight: function (value) {
            if (this.model.orientation == "horizontal" && value !=="auto") {
                value = typeof value === "number" ? value + "px" : value;
                this.element.find('> li').find('>a:first').css("line-height", value);
                if (this.model.showRootLevelArrows)
                    this.element.find('> li').find('>a:first').find('> span:first').css({ "line-height": value, "top": "0px" })
                if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")){
                    if ($("li.e-ham-wrap").length > 0) {                        
                        this.element.find("li.e-ham-wrap").children("div").css({ "line-height": value });
                        this.element.find("li.e-ham-wrap").css({ "height": value });
                        if(this.popupWrapper)
                        this.popupWrapper.find("a.e-menulink").css({ "line-height":value });                        
                    }
                }
            }
            else
                this.element.height(value);
        },

        _setWidth: function (value) {
            this.element.css("width", value);
            if (this.model.orientation === "horizontal" && value !== "auto") {
                if (this.model.isResponsive)
                    this.resWrap.css("width", value);
            }
            if (this.model.orientation == "horizontal" &&  ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) ) {
                this._calculateOverflowItems();
            }
            
        },        
        _setOverflowDimensions:function(property,value){
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
                value = typeof value == "number" ? value + "px" : value;
                if (property == "height") this.popupWrapper.css({ height: value });
                else if (property == "width") this.popupWrapper.css({ width: value });                           
                this._addOverflowItems();
        },

        _setRTL: function (isRTL) {
            if (isRTL) {
                this.element.removeClass("e-rtl").addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
            if (isRTL && this.model.orientation === "horizontal")
                this.wrapper.removeClass("e-menu-rtl").addClass("e-menu-rtl");
            else
                this.wrapper.removeClass("e-menu-rtl");
			this.model.subMenuDirection = isRTL ? "left" : "right";
        },

        _setSubMenuDirection: function (direction) {
            if (direction != "left" && direction != "right")
                this.model.subMenuDirection = this.model.enableRTL ? "left" : "right";
        },

        _setAnimation: function (value) {
            value === "none" ? (this._showAnim = "none", this._hideAnim = "none") : (this._showAnim = "slideDown", this._hideAnim = "slideUp");
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _centerAlign: function (enableCenterAlign) {
            if (this.model.orientation == "horizontal" && enableCenterAlign)
                this.element.css('text-align', 'center');
            else
                this.element.css('text-align', 'inherit');
        },
        _columnToSelect: function (mapper) {
            var column = [], queryManager = ej.Query();
            if (ej.isNullOrUndefined(mapper.query)) {
                for (var col in mapper) {
                    if (col !== "tableName" && col !== "child" && col !== "dataSource" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.fields["dataSource"].dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else
                queryManager = mapper.query;
            return queryManager;
        },


        _max_zindex: function () {
            var parents, bodyEle, maxZ, index;
            if (this.model.menuType == "contextmenu") {
                parents = $(this._targetElement).parents();
                parents.push(this._targetElement);
            }
            else
                parents = $(this.element).parents();
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });
            maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;

        },

        _recursiveFunction: function (items, menuText) {
            var context = this;
            var isFound = false;
            $.each(items, function (key, value) {
                if (value.Text == menuText) {
                    context.selectedItem = value;
                    isFound = true;
                    return false;
                }
                else if (value.ChildItems != null) {
                    context._recursiveFunction(value.ChildItems, menuText);
                }
                if (isFound)
                    return false;
            });
        },

        _contextMenu_Template: function () {
            if(this.element[0].id !="")
            var oldWrapper = $(".e-menu-wrap #" + this.element[0].id).get(0);
            if (oldWrapper)
                $(oldWrapper.parentElement).remove();
            this.model.orientation = "vertical";
            this.element.addClass(this.model.cssClass + " e-context");
			 this.element.css("display", "none");
            this._referenceElement = this.element.parent();
            $("body").append(this.element);
            this.wrapper.insertBefore(this.element);
            this.wrapper.append(this.element);
        },

        _closeMenu: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
        },

        _onMenuIntent: function (element, obj, canOpen) {
            obj._delayMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == true && canOpen) {
                    var showanim = obj._showAnim;
                    var hideanim = obj._hideAnim;
                    var showSpeed = obj._showSpeed;
                    var hideSpeed = obj._hideSpeed;
                    obj._show(element, showanim, hideanim);
                }
            }, this._showSpeed);
        },

        _onHide: function (element, obj, canHide) {
            obj._delaySubMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == false && canHide) {
                    var id = obj._id;
                    var hideanim = obj._hideAnim;
                    var hideSpeed = obj._hideSpeed;
                    obj._closeAll();
                }

            }, obj._hideSpeed);
        },

        _subMenuPos: function (element, direction) {
            var pos = $(element).offset();
            var subMenuLeft, subMenuRight ;
            var posLeft = (direction == "right") ? pos.left + $(element).width() : pos.left;
            var subMenu = $('ul:first', element);
            var menuWidth = $(element).outerWidth();
            if (pos == null || pos == undefined)
                return false;
            var submenuWidth = subMenu.outerWidth() + 1; // +1 for the space between menu and submenu
            var left = this.model.container ? $(this.model.container).width() + $(document).scrollLeft() : document.documentElement.clientWidth + $(document).scrollLeft();
            if (this.model.menuType == "normalmenu") {
                if ($(element.parentNode).is(this.element)) {
                    if (this.model.orientation == "horizontal"){
                        subMenu.css("top", $(element).outerHeight() + "px");
                        if (!this.model.enableRTL) {
                            subMenuLeft = (left < (posLeft + submenuWidth)) ? ((posLeft + submenuWidth) - left) : 1;
                            subMenu.css("left", (subMenuLeft *(-1)) + "px");
                        }
                        else {
                            subMenuRight = (((posLeft + menuWidth) - submenuWidth) < 0) ? ((posLeft + menuWidth) - submenuWidth) : 1;
                            subMenu.css({ "left": "auto", "right": subMenuRight + "px" });
                        }
                    }
                    else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth &&  posLeft > submenuWidth))
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                    else {
                        subMenu.css("left", ($(element).outerWidth() + 4) + "px");
                    }
                } else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth &&  posLeft > submenuWidth)) {
                    subMenu.css("left", -(submenuWidth + 4) + "px");
                }
                else {
                    subMenu.css("left", ($(element).outerWidth() + 4) + "px");
                    var submenuHeight = subMenu.outerHeight();
                    var winHeight = $(window).height();
                    var submenuTop = (winHeight - (pos.top - $(window).scrollTop()));
                    if (winHeight < submenuHeight) {
					     var menuPos = pos.top - $(window).scrollTop();
						subMenu.css("top", -(menuPos) + 4 + "px");
					}
                    else if (submenuTop < submenuHeight) {
                        var menuPos = submenuTop - submenuHeight;
						subMenu.css("top", menuPos - 2 + "px");
					}
					else subMenu.css("top", "");
				}
            }
            else {
                left -= (posLeft + (2 * submenuWidth) + 4);
                if (left < 0) {
                    var menuLeftPos = (submenuWidth == null) ? "-206.5px" : "-" + (submenuWidth + 5) + "px";
                    subMenu.css("left", menuLeftPos);
                }
                else {
                    if (subMenu.parent('li.e-list').parent('ul').width() && direction == "right") {
                        subMenu.css("left", (subMenu.parent('li.e-list').parent('ul').width() + 4) + "px");
                    }
                    else if (pos.left > submenuWidth)
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                }
                var submenuHeight = subMenu.outerHeight();
                if ((pos.top + submenuHeight > $(window).height())) {
                    var top = -(submenuHeight) + $(element).outerHeight();
                    if (submenuHeight > (pos.top + ($(element).outerHeight() / 2))) {
                        subMenu.css("top", -(submenuHeight / 2) + "px");
                    }
                    else
                        subMenu.css("top", top + "px");
                }
                else
                    subMenu.css("top","0px");
            }
        },


        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin + " e-menu-wrap");
        },

        _setSeparator: function (separator) {
            if (separator){
                this.element.addClass("e-separator");
                if ($('.e-menu-popwrap').length>0 && !ej.isNullOrUndefined(this.ulTag))
                    this.ulTag.addClass("e-separator");     
            }
            else this.element.removeClass("e-separator");
        },

        _contextMenuEvents: function (action) {
            this[action]($(this.model.contextMenuTarget), "mouseup taphold", this._ContextMenuHandler);
            this[action](this.element, "contextmenu", this._onDefaultPreventer);
            this[action]($(this.model.contextMenuTarget), "contextmenu", this._onDefaultPreventer);
            this[action]($(document), "mousedown", this._onContextClose);
        },

        _show: function (element, showanim, hideanim) {
            var siblingElement;
            var sibling = $('> ul', element);
			var zIndex = this._max_zindex();
            sibling.attr({ "aria-hidden": false });
            this._hideAnimation($(element).siblings().find(' > ul:visible'), hideanim);
            if (!($.inArray(this._disabledMenuItems, element) > -1)) {
                if (sibling.css('display') != "none") {
                    siblingElement = this.model.openOnClick ? $(sibling) : sibling.children().find('> ul');
                    this._hideAnimation(siblingElement, hideanim);
                }
                else $('> ul', element).children().find('> ul').hide();
                this._subMenuPos(element, this.model.subMenuDirection);
                sibling.css({ "z-index": zIndex + 1 });
				$(element).children('span.e-menu-arrow').css({"z-index": zIndex + 2 });
                if ($('> ul', element).css('display') != 'block' && !$(element).hasClass("e-disable-item")) {
                    this._showAnimation(sibling, showanim);
                    sibling.closest('li').addClass('e-active e-mfocused');
                }
                if ($(element).siblings("li.e-active").length > 0)
                    $(element).siblings("li.e-active").removeClass("e-active e-mfocused");
            }
        },

        _closeAll: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
            this._hideAnimation(this.element.find('> ul:visible'), this._hideAnim);
        },

        _showAnimation: function (element, anim) {
            switch (anim) {
                case "slideDown":
                    element.slideDown(this.model.enableAnimation ? 200 : 0); break;
                case "none":
                    element.css("display", "block"); break;
            }
        },

        _hideAnimation: function (element, anim) {
            switch (anim) {
                case "slideUp":
                    $(element).attr({ "aria-hidden": true });
                    element.slideUp(this.model.enableAnimation ? 100 : 0); break;
                case "none":
                    element.css("display", "none"); break;
            }
            element.closest('li').removeClass('e-active e-mfocused');
        },

        _removeValue: function (text, disableList) {
            var $browInfo = ej.browserInfo(), elementText;
            $browInfo.version === "8.0" && $browInfo.name === "msie" ? elementText = text[0].outerText : elementText = text[0].textContent;
            var count = $(disableList).length, i = 0;
            var childEle = $(disableList).children('a').length == 0 ? $(disableList).children('span') : $(disableList).children('a');
            while (i <= count) {
                if ($(childEle[i]).text() === elementText)
                    return i;
                i++;
            }
        },

        _createSubLevelItem: function (target, element) {
            var ulTag;
            ulTag = $(document.createElement('ul'));
            ulTag.append(element);
            target.append(ulTag);
            target.attr({ 'role': 'menu', 'aria-haspopup': 'true' });
            target.addClass("e-haschild");
            this.element.find('li:has("> ul")').find('> a,>span').addClass('aschild e-arrow-space');
            this._insertArrows(ulTag);
        },

        _insertArrows: function (ulTag) {
            if (this.model.showRootLevelArrows)
                ulTag.find('>a,>span').append($('<span>').addClass("e-icon e-arrowhead-down")).addClass("e-arrow-space");
            else
                ulTag.find('>a,>span').removeClass("e-arrow-space").find('>span.e-icon').remove();

            if (this.model.showSubLevelArrows)
                ulTag.parent('li.e-list:has(>ul)').children('a,span').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
            else
                ulTag.parent('li.e-list:has(>ul)').children('a,span').removeClass("e-arrow-space").find('>span.e-icon').remove();
        },

        _createMenuItem: function (item) {
            var liTag, aTag, imgTag, spanTag;
            liTag = $(document.createElement('li'));
            liTag.attr({ "class": 'e-list', "role": "menuitem" });
            if (item["htmlAttribute"]) this._setAttributes(item["htmlAttribute"], liTag);
            if (item["text"] && item["text"] != "") {
                aTag = $(document.createElement('a'));
				aTag.attr({ "class": 'e-menulink'});
                if (item["imageUrl"] && item["imageUrl"] != "") {
                    imgTag = $(document.createElement('img'));
                    imgTag.attr('src', item["imageUrl"]);
                    if (item["imageAttribute"]) this._setAttributes(item["imageAttribute"], imgTag);
                    aTag.append(imgTag);
                }
                else if (item["spriteCssClass"] && item["spriteCssClass"] != "") {
                    spanTag = $(document.createElement('span'));
                    spanTag.addClass(item["spriteCssClass"]);
                    aTag.append(spanTag);
                }
                aTag.append(item["text"]);
                if (item["linkAttribute"]) this._setAttributes(item["linkAttribute"], aTag);
                if (item["url"])
                    aTag.attr('href', item["url"]);
                liTag.append(aTag);
            }
            if (item["id"]) {
                liTag.prop("id", item["id"]);
            }
            if (!this.model.enabled)
                liTag.addClass("e-disable-item");
            return liTag;
        },

        _insertNode: function (itemCollection, targetNode, operation) {
            var item = 0, targetList = 0, target = 0, targetCollection = [];
            if ($(targetNode).is(this.element))
                targetCollection.push(this.element);
            else
                typeof (targetNode) === "string" ? targetCollection.push(this.element.find(targetNode)) : typeof (targetNode) === "undefined" ? targetCollection.push(this.element) : targetCollection.push(targetNode);
            for (targetList = 0; targetList < targetCollection.length; targetList++) {
                for (target = 0; target < targetCollection[targetList].length; target++)
                    for (item = 0; item < itemCollection.length && !ej.isNullOrUndefined(itemCollection[item]) ; item++)
                        this._addItem(itemCollection[item], targetCollection[targetList][target], operation);
            }
        },

        _addItem: function (item, target, operation) {
            var element, targetElement;
            this._wireEvents("_off");
            element = this._createMenuItem(item);
            target = target === "default" ? $("#" + item["parentId"]) : $(target);
            switch (operation) {
                case "insert":
                    $(target).is(this.element) ? targetElement = target : targetElement = target.children('ul');
                    targetElement.length != 0 ? targetElement.append(element) : this._createSubLevelItem(target, element);
                    break;
                case "insertBefore":
                    if (!$(target).is(this.element))
                        element.insertBefore(target);
                    else
                        target.prepend(element);
                    break;
                case "insertAfter":
                    if (!$(target).is(this.element))
                        element.insertAfter(target);
                    else
                        target.append(element);
                    break;
            }
            this._wireEvents("_on");
        },

        _removeItem: function (item) {
            if (item.siblings('li').length == 0) {
                item.closest("ul").siblings('a.aschild').removeClass("aschild e-arrow-space").children('span.e-icon').remove();
                !item.closest("ul").hasClass("e-menu") ? item.closest("ul").remove() : item.remove();
            }
            else
                item.remove();
        },

        _hiddenElement: function (ele) {
            if (ele.length > 0 && ($.inArray(ele[0], this._hiddenMenuItems) == -1)) {
                ele.addClass("e-hidden-item");
                this._hiddenMenuItems.push(ele[0]);
            }
        },

        _showElement: function (ele) {
            if (ele.length > 0 && ($.inArray(ele[0], this._hiddenMenuItems) > -1)) {
                ele.removeClass("e-hidden-item");
                this._hiddenMenuItems.splice(this._hiddenMenuItems.indexOf(ele[0]), 1);
            }
        },

        _getNodeByID: function (node) {
           if(ej.isNullOrUndefined(this.popupWrapper))	
              (typeof node != "object" && node != "") && (node = this.element.find(".e-list" + node));
			else
			  (typeof node != "object" && node != "") && (node = this.popupWrapper.children().find(".e-list" + node));
            return $(node);
        },

        _processItems: function (node, bool) {
            var ele = this._getNodeByID(node);
            for (var i = 0; i < ele.length; i++) bool ? this._showElement($(ele[i])) : this._hiddenElement($(ele[i]));
        },

        insert: function (item, target) {
            this._insertNode(item, target, "insert");
        },

        insertBefore: function (item, target) {
            this._insertNode(item, target, "insertBefore");
        },

        insertAfter: function (item, target) {
            this._insertNode(item, target, "insertAfter");
        },

        remove: function (targetCollection) {
            var target = 0, innerTarget = 0;
            for (target = 0; target < targetCollection.length; target++) {
                targetCollection[target] = typeof (targetCollection[target]) === "string" ? (this.element.find(targetCollection[target])) : targetCollection[target];
                for (innerTarget = 0; innerTarget < targetCollection[target].length; innerTarget++)
                    (targetCollection[target][innerTarget].tagName === "LI" || targetCollection[target][innerTarget].tagName === "UL") ? this._removeItem($(targetCollection[target][innerTarget])) : targetCollection[target][innerTarget].remove();
            }
        },

        showContextMenu: function (locationX, locationY, targetElement, e, update) {
            this._closeMenu();
            this._eventArgs = e;
            if (!ej.isNullOrUndefined(e) && this._checkForExclusion(e.target)) return;
            if (this._trigger("beforeOpen", { target: targetElement, events: e })) return false;
            if (this._preventContextOpen) {
                if (!ej.isNullOrUndefined(targetElement))
                    this._targetElement = targetElement;
                else if (!ej.isNullOrUndefined(target))
                    this._targetElement = target;
                else
                    this._targetElement = this.element;
                if (update) {
                    var position = this._calculateContextMenuPosition(e);
                    locationX = position.X;
                    locationY = position.Y;
                }
                this.element.css({ "left": locationX, "top": locationY });
                this.element.css({ "z-index": this._max_zindex() + 1 });
                this._showAnimation(this.element, this._showAnim);
                this._isContextMenuOpen = true;
                this.element.focus();

                this._trigger("open", { target: targetElement });
                this._on(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
            }
            return false;
        },

        _checkForExclusion: function (e) {
            if (!ej.isNullOrUndefined(this.model.excludeTarget)) {
                var excludeTargets = this.model.excludeTarget.split(",");
                for (var target = 0; target < excludeTargets.length; target++) {
                    if ($(e).closest(this.model.excludeTarget).is($.trim(excludeTargets[target])))
                        return true;
                }
            }
        },


        hideContextMenu: function (e) {
            this._closeMenu();
            this.element.find(".e-mhover").removeClass("e-mhover");
            this.element.find(".e-mfocused").removeClass("e-mfocused");
            this._hideAnimation(this.element, this._hideAnim);
            this._isContextMenuOpen = false;

            this._trigger("close", $.extend({ events: e }, e));
            this._off(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
        },


        disableItem: function (itemToDisable) {
            var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return $.trim($(this).text()) === itemToDisable; });
            if (isMenuItem.length > 0 && !($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().addClass("e-disable-item").attr({ "aria-disabled": true });
                isMenuItem.parent().find('>a.aschild span.e-icon').addClass("e-disable");
                this._disabledMenuItems.push(isMenuItem.parent()[0]);
            }
        },


        disableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToDisable = this.element.find("#" + itemId) ? this.element.find("#" + itemId)[0] : undefined;
                if (itemToDisable && !($.inArray(itemToDisable, this._disabledMenuItems) > -1)) {
                    $(itemToDisable).addClass("e-disable-item").attr({ "aria-disabled": true });
                    $(itemToDisable).find('>a.aschild span.e-icon').addClass("e-disable");
                    this._disabledMenuItems.push(itemToDisable);
                }
            }
        },

        getHiddenItems:function(){
            return this._hiddenMenuItems;
        },

        hideItems: function (node) {
            if (typeof node == "object" && node.length !== undefined) {
                for (var i = 0; i < node.length; i++) this._processItems(node[i], false);                
            }
            else this._processItems(node, false);
        },

        showItems:function(node){
            if (typeof node == "object" && node.length !== undefined) {
                for (var i = 0; i < node.length; i++) this._processItems(node[i], true);
            }
            else this._processItems(node, true);
        },

        enableItem: function (itemToEnable) {
            var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return $.trim($(this).text()) === itemToEnable; });
            if (isMenuItem.length > 0 && ($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().removeClass("e-disable-item").attr({ "aria-disabled": false });
                isMenuItem.parent().find('>a.aschild span.e-icon').removeClass("e-disable");
                var index = this._removeValue(isMenuItem, this._disabledMenuItems);
                this._disabledMenuItems.splice(index, 1);
            }
        },


        enableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToEnable = this.element.find("#" + itemId)[0];
                if (itemToEnable && ($.inArray(itemToEnable, this._disabledMenuItems) > -1)) {
                    $(itemToEnable).removeClass("e-disable-item").attr({ "aria-disabled": false });
                    $(itemToEnable).find('>a.aschild span.e-icon').removeClass("e-disable");
                    for (var i = this._disabledMenuItems.length - 1; i >= 0; i--) {
                        if (this._disabledMenuItems[i].id == itemId) {
                            this._disabledMenuItems.splice(i, 1);
                        }
                    }
                }
            }
        },


        disable: function () {
            this.model.enabled = false;
            var menuItemCollection = this.element.find('>li[class~=e-list]');
            var proxy = this;
            $.each(menuItemCollection, function (key, value) {
                if (!($.inArray(value, proxy._disabledMenuItems) > -1))
                {
                    $(value).addClass("e-disable-item").attr({ "aria-disabled": true });
                    $(value).find('>a.aschild span.e-icon').addClass("e-disable");
                    proxy._disabledMenuItems.push(value);
                }
                
            });
        },


        enable: function () {
            var proxy = this;
            this.model.enabled = true;
            var menuItemCollection = this.element.find('li.e-disable-item');
            $.each(menuItemCollection, function (key, value) {
                $(value).removeClass("e-disable-item").attr({ "aria-disabled": false });
                $(value).find('>a.aschild span.e-icon').removeClass("e-disable");
                proxy._disabledMenuItems.pop(value);
            });
        },

        show: function (locationX, locationY, targetElement, e) {
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this.showContextMenu(locationX, locationY, targetElement, e, false);
            else
                this.element.css("display", "block");
        },

        hide: function (e) {
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this.hideContextMenu(e);
            else {
                this._closeMenu();
                this.element.css("display", "none");
            }
        },

        _wireEvents: function (action) {
            this[action](this.element.find("li.e-list"), "mouseout", this._mouseOutHandler);
            this[action](this.element.find("li.e-list"), "mouseover", this._mouseOverHandler);
            this[action](this.element.children(), "click", this._onClickHandler); 
            this[action](this.element, "keydown", this._onKeyDownHandler);
            this[action](this.element, "focus", this._OnFocusHandler);
            this[action](this.element, "blur", this._OnFocusOutHandler);
            if (this.model.menuType == "contextmenu" && $(this.model.contextMenuTarget)[0] != null) {
                this._contextMenuEvents(action);
            }
            if (this.model.menuType != "contextmenu") {
                this[action]($(document), "click", this._onDocumentClick);
                this[action](this.element, "mousedown", this._onMouseDownHandler);
            }
            this[action]($(window),"resize", $.proxy(this._onResize, this));            
        },

        _mouseOverHandler: function (event) {
            var element, itemId = "";
            this.element.find(".e-mhover").removeClass("e-mhover");
            event.currentTarget = $(event.target).closest("li")[0];
            if (!$(event.currentTarget).hasClass('e-disable-item'))
                $(event.currentTarget).addClass("e-mhover");
            else this._isFocused = false;
            if (event.stopPropagation)
                event.stopPropagation();
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delaySubMenuHover);
            }
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delayMenuHover);
            }
            this._mouseOver = true;
            this._isMenuOpen = true;
            if ($(event.currentTarget.parentNode.parentNode).is(this.element)) {
                this._isSubMenuOpen = false;
            }
            else {
                this._isSubMenuOpen = true;
            }
            if (event.currentTarget.nodeName == "LI")
                element = event.currentTarget;
            else if (event.currentTarget.parentNode) {
                if (event.currentTarget.parentNode.nodeName == "LI")
                    element = event.currentTarget.parentNode;
                else
                    return false;
            }
            else {
                event.preventDefault();
                return false;
            }
            if (!$(event.currentTarget).hasClass('e-disable-item'))
                this._onMenuIntent(element, this, this._hoverOpen);
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "ID": itemId };

                this._trigger("mouseover", $.extend({ events: eventArgs }, eventArgs));
            }
        },

        _onMouseDownHandler: function (e) {
            if ($(e.target).hasClass('e-menu')) this._isFocused = false;
        },


        _mouseOutHandler: function (event) {
            var element, itemId = "";
            $(event.currentTarget).removeClass("e-mhover");
            if (event.stopPropagation)
                event.stopPropagation();
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delaySubMenuHover);
            }
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delayMenuHover);
            }
            this._mouseOver = false;
            this._isMenuOpen = false;

            if (event.currentTarget.nodeName == "LI")
                element = event.currentTarget;
            else if (event.currentTarget.parentNode) {
                if (event.currentTarget.parentNode.nodeName == "LI")
                    element = event.currentTarget.parentNode;
                else
                    return false;
            }
            else {
                event.preventDefault();
                return false;
            }
            this._onHide(element, this, this._hoverClose);
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "ID": itemId };

                this._trigger("mouseout", $.extend({ events: eventArgs }, eventArgs));
            }
        },

        _onClickHandler: function (event) {
            var element, itemId = "" , parentId, parentText;
            this._isFocused = true;
            var openOnClickStart = false;
            if (!$(event.target).closest("li.e-list").hasClass('e-disable-item') && $(event.target).closest("li.e-list").length > 0) {
                element = $(event.target).closest("li.e-list")[0];
                if ($(element).is(this.element.find(">li.e-list")))
                    this._activeElement = element;
            }
            else {
                if ($(event.target).is(this.element))
                    this._activeElement = this.element.find(">li:first");
                return;
            }
            if ($(event.target).is("a") && $(element).find(">a,>span").hasClass('aschild') && this.model.openOnClick) {
                this._isFocused = false;
            }
            if (!this._hoverOpen && $(element).find(">a,>span").hasClass('aschild')) {
                this._show(element, this._showAnim, this._hideAnim);
                this._hoverOpen = false;
                openOnClickStart = true;
            }
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                //Check if Context Menu, then hide the context menu firing the events
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen && !$(element).hasClass("e-haschild")) {
                        this._hideAnimation(this.element, this._hideAnim);
                        this._isContextMenuOpen = false;

                        this._trigger("close", $.extend({ events: event }, event));
						this._off(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
                    }
                }
                if (!openOnClickStart) {



                    if (!$(element).find(">a,>span").hasClass("aschild")) {
                        this._closeMenu();
                        if (this.model.openOnClick)
                            this._hoverOpen = false;
                    }
                }
                var menuText = $(element).children('a,span').text();
                var parent = $(element).closest("ul").parent("li");
                if (parent.length != 0) {
                    parentId = ej.isNullOrUndefined(parent.attr("id")) ? null : parent.attr("id");
                    parentText = parent.children('a,span').text();
                }
                else {
                    parentId = null;
                    parentText = null;
                }
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "selectedItem": this.selectedItem, "ID": itemId, "parentId": parentId, "parentText": parentText };
                this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                this.selectedItem = null;
                if (this.model.openOnClick && this.model.menuType != "contextmenu")
                    this.element.focus();
            }
        },


        _onKeyDownHandler: function (e) {
            if( e.target && e.target.nodeName && $( e.target ).closest( "input, textarea" ).length > 0) return true;
            if (this.model.menuType == "contextmenu" && !this._isContextMenuOpen) return;
            var element, focusEle, itemId = "", hoverElement = this.element.find(".e-mhover"), focusedElement = this.element.find(".e-mfocused"), currentElement, liVisible;
            if (!$(hoverElement).length > 0 && $(this._activeElement).length > 0)
                hoverElement = focusedElement = $(this._activeElement);

            if (e.keyCode == 9) {
                this._isFocused = false;
                this._OnFocusOutHandler();
            }
            else if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40)
                e.preventDefault();

            if (e.keyCode == 40) {
                if (this.model.orientation == "horizontal") {
                    if (this.element.find(">li.e-mhover").children("ul").length > 0 || $(this._activeElement).length > 0) {
                        if ($(hoverElement).children("ul").css('display') === "none")
                            this._show(hoverElement[hoverElement.length - 1], this._showAnim, this._hideAnim);
                        hoverElement.removeClass("e-mhover e-mfocused").children("ul:first").find("li:first").addClass("e-mhover");
                        this._activeElement == null ? hoverElement.addClass("e-mfocused") : $(this._activeElement).addClass("e-mfocused");
                    } else {
                        liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        $(hoverElement[hoverElement.length-1]).removeClass("e-mfocused e-mhover");
                        focusEle = $(liVisible[liVisible.index(hoverElement) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                        focusEle.addClass("e-mhover");
                    }
                }
                else if (this.model.orientation != "horizontal") {
                    if (hoverElement.length == 0) liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    else liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    hoverElement.removeClass("e-mfocused e-mfocused");
                    if (hoverElement.length > 0) {
                        hoverElement.removeClass("e-mhover");
                        focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                    } else focusEle = liVisible.first();
                    focusEle.addClass("e-mhover");
                }
            }
            if (e.keyCode == 39) {
                if (this.model.orientation == "horizontal" && (this.element.find(">li.e-list").hasClass("e-mhover") || $(this._activeElement).length > 0)) {
                    hoverElement.removeClass("e-mfocused e-mhover");
                    liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                    focusEle.addClass("e-mhover");
                }
                else if ($(hoverElement).children("ul").length > 0) {
                    hoverElement.removeClass("e-mfocused e-mhover");
                    var firstChild = hoverElement.children("ul:first").find("li:first");
                    this._show(hoverElement[hoverElement.length - 1], this._showAnim, this._hideAnim);
                    liVisible = hoverElement.addClass('e-mfocused').children("ul:first").children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    focusEle = $(liVisible[liVisible.index(firstChild)]).length > 0 ? $(liVisible[liVisible.index(firstChild)]) : liVisible.first();
                    focusEle.addClass("e-mhover");
                }
                else if (hoverElement.children("ul").length <= 0) {
                    if (this.model.orientation == "horizontal" && hoverElement.parent().closest('.e-list').parent().hasClass('e-menu')) {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        $(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) + 1]) : $(liVisible[liVisible.index(focusedElement.first())]);
                        focusEle.addClass("e-mhover");
                    }
                }
            }

            if (e.keyCode == 38) {
                if (this.model.orientation == "horizontal") {
                    liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    hoverElement.removeClass("e-mfocused e-mhover");
                    focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                }
                else if (this.model.orientation != "horizontal") {
                    if (hoverElement.length == 0) liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    else liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    if (hoverElement.length > 0) {
                        hoverElement.removeClass("e-mfocused e-mhover");
                        focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                    } else focusEle = liVisible.last();
                }
                focusEle.addClass("e-mhover");
            }

            if (e.keyCode == 37) {
                if (this.model.orientation == "horizontal") {
                    if (this.element.find(">li.e-list").hasClass("e-mhover") || $(this._activeElement).length > 0) {
                        hoverElement.removeClass("e-mfocused e-mhover");
                        liVisible = this.element.find('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                        focusEle.addClass("e-mhover");
                    }
                    else {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        $(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused e-active");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        if (hoverElement.parent().closest('.e-list').parent('.e-menu').length > 0)
                            focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) - 1]) : liVisible.last();
                        else
                            focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]) : liVisible.last();
                        focusEle.addClass("e-mhover");
                    }
                }
                else if (hoverElement.parent(".e-menu").length == 0 || (this.model.menuType == "contextmenu" && hoverElement.parent("ul.e-context").length == 0)) {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        $(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]) : $(liVisible[liVisible.index(focusedElement.last())]);
                        focusEle.addClass("e-mhover");
                }
            }
            if (e.keyCode == 13) {
                var menuText = $(hoverElement).children('a,span').text();
                itemId = !ej.isNullOrUndefined($(hoverElement)[0]) ? $(hoverElement)[0].id : "";
                var eventArgs = { "menuId": this.element[0].id, "text": menuText, "selectedItem": focusedElement, "ID": itemId };
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen && hoverElement.length > 0 && !focusedElement.hasClass("e-disable-item")) {
                        if (this.model.click)
                            this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                        this.selectedItem = null;
                        this.hideContextMenu(e);
                    }
                } else {
                    if (hoverElement.length > 0 && !hoverElement.hasClass("e-disable-item")) {
                        if ($(hoverElement).find(">a,>span").hasClass('aschild') && $(hoverElement).children("ul").css('display') === "none") {
                            this._show(hoverElement[0], this._showAnim, this._hideAnim);
                            hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                        }
                        else {
                            this.element.find(".e-mhover >a,.e-mhover >span ").focus();
                            this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                            this._closeAll();
                        }
                        if (ej.isNullOrUndefined($(hoverElement).find(">a").attr("href")))
                            this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                    }
                }
            }
            if (e.keyCode == 27) {
                if (this.model.menuType == "contextmenu")
                    this.hideContextMenu(e);
                else
					this.element.find("li.e-list").removeClass("e-mhover");
                    this.element.find('li.e-list:has("> ul")').find('> ul:visible').parents("li.e-list").addClass("e-mhover");
                    this._closeAll();
            }
            if ($(e.target).is(this.element) && e.target.parentNode) {
                if (hoverElement.length)
                    element = hoverElement;
            }
            else
                return false;
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();

                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                if (this.element.find('li.e-mfocused.e-mhover').length || e.keyCode == 13)
                    currentElement = (e.keyCode == 13) ? hoverElement : this.element.find('li.e-mfocused.e-mhover');
                var eventArgs = { "text": menuText, "element": element, "targetElement": currentElement , "event": e, "ID": itemId };

                this._trigger("keydown", $.extend({ events: eventArgs }, eventArgs));
            }
            this._activeElement = null; focusedElement = this.element.find(".e-mfocused");
        },

        _OnFocusHandler: function (event) {
            if (this.model.menuType != "contextmenu" && !this.element.find(">li:first").hasClass("e-disable-item") && this._isFocused && this.element.find(".e-mhover").length == 0 && $('li.e-ham-wrap').length ==0) {
                this.element.find(">li:first").addClass("e-mhover");
            }
            else this._isFocused = true;
            if (this.model.menuType != "contextmenu")
                this._activeElement = this.element.find(">li:first");
        },

        _OnFocusOutHandler: function () {
            if (!this._isFocused) {
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
            }
            this._isFocused = false;
        },

        _onDocumentClick: function (event) {
            if (this.model.openOnClick)
                this._hoverOpen = false;
            if (!$(event.target).parents(".e-menu").is(this.element)) {
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
                this._isFocused = true;
            }
            if ((!$(event.target).parents("ul.e-menu").is(this.popupWrapper)) && (!$(event.target).hasClass('e-ham-wrap')) && (!($(event.target).parent().hasClass('e-ham-wrap'))) && (!$(event.target).hasClass('e-hamburger')) && (!$(event.target).parent("li").hasClass("e-haschild")) && (!$(event.target).is('span.e-icon.e-arrowhead-down')) && !(this._isOverflowPopupOpen()) && this.model.menuType != "contextmenu" && $("li.e-ham-wrap").length > 0) {
                this._overflowClose();
            }           
        },


        _ContextMenuHandler: function (e) {
            var isRightClick = false;
            if (e.type == "taphold" && e.button != 0)
                isRightClick = true;
            else if (e.button)
                isRightClick = (e.button == 2);
            else if (e.which)
                isRightClick = (e.which == 3); //for Opera
            var targetElement = e.target;
            if (isRightClick) {
                var evt = e;
                if (e.type == "taphold") {
                    if (e.options.type == "touchstart") evt = e.options.touches[0];
                    else evt = e.options;
                }
                var showSpeed = this._showSpeed;
                this.showContextMenu(null, null, targetElement, evt, true);
            }
            else {
                if (this._isContextMenuOpen) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this.hideContextMenu(e, hideanim, hideSpeed);
                }
            }
        },

        _calculateContextMenuPosition: function (e) {
            var locationX, locationY;
            this.element.css({"top": "", "left": ""}); 
            locationX = (e.clientX + this.element.width() < $(window).width()) ? e.pageX : e.pageX - this.element.width();
            locationY = (e.clientY + this.element.height() < $(window).height()) ? e.pageY : (e.clientY > this.element.height()) ? e.pageY - this.element.height() : $(window).height() - this.element.outerHeight();
            var bodyPos = $("body").css("position") != "static" ? $("body").offset() : { left: 0, top: 0 };
            locationX -= bodyPos.left, locationY -= bodyPos.top;
            return {
                X: locationX,
                Y: locationY
            };
        },


        _onDefaultPreventer: function (e) {
            e.preventDefault();
            e.stopPropagation();
            return false;
        },


        _onContextClose: function (e) {
            var proxy = this;
            if (this._isContextMenuOpen) {
                var isRightClick = false;
                if ($(e.target).is(this.element) || $(e.target).parents(".e-context").is(this.element))
                    isRightClick = true;
                if (!isRightClick) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this.hideContextMenu(e, hideanim, hideSpeed);
                    var parentElements = $(e.target).parents();
                    $.each(parentElements, function (index, value) {
                        if (value.id == proxy._ContextTargetId) {
                            return;
                        }
                    });

                }
            }
        }

    });

    ej.Menu.Locale = ej.Menu.Locale || {} ;
       
    ej.Menu.Locale['default'] = ej.Menu.Locale["en-US"] = {  	
        titleText: "Menu"
    };
    ej.MenuType = {
        /**  support for list of items appears as normal menu in horizontal or vertical direction. */
        NormalMenu: "normalmenu",
        /**  support for list of items appears as menu when right clicked on target area, thereby preventing browser’s default right click.. */
        ContextMenu: "contextmenu"
    };

    ej.Direction = {
        /**  support for Render sub menu popup in left direction. */
        Left: "left",
        /**  support for Render sub menu popup in Right direction. */
        Right: "right",
        /** Default opening direction of menu sub items */
        None: "none",
    };

    ej.AnimationType = {
        /**  support for disable the AnimationType while hover or click an menu items. */
        None: "none",
        /**  support for enable the AnimationType while hover or click an menu items. */
        Default: "default"
    };

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.widget("ejPager", "ej.Pager", {
        _rootCSS: "e-pager",
        validTags: ["div"],
        // default model
        defaults: {
            pageSize: 12,
            pageSizeList: null,
            pageCount: 10,
            currentPage: 1,
            enableExternalMessage: false,
            externalMessage: "",
            pageSizeMessage: "",
            enableQueryString: false,
            locale: "en-US",
            masterObject: null,
            pageSizeSelected: null,
            enableRTL: false,
            totalRecordsCount: null,
            totalPages: null,
            customText: "",
            showPageInfo: true,
            cssClass: "",
            enabled: true,
            showGoToPage: false,
            isResponsive: false,
            change: null,
            click: null,
			template: "",
        },

        // constructor function
        _init: function () {
            this._initPrivateProperties();
            this.model.enableQueryString && this._queryStringValue();
            this.renderPager();
            if (this.model.isResponsive) this._reSizeHandler();
            this._wireResizing();
            this._wireEvents();
            this.refreshPager();
        },
        _initPrivateProperties: function () {
            if (typeof (this.model.pageSizeList) == "string")
                this.model.pageSizeList = JSON.parse(this.model.pageSizeList);
            this._pageSize = this.model.pageSize;
            this._links = [];
            this._$prev = null;
            this._$first = null;
            this._$PP = null;
            this._$NP = null;
            this._lastNP = false;
            this._lastpageCount = null;
            this._$last = null;
            this._$next = null;
            this._prevPageNo = 1;
            this.localizedLabels = this._getLocalizedLabels();
            this._intervalWid = 0;
            this._msgWidth = 0;
            this._gotoWid = 0;
			this._temp = this.model.template;
        },
        _wireEvents: function () {
            var proxy = this;
            this._on(this.element, "click", this._pagerClickHandler);
            $(document).on("click", $.proxy(proxy._hidedrop, proxy));
			if(this._pagerContainer){
			this._touchPrev = false;
			this._pagerContainer.on("touchstart",this._touchHandler);
			this._pagerContainer.on("mouseover",this._mouseOverHandler);
			this._pagerContainer.on("mouseout",this._mouseOutHandler);
			}
			
        },
		_touchHandler: function(e){
			this._touchPrev = true;
		},
		 _mouseOverHandler: function (e) {
				if(this._touchPrev == false){
					var $target = $(e.target);
					if (($target.hasClass("e-icon") || $target.hasClass("e-link")) && !$target.hasClass("e-hover")) {
						$target.addClass("e-hover")
					}
				}
				this._touchPrev = false;
		},
		_mouseOutHandler: function (e) {
            var $target = $(e.target);
			if (($target.hasClass("e-icon") || $target.hasClass("e-link")) && $target.hasClass("e-hover")) {
				$target.removeClass("e-hover")
			}
		},
        _hidedrop: function (e) {
			if($(e.target.parentElement).hasClass("e-drpdwndiv") || $(e.target).hasClass("e-drpdwndiv")) return;
            if (this.$dropItem && this.$dropItem.css("display") != "none") this.$dropItem.hide();
        },
        _wireResizing: function () {
            this._refreshDropandTextItems();
            $(window).bind('resize', (this.model.isResponsive) ? $.proxy(this._reSizeHandler, this) : $.proxy(this._unWireResizing, this));
        },
        _unWireResizing: function () {
            this._refreshDropandTextItems();
            if (this.$dropItem) if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
            $(window).unbind('resize', $.proxy(this._reSizeHandler, this));
        },
        _reSizeHandler: function () {
            if (this.$dropItem) if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
            var controlwidth = this._intervalWid + this._gotoWid + this.element.find('.e-pagercontainer').outerWidth() + this._msgWidth;
            if (controlwidth > (this.element.outerWidth() - 20)) { if (this._msgWidth > 0) this.element.find(".e-parentmsgbar").addClass("e-msg-res"); }
            else if (this._msgWidth > 0) this.element.find(".e-parentmsgbar").removeClass("e-msg-res");
            if (this.element.outerWidth() - $(this.element.find(".e-pagercontainer")).outerWidth() < 40) {
                this._flag = true;
                this._fillScreen();
            }
            if (this.element.outerWidth() - $(this.element.find(".e-pagercontainer")).outerWidth() > 40) {
				if(!$(this._templateElement).find(".e-textbox-paging").length > 0)
				if(!this._maxPageCount) this._maxPageCount = this.model.pageCount;
                this.option("pageCount", this._maxPageCount);
                if (this.element.outerWidth() - $(this.element.find(".e-pagercontainer")).outerWidth() < 40) {
                    this._flag = true;
                    this._fillScreen();
                }
            }
            this._refreshDropandTextItems();
        },
        _refreshDropandTextItems: function () {
            if (this.numTextbox && !this.model.template) {
                if (this.element.find('.e-pagercontainer').position().top != this.element.find(".e-parentmsgbar").position().top) {
                    this.numTextbox.addClass("e-pager-goto-res");
                }
                else this.numTextbox.removeClass("e-pager-goto-res");
            }
            if (this.pageInterval_wrap && !this.model.template) {
                if (this.element.find('.e-pagercontainer').position().top != this.element.find(".e-pager-itemsinterval").position().top) {
                    this.element.find(".e-pager-itemsinterval").addClass("e-pager-goto-res");
                }
                else this.element.find(".e-pager-itemsinterval").removeClass("e-pager-goto-res");
            }


        },
        renderPager: function () {
			var  tempElement;
			if(!this.model.template){
            var $pagerContainer = ej.buildTag('div.e-pagercontainer', "", {});
			this._pagerContainer = $pagerContainer;
            this._renderPagerContainer($pagerContainer);
            this.element[0].appendChild($pagerContainer[0]);
			}
			else{
			this._templateElement = ej.buildTag('div.e-template',"",{});
			if (this.model.template.startsWith(".") || this.model.template.startsWith("#"))
			tempElement = $($(this.model.template).html());
			else tempElement = $(this.model.template);
			tempElement.appendTo(this._templateElement);
			if($(this._templateElement).find(".e-default-paging").length > 0){
				var $pagerContainer = ej.buildTag('div.e-pagercontainer', "", {});
				this._renderPagerContainer($pagerContainer);
				$pagerContainer.appendTo($(this._templateElement).find(".e-default-paging"));
			}
			if($(this._templateElement).find(".e-textbox-paging").length > 0){
		 	    var proxy = this;
				var accessTemplatePagerContainer = $(this._templateElement).find(".e-textbox-paging");
				accessTemplatePagerContainer.addClass("e-pagercontainer");
				var accesFirstPage = ej.buildTag('div.e-firstpage e-icon e-mediaback  e-firstpagedisabled e-disable', "", {}, { title: proxy.localizedLabels.firstPageTooltip });
				var accesPrevPage = ej.buildTag('div.e-prevpage e-icon e-arrowheadleft-2x  e-prevpagedisabled e-disable', "", {}, {  title: proxy.localizedLabels.previousPageTooltip });
				var numInput = ej.buildTag("input.e-gototextbox", {}, { "type": "textbox" });
				var accesNextPage = ej.buildTag('div.e-nextpage e-icon e-arrowheadright-2x  e-default', "", {}, { title: proxy.localizedLabels.nextPageTooltip });
				var accesLastPage = ej.buildTag('div.e-lastpage e-icon e-mediaforward  e-default', "", {}, { title: proxy.localizedLabels.lastPageTooltip });
				var accesNewRecord = ej.buildTag('div.e-newrecord e-icon e-plus e-default', "", {}, { title: "Add New Record" });
				accessTemplatePagerContainer.append(accesFirstPage);
				accessTemplatePagerContainer.append(accesPrevPage);
				accessTemplatePagerContainer.append(numInput);
				accessTemplatePagerContainer.append(accesNextPage);
				accessTemplatePagerContainer.append(accesLastPage);
				accessTemplatePagerContainer.append(accesNewRecord);
				numInput.focus(function(){
					numInput.val(proxy.model.currentPage);
				});
			}
			var element = this.element;
			$(this._templateElement).addClass("e-template");
			this._pagerContainer = $pagerContainer = $(this._templateElement).find(".e-pagercontainer") ? $(this._templateElement).find(".e-pagercontainer") : $(this._templateElement);
				element.append($(this._templateElement));
				if($(this._templateElement).find(".e-prevpage").length > 0) this._$prev = $(this._templateElement).find(".e-prevpage");
				if($(this._templateElement).find(".e-nextpage").length > 0) this._$next = $(this._templateElement).find(".e-nextpage");
				if($(this._templateElement).find(".e-firstpage").length > 0) this._$first = $(this._templateElement).find(".e-firstpage");
				if($(this._templateElement).find(".e-lastpage").length > 0) this._$last = $(this._templateElement).find(".e-lastpage");
				if($(this._templateElement).find(".e-gototextbox").length > 0) {
				this.numTextbox = $(this._templateElement).find(".e-gototextbox").addClass("e-pager-goto-res e-textbox").attr("type","textbox");
				if(!$(this._templateElement).find(".e-textbox-paging").length > 0)this.numTextbox.width(35);
				this._on($(this.numTextbox), 'keydown', this._mouseScroll);
				this._on(this.numTextbox, 'focusout', this._onTextboxBlur);
				}
				if(this._$prev &&(this._$prev).hasClass("e-prevpagedisabled")) this._$prev.removeClass("e-prevpage");
				if(this._$last &&(this._$last).hasClass("e-lastpagedisabled")) this._$prev.removeClass("e-lastpage");
				if(this._$first && (this._$first).hasClass("e-firstpagedisabled")) this._$prev.removeClass("e-firstpage");
				if(this._$next &&(this._$next).hasClass("e-nextpagedisabled")) this._$prev.removeClass("e-nextpage");
				if($(this._templateElement).find(".e-drpdwndiv").length > 0 && this.model.pageSizeList) this._renderDropdownlist();
				this._templatePageCount = $(this._templateElement).find(".e-pagenumbers").length;
				if( this._templatePageCount > 1){
					proxy =this;
					if($(this._templateElement).find(".e-previouspager").length > 0){
						this._$PP = $(this._templateElement).find(".e-previouspager").addClass("e-nextprevitemdisabled e-disable e-spacing e-PP");
					} 
					if($(this._templateElement).find(".e-nextpager").length > 0){
						this._$NP = $(this._templateElement).find(".e-nextpager").addClass("e-NP e-spacing e-nextprevitemdisabled e-disable");
					} 
					$(this._templateElement).find(".e-pagenumbers").each(function(index){
						$(this).attr("role","link").addClass("e-numericitem e-spacing e-default").data("index",index);
					});
					proxy._links = $(this._templateElement).find(".e-numericitem[role=link]");
			    }
			}
			if (!this.model.enabled) this._disable();
			if (this.model.pageSizeList && this.model.pageSizeList.length > 0) this._renderDropdownlist();
			this._pageInfo();
			this.model.enableExternalMessage && this._renderPagerMessage();
			if (this.model.showGoToPage) this._renderTextboxItem();
			if (this.model.enableRTL) this.element.addClass("e-rtl");
            this._cssClass = this.model.cssClass; this.element.addClass(this.model.cssClass);
        },
		_onTextboxBlur: function (e) {
				var proxy = this;
                e.currentTarget.value = parseInt(e.currentTarget.value);
                var regEx = /^[0-9]*$/;
                var flag = regEx.test(parseInt(e.currentTarget.value));
                if (!flag) {
                    proxy.numTextbox.val(proxy.model.currentPage)
                    return false;
                }
                if (proxy.model.currentPage != parseInt(e.currentTarget.value)) {
                    if (parseInt(e.currentTarget.value) >= 1 && parseInt(e.currentTarget.value) <= proxy.model.totalPages) {
                        proxy.model.currentPage = parseInt(e.currentTarget.value);
                        proxy.refreshPager();
                        if (proxy._prevPageNo != proxy.model.currentPage)
                            proxy._trigger("change", { "currentPage": proxy.model.currentPage, "isInteraction": true, "event": e });
                    }
                    else proxy.numTextbox.val(this.model.currentPage);
                }
				if($(this._templateElement).find(".e-textbox-paging").length > 0){
				this.numTextbox.val(this.model.currentPage+ " of " +this.model.totalPages);
				}
            },
        _removeDropdownlist: function () {
            this.pageInterval_wrap.remove();
            this.pageInterval_wrap = null;
            this.$textspan = null;
            this.$dropItem = null;
        },
        _renderDropdownlist: function () {
            var proxy = this;
            this.pageInterval_wrap = ej.buildTag('div.e-pager-itemsinterval', "", {});
			if(this.model.template && $(this._templateElement).find(".e-drpdwndiv").length > 0){
				var pageDrop_wrap = $(this._templateElement).find(".e-drpdwndiv").addClass("e-icon e-arrow-sans-down");
			}
			else var pageDrop_wrap = ej.buildTag('div.e-drpdwndiv e-icon e-arrow-sans-down', "", {});
            if (proxy.model.totalRecordsCount == null || proxy.model.totalRecordsCount == 0) {
                pageDrop_wrap.addClass("e-disable");
            }
            this.$textspan = ej.buildTag('span.e-text');
            this.sizeIntervals = this.model.pageSizeList;
			if(proxy.model.template) var prevElement = ($(proxy._templateElement).find(".e-drpdwndiv").prev().length > 0) ? $(proxy._templateElement).find(".e-drpdwndiv").prev(): $(proxy._templateElement);
            pageDrop_wrap.appendTo(this.pageInterval_wrap);
			if(proxy.model.template) prevElement.after(this.pageInterval_wrap);
            else this.pageInterval_wrap.appendTo(this.element);
            this.pageInterval_wrap.insertBefore(this._parentMsgBar);
            this.$textspan.appendTo(pageDrop_wrap);
            proxy.$textspan.text(this.model.pageSize || this.model.pageSizeList[0]);
            this.$dropItem = ej.buildTag('ul.e-drpdwn e-ul');
            this._renderItems();
            this.$dropItem.appendTo(pageDrop_wrap);
            this._renderPageSizeMessage();
            pageDrop_wrap.on("click", function () {
                if (proxy.$dropItem.css("display") != "none") proxy.$dropItem.hide();
                else if (proxy.model.enabled && !pageDrop_wrap.hasClass("e-disable")) {
					proxy.$dropItem.show();
					proxy._setListPosition();
				}
            });
            this.$dropItem.hide();
            this._intervalWid = this.element.find('.e-pager-itemsinterval').outerWidth();
        },
		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
		},

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.pageInterval_wrap, this.$dropItem);
        },

		_setListPosition: function () {
            var elementObj = this.pageInterval_wrap, pos = this._getOffset(elementObj),
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.$dropItem.outerHeight(),
            popupWidth = this.$dropItem.outerWidth(),
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()),
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? this.$dropItem.position().top : -(popupHeight+border+popupmargin));
            this.$dropItem.css({
                "top": (topPos) + "px",
                "z-index": maxZ
            });
        },
        _renderPageSizeMessage: function () {
            if (!this.pageInterval_wrap.children().hasClass("e-interval-msg")) {
                this._msgwrapper = ej.buildTag('div.e-interval-msg');
            }

            this._msgwrapper.appendTo(this.pageInterval_wrap);
            if (this.model.pageSizeMessage.toString().length) {
                this._msgwrapper.html(this.model.pageSizeMessage);
                if (this._msgwrapper.css('display') == 'none') this._msgwrapper.show();
            }
            else {
                this._msgwrapper.remove();
            }
        },
        _renderItems: function () {
            var proxy = this;
            $(this.model.pageSizeList).each(function () {
                var li = ej.buildTag('li');
                li.text(this);
                proxy.$dropItem.append(li);
                if (proxy.model.pageSize == this) {
                    li.addClass("e-active");
                }
            });
            this.$dropItem.find("li").on("click", function (e) {
                proxy.$dropItem.find("li.e-active").removeClass("e-active");
                $(this).addClass("e-active")
                proxy._pageSize = parseInt($(this).text());
                proxy.$textspan.text($(this).text());
                proxy.refreshPager();
                proxy._trigger("pageSizeSelected", { pageSize: proxy._pageSize });
                if (proxy._prevPageNo != proxy.model.currentPage)
                    proxy._trigger("change", { "currentPage": proxy.model.currentPage, "isInteraction": true, "event": e });
            });
        },
        _queryStringValue: function () {
            var results = new RegExp('[\\?&]page=([^&#]*)').exec(window.location.href);
            !results ? this.model.currentPage = 1 : this.model.currentPage = parseInt(results[1] || 1);
        },
        _renderPagerMessage: function () {
            if (this.element.find('e-pagermessage').length<=1) {
                this._messageDiv = ej.buildTag('div.e-pagermessage');
            }
            if (this.model.externalMessage.toString().length) {
                this._messageDiv.html(this.model.externalMessage);
                if (this._messageDiv.css('display') == 'none') this._messageDiv.show();
            }
            else
                this._messageDiv.hide();
            this.element.append(this._messageDiv);
        },
        _removePagerMessage: function () {
            this.element.find("div.e-pagermessage").remove();
        },
        _mouseScroll: function (event) {
		if(this.model.enabled){
            var delta;
            if (event.keyCode == "38")
                this._updateField("increment");
            else if (event.keyCode == "40")
                this._updateField("decrement");
			else if(event.keyCode == "13"){
				this._onTextboxBlur(event);
			}
				}
			
        },
        _updateField: function (operation) {
            var preval = this.model.currentPage;
            var step = 1;
            if (this.numTextbox.val() == "") this.numTextbox.val(1);
            else if (this.numTextbox.val().indexOf(" ") >= 1)
                this.numTextbox.val(this.numTextbox.val().replace(" ", ""));
            this.model.currentPage = ej.parseInt(this.numTextbox.val(), this.model.locale);
            if (isNaN(this.model.currentPage) && !this.model.currentPage) this.model.currentPage = 1;
            if (this.model.currentPage >= 1 && this.model.currentPage > this.model.totalPages) {
                this.model.currentPage = this.model.totalPages;
                this.numTextbox.val(this.model.currentPage);
            }
            else if (this.model.currentPage < 1 && this.model.currentPage <= this.model.totalPages) {
                this.model.currentPage = 1;
                this.numTextbox.val(this.model.currentPage);
            }
            else if (this.model.currentPage >= 1 && this.model.currentPage <= this.model.totalPages) {
                var value = operation == "increment" ? this.model.currentPage + step : this.model.currentPage - step;
                if (value >= 1 && value <= this.model.totalPages) {
                    this.numTextbox.val(value);
                    this.model.currentPage = value;
                }
            }
            this.refreshPager();
            if (preval != this.model.currentPage) {
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": true, "event": event });
            }
        },
        _renderTextboxItem: function () {
            var proxy = this;
            var numInput = ej.buildTag("input#" + this.element[0].id + "_numtext", "", {}, { "type": "textbox" });
            $(numInput).appendTo(this._parentMsgBar).insertBefore($(this._parentMsgBar).find("span"));
            this.numTextbox = numInput;
            this.numTextbox.height(this.element.find('.e-pagercontainer .e-numericcontainer a').outerHeight());
            this.numTextbox.width(35);
            this.numTextbox.addClass('e-gototextbox e-textbox');
            if (!this.model.showGoToPage) this.numTextbox.hide();
            this._gotoWid = $(this.numTextbox).outerWidth();
            this._on($(this.numTextbox), 'keydown', this._mouseScroll);
            this._on(this.numTextbox, 'focusout', this._onTextboxBlur);
        },
        _renderPagerContainer: function ($pagerContainer) {
            //Update pager styles here for next versions
            this._renderBackwardButton($pagerContainer);
            this._renderpreviousPager($pagerContainer);
            this._renderNumericItem($pagerContainer);
            this._renderForwardPager($pagerContainer);
            this._renderForwardButton($pagerContainer);
        },
        _renderMsgBar: function () {
            var $msgBar = ej.buildTag('span.e-pagermsg', String.format(this.localizedLabels.pagerInfo, this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
            this._parentMsgBar.appendChild($msgBar[0]);
            this._parentMsgBar.style.textAlign = ej.TextAlign.Right;
        },
        _renderpreviousPager: function ($pagerContainer) {
            this._$PP = ej.buildTag('a.e-link e-nextprevitemdisabled e-disable e-spacing e-PP', "...", {}, { title: this.localizedLabels.previousPagerTooltip});
            $pagerContainer.append(this._$PP);
        },
        _renderForwardPager: function ($pagerContainer) {
            this._$NP = ej.buildTag('a.e-link e-NP e-numericitem e-spacing e-default', "...", {}, { title: this.localizedLabels.nextPagerTooltip });
            $pagerContainer.append(this._$NP);
        },
        _renderBackwardButton: function ($pagerContainer) {
            this._$first = ej.buildTag('div.e-firstpage e-icon e-mediaback  e-firstpagedisabled e-disable', "", {}, { title: this.localizedLabels.firstPageTooltip });
            this._$prev = ej.buildTag('div.e-prevpage e-icon e-arrowheadleft-2x  e-prevpagedisabled e-disable', "", {}, {  title: this.localizedLabels.previousPageTooltip });
            $pagerContainer.append(this._$first);
            $pagerContainer.append(this._$prev);
        },
        _renderNumericItem: function ($pagerContainer) {
            var $numericContainer = ej.buildTag('div.e-numericcontainer e-default', "", {});
            this._renderNumericLinks($numericContainer, this.model.pageCount);
            $pagerContainer.append($numericContainer);
            this._maxPageCount = this.model.pageCount;
        },
        _renderNumericLinks: function ($numericContainer) {
            $numericContainer.empty();
            this.model.pageCount = Math.round(this.model.pageCount);
            this.model.customText != "" ? $numericContainer.addClass("e-customtext") : $numericContainer.removeClass("e-customtext");
            for (var page = 1; page <= this.model.pageCount; page++) {
                var $link = ej.buildTag('a.e-link', this.model.customText + page, {}, { role: "link" }).addClass("e-numericitem e-spacing e-default").data("index", page);
                if (page == this.model.currentPage)
                    $link.removeClass("e-default").addClass("e-currentitem e-active");
                $numericContainer.append($link);
            }
            this._links = $numericContainer.children();
        },
        _renderForwardButton: function ($pagerContainer) {
            this._$next = ej.buildTag('div.e-nextpage e-icon e-arrowheadright-2x  e-default', "", {}, { title: this.localizedLabels.nextPageTooltip });
            this._$last = ej.buildTag('div.e-lastpage e-icon e-mediaforward  e-default', "", {}, { title: this.localizedLabels.lastPageTooltip });
            $pagerContainer.append(this._$next);
            $pagerContainer.append(this._$last);

        },
        _setLocale: function () {
            this.localizedLabels = this._getLocalizedLabels();
            this._$first.attr("title", this.localizedLabels.firstPageTooltip);
            this._$prev.attr("title", this.localizedLabels.previousPageTooltip);
            this._$next.attr("title", this.localizedLabels.nextPageTooltip);
            this._$last.attr("title", this.localizedLabels.lastPageTooltip);
            this._$NP.attr("title", this.localizedLabels.nextPagerTooltip);
            this._$NP.attr("title", this.localizedLabels.previousPagerTooltip);
        },
        _applyCss: function () {
            if (this.model.totalRecordsCount == null) {
                if(this._$prev)this._$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
                if(this._$first)this._$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
                if(this._$last)this._$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
                if(this._$next)this._$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
                if(this._$NP)this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                if (this.model.pageSizeList) {
                    this.element.find(".e-drpdwndiv").addClass("e-disable");
                }
                return;
            }
            else {
                if (this.model.totalRecordsCount == 0 && this.model.pageSizeList) {
                    this.element.find(".e-drpdwndiv").addClass("e-disable");
                }
                else if (this.model.totalRecordsCount != 0 && this.model.pageSizeList && this.element.find(".e-drpdwndiv").hasClass("e-disable")) {
                    this.element.find(".e-drpdwndiv").removeClass("e-disable");
                }
                if (this.model.currentPage > 1 && this._$prev && this._$first) {
                    this._$prev.removeClass("e-prevpagedisabled").removeClass("e-disable").addClass("e-prevpage e-default");
                    this._$first.removeClass("e-firstpagedisabled").removeClass("e-disable").addClass("e-firstpage e-default");
                } else {
                    if(this._$prev)this._$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
                    if(this._$first)this._$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
                }
				if(this._$PP){
                (this.model.currentPage > this.model.pageCount) ?(this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default")) : (this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default"));}

                if (this._links.length && parseInt(this._links[0].innerHTML.replace(this.model.customText, ""), 10) + this.model.pageCount > this.model.totalPages)
                    this._lastNP = true;
                else
                    this._lastNP = false;

                if (this._lastNP == false)
                    if(this._$NP)this._$NP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
                else
                    if(this._$NP)this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");

                this._lastpageCount = this.model.totalPages % this.model.pageCount;
                if (this._lastpageCount == 0)
                    this._lastpageCount = this.model.pageCount;
                if (this.model.currentPage > (this.model.totalPages - this._LastpageCount)) {
                    if(this._$PP)this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
                    if(this._$NP)this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                }
                if (this.model.currentPage == this.model.totalPages || this.model.totalRecordsCount == 0) {
                    if(this._$last)this._$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
                    if(this._$next)this._$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
                    if(this._$NP)this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                } else {
                    if(this._$last)this._$last.addClass("e-lastpage e-default").removeClass("e-lastpagedisabled").removeClass("e-disable");
                    if(this._$next)this._$next.addClass("e-nextpage e-default").removeClass("e-nextpagedisabled").removeClass("e-disable");
                }
                if (this._links.length) {
                    this._links.removeClass("e-currentitem").removeClass("e-active").addClass("e-default");
                    $(this._links[(this.model.currentPage - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-currentitem e-active");
                    $(this._links[(this._prevPageNo - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-numericitem");
                }
                if (this._pageSize >= (this.model.totalRecordsCount / this.model.pageCount) && this._$PP != null && this._$PP.length != 0) {
                    this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                    this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                }
            }
        },
        _SetTotalPages: function () {
            this.model.totalPages = (this.model.totalRecordsCount % this._pageSize == 0) ? (this.model.totalRecordsCount / this._pageSize) : (parseInt(this.model.totalRecordsCount / this._pageSize, 10) + 1);
        },
        _refreshNumericItem: function () {
            if (this._links.length != 0 && this._links != null) {
                this.model.currentPage = this.model.totalPages == 1 ? 1 : this.model.currentPage;
                if (this.model.currentPage > this.model.totalPages && this.model.totalPages != 0)
                    this.model.currentPage = this.model.totalPages;
                var _pagerTarget = parseInt(this.model.currentPage / this.model.pageCount, 10);
                if (this.model.currentPage % this.model.pageCount == 0)
                    if (_pagerTarget > 0)
                        _pagerTarget = _pagerTarget - 1;
                this._links.css("display", "none");
                for (var i = 0; i < this.model.pageCount; i++) {
                    var start = (_pagerTarget * this.model.pageCount) + 1 + i;
                    if (start <= this.model.totalPages) {
                        this._links[i].style.display = '';
                        $(this._links[i]).data('index', start);
                        $(this._links[i]).html(this.model.customText + start);
                    }
                }
            }
        },
        _refreshPagerInfo: function () {
            if (this.model.totalRecordsCount == 0)
                this.model.currentPage = 0;
            this.element.find(".e-pagermsg").text(String.format(this.localizedLabels.pagerInfo, this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
        },
        _refreshExternalMessage: function () {
            if (this.model.externalMessage.toString().length)
                this.element.find(".e-pagermessage").empty().html(this.model.externalMessage).show();
            else
                this.element.find(".e-pagermessage").hide();
        },
        refreshPager: function () {
			if(this._templateElement) this._links = $(this._templateElement).find(".e-numericitem[role=link]");
            this._SetTotalPages();
            this._refreshNumericItem();
            this._refreshPagerInfo();
            this._applyCss();
            this.model.enableExternalMessage && this._refreshExternalMessage();
            if (this.model.enableRTL)
                this.element.addClass("e-rtl");
            else
                this.element.removeClass("e-rtl");
            if (this.numTextbox) {
			if($(this._templateElement).find(".e-textbox-paging").length > 0){
				if(this.model.currentPage > this.model.totalPages && this.model.totalPages != 0){
					this.model.currentPage = this.model.totalPages;
				}
				 if (!this.numTextbox.is(':focus')) this.numTextbox.val(String.format("{0} of {1}", this.model.currentPage, this.model.totalPages));
			}
			else this.numTextbox.val(this.model.currentPage);
			}
			
			if(this._temp !== "" && !ej.isNullOrUndefined(this._temp)){
				if ((this._temp.startsWith(".") || this._temp.startsWith("#")) && $(this._temp)[0] != null && $(this._temp)[0] != undefined) {
					this.option("template",$(this._temp).render([this.model]));
				}
			}
        },

        _kDownHandler: function (e) {
            var code;
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            e.target = null;
            if (this.model.masterObject.checkKey("firstPage", code, e))
                e.target = this._$first;
            else if (this.model.masterObject.checkKey("previousPager", code, e))
                e.target = this._$PP;
            else if (this.model.masterObject.checkKey("previousPage", code, e))
                e.target = this._$prev;
            else if (this.model.masterObject.checkKey("lastPage", code, e))
                e.target = this._$last;
            else if (this.model.masterObject.checkKey("nextPager", code, e))
                e.target = this._$NP;
            else if (this.model.masterObject.checkKey("nextPage", code, e))
                e.target = this._$next;
            else
                return false;
            this._pagerClickHandler(e);
        },
        _pageInfo: function ($pagerContainer) {
            if ((this.model.showPageInfo || this.model.showGoToPage) && !this._parentMsgBar) {
                this._parentMsgBar = document.createElement("div");
                this._parentMsgBar.className += "e-parentmsgbar";
                if (this.model.showPageInfo)
                    this._renderMsgBar();
                this.element[0].appendChild(this._parentMsgBar);
                this.element[0].className += this.model.enableRTL ? " e-pager e-rtl" : " e-pager";
            } else if (!this.model.showPageInfo && !this.model.showGoToPage) {
                this._parentMsgBar && this._parentMsgBar.remove();
                this._parentMsgBar = null;
            }
            else $(this._parentMsgBar).find(".e-pagermsg").remove();
            this._msgWidth = $(this._parentMsgBar).outerWidth()
        },
        _doClickAnimation: function (event) {
            var element = $(event.target);
            if (element == undefined || event.type == undefined) return;
            element.addClass("e-animate");
        },
        _pagerClickHandler: function (e) {
            if (!this.model.enabled) return false;
            this._prevPageNo = this.model.currentPage;
            var $target = $(e.target);
            this.element.find(".e-animate").removeClass("e-animate");
            this._doClickAnimation(e);
            if ($.inArray(e.target, this._links) != -1) {
                this.model.currentPage = parseInt($(e.target).data("index"), 10);
            }
            else if ($target.hasClass("e-nextpage") && $target.hasClass("e-nextpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 0) {
                    this.model.currentPage++;
                    if (this._links != undefined && this._links.length != 0)
                        this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) + this.model.pageCount;
                    if (this.model.currentPage + this.model.pageCount >= this.model.totalPages)
                        this._lastNP = true;
                }
                else
                    this.model.currentPage++;
            }
            else if ($target.hasClass("e-prevpage") && $target.hasClass("e-prevpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 1)
                    this._lastNP = false;
                this.model.currentPage--;
                if (this.model.currentPage < 0) { this.model.currentPage = 0; }
            }
            else if ($target.hasClass("e-lastpage") && $target.hasClass("e-lastpagedisabled") != true) {
                this._LastpageCount = this.model.totalPages % this.model.pageCount;
                (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                this.model.currentPage = this.model.totalPages;
                this._lastNP = true;
            }
            else if ($target.hasClass("e-firstpage") && $target.hasClass("e-firstpagedisabled") != true) {
                this.model.currentPage = 1;
                this._lastNP = false;
            }
            else if ($target.hasClass("e-NP") && $target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) + this.model.pageCount;
                if (parseInt(this._links[this.model.pageCount - 1].innerHTML.replace(this.model.customText, ""), 10) + this.model.pageCount >= this.model.totalPages) {
                    this._lastNP = true;
                    if ((this.model.totalRecordsCount - this._pageSize) < this._pageSize)
                        this._LastpageCount = this.model.totalRecordsCount - this._pageSize;
                    else
                        this._LastpageCount = ((this.model.totalRecordsCount / this._pageSize) % this.model.pageCount);
                    (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                    if (this._links != undefined)
                        this.model.currentPage = parseInt($(this._links[this.model.pageCount - 1]).data("index"), 10) + 1;
                }
            }
            else if ($target.hasClass("e-PP") && $target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) - this.model.pageCount;
                this._lastNP = false;
            }
            this._trigger("click", { "currentPage": this.model.currentPage, "event": e });
			if($target.hasClass("e-newrecord")){
				 this._trigger("addRecord", { "currentPage": this.model.currentPage, "event": e });
			}
            this.goToPage(this.model.currentPage, e);
        },
        goToPage: function (pageIndex, event) {
            if (pageIndex != this.model.currentPage)
                this._prevPageNo = this.model.currentPage;
            if (this._prevPageNo !== pageIndex && (pageIndex >= 1 && pageIndex <= this.model.totalPages)) {
                this.model.currentPage = pageIndex;
                this.model.enableQueryString && this._updateQueryString(this.model.currentPage);
            }
            if (this._prevPageNo != this.model.currentPage) {
                this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": true, "event": event });
            }
        },
		goToNextPage: function () {
			if(this.model.totalRecordsCount != 0 && this.model.currentPage >= 1 && this.model.currentPage < this.model.totalPages){
				this.model.currentPage = this.model.currentPage + 1;
				this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
			}
		},
		goToLastPage: function () {
			if(this.model.totalRecordsCount != 0 && this.model.currentPage >= 1 && this.model.currentPage < this.model.totalPages){
				this.model.currentPage = this.model.totalPages;
				this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
			}
		},
		goToFirstPage: function () {
			if(this.model.totalRecordsCount != 0 && this.model.currentPage > 1){
				this.model.currentPage = 1;
				this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
			}
		},
		goToPrevPage: function () {
			if(this.model.totalRecordsCount != 0 && this.model.currentPage > 1 ){
				this.model.currentPage = this.model.currentPage - 1;
				this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
			}
		},
		
        _updateQueryString: function (value) {
            var _newUrl = this._getUpdatedURL(window.location.href, "page", value);
            if (history.pushState) {
                window.history.pushState({ path: _newUrl }, '', _newUrl);
            }
            else
                window.location.href = _newUrl;
        },

        _getUpdatedURL: function (uri, key, value) {
            var re = new RegExp("([?|&])" + key + "=.*?(&|#|$)", "i");
            if (uri.match(re)) {
                return uri.replace(re, '$1' + key + "=" + value + '$2');
            } else {
                var hash = '';
                var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                if (uri.indexOf('#') !== -1) {
                    hash = uri.replace(/.*#/, '#');
                    uri = uri.replace(/#.*/, '');
                }
                return uri + separator + key + "=" + value + hash;
            }
        },
        _getLocalizedLabels: function (property) {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },
        _fillScreen: function () {
			if(!$(this._templateElement).find(".e-textbox-paging").length > 0){
				var numLen = this.element.find('.e-pagercontainer').outerWidth() - (this._$first.outerWidth(true) + this._$last.outerWidth(true) + this._$next.outerWidth(true) + this._$prev.outerWidth(true))
				numLen -= !this._$NP||this._$NP.hasClass('e-disable') ? 0 : this._$NP.outerWidth(true);
				numLen -= !this._$PP||this._$PP.hasClass('e-disable') ? 0 : this._$PP.outerWidth(true);
				if(this.model.template){
					if (this.element.outerWidth() - $(this.element.find(".e-pagercontainer")).outerWidth() < 40) {
					if (Math.floor(numLen / this.element.find('.e-numericitem.e-spacing.e-default').outerWidth(true)) - 1 < 1) this._flag ? this.option("pageCount", 1) : this.model.pageCount = 1;
					else this._flag ? this.option("pageCount", Math.floor(numLen / this.element.find('.e-numericitem.e-spacing.e-default').outerWidth(true)) - 1) : this.model.pageCount = Math.floor(numLen / this.element.find('.e-numericitem.e-spacing.e-default').outerWidth(true)) - 1;
				}
				}
				else{
					if (this.element.outerWidth() - $(this.element.contents()[0]).outerWidth() < 40) {
						if (Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1 < 1) this._flag ? this.option("pageCount", 1) : this.model.pageCount = 1;
						else this._flag ? this.option("pageCount", Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1) : this.model.pageCount = Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1;
					}
				}
			}
        },
        _enable: function () {
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this.element.prop("disabled", false);
            if (this.numTextbox) this.numTextbox.removeAttr("disabled");
        },
        _disable: function () {
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this.element.prop("disabled", "disabled");
            if (this.numTextbox) this.numTextbox.attr("disabled","disabled");
            if (this.$dropItem) if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
			if(this.model.template){
				$(this._templateElement).addClass(".e-disable");
			}
        },
        _setFirst: true,
        _setModel: function (options) {
            for (var prop in options) {
                this._preval = this.model.currentPage;
                switch (prop) {
                    case "pageCount":
                        this._renderNumericLinks(this.element.find(".e-numericcontainer"));
                        if (this.model.isResponsive && !this._flag) {
                            this._maxPageCount = this.model.pageCount;
                            this._fillScreen();
                        }
                        this._flag = false;
                        break;
					case "template":
                        this.element.children().remove();
                        this.renderPager();
                        break;
                    case "enableExternalMessage":
                        if (options[prop])
                            this._renderPagerMessage();
                        else
                            this._removePagerMessage();
                        break;
                    case "showPageInfo":
                        this._pageInfo();
                        break;
                    case "pageSizeMessage":
                        if (options[prop] != null) {
                            this._renderPageSizeMessage();
                        }
                        break;
					case "pageSize":
					    this._pageSize = this.model.pageSize;
					    if (this.model.pageSizeList && this.model.pageSizeList.length > 0) {
							var proxy=this;
					        this.$textspan.text(this.model.pageSize);
					        this.$dropItem.find(".e-active").removeClass("e-active");
							 $(".e-drpdwn.e-ul").find("li").each(function()  {
								var $li=$(this);  
								if($li.text() == proxy.model.pageSize)
								{
									$(this).addClass("e-active")
								}
							});
					    }
						break;
					case "pageSizeList":
						this.model.pageSizeList = options[prop];
                        if (options[prop].length > 0) {
                            this._pageSize = this.model.pageSize;
                            if (this.$dropItem) {
                                this.$dropItem.empty();
                                this._renderItems();
                            }
                            else this._renderDropdownlist();
                        }
                        else if (this.$dropItem) this._removeDropdownlist();
                        break;
                    case "enabled":
                        if (!options[prop]) this._disable(); else this._enable(); break;
                    case "cssClass":
                        this.element.removeClass(this._cssClass).addClass(options[prop]); this._cssClass = this.model.cssClass;
                    case "isResponsive":
                        this._wireResizing();
                        if (!options[prop]) this.option("pageCount", this._maxPageCount);
                        else if (this.model.isResponsive && !this._flag) {
                            this._maxPageCount = this.model.pageCount; this._fillScreen();
                        }
                        this._flag = false;
                        break;
                    case "showGoToPage": if (options[prop]) this._renderTextboxItem(); else if (this.numTextbox) { this.numTextbox.remove(); this.numTextbox = null; } break;
                    case "locale": this._setLocale(); break;
                    case "currentPage": {
                        this.refreshPager();
                        this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
                    }


                }
            }
            if (prop != "currentPage") {
                this.refreshPager();
                if (this._preval != this.model.currentPage)
                    this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
            }
        },

        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            this.element.empty().removeClass("e-pager");
            this._unWireResizing();
        }
    });
    ej.Pager.Locale = ej.Pager.Locale || {};

    ej.Pager.Locale["default"] = ej.Pager.Locale["en-US"] = {
        pagerInfo: "{0} of {1} pages ({2} items)",
        firstPageTooltip: "Go to first page",
        lastPageTooltip: "Go to last page",
        nextPageTooltip: "Go to next page",
        previousPageTooltip: "Go to previous page",
        nextPagerTooltip: "Go to next pager",
        previousPagerTooltip: "Go to previous pager"
    };

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html div elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejSlider", "ej.Slider", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _addToPersist: ["value", "values"],
        _rootCSS: "e-slider",
        _setFirst: false,
        _requiresID: true,

        defaults: {

            orientation: "horizontal",

            enableAnimation: true,

            animationSpeed: 500,

            showTooltip: true,

            cssClass: "",

            showRoundedCorner: false,

            readOnly: false,

            enableRTL: false,

            htmlAttributes: {},

            minValue: 0,

            maxValue: 100,

            sliderType: "default",

            value: null,

            values: null,

            incrementStep: 1,

            height: null,

            width: null,

            enabled: true,

            showScale: false,

            largeStep: 10,

            smallStep: 1,

            showSmallTicks: true,

            showButtons: false,

            enablePersistence: false,
            
            allowMouseWheel:false,

            start: null,

            stop: null,

            slide: null,

            change: null,

            create: null,

            destroy: null,

            tooltipChange: null,

            renderingTicks: null
        },

        dataTypes: {
            orientation: "enum",
            enableAnimation: "boolean",
            animationSpeed: "number",
            cssClass: "string",
            showRoundedCorner: "boolean",
            readOnly: "boolean",
            enableRTL: "boolean",
            minValue: "number",
            maxValue: "number",
            sliderType: "enum",
            incrementStep: "number",
            enabled: "boolean",
            showButtons: "boolean",
            showScale: "boolean",
            largeStep: "number",
            smallStep: "number",
            showSmallTicks: "boolean",
            enablePersistence: "boolean",
            htmlAttributes: "data",
            allowMouseWheel:"boolean"
        },

        observables: ["value", "values"],
        value: ej.util.valueFunction("value"),
        values: ej.util.valueFunction("values"),

        enable: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                if (this.wrapper) this.wrapper.removeClass("e-disable");
                this.element.removeClass("e-disable");
                if (this.model.showButtons) this.element.siblings('.e-sliderbtn').ejButton("model.enabled", this.model.enabled);
                this._wireEvents();
            }
        },

        disable: function () {
            if (this.model.enabled) {
                this.model.enabled = false;
                if (this.wrapper) this.wrapper.addClass("e-disable");
                this.element.addClass("e-disable");
                if (this.model.showButtons) this.element.siblings('.e-sliderbtn').ejButton("model.enabled", this.model.enabled);
                this._unWireEvents();
            }
        },

        _validateValue: function (value, animation) {
            animation = (typeof animation === 'undefined') ? false : animation;
            if (value == null || value === "") value = this.model.minValue;
            else if (typeof value === "string") value = parseFloat(value);

            if (this._isNumber(value)) {
                this._hidden.val(value);
                this.value(value);
            }
            else if (!this._isNumber(this.value())) {
                this._hidden.val(this.model.minValue);
                this.value(this.model.minValue);
            }
            if (this.model.sliderType != "range") this._setValue(animation);
        },

        _validateRangeValue: function (value, animation) {
            animation = (typeof animation === 'undefined') ? false : animation;
            if (value == null) value = new Array(this.model.minValue, this.model.maxValue);
            else if (typeof value === "string") {
                var vals = value.split(",");
                if (vals.length > 1) value = new Array(parseFloat(vals[0]), parseFloat(vals[1]));
            }

            if (typeof value === "object" && this._isNumber(value[0]) && this._isNumber(value[1])) {
                this._hidden.val(new Array(value[0], value[1]));
                this.values(new Array(value[0], value[1]));
            }
            else if (!(typeof this.values() === "object" && this._isNumber(this.values()[0]) && this._isNumber(this.values()[1]))) {
                this._hidden.val(new Array(this.model.minValue, this.model.maxValue));
                this.values(new Array(this.model.minValue, this.model.maxValue));
            }
            if (this.model.sliderType == "range") this._setRangeValue(animation);
        },

        _validateStartEnd: function () {
            if (isNaN(this.model.minValue)) this.model.minValue = 0;
            if (isNaN(this.model.maxValue)) this.model.maxValue = 100;
        },

        _isNumber: function (number) {
            return typeof number === "number" && !isNaN(number);
        },

        _outerCorner: function (boolean) {
            if (boolean) this._roundedCorner();
            else this._sharpedCorner();
        },

        _changeSkin: function (skin) {
            this.element.removeClass(this.model.cssClass).addClass(skin);
            if (this.model.showScale)
                this.ul.removeClass(this.model.cssClass).addClass(skin);
        },

        getValue: function () {

            return this._getHandleValue();
        },

        setValue: function (value, animation) {
            this._isInteraction = false;
            if (this.model.sliderType == "range")
                this._validateRangeValue(value, animation);
            else
                this._validateValue(value, animation);
            this._isInteraction = true;
        },

        _getTransition: function () {
            var body = document.body || document.documentElement, bodyStyle = body.style,
                support = bodyStyle.transition !== undefined || bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.MsTransition !== undefined || bodyStyle.OTransition !== undefined;
            return support;
        },

        _init: function () {
            this._isInteraction = true;
            this._isTransition = this._getTransition();
            this._initialize();
            this._render();
        },

        _setModel: function (options) {
            this._isInteraction = false;
            if (!ej.isNullOrUndefined(options["minValue"]) || !ej.isNullOrUndefined(options["maxValue"])) {
                if (this._isNumber(options["minValue"])) this.model.minValue = options["minValue"];
                else options["minValue"] = this.model.minValue;

                if (this._isNumber(options["maxValue"])) this.model.maxValue = options["maxValue"];
                else options["maxValue"] = this.model.maxValue;

                if (this.model.sliderType == "range" && options["values"] == undefined) this._setRangeValue();
                else if (this.model.sliderType != "range" && options["value"] == undefined) this._setValue();
            }

            var option;
            for (option in options) {
                switch (option) {
                    case "value":
                        this._validateValue(ej.util.getVal(options[option]));
                        options[option] = this.model.value;
                        break;
                    case "values":
                        var val= typeof options.values == "function" ? options.values() : options.values;
                        if (!ej.isNullOrUndefined(val) && !ej.isNullOrUndefined(val.length) && typeof val != "string")
                        {
                            if (!isNaN(val[0]) && !isNaN(val[1])) {
                                var actualValue = typeof this.values().join == "function" ? val.join() : val;
                                if (actualValue == this._hidden.val()) break;
                            }
                        }
                        this._validateRangeValue(ej.util.getVal(options[option]));
                        options[option] = this.model.values;
                        break;
                    case "height": this.model.height = options[option]; this._setDimension();
                        if (this.model.showScale) this._scaleAlignment();
                        break;
                    case "width": this.model.width = options[option]; this._setDimension();
                        if (this.model.showScale) this._scaleAlignment();
                        break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "showRoundedCorner": this._outerCorner(options[option]); break;
                    case "enableRTL": this.model.enableRTL = options[option];
                        if (this.model.showButtons) this._valueChanged = true;
                        this._checkRTL();
                        options[option] = this.model.enableRTL;
                        break;
                    case "cssClass": this._changeSkin(options[option]);
                        if (this.model.showButtons) this.element.siblings('.e-sliderbtn').ejButton("model.cssClass", options[option]);
                        break;
                    case "showScale": this._renderScale(options[option]);
                        if (this.model.enableRTL) this._changeVerticalScaleDir(options[option]); break;
                    case "orientation":
                        var t = this.model.height;
                        this.model.height = this.model.width;
                        this.model.width = t;
                    case "sliderType":
                        this._sliderOptions(option, options[option]); break;
                    case "smallStep":
                    case "largeStep":
                    case "showSmallTicks":
                    case "minValue":
                    case "maxValue":
                        this._scaleOptions(option, options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "tooltipChange":
                        this.model.tooltipChange = options[option]; break;
                    case "allowMouseWheel": this.model.allowMouseWheel = options[option]; break;
                    case "renderingTicks": this.model.renderingTicks = options[option]; break;
                    case "showButtons": this.model.showButtons = options[option]; this._renderButtons(); break;
                }
            }
            this._isInteraction = true;
        },

        _destroy: function () {
            if (this.model.showScale) this._destroyScale();
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-widget e-box e-corner " + this.model.cssClass).empty();
            if (this.model.showButtons) this.element.removeAttr("style");
        },

        _initialize: function () {
            this.target = this.element[0];
            this.horDir = "left";
            this.verDir = "bottom";
            this._isFocused = false;
        },

        _render: function () {
            this.initialRender = true;
            this._isIE8 = (ej.browserInfo().name == 'msie' && ej.browserInfo().version == '8.0') ? true : false
            this.wrapper = ej.buildTag("div.e-slider-wrap e-widget" + this.model.cssClass + "#" + this.target.id + "_wrapper", { tabindex: "0", role: "slider" })
                .insertAfter(this.element);
            (this.model.showButtons) ? this._showButtons() : this.wrapper.append(this.element);

            this.element.addClass("e-widget e-box " + this.model.cssClass);
            if (this.model.sliderType != "default") {
                this.header = ej.buildTag("div.e-range");
                this.element.append(this.header);
                if (this.model.sliderType == "range") {
                    this.secondHandle = this._createHandle();
                }
            }
            this.firstHandle = this._createHandle();
            this._setOrientation();
            this._setDimension();
            this._insertHiddenField();
            this._checkProperties();
            if(!this.model.showScale) this._alignButtons();
            this._addAttr(this.model.htmlAttributes);
            this._setSliderValue();
        },

        _showButtons: function () {
            var proxy = this;
            var decreaseButton = ej.buildTag('button.e-decreasebtn e-sliderbtn e-animate');
            var increaseButton = ej.buildTag('button.e-increasebtn e-sliderbtn e-animate');
            decreaseButton.ejButton({
                contentType: "imageonly",
                prefixIcon: "e-icon e-minus",
                type: "button",
                repeatButton: true,
                enabled: proxy.model.enabled,
                cssClass: proxy.model.cssClass,
                click: function (e) { proxy._clickButtons(e) }
            });
            increaseButton.ejButton({
                contentType: "imageonly",
                prefixIcon: "e-icon e-plus",
                type: "button",
                repeatButton: true,
                enabled: proxy.model.enabled,
                cssClass: proxy.model.cssClass,
                click: function (e) { proxy._clickButtons(e) }
            });
            if ((this.model.enableRTL && this.model.orientation == "horizontal") || (this.model.orientation == "vertical" && !this.model.enableRTL))
                this.wrapper.append($(increaseButton)).append(this.element).append($(decreaseButton)).addClass("e-slider-buttons");
            else this.wrapper.append($(decreaseButton)).append(this.element).append($(increaseButton)).addClass("e-slider-buttons");
            this.wrapper.find('.e-sliderbtn').attr("tabindex", -1);
        },

        _renderButtons: function () {
            if (this.model.showButtons) {
                this._showButtons();
                if(!this.model.showScale) this._alignButtons();
            }
            else {
                this.element.siblings('.e-sliderbtn').remove();
                this.element.removeAttr('style');
                this.wrapper.removeClass("e-slider-buttons");
            }
            if (this.wrapper.find('ul').hasClass('e-scale')) {
                this._destroyScale();
                this._renderScale(true);
            }
        },

        _alignButtons: function () {
            if (this.model.showButtons) {
                var sliderButtons = this.wrapper.find('.e-sliderbtn');
                if (this.model.orientation == "horizontal") 
                    sliderButtons.css("top", ((this.element.outerHeight() / 2) - parseFloat(sliderButtons.outerHeight() / 2) + parseFloat(this.wrapper.css("padding-top"))) + "px");
                else 
                    sliderButtons.css("left", ((this.element.outerWidth() / 2) - parseFloat(sliderButtons.outerWidth() / 2) + parseFloat(this.wrapper.css("padding-left"))) + "px");
            }
        },

        _clickButtons: function (evt) {
            if ($(evt.target).hasClass("e-animate"))
                $(evt.target).removeClass('e-animate');
            if (this.model.readOnly || ej.isNullOrUndefined(evt.target)) return;
            var value, hVal;
            if (this.model.sliderType == "range") {
                if ($(this.element).find('.e-handle.e-focus').is(this.firstHandle) && !this.model.enableRTL) { this.firstHandle.focus().addClass("e-no-tab"); hVal = this.handleVal; }
                else if (!this.model.enableRTL) { this.secondHandle.focus().addClass("e-no-tab"); hVal = this.handleVal2; }
                if ($(this.element).find('.e-handle.e-focus').is(this.secondHandle) && this.model.enableRTL) { this.secondHandle.focus().addClass("e-no-tab"); hVal = this.handleVal2; }
                else if (this.model.enableRTL) { this.firstHandle.focus().addClass("e-no-tab"); hVal = this.handleVal; }
            }
            else { this.firstHandle.focus().addClass("e-no-tab"); hVal = this.handleVal; }
            if ($(evt.target).hasClass("e-decreasebtn")) value = this._add(hVal, this.model.incrementStep, false);
            else value = this._add(hVal, this.model.incrementStep, true);
            this._changeHandleValue(value, false);
        },

        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy._disabled(true);
                else proxy.element.attr(key, value)
            });
        },

        _renderScale: function (showScale) {
            if (showScale) {
                this.wrapper.addClass("e-scale-wrap");
                var width = "width", orien = "h", spanText;
                if (this.model.orientation == "vertical") {
                    width = "height";
                    orien = "v";
                }

                var _smallStep = this.model.smallStep;
                if (!this.model.showSmallTicks) {
                    if (this.model.largeStep > 0)
                        _smallStep = this.model.largeStep;
                    else
                        _smallStep = this.model.maxValue - this.model.minValue;
                }
                else if (_smallStep <= 0)
                    _smallStep = this.model.incrementStep;
                var count = Math.abs(this.model.maxValue - this.model.minValue) / _smallStep;

                this.ul = ej.buildTag("ul.e-scale e-" + orien + "-scale " + this.model.cssClass);
                if (this._isIE8) this.ul.addClass('e-ie8')
                this.wrapper.append(this.ul);

                var li, args, start = this.model.minValue, left = 0, tickWidth = 100 / count;
                if (orien == "v") start = this.model.maxValue;
                for (var i = 0; i <= count; i++) {
                    li = ej.buildTag("li.e-tick", "", {}, { "title": start });
                    var islargeTick = (start % this.model.largeStep == 0) ? true : false;
                    if (islargeTick) li.addClass("e-large");
                    li.css(width, tickWidth + "%");
                    if (this.model.renderingTicks) {
                        args = { value: start, valueType: "tooltip", tick: li[0]};
                        this._trigger("renderingTicks", args);
                        li.attr("title", args.value);
                    }
                    if (islargeTick) {
                        if (this.model.renderingTicks) {
                            args.valueType = "label";
                            args.value = start;
                            this._trigger("renderingTicks", args);
                            spanText = args.value;
                        }
                        else spanText = start;
                        var span = ej.buildTag("span.e-tick-value", "" + spanText);
                        li.append(span);
                    }
                    this.ul.append(li);

                    if (orien == "h") start += _smallStep;
                    else start -= _smallStep;
                    left += _smallStep;
                }

                this.ul.children().first().addClass("e-first-tick").css(width, (tickWidth / 2) + "%");
                this.ul.children().last().addClass("e-last-tick").css(width, (tickWidth / 2) + "%");

                this._scaleAlignment();
            }
            else this._destroyScale();
            this._setWrapperHeight();
            this._alignButtons();
        },
        _destroyScale: function () {
            this.wrapper.removeClass("e-scale-wrap");
            this.ul.remove();
            this.ul = null;
        },

        _tickValuePosition: function () {
            var width = (this.model.orientation == "vertical") ? "height" : "width";
            var left = (this.model.orientation == "vertical") ? "top" : "left";
            var firstTick = this.ul.find(".e-tick.e-first-tick");
            var first = firstTick.find(".e-tick-value");
            var other = this.ul.find(".e-tick.e-large:not(.e-first-tick)").find(".e-tick-value");
            var tickWidth = firstTick[width]() * 2;
            first.css(left, -first[width]() / 2);
            other.css(left, (tickWidth - other[width]()) / 2);
        },

        _scaleAlignment: function () {
            this._tickValuePosition();
            var smallTick = 12, largeTick = 20, half = largeTick / 2;
            var height = "height", top = "top", orien = "h";
            if (this.model.orientation == "vertical") {
                height = "width";
                top = "right";
                orien = "v";
                (this.element.width() <= 15) ? this.wrapper.addClass("e-small-size") : this.wrapper.removeClass("e-small-size");
            }
            else
                (this.element.height() <= 15) ? this.wrapper.addClass("e-small-size") : this.wrapper.removeClass("e-small-size");
            // scale
             this.ul.css(top, -(this.wrapper[height]() + half));
            if(orien == "v") this.ul.css("top", -this.wrapper.height()).css(top, half);
            this.ul[height](this.wrapper[height]() + largeTick);
            // small-ticks
            var topSize = -(largeTick - smallTick) / 2;
            if (this.model.largeStep == null && orien != "v") topSize = -topSize;
            this.ul.find(".e-tick:not(.e-large)").css(height, this.wrapper[height]() + smallTick).css(top, topSize);
            // tick-values   // 4 - distance between tick value and tick
            if (orien == "v") this.ul.children(".e-large").find(".e-tick-value").css("right", this.wrapper.width() + largeTick + 4);
        },

        _setWrapperHeight : function(){
            var wrapHeight, wrapWidth;
            if (this.model.orientation == "horizontal") {
                if (this.ul)
                    wrapHeight = (this.firstHandle.outerHeight() > this.ul.height()) ? this.firstHandle.outerHeight() : this.ul.height();
                else wrapHeight = this.firstHandle.outerHeight();
                var top = (wrapHeight - this.element.outerHeight()) / 2;
                if (top < 0) top = 0;
                this.wrapper.css({ "padding": top + "px 0px" });
            }
            else {
                if (this.ul)
                    wrapWidth = (this.firstHandle.outerWidth() > this.ul.width()) ? this.firstHandle.outerWidth() : this.ul.width();
                else wrapWidth = this.firstHandle.outerWidth();
                var right = ( wrapWidth - this.element.outerWidth()) / 2;
                if (right < 0) right = 0;
                this.wrapper.css({ "padding": "0px " + right + "px" });
            }
        },


        _createHandle: function () {
			var handle = ej.buildTag("a.e-handle e-select", "", {}, { "aria-label": "drag", "tabindex": 0});
            this.element.attr({ role: "slider", "aria-valuemin": this.model.minValue, "aria-valuemax": this.model.maxValue });
            ej.browserInfo().name == "msie" && handle.addClass("e-pinch");
            this.element.append(handle);
            return handle;
        },

        _setDimension: function () {
            if (this.model.height) this.wrapper.height(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
            this._setHandleSize();
            this._handleAlignment(this.model.enableRTL);
            this._alignButtons();
        },

        _insertHiddenField: function () {
            this._hidden = ej.buildTag("input", "", {},
                { "type": "hidden", "name": this.element[0].id });
            this._hidden.val(this._getHandleValue());
            this.element.append(this._hidden);
        },

        _checkProperties: function () {
            if (!this.model.enabled) {
                if (this.wrapper) this.wrapper.addClass("e-disable");
                else this.element.addClass("e-disable");
            }
            else this._wireEvents();
			
            if (this.model.showScale) this._renderScale(true);
            else this._setWrapperHeight();
            if (this.model.enableRTL) this._checkRTL();
            if (this.model.showRoundedCorner) this._roundedCorner();
        },

        _roundedCorner: function () {
            this.element.addClass("e-corner");
        },

        _sharpedCorner: function () {
            this.element.removeClass("e-corner");
        },

        _handleAlignment: function (rtl) {
            var mar = -(this.firstHandle.outerWidth() / 2) + "px", margin;
            if (this.model.orientation != "vertical") {
                if (!rtl) margin = "0 0 0 " + mar;
                else margin = "0 " + mar + " 0 0";
            }
            else {
                if (!rtl) margin = "0 0 " + mar + " 0";
                else margin = mar + " 0 0 0";
            }
            this.element.children('.e-handle').css("margin", margin);
        },

        _checkRTL: function () {
            if (this.model.showButtons && this._valueChanged) {
                this.element.siblings('.e-sliderbtn').remove();
                this._renderButtons();
            }
            var rtl = this.model.enableRTL, preDir = (this.model.orientation != "vertical") ? this.horDir : this.verDir;
            if (rtl) {
				this.wrapper.addClass("e-rtl");
				if (this.model.orientation == "vertical") {
					this.wrapper.addClass("e-top-to-bottom");
				}
				 
                this.horDir = "right";
                this.verDir = "top";
            }
            else {
                this.wrapper.removeClass("e-rtl e-top-to-bottom");
                this.horDir = "left";
                this.verDir = "bottom";
            }
            if (!this.model.showButtons || (this.model.showButtons && this.model.enableRTL)) this._changeVerticalScaleDir(this.model.showScale);
            var currDir = (this.model.orientation != "vertical") ? this.horDir : this.verDir;

            if (preDir != currDir) {
                this.firstHandle.css(currDir, this.firstHandle[0].style[preDir]).css(preDir, "auto");
                if (this.model.sliderType != "default") {
                    this.header.css(currDir, this.header[0].style[preDir]).css(preDir, "auto");
                    if (this.model.sliderType == "range")
                        this.secondHandle.css(currDir, this.secondHandle[0].style[preDir]).css(preDir, "auto");
                }
            }
            this._handleAlignment(rtl);
        },

        _setOrientation: function () {
            if (this.model.orientation != "vertical") {
                this.wrapper.addClass("e-horizontal");
            }
            else {
                this.wrapper.addClass("e-vertical");
                this.firstHandle.css(this.verDir, "0");
            }
        },

        _changeVerticalScaleDir: function (showScale) {
            if (showScale) {
                var verscaleli = this.wrapper.find('.e-v-scale li');
                if (verscaleli.length > 0)
                {
                    var revdir = verscaleli.toArray().reverse(); verscaleli.remove();
                    this.wrapper.find('.e-v-scale').append(revdir);
                }
            }
        },

        _setHandleSize: function () {
            if ((this.model.height != null && this.model.orientation == "horizontal") || (this.model.width != null && this.model.orientation == "vertical") ) {
                var size;
                if (this.model.orientation != "vertical")
                    size = this.wrapper.height() + 2;
                else
                    size = this.wrapper.width() + 2;
                this.element.find(".e-handle").height(size).width(size);
            }
            else{
                this.wrapper.addClass("e-default-wrap");
                this.element.find(".e-handle").addClass("e-default");
            }
        },

        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },

        _sliderOptions: function (prop, value) {
            this._unWireEvents();
            this._destroy();
            this.model[prop] = value;
            this._init();
        },

        _scaleOptions: function (prop, value) {
            if (this.model.showScale) {
                this._destroyScale();
                this.model[prop] = value;
                this._renderScale(true);
                if (this.model.enableRTL)
                    this._changeVerticalScaleDir(true);
            }
        },

        _showTooltip: function () {
            if (this.model.showTooltip) {
                this._timeOut && clearTimeout(this._timeOut);
                var _tooltip = this.tooltip ? $('body .e-tooltipbox').text().replace(/\s+/g, '').replace("-", ",") : "";
                if (this.tooltip && this.tooltip.length && this.tooltip.css("display") != "none" && this._getHandle()[0] == this._oldHandle && _tooltip == this.preValue) {
                    if (this._getHandleValue().toString() != this.preValue)
                        this._setTooltipPosition();
                    return;
                }
                this._oldHandle = this._getHandle()[0];
                $('body .e-tooltipbox').remove();
                this.tooltip = ej.buildTag("div.e-tooltipbox " + this.model.cssClass + " e-corner", { role: "tooltip" }).css(this._getOffset(this._getHandle()));
                $("body").append(this.tooltip);
                if (this.model.orientation == "vertical") {
                    this.tooltip.addClass("e-vertical");
                }
                this._setTooltipPosition();
            }
        },

        _hideTooltip: function () {
            if (this.model.showTooltip) {
                var proxy = this;
                this._timeOut = setTimeout(function () {
                    proxy.tooltip.fadeOut(800);
                }, 1500);
            }
                
        },

        _showhideTooltip: function (showTooltip) {
            if (this.model.showTooltip && showTooltip) {
                this._showTooltip();
                this._timeOut && clearTimeout(this._timeOut);
                this._hideTooltip();
            }
        },

        _setTooltipPosition: function () {
            if (this.model.showTooltip) {
                this._updateTooltipValue();
                var top, left, remainLeft, remainTop, handle, pos, gap = 5, broder, tooltipPos, border; // gap -> distance between tooltip and slider
                handle = this._getHandle(), pos = this._getOffset(handle), tooltipPos = this._getOffset(this.tooltip);
                border = $(handle).outerHeight() - $(handle).height();
                if (this.model.orientation == "vertical") {
                    remainTop = (this.tooltip.outerHeight() - handle.outerHeight()) / 2;
                    remainLeft = handle.outerWidth() + gap;
                    top = pos.top - remainTop;
                    left = pos.left + remainLeft;
					var height=$(window).height();
                    if (window.pageYOffset > 0) height+=window.pageYOffset; 
                    if (top < 0) top = 0;
                    else if (height < top + this.tooltip.outerHeight()) top = height - this.tooltip.outerHeight() - border;
                    if ($(window).width() < left + this.tooltip.outerWidth()) left = pos.left - this.tooltip.outerWidth() - border;
                }
                else {
                    if (tooltipPos.left + this.tooltip.outerWidth() > $(window).width()) this.tooltip.css({ "left": '0px' });
                    remainLeft = (this.tooltip.outerWidth() - handle.outerWidth()) / 2;
                    remainTop = this.tooltip.outerHeight() + gap;
                    top = pos.top - remainTop;
                    left = pos.left - remainLeft;
					var width=$(window).width();
                    if (window.pageXOffset > 0) width+=window.pageXOffset;    
                    if (left < 0) left = 0;
                    else if (width < left + this.tooltip.outerWidth()) left = width - this.tooltip.outerWidth() - border;
                    if (top < 0 || pos.top < remainTop) {
                        if (pos.top + handle.outerHeight() + border + this.tooltip.outerHeight() > $(window).height()) {
                            top = pos.top;
                            if (pos.left > this.tooltip.outerWidth() + gap + border) left = pos.left - (this.tooltip.outerWidth() + border);
                            else left = pos.left + (handle.outerWidth() + gap + border);
                        } else top = pos.top + handle.outerHeight() + border;
                    }
                }
                var zindex = this._maxZindex();
                this.tooltip.css({ "top": top, "left": left, "zIndex": zindex + 1 });
            }
        },
        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },


        _maxZindex: function () {
            return ej.util.getZindexPartial(this.element, this.popup);
        },

        _updateTooltipValue: function () {
            var one = 0, two = 1, val;
            if (this.model.enableRTL) { one = 1, two = 0; }
            if (this.model.tooltipChange)
                val = this._raiseEvent("tooltipChange");
            else
                val = this._getHandleValue();
            if (this.model.sliderType != "range")
                this.tooltip[0].innerHTML = val;
            else
                this.tooltip[0].innerHTML = val[one] + " - " + val[two];
        },

        _increaseHeaderWidth: function (animation) {
            if (this.model.sliderType != "default") {
                var size = "width", direction = this.horDir, properties = {};
                if (this.model.orientation == "vertical") { size = "height", direction = this.verDir; }

                if (this.model.sliderType == "range") {
                    properties[size] = this.handlePos - this.handlePos2 + "%";
                    properties[direction] = this.handlePos2 + "%";
                }
                else {
                    properties[size] = this.handlePos + "%";
                    properties[direction] = 0;
                }
                var proxy = this;
                if (!animation) this.header.css(properties);
                else {
                    if (this._isTransition) {
                        this.header[0].style.transition = 'all ' + this.model.animationSpeed + 'ms';
                        this.header[0].style['-webkit-transition'] = 'all ' + this.model.animationSpeed + 'ms';
                        this.header.css(direction, properties[direction]);
                        this.header.css(size, properties[size]);
                        setTimeout(function () {
                            proxy.header[0].style.transition = 'none';
                            proxy.header[0].style['-webkit-transition'] = 'none';
                        }, this.model.animationSpeed);
                    } else {
                        this.header.animate(properties, this.model.animationSpeed);
                    }
                }
            }
        },

        _setSliderValue: function () {
            this._validateStartEnd();

            if (this.model.sliderType == "range")
                this._validateRangeValue(this.values());
            else
                this._validateValue(this.value());
            this.preValue = this.getValue().toString();
        },


        _hoverOnHandle: function (evt) {
            $(evt.currentTarget).addClass("e-hover");
        },

        _leaveFromHandle: function (evt) {
            $(evt.currentTarget).removeClass("e-hover");
        },

        _firstHandleClick: function (evt) {
            evt.preventDefault();
            this.firstHandle.focus().addClass("e-no-tab");
            if (this._raiseEvent("start")) return false;

            this.mouseDownPos = this.handlePos;
            if (!this.model.readOnly)
            this._on($(document),ej.eventType.mouseMove, this._firstHandleMove);
            this._on($(document),ej.eventType.mouseUp,this._firstHandleUp);
            this._on($(document),"mouseleave",this._firstHandleUp);
            this._showTooltip();
        },

        _firstHandleMove: function (evt) {
            evt.preventDefault();
            evt = evt.type == "touchmove" ? evt.originalEvent.changedTouches[0] : evt;
            var position = { x: evt.pageX, y: evt.pageY };
            this.handlePos = this._xyToPosition(position);

            if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                this.handlePos = this.handlePos2;
            }
            if (this.handlePos != this.preHandlePos) {
                this.preHandlePos = this.handlePos;
                this.handleVal = this._positionToValue(this.handlePos);
                this._increaseHeaderWidth(false);
                this._setHandlePosition(false, false, false);
                this._setTooltipPosition();

                this._updateModelValue();
                this._raiseEvent("slide");
            }
        },

        _firstHandleUp: function (evt) {
            evt.preventDefault();
            this._off($(document),ej.eventType.mouseMove, this._firstHandleMove);
            this._off($(document),ej.eventType.mouseUp,this._firstHandleUp);
            this._off($(document), "mouseleave", this._firstHandleUp);
            this._timeOut && clearTimeout(this._timeOut);
            this._hideTooltip();

            if (this.mouseDownPos != this.handlePos) this._raiseChangeEvent();
        },

        _secondHandleClick: function (evt) {
            evt.preventDefault();
            this.secondHandle.focus().addClass("e-no-tab");
            if (this._raiseEvent("start")) return false;

            this.mouseDownPos2 = this.handlePos2;
            if (!this.model.readOnly)
            this._on($(document),ej.eventType.mouseMove, this._secondHandleMove);
            this._on($(document),ej.eventType.mouseUp,this._secondHandleUp);
            this._on($(document),"mouseleave",this._secondHandleUp);
            this._showTooltip();
        },

        _secondHandleMove: function (evt) {
            evt.preventDefault();
            evt = evt.type == "touchmove" ? evt.originalEvent.changedTouches[0] : evt;
            var position2 = { x: evt.pageX, y: evt.pageY };
            this.handlePos2 = this._xyToPosition(position2);

            if (this.handlePos2 > this.handlePos) {
                this.handlePos2 = this.handlePos;
            }
            if (this.handlePos2 != this.preHandlePos2) {
                this.preHandlePos2 = this.handlePos2;
                this.handleVal2 = this._positionToValue(this.handlePos2);
                this._increaseHeaderWidth(false);
                this._setHandlePosition(false, false, false);
                this._setTooltipPosition();

                this._updateModelValue();
                this._raiseEvent("slide");
            }
        },

        _secondHandleUp: function (evt) {
            evt.preventDefault();
            this._off($(document),ej.eventType.mouseMove,this._secondHandleMove);
            this._off($(document),ej.eventType.mouseUp,this._secondHandleUp);
            this._off($(document), "mouseleave", this._secondHandleUp);
            this._timeOut && clearTimeout(this._timeOut);
            this._hideTooltip();

            if (this.mouseDownPos2 != this.handlePos2) this._raiseChangeEvent();
        },

        _focusInHandle: function (evt) {
            if (!this._isFocused) {
                this._isFocused = true;
                $(evt.currentTarget).addClass("e-focus");
                if (!this.model.readOnly)
                   this._on($(document),"keydown",this._moveHandle);
                if (this.model.allowMouseWheel && !this.model.readOnly) {
                    this._on(this.element,"mousewheel DOMMouseScroll", this._moveHandle);
                }
                this.activeHandle = $(evt.currentTarget).is(this.firstHandle) ? 1 : 2;
                this._setZindex();
            }
        },

        _focusOutHandle: function (evt) {
            if ($(evt.relatedTarget).is('button') && $(evt.target).parent().siblings().is(evt.relatedTarget)) return;
            if (ej.isNullOrUndefined(evt.relatedTarget) && !ej.isNullOrUndefined(evt.originalEvent) && !ej.isNullOrUndefined(evt.originalEvent.toElement)) {
                if ($(evt.originalEvent.toElement).is('button') && $(evt.target).parent().siblings().is(evt.originalEvent.toElement)) return;
            }
            this._isFocused = false;
            if (this.model.showTooltip && this.tooltip)
                this.tooltip.fadeOut(800);
            this.element.find(".e-no-tab").removeClass("e-no-tab");
            $(evt.currentTarget).removeClass("e-focus");
         this._off($(document),"keydown",this._moveHandle);
            this._off(this.element,"mousewheel DOMMouseScroll", this._moveHandle);
        },

        _moveHandle: function (e) {
            if ((e.type == 'mousewheel') || (e.type=='DOMMouseScroll')) e.preventDefault()
            var oper, val, handleNo, delta;
            handleNo = this._getHandleIndex(this.activeHandle) - 1;
            if ((e.type == 'mousewheel') || (e.type == 'DOMMouseScroll')) {
                var rawEvent = e.originalEvent;
                if (rawEvent.wheelDelta) {
                    delta = rawEvent.wheelDelta / 120;
                }
                else if (rawEvent.detail) {
                    // Firefox uses detail property, which is a multiple of 3.
                    delta = -rawEvent.detail / 3;
                }
                oper = delta > 0 ? 'add' : 'sub';
            }

            switch (e.keyCode || e.originalEvent.wheelDelta) {
                case -120:
                case 37:
                case 40:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    oper = "sub";
                    break;
                case 120:
                case 38:
                case 39:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    oper = "add";
                    break;
                case 36:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    if (this._raiseEvent("start")) return false;
                    if (this.model.sliderType != "range" && this.value() != this.model.minValue) {
                        this._changeHandleValue(this.model.minValue, this.model.enableAnimation);
                    }
                    else if (this.model.sliderType == "range") {
                        val = (this.activeHandle == 2) ? this.model.minValue : this.handleVal2;
                        if (this.values()[handleNo] != val)
                            this._changeHandleValue(val, this.model.enableAnimation);
                    }
                    break;
                case 35:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    if (this._raiseEvent("start")) return false;
                    if (this.model.sliderType != "range" && this.value() != this.model.maxValue) {
                        this._changeHandleValue(this.model.maxValue, this.model.enableAnimation);
                    }
                    else if (this.model.sliderType == "range") {
                        val = (this.activeHandle == 1) ? this.model.maxValue : this.handleVal;
                        if (this.values()[handleNo] != val)
                            this._changeHandleValue(val, this.model.enableAnimation);
                    }
                    break;
                case 27:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    this._getHandle().focusout();
                    break;
            }

            if (oper == "add" || oper == "sub") {
                if (this._raiseEvent("start")) return false;
                var hVal = (this.activeHandle == 1) ? this.handleVal : this.handleVal2;
                var value = (oper == "add") ? this._add(hVal, this.model.incrementStep, true) : this._add(hVal, this.model.incrementStep, false);
                this._changeHandleValue(value, false);
            }
        },

        _changeHandleValue: function (value, animate) {
            var position = null;
            if (this.activeHandle == 1) {
                this.handleVal = this._checkHandleValue(value);
                this.handlePos = this._checkHandlePosition(this.handleVal);

                if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                    this.handlePos = this.handlePos2;
                    this.handleVal = this.handleVal2;
                }
                if (this.handlePos != this.preHandlePos)
                    position = this.preHandlePos = this.handlePos;
            }
            else {
                this.handleVal2 = this._checkHandleValue(value);
                this.handlePos2 = this._checkHandlePosition(this.handleVal2);

                if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                    this.handlePos2 = this.handlePos;
                    this.handleVal2 = this.handleVal;
                }
                if (this.handlePos2 != this.preHandlePos2)
                    position = this.preHandlePos2 = this.handlePos2;
            }

            if (position != null) {
                this._increaseHeaderWidth(animate);
                this._setHandlePosition(animate, true, true);
            }
        },

        _sliderBarClick: function (evt) {
            if (this.model.readOnly) return false;
            if (evt.target == this.target || (this.model.sliderType != "default" && evt.target == this.header[0]) || $(evt.target).hasClass('e-tick') || $(evt.target).hasClass('e-scale') || evt.target == this.wrapper[0]) {
                evt.preventDefault();
                if (this._raiseEvent("start")) return false;
                var pos = { x: evt.pageX, y: evt.pageY },
                handlepos = this._xyToPosition(pos),
                handleVal = this._positionToValue(handlepos);

                if (this.model.sliderType == "range" && (this.handlePos - handlepos) > (handlepos - this.handlePos2)) {
                    this.handlePos2 = this.preHandlePos2 = handlepos;
                    this.handleVal2 = handleVal;
                    this.activeHandle = 2;
                }
                else {
                    this.handlePos = this.preHandlePos = handlepos;
                    this.handleVal = handleVal;
                    this.activeHandle = 1;
                }

                this._getHandle().focus().addClass("e-no-tab");;
                if (this.model.sliderType != "default") this._increaseHeaderWidth(this.model.enableAnimation);
                this._setHandlePosition(this.model.enableAnimation, true, true);
            }
        },

        _setHandlePosition: function (animation, showTooltip, changeEvt) {
            var Handle = this._getHandle(), proxy = this, properties = {}, pos, val, direction;
            pos = (this.activeHandle == 1) ? this.handlePos : this.handlePos2;
            val = (this.activeHandle == 1) ? this.handleVal : this.handleVal2;
            Handle.attr("aria-label", val);
            direction = (this.model.orientation == "vertical") ? this.verDir : this.horDir;
            properties[direction] = pos + "%";
            if (pos == 0) {
                this.model.sliderType != "range" && this._getHandle().addClass("e-handle-start");
            }
            else {
                this._getHandle().removeClass("e-handle-start");
            }
            if (!animation) {
                Handle.css(properties);
                this._showhideTooltip(showTooltip);
                if (changeEvt) this._raiseChangeEvent();
            }
            else {
                if (this._isTransition) {
                    Handle[0].style.transition = 'all ' + this.model.animationSpeed + 'ms';
                    Handle[0].style['-webkit-transition'] = 'all ' + this.model.animationSpeed + 'ms';
                    Handle.css(direction, pos + '%');
                    setTimeout(function () {
                        Handle[0].style.transition = 'none';
                        Handle[0].style['-webkit-transition'] = 'none';
                        proxy._showhideTooltip(showTooltip);
                        if (changeEvt) proxy._raiseChangeEvent();
                    }, this.model.animationSpeed);
                } else {
                    Handle.animate(properties, this.model.animationSpeed, function () {
                        proxy._showhideTooltip(showTooltip);
                        if (changeEvt) proxy._raiseChangeEvent();
                    });
                }
            }
        },

        _xyToPosition: function (position) {
            if (this.model.minValue == this.model.maxValue)
                return 100;
            if (this.model.orientation != "vertical") {
                var left = position.x - this.element.offset().left,
                num = this.element.width() / 100,
                val = (left / num);
            }
            else {
                var top = position.y - this.element.offset().top,
                num = this.element.height() / 100,
                val = 100 - (top / num);
            }
            val = this._stepValueCalculation(val);
            if (val < 0) val = 0;
            else if (val > 100) val = 100;
            if (this.model.enableRTL) return 100 - val;
            return val;
        },

        _updateValue: function () {
            this.handleVal = this._checkHandleValue(this.value());
            this.handlePos = this._checkHandlePosition(this.handleVal);
            this.preHandlePos = this.handlePos;
            this.activeHandle = 1;
        },

        _setValue: function (animation) {
            this._updateValue();
            this._increaseHeaderWidth(animation);
            this._setHandlePosition(animation, false, true);
        },

        _updateRangeValue: function () {
            var values = this.values();
            this.handleVal = this._checkHandleValue(values[1]);
            this.handleVal2 = this._checkHandleValue(values[0]);
            this.handlePos = this._checkHandlePosition(this.handleVal);
            this.handlePos2 = this._checkHandlePosition(this.handleVal2);

            if (this.handlePos < this.handlePos2) {
                this.handlePos = this.handlePos2;
                this.handleVal = this.handleVal2;
            }
            this.preHandlePos = this.handlePos;
            this.preHandlePos2 = this.handlePos2;
        },

        _setRangeValue: function (animation) {
            this._updateRangeValue();
            this._increaseHeaderWidth(animation);
            this.activeHandle = 1;
            this._setHandlePosition(animation, false, false);
            this.activeHandle = 2;
            this._setHandlePosition(animation, false, true);
        },

        _checkHandlePosition: function (value) {
            if (this.model.minValue == this.model.maxValue)
                return 100;
            var handle = this._tempStartEnd();
            if (value >= handle.start && value <= handle.end)
                value = (100 * (value - this.model.minValue)) / (this.model.maxValue - this.model.minValue);
            else if (value < handle.start) value = 0;
            else value = 100;
            return value;
        },

        _checkHandleValue: function (value) {
            if (this.model.minValue == this.model.maxValue)
                return this.model.minValue;
            var handle = this._tempStartEnd();
            if (value < handle.start) value = handle.start;
            else if (value > handle.end) value = handle.end;
            return value;
        },

        _tempStartEnd: function () {
            if (this.model.minValue > this.model.maxValue)
                return {
                    start: this.model.maxValue,
                    end: this.model.minValue
                };
            else
                return {
                    start: this.model.minValue,
                    end: this.model.maxValue
                };
        },

        _positionToValue: function (pos) {
            var diff = this.model.maxValue - this.model.minValue,
            val = this._round(diff * pos / 100),
            total = this._add(val, this.model.minValue, true);
            return total;
        },

        _getHandle: function () {
            return (this.activeHandle == 1) ? this.firstHandle : this.secondHandle;
        },

        _getHandleIndex: function (no) {
            if (this.model.sliderType == "range" && no == 1)
                return 2;
            return 1;
        },

        _getHandleValue: function () {
            if (this.model.sliderType == "range") return [this.handleVal2, this.handleVal];
            else return this.handleVal;
        },

        _updateModelValue: function () {
            var value = this._getHandleValue();
            this._hidden.val(value);
            if (this.model.sliderType == "range") this.values(value);
            else this.value(value);
        },

        _add: function (a, b, addition, precision) {
            var x = Math.pow(10, precision || 3), val;
            if (addition) val = (Math.round(a * x) + Math.round(b * x)) / x;
            else val = (Math.round(a * x) - Math.round(b * x)) / x;
            return val;
        },

        _round: function (a) {
            var _f = this.model.incrementStep.toString().split(".");
            return _f[1] ? parseFloat(a.toFixed(_f[1].length)) : Math.round(a);
        },

        _raiseChangeEvent: function () {
            this._updateModelValue();
            if (this.initialRender)
                this.initialRender = false;
            else {
                if(this.getValue().toString() != this.preValue.toString()){
                        this._raiseEvent("change");
                        this._raiseEvent("stop");
                        this.preValue = this.getValue().toString();
                }
            }
        },

        _raiseEvent: function (name) {
            var data = { id: this.target.id, value: this._getHandleValue(), sliderIndex: this._getHandleIndex(this.activeHandle) };
            if (name == "change")
                data = { id: this.target.id, isInteraction: this._isInteraction, value: this._getHandleValue(), sliderIndex: this._getHandleIndex(this.activeHandle) };
            if (name == "tooltipChange")
                data = { id: this.target.id, isInteraction: this._isInteraction, value: this._getHandleValue(), sliderIndex: this._getHandleIndex(this.activeHandle) };
            var status = this._trigger(name, data);
            if (name == "tooltipChange")
                return data.value;
            return status;
        },

        _setZindex: function () {
            if (this.model.sliderType == "range") {
                if (this.activeHandle == 1) {
                    this.firstHandle.css("z-index", 2);
                    this.secondHandle.css("z-index", 1);
                }
                else {
                    this.firstHandle.css("z-index", 1);
                    this.secondHandle.css("z-index", 2);
                }
            }
        },

        _stepValueCalculation: function (value) {
            if (this.model.incrementStep == 0) this.model.incrementStep = 1;
            var percentStep = this.model.incrementStep / ((this.model.maxValue - this.model.minValue) / 100);
            var remain = value % Math.abs(percentStep);
            if (remain != 0) {
                if ((percentStep / 2) > remain) value -= remain;
                else value += Math.abs(percentStep) - remain;
            }
            return value;
        },

        _wireEvents: function () {
            this._on(this.wrapper, "mousedown", this._sliderBarClick);
            this._on(this.firstHandle, ej.eventType.mouseDown, this._firstHandleClick);
            this._on(this.firstHandle, "mouseenter", this._hoverOnHandle);
            this._on(this.firstHandle, "mouseleave", this._leaveFromHandle);
            this._on(this.firstHandle, "focusin", this._focusInHandle);
            this._on(this.firstHandle, "focusout", this._focusOutHandle);

            if (this.model.sliderType == "range") {
                this._on(this.secondHandle, ej.eventType.mouseDown, this._secondHandleClick);
                this._on(this.secondHandle, "mouseenter", this._hoverOnHandle);
                this._on(this.secondHandle, "mouseleave", this._leaveFromHandle);
                this._on(this.secondHandle, "focusin", this._focusInHandle);
                this._on(this.secondHandle, "focusout", this._focusOutHandle);
            }
        },


        _unWireEvents: function () {
            this._off(this.wrapper, "mousedown");
            this._off(this.firstHandle, ej.eventType.mouseDown);
            this._off(this.firstHandle, "mouseenter");
            this._off(this.firstHandle, "mouseleave");
            this._off(this.firstHandle, "focusin");
            this._off(this.firstHandle, "focusout");

            if (this.model.sliderType == "range") {
                this._off(this.secondHandle, ej.eventType.mouseDown);
                this._off(this.secondHandle, "mouseenter");
                this._off(this.secondHandle, "mouseleave");
                this._off(this.secondHandle, "focusin");
                this._off(this.secondHandle, "focusout");
            }
        }
    });

    ej.SliderType = {
        /**  support for slider control to select a single value. */
        Default: "default",
        /**  support for slider control to select a single value considered from start value to current handle. */
        MinRange: "minrange",
        /**  support for slider control to select a range of value between the two handles. */
        Range: "range"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejSplitButton", "ej.SplitButton", {

        element: null,

        model: null,
        validTags: ["button"],
        _setFirst: false,

        _rootCSS: "e-splitbutton",

        defaults: {

            size: "normal",

            width: "",

            height: "",

            enabled: true,

            htmlAttributes: {},

            text: null,

            contentType: "textonly",

            imagePosition: "imageleft",

            buttonMode: "split",

            arrowPosition: "right",

            targetID: null,

            target: null, 

            showRoundedCorner: false,

            prefixIcon: null,

            suffixIcon: null,

            cssClass: "",

            enableRTL: false,

            create: null,

            beforeOpen: null,

            click: null,

            itemMouseOver: null,

            itemMouseOut: null,

            itemSelected: null,

            open: null,

            close: null,

            destroy: null,

            popupPosition: "down",
    
        },

        dataTypes: {
            size: "string",
            enabled: "boolean",
            showRoundedCorner: "boolean",
            text: "string",
            contentType: "enum",
            imagePosition: "enum",
            buttonMode: "enum",
            arrowPosition: "enum",
            target: "string",       
            targetID: "string",
            prefixIcon: "string",
            suffixIcon: "string",
            cssClass: "string",
            enableRTL: "boolean",
            htmlAttributes: "data"
        },


        disable: function () {
            this.element.addClass("e-disable");
            this.wrapper.addClass("e-disable");
            if (this.contstatus) {
                this._hidePopup();
            }
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this.dropbutton.addClass("e-disable").attr("aria-disabled", true);
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this.btnimgwrap.addClass("e-disable").attr("aria-disabled", true);
            this.model.enabled = false;
        },

        visible: function (display) {
            if (!display) {
               this.wrapper.addClass("e-split-btn-hide");
               this.wrapper.find(".e-icon").css("visibility", "hidden");
            }
            else {
               this.wrapper.removeClass("e-split-btn-hide");
               this.wrapper.find(".e-icon").css("visibility", "");
            }
        },

        enable: function () {
            this.element.removeClass("e-disable");
            this.wrapper.removeClass("e-disable");
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this.dropbutton.removeClass("e-disable").attr("aria-disabled", false);
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this.btnimgwrap.removeClass("e-disable").attr("aria-disabled", false);
            this.model.enabled = true;
        },

        hide: function () {
            if (this.contstatus) {
                this._hidePopup();
            }
        },

        show: function () {
            if (!this.contstatus) {
                if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                    this.element.click();
                else if (this.model.buttonMode == ej.ButtonMode.Split)
                    this.dropbutton.click();
            }
        },

        setPopupPosition: function (val) {
            this._setPosition = true;
            this._val = val;
        },

        _init: function () {
            this._cloneElement = this.element.clone();
            this._setPosition = false;
            this._initialize();
            this._controlStatus(this.model.enabled);
            this._documentClickHandler = $.proxy(this._documentClick, this);
            this._wireEvents();
        },

        _createElement: function (tagName, attrs) {
            var ele = document.createElement(tagName);
            this._setAttributes(ele, attrs);
            return $(ele);
        },
        _setAttributes: function (ele, attrs) {
            for (var key in attrs) {
                ele.setAttribute(key, attrs[key]);
            }
        },

        _destroy: function () {
            if (this.contstatus) {
                this._hide();
            }
            this.splitwrap.removeClass("e-drop");
            this.splitwrap.removeClass("e-btn-" + this.model.size);
            this.innerWrap.removeClass("e-splitarrowright e-splitarrowleft e-splitarrowbottom e-splitarrowtop");
            this.element.removeClass(this.model.cssClass + "e-ntouch e-select e-corner e-btn e-disable e-split-btn e-droparrowright e-droparrowleft e-droparrowbottom e-droparrowtop e-left-btn e-txt").empty();
            this.element.append(this._cloneElement.text());
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            if(this._contextObj) this._contextObj.model && this._contextObj.destroy();            
			if(this._contextObj) this._contextObj = null;			
            //this has to be worked out in Menu
            $(this.model.target).show();
            $(this.model.target).insertAfter(this.element); 
            this._off(this.element, "click", this._btnMouseClick);
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "width":
                        this._splitbtnWidth(options[option]);
                        break;
                    case "height":
                        this._splitbtnHeight(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "buttonMode":
                        this._setButtonMode(options[option]);
                        break;
                    case "arrowPosition":
                        this._setArrowPosition(options[option]);
                        break;
                    case "text":
                        this._setText(options[option]);
                        break;
                    case "prefixIcon":
                        this._setMajorIcon(options[option]);
                        break;
                    case "suffixIcon":
                        this._setMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "targetID":
                    case "target":
                        this._setTarget(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "popupPosition":
                        this._setPopupPosition(options[option]);
                        break;
                }
            }
        },

        _setText: function (val) {
            if (this.model.contentType == ej.ContentType.TextOnly) {
                if (this.model.buttonMode == ej.ButtonMode.Split)
                    this.element.html(val);
                else {
                    this.element.empty();
                    this.imgtxtwrap = val;
                    if (this.model.arrowPosition == ej.ArrowPosition.Left || this.model.arrowPosition == ej.ArrowPosition.Top)
                        this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    else
                        this.element.append(this.imgtxtwrap, this.btnimgwrap);
                }
            } else {
                this.textspan.html(val);
            }
        },

        _setMajorIcon: function (val) {
            this.majorimgtag.removeClass(this.model.prefixIcon);
            this.majorimgtag.addClass(val);
        },

        _setMinorIcon: function (val) {
            this.minorimgtag.removeClass(this.model.suffixIcon);
            this.minorimgtag.addClass(val);
        },
        _setTarget: function (val) {
            if ((val.substring(0, 1) == ".") || (val.substring(0, 1) == "#")) {
                this.model.target = val; 
            }
            else {
                this.model.targetID = val;
                this.model.target = "#" + val;
            }
            this._renderContxtMenu();
        },

        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.element.empty();
                this.model.contentType = val;
                this._renderButtonContent();
            }
        },

        _setImagePosition: function (val) {
            if (val == ej.ImagePosition.ImageRight || val == ej.ImagePosition.ImageLeft || val == ej.ImagePosition.ImageBottom || val == ej.ImagePosition.ImageTop) {
                if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                    this.element.empty();
                    this.model.imagePosition = val;
                    this._renderButtonContent();
                }
            }
        },

        _setButtonMode: function (val) {
            if (val == ej.ButtonMode.Split || val == ej.ButtonMode.Dropdown) {
                if (val != this.model.buttonMode) {
                    this._destroy();
                    this.model.buttonMode = val;
                    this._init();
                }
            }
        },

        _setArrowPosition: function (val) {
            if (val == ej.ArrowPosition.Right || val == ej.ArrowPosition.Left || val == ej.ArrowPosition.Bottom || val == ej.ArrowPosition.Top) {
                if ((this.model.buttonMode == ej.ButtonMode.Dropdown) && (val != this.model.arrowPosition)) {
                    this.model.arrowPosition = val;
                    this.element.empty();
                    this._setSize(this.model.size);
                    this.element.removeClass("e-droparrowright e-droparrowleft e-droparrowbottom e-droparrowtop");
                    this._renderButtonContent();
                }
                else if ((this.model.buttonMode == ej.ButtonMode.Split) && (val != this.model.arrowPosition)) {
                    this.model.arrowPosition = val;
                    this._setSize(this.model.size);
                    this.innerWrap.removeClass("e-splitarrowright e-splitarrowleft e-splitarrowbottom e-splitarrowtop");
                    this._setRTL(this.model.enableRTL);
                }
            }
        },

        _setPopupPosition: function (val) {
            this.model.popupPosition = val;
            if (this.model.popupPosition == "down")
                this.dropdownimg.addClass("e-arrow-sans-down").removeClass("e-arrow-sans-up");
            if (this.model.popupPosition == "up")
                this.dropdownimg.addClass("e-arrow-sans-up").removeClass("e-arrow-sans-down");
        },

        _setRTL: function (val) {
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropdownimg.removeClass("e-arrow-sans-up").addClass("e-arrow-sans-down");
                switch (this.model.arrowPosition) {
                    case ej.ArrowPosition.Right:
                        this.innerWrap.addClass("e-splitarrowright");
                        break;
                    case ej.ArrowPosition.Left:
                        this.innerWrap.addClass("e-splitarrowleft");
                        break;
                    case ej.ArrowPosition.Bottom:
                        this.innerWrap.addClass("e-splitarrowbottom");
                        break;
                    case ej.ArrowPosition.Top:
                        this.innerWrap.addClass("e-splitarrowtop");
                        this.dropdownimg.addClass("e-arrow-sans-up").removeClass("e-arrow-sans-down");
                        break;
                }
                val == true ? (this.innerWrap.hasClass("e-splitarrowleft") ? "" : this.splitwrap.addClass("e-rtl e-btnrtl")) && (this._contextObj && this._contextObj.model && this._contextObj.element.addClass('e-rtl')) : this.splitwrap.removeClass("e-rtl e-btnrtl") && (this._contextObj && this._contextObj.model && this._contextObj.element.removeClass('e-rtl'));
            }
            else
                val == true ? this.splitwrap.addClass('e-rtl') && (this._contextObj && this._contextObj.model && this._contextObj.element.addClass('e-rtl')) : this.splitwrap.removeClass('e-rtl') && (this._contextObj && this._contextObj.model && this._contextObj.element.removeClass('e-rtl'));
            this.model.enableRTL = val;
            this._roundedCorner(this.model.showRoundedCorner);
        },

        _roundedCorner: function (value) {
            if (value) {
                this.element.addClass('e-corner');
                if ($(this.model.target).length > 0) $(this.model.target).addClass('e-corner');  
            } else {
                this.element.removeClass('e-corner');
                if ($(this.model.target).length > 0) $(this.model.target).removeClass('e-corner');
            }
        },

        _controlStatus: function (value) {
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },

        _setSkin: function (skin) {
            this.element.removeClass(this.model.cssClass);
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropbutton.removeClass(this.model.cssClass);
                this.dropbutton.addClass(skin);
            }
            this.element.addClass(skin);
            if(this._contextObj) this._contextObj.model && this._contextObj.option('cssClass', skin);  
        },

        _initialize: function () {
            if (this.element.is("button") || this.element.is("ej-splitbutton")) {
                this._render();
            } else {
                this.element.removeClass("e-splitbutton");//need to change in src level
            }
            this._timeout = null;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy._controlStatus(false);
                else proxy.wrapper.attr(key, value)
            });
        },


        _render: function () {
            this.element.addClass(this.model.cssClass + " e-btn e-select e-split-btn " + (!ej.isTouchDevice() ? "e-ntouch" : ""));
            this._setAttributes(this.element[0]);
            if ((this.model.text == null) || (this.model.text == "")) {
                this.model.text = this.element.text();
            }
            else
                this._setAttributes(this.element[0],{"aria-describedby": this.model.text});
            if (this.model.buttonMode != ej.ButtonMode.Split && this.model.buttonMode != ej.ButtonMode.Dropdown)
                this.model.buttonMode = ej.ButtonMode.Split;
            if (this.model.arrowPosition != ej.ArrowPosition.Right && this.model.arrowPosition != ej.ArrowPosition.Left && this.model.arrowPosition != ej.ArrowPosition.Bottom && this.model.arrowPosition != ej.ArrowPosition.Top)
                this.model.arrowPosition = ej.ArrowPosition.Right;
            this.element.empty();
            this.splitwrap = (this.model.buttonMode == ej.ButtonMode.Split ? this._createElement('span', { 'class': 'e-split e-widget' }) : this._createElement('span', { 'class': 'e-split e-drop e-widget' }));
            this.splitwrap.insertBefore(this.element);
            this.innerWrap = this._createElement('span', { 'class': 'e-in-wrap e-box e-padding' });
            this.splitwrap[0].appendChild(this.innerWrap[0]);
            this.wrapper = this.splitwrap;
            /*DropDown Image*/
            this.dropdownimg = this._createElement('span', { "class": "e-icon e-arrow-sans-down" });
            this.dropdownimage = this._createElement('span', { "class": "e-icon e-arrow-sans-up" });
            this.btnimgwrap = this._createElement('span', { 'class': 'e-split-btn-div e-btn-span' });
            if (this.model.popupPosition == "up")
                this.btnimgwrap[0].appendChild(this.dropdownimage[0])
            else
            this.btnimgwrap[0].appendChild(this.dropdownimg[0]);
            /*Split Button*/
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropbutton = ej.buildTag('button.e-split-btn e-btn e-select ' + this.model.cssClass + ' e-drp-btn' + (!ej.isTouchDevice() ? " e-ntouch" : ""), "", {}, { type: "button", "data-role": "none", "id": this.element[0].id + 'drpbtn' });
                this.dropbutton[0].appendChild(this.btnimgwrap[0]);
                this.dropbutton.insertAfter(this.element);
                if (this.model.contentType == ej.ContentType.TextOnly)
                    this.dropbutton.addClass("e-btn-txt");
                else
                    this.dropbutton.addClass("e-rht-btn");
            }
            this._setSize(this.model.size);
            this.element.addClass("e-left-btn");
            this._renderButtonContent();
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this.innerWrap[0].appendChild(this.element[0]);
            else {
                this.innerWrap[0].appendChild(this.element[0]);
                this.innerWrap[0].appendChild(this.dropbutton[0]);
            }
            /* If target ID is set, the value of target will be set to target prefixed with # tag */
            if ((this.model.target == null) && (this.model.targetID != null)) {
                this.model.target = "#"+this.model.targetID;
            }
            /*Rendering Context menu*/
            $(this.model.target).hide();
            this._roundedCorner(this.model.showRoundedCorner);
            this._setRTL(this.model.enableRTL);
            this._addAttr(this.model.htmlAttributes);
        },

        _renderButtonContent: function () {
            /*Image and Text*/
            this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
            this.majorimgtag = ej.buildTag('span').addClass(this.model.prefixIcon);
            this.minorimgtag = ej.buildTag('span').addClass(this.model.suffixIcon);
            this.imgtxtwrap = ej.buildTag('span').addClass('e-btn-span');;
            /*Rendering Option*/
            if (this.model.contentType == ej.ContentType.TextAndImage) {
                switch (this.model.imagePosition) {
                    case ej.ImagePosition.ImageRight:
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageLeft:
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                    case ej.ImagePosition.ImageBottom:
                        this.majorimgtag.css("display", "inline-table");
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageTop:
                        this.majorimgtag.css("display", "inline-table");
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                }
            } else if (this.model.contentType == ej.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
            } else if (this.model.contentType == ej.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
            } else if (this.model.contentType == ej.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.majorimgtag);
            } else {
                this.element.addClass("e-txt");
                this.imgtxtwrap = this.model.text;
            }
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this._renderDropdownArrow();
            else
                this.element.append(this.imgtxtwrap);
        },

        _renderDropdownArrow: function () {
            this.btnimgwrap.css("position", "absolute");
            this.dropdownimg.removeClass("e-arrow-sans-up").addClass("e-arrow-sans-down");
            switch (this.model.arrowPosition) {
                case ej.ArrowPosition.Right:
                    this.element.addClass("e-droparrowright");
                    this.element.append(this.imgtxtwrap, this.btnimgwrap);
                    break;
                case ej.ArrowPosition.Left:
                    this.element.addClass("e-droparrowleft");
                    this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    break;
                case ej.ArrowPosition.Bottom:
                    this.element.addClass("e-droparrowbottom");
                    this.element.append(this.imgtxtwrap, this.btnimgwrap);
                    break;
                case ej.ArrowPosition.Top:
                    this.element.addClass("e-droparrowtop");
                    this.dropdownimg.addClass("e-arrow-sans-up").removeClass("e-arrow-sans-down");
                    this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    break;
            }
        },


        _setSize: function (val) {
            this.wrapper.css({ "height": "", "width": "" });
            switch (val) {
                case "mini":
                    this._splitbtnSize(val);
                    break;
                case "small":
                    this._splitbtnSize(val);
                    break;
                case "medium":
                    this._splitbtnSize(val);
                    break;
                case "large":
                    this._splitbtnSize(val); 
                    break;
                default:
                    this._splitbtnSize(val);
                    break;
            }
            if ((this.model.arrowPosition == ej.ArrowPosition.Bottom || this.model.arrowPosition == ej.ArrowPosition.Top) && this.model.height == "")
                this.splitwrap.addClass("e-btn-arrowsplit-" + val);		   // 15px added the height of the wrapper due to Arrow positioned in bottom
            var wd, ht = this.model.height === "" ? this.wrapper.outerHeight() + "px" : this.model.height;
            this._splitbtnHeight(ht);
            if (this.model.size !== "normal") {
                wd = this.model.width === "" ? this.wrapper.outerWidth() + "px" : this.model.width;
                this._splitbtnWidth(wd);
            }
            else if (this.model.width !== "") {
                wd = this.model.width;
                this._splitbtnWidth(wd);
            }
        },

        _splitbtnSize: function (val) {
        
            this.splitwrap.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal e-btn-arrowsplit-large e-btn-arrowsplit-small e-btn-arrowsplit-mini e-btn-arrowsplit-medium e-btn-arrowsplit-normal');
            if (this.model.arrowPosition == ej.ArrowPosition.Left || this.model.arrowPosition == ej.ArrowPosition.Right)
            {
            this.splitwrap.addClass("e-btn-" + val);
            }
        },
        _splitbtnHeight: function (val) {
           if ((val == "") || (val == null)) val = '30px';
          this.splitwrap.css("height", val);
        },


        _splitbtnWidth: function (val) {
            this.splitwrap.css("width", val);
        },


        _renderContxtMenu: function () {
            /* Check whether target is a class and add a id to that target element if id of that element is not given */
            if ((this.model.target != null) && ($(this.model.target).attr("id") == null)) {
                if (this.model.target.substring(0, 1) == ".") {
                    $(this.model.target).attr("id", this.element.attr('id') + "_" + this.model.target.replace(".", ""));
                }
            }
            
            $(this.model.target).ejMenu({
                menuType: ej.MenuType.ContextMenu,
                openOnClick: false,
                contextMenuTarget: "",
                fields: this.model.fields,
                showArrow: true,
                cssClass: "e-split " + this.model.cssClass,
                enableRTL: this.model.enableRTL
            }).on("ejMenuclose", $.proxy(this._onKeyDown, this));
            this._contextObj = $(this.model.target).ejMenu("instance");
        },
        _onKeyDown: function (e) {
            e.keyCode == 27 && this._hide();
        },
        _itemClick: function (args) {
            args = { status: this.model.enabled, ID: args.ID, text: args.text };
            this._trigger("itemSelected", args);
            (!$(args.element).hasClass("e-haschild")) && this._hide();
        },

        _itemMouseOver: function (args) {
            this._trigger("itemMouseOver", args);
        },

        _itemMouseOut: function (args) {
            this._trigger("itemMouseOut", args);
        },


        _wireEvents: function () {
            this._on(this.element, "click", this._btnMouseClick);
            this._on(this.element, "mousedown", this._btnMouseDown);
            /*DrpBTN*/
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this._on(this.dropbutton, "click", this._btnMouseClick);
            /*DocClk*/
            this._on($(document), "mousedown", this._docrhtclk);
        },


        _btnMouseClick: function (e) {
            !this._contextObj ? this._renderContxtMenu() : !this._contextObj.model && this._renderContxtMenu();
            var args;
            if(!this.model.enabled) return false;
            if (!$(e.currentTarget).hasClass("e-disable")) {
                if (e.currentTarget.id != this.element[0].id + "drpbtn" && this.model.buttonMode == ej.ButtonMode.Split) {
                    args = { status: this.model.enabled };
                    this._trigger("click", args);
                } else {
                    !this.contstatus && this._trigger("beforeOpen");
                    this.wrapper.addClass('e-active');
                    if (this.contstatus) {
                        this._hidecontext(e);
                    } else {
                        this._contextPosition(e);
                        this._trigger("open");
                        this._on($(window), "resize", this._OnWindowResize);
                        this.contstatus = true;
                        this.element.on("click", $.proxy(this._hidecontext, this));
                        ej.listenTouchEvent($(document), ej.startEvent(), this._documentClickHandler, false, this);
                        this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hidePopup);
                    }
                }
            }
        },

        _OnWindowResize: function (e) {
            this._contextPosition(e);
        },

        _contextPosition: function (e,value,m,n) {
            if (this._contextObj.model) {
                if (this._setPosition) 
                    var position = this._val;
                else
                var position = this._getXYpos(e);
                var posleft, targetElement, posadjustleft;
                targetElement = (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton : this.element);
                var contextObj = this._contextObj;
                posleft = position.x - ($(this.model.target).outerWidth() - (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton.outerWidth() : this.element.outerWidth()));
                if (this.model.enableRTL)
                    position.x = (this.model.popupPosition=="left" || (posleft < $(this.model.target).outerWidth())) ? position.x : posleft;
                else
                    position.x = ((this.model.popupPosition == "left") || (position.x + $(this.model.target).outerWidth() < $(window).width())) ? position.x : posleft;
                if (this._posright < 0 && this.model.popupPosition == "left") position.x = $(window).outerWidth();
                 contextObj.option({
                    click: $.proxy(this._itemClick, this),
                    mouseover: $.proxy(this._itemMouseOver, this),
                    mouseout: $.proxy(this._itemMouseOut, this)
                 });
                 if (value)
                     contextObj.show(m, n, targetElement, e);
                else
                 contextObj.show(position.x, position.y, targetElement, e);
            }
        },

        _getXYpos: function (e) {
            var btnpos, btnposx, btnposy, posleft, posright, poscur = 1, postop;
            btnpos = this._getOffset(this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton : this.element);
            posleft = (this.model.popupPosition == "right" && ((!this.model.enableRTL) && (this.model.arrowPosition != ej.ArrowPosition.Left) && (this.model.arrowPosition != ej.ArrowPosition.Bottom) && (this.model.arrowPosition != ej.ArrowPosition.Top))) ? (this.model.buttonMode == ej.ButtonMode.Split?(btnpos.left + this.dropbutton.outerWidth()):(btnpos.left + this.element.outerWidth())) : ((this.model.popupPosition == "left" && (((this.model.enableRTL)||(this.model.arrowPosition != ej.ArrowPosition.Right)) && (this.model.arrowPosition != ej.ArrowPosition.Bottom) && (this.model.arrowPosition != ej.ArrowPosition.Top)))) ? (btnpos.left - ($(this.model.target).outerWidth())) : btnpos.left;
            this._posright = ($(window).width() - posleft) - ($(this.model.target).outerWidth());
            this._posleft = posleft - $(this.model.target).outerHeight();
            this._posrightht = ($(window).height() - btnpos.top - $(this.model.target).outerHeight());
            btnposx = ((this.model.popupPosition=="right" && (this._posright<0))||(posleft < 0))  ? (btnpos.left) : posleft;
            postop = ((this.model.arrowPosition == ej.ArrowPosition.Top) || (this.model.popupPosition == "up")) ? (btnpos.top - $(this.model.target).outerHeight() + 1) : (((this.model.arrowPosition != ej.ArrowPosition.Top) && (this.model.arrowPosition != ej.ArrowPosition.Bottom) && ((((this.model.arrowPosition == ej.ArrowPosition.Right) != (this.model.popupPosition == "left")) || ((this.model.arrowPosition == ej.ArrowPosition.Right) && this.model.enableRTL && (this.model.popupPosition == "left"))) && (((this.model.arrowPosition == ej.ArrowPosition.Left)) != (this.model.popupPosition == "right")) || ((this.model.arrowPosition == ej.ArrowPosition.Right) && this.model.enableRTL && (this.model.popupPosition == "left"))) && (((!this.model.enableRTL) && (this.model.popupPosition == "right")) || (this.model.popupPosition == "left")))  ? (btnpos.top) : ((this.model.buttonMode == ej.ButtonMode.Split ? (btnpos.top + this.dropbutton.outerHeight()) : (btnpos.top + this.element.outerHeight())) - poscur));//1px added to top due to element border-top as none
            btnposy =((this.model.popupPosition == "left") && this._posrightht < 0 && this._posright > 0 && this._posleft <0) ? (btnpos.top - ($(this.model.target).outerHeight())) : ((this.model.popupPosition == "left") && this._posrightht < 0 && this._posright > 0) ? (btnpos.top+this.element.outerHeight() - ($(this.model.target).outerHeight())) : ((this.model.popupPosition == "right"||this.model.popupPosition=="up"||this.model.popupPosition) && this._posrightht < 0 && this._posright < 0) ? (btnpos.top - ($(this.model.target).outerHeight())) : ((this.model.popupPosition == "right" || this.model.popupPosition == "left") && this._posrightht < 0) ? (btnpos.top + this.element.outerHeight() - ($(this.model.target).outerHeight())) : (this.model.popupPosition == "right" && this._posright < 0 && this._posrightht > 0) ? btnpos.top + this.element.outerHeight() :(this.model.popupPosition=="down"&&this._posrightht<0&&this._posright>0)?(btnpos.top-$(this.model.target).outerHeight()):((posleft < 0) || (this._posright < 0)) ? (btnpos.top + this.element.outerHeight()) : (postop < 0) ? (this.model.buttonMode == ej.ButtonMode.Split && this.model.popupPosition == "up" && this.model.arrowPosition != ej.ArrowPosition.Top) ? (btnpos.top + this.element.outerHeight() - poscur) : ((btnpos.top + (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton.outerHeight() + this.element.outerHeight() : this.element.outerHeight()) - poscur)) : postop;
            return { x: btnposx, y: btnposy };
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },


        _btnMouseDown: function (e) {
            if (!$(e.currentTarget).hasClass("e-disable")) {
                this._docrhtclk(e);
            }
        },
        _hidePopup: function (e) {
           this._contextObj && this._contextObj.hide(e);   
            this._hide();
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hidePopup);
        },
        _hide: function () {
            this.contstatus = false;
            this.wrapper.removeClass('e-active');
            this.element.off("click", $.proxy(this._hidecontext, this));
            ej.listenTouchEvent($(document), ej.startEvent(), this._documentClickHandler, true, this);
            this._off($(window), "resize", this._OnWindowResize);
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hide);
            this._closeEvent();
        },
        _closeEvent: function () {
            this._trigger("close");
        },

        _hidecontext: function (e) {
            if (($(e.target).is(this.element) || $(e.target).is(this.dropbutton) || $(e.target).is(this.textspan) || $(e.target).is(this.dropdownimg) || $(e.target).is(this.btnimgwrap) || !$(e.target).is(this.majorimgtag) || !$(e.target).is(this.minorimgtag)) && !$(e.target).is(this.splitwrap) && !$(e.target).parents().is($(this.model.target)) || (this.element.hasClass("e-txt") || $(e.target).is(this.imgtxtwrap))) {
                this._hidePopup(e);
            }
        },

        _documentClick: function (e) {
            if (!$(e.target).is(this.element) && !$(e.target).is(this.dropbutton) && !$(e.target).is(this.textspan) && !$(e.target).is(this.dropdownimg) && !$(e.target).is(this.btnimgwrap) && !$(e.target).is(this.majorimgtag) && !$(e.target).is(this.minorimgtag) && !$(e.target).is(this.splitwrap) && !$(e.target).parents().is($(this.model.target)) && (this.element.hasClass("e-txt") || !$(e.target).is(this.imgtxtwrap))) {
                this._hidePopup(e);
            }
        },

        _docrhtclk: function (e) {
            var isRightClick, targetElement;
            isRightClick = false;
            if (e.button) {
                isRightClick = (e.button == 2);
            } else if (e.which) {
                isRightClick = (e.which == 3); //for Opera
            }
            targetElement = e.target;
            if (isRightClick) {
                e.preventDefault();
            }
        },

    });

    ej.ContentType = { TextOnly: "textonly", ImageOnly: "imageonly", ImageBoth: "imageboth", TextAndImage: "textandimage", ImageTextImage: "imagetextimage" };

    ej.ImagePosition = { ImageRight: "imageright", ImageLeft: "imageleft", ImageTop: "imagetop", ImageBottom: "imagebottom" };

    ej.ButtonSize = { Mini: "mini", Small: "small", Medium: "medium", Large: "large" };

    ej.ButtonMode = { Split: "split", Dropdown: "dropdown" };

    ej.ArrowPosition = { Right: "right", Left: "left", Top: "top", Bottom: "bottom" };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the tab control.
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejTab", "ej.Tab", {
        _rootCSS: "e-tab",

        element: null,

        model: null,
        validTags: ["div", "span"],
        _addToPersist: ["selectedItemIndex"],
        _setFirst: false,
        angular: {
            terminal: false
        },

        defaults: {

            collapsible: false,

            enableAnimation: true,

            ajaxSettings: {

                type: 'GET',

                cache: false,

                data: {},

                dataType: "html",

                contentType: "html",

                async: true
            },

            disabledItemIndex: [],

            enabledItemIndex: [],

            hiddenItemIndex: [],

            events: "click",

            idPrefix: "ej-tab-",

            heightAdjustMode: "content",

            selectedItemIndex: 0,

            cssClass: "",

            showCloseButton: false,

            htmlAttributes: {},

            enableTabScroll: false,

            showReloadIcon: false,

            headerPosition: "top",

            width: null,

            height: null,

            headerSize: null,

            enableRTL: false,

            allowKeyboardNavigation: true,

            showRoundedCorner: false,

            enablePersistence: false,

            enabled: true,

            ajaxLoad: null,

            ajaxBeforeLoad: null,

            ajaxSuccess: null,

            ajaxError: null,

            itemActive: null,

            beforeActive: null,

            itemAdd: null,

            itemRemove: null,

            beforeItemRemove: null,

            create: null,

            destroy: null

        },
        dataTypes: {
            cssClass: "string",
            collapsible: "boolean",
            events: "string",
            heightAdjustMode: "enum",
            enabled: "boolean",
            ajaxSettings: "data",
            disabledItemIndex: "data",
            enabledItemIndex: "data",
            enableAnimation: "boolean",
            htmlAttributes: "data"
        },
        observables: ["selectedItemIndex"],
        selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),


        _destroy: function () {
            this._unWireEvents();
            this._removeBaseClass();
        },

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "events": {
                        this._off(this.items, this.model.events);
                        this._on(this.items, options[key], this._tabItemClick);
                        break;
                    }
                    case "disabledItemIndex": {
                        this._disableItems(options[key]);
                        options[key] = this.model.disabledItemIndex;
                        break;
                    }
                    case "enabledItemIndex": this._enableItems(options[key]); break;
                    case "enabled": this._enabledAction(options[key]); break;
                    case "selectedItemIndex": {
                        this._isInteraction = false;
                        this.showItem(ej.util.getVal(options[key]));
                        options[key] = this.model.selectedItemIndex;
                        break;
                    }
                    case "heightAdjustMode": {
                        this.model.heightAdjustMode = options[key];
                        this._setTabsHeightStyle(options[key]);
                        this._resizeEvents(options[key]);
                        break;
                    }
                    case "cssClass": this._changeSkin(options[key]); break;
                    case "showRoundedCorner": this._roundedCorner(options[key]); break;
                    case "height": {
                        this.model.height = options[key];
                        this._setTabsHeightStyle(this.model.heightAdjustMode);
                        break;
                    }
                    case "width": this.element.width(options[key]);
                        $(this.contentPanels).width(Number(options[key]));
                        this.refreshTabScroll();
                        break;
                    case "headerSize": this._setHeaderSize(options[key]); break;
                    case "allowKeyboardNavigation": {
                        if (options[key])
                            this._on(this.element, 'keydown', this._keyPress);
                        else
                            this._off(this.element, "keydown");
                        break;
                    }
                    case "headerPosition":
                        {
                            this.model.headerPosition = options[key];
                            if (this.model.headerPosition == ej.Tab.Position.Top) {
                                this._removeVerticalClass();
                                this._removeScroll();
                                this.itemsContainer.remove();
                                this.itemsContainer.insertBefore(this.element.find(">div").first());
                                this.element.find("div.e-active-content").removeClass("e-activebottom");
                                $(this.contentPanels).css("margin-top", "0")
                            }
                            else if (this.model.headerPosition == ej.Tab.Position.Bottom) {
                                this._removeVerticalClass();
                                this._removeScroll();
                                this.element.find("div.e-active-content").removeClass("e-activetop");
                                this.model.enableTabScroll ? $(this.contentPanels).css("margin-top", "0") : $(this.contentPanels).css("position", "relative")
                            }
                            else if (this.model.headerPosition == ej.Tab.Position.Left || this.model.headerPosition == ej.Tab.Position.Right) {
                                this._removeHeaderClass();
                                $(this.items).css('display', '');
                                this._removeScroll();

                            }
                            this._refresh();
                            if (this.model.headerPosition == ej.Tab.Position.Right)
                                this.element.css("position", "")
                            if (this.model.headerPosition == ej.Tab.Position.Left || this.model.headerPosition == ej.Tab.Position.Right) {
                                this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                                
                            }

                            this.scrollstep = 30
                            break;
                        }
                    case "showCloseButton":
                        {
                            if (options[key]) {
                                this._addDeleteIcon();
                                this._on(this.element.find("div.e-close"), "click", this._tabDeleteClick);
                            } else
                                this.element.find("div.e-close").remove();
                            break;
                        }
                    case "enableTabScroll":
                        {
                            this.model.enableTabScroll = options[key];
                            if (options[key]) {
                                this._removeScroll();
                                this._addScroll();
                                if (this.model.headerPosition == "left") {
                                    this._refresh();
                                    this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                                }
                            } else {
                                this._removeScroll();
                                this.itemsContainer.removeAttr("style");
                                $(this.contentPanels).css("margin-top", "0")
                            }
                            if (this.model.headerPosition == ej.Tab.Position.Left || this.model.headerPosition == ej.Tab.Position.Right) {
                                this._refresh();
                                this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                                if (this.model.headerPosition == ej.Tab.Position.Right && !this.model.enableTabScroll)
                                    this.element.css("margin-left", "")
                            }
                            break;
                        }
                    case "showReloadIcon":
                        {
                            if (options[key]) {
                                this._addReloadIcon();
                            } else
                                this.element.find("div.e-reload").remove();
                            break;
                        }
                    case "enableRTL":
                        {
                            this.model.enableRTL = options[key];
                            this._removeScroll();
                            this.itemsContainer.removeAttr("style");
                            $(this.contentPanels).css("margin-top", "0")
                            this.element.find("ul").removeAttr("style")
                            options[key] ? this.element.addClass("e-rtl") : this.element.removeClass("e-rtl");
                            if (this.model.enableTabScroll)
                                this._addScroll();
                            this._refresh();
                            this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                            if (this.model.headerPosition == ej.Tab.Position.Right && this.model.enableRTL)
                                this.element.css("margin-left", '')

                            break;
                        }
                    case "htmlAttributes": this._addAttr(options[key]); break;
                    case "hiddenItemIndex": {
                        if (this.model.headerPosition == ej.Tab.Position.Top || this.model.headerPosition == ej.Tab.Position.Bottom)
                            $(this.items).css('display', 'inline-block');
                        else $(this.items).css('display', '');
                        this.model.hiddenItemIndex = options[key];
                        this.model.hiddenItemIndex.length > 0 && this._hiddenIndexItem(this.model.hiddenItemIndex);
                        break;
                    }
                }
            }
        },

        _removeScroll: function () {
            this.element.find("div.e-chevron-circle-right").remove();
            this.element.find("div.e-chevron-circle-left").remove();
        },

        _addScroll: function () {
            if ((this.model.headerPosition == "left" || this.model.headerPosition == "right" && this._tabContentsHeight() > (this.element.width() || Number(this.model.height))) || (this.model.headerPosition == "top" || this.model.headerPosition == "bottom"))
                this._checkScroll();
            this._addScrollIcon();
            this.refreshTabScroll();
        },

        _init: function () {
            this._addItemIndex = null;
            this.tabId = 0;
            this._hiddenIndex = this.model.hiddenItemIndex;
            this._initialize();
            this._prevSize = this._getDimension($(this.element).parent(), "height");
        },


        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _tabContentsWidth: function () {
            var length = this.itemsContainer.find('li').length;
            var tabLength = 0;
            for (var i = 0; i < length; i++) {
                tabLength = tabLength + $(this.itemsContainer.find('li')[i]).width();
            }
            return tabLength
        },

        _tabContentsHeight: function () {
            var length = this.itemsContainer.find('li').length;
            var tabHeight = 0;
            for (var i = 0; i < length; i++) {
                tabHeight = tabHeight + $(this.itemsContainer.find('li')[i]).height();
            }
            return tabHeight
        },

        _initialize: function () {
            this.initialRender = true;
            this.element.attr("tabindex", 0).attr("role", "tablist");
            this._itemsRefreshing();
            $(this.anchors).addClass("e-link");
            this._preTabSelectedIndex = this._preTabIndex = -1;
            if (!ej.isNullOrUndefined(this.model.width))
                this.element.width(this.model.width);
            if (!ej.isNullOrUndefined(this.model.height))
                this.element.height(this.model.height);
            this._setTabPosition(this.model.headerPosition);
            if (this.model.showCloseButton)
                this._addDeleteIcon();
            if (this.model.showReloadIcon)
                this._addReloadIcon();
            if (this.model.showRoundedCorner)
                this._roundedCorner(this.model.showRoundedCorner);
            this._enabledAction(this.model.enabled);
            this.contentPanels = [];
            this._addAttr(this.model.htmlAttributes);
            this._reinitialize();
            this._addBaseClass();
            if (!ej.isNullOrUndefined(this.model.headerSize))
                this._setHeaderSize(this.model.headerSize);
            this._disableTabs();
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableTabScroll) {
                if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                    if (this.itemsContainer.width() > (this.element.width()))
                        this._addScrollIcon();
                }
                else {
                    if (this.element.height() < (this.items.height() * this.items.length))
                        this._addScrollIcon();
                }
            }
            this._wireEvents(this.model.events);
            // Added for rendering the Windows tab...
            this.showItem(this.selectedItemIndex());
            this._setTabsHeightStyle(this.model.heightAdjustMode);
            this._enabledAction(this.model.enabled);
            this._resizeEvents(this.model.heightAdjustMode);
			if(this.selectedItemIndex() > -1 && this.contentPanels != 0 && this.model.enableRTL)		
				$(this.element).height(this.itemsContainer.height()+parseInt($(this.contentPanels).css("height")));        
            this.model.hiddenItemIndex.length > 0 && this._hiddenIndexItem(this.model.hiddenItemIndex);
        },

        _reinitialize: function ( addContentBaseClass ) {
            var hid, href, hrefBase, a;
            for (var i = (this._addItemIndex != null) ? this._addItemIndex : 0; i < this.anchors.length; i++) {
                hid = this.anchors[i];
                if (this.divId == undefined)
                    href = $(hid).attr("href");
                else
                    href = this.divId;
                this.divId = undefined;
                hrefBase = href.split("#")[0];
                if (hrefBase && (hrefBase === location.toString().split("#")[0])) {
                    href = a.hash;
                    hid.href = href;
                }
                if (href && href !== "#") {
                    this._addContentTag(href, i);
                    if(addContentBaseClass) this._addContentBaseClass($(this.contentPanels[i]));
                }
                else if (!this.model.enablePersistence) {
                    this.model.disabledItemIndex.push(i);
                }
                if (this._addItemIndex != null) {
                    this._unWireEvents();
                    this._wireEvents(this.model.events);
				if (this.items.length == 1) {
					this.showItem(this.selectedItemIndex());
				}
                    break;
                }
            }

        },
        _itemsRefreshing: function () {
            if (this.initialRender) {
                this.itemsContainer = this.element.find("ol,ul").eq(0); 
            }
            else {
                var i=0;
                while (i < this.element.find("ol,ul").length) {
                    if (this.element.find("ol,ul")[i].classList.contains("e-header")) {
                        this.itemsContainer = this.element.find("ol,ul").eq(i);
                        break;
                    }
                i++;
                }
            }
            this.items = this.itemsContainer.find(" > li:has(a[href])");
            this.anchors = this.items.find('a[href]');
        },
        _setHeaderSize: function (size) {
            this.element.find(">ul li.e-item").css("height", "auto");
            this.element.find(">ul li.e-item").children("a.e-link").css("margin-top", "0px");
            if (this.model.headerPosition == "left") {
                this.element.find(">ul.e-left").css({ "width": size, "text-align": "center" });
            }
            else if (this.model.headerPosition == "right") {
                this.element.find(">ul.e-right").css({ "width": size, "text-align": "center" });
            }
            else {
                this.element.find(">ul.e-header li.e-item").css("height", size);
                this.element.find(">ul.e-header li.e-item a.e-link").css("margin-top", ((this.element.find(">ul.e-header").outerHeight() / 2) - this.element.find(">.e-header li.e-item a.e-link").outerHeight()).toString() + "px");
				this.element.find(">ul.e-header li.e-item .e-icon.e-tabdelete").css("margin-top", (((this.element.find(">ul.e-header").outerHeight() / 2) - this.element.find(">.e-header li.e-item .e-icon.e-tabdelete").outerHeight())-5).toString() + "px");
				this.element.find(">ul.e-header li.e-item .e-icon.e-reload").css("margin-top", (((this.element.find(">ul.e-header").outerHeight() / 2) - this.element.find(">.e-header li.e-item .e-icon.e-reload").outerHeight())-5).toString() + "px");
            }
        },
        _enabledAction: function (flag) {
            if (flag) {
                this.element.removeClass("e-disable");
            }
            else {
                this.element.addClass("e-disable");
            }
        },
        _hiddenIndexItem: function (value) {
            var elementId;
            for (var i = 0; i < value.length; i++) {
                if (!$.inArray(parseInt(value[i]), this._hiddenIndex) > -1) {
                    elementId = $(this.items[parseInt(value[i])]).children('a').attr('href');
                    this._hidePanel(elementId);
                }
            }
            this._hideContentPanel(this.selectedItemIndex(), this.model.hiddenItemIndex);
            this._hiddenIndex = this.model.hiddenItemIndex;
        },
        _hidePanel: function (value) {
            for (var j = 0; j < this.contentPanels.length; j++) {
                if ("#" + $(this.contentPanels[j]).attr('id') == value) {
                    $(this.contentPanels[j]).css('display', 'none');
                    break;
                }
            }
            for (var i = 0; i < this.items.length; i++) {
                if ($(this.items.children('a')[i]).attr('href') == value) {
                    $(this.items[i]).css('display', 'none');
                    break;
                }
            }
        },
        _hideContentPanel: function (index, value) {
            if ($.inArray(index, value) > -1) {
                index += 1;
                if (index <= this.items.length - 1) {
                    this._hideContentPanel(index, value);
                }
                else if (index > this.items.length - 1 && value.length != this.items.length) {
                    this._hideContentPanel(0, value);
                }
            }
            else this.showItem(index);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") { proxy.model.enabled = false; proxy._enabledAction(false); }
                else proxy.element.attr(key, value)
            });
        },


        _setTabPosition: function (position) {
            if (position == ej.Tab.Position.Bottom) {
                this.itemsContainer.appendTo(this.element);
                this.items.removeClass("e-bottom-line");
                this.items.addClass("e-top-line");
            }
            else if (position == ej.Tab.Position.Top) {
                this.items.removeClass("e-top-line");
				this.itemsContainer.prependTo(this.element);
                if (this.model.enableRTL)
                    this.items.addClass("e-rtl-top-line e-top-hover");
                else
                    this.items.addClass("e-bottom-line");
            }
            else if (position == ej.Tab.Position.Left || position == ej.Tab.Position.Right) {
                if (this.items.length >= 0) {
                    if (this.model.height)
                        this.itemsContainer.css("height", this.model.height);
                    else {
                        if (!this.model.heightAdjustMode === "fill") $(this.itemsContainer).css("height", "");
                    }
                    this.element.addClass("e-vertical");
                }
            }
        },


        _addDeleteIcon: function () {
            if (this.element.find("div.e-close.e-tabdelete").length <= 0 && this.items.length > 0) {
                var deleteIcon = ej.buildTag('div.e-icon e-close e-tabdelete', "", {}, { role: "presentation" }).css("visibility", "hidden");
                if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    var delIconPosition = this.items.find("a");
                    deleteIcon.insertBefore(delIconPosition);
                }
                else
                    this.items.append(deleteIcon);
            }
        },
        _tabScrollIconCalc: function(){
            this.padding = {
                left : Number(this.element.css("padding-left").split("px")[0]),
                right : Number(this.element.css("padding-right").split("px")[0]),
                top : Number(this.element.css("padding-top").split("px")[0]),
                bottom : Number(this.element.css("padding-bottom").split("px")[0]),
            }; 
            this.scrollPosition = (this.itemsContainer.width() / 2) - this._rightScrollIcon.width();
            this.rightScroll = ej.getDimension(this.element, "width")- (this.itemsContainer.outerWidth()/2);
        },
        _addScrollIcon: function () { 
            this.element.addClass("e-tabscroll").css({"position":"relative", "overflow":"hidden"});
            if (this.element.find("div.e-chevron-circle-right").length <= 0 && this.items.length > 0) {
                this._rightScrollIcon = ej.buildTag('div.e-icon e-chevron-circle-right', "", {}, { role: "presentation" }).css("visibility", "hidden");
                this.itemsContainer.after(this._rightScrollIcon);
                this.scrollstep = 30;
                this._tabScrollIconCalc();
                this._rightScrollIcon.css("position", "absolute");
                if (!this.model.enableRTL) {
                    if (this.model.headerPosition == "left"){
                        this._rightScrollIcon.css("top", this.padding.top + 20 + "px");
                        this._rightScrollIcon.css("left", (this.scrollPosition + this.padding.left) + "px");
                    }
                    else if (this.model.headerPosition == "right"){
                        this._rightScrollIcon.css({"margin-left": this.itemsContainer.width() / 2 - this.scrollstep + "px", "z-index": "15", "top": this.padding.top + 20 + "px", "left": this.rightScroll + "px" });
                        this.element.css({"position": "relative"});
                    }
                    else {
                        if (this.model.enablePersistence == true && this._beforeWidth != 0 && (this._beforeWidth > this.scrollPanelWidth))
                            this._rightScrollIcon.css("margin-right", this.itemsContainer.width() - this.scrollPanelWidth + 20 - ((this.items[this.selectedItemIndex()].offsetLeft - this.scrollPanelWidth) * 2) + "px");
                        else
                            this._rightScrollIcon.css("left", (this.scrollPanelWidth-(this.scrollstep + 20) + this.padding.left) + "px");
                    }
                }
                if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    this._rightScrollIcon.css("transform", "rotate(270deg)");
                    if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version) < 11) {
                            if (!this.model.enableRTL)
                                this._rightScrollIcon.css("top", this.padding.top + 20 + "px");
                            else
                                this._rightScrollIcon.css("top", this.padding.top + 20 + "px");
                    }
                    else {
                        if (this.model.enablePersistence == true && this._beforeWidth != 0 && (this._beforeWidth > this.scrollPanelHeight))
                            this._rightScrollIcon.css("margin-top", "-" + ((this.items[this.selectedItemIndex()].offsetTop * 3 - this.scrollPanelHeight * 2)) + "px");
                        else
                            if (this.model.enableRTL)
                                if(this.model.headerPosition == "left")
                                this._rightScrollIcon.css({"left": "0px", "margin-left": (this.scrollPosition + this.padding.left) + "px", "z-index":"15"});
                                else
                                this._rightScrollIcon.css({"right": (this.itemsContainer.outerWidth()/2) + this.padding.right + "px","z-index":"15"});
                                    

                    }
                }

                else {
                    if (this.model.enableRTL) { 
                        this._rightScrollIcon.css("margin-left", (this.itemsContainer.width() - 14) + "px");
                    } 
                }
                if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version) < 11) {
                     if (this.model.headerPosition == "bottom") {
                        if (!this.model.enableRTL)
                            this._rightScrollIcon.css("top", ((this.itemsContainer.height() / 2) + 27) + "px");
                        else
                            this._rightScrollIcon.css("top", ((this.itemsContainer.height() / 2) + 20) + "px");
                    }
                }
                
                this.element.attr('unselectable', 'on')
                this.element.css('user-select', 'none')
                this.element.on('selectstart', false);
                this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                this._on(this.element.find("div.e-chevron-circle-right"), "mouseover", this._hoverHandler);
                this._on(this.element.find("div.e-chevron-circle-right"), "mouseout", this._hoverHandler);
            }
        },
        _addScrollBackIcon: function () {
            if (this.element.find("div.e-chevron-circle-left").length <= 0) {
                this._leftScrollIcon = ej.buildTag('div.e-icon e-chevron-circle-left', "", {}, { role: "presentation" }).css("visibility", "hidden");
                this.itemsContainer.before(this._leftScrollIcon);
                this.rightscrollstep = 30;
                this.element.attr('unselectable', 'on')
                this.element.css('user-select', 'none')
                this.element.on('selectstart', false);
                this._leftScrollIcon.css("position", "absolute").css("z-index", "10");
                if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                    if (this.model.enableRTL){ 
                        this._leftScrollIcon.css("left", (this.padding.left + this.rightscrollstep) + "px");
                    }
                }
                if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    if (!this.model.enableRTL) {
                        if (this.model.headerPosition == "right"){
                            this._leftScrollIcon.css({"margin-left": ((this.itemsContainer.width() / 2) - 30) + "px", "z-index": "15", "left": this.rightScroll + "px"});
                            this._leftScrollIcon.css("top", this.scrollPanelHeight + 30 + "px");
                        }
                        else if (this.model.headerPosition == "left"){
                            this._leftScrollIcon.css("left", (this.scrollPosition + this.padding.left) + "px");
                            this._leftScrollIcon.css("top", (this.scrollPanelHeight- 20) + this.padding.top + "px");
                        }
                    }
                    else {
                        this._leftScrollIcon.css("top", this.scrollPanelHeight + "px");
                        if (this.model.headerPosition == "right")
                            
                            this._leftScrollIcon.css({"right": (this.itemsContainer.outerWidth()/2) + this.padding.right + "px", "margin-left": (this.scrollPosition + this.padding.left) + "px", "z-index": "15"});
                        else
                            this._leftScrollIcon.css({"left":"0px", "margin-left": (this.scrollPosition + this.padding.left) + "px"});
                    }
                    this._leftScrollIcon.css("transform", "rotate(270deg)");
                }
                if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version) < 11)
                    if (this.model.headerPosition == "bottom") {
                    this._leftScrollIcon.css("top", ((this.itemsContainer.height() / 2) + 27) + "px");     
                    }
                this._on(this._leftScrollIcon, "click", this._tabScrollBackClick);
                this._on(this.element.find("div.e-chevron-circle-left"), "mouseout", this._hoverHandler);
                this._on(this.element.find("div.e-chevron-circle-left"), "mouseover", this._hoverHandler);
            }
        },


        _addReloadIcon: function () {
            if (this.element.find("div.e-reload").length <= 0 && this.items.length > 0) {
                var reloadIcon = ej.buildTag('div.e-icon e-reload', "", {}, { role: "presentation" }).css("visibility", "hidden");
                if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                    var iconPosition = this.items.find("a");
                    reloadIcon.insertBefore(iconPosition);
                }
                else
                    this.items.append(reloadIcon);
            }
        },


        _addBaseClass: function () {
            this.element.addClass("e-widget " + this.model.cssClass);
            this.itemsContainer.addClass("e-box")
            if (this.model.enableRTL)
                this.element.addClass("e-rtl");
            // To avoid border blinking 
            if (this.model.headerPosition == "top") {
                $(this.contentPanels).addClass("e-hidebottom e-addborderbottom");
                $(this.itemsContainer).addClass("e-addborderbottom");
                $(this.contentPanels).removeClass("e-hidetop e-addbordertop e-hideright e-addborderright e-hideleft e-addborderleft");
                $(this.itemsContainer).removeClass("e-addbordertop e-addborderright e-addborderleft");
                this.items.length > 0 && this.itemsContainer.addClass("e-header");
                if (this.model.enableRTL) {
                    this.items.addClass("e-rtl-top-line");
                    this.items.removeClass("e-rtl-bottom-line");
                }
            }
            if (this.model.headerPosition == "bottom") {
                $(this.contentPanels).removeClass("e-hidebottom e-addborderbottom e-hideright e-addborderright e-hideleft e-addborderleft");
                $(this.itemsContainer).removeClass("e-addborderbottom e-addborderright e-addborderleft");
                $(this.contentPanels).addClass("e-hidetop e-addbordertop");
                $(this.itemsContainer).addClass("e-addbordertop");
                this.items.length > 0 && this.itemsContainer.addClass("e-header");
                if (this.model.enableRTL) {
                    this.items.addClass("e-rtl-bottom-line")
                    this.items.removeClass("e-rtl-top-line e-top-line");
                }
            }
            if (this.model.headerPosition == "left") {
                this.items.length > 0 && this.itemsContainer.addClass("e-left");
                $(this.contentPanels).removeClass("e-hidetop e-addbordertop e-hidebottom e-addborderbottom e-hideright e-addborderright");
                $(this.itemsContainer).removeClass("e-addbordertop e-addborderbottom e-addborderright");
                $(this.contentPanels).addClass("e-hideleft e-addborderleft");
                $(this.itemsContainer).addClass("e-addborderleft");
                $(this.items).removeClass("e-rtl-bottom-line e-rtl-top-line");
            }
            if (this.model.headerPosition == "right") {
                this.items.length > 0 && this.itemsContainer.addClass("e-right");
                $(this.contentPanels).removeClass("e-hidetop e-addbordertop e-hidebottom e-addborderbottom e-hideleft e-addborderleft");
                $(this.itemsContainer).removeClass("e-addbordertop e-addborderbottom e-addborderleft");
                $(this.contentPanels).addClass("e-hideright e-addborderright");
                $(this.itemsContainer).addClass("e-addborderright");
                if (this.model.enableTabScroll && this._tabContentsHeight() > (this.element.height || Number(this.model.height)))
                    $(this.itemsContainer).css("z-index", "12").css("margin-left", "-" + this.itemsContainer.find("li").width() + "px");
                $(this.items).removeClass("e-rtl-bottom-line e-rtl-top-line");
            }
            this.items.addClass("e-select e-item").attr("role", "tab").attr("tabindex", -1).attr("aria-expanded", true).attr("aria-selected", false);
            $(this.contentPanels).addClass("e-content  e-content-item e-box").attr("role", "tabpanel").attr("aria-hidden", true);
            if (((this.model.headerPosition == "left" || this.model.headerPosition == "right") && (this._tabContentsHeight() > (this.element.height() || Number(this.model.height)))) || ((this.model.headerPosition == "top" || this.model.headerPosition == "bottom") && this._tabContentsWidth() > ((ej.getDimension(this.element, "width")) || this.model.width)))
                this._checkScroll();
        },
        _addContentBaseClass: function (panelElement) {
            if (this.model.headerPosition == "top") {
                panelElement.addClass("e-hidebottom e-addborderbottom");
                panelElement.removeClass("e-hidetop e-addbordertop e-hideright e-addborderright e-hideleft e-addborderleft");
            }
            if (this.model.headerPosition == "bottom") {
                panelElement.removeClass("e-hidebottom e-addborderbottom e-hideright e-addborderright e-hideleft e-addborderleft");
                panelElement.addClass("e-hidetop e-addbordertop");
            }
            if (this.model.headerPosition == "left") {
                panelElement.removeClass("e-hidetop e-addbordertop e-hidebottom e-addborderbottom e-hideright e-addborderright");
                panelElement.addClass("e-hideleft e-addborderleft");
            }
            if (this.model.headerPosition == "right") {
                panelElement.removeClass("e-hidetop e-addbordertop e-hidebottom e-addborderbottom e-hideleft e-addborderleft");
                panelElement.addClass("e-hideright e-addborderright");
            }
            panelElement.addClass("e-content  e-content-item e-box").attr("role", "tabpanel").attr("aria-hidden", true);
        },

        _checkScroll: function () {
            this.scrollPanelWidth = ej.getDimension(this.element, "width");
            this.scrollPanelHeight = ej.getDimension(this.element, "height");
            if (this.model.enableTabScroll == true && this._tabContentsHeight() > this.items.height()) {
                this.scrollstep = 0;
                this.model.enableTabScroll = true;
                if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                    this.itemsContainer.css({ "width": ((ej.getDimension(this.element, "width") + (parseInt(this.items.css("width")) * this.items.length))) + "px", "position": "absolute" });
                }
                this._beforeWidth = 0;
                if (this.model.enablePersistence == true) {
                    if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                        for (var val = 0; val < this.selectedItemIndex() ; val++) {
                            this._beforeWidth += this.items[val].offsetWidth;
                        }
                    }
                    else {
                        for (var val = 0; val < this.selectedItemIndex() ; val++) {
                            this._beforeWidth += this.items[val].offsetHeight;
                        }
                    }
                }
                var widthValue = parseInt(this.itemsContainer.css("width"));
                if (this.model.headerPosition == "top") {
                    var item = $(this.contentPanels);
                    item.css("padding-top", this.itemsContainer.outerHeight() + (item.hasClass("e-activetop") ? 0 : (this.model.enableRTL ? 4 : 3)) + "px");
                    $(this.contentPanels).css({"border-top": "none", "width": ej.getDimension(this.element, "width") - 1 + "px" });
                    this.itemsContainer.css("border-bottom", "1px solid #bbbcbb");
                }
                if (this.model.headerPosition == "bottom") {
                    $(this.contentPanels).css({ "position": "relative", "width": ej.getDimension(this.element, "width") - 1 + "px", "border-bottom": "none" });
                    this.itemsContainer.css("border-top", "1px solid #bbbcbb");
                    $(this.contentPanels).css({ "border-top": "" });
                }

                var rigtVaule = parseInt(widthValue - (this.scrollPanelWidth + this.scrollstep - 1));
                if (this.model.enableRTL && (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")) {
                    this.itemsContainer.css("clip", "rect(0px," + widthValue + "px,100px," + rigtVaule + "px)");
                }
                else if (this.model.headerPosition == "left") {
                    if (this._tabContentsHeight() > Number(this.model.height.split("px")[0])) {
                        this.itemsContainer.css({ "height": ((parseInt(this.itemsContainer.css("height")) + (parseInt(this.items.css("height")) * this.items.length)) + 30) + "px", "position": "absolute", "border-right": "1px solid #bbbcbb", "background": "white" });
                        $(this.contentPanels).css("padding-left", this.itemsContainer.width() + 5 + "px");
                        if (this.model.enableRTL)
                            this.itemsContainer.css("margin-right", (ej.getDimension(this.element, "width") - this.itemsContainer.width()));
                        if (this._beforeWidth == 0 || this._beforeWidth < this.scrollPanelHeight)
                            this.itemsContainer.css("clip", "rect(0px," + (this.itemsContainer.width() + 4) + "px," + this.scrollPanelHeight + "px," + (this.scrollstep) + "px)");
                        else {
                            if (this._beforeWidth > this.scrollPanelHeight) {
                                this.itemsContainer.css({
                                    "clip": "rect(" + ((this.items[this.selectedItemIndex()].offsetTop - this.scrollPanelHeight) * 2) + "px," + (this.itemsContainer.width() + 2) + "px," + (this.items[this.selectedItemIndex()].offsetTop * 2 - this.scrollPanelHeight) + "px,0px)",
                                    "margin-top": "-" + ((this.items[this.selectedItemIndex()].offsetTop - this.scrollPanelHeight) * 2) + "px"
                                });
                            }
                        }

                        this.element.removeClass("e-scrolltab");
                    }
                }
                else if (this.model.headerPosition == "right") {
                    if (this._tabContentsHeight() > Number(this.model.height.split("px")[0])) {
                        this.itemsContainer.css({ "height": ((parseInt(this.itemsContainer.css("height")) + (parseInt(this.items.css("height")) * this.items.length)) + 30) + "px", "position": "absolute", "margin-left": "-1px", "right": 0 + Number(this.element.css("padding-left").split("px")[0]) + "px" }).css("z-index", "12")
                        $(this.contentPanels).css({ "position": "absolute", "width": ej.getDimension(this.element, "width")-this.itemsContainer.outerWidth() + "px", "height": ej.getDimension(this.element, "height") + "px", "border-right": "none" });
                        this.itemsContainer.css("border-left", "1px solid #bbbcbb");
                        if (this.model.enableRTL)
                            this.itemsContainer.css("margin-right", "-" + (this.itemsContainer.width() + 1) + "px");
                        if (this._beforeWidth == 0 || this._beforeWidth < this.scrollPanelHeight)
                            this.itemsContainer.css("clip", "rect(0px," + this.itemsContainer.width() + 2 + "px," + this.scrollPanelHeight + "px," + (this.scrollstep) + "px)");
                        else {
                            if (this._beforeWidth > this.scrollPanelHeight) {
                                this.itemsContainer.css({
                                    "clip": "rect(" + ((this.items[this.selectedItemIndex()].offsetTop - this.scrollPanelHeight) * 2) + "px," + (this.itemsContainer.width() + 2) + "px," + (this.items[this.selectedItemIndex()].offsetTop * 2 - this.scrollPanelHeight) + "px,0px)",
                                    "margin-top": "-" + ((this.items[this.selectedItemIndex()].offsetTop - this.scrollPanelHeight) * 2) + "px"
                                });
                            }
                        }
                        this.element.removeClass("e-scrolltab");
                    }
                    if(this.model.enableRTL){
                        this.itemsContainer.css({ "height": ((parseInt(this.itemsContainer.css("height")) + (parseInt(this.items.css("height")) * this.items.length)) + 30) + "px", "position": "absolute", "margin-left": "-1px", "right": this.itemsContainer.width() + Number(this.element.css("padding-right").split("px")[0]) + "px" }).css("z-index", "12")
                        $(this.contentPanels).css({ "position": "absolute", "width": ej.getDimension(this.element, "width")-this.itemsContainer.outerWidth() + "px", "left": this.element.css("padding-left"), "height": ej.getDimension(this.element, "height") + "px", "border-right": "none", "left": 0 + Number(this.element.css("padding-right").split("px")[0]) + "px"});
                    }
                }
                else {
                    if (this._beforeWidth == 0 || this._beforeWidth < this.scrollPanelWidth) {
                        this.itemsContainer.css({ "clip": "rect(0px," + (this.scrollPanelWidth + this.scrollstep) + "px,100px," + (this.scrollstep) + "px)", "margin-left": "-" + this.scrollstep + "px" });
                    }
                    else {
                        if (this._beforeWidth > this.scrollPanelWidth) {
                            this.itemsContainer.css({ "clip": "rect(0px," + (this.items[this.selectedItemIndex()].offsetLeft * 2 - this.scrollPanelWidth) + "px,100px," + ((this.items[this.selectedItemIndex()].offsetLeft - this.scrollPanelWidth) * 2) + "px)", "margin-left": "-" + ((this.items[this.selectedItemIndex()].offsetLeft - this.scrollPanelWidth) * 2) + "px" });
                        }
                    }
                }
                this.element.find(".e-icon.e-chevron-circle-left").length && this.element.find(".e-icon.e-chevron-circle-left").css("display", "none");
                this._initialClip = this.itemsContainer.css("clip");
            }
        },
        _executeForwardScrolling: function (args , scrollStep) {
			var tabScrollStep= (scrollStep) ? scrollStep :(args.type=='swiperight'||args.type=='swipeleft')? 50: 30;
            if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                if (!this.model.enableRTL) {
                    var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[1].replace(",", ""));
                    var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[3].replace(",", ""));
                    var scrollValue = Number(this._rightScrollIcon.css("margin-right").split("px")[0]);
                    this.itemsContainer.css({ "clip": "rect(0px," + (ClipValue1 + tabScrollStep) + "px,100px," + (ClipValue2 + tabScrollStep) + "px)", "margin-left": "-" + (ClipValue2 + tabScrollStep) + "px" });
					if(args.type=='swipeleft' && Math.abs(Number((this.itemsContainer.css('margin-left')).split("px")[0])) >= (this._tabContentsWidth() - ej.getDimension(this.element, "width")))
					   this._off(this.items, "swipeleft", this._tabSwipe);
					if ((this._leftScrollIcon && this._leftScrollIcon.css("margin-left")) && (Number(this.itemsContainer.css("margin-left").split("px")[0].replace("-", "")) >= (this._tabContentsWidth() - ej.getDimension(this.element, "width")))) {
                        this._rightScrollIcon.css("display", "none"); 
						this._off(this.items, "swipeleft", this._tabSwipe);
                    }

                }
                else {
                    var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[1].replace(",", ""));
                    var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[3].replace(",", ""));
                    var itemsMargin = this.itemsContainer.css("margin-right") ? Number(this.itemsContainer.css("margin-right").split("px")[0].replace(",", "")) : 0;
                    var scrollValue = Number(this._rightScrollIcon.css("margin-left").split("px")[0]);
                    var RightScroll = this._leftScrollIcon && this._leftScrollIcon.css("margin-right") ? Number(this._leftScrollIcon.css("margin-right").split("px")[0]) : "";
                    this.itemsContainer.css({ "clip": "rect(0px," + (ClipValue1 - tabScrollStep) + "px,100px," + (ClipValue2 - tabScrollStep) + "px)", "margin-right": "-" + (-itemsMargin + tabScrollStep) + "px" });
                    this._rightScrollIcon.css("margin-left", (scrollValue - tabScrollStep) + "px");
                    this._leftScrollIcon ? this._leftScrollIcon.css("margin-right", (RightScroll + tabScrollStep) + "px") : "";
					 if(args.type=='swipeleft' && Math.abs(Number((this.itemsContainer.css('margin-right')).split("px")[0])) >= (this._tabContentsWidth() - ej.getDimension(this.element, "width")))
					   this._off(this.items, "swipeleft", this._tabSwipe);
                    if (this._leftScrollIcon && this._leftScrollIcon.css("margin-right") && (Number(this.itemsContainer.css("margin-right").split("px")[0].replace("-", ""))) >= (this._tabContentsWidth() - ej.getDimension(this.element, "width")))
                        this._rightScrollIcon.css("display", "none")

                }

            }
            else if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[0].replace(",", "").split("(")[1]);
                var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[2].replace(",", ""));
                var scrollValue = Number(this._rightScrollIcon.css("margin-top").split("px")[0].replace(",", ""));
                var RightTop = this._leftScrollIcon && this._leftScrollIcon.css("margin-top") ? Number(this._leftScrollIcon.css("margin-top").split("px")[0]) : 0;
                var MarginTop = this.itemsContainer.css("margin-top") ? Number(this.itemsContainer.css("margin-top").split("px")[0]) : 0;
                this.itemsContainer.css({ "clip": "rect(" + (ClipValue1 + tabScrollStep) + "px, " + (this.itemsContainer.width() + 4) + "px," + (ClipValue2 + tabScrollStep) + "px, 0px)", "margin-top": "-" + (-MarginTop + tabScrollStep) + "px" });
                if (ClipValue2 > (this._tabContentsHeight() - 20)) {
                    this.itemsContainer.css({ "clip": "rect(" + (this._tabContentsHeight() - Number(this.model.height) + 2) + "px, " + (this.itemsContainer.width() + 4) + "px, " + (this._tabContentsHeight() + 2) + "px, 0px", "margin-top": "-" + (this._tabContentsHeight() - Number(this.model.height) + 2) + "px" })
                    this._rightScrollIcon.css("display", "none");
                }
            }
        },
        _executeBackwardScrolling: function ( args , scrollStep ) {
            if (this._rightScrollIcon != "") this._rightScrollIcon.css("display", "block");
			var tabScrollStep= (scrollStep) ? scrollStep :(args.type=='swiperight'||args.type=='swipeleft')? 50: 30;
            if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") {
                if (!this.model.enableRTL) {
                    var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[1].replace(",", ""));
                    var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[3].replace(",", ""));
                    var scrollValue = Number(this._rightScrollIcon.css("margin-right").split("px")[0]);
                    this.itemsContainer.css({ "clip": "rect(0px," + (ClipValue1 - tabScrollStep) + "px,100px," + (ClipValue2 - tabScrollStep) + "px)", "margin-left": "-" + (ClipValue2 - tabScrollStep) + "px" });
                    if (ClipValue2 - tabScrollStep < 0) {
                        this.itemsContainer.css({ "clip": "rect(0px," + ej.getDimension(this.element, "width") + "px,100px, 0px", "margin-left": "0px" });
                        this._rightScrollIcon.css("margin-right", this.itemsContainer.width() - ej.getDimension(this.element, "width") + 20 + "px");
                    }
					if(args.type=='swiperight' && Math.abs(Number((this.itemsContainer.css('margin-left')).split("px")[0])) <= (this._tabContentsWidth() - ej.getDimension(this.element, "width")))
						this._on(this.items, "swipeleft", this._tabSwipe);
                    if (ClipValue2 <= tabScrollStep && this._leftScrollIcon)
                        this._leftScrollIcon.css("display", "none");
                }
                else {
                    var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[1].replace(",", ""));
                    var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[3].replace(",", ""));
                    var itemsMargin = Number(this.itemsContainer.css("margin-right").split("px")[0]) ? Number(this.itemsContainer.css("margin-right").split("px")[0]) : 0;
                    var RightScroll = this._leftScrollIcon && this._leftScrollIcon.css("margin-right") ? Number(this._leftScrollIcon.css("margin-right").split("px")[0]) : "";
                    var scrollValue = Number(this._rightScrollIcon.css("margin-left").split("px")[0]);
                    this.itemsContainer.css({ "clip": "rect(0px," + (ClipValue1 + tabScrollStep) + "px,100px," + (ClipValue2 + tabScrollStep) + "px)", "margin-right": "-" + (-itemsMargin - tabScrollStep) + "px" });
                    this._rightScrollIcon.css("margin-left", (scrollValue + tabScrollStep) + "px");
                    this._leftScrollIcon ? this._leftScrollIcon.css("margin-right", (RightScroll - tabScrollStep) + "px") : "";
					if(args.type=='swiperight' && Math.abs(Number((this.itemsContainer.css('margin-right')).split("px")[0])) <= (this._tabContentsWidth() - ej.getDimension(this.element, "width")))
						this._on(this.items, "swipeleft", this._tabSwipe);
                    if (itemsMargin >= -tabScrollStep && this._leftScrollIcon) {
                        this._leftScrollIcon.css("display", "none");
                    }
                }
            }

            else if (this.model.headerPosition == "left" || this.model.headerPosition == "right") {
                var ClipValue1 = Number(this.itemsContainer.css("clip").split("px")[0].replace(",", "").split("(")[1]);
                var ClipValue2 = Number(this.itemsContainer.css("clip").split("px")[2].replace(",", ""));
                var scrollValue = Number(this._rightScrollIcon.css("margin-top").split("px")[0]);
                var RightTop = this._leftScrollIcon.css("margin-top") ? Number(this._leftScrollIcon.css("margin-top").split("px")[0]) : 0;
                var MarginTop = this.itemsContainer.css("margin-top") ? Number(this.itemsContainer.css("margin-top").split("px")[0]) : 0;
                this.itemsContainer.css({ "clip": "rect(" + (ClipValue1 - tabScrollStep) + "px, " + this.itemsContainer.width() + "px," + (ClipValue2 - tabScrollStep) + "px, 0px)", "margin-top": "-" + (-MarginTop - tabScrollStep) + "px" });
                if (Number(this.itemsContainer.css("clip").split("px")[0].split("(")[1]) <= 0) {
                    this.itemsContainer.css({ "clip": "rect( 0px, " + this.itemsContainer.width() + "px," + (Number(this.model.height)) + "px, 0px)", "margin-top": "0px" });
                    this._leftScrollIcon.css("display", "none");
                }
            }
        },

        _removeHeaderClass: function () {
            this.itemsContainer.remove();
            this.itemsContainer.insertBefore(this.element.find(">div").first());
            this.items.removeClass("e-bottom-line e-top-line");
            $(this.contentPanels).removeClass("e-content-bottom e-activetop e-activebottom");
            this.itemsContainer.removeClass("e-header e-left e-right");
        },

        _removeVerticalClass: function () {
            this.element.removeClass("e-vertical");
            this.itemsContainer.removeClass("e-left e-right").removeAttr("style");
        },


        _removeBaseClass: function () {
            this.element.removeClass("e-tab e-widget e-corner e-js e-tabscroll").removeAttr("role tabindex unselectable");
            if ((this.model.headerPosition == "left" || this.model.headerPosition == "right"))
                this._removeVerticalClass();
            this.itemsContainer.removeClass("e-header e-box e-clearall e-select e-addborderbottom e-addbordertop e-addborderleft e-addborderright");
            this.anchors.removeClass("e-link");
            this.items.removeClass("e-select e-item e-active e-bottom-line e-top-line e-margine-top e-margine-bottom e-rtl-top-line e-top-hover e-rtl-bottom-line e-disable").removeAttr("role tabindex aria-selected aria-expanded");
            $(this.contentPanels).removeClass("e-content  e-content-item e-box e-content-bottom e-activetop e-activebottom e-active-content e-hidebottom e-addborderbottom e-hidetop e-addbordertop e-hideleft e-addborderleft e-hideright e-addborderright e-disable").removeAttr("role aria-hidden").css("display", "");
            this.element.find("div.e-close.e-tabdelete,div.e-icon.e-chevron-circle-right,div.e-icon.e-chevron-circle-left,div.e-icon.e-reload").remove();
        },


        _addContentTag: function (href, index) {
            var id = this._getTabId(href);
            var panel = this.element.find("#" + id);
            if (!panel.length) {
                panel = ej.buildTag("div.e-content  e-content-item e-box e-content-bottom #" + id)
                    .insertAfter(this.contentPanels[index - 1] || this.itemsContainer);
            }
            this.contentPanels.splice(index, 0, panel[0]);
        },

        _roundedCorner: function (value) {
            if (value) {
                this.element.addClass('e-corner');
            }
            else if (this.element.hasClass('e-corner')) {
                this.element.removeClass('e-corner');
            }
        },


        _setTabsHeightStyle: function (heightFormat) {
            if (ej.Tab.HeightAdjustMode.Content != heightFormat) $(this.contentPanels).height("");
            if (ej.Tab.HeightAdjustMode.Fill == heightFormat) {
                if (ej.Tab.Position.Left === this.model.headerPosition || ej.Tab.Position.Right === this.model.headerPosition) {
                    $(this.contentPanels).css("height", "100vh");
                }
                this._contentPaneSize();
            }
            else if (ej.Tab.HeightAdjustMode.Auto == heightFormat) {
                var maxHeight = 0;
                $(this.contentPanels).css({ "display": "none" }).addClass('e-active-content');
                for (var i = 0; i < this.contentPanels.length; i++) {
                    maxHeight = Math.max(maxHeight, this._getDimension($(this.contentPanels[i]), "outerHeight"));
                }
                $(this.contentPanels).removeClass('e-active-content');
                $(this.contentPanels).height(maxHeight);
                this.maxAutoHeight = maxHeight;
                this.showItem(this.selectedItemIndex());
            }
            else if (ej.Tab.HeightAdjustMode.None == heightFormat) {
                if (this.model.height != null) {
                    this._contentPaneSize();
                }
            }
            if (ej.Tab.HeightAdjustMode.Fill !== heightFormat) $(this.itemsContainer).height("");
            if (ej.Tab.HeightAdjustMode.Content == heightFormat)
                $(this.contentPanels).height("auto");

            if (this.model.enableTabScroll && (this.model.headerPosition == "left" || this.model.headerPosition == "right")) {
                $(this.contentPanels).css("height", this.model.height + "px");
            }

        },
        _getDimension: function (element, method) {
            var value;
            var $hidden = $(element).parents().addBack().filter(':hidden');
            var prop = { visibility: 'hidden', display: 'block' };
            var hiddenCollection = [];
            $hidden.each(function () {
                var hidden = {}, name;
                for (name in prop) {
                    hidden[name] = this.style[name];
                    this.style[name] = prop[name];
                }
                hiddenCollection.push(hidden);
            });
            value = /(outer)/g.test(method) ?
            $(element)[method](true) :
           $(element)[method]();

            $hidden.each(function (i) {
                var hidden = hiddenCollection[i], name;
                for (name in prop) {
                    this.style[name] = hidden[name];
                }
            });
            return value;
        },
        // Tab to active given index value
        showItem: function (index) {
            if ($.inArray(index, this.model.disabledItemIndex) < 0) {
                var proxy = this;
                if (this._isInteraction != false) this._isInteraction = true;
                this._preTabSelectedIndex = this.selectedItemIndex();
                this.selectedItemIndex(index);
                if (this.selectedItemIndex() >= this.contentPanels.length) {
                    this.selectedItemIndex(0);
                    index = this.selectedItemIndex();
                }
                if (index >= 0 && !this.initialRender && true === this._onBeforeActive(index)){
                    this.selectedItemIndex(this._preTabSelectedIndex);
                    return false;
                } 
                else this._preTabIndex = this._preTabSelectedIndex;
                $(this.items[this.selectedItemIndex()]).attr("aria-expanded", true).attr("aria-selected", true).attr("tabindex", 0);
                if (this.selectedItemIndex() != null && this.selectedItemIndex() < this.contentPanels.length) {
                    this._ajaxLoad();
                    this.hideItem(this._preTabIndex);
                    $(this.contentPanels[this.selectedItemIndex()]).fadeIn(this.model.enableAnimation ? 20 : 0, function () {
                        if (!proxy.initialRender && proxy._onActive())
                            return true;
                        proxy.initialRender = false;
                    });
                    if (!(this.model.headerPosition == "left" || this.model.headerPosition == "right")) {
                        var activeClass = this.model.headerPosition == ej.Tab.Position.Top ? "e-activetop" : "e-activebottom";
                        $(this.contentPanels[this.selectedItemIndex()]).addClass(activeClass)
                    }
                    else
                        $(this.contentPanels[this.selectedItemIndex()]).addClass("e-active-content ");
                    $(this.items[this.selectedItemIndex()]).addClass("e-active").removeClass("e-select");
                    $(this.items[this.selectedItemIndex()]).removeClass("e-margine-top e-margine-bottom");

                    for (var i = 0; i <= $(this.items).length; i++) {
                        if ($(this.items[i]).hasClass("e-select")) {
                            if (this.model.headerPosition == "right") {
                                $(this.items[i]).removeClass("e-margine-top e-margine-bottom");
                            }
                            if (this.model.headerPosition == "left") {
                                $(this.items[i]).removeClass("e-margine-top e-margine-bottom");
                            }
                            if (this.model.headerPosition == "top") {
                                if (!this.element.hasClass("e-tab-collapsed"))
                                    $(this.items[i]).addClass("e-margine-top");
                                else
                                    $(this.items[i]).removeClass("e-margine-top");
                                $(this.items[i]).removeClass("e-margine-bottom");
                            }
                            if (this.model.headerPosition == "bottom") {
                                $(this.items[i]).removeClass("e-margine-top");
                                $(this.items[i]).addClass("e-margine-bottom");
                            }
                        }
                    }
                    $(this.contentPanels[this.selectedItemIndex()]).addClass("e-active-content").removeAttr("aria-hidden", false);
                }
            }
            if (this.model.enableTabScroll && this._tabContentsWidth() > (this.model.width || this.element.width()) && this.itemsContainer.find("li").length && (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")) {
                if (!this.model.enableRTL) {
                    var itemPosition = Number(this.itemsContainer.find("li.e-active").position().left.toFixed(0)) + this.itemsContainer.find("li.e-active").width() - this._getItemsWidth(this.itemsContainer);
                    if ((itemPosition > 0) && (Number(this.itemsContainer.find("li.e-active").offset().left.toFixed(0)) + this.itemsContainer.find("li.e-active").width() > this._getItemsWidth(this.itemsContainer) || (Number(this.itemsContainer.find("li.e-active").offset().left.toFixed(0)) - this.itemsContainer.find("li.e-active").width() < 0))) {
                        this.itemsContainer.css("clip", "rect(0 ," + (this._getItemsWidth(this.itemsContainer) + (itemPosition + 10)) + "px, 100px," + (itemPosition + 10) + "px)").css("margin-left", "-" + (itemPosition + 10) + "px")
                        this._rightScrollIcon ? this._rightScrollIcon.css("margin-right", (this.itemsContainer.width() - this._getItemsWidth(this.itemsContainer) + 10 - itemPosition) + "px").css("display", "block") : "";
                        this._addScrollBackIcon();
                        if ((this._leftScrollIcon && this._leftScrollIcon.css("margin-left")) && (Number(this.itemsContainer.css("margin-left").split("px")[0].replace("-", "")) >= (this._tabContentsWidth() - this._getItemsWidth(this.itemsContainer))) && ((Number(this.itemsContainer.find("li.e-active").offset().left.toFixed(0)) - this.itemsContainer.find("li.e-active").width() < 0))) {
                        this._rightScrollIcon.css("display", "none"); 
						this._off(this.items, "swipeleft", this._tabSwipe);
                    }else
                        this._leftScrollIcon ? this._leftScrollIcon.css("display", "block") : "";
                        this._rightScrollIcon ? this._rightScrollIcon.css("display", "none") : "";
                    }
                }
            }
            else if (this.model.enableTabScroll && this.model.height && (this.model.headerPosition == "left" || this.model.headerPosition == "right") && !this.model.enableRTL) {
                var itemPosition = Number(this.itemsContainer.find("li.e-active").position().top.toFixed(0)) + this.itemsContainer.find("li.e-active").height() - Number(this.model.height);
                if ((itemPosition > 0) && (Number(this.itemsContainer.find("li.e-active").offset().top.toFixed(0)) + this.itemsContainer.find("li.e-active").height() > Number(this.model.height) || (Number(this.itemsContainer.find("li.e-active").offset().top.toFixed(0)) - this.itemsContainer.find("li.e-active").height() < 0))) {
                    this.itemsContainer.css("clip", "rect(" + itemPosition + "px," + (this.itemsContainer.outerWidth() + 2) + "px, " + (Number(this.model.height) + itemPosition) + "px, 0px").css("margin-top", "-" + itemPosition + "px");
                    this._addScrollBackIcon();
                }
            }

        },
        
        _getItemsWidth: function (itemsContainer) {
            var ItemsWidth = 0;
            for(var i=0; i< itemsContainer[0].children.length; i++) {
                ItemsWidth += itemsContainer[0].children[i].offsetWidth;
            }
            return ItemsWidth;
        },

        hideItem: function (index) {
            $(this.contentPanels[index]).fadeOut(0);
            if (!(this.model.headerPosition == "left" || this.model.headerPosition == "right"))
                var activeClass = this.model.headerPosition == ej.Tab.Position.Top ? "e-activetop" : "e-activebottom";
            $(this.items[index]).removeClass("e-active").addClass("e-select");
            $(this.contentPanels[index]).removeClass("e-active-content " + activeClass).attr("aria-hidden", true);
        },


        _ajaxLoad: function () {
            var content = $(this.contentPanels[this.selectedItemIndex()]);
            var link = this.anchors[this.selectedItemIndex()];
            var href = $(link).attr("href");
            if (content.is(':empty') && href.indexOf("#") !== 0)
                this._sendAjaxOptions(content, link);
        },


        _getTabId: function (href) {
            return !href.indexOf("#") ? href.replace("#", "") : this.model.idPrefix + this._getNextTabId();
        },

        _getNextTabId: function () {
            return ++this.tabId;
        },


        _disableTabs: function () {
            for (var i = 0, li; (li = this.items[i]) ; i++) {
                if ($.inArray(i, this.model.disabledItemIndex) > -1) {
                    $(li).find("a").off(this.model.events);
                    $(li).find("div.e-close").off("click");
                }
                $(li)[$.inArray(i, this.model.disabledItemIndex) != -1 &&
                    !$(li).hasClass("e-tab-selected") ? "addClass" : "removeClass"]("e-disable");
                $(this.contentPanels[i])[$.inArray(i, this.model.disabledItemIndex) != -1 &&
                    !$(this.contentPanels[i]).hasClass("e-tab-selected") ? "addClass" : "removeClass"]("e-disable");
            }
        },


        _tabItemClick: function (args) {

            if (this.model.enabled) {
                args.preventDefault(); // Prevent the ancher tag url action
                var index;
                if (this.selectedItemIndex() == $(this.items).index($(args.currentTarget)) && this.model.collapsible) {
                    index = -1; $(this.element).addClass("e-tab-collapsed");
                }
                else {
                    index = $(this.items).index($(args.currentTarget));
                }
                if (index != this.selectedItemIndex())
                    this.showItem(index);
                $(this.element).removeClass("e-tab-collapsed");               
				if(this.selectedItemIndex() > -1 && this.contentPanels != 0 && this.model.enableRTL)
				    $(this.element).height(this.itemsContainer.height()+parseInt($(this.contentPanels[this.selectedItemIndex()]).css("height")));
            }
        },

        _tabDeleteClick: function (args) {
            if (this.model.enabled) {
                var currentTab = $(args.target);
                var tabWidth = $(args.target).parent().width();
                if (currentTab.hasClass("e-close"))
                    var index = $(this.items).index($(args.target).parent());
                if (index == this.selectedItemIndex() && this.items.length > index)
                    this.selectedItemIndex(this.selectedItemIndex() + 1)
                var itemsMargin = Number(this.itemsContainer.css("margin-right").split("px")[0]) ? Number(this.itemsContainer.css("margin-right").split("px")[0]) : 0;
                if(this.model.enableTabScroll && (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") && ( this._leftScrollIcon || this._rightScrollIcon ) && this._isSizeExceeded()) {
                     if(!this.model.enableRTL || (this.model.enableRTL && itemsMargin < -tabWidth )) this._executeBackwardScrolling(args,tabWidth);
                     else {
                         this.itemsContainer.css({"margin-right":"0px","clip":this._initialClip});
                         this._leftScrollIcon && this._leftScrollIcon.css("display", "none");
                         this._rightScrollIcon && this._rightScrollIcon.css("display", "none");
                     }	 
                }
                this.removeItem(index);
                if(this.model.enableTabScroll && (this.model.headerPosition == "top" || this.model.headerPosition == "bottom") && ( this._leftScrollIcon || this._rightScrollIcon ) && !this.model.enableRTL) {
                    this._on(this.element.find("div.e-chevron-circle-right"), "mouseover", this._hoverHandler);
                    this._on(this.element.find("div.e-chevron-circle-right"), "mouseout", this._hoverHandler);
                }
            }
        },
        _tabScrollClick: function (args) {
            if (this.model.enabled) {
                if ((this._rightScrollIcon[0] == args.target)) {
                    this._executeForwardScrolling(args);

                    this._addScrollBackIcon();
                    this._leftScrollIcon.css("display", "block");
                }
            }
        },
		
		_tabSwipe: function(e){ 
			 if(e.type=='swipeleft')  
			this._executeForwardScrolling(e);
			else 
			this._executeBackwardScrolling(e);
		},
        _tabScrollBackClick: function (args) { 
            if (this.model.enabled) {
                if ((this._leftScrollIcon[0] == args.target)) {
                    this._executeBackwardScrolling(args);
                }
            }
        },

        _tabReloadClick: function (args) {
            if (this.model.enabled) {
                var currentTab = $(args.target);
                if (currentTab.hasClass("e-reload")) {
                    var link = this.anchors[this.selectedItemIndex()];
                    var href = $(link).attr("href");
                    var content = $(this.contentPanels[this.selectedItemIndex()]);
                    if (href.indexOf("#") !== 0)
                        this._sendAjaxOptions(content, link);
                    else
                        this.showItem(this.selectedItemIndex());
                }
            }
        },


        _sendAjaxOptions: function (content, link) {
            //load waiting popup
            if (this._onBeforeLoad(link))
                return true;
            content.addClass("e-load");
            var proxy = this;
            var curTabTitle = $(link).html();
            var hrefLink = link.href.replace("#", "");
            var ajaxOptions = {
                type: this.model.ajaxSettings.type, cache: this.model.ajaxSettings.cache, url: hrefLink, data: this.model.ajaxSettings.data,
                dataType: this.model.ajaxSettings.dataType, contentType: this.model.ajaxSettings.contentType, async: this.model.ajaxSettings.async,
                "success": function (data) {
                    try {
                        proxy._ajaxSuccessHandler(data, content, link, curTabTitle);
                    } catch (e) {

                    }
                }, "error": function () {
                    try {
                        proxy._ajaxErrorHandler(link, proxy.selectedItemIndex(), curTabTitle);
                    } catch (e) {

                    }
                }
            };
            this._sendAjaxRequest(ajaxOptions);
        },

        _sendAjaxRequest: function (ajaxOptions) {
            $.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.success,
                error: ajaxOptions.error,
                beforeSend: ajaxOptions.beforeSend,
                complete: ajaxOptions.complete
            });
        },


        _ajaxSuccessHandler: function (data, content, link, curTabTitle) {
            if (curTabTitle != null)
                $(link).html(curTabTitle);
            content.removeClass("e-load");
            content.html(data).addClass("e-tab-loaded"); //to indicate the content is already loaded
            var eventData = { data: data, url: link, content: content };
            this._trigger("ajaxSuccess", eventData);
            if (this._onLoad(link))
                return true;
        },


        _ajaxErrorHandler: function (data, link, index, title) {
            this._trigger("ajaxError", { data: data, url: link });
            this._onLoad(link);
        },

        _createContentPanel: function (id) {
            return $('<div></div>')
				.attr("id", id)
				.addClass("e-content  e-content-item e-content-bottom e-box");
        },


        _refresh: function () {
            this._unWireEvents();
            this.itemsContainer.removeAttr("style class");
            $(this.contentPanels).removeAttr("style class");
            this.element.css("margin-left", "");
            this._removeVerticalClass();
            this._removeHeaderClass();
            this._initialize();
        },

        _keyPress: function (e) {
            if (this.model.enabled) {
                var index, currentEle, targetEle = $(e.target),code;
                if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
                else if (e.which) code = e.which; // ns4 and opera
                else code = e.charCode;
                if (targetEle.hasClass("e-link") || targetEle.hasClass("e-item")) {
                    switch (code) {
                        case 39:
                        case 40:
                            {
                                e.preventDefault();
								var index = [];
								for(var i=0; i<this.getItemsCount();i++) {
									if($.inArray(i,this.model.hiddenItemIndex) < 0)
									{
										index.push(i);
									}
								}
								var tabIndex = $.inArray(this.selectedItemIndex(),index);
								tabIndex==index.length-1?this.showItem(index[0]): this.showItem(index[tabIndex+1]);
                                break;
                            }
                        case 37:
                        case 38:
                            {
                                e.preventDefault();
								var index = [];
								for(var i=0; i<this.getItemsCount();i++) {
									if($.inArray(i,this.model.hiddenItemIndex) < 0)
									{
										index.push(i);
									}
								}
								var tabIndex = $.inArray(this.selectedItemIndex(),index);
								tabIndex==0 ? this.showItem(index[index.length-1]) : this.showItem(index[tabIndex-1]);
                                break;
                            }
                        case 35:
                            {
                                e.preventDefault();
                                this.showItem(this.getItemsCount() - 1);
                                break;
                            }
                        case 36:
                            {
                                e.preventDefault();
                                this.showItem(0);
                                break;
                            }
                        case 13:
                            {
                                e.preventDefault();
                                this.showItem(this.selectedItemIndex());
                                break;
                            }
                    }
                }
                else if (e.ctrlKey && !targetEle.hasClass("e-tab")) {
                    switch (code) {
                        case 38:
                            e.preventDefault();
                            index = $(this.contentPanels).index(targetEle.parent(".e-content"));
                            currentEle = $(this.items[index]);
                            break;
                        case 33:
                            e.preventDefault();
                            currentEle = $(this.items[0]);
                            this.showItem(0);
                            break;
                        case 34:
                            e.preventDefault();
                            currentEle = $(this._headers[this.getItemsCount() - 1]);
                            this.showItem(this.getItemsCount() - 1);
                            break;
                    }
                }
                if (!ej.isNullOrUndefined(currentEle)) {
                    currentEle.addClass("e-focus");
                    currentEle.focus();
                }
            }
        },

        _hoverHandler: function (args) {
            args.preventDefault();
            if (this.model.enabled) {
                var index = $(this.items).index($(args.target).parent());
                if (index == -1)
                    index = $(this.items).index($(args.target));
				if((this.model.showCloseButton || this.model.showReloadIcon) && !$(this.items[index]).hasClass("e-disable")){
                args.type === "mouseout" ? $(this.element.find("div.e-tabdelete")[index]).css("visibility", "hidden") : $(this.element.find("div.e-tabdelete")[index]).css("visibility", "visible");
				args.type === "mouseout" ? $(this.element.find("div.e-reload")[index]).css("visibility", "hidden") : $(this.element.find("div.e-reload")[index]).css("visibility", "visible");
				}
                args.type === "mouseout" ? $(this.element.find("div.e-chevron-circle-right")).css("visibility", "hidden") : $(this.element.find("div.e-chevron-circle-right")).css("visibility", "visible");
                args.type === "mouseout" ? $(this.element.find("div.e-chevron-circle-left")).css("visibility", "hidden") : $(this.element.find("div.e-chevron-circle-left")).css("visibility", "visible");
            }
        },


        _wireEvents: function (event) {
            this._on(this.items, event, this._tabItemClick);
            this._on(this.itemsContainer, "mouseover", this._hoverHandler);
            this._on(this.itemsContainer, "mouseout", this._hoverHandler);
            this._on(this.element.find(">ul").eq(0).find(">li div.e-close"), "click", this._tabDeleteClick);
            this._on(this.element.find("div.e-chevron-circle-left"), "click", this._tabScrollBackClick);
			if (this.model.enableTabScroll)this._on(this.items, "swipeleft swiperight", this._tabSwipe);
            this._on(this.itemsContainer, "focusin", this._focusIn);
            this._on(this.itemsContainer, "focusout", this._focusOut);
            $(window).on('resize', $.proxy(this._resize, this));
            this._on(this.element.find(">ul").eq(0).find(">li div.e-reload"), "click", this._tabReloadClick);
			this._resizeEvents(this.model.heightAdjustMode);
        },
        _resize: function () {
            if (this.model && this.model.width == null && this.model.enableTabScroll && (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")) {
                this._removeScroll()
                this._addScroll()
            }
        },


        _unWireEvents: function () {
            this._off(this.items, this.model.events);
            this._off(this.element.find(">ul").eq(0).find(">li div.e-close"), "click");
            this._off(this.element.find("div.e-chevron-circle-right"), "click");
            this._off(this.element.find("div.e-chevron-circle-left"), "click");
			if (this.model.enableTabScroll)this._off(this.items, "swipeleft swiperight", this._tabSwipe);
            this._off(this.itemsContainer, "mouseover", this._hoverHandler);
            this._off(this.itemsContainer, "mouseout", this._hoverHandler);
            this._off(this.element.find("div.e-chevron-circle-left"), "mouseover", this._hoverHandler);
            this._off(this.element.find("div.e-chevron-circle-right"), "mouseover", this._hoverHandler);
            this._off(this.element.find("div.e-chevron-circle-left"), "mouseout", this._hoverHandler);
            this._off(this.element.find("div.e-chevron-circle-right"), "mouseout", this._hoverHandler);
            this._off(this.itemsContainer, "focusin", this._focusIn);
            this._off(this.itemsContainer, "focusout", this._focusOut);
            this._off(this.element.find(">ul").eq(0).find(">li div.e-reload"), "click");
            this._resizeEvents();
        },
        _resizeEvents: function (value) {
            if (value === "fill") $(window).on('resize', $.proxy(this._windowResized, this));
            else $(window).off('resize', $.proxy(this._windowResized, this));
        },


        _windowResized: function (e) {
            var maxHeight = this._getDimension($(this.element).parent(), "height");
            if (this._prevSize == maxHeight) return;
            else this._contentPaneSize();
            this._prevSize = maxHeight;
            if (!this.model.width && this.model.enableTabScroll)
                this._addScroll();
        },
        _contentPaneSize: function () {
            if (this.model.height != null && this.model.heightAdjustMode == "none") {
                $(this.element).height(this.model.height);
                var maxHeight = this._getDimension($(this.element), "height");
            }
            else var maxHeight = this._getDimension($(this.element).parent(), "height");
            $(this.contentPanels).height("");
            $(this.element).parent().css({ "overflow": "auto" });
            if (this.model.headerPosition === "top" || this.model.headerPosition === "bottom")
                maxHeight -= this._getDimension($(this.itemsContainer), "outerHeight");
            var maxPadding = 0, padding;
            for (var i = 0; i < this.contentPanels.length; i++) {
                if ($(this.contentPanels[i]).hasClass("e-active-content")) {
                    padding = Math.max(maxPadding, this._getDimension($(this.contentPanels[i]), "outerHeight") - this._getDimension($(this.contentPanels[i]), "height"));
                    if (this.model.height != null && this.model.heightAdjustMode == "none") $(this.contentPanels[i]).outerHeight(maxHeight).css({ "overflow": "auto" })
                    else $(this.contentPanels[i]).height(maxHeight - padding).css({ "overflow": "auto" });
                } else {
                    maxPadding = Math.max(maxPadding, this._getDimension($(this.contentPanels[i]), "outerHeight") - this._getDimension($(this.contentPanels[i]), "height"));
                    if (this.model.height != null && this.model.heightAdjustMode == "none") $(this.contentPanels[i]).outerHeight(maxHeight).css({ "overflow": "auto" })
                    else $(this.contentPanels[i]).height(maxHeight - maxPadding).css({ "overflow": "auto" });
                }
            }
        },
        _disableItems: function (indexes) {
            if (!this.model.enabled) return false;
            if (indexes != null) {
                for (var i = 0; i < indexes.length; i++) {
                    if ($.inArray(indexes[i], this.model.disabledItemIndex) == -1)
                        this.model.disabledItemIndex.push(indexes[i]);
                }
                this.model.disabledItemIndex.sort();
                this._disableTabs();
            }
        },

        _enableItems: function (indexes) {
            if (!this.model.enabled) return false;
            for (var i = 0; i < indexes.length; i++) {
                var index = indexes[i];
                this.model.disabledItemIndex = $.grep(this.model.disabledItemIndex, function (n, i) {
                    return n != index;
                });
            }
            this._disableTabs();
        },


        disable: function () {
            var indexes = [];
            for (var index = 0; index < this.getItemsCount() ; index++) {
                indexes.push(index);
            }
            this._disableItems(indexes);
            this.model.enabledItemIndex = [];
            this._unWireEvents();
        },

        enable: function () {
            var indexes = [];
            this.model.disabledItemIndex = [];
            for (var index = 0; index < this.getItemsCount() ; index++) {
                if ($.inArray(index, this.model.enabledItemIndex) < 0) {
                    this.model.enabledItemIndex.push(index);
                    indexes.push(index);
                }
                this._enableItems(index);
            }
        },

        getItemsCount: function () {
            if (this.items) {
                return this.items.length;
            }
        },

        addItem: function (url, displayLabel, index, cssClass, id) {
            (index >= 0 && index < this.items.length) ? this._addItemIndex = index : this._addItemIndex = this.items.length;
            for (var disable_index = 0; disable_index < this.model.disabledItemIndex.length; disable_index++) {
                if (this.model.disabledItemIndex[disable_index] >= index)
                    this.model.disabledItemIndex[disable_index]++;
            }
            if (this.model.headerPosition == "left") {
                this.items.length >= 0 && this.itemsContainer.addClass("e-left");
            }
            else if (this.model.headerPosition == "right") {
                this.items.length >= 0 && this.itemsContainer.addClass("e-right");
            }
            else
                this.items.length == 0 && this.itemsContainer.addClass("e-header");
            var liTag = ej.buildTag("li.e-select e-item");
            if ((this.model.headerPosition == "top"))
                if (this.model.enableRTL)
                    $(liTag).addClass("e-rtl-top-line e-top-hover");
                else
                    $(liTag).addClass("e-bottom-line");
            if (!ej.isNullOrUndefined(cssClass)) {
                var span = ej.buildTag('span').addClass(cssClass);
                liTag.append(span);
            }
            if (index === undefined && displayLabel === undefined && url != null)
                displayLabel = "Item";
            if (index === undefined && displayLabel === undefined && id === undefined) {
                url = "#Item" + this.items.length;
                displayLabel = "Item"
            }
            if (id != undefined) {
                if (id.indexOf("#") != 0)
                    id = "#" + id;
                this.divId = id;
            }
            else if (url != undefined)
                id = url;
            var aTag = ej.buildTag("a", displayLabel, {}, { href: url });
            aTag.addClass("e-link");
            if (this.model.headerPosition == "top" || this.model.headerPosition == "bottom")
                aTag.appendTo(liTag);
            if (this.model.showCloseButton) {
                var deleteIcon = ej.buildTag('div.e-icon e-close e-tabdelete', "", {}, {}).css("visibility", "hidden");
                liTag.append(deleteIcon);
                this._on(deleteIcon, "click", this._tabDeleteClick);
            }
            if (this.model.headerPosition == "left" || this.model.headerPosition == "right")
                aTag.appendTo(liTag);
            if (index === undefined) {
                index = this.anchors.length;
            }
            var insertIndex = index >= this.items.length;
            if (insertIndex) {
                liTag.appendTo(this.itemsContainer);
            } else {
                liTag.insertBefore(this.items[index]);
            }
            if (!ej.isNullOrUndefined(this.model.headerSize))
                this._setHeaderSize(this.model.headerSize);
            if (this.selectedItemIndex() == index) {
                this.hideItem[index];
                this.selectedItemIndex(this.selectedItemIndex() + 1);
            } else {
                this.hideItem[index];
                if (index < this.selectedItemIndex())
                    this.selectedItemIndex(this.selectedItemIndex() + 1);
            }
            this._itemsRefreshing();
            this._reinitialize(true);
            if (this.model.headerPosition == "top")
                $(this.contentPanels[index]).addClass("e-hidebottom");
            if (this.model.headerPosition == "bottom") {
                $(this.contentPanels[index]).addClass("e-hidetop");
                liTag.addClass("e-top-line e-item e-select e-margine-bottom")
            }
            if (this.model.headerPosition == "left")
                $(this.contentPanels[index]).addClass("e-hideleft");
            if (this.model.headerPosition == "right")
                $(this.contentPanels[index]).addClass("e-hideright");
            var data = {
                tabHeader: this.anchors[index],
                tabContent: this.contentPanels[index]
            };
            this.refreshTabScroll();
            this._addItemIndex = null;
            this._onAdd(data);
            if (this.model.showReloadIcon) {
                var reloadIcon = ej.buildTag('div.e-icon e-reload', "", {}, { role: "presentation" }).css("visibility", "hidden");
                $(this.element.find("li")[index]).append(reloadIcon)
            }
            if (this.model.enableTabScroll && this.model.headerPosition == "right") {
                $(this.contentPanels).css("height", this.model.height + "px");
            }
			this._setTabsHeightStyle(this.model.heightAdjustMode);
        },

        _isSizeExceeded: function () {
            var eleWidth = this.element.width(), itemsWidth = 0;
            var tabcount = this.items.length;
            for (var tabVal = 0; tabVal < tabcount; tabVal++) {
                var tabWidth = $(this.items[tabVal]).width();
                itemsWidth += tabWidth;
            }
            return (itemsWidth > eleWidth ? true : false);
        },

        refreshTabScroll: function () {
            if (this._isSizeExceeded()) {
                this.element.find("div.e-chevron-circle-right").length >= 1 && this.element.find("div.e-chevron-circle-right").remove();
                if (this.model.enableTabScroll) {
                    this._checkScroll();
                    this._addScrollIcon();
                }
            }
            else {
                if (((this.model.headerPosition == "left" || this.model.headerPosition == "right") && this._tabContentsHeight() > (this.element.width() || Number(this.model.height))) || ((this.model.headerPosition == "top" || this.model.headerPosition == "bottom") && (this.itemsContainer.width() > (this.element.outerWidth()))))
                    this._checkScroll();
            }
        },

        removeItem: function (index) {
            if (!this.model.enabled) return false;
            if (index != null && index > -1 && index < this.items.length) {
                if (this._onBrforeRemove({ index: index }) === true)
                    return false;
                var removeTabWidth = $(this.items[index]).width();
                var removedTab = $(this.items[index]).remove();
                if(this.model.enableTabScroll)
                     this.itemsContainer.css("width", (this.itemsContainer.width()-removeTabWidth) + "px");
                this.model.disabledItemIndex = [];
                if (removedTab.hasClass("e-active")) {
                    index == 0 ? this.selectedItemIndex(index + 1) : this.selectedItemIndex(index - 1);
                    this.showItem(this.selectedItemIndex());
                }
                $(this.element.find(">div.e-content")[index]).remove();
                this.contentPanels.splice(index, 1);
                index < this.selectedItemIndex() ? this.selectedItemIndex(this.selectedItemIndex() - 1) : this.selectedItemIndex();

                if (index < 0 || index >= this.anchors.length) {
                    this.selectedItemIndex(0);
                }
                if ((this.model.headerPosition == "left" || this.model.headerPosition == "right") && this.items.length == 1)
                    this._removeVerticalClass();
                else
                    this.items.length == 1 && this.itemsContainer.removeClass("e-header");
                this._unWireEvents();
                this._itemsRefreshing();
                this._wireEvents(this.model.events);
                if (this.model.enableTabScroll)
                    this._on(this.element.find("div.e-chevron-circle-right"), "click", this._tabScrollClick);
                for (var indx = 0; indx < this.items.length; indx++)
                    if ($(this.items[indx]).hasClass('e-disable'))
                        this.model.disabledItemIndex.push(indx);
                this._disableTabs();
                var data = {
                    removedTab: removedTab
                };
                this._onRemove(data);
            }
            if (this.getItemsCount() == 0) {
                this.itemsContainer.removeAttr("style")
                this.itemsContainer.find("div").remove()
            }
            if (this._tabContentsHeight() < Number(this.model.height) && this.itemsContainer.css("clip").split("px").length && this.model.enableTabScroll && (this.model.headerPosition == "left" || this.model.headerPosition == "right")) {
                this._refresh();
                this.itemsContainer.removeAttr("style");
                this._leftScrollIcon ? this._leftScrollIcon.remove() : "";
                this._rightScrollIcon ? this._rightScrollIcon.remove() : "";
            }
            else if (this.model.enableTabScroll && (this.model.headerPosition == "left" || this.model.headerPosition == "right")) {
                if (this._leftScrollIcon && Number(this.itemsContainer.css("clip").split("px")[0].replace(",", "").split("(")[1]) != -(Number(this._leftScrollIcon.css("margin-top").split("px")[0]))) {
                    this._removeScroll();
                    this._addScroll();
                } else
                    this.refreshTabScroll();
                this.showItem(this.selectedItemIndex())
            }

        },

        show: function () {
            if (!this.model.enabled) return false;
            this.element.css("visibility", "visible");
        },

        hide: function () {
            if (!this.model.enabled) return false;
            this.element.css("visibility", "hidden");
        },

        _onBeforeLoad: function (link) {
            var data;
            if (this.selectedItemIndex() == -1 && this.model.collapsible)
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: null, activeIndex: null, url: link, isInteraction: this._isInteraction };
            else
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: this.items[this.selectedItemIndex()], activeIndex: this.selectedItemIndex(), url: link, isInteraction: this._isInteraction };
            return this._trigger("ajaxBeforeLoad", data);
        },

        _focusIn: function () {
            if (!this.model.readOnly && this.model.allowKeyboardNavigation)
                $(this.element).on("keydown", $.proxy(this._keyPress, this));
        },

        _focusOut: function (e) {
            $(this.element).off("keydown", $.proxy(this._keyPress, this));
        },

        _onLoad: function (link) {
            var data;
            if (this.selectedItemIndex() == -1 && this.model.collapsible)
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: null, activeIndex: null, url: link, isInteraction: this._isInteraction };
            else
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: this.items[this.selectedItemIndex()], activeIndex: this.selectedItemIndex(), url: link, isInteraction: this._isInteraction };
            return this._trigger("ajaxLoad", data);
        },

        _onActive: function () {
            var data;
            if (this.selectedItemIndex() == -1 && this.model.collapsible)
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: null, activeIndex: null, isInteraction: this._isInteraction };
            else
                data = { prevActiveHeader: this.items[this._preTabIndex], prevActiveIndex: this._preTabIndex, activeHeader: this.items[this.selectedItemIndex()], activeIndex: this.selectedItemIndex(), isInteraction: this._isInteraction };
            this._isInteraction = true;
            return this._trigger("itemActive", data);

        },

        _onBeforeActive: function (index) {
            if (this.model.beforeActive != null) {
                var data;
                if (this.selectedItemIndex() == -1 && this.model.collapsible)
                    data = { prevActiveHeader: this.items[this._preTabSelectedIndex], prevActiveIndex: this._preTabSelectedIndex, activeHeader: null, activeIndex: null, isInteraction: this._isInteraction };
                else
                    data = { prevActiveHeader: this.items[this._preTabSelectedIndex], prevActiveIndex: this._preTabSelectedIndex, activeHeader: this.items[index], activeIndex: index, isInteraction: this._isInteraction };
                return this._trigger("beforeActive", data);
            }
        },

        _onAdd: function (data) {
            return this._trigger("itemAdd", data);
        },

        _onRemove: function (data) {
            return this._trigger("itemRemove", data);
        },

        _onBrforeRemove: function (data) {
            return this._trigger("beforeItemRemove", data);
        }
    });

    ej.Tab.HeightAdjustMode = {
        /**  Panel height adjusts based on the content */
        Content: "content",
        /**  All panel height will be set the tallest panel height. */
        Auto: "auto",
        /**  Content panel take based on the parent height. */
        Fill: "fill",
        /**  Content panel take based on the height property. */
        None: "none"
    };

    ej.Tab.Position = {
        /**  Tab headers display to top position. */
        Top: "top",
        /**  Tab headers display to bottom position. */
        Bottom: "bottom",
        /**  Tab headers display to left position. */
        Left: "left",
        /** Tab headers display to right position. */
        Right: "right"
    };

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html div elements
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejUploadbox", "ej.Uploadbox", {

        element: null,
		_addToPersist: [""],
        model: null,
        validTags: ["div", "span"],
        _setFirst: false,

        _rootCSS: "e-uploadbox",

        defaults: {

            buttonText: {

                browse: "Browse",

                upload: "Upload",

                cancel: "Cancel",

                close: "Close",
            },

            width: "100px",

            height: "35px",

            htmlAttributes: {},

            dialogPosition: { X: "", Y: "" },

            dialogText: {

                title: "Upload Box",

                name: "Name",

                size: "Size",

                status: "Status"
            },

            customFileDetails: {

                title: true,

                name: true,

                size: true,

                status: true,

                action: true
            },

            dialogAction: {

                modal: false,

                closeOnComplete: false,

                drag: true,

                content: null

            },

            locale: "en-US",

            asyncUpload: true,

            pushFile: null,

            enabled: true,

            multipleFilesSelection: true,

            autoUpload: false,

            showFileDetails: true,

            fileSize: 31457280,

            extensionsAllow: "",

            extensionsDeny: "",

            saveUrl: "",

            removeUrl: "",

            uploadName: "",

            cssClass: "",

            dropAreaText: "Drop files or click to upload",

            allowDragAndDrop: false,

            showBrowseButton: true,

            showRoundedCorner: true,

            dropAreaHeight: "100%",

            dropAreaWidth: "100%",

            enableRTL: false,

            create: null,

            fileSelect: null,

            begin: null,
			
			beforeSend:null,

            cancel: null,

            inProgress: null,
            
            success: null,

            complete: null,

            remove: null,

            error: null,

            destroy: null
        },


        dataTypes: {
            buttonText: "data",
            dialogText: "data",
            disbled: "boolean",
            customFileDetails: "data",
            pushFile: "data",
            dialogAction: "data",
            multipleFilesSelection: "boolean",
            autoUpload: "boolean",
            showFileDetails: "boolean",
            allowDragAndDrop: "boolean",
            showBrowseButton: "boolean",
            showRoundedCorner: "boolean",
            fileSize: "number",
            extensionsAllow: "string",
            extensionsDeny: "string",
            saveUrl: "string",
            removeUrl: "string",
            cssClass: "string",
            enableRTL: "boolean",
            htmlAttributes: "data"
        },



        disable: function () {
            this._changeState(false);
        },

        enable: function () {
            this._changeState(true);
        },
		
        _changeState: function (state) {
            (state)? $(this.control).removeClass("e-disable") : $(this.control).addClass("e-disable");
            this.model.enabled = state;
            $(this._currentElement).find(".e-uploadinput")[0].disabled = !state;
            if (this.diaObj) {
                this.diaObj.option("beforeClose", this._onBeforeClose);
                this.diaObj.setModel({ enabled: state, allowDraggable: state });
            }
        },

        refresh: function () {
            if (this.diaObj) {
                if (this.diaObj.isOpened())
                    this.diaObj.close();
                else
                    this._uploadFileListDelete();
            }
        },
        _updateLocalConstant: function () {
            this._localizedLabels = ej.getLocalizedConstants("ej.Uploadbox", this.model.locale);
        },
        _init: function () {
            this.s = ej.browserInfo();
			this._selectedfiles = [];
            this._updateLocalConstant();
            this._initialize();
            this._wireEvents();
            /*Sync Uploads*/
            if (!this.model.asyncUpload) {
                this._initObjectsSyncUpload();
            }
            this._controlStatus(this.model.enabled);
            this.model.locale == "en-US" ? this._buttonText(this.model.buttonText) : this._setLocale();
            this._roundedCorner(this.model.showRoundedCorner);
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "buttonText":
                        this._buttonText(options[option]);
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "dialogText":
                        this._dialogText(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "locale":
                        this.model.locale = options[option];
                        this._updateLocalConstant();
                        this._setLocale();
                        break;
                    case "height":
                        this.model.height = options[option];
                        this._setHeight(this.model.height);
                        break;
                    case "width":
                        this.model.width = options[option];
                        this._setWidth(this.model.width);
                        break;
                    case "dialogPosition":
                        this.model.dialogPosition = options[option];
                        this._dialogPosition();
                        break;
                    case "allowDragAndDrop":
                        this.model.allowDragAndDrop = options[option];
                        this._dragAndDrop();
                        break;
                    case "dropAreaText":
                        this.model.dropAreaText = options[option];
						this._dropAreaText(this.model.dropAreaText);
                        break;
                    case "showBrowseButton":
                        this.model.showBrowseButton = options[option];
                        this._hideBrowseButton();
						this._refreshUploadDialogParent();
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "dropAreaHeight":
                        this.model.dropAreaHeight = options[option];
                        this._setSize();
                        break;
                    case "dropAreaWidth":
                        this.model.dropAreaWidth = options[option];
                        this._setSize();
                        break;
                    case "pushFile":
                        this.model.pushFile = options[option];
                        if (this.model.pushFile != null && this.UploadType == "Xhr" && this.model.asyncUpload) 
						{
							this._files = this.model.pushFile;
							this._selectedfiles = this._selectedfiles.concat(this.model.pushFile);
						}
						this._onXhrSelect();
                        break;
                    case "multipleFilesSelection":
                        this.model.multipleFilesSelection = options[option];
						 if (((navigator.userAgent.indexOf('Safari') != -1 )&& (navigator.userAgent.indexOf('Chrome') == -1 ))==false)
                        if (this.model.multipleFilesSelection)
                            this._currentElement.find(".e-uploadinput").attr('multiple', 'multiple');
                        else
                            this._currentElement.find(".e-uploadinput").removeAttr('multiple');
                        break;
                    case "uploadName":
                        this.model.uploadName = options[option];
                        this.inputupload.attr('name', this.model.uploadName);
                        this.refresh();
                        break;
                    case "autoUpload":
                        this.model.autoUpload = options[option];
                        break;
                    case "showFileDetails":
                        this.model.showFileDetails = options[option];
                        this.refresh();
                        break;
                    case "fileSize":
                        this.model.fileSize = options[option];
                        break;
                    case "extensionsAllow":
                        this.model.extensionsAllow = options[option];
						this._currentElement.find(".e-uploadinput").attr('accept', options[option]);
                        break;
                    case "extensionsDeny":
                        this.model.extensionsDeny = options[option];
                        break;
                    case "saveUrl":
                        this.model.saveUrl = options[option];
                        break;
                    case "removeUrl":
                        this.model.removeUrl = options[option];
                        break;
                }
                this._currentElement = this.model.allowDragAndDrop && !this.model.showBrowseButton ? this.dragWrapper : this.element;
            }
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _setRTL: function (val) {
            val ? this._currentElement.addClass("e-rtl") : this._currentElement.removeClass("e-rtl");
            if (this.updialog) this.updialog.ejDialog({ enableRTL: val });
        },
        _getLocalizedLabels: function (property) {
            var textType,targetText="";
            if (property == "browse" || property == "upload" || property == "cancel" || property == 'close')
                textType = "buttonText";
            else
                textType = "dialogText";
            if(this._localizedLabels[property])
                targetText =this._localizedLabels[property];
            else if(this._localizedLabels[textType][property])
                targetText =this._localizedLabels[textType][property];
            else if(ej.Uploadbox.Locale["en-US"][property])
                targetText =ej.Uploadbox.Locale["en-US"][property];
            else if(ej.Uploadbox.Locale["en-US"][textType][property]) 
                targetText =ej.Uploadbox.Locale["en-US"][textType][property];
            return targetText;
        },

        _setLocale: function () {
            this._buttonText(this._localizedLabels.buttonText);
            this._dialogText(this._localizedLabels.dialogText);
            this._dropAreaText(this._localizedLabels.dropAreaText);
        },

        _buttonText: function (data) {
            $.extend(this.model.buttonText, data);
            this.buttondiv.val(this.model.buttonText.browse);
            if (this.updialog) {
                this.updialog.find(".e-action-container .e-uploadbtn").html(this.model.buttonText.upload);
                this.updialog.find(".e-action-container .e-uploadclosebtn").html(this.model.buttonText.cancel);
            }
        },

        _dialogText: function (data) {
            $.extend(this.model.dialogText, data);
            if (!(this.diaObj == undefined))
                this.diaObj.option('title', this.model.dialogText.title);
            if (this.updialog) {
                this.updialog.find('.e-head-name').html(this.model.dialogText.name);
                this.updialog.find('.e-head-size').html(this.model.dialogText.size);
                this.updialog.find('.e-head-status').html(this.model.dialogText.status);
            }
        },


        _destroy: function () {
            if (this._currentElement.hasClass("e-uploadbox")) {
                this._currentElement.removeClass("e-uploadbox e-widget");
                this._currentElement.empty();
                $(this.dragWrapper).after(this._currentElement);
				this.element.css({"width": "", "height": ""});
                this._bindResizeHandler(false);
                this.dragWrapper.remove();
            }
        },

        _setSkin: function (skin) {
            this._currentElement.removeClass(this.model.cssClass);
            this._currentElement.addClass(skin);
			if (this.diaObj)
                this.diaObj.setModel({ cssClass:this.model.cssClass });
			if (this.model.allowDragAndDrop) this.dragWrapper.addClass(skin);
        },


        _initialize: function () {
            this.control = this.element[0];
            this.element.addClass("e-widget " + this.model.cssClass);
            this.innerdiv = ej.buildTag('div.e-selectpart e-select e-box');
            this.element.append(this.innerdiv);
            this.buttondiv = ej.buildTag('input.e-inputbtn e-btn#' + this.control.id + '_SelectButton', '', {}, { type: 'button', "data-role": "none", value: this._getLocalizedLabels("browse") });
            this.inputupload = ej.buildTag('input.e-uploadinput', "", {}, { type: 'file', "data-role": "none", name: this.model.uploadName != "" ? this.model.uploadName : this.control.id });
			if(this.model.extensionsAllow){
			   this.inputupload.attr("accept",this.model.extensionsAllow);
			}
            if (this.model.multipleFilesSelection) 
			if (((navigator.userAgent.indexOf('Safari') != -1 )&& (navigator.userAgent.indexOf('Chrome') == -1 ))==false){
                this.inputupload.attr('multiple', 'multiple');
            }
            this.innerdiv.append(this.buttondiv);
            this.innerdiv.append(this.inputupload);
            if (this.model.allowDragAndDrop) this._dragAndDrop(true);
            this._Selector = this.buttondiv[0];
            this._currentElement = this.model.allowDragAndDrop && !this.model.showBrowseButton ? this.dragWrapper : this.element;
            this._setRTL(this.model.enableRTL);
            this._addAttr(this.model.htmlAttributes);
            this.Uploadframes = []; //For IFrame
            this.UploadForms = [];
            this._successFiles = [];
			this._errorFiles = [];
            this.UploadType = this._isXhrSupported() ? "Xhr" : "IFrame";
            if (this.model.width != "") this._setWidth(this.model.width);
            if (this.model.height != "") this._setHeight(this.model.height);
            this._hideBrowseButton();
        },		
        _refreshUploadDialogParent: function () {
            if (this.diaObj)
                this.diaObj.setModel({ target: (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : (!this.model.showBrowseButton) && (this.model.allowDragAndDrop) ? "#" + this.control.id + '_dragWrapper' : "#" + this.control.id });
        },
        _hideBrowseButton: function () {
            if ((!this.model.showBrowseButton) && (this.model.allowDragAndDrop)) {
                this.element.addClass("e-browse-hide");
                this._dropAreaSize();
            }
            else {
                if (this.element.hasClass("e-browse-hide")) {
                    this.element.removeClass("e-browse-hide");
                    this.element.width(this.model.width);
                    this.element.height(this.model.height);
                }
            }
        },
        _setSize: function () {
            if (this.model.allowDragAndDrop) {
                if (this.model.dropAreaWidth != "") this.dragWrapper.outerWidth(this.model.dropAreaWidth);
                if (this.model.dropAreaHeight != "") this.dragWrapper.outerHeight(this.model.dropAreaHeight);
                if (!this.model.showBrowseButton) this._dropAreaSize();
            }
        },

        _dropAreaSize: function () {
            if (this.model.dropAreaWidth != "") this.element.width(this.model.dropAreaWidth);
            if (this.model.dropAreaHeight != "") this.element.height(this.model.dropAreaHeight);
        },

        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },

        _dragAndDrop: function () {
            if (this.model.allowDragAndDrop) {
                this.dragWrapper = ej.buildTag("div.e-drag-wrapper e-widget-wrapper e-upload-box " + this.model.cssClass + "#" + this.control.id + '_dragWrapper')
                this.innerWrapper = ej.buildTag("div.e-drag-container");
                this._spanTag = ej.buildTag("span.e-drag-text").html(this.model.locale == "en-US" ? this.model.dropAreaText : ej.Uploadbox.Locale[this.model.locale].dropAreaText);
                this.innerWrapper.append(this._spanTag);
                this.innerWrapper.insertBefore(this.element);
                this.dragWrapper.insertBefore(this.element);
                this.innerWrapper.append(this.element);
                this.dragWrapper.append(this.innerWrapper);
                this._bindDragEvents();
                this._refreshUploadDialogParent();
                this._setSize();
            }
            else {
                this._refreshUploadDialogParent();
                this.element.insertBefore(this.dragWrapper);
                this.dragWrapper.remove();
                this._unBindDragEvents();
            }
            this._hideBrowseButton();
        },
        _resizeHandler: function () {
            if (this.diaObj) {
                if ($(window).width() > 750) {
                    $(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
                    this.diaObj.setModel({ width: this._getDialogContentWidth(), height: "auto" });
                }
                else {
                    $(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload");
                    this.diaObj.setModel({ width: 250, height: "auto"});
                }
                if (this.diaObj.scroller) this.diaObj.scroller.setModel({ height: "auto" });
            }
        },
        _getDialogContentWidth: function () {
            var dialogWidth = 0;
            if (this.model.customFileDetails.name)   dialogWidth = dialogWidth + 200;
            if (this.model.customFileDetails.size)  dialogWidth = dialogWidth + 100;
            if (this.model.customFileDetails.status) dialogWidth = dialogWidth + 200; 
            else if (this.model.customFileDetails.action) dialogWidth = dialogWidth + 45;
            return dialogWidth+5;
        },
		_dropAreaText: function (areaText) {
            if (this.model.allowDragAndDrop)
                this._spanTag.html(areaText);
        },
        _bindDragEvents: function () {
            this._on(this.dragWrapper, "dragover", this._onDragOverHandler);
            this._on(this.dragWrapper, "drop", this._onDropHandler);
        },
        _unBindDragEvents: function () {
            this._off(this.dragWrapper, "dragover", this._onDragOverHandler);
            this._off(this.dragWrapper, "drop", this._onDropHandler);
        },
        _setWidth: function (value) {
            this.element.css("width", value);
        },
        _setHeight: function (value) {
            this.element.height(value);
        },
        _dialogPosition: function () {
            if (this.diaObj) {
                if ((this.diaObj.model.content == "#" + this.control.id || this.diaObj.model.content == "#" + this.control.id + "_dragWrapper") && this.model.dialogPosition.X == "" && this.model.dialogPosition.Y == "") {
                    var left = parseInt(this.diaObj.wrapper.css("left")) - ((this.diaObj.wrapper.outerWidth() - $(this.diaObj.model.content).outerWidth()) / 2);
                    this.model.dialogPosition.X = parseInt(left) > 0 ? left : parseInt(this.diaObj.wrapper.css("left"));
                    this.model.dialogPosition.Y = parseInt(this.diaObj.wrapper.css("top")) + $(this.diaObj.model.content).outerHeight();
                }
                if (this.model.dialogPosition.X != "" && this.model.dialogPosition.Y != "") {
                    if (this.model.allowDragAndDrop) {
                        var container = this.model.showBrowseButton ? $(this.diaObj.model.target).parent() : $(this.diaObj.model.target).children();
                        this.model.dialogPosition.X = parseInt(this.model.dialogPosition.X) - container.offset()["left"];
                        this.model.dialogPosition.Y = parseInt(this.model.dialogPosition.Y) - container.offset()["top"];
                    }
                    this.diaObj.setModel({ position: this.model.dialogPosition });
                }
            }
        },

        _roundedCorner: function (value) {
            if (value) {
                this.innerdiv.addClass('e-corner');
            }
            else if (this.innerdiv.hasClass('e-corner')) {
                this.innerdiv.removeClass('e-corner');
            }
        },


        _wireEvents: function () {

            this._on(this.element, "click", this._disableclickselect);
            this._on(this.element, "keydown", this._keydownselect);
            this._bindInputChangeEvent();
            this._bindResizeHandler(true);
        },
        _bindResizeHandler: function (responsive) {
            responsive ? $(window).on('resize', $.proxy(this._resizeHandler, this)) : $(window).off('resize', $.proxy(this._resizeHandler, this));
        },

        _keydownselect: function (e) {
             if (!this.element.hasClass("e-disable") && e.keyCode == 13 && (!this.diaObj || !this.diaObj.isOpened()))
               this.element.find('.e-uploadinput').click();
        },

        _onDropHandler: function (e) {
            if (ej.browserInfo().name === "msie" && ej.browserInfo().version === "8.0" || ej.browserInfo().version === "9.0") return false;
            if (this._currentElement.hasClass("e-disable")) return false;
            e.stopPropagation();
            e.preventDefault();
            this._files = this._getAllFileInfo(e.originalEvent.dataTransfer.files);
			this._selectedfiles = this._selectedfiles.concat(this._files);
            if (!this.model.asyncUpload)
            {
                this._isDropped = true;
                $("input[type='file']").prop("files", e.originalEvent.dataTransfer.files);
               
            }
             
            this._fileSelect(e);
        },


        _onDragOverHandler: function (e) {
            if (this._currentElement.hasClass("e-disable")) return false;
            e.stopPropagation();
            e.preventDefault();
        },


        _disableclickselect: function (e) {
            if (this._currentElement.hasClass("e-disable")) {
                e.preventDefault();
            }
        },


        _bindInputChangeEvent: function () {
            this._on(this.inputupload, "change", this._inputValueChange);
        },


        _inputValueChange: function (e) {
            if ((!this.model.asyncUpload)&&(this._isDropped))
            {
                e.stopPropagation();
                e.preventDefault();
                this._isDropped = false;
            }
            else {
                this._files = this._getInputFileInfo($(e.target));
					this._selectedfiles = this._selectedfiles.concat(this._files);
                return this._fileSelect(e);
            }
            
        },
		_fileSelect:function(e){
			if (this._trigger("fileSelect", {files:this._files})) { this._resetFileInput(this._currentElement.find(".e-uploadinput")); return false; }
            this._fileUpload(e);
		},
        _fileUpload: function (e) {
            var filteredFiles = this._isAllowed(this._files);
            this._files = filteredFiles.files;
            if (!this.model.asyncUpload) {
                if (filteredFiles.status)
                    this._onSelectSyncUpload(e); //Sync Upload
                } else {
                    if (filteredFiles.files != null && filteredFiles.files.length > 0) {
                        if (this.UploadType == "Xhr") 
                            this._onXhrSelect(e); //removed uploadcore // For XHR Upload
                        else 
                           this._onSelectIFrame(e); //For Iframe
                        this._resetFileInput(this._currentElement.find(".e-uploadinput"));
                    }
            }
            this._renderTooltip();
        },
		
		upload: function() {
             if (this.UploadType == "Xhr") {
                        this._xhrOnUploadButtonClick(); // Xhr Upload
                    } else {
                        this._onUploadButtonClickIFrame(); //Iframe Upload
                    }					
		},

        __uploadButtonClick: function (e) {
            if (!this._currentElement.hasClass("e-disable")) {
                var uploadbtn = this._currentElement.find(".e-uploadbtn");
                if (this._currentElement.find(".e-uploadbtn").hasClass("e-disable")) e.preventDefault();
                else {
                    this.upload();
                }
                $(e.target).attr('disabled', 'disabled').addClass('e-disable');
            }
        },

        _actionClick: function (e) {
            if (!this._currentElement.hasClass("e-disable")) {
                var targetAction, fileItem, file;
                targetAction = $(e.target);
                fileItem = targetAction.closest(".e-upload-file");
                this._file = $(fileItem).data("file");
                if (targetAction.hasClass("e-delete")) {

                    if (this.UploadType == "Xhr") {
                        this._xhrOnRemove(e, fileItem); //XHr Remove
                    } else {
                        this._onRemoveIFrame(e, fileItem); //IFrame File Upload
                    }
                } else if (targetAction.hasClass("e-file-cancel")) {
                    this._trigger("cancel", { fileStatus: this._file });
                    var fileclose = this.updialog.find(".e-file-cancel");
                    if (fileclose.hasClass("e-disable")) e.preventDefault();
                    else {
                        if (!this.model.asyncUpload) {
                            this._onCancelSyncUpload(e, fileItem); //sync
                        } else {
							this._removeFile($(fileItem).data("file"));
                            if (this.UploadType == "Xhr") {
                                this._xhrOnCancel(e, fileItem); //Xhr Cancel Item
                            } else {
                                this._onCancelIFrame(e, fileItem); //IFrame Cancel Item
                            }
                        }
                    }
                } else if (targetAction.hasClass("e-reload")) {//removed uploadcore
                    if (this.UploadType == "Xhr") {
                        this._xhrOnRetry(e, fileItem); //xhr remove
                    } else {
                        this._onRetryIFrame(e, fileItem); //IFrame Remove
                    }
                }
            }
        },

        _removeFileEntry: function (file) {
            file.remove();
        },
		_removeFile:function(file){
			var fileList = [], selectedFileList = [], sucessFileList=[], errorFileList=[];
			for(var index=0;index < this._files.length;index++) {
				if(this._files[index]!=file)
					fileList.push(this._files[index]);
			}
			this._files=fileList;
			for(var index=0;index<this._selectedfiles.length;index++) {
				if(this._selectedfiles[index]!=file)
					selectedFileList.push(this._selectedfiles[index]);
			}
			this._selectedfiles = selectedFileList;
			for(var index=0;index<this._successFiles.length;index++) {
				if(this._successFiles[index]!=file)
					sucessFileList.push(this._successFiles[index]);
			}
			this._successFiles = sucessFileList;
			for(var index=0;index<this._errorFiles.length;index++) {
				if(this._errorFiles[index]!=file)
					errorFileList.push(this._errorFiles[index]);
			}
			this._errorFiles = errorFileList;
		},


        _isFileUpload: function (fileEntry) {
            if (this.model.customFileDetails.action) {
                var actiondiv = $(fileEntry).find("div.e-icon");
                return actiondiv.is(".e-file-cancel");
            }
            else return true;
        },


        _isXhrSupported: function () {
            return (((this.s.name == "msie" && parseInt(this.s.version) < 9) || ((this.s.name == "safari" && this.s.name == "chrome") && this.s.version == "536")) ? false : (typeof (FormData) != "undefined") && (typeof (File) != "undefined"));
        },


        _getFileName: function (input) {
            return $.map(this._getAllFileInfo(input), function (file) {
                return file.name;
            }).join(", ");
        },

        _getFileSize: function (input) {
            var tempProxy = this;
            return $.map(this._getAllFileInfo(input), function (file) {
                return tempProxy._formatSize(file.size);
            }).join(", ");
        },

        _pushFile: function (files, datapart) {
            var fileListDetails, addedFile, actionlist, i, action, diaObj, addedheading, addedfilesize, addname, addsize, addstatus, DialogContentContainer, fileListActions, dialogActions, filedialog, addedlist, addedfilename, addedfilestatus, addedfileaction;
            addedheading = $("<div class='e-head-content'></div>");
            addname = $("<div class='e-file-head e-head-name'>" + this._getLocalizedLabels("name") + "</div>");
            addsize = $("<div class='e-file-head e-head-size'>" + this._getLocalizedLabels("size") + "</div>");
            addstatus = $("<div class='e-file-head e-head-status'>" + this._getLocalizedLabels("status") + "</div>");
            if (this.model.customFileDetails.name) $(addname).appendTo(addedheading);
            if (this.model.customFileDetails.size) $(addsize).appendTo(addedheading);
            if (this.model.customFileDetails.status) $(addstatus).appendTo(addedheading);
            filedialog = this.updialog;
            if (filedialog && filedialog.length != 0) {
                if (this.model.showFileDetails) {
                    if (this.updialog) this.updialog.find(".e-uploadbtn").removeAttr('disabled').removeClass('e-disable');
                    this.diaObj.open();
                }
            }
            else {
                this.updialog = ej.buildTag('div.e-uploaddialog#' + this.element[0].id + '_dialog', "", {}, { 'title': this._getLocalizedLabels("title") });
                if (this.model.allowDragAndDrop && !this.model.showBrowseButton) {
                    this.dragWrapper.append(this.updialog);
                    DialogContentContainer = "#" + this.control.id + '_dragWrapper';
                }
                else {
                    this.element.append(this.updialog);
                    this.control.id!="" ?  DialogContentContainer = "#" + this.control.id : DialogContentContainer = this.element;
                }
            }
            fileListDetails = this.updialog.find(".e-ul");
            if ($(this.updialog.find(".e-head-content")))
                $(this.updialog.find(".e-head-content")).replaceWith(addedheading);
            if (fileListDetails.length == 0) {
                addedheading.appendTo(this.updialog);
                fileListDetails = ej.buildTag('ul.e-ul').appendTo(this.updialog);
			}
			if($(this.updialog).find('.e-file-upload').length>0)
				$(this.updialog).find('.e-file-upload').remove();
			fileListActions = ej.buildTag('div.e-file-upload').appendTo(this.updialog).append((this.model.autoUpload || !this.model.asyncUpload) ? $(ej.buildTag('div.e-action-container')).addClass("sync") : ej.buildTag('div.e-action-container'));
            dialogActions = ej.buildTag('button.e-uploadclosebtn e-btn e-select', this._getLocalizedLabels("cancel"), {}, { type: 'button', "data-role": "none" }).appendTo($(this.updialog).find(".e-action-container"));
            if (this.model.showRoundedCorner)
                dialogActions.addClass('e-corner');
            this._on(dialogActions, "click", this._dialogclose);
            this._on(dialogActions, 'keydown', this._keydownDialogClose);            
            var dialogContainer = (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : DialogContentContainer
            this.updialog.ejDialog({ showOnInit: false, closeIconTooltip: this._getLocalizedLabels("closeToolTip"), minWidth: 240, width: ($(window).width() < 750) ? 250 : this._getDialogContentWidth(), height: "auto", cssClass: "e-uploadbox " + this.model.cssClass, close: $.proxy(this._uploadFileListDelete, this), enableRTL: this.model.enableRTL, target: dialogContainer, enableResize: false, allowDraggable: this.model.dialogAction.drag, enableModal: this.model.asyncUpload ? this.model.dialogAction.modal : false, showHeader: this.model.customFileDetails.title , showRoundedCorner : this.model.showRoundedCorner});
            $(window).width() < 750 ? $(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload") : $(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
			this.diaObj = this.updialog.data('ejDialog');
			this.diaObj.option("close", $.proxy(this._onClose,this));
			if(this.model.cssClass!="")
				this.diaObj.setModel({ cssClass: "e-uploadbox " + this.model.cssClass });
            this._dialogPosition();
            if (!this.model.multipleFilesSelection) {
                this.updialog.find(".e-ul>.e-upload-file").remove();
            }
            for (i = 0; i < files.length; i++) {//localization can be given for not started
                addedFile = $("<li class='e-upload-file'></li>").appendTo(fileListDetails).data(datapart);
                addedlist = $("<div class='e-file-list'></div>");
                addedfilename = $("<div class='e-file-progress e-file-view'><div class='e-file-name e-file-view'><span class='e-file-name-txt'>" + files[i].name + "</span></div>");
                addedfilesize = "<div class='e-file-size e-file-view'><span class='e-file-name-txt'>" + this._formatSize(files[i].size) + "</span></div>";
                addedfilestatus = $("<div class='e-file-percentage e-file-view'><div class='e-file-progress-bar'><div class='e-file-progress-status'></div></div></div>");
                addedfileaction = $("<div class='e-action-perform'><div class='e-icon e-file-view'></div></div>")
                if (this.model.customFileDetails.name) $(addedfilename).appendTo(addedlist);
                if (this.model.customFileDetails.size) {
                    if (this._getFileSize(files[i]).toString().toLowerCase().match("0.0kb").length == 0 || files[i].size != null) {
                        $(addedfilesize).appendTo(addedlist);
                    }
                    else $(this.updialog).find(".e-head-size").remove();
                }
                if (this.model.customFileDetails.status) $(addedfilestatus).appendTo(addedlist);
                if (this.model.customFileDetails.action) {
                    $(addedfileaction).appendTo(addedlist);
                    action = "cancel";
                    addedlist.find(".e-icon").remove().addClass(action.toString());
                    if (action == "cancel") {
                        actionlist = ej.buildTag('div.e-icon e-file-cancel', '', {}, { "data-content": this._getLocalizedLabels("cancelToolTip") });
                    } else if (action == "remove") {
                        actionlist = ej.buildTag('div.e-icon e-delete', '', {}, { "data-content": this._getLocalizedLabels("removeToolTip") });
                    } else if (action == "retry") {
                        actionlist = ej.buildTag('div.e-icon e-reload', '', {}, { "data-content": this._getLocalizedLabels("retryToolTip") });
                    }

                    addedlist.find(".e-action-perform").append(actionlist);

                    this._on(actionlist, "click", this._actionClick);
                }
                $(addedlist).appendTo(addedFile);
            }
            if (this.model.showFileDetails) {
                this.diaObj.open();
            }
            this._buttonText(this.model.buttonText);
            this._dialogText(this.model.dialogText);
            return addedFile;
        },

        _keydownDialogClose: function (e) {
            if (!this._currentElement.hasClass("e-disable")) {
                if (e.keyCode == 13) this._dialogclose();
            }
        },

        _pushFileDetails: function (files) {
            var fileListDetails, addedFile, actionlist, i, action, me, diaObj, addedlist, addedheading, addname, addsize, addstatus, addaction, addedfilename, addedfilestatus, addedfilesize, addedfileaction, filedialog, DialogContentContainer, dialogActions, fileListActions;
            addedheading = $("<div class='e-head-content'></div>");
            addname = $("<div class='e-file-head e-head-name'>" + this._getLocalizedLabels("name") + "</div>");
            addsize = $("<div class='e-file-head e-head-size'>" + this._getLocalizedLabels("size") + "</div>");
            addstatus = $("</div><div class='e-file-head e-head-status'>" + this._getLocalizedLabels("status") + "</div>");
            if (this.model.customFileDetails.name) $(addname).appendTo(addedheading);
            if (this.model.customFileDetails.size) $(addsize).appendTo(addedheading);
            if (this.model.customFileDetails.status) $(addstatus).appendTo(addedheading);
            me = this;
            filedialog = this.updialog;
            if (filedialog && filedialog.length != 0) {
                if (this.model.showFileDetails) {
				    this.control.id!="" ?  DialogContentContainer  : DialogContentContainer = this.element;
                    if (this.updialog) this.updialog.find(".e-uploadbtn").removeAttr('disabled').removeClass('e-disable');
                    me.diaObj.open();
                }
            } else {
                this.updialog = ej.buildTag('div.e-uploaddialog#' + this.element[0].id + '_dialog', "", {}, { 'title': this._getLocalizedLabels("title") });
                if (this.model.allowDragAndDrop && !this.model.showBrowseButton) {
                    this.dragWrapper.append(this.updialog);
                    DialogContentContainer = "#" + this.control.id + '_dragWrapper';
                }
                else {
                    this.element.append(this.updialog);
                    this.control.id!="" ?  DialogContentContainer = "#" + this.control.id : DialogContentContainer = this.element;
                }
            }
            var fileListDetails, addedFile;
            fileListDetails = this.updialog.find(".e-ul");
            if ($(this.updialog.find(".e-head-content")))
                $(this.updialog.find(".e-head-content")).replaceWith(addedheading);
            if (fileListDetails.length == 0) {
                addedheading.appendTo(this.updialog);
                fileListDetails = ej.buildTag('ul.e-ul').appendTo(this.updialog);
			}
			if($(this.updialog).find('.e-file-upload').length>0)
				$(this.updialog).find('.e-file-upload').remove();
			fileListActions = ej.buildTag('div.e-file-upload').appendTo(this.updialog).append((this.model.autoUpload || !this.model.asyncUpload) ? $(ej.buildTag('div.e-action-container')).addClass("sync") : ej.buildTag('div.e-action-container'));
            dialogActions = ej.buildTag('button.e-uploadclosebtn e-btn e-select', this._getLocalizedLabels("cancel"), {}, { type: 'button', "data-role": "none" }).appendTo($(this.updialog).find(".e-action-container"));
            if (this.model.showRoundedCorner)
            dialogActions.addClass('e-corner');
            this._on(dialogActions, "click", this._dialogclose);            
            if (!this.model.multipleFilesSelection) {
                this.updialog.find(".e-ul>.e-upload-file").remove();
            }
            addedFile = $("<li class='e-upload-file'></li>").appendTo(fileListDetails).data("file", files);
            addedlist = $("<div class='e-file-list'></div>");
            addedfilename = $("<div class='e-file-progress e-file-view'><div class='e-file-name e-file-view'><span class='e-file-name-txt'>" + files.name + "</span></div>");
            addedfilesize = $("<div class='e-file-size e-file-view'><span class='e-file-name-txt'>" + this._formatSize(0) + "\\" + this._formatSize(files.size) + "</span></div>");
            addedfilestatus = $("<div class='e-file-percentage e-file-view'><div class='e-file-progress-bar'><div class='e-file-progress-status'></div></div></div>");
            addedfileaction = $("<div class='e-action-perform'><div class='e-icon e-file-view'></div></div></div>")
            if (this.model.customFileDetails.name) $(addedfilename).appendTo(addedlist);
            if (this.model.customFileDetails.size) $(addedfilesize).appendTo(addedlist);
            if (this.model.customFileDetails.status) $(addedfilestatus).appendTo(addedlist);
            if (this.model.customFileDetails.action) $(addedfileaction).appendTo(addedlist);
            $(addedlist).appendTo(addedFile);
            var dialogContainer = (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : DialogContentContainer;
            this.updialog.ejDialog({ showOnInit: false, closeIconTooltip: this._getLocalizedLabels("closeToolTip"), minWidth: 240, width: ($(window).width() < 750) ? 250 : this._getDialogContentWidth(), height: "auto", cssClass: "e-uploadbox " + this.model.cssClass, close: $.proxy(this._uploadFileListDelete, this), enableRTL: this.model.enableRTL, target: dialogContainer, enableResize: false, allowDraggable: this.model.dialogAction.drag, enableModal: this.model.asyncUpload ? this.model.dialogAction.modal : false, showHeader: this.model.customFileDetails.title , showRoundedCorner : this.model.showRoundedCorner })
			$(window).width() < 750 ? $(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload") : $(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
			me.diaObj = this.updialog.data("ejDialog");
			if (me.model.cssClass!="")
                me.diaObj.setModel({ cssClass: "e-uploadbox " + this.model.cssClass });
            me._dialogPosition();
            if (this.model.showFileDetails) {
                me.diaObj.open();
            }
			me.diaObj.option("close", $.proxy(this._onClose,this));
            this._buttonText(this.model.buttonText);
            this._dialogText(this.model.dialogText);
            return addedFile;
        },

		_onClose: function (e) {
			this._successFiles = [];
			this._errorFiles = [];
			this._selectedfiles = [];
			this._uploadFileListDelete();
		},
		
        _setProgress: function (filelist, percentage, e) {
            var progressbar, progress, filesize, loaded, total;
            if (this.model.customFileDetails.status) {
                progressbar = $(filelist).find(".e-file-progress-status");
                progressbar.width(percentage + "%");
            }
            if (this.model.customFileDetails.size) {
                filesize = $(filelist).find(".e-file-size .e-file-name-txt");
                loaded = this._formatSize(e.loaded);
                total = this._formatSize(e.total);
                filesize.html(loaded + "\\" + total);
            }
        },

        _setAction: function (element, action) {
            if (this.model.customFileDetails.action) {
                var actionlist;
                element.find(".e-action-perform .e-icon,.e-file-percentage .e-icon").remove().addClass(action.toString());
                if (action == "cancel") {
                    actionlist = ej.buildTag('div.e-icon e-file-cancel', '', {}, { "data-content": this._getLocalizedLabels("cancelToolTip") });
                } else if (action == "remove") {
                    actionlist = ej.buildTag('div.e-icon e-delete', '', {}, { "data-content": this._getLocalizedLabels("removeToolTip") });
                } else if (action == "retry") {
                    actionlist = ej.buildTag('div.e-icon e-reload', '', {}, { "data-content": this._getLocalizedLabels("retryToolTip") });
                }
                element.find(".e-action-perform").append(actionlist);
                this._on(actionlist, "click", this._actionClick);
            }
        },

        _setStatus: function (element, status) {
            if (this.model.customFileDetails.status) {
                var progress, upstatus = ej.buildTag('div');
                if (status == "success") {
                    element.find(".file-status").addClass("e-file-status-success").html("Completed");
                    element.find(".e-file-percentage").html("");
                    upstatus.addClass("e-icon e-checkmark").attr("data-content", this._getLocalizedLabels("completedToolTip"));
                    element.find(".e-file-percentage").append(upstatus);
                }
                if (status == "failed") {
                    element.find(".file-status").addClass("e-file-status-failed").html("Failed");
                    element.find(".e-file-percentage").html("");
                    upstatus.addClass("e-icon e-file-percentage-failed").attr("data-content", this._getLocalizedLabels("failedToolTip"));
                    element.find(".e-file-percentage").append(upstatus);
                }
                if (status == "progress") {
                    element.find(".file-status").addClass("file-status-inprogress").html("in progress");
                }
                if (status == "uploading") {
                    element.find(".file-status").addClass("file-status-inprogress").html("uploading");
                    progress = element.find(".e-file-percentage");
                    progress.html("");
                }
            }
        },
        _renderTooltip: function () {
            var proxy = this;
            if (!ej.isNullOrUndefined(this.updialog)) {
                this.upTooltip = $(this.updialog).ejTooltip({
                    target: ".e-file-cancel, .e-delete, .e-reload, .e-checkmark, .e-close, .e-file-percentage-failed",
                    content: " ",
                    isBalloon: false,
					showRoundedCorner : this.model.showRoundedCorner,
                    enableRTL: this.model.enableRTL,
                    position: {
                        target: { horizontal: "center", vertical: "bottom" },
                        stem: { horizontal: "left", vertical: "top" }
                    }
                }).data("ejTooltip");
                $(this.upTooltip.tooltip).css({ "min-width": "auto" });
            }
        },

        _createInputandBind: function () {
            var tempInput = ej.buildTag('input', '', {}, { type: 'file', "data-role": "none" });
            tempInput.attr("name", this.model.uploadName != "" ? this.model.uploadName : this.control.id).attr("autocomplete", "off").attr("class", "e-uploadinput").attr("accept",this.model.extensionsAllow);
            if (this.model.multipleFilesSelection) 
			 if (((navigator.userAgent.indexOf('Safari') != -1 )&& (navigator.userAgent.indexOf('Chrome') == -1 ))==false){
                tempInput.attr("multiple", "multiple");
            }
            tempInput.appendTo(this.element.find(".e-selectpart"));
            this.inputupload = tempInput;
            this._bindInputChangeEvent();
        },

        _showUploadButton: function () {
            var uploadbutton = this.updialog.find(".e-uploadbtn");
            if (uploadbutton.length == 0) {
                uploadbutton = ej.buildTag('button.e-uploadbtn e-btn e-select', this._getLocalizedLabels("upload"), {}, { type: "button", "data-role": "none" });
                if (this.model.showRoundedCorner)
                    uploadbutton.addClass('e-corner');
                this.updialog.find(".e-action-container").append(uploadbutton);
                this._on(uploadbutton, "click", this.__uploadButtonClick);
                this._on(uploadbutton, 'keydown', this._keydownUpload);
                $(uploadbutton).focus();
            }
            this._buttonText(this.model.buttonText);
        },

        _keydownUpload: function (e) {
            if (e.keyCode == 13) this.__uploadButtonClick(e);
        },

        _resetFileInput: function ($element) {
            var clone = $element.clone(false, false);
            this._on(clone, "change", this._inputValueChange);
            $element.replaceWith(clone);
        },

         _isAllowed: function (files) {
            var inputfield, uploadControl, args, allowExtension,allowSize,denyExtension, proxy = this, allowedFiles = [], filteredFiles = [],status=true;
            inputfield = this.element.find(".e-uploadinput");
            uploadControl = this;
			
            if (this.model.extensionsAllow != "") {
                allowExtension = this.model.extensionsAllow.replace(/\s/g, "").toLowerCase().split(",");
				
             
                $(files).each(function () {
                    if ($.inArray((this.extension).toLowerCase(), allowExtension) == -1) {

                        args = { action: "Files Processing", error:proxy._getLocalizedLabels("allowError").replace("#Extension", allowExtension.join(", ")), files: this };
                        uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
                        status = false;
                    }
                    else {
                        if (this.extension != "")
                            allowedFiles.push(this);
                    }
                });
            }

            else if (this.model.extensionsDeny != "") {
                denyExtension = this.model.extensionsDeny.replace(/\s/g, "").toLowerCase().split(",");
				
				
                $(files).each(function () {
                    if ($.inArray((this.extension).toLowerCase(), denyExtension) != -1) {

                        args = { action: "Files Processing", error: proxy._getLocalizedLabels("denyError").replace("#Extension", denyExtension.join(", ")), files: this };
                        uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
                        status = false;
                    }
                    else {
                        if (this.extension != "")
                            allowedFiles.push(this);
                    }
                });
            }
            else {
                $(files).each(function () {
                    if (this.extension != "")
                        allowedFiles.push(this);
                });
            }
            if (this.model.fileSize != "") {
                allowSize = this.model.fileSize;
                $(allowedFiles).each(function () {
                    if ((this.size > allowSize)) {
                  
                        args = { action: "Files Processing", error: proxy._getLocalizedLabels("filedetail").replace("#fileSize", allowSize), files: this };
                        uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
                        status = false;
                    }
                    else {
                        filteredFiles.push(this);
                    }
                });
            }
            else
                filteredFiles = allowedFiles;
            return { files: filteredFiles, status: status };
        },

        _fileListRemove: function () {
            var fileList = this.updialog.find(".e-upload-file .e-delete");
            if (fileList.length == 0) {
                this.updialog.find(".e-uploadbtn").attr('disabled', 'disabled').addClass('e-disable');
                this.updialog.ejDialog('close');
            }
        },

        _uploadHide: function () {
            var fileList = this.updialog.find(".e-upload-file .e-file-cancel");
            if (fileList.length == 0) {
                this.updialog.find(".e-ul").empty();
                this.updialog.find(".e-uploadbtn").attr('disabled', 'disabled').addClass('e-disable');
                this.updialog.ejDialog('close');
                this.upTooltip.hide();
            }
        },

        _onBeforeClose: function (args) {
            if (!ej.isNullOrUndefined(args.event)) if ($(args.event.currentTarget).hasClass("e-disable")) args.cancel = true;
            else args.cancel = false;
        },

        _dialogclose: function (e) {
			this._successFiles = [];
			this._errorFiles = [];
			this._selectedfiles = [];
            if (!this._currentElement.hasClass("e-disable")) {
                var closebtn = this.updialog.find(".e-uploadclosebtn");
                if (closebtn.hasClass("e-disable")) e.preventDefault();
                else {
                    this._uploadFileListDelete();
                    this.updialog.ejDialog('close');
                }
            }
        },

        _uploadFileListDelete: function () {
            var file, fileItem;
            fileItem = this.updialog.find(".e-ul").children().first();
            file = $(fileItem).data("file");
            this._trigger("cancel", { fileStatus: file });
            this.updialog.find(".e-ul").empty();
			this._currentElement.find(".e-uploadinput").val("");
            this._resetFileInput(this._currentElement.find(".e-uploadinput"));
            if (!this.model.asyncUpload)
                this._formResetSyncUpload();
        },

        _onXhrSelect: function (e) {
            var files, xhrUpload, addedFile;
            this._xhrBeforeUpload(this._files);
            xhrUpload = this;
            $.each(xhrUpload._files, function (i, fileItem) {
                addedFile = $(fileItem).data("filelist");
                xhrUpload._setAction(addedFile, "cancel"); // XhrUpload._Uploader._setAction(addedFile, "cancel");
                if (xhrUpload.model.autoUpload) {
                    xhrUpload._xhrPerformUpload(fileItem);
                } else {
                    xhrUpload._showUploadButton();
                }
            });
        },

        _xhrBeforeUpload: function (files) {
            var fileEntry, xhrUpload, formdata, addedFile;
            fileEntry = files;
            xhrUpload = this;
            $.each(fileEntry, function (i, fileItem) {
                formdata = xhrUpload._createFormObjectXhr(fileItem);
                $(fileItem).data("formobject", formdata);
                addedFile = xhrUpload._pushFileDetails(fileItem);
                $(fileItem).data("filelist", addedFile);
            });

            return fileEntry;
        },

        _xhrPerformUpload: function (fileItem) {
            var isPrevented, url, xhrUpload, formdata, xhr, args;
            xhr = new XMLHttpRequest();
            xhrUpload = this;
            args = { files: fileItem };
            if (this._trigger('begin', args)) {
                $(fileItem).data("xhr", xhr);
                xhrUpload._onRequestError(xhrUpload, undefined, fileItem);
                return;
            }
            url = this.model.saveUrl;
            formdata = $(fileItem).data("formobject");

            formdata.append(((this.model.uploadName && this.model.uploadName!="")? this.model.uploadName:this.control.id)+"_data", JSON.stringify(args.data));
            $(fileItem).data("xhr", xhr);
            xhr.addEventListener("load", function (e) {
                xhrUpload._onRequestSuccess(xhrUpload, e, fileItem);
            }, false);
            xhr.addEventListener("error", function (e) {
                xhrUpload._onRequestError(xhrUpload, e, fileItem);
            }, false);
            xhr.upload.addEventListener("progress", function (e) {
                xhrUpload._onRequestProgress(xhrUpload, e, fileItem);
            }, false);
            xhr.open("POST", url);
			args = { files: fileItem, xhr: xhr };
			if (this._trigger('beforeSend', args)) {
               $(fileItem).data("xhr", xhr);
               xhrUpload._onRequestError(xhrUpload, undefined, fileItem);
               return;
            }
            xhr.send(formdata);
        },

        _xhrOnUploadButtonClick: function (e) {
            var xhrUpload, fileEntry, started, fileCount;
            xhrUpload = this.model.showBrowseButton ? this.diaObj.wrapper : this.dragWrapper;
            fileCount = xhrUpload.find(".e-ul li.e-upload-file");
            for (var i = 0; i < fileCount.length; i++) {
                fileEntry = $(this);
                started = this._isFileUpload(fileCount[i]);
                if (started) {
                    this._xhrPerformUpload($(fileCount[i]).data("file"));
                }
            }
        },

        _xhrOnRemove: function (e, fileItem) {
            var filename = $(fileItem).find(".e-file-name").text().toString().split(","), proxy = this;
            $.ajax({
                url: this.model.removeUrl,
                type: "POST",
                data: "fileNames=" + filename,
                success: function () {
                    $(fileItem).remove();
                    proxy._fileListRemove();
                    proxy._trigger("remove", { fileStatus: proxy._file });

                }
            });
			this.upTooltip.hide();
        },

        _xhrOnCancel: function (e, fileItem) {
            var file, xhr;
            file = $(fileItem).data("file");
            xhr = $(file).data("xhr");
            if (xhr) {
                $(file).data("xhr").abort();
            }
            $(file).data("xhr", null);
            $(fileItem).data("file", null);
            $(fileItem).remove();
            this._uploadHide();
        },

        _xhrOnRetry: function (e, fileItem) {
            if (!this._currentElement.hasClass("e-disable")) {
                var file = $(fileItem).data("file");
                this._xhrPerformUpload(file);
            }
        },

        _onRequestSuccess: function (xhrUpload, e, fileEntry) {
            var xhr = $(fileEntry).data("xhr");
            if (xhr.status >= 200 && xhr.status <= 299) {
                xhrUpload._onXhrUploadSuccess(xhrUpload, e, fileEntry);
            }
            else {
                xhrUpload._onRequestError(xhrUpload, e, fileEntry);
            }
			if (xhrUpload._selectedfiles.length == (this._successFiles.length + this._errorFiles.length)) {
                xhrUpload._trigger('complete', { files: fileEntry, responseText: xhr.responseText,success: this._successFiles,error: this._errorFiles, xhr: xhr, e: e });
                this._onClearCompletedFiles();
            }
        },
		
		_onClearCompletedFiles: function(){
			this._successFiles = [];
			this._errorFiles = [];
			this._selectedfiles = [];
            if (this.model.dialogAction.closeOnComplete) this._dialogclose()
		},

        _onXhrUploadSuccess: function (xhrUpload, e, fileEntry) {
            var addedFile, xhr, progressbar, size, fSize, filesize, args;
            addedFile = $(fileEntry).data("filelist");
            xhr = $(fileEntry).data("xhr");
            if (xhrUpload.model.removeUrl) {
                xhrUpload._setAction(addedFile, "remove");
                xhrUpload._setStatus(addedFile, "success");
            } else {
                addedFile.find(".e-action-perform .e-icon,.e-file-percentage .e-icon").remove();
                xhrUpload._setStatus(addedFile, "success");
            }
            if ($(fileEntry).length > 0) {
                progressbar = $(addedFile).find(".e-file-progress-status");
                progressbar.width("100%");
                size = $(fileEntry)[0].size;
                fSize = this._formatSize(size);
                filesize = $(addedFile).find(".e-file-size .e-file-name-txt");
                filesize.html(fSize + "\\" + fSize);
            }
            args = { files: fileEntry,responseText: xhr.responseText, xhr: xhr, e: e };
            this.updialog.find(".e-file-upload .e-uploadclosebtn").html(this.model.buttonText.close).focus();
            xhrUpload._trigger('success', args);
            this._successFiles.push(fileEntry);
        },

        _onRequestError: function (xhrUpload, e, fileEntry) {
            var addedFile, xhr, args;
            addedFile = $(fileEntry).data("filelist");
            xhr = $(fileEntry).data("xhr");
            xhrUpload._setAction(addedFile, "retry");
            xhrUpload._setStatus(addedFile, "failed");
            args = { action: "File Processing", error: xhr.status? xhr.status+" " + xhr.statusText:"Unable to reach the server.", files: fileEntry, xhr: xhr, e: e };
            xhrUpload._trigger('error', args);
			this._errorFiles.push(fileEntry);
        },

        _onRequestProgress: function (xhrUpload, e, fileEntry) {
            var percentage, addedFile,args;
            percentage = Math.round(e.loaded * 100 / e.total);
            addedFile = $(fileEntry).data("filelist");
            xhrUpload._setProgress(addedFile, percentage, e);
            xhrUpload._setStatus(addedFile, "progress");
            args = { file: fileEntry, percentage: percentage, e: e };
            this._trigger('inProgress', args);
        },

        _createFormObjectXhr: function (file) {
            var formData = new FormData();
            formData.append(this.model.uploadName != "" ? this.model.uploadName : this.control.id, file.rawFile);
            return formData;
        },

        _getInputFileInfo: function ($input) {
            var input = $input[0];
            if (input.files) {
                return this._getAllFileInfo(input.files);
            } else {
                return [{
                    name: this._GetName(input.value),
                    extension: this._getFileExtensionType(input.value),
                    size: this._getFileSizeinIE(input.value)
                }];
            }
        },

        _getFileSizeinIE: function (fileName) {
            var actievXObj, fileSize;
            actievXObj = null;
            fileSize = null;
            try {
                actievXObj = new ActiveXObject("Scripting.FileSystemObject");
            } catch (e) {
                fileSize = null;
            }
            if (actievXObj) {
                fileSize = actievXObj.getFile(fileName).size;
            }
            return fileSize;
        },

        _getFileExtensionType: function (fileName) {
            return fileName.match ? (fileName.match(/\.([^\.]+)$/) ? fileName.match(/\.([^\.]+)$/)[0] : "" || "") : "";
        },

        _getAllFileInfo: function (rawFiles) {
            var tempProxy = this;
            return $.map(rawFiles, function (file) {
                return tempProxy._getFileInfo(file || rawFiles);
            });
        },

        _GetName: function (fullname) {
            var nameIndex = fullname.lastIndexOf("\\");
            return (nameIndex != -1) ? fullname.substr(nameIndex + 1) : fullname;
        },

        _getFileInfo: function (rawFile) {
            // Older Firefox versions (before 3.6) use fileName and fileSize
            var fileName = rawFile.name || rawFile.fileName || rawFile;
            return {
                name: fileName,
                extension: this._getFileExtensionType(fileName),
                size: rawFile.size || rawFile.fileSize,
                rawFile: rawFile
            };
        },

        _formatSize: function (bytes) {
            var i = -1;
            if (!bytes)
                return "0.0KB";
            do {
                bytes = bytes / 1024;
                i++;
            } while (bytes > 99);
            return Math.max(bytes, 0).toFixed(1) + ['KB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];
        },

        _onSelectIFrame: function (e) {
            var input, files, addedFile, uploadframe;
            input = $(e.target);
            files = this._getInputFileInfo(input);
            addedFile = this._beforeUploadIFrame(files);
            uploadframe = addedFile.data("iframe");
            if (this.model.autoUpload) {
                this._performUploadIFrame(addedFile);
            } else {
                this._showUploadButton();
            }
            this._off(this.inputupload, "change");
            this._bindInputChangeEvent();
        },

        _onRemoveIFrame: function (e, fileItem) {
            var iframe, fileNames, proxy, fileDetails;
            iframe = fileItem.data("iframe");
            fileDetails = $(fileItem).data("file");
            fileNames = fileDetails[0].name;
            proxy = this;
            if (iframe) {
                this._removeFileEntry(fileItem);
                if (this.model.removeUrl) {
                    $.ajax({
                        url: this.model.removeUrl,
                        type: "POST",
                        data: "fileNames=" + fileNames,
                        success: function () {
                            proxy._fileListRemove();
                            proxy._trigger("remove", { fileStatus: proxy._file });
                        }
                    });
                }
            } else {
                this._removeFileEntry(fileItem);
                this._trigger("remove", { fileStatus: this._file });
            }
        },

        _onCancelIFrame: function (e, fileItem) {
            var iframe;
            this._trigger('cancel', { Status: fileItem });
            iframe = fileItem.data("iframe");
            if (iframe) {
                this._removeFileEntry(fileItem);
                if (typeof (iframe.stop) != "undefined") {
                    iframe.stop();
                } else if (iframe.document) {
                    iframe.document.execCommand("Stop");
                    iframe.contentWindow.location.href = iframe.contentWindow.location.href;
                }
                this._processServerResponse(iframe, "");
            }
            this._uploadHide();
        },

        _onRetryIFrame: function (e, fileItem) {
            this._performUploadIFrame(fileItem);
        },

        _beforeUploadIFrame: function (files) {
            var uploadframe, uploadform, addedfile;
            //creating iframe and adding it to the upload div block.
            uploadframe = this._createFrame(this.control.id + "_Iframe" + this.Uploadframes.length);
            this.Uploadframes.push(uploadframe);
            uploadform = this._createForm(this.model.saveUrl, uploadframe[0].id);
            this._currentElement.find("input.e-uploadinput").removeClass("e-uploadinput").css("display", "none").appendTo(uploadform);
            this._createInputandBind();
            addedfile = this._pushFile(files, { "iframe": uploadframe, "form": uploadform, "file": files });
            uploadframe.data({ "filelist": addedfile });
            this._setAction(addedfile, "cancel");
            return addedfile;
        },

        _performUploadIFrame: function (addedFile) {
            var isPrevented, files, uploadframe, uploadform, args;
            args = { files: addedFile };
            if (this._trigger('begin', args)) {
                this._failureIframeUpload(addedFile, "File upload has been denied");
                return;
            }
            files = addedFile.data("file");
            this._setStatus(addedFile, "uploading");
            uploadframe = addedFile.data("iframe");
            uploadform = addedFile.data("form");
            var hiddendata = $("<input>").attr("name", ((this.model.uploadName && this.model.uploadName!="")? this.model.uploadName:this.control.id)+"_data").attr('type', 'hidden').val(JSON.stringify(args.data));
            uploadform.append(hiddendata);
            uploadframe.appendTo(document.body);
            uploadform.appendTo(document.body);
            //error here calls the upload even if the url is wrong
            this._on(uploadframe, "load", this._removeFramesIFrame);
            uploadform.submit();
        },

        _onUploadButtonClickIFrame: function (e) {
            var iframeUpload, fileEntry, started;
            iframeUpload = this;
            $(".e-ul li.e-upload-file", iframeUpload.updialog).each(function () {
                fileEntry = $(this);
                started = iframeUpload._isFileUpload(fileEntry);
                if (started) {
                    iframeUpload._performUploadIFrame(fileEntry);
                }
            });
        },

        _removeFramesIFrame: function (e) {
            var uploadframe, response, filelist, fileEntry, args;
            uploadframe = $(e.target);
			fileEntry = this._files;
            filelist = uploadframe.data("filelist");
            try {
                response = $.trim(e.target.contentDocument.body.innerText.replace(/\n|\r/g, ' '));
            } catch (e) {
                response = "Server Error trying to get server response: " + e;
            }
            if (response.substring(0, 12) != "Server Error" && response.indexOf("HTTP Error") != 0) {
                this._processServerResponse(uploadframe, response);
                this._setIframeProgress(filelist, 100, e);
                this._setStatus(filelist, "progress");
                this._successIframeUpload(filelist, response);
            }
            else { this._failureIframeUpload(filelist, response); }
			if (filelist.length == (this._successFiles.length + this._errorFiles.length)) {
                this._trigger('complete', { files: fileEntry, responseText: response, success: this._successFiles, error: this._errorFiles });
                this._onClearCompletedFiles();
            }		
        },


        _setIframeProgress: function (filelist, percentage, e) {
            var progressbar, progress, filesize, loaded, total;
            progressbar = $(filelist).find(".e-file-progress-status");
            progressbar.width(percentage + "%");
        },

        _successIframeUpload: function (filelist, response) {
            var fileEntry = filelist.data("file");
            if (this.model.removeUrl) {
                this._setAction(filelist, "remove");
                this._setStatus(filelist, "success");
            } else {
                filelist.find(".file-action").remove();
                this._setStatus(filelist, "success");
            }
            var args = { files: fileEntry, responseText: response };
            this.updialog.find(".e-file-upload .e-uploadclosebtn").html(this.model.buttonText.close).focus();
            this._trigger('success', args);
            this._successFiles.push(fileEntry);
        },

        _failureIframeUpload: function (filelist, response) {
            var fileEntry = filelist.data("file");
            if (this.model.saveUrl && response != "File upload has been denied") {
                this._setAction(filelist, "retry");
                this._setStatus(filelist, "failed");
            } else {
                filelist.find(".file-action").remove();
                this._setStatus(filelist, "failed");
            }
            if (response.indexOf("HTTP Error") == 0)
                var args = { files: fileEntry, responseText: response, status: response.match(/\d+/).toString() };
            else
                args = { files: fileEntry, responseText: response };
            this._trigger('error', args);
			this._errorFiles.push(fileEntry);
        },

        _processServerResponse: function (uploadframe) {
            var uploadform;
            uploadform = $(document.body).find("form[target='" + $(uploadframe).attr("id") + "']");
            setTimeout(function () {
                uploadform.remove();
                uploadframe.remove();
            }, 0);
        },

        _createDivBlock: function (className) {
            return ej.buildTag('div.' + className);
        },

        _createForm: function (action, target) {
            return ej.buildTag('form', '', {}, { enctype: 'multipart/form-data', method: 'POST', action: action, target: target });
        },

        _createFrame: function (id) {
            return ej.buildTag('iframe#' + id, '', { display: 'none' }, { name: id });
        },

        _createInput: function (id) {
            return ej.buildTag('input', '', {}, { type: 'file', name: id, "data-role": "none" });
        },



        _initObjectsSyncUpload: function () {
            this._currentElement.closest("form")
                    .attr("enctype", "multipart/form-data")
                    .attr("encoding", "multipart/form-data");
            this._wireEventsSyncUpload();
        },

        _wireEventsSyncUpload: function () {
            var closestform = this._currentElement.closest("form")[0];
            this._on($(closestform), "submit", this._formSubmitSyncUpload);
            this._on($(closestform), "reset", this._formResetSyncUpload);
        },

        _onSelectSyncUpload: function (e) {
            var input, files, selection, addedfile;
            input = $(e.target);
            selection = $(".e-selectpart", this.control);
            this._currentElement.find("input.e-uploadinput").removeClass("e-uploadinput").css("display", "none").appendTo(selection);
            this._createInputandBind();
            addedfile = this._pushFile(this._files, { "file": this._files, "Input": input });
        },

        _onCancelSyncUpload: function (e, fileItem) {
            var inputfield = fileItem.data("Input");
            fileItem.data("file", null);
            fileItem.data("Input", null);
            fileItem.remove();
            inputfield.remove();
            this._uploadHide();
        },

        _formSubmitSyncUpload: function (e) {
            var input, uploader;
            input = $(".e-uploadinput", this.control);
            input.attr("name", "");
            uploader = this.model.uploadName != "" ? this.model.uploadName : this.control.id;
            setTimeout(function () {
                input.attr("name", uploader);
            }, 0);
        },

        _formResetSyncUpload: function (e) {
            $(".e-selectpart", this.control).children('input[type="file"]').each(function () {
                if (!$(this).hasClass('e-uploadinput')) {
                    $(this).remove();
                }
            });
        }
        /*Sync End*/
    });
	ej.Uploadbox.Locale = ej.Uploadbox.Locale || {} ;
    
    ej.Uploadbox.Locale['default'] = ej.Uploadbox.Locale["en-US"] = {
        buttonText: {
            upload: "Upload",
            browse: "Browse",
            cancel: "Cancel",
            close: "Close"
        },
        dialogText: {
            title: "Upload Box",
            name: "Name",
            size: "Size",
            status: "Status"
        },
		dropAreaText: "Drop files or click to upload",
        filedetail: "The selected file size is too large.  Please select a file within #fileSize",
        denyError: "Files with #Extension extensions are not allowed.",
        allowError: "Only files with #Extension extensions are allowed.",
        cancelToolTip: "Cancel",
        removeToolTip: "Remove",
        retryToolTip: "Retry",
        completedToolTip: "Completed",
        failedToolTip: "Failed",
        closeToolTip: "Close"
    };
})(jQuery, Syncfusion);
;
/**
* @fileOverview Plugin provides support to display color picker within your web page and allows to pick the color.
* @copyright Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws.
* @version 12.1
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejColorPicker", "ej.ColorPicker", {
        _rootCSS: "e-colorpicker",

        element: null,

        model: null,
        validTags: ["input", "div"],
        _addToPersist: ["value", "opacityValue"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },


        defaults: {

            enableOpacity: true,

            opacityValue: 100,

            columns: 10,

            palette: "basicpalette",

            htmlAttributes: {},

            buttonMode: "split",

            custom: [],

            presetType: "basic",

            modelType: "picker",

            locale: "en-US",

            showPreview: true,

            showTooltip: false,

            showClearButton: false,

            showSwitcher: true,

            value: null,

            displayInline: false,

            buttonText: {
                apply: "Apply",
                cancel: "Cancel",
                swatches: "Swatches"
            },

            tooltipText: {
                switcher: "Switcher",
                addButton: "Add Color",
                basic: "Basic",
                monoChrome: "Mono Chrome",
                flatColors: "Flat Colors",
                seaWolf: "Sea Wolf",
                webColors: "Web Colors",
                sandy: "Sandy",
                pinkShades: "Pink Shades",
                misty: "Misty",
                citrus: "Citrus",
                vintage: "Vintage",
                moonLight: "Moon Light",
                candyCrush: "Candy Crush",
                currentColor: "Current Color",
                selectedColor: "Selected Color",
            },

            showApplyCancel: true,

            showRecentColors: false,

            toolIcon: null,

            cssClass: "",

            enabled: true,

            change: null,

            select: null,

            open: null,

            close: null,

            create: null,

            destroy: null,
        },
        dataTypes: {
            modelType: "enum",
            palette: "enum",
            presetType: "enum",
            cssClass: "string",
            displayInline: "boolean",
            locale: "string",
            showSwitcher: "boolean",
            showRecentColors: "boolean",
            enabled: "boolean",
            showPreview: "boolean",
            enableOpacity: "boolean",
            buttonText: "data",
            custom: "array",
            htmlAttributs: "data"
        },

        observables: ["value", "opacityValue"],
        value: ej.util.valueFunction("value"),
        opacityValue: ej.util.valueFunction("opacityValue"),

        _setModel: function (jsondata) {
            for (var key in jsondata) {
                switch (key) {
                    case "enableOpacity":
                        this.model.enableOpacity = jsondata[key];
                        if (this.popupContainer) {
                            this._previewSlider(this.model.enableOpacity);
                            this._valueOperation();
                        }
                        break;
                    case "opacityValue":
                        if (this.model.enableOpacity) {
                            this.model.opacityValue = jsondata[key];
                            this._tempOpacity = parseFloat(ej.util.getVal(jsondata[key]));
                            if (this.popupContainer) {
                                this._tempOpacity = parseFloat(ej.util.getVal(jsondata[key]));
                                this._opacity.option('value', this._tempOpacity);
                                !this._switch && this._changeOpacity();
                                this._updateValue();
                                this.opacityValue(this._tempOpacity);
                                typeof jsondata[key] == "function" ? jsondata[key](this.opacityValue()) : jsondata[key] = this.opacityValue();
                            }
                            break;
                        } else return false;
                    case "custom":
                        this.model.custom = jsondata[key];
                        this._reInitialize();
                        break;
                    case "palette":
                        this.model.palette = jsondata[key];
                        this._reInitialize();
                        break;
                    case "columns":
                        this.model.columns = parseFloat(jsondata[key]);
                        this._reInitialize();
                        jsondata[key] = this.model.columns;
                        break;
                    case "presetType":
                        this.model.presetType = jsondata[key];
                        if (ej.isNullOrUndefined(Colors[this.model.presetType])) return false;
                        else
                            this._reInitialize();
                        break;
                    case "buttonMode":
                        this._unBindIconClick();
                        this._buttonElement = ej.ColorPicker.ButtonMode.Split == jsondata[key] ? this.dropdownbutton : this.wrapper;
                        ej.ColorPicker.ButtonMode.Split == jsondata[key] ? this.wrapper.addClass("e-split") : this.wrapper.removeClass("e-split");
                        this._bindIconClick();
                        break;
                    case "showTooltip":
                        this.model.showTooltip = jsondata[key];
                        if (this.popupContainer) {
                            this._colorSlider.option('showTooltip', jsondata[key]);
                            this._opacity.option('showTooltip', jsondata[key]);
                        }
                        break;
                    case "value":
                        this._setValue(ej.util.getVal(jsondata[key]), true);
                        if (typeof jsondata[key] == "function")
                            jsondata[key](this.value());
                        else
                            jsondata[key] = this.value();
                        break;
                    case "modelType":
                        this.model.modelType = jsondata[key];
                        this._reInitialize();
                        break;
                    case "showSwitcher":
                        this.model.showSwitcher = jsondata[key];
                        if (this.popupContainer) {
                            this._showSwitcher();
                        }
                        break;
                    case "tooltipText":
                        this.model.tooltipText = jsondata[key];
                        if (this.popupContainer) {
                            this._toolTipText(jsondata[key]);
                        }
                        break;
                    case "locale": 
                        this.model.locale = jsondata[key];
                        if (this.popupContainer) {
                            this._localize(jsondata[key]);
                        }
                        break;
                    case "showPreview":
                        this.model.showPreview = jsondata[key];
                        if (this.popupContainer) {
                            this._previewPane(this.model.showPreview);
                        }
                        break;
                    case "buttonText":
                        this._setButtonText = true;
                        this.model.buttonText = jsondata[key];
                        if (this.popupContainer) {
                            this._buttonText(this.model.buttonText);
                        }
                        break;
                    case "displayInline":
                        this.model.displayInline = jsondata[key];
                        this._setDisplayInline(jsondata[key]);
                        break;
                    case "cssClass":
                        this._setSkin(jsondata[key]);
                        this.model.cssClass = jsondata[key];
                        break;
                    case "enabled":
                        this._enabled(jsondata[key]);
                        break;
                    case "showRecentColors":
                        this.model.showRecentColors = jsondata[key];
                        if (this.popupContainer) {
                            this._previewColor(this.model.showRecentColors);
                        }
                        break;
                    case "htmlAttributes":
                        this.model.htmlAttributes = jsondata[key];
                        this._addAttr(this.model.htmlAttributes);
                        break;
                    case "showClearButton":
                        this.model.showClearButton = jsondata[key];
                        if(this.popupContainer){
                            this._showClearIcon(jsondata[key]);
                        }
                    break;
                    case "showApplyCancel":
                        this.model.showApplyCancel = jsondata[key];
                        if (this.popupContainer) {
                            this._buttonContainer();
                        }
                    break;
                }
            }
        },


        _setSkin: function (className) {
            if (this.wrapper)
                this.wrapper.removeClass(this.model.cssClass).addClass(className);
            else
                this.element.removeClass(this.model.cssClass).addClass(className);
        },
        _showSwitcher: function () {
            if (this.model.showSwitcher) {
                this._changeTag.removeClass('e-hide');
                this.model.modelType == "picker" ? this._switcher.addClass('e-paletteModel').removeClass('e-pickerModel') : this._switcher.addClass('e-pickerModel').removeClass('e-paletteModel');
            }
            else
                this._changeTag.addClass('e-hide');
        },
        _pickerType: function () {
            this._modelType = "picker";
            this.PaletteWrapper.removeAttr('style');
            this.PaletteWrapper.addClass('e-hide');
            this._gradient.removeClass('e-hide');
            this._gradient.fadeIn(200);
            this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            this._switcher.removeAttr('class');
            this._switcher.addClass('e-color-image e-paletteModel');
            this._switch = true;
            this._rgbValue();
            this._hueGradient();
            this._updateUI();
            this._alphaGradient(this.RGBToHEX(this.rgb));
            this._hsva.ejButton("enable");
            this._switchEvents();
            this._unSwitchEvents();
            this._hideUnBindEvents();
            this.isPopupOpen && this._showBindEvents();
            this.model.modelType == "default" ? this._changeTag.removeClass('e-hide') : this._changeTag.addClass('e-hide');
            this.popupList.prepend(this._gradient);
            this._showSwitcher();
        },
        _paletteType: function () {
            this._gradient.removeAttr('style');
            this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
            this.PaletteWrapper.removeClass('e-hide');
            this.PaletteWrapper.fadeIn(200);
            this._switch = false;
            this._disableHSVButton();
            this._cellSelect();
            this._switchEvents();
            this._unSwitchEvents();
            this._splitObj.option('prefixIcon', 'e-icon e-color-image e-' + this.model.presetType);
            this.popupList.prepend(this.PaletteWrapper);
            this._showSwitcher();
        },
        _reInitialize: function () {
            this._destroyPalette(false);
        },
        _destroyPalette: function (presets) {
            this.PaletteWrapper.remove();
            if (presets || this._columns != this.model.columns && this.model.palette !== "custompalette") this.PaletteWrapper = this._presetType(this._presetsId);
            if (this._temp !== this.model.presetType) this.PaletteWrapper = this._layoutType(this.model.palette);
            if (this.model.modelType == "palette") {
                this._modelType = "palette";
                this.PaletteWrapper = this._layoutType(this.model.palette);
                this._hideUnBindEvents();
                this.isPopupOpen && this._showBindEvents();
                this._gradient.addClass('e-hide');
                this._paletteType();
                presets || this.model.palette == "custompalette" ? "" : this._splitObj.option('prefixIcon', 'e-icon e-color-image e-' + this.model.presetType);
            }
            if (this.model.modelType == "picker") {
                this._pickerType();
                if (this.model.displayInline && !this.element.is('input'))
                    this._footer.addClass('e-hide');
            }
            this._temp = this.model.presetType; this._columns = this.model.columns;
            if (this._modelType == "picker")
                this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            else
                this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
            this.refresh();
        },
        _previewColor: function (color) {
            if (color) {
                this._swatchesArea.css('display', 'block');
                this._bindRecentEvent();
            }
            else {
                this._swatchesArea.css('display', 'none');
                this._unBindRecentEvent();
            }
        },
        _buttonText: function (data) {
            if (!this._setButtonText) {
                $.extend(this.model.buttonText, data);
            } else {
                this._setButtonText = false;
            }
            if (!ej.isNullOrUndefined(this._buttonTag)) this._buttonTag.html(this.model.buttonText.apply);
            if (!ej.isNullOrUndefined(this._cancelTag)) this._cancelTag.html(this.model.buttonText.cancel);
            this._spnTag.html(this.model.buttonText.swatches);
        },
        _toolTipText: function (data) {
            $.extend(this.model.tooltipText, data);
            this._addTitleText();
        },
        _previewPane: function (showPreview) {
            showPreview ? this._previewTag.removeClass("e-hide") : this._previewTag.addClass("e-hide");
        },
        _previewSlider: function (slider) {
            slider ? this._opacity.enable() : this._opacity.disable();
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },
        _localize: function () {
            this._localizedLabels = this._getLocalizedLabels();
            if (this._options.locale == "en-US" && !ej.isNullOrUndefined(this._options.buttonText) || !ej.isNullOrUndefined(this._options.tooltipText)) {
                if (!ej.isNullOrUndefined(this._options.buttonText))
                    this._buttonText(this._options.buttonText);
                if (!ej.isNullOrUndefined(this._options.tooltipText))
                    this._toolTipText(this._options.tooltipText);
            }
            else if (!ej.isNullOrUndefined(this._localizedLabels)) {
                if (!ej.isNullOrUndefined(this._localizedLabels.buttonText))
                    this._buttonText(this._localizedLabels.buttonText)
                if (!ej.isNullOrUndefined(this._localizedLabels.tooltipText))
                    this._toolTipText(this._localizedLabels.tooltipText)
            }
        },
        _destroy: function () {
            if (this.model.displayInline)
                $(window).off("resize", $.proxy(this._OnWindowResize, this));
            if (this.isPopupOpen) this.hide();
            this.popupContainer && this.popupContainer.remove();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
                this._presetContainer && this._presetContainer.parent('.e-menu-wrap').remove();
            }
            this.element.removeClass('e-colorpicker e-input e-widget').removeAttr("style name").val(this.element.attr("value"));
        },
        _init: function (options) {
            this._options = options;
            this._browser = ej.browserInfo();
            this._isFocused = false;
            this.isPopupOpen = false;
            this._dataBind = false;
            this._modelType = "picker";
            if (this._id)
                $("#" + this._id + "_popup").remove();
            if ("#" + this._id + "_Presets")
                $('#' + this._id + "_Presets").parent('.e-menu-wrap').remove();
            this.model.palette === "basicpalette" ? this._presetsId = "e-presets30" : "";
            this._tempOpacity = this.opacityValue();
            this._renderControl();
            if (ej.isNullOrUndefined(this.value()) && this.element[0].value !== "") this._tempValue = this.element[0].value;
            else this._tempValue = this.value();
            this._previousValue = this._previousColor = this._tempValue;
            if (this._tempValue) {
                this._setValue(this._tempValue);
            }
            this._columns = this.model.columns;
            this._temp = this.model.presetType;
            if (!this._tempValue) {
                this._previousValue = "";
            }
            !this.model.enabled && this._enabled(this.model.enabled);
        },

        _renderPopup: function() {
            this._renderPopupPanelWrapper();
            this._selectedButton = this._groupTag.find('.e-click');
            this._buttonContainer();
            this._renderPopupElement();
            this._previewPane(this.model.showPreview);
            this._previewColor(this.model.showRecentColors);
            this._localize();
            this.popupContainer.css('display', 'none');
            $('body').append(this.popupContainer);
            this._isOpen = false;
            if (this._switch) this._previewSlider(this.model.enableOpacity);
            if (this.element.is("input")) {
                if (this.popupContainer.find('button.e-applyButton').length==0) {
                    this._buttonContainer();
                }
                this._footer.css({ "display": "block" });
                this.wrapper.removeClass("e-focus");
                this._off($(document), "mousedown", this._onDocumentClick);
            }
            this._isFocused = this.isPopupOpen = false;
            this._wirePopupEvents();
            this._switchEvents();
            this._tempOpacity = this.opacityValue();
            this.model.palette === "custompalette" && this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            this.popupContainer.find('button.e-presets').ejSplitButton({ targetID: this._presetContainer.attr('id') });
            if (this._tempValue) {
                this._setValue(this._tempValue);
                if (this._switch) this._rgbValue();
            }
            this._hsvValue();
            this._hueGradient();
            this._addTitleText();
            this._showClearIcon(this.model.showClearButton);
            if (!this._tempValue) {
                this._colorSlider.option('value', parseInt(this._hsv.h));
                this._opacity.option('value', this._tempOpacity);
                this._alphaGradient("#fff");
            }
            this._addAttr(this.model.htmlAttributes);
        },
        _renderControl: function () {
            this._createWrapper();
            this._buttonElement = ej.ColorPicker.ButtonMode.Split == this.model.buttonMode ? this.dropdownbutton : this.wrapper;
            if (this.model.buttonMode == ej.ColorPicker.ButtonMode.Split && this.element.is('input')) this.wrapper.addClass("e-split");
            this._addAttr(this.model.htmlAttributes);
            this._setDisplayInline(this.model.displayInline);
            this._wireEvents();
        },

        _createWrapper: function () {
            if (this.element.is("input")) {
                this.element.addClass('e-input e-widget');
                this.element.attr("aria-label","colorpicker");
                this.spanElement = ej.buildTag("span.e-selected-color");
                this.wrapper = ej.buildTag("span.e-colorwidget e-picker e-widget " + this.model.cssClass).attr({ 'tabindex': '0', "aria-expanded": false, "aria-haspopup": true, "aria-owns": "popup" });
                if (this._id) this.wrapper.attr('id', this._id + "Wrapper");
                this.container = ej.buildTag("span.e-in-wrap e-box e-splitarrowright");
                this.drpbtnspan = ej.buildTag("span.e-icon e-arrow-sans-down", "", {}, { "aria-label": "select" });
                this.dropdownbutton = ej.buildTag("span.e-select", "", {}, { "role": "button" }).append(this.drpbtnspan);
                this.iconWrapper = ej.buildTag("span.e-tool-icon " + this.model.toolIcon);
                this.colorContainer = ej.buildTag("span.e-color-container");
                this.colorContainer.append(this.spanElement);
                this.container.insertAfter(this.element);
                if (!ej.isNullOrUndefined(this.model.toolIcon)) {
                    this.colorContainer.prepend(this.iconWrapper);
                    this.container.addClass('e-tool');
                    this.container.append(this.colorContainer);
                }
                else
                    this.container.append(this.colorContainer);
                this.container.append(this.element, this.dropdownbutton);
                this.wrapper.insertBefore(this.container);
                this.wrapper.append(this.container);
                this.element.css("display", "none").val(this.value());
            }
            this._checkNameAttr();
        },
        _addTitleText: function () {
            this._switcher.attr('title', this.model.tooltipText.switcher);
            this._spanTag.attr('title', this.model.tooltipText.addButton);
            this._presetLi.find("#e-presets00").attr('title', this.model.tooltipText.webColors);
            this._presetLi.find("#e-presets01").attr('title', this.model.tooltipText.vintage);
            this._presetLi.find("#e-presets02").attr('title', this.model.tooltipText.seaWolf);
            this._presetLi.find("#e-presets10").attr('title', this.model.tooltipText.sandy);
            this._presetLi.find("#e-presets11").attr('title', this.model.tooltipText.pinkShades);
            this._presetLi.find("#e-presets12").attr('title', this.model.tooltipText.moonLight);
            this._presetLi.find("#e-presets20").attr('title', this.model.tooltipText.monoChrome);
            this._presetLi.find("#e-presets21").attr('title', this.model.tooltipText.misty);
            this._presetLi.find("#e-presets22").attr('title', this.model.tooltipText.flatColors);
            this._presetLi.find("#e-presets30").attr('title', this.model.tooltipText.basic);
            this._presetLi.find("#e-presets31").attr('title', this.model.tooltipText.candyCrush);
            this._presetLi.find("#e-presets32").attr('title', this.model.tooltipText.citrus);
            this._currentTag.attr('title', this.model.tooltipText.currentColor);
            this._previousTag.attr('title', this.model.tooltipText.selectedColor);
        },
        _renderPopupPanelWrapper: function () {
            this.popupContainer = ej.buildTag("div.e-colorpicker e-box e-popup e-widget " + this.model.cssClass, "", {}, { "role": "grid", "aria-readonly": "true", "tabindex": '0', "style": "visibility:hidden" });
            if (this._id) this.popupContainer.attr('id', this._id + "_popup");
            $('body').append(this.popupContainer);

            this.popupList = ej.buildTag("div.e-popupWrapper");

            this._gradient = ej.buildTag("div.e-container");

            this._colorArea = ej.buildTag("div.e-hsv-color");
            this._gradientArea = ej.buildTag("div.e-hsv-gradient")
            this._handleArea = ej.buildTag("div.e-draghandle e-color-image");
            this._browser == "msie" && this._handleArea.addClass('e-pinch');
            this._colorArea.append(this._gradientArea, this._handleArea);

            this._picker = ej.buildTag("div.e-gradient");
            this._hueSlider = ej.buildTag("div.e-widget e-hue e-state-default");
            this._alphaSlider = ej.buildTag("div.e-widget e-opacity e-state-default");
            this._picker.append(this._hueSlider, this._alphaSlider);

            this._gradient.append(this._colorArea, this._picker);

            this.popupList.append(this._gradient);


            this._footerBlock = ej.buildTag("div.e-footerContainer");

            this._templateWrapper = ej.buildTag("div.e-buttons");


            this._groupTag = ej.buildTag("div.e-grpbtn");

            this._formEle = ej.buildTag("div.e-form");
            this._rgb = ej.buildTag("button.e-rgbButton e-click", "", {}, { type: "button" });
            this._hexCode = ej.buildTag("button.e-hexButton", "", {}, { type: "button" });
            this._hsva = ej.buildTag("button.e-hsvButton", "", {}, { type: "button" });
            this._groupTag.append(this._rgb, this._hexCode, this._hsva);


            this._codeEditor = ej.buildTag("div.e-codeeditor");
            this._inputTag = ej.buildTag("input.e-color-code", "", {}, { "type": "text", 'tabindex': '0', "maxLength": "22" });
            this._codeEditor.append(this._inputTag);
            this._inputTag.attr("aria-label", "color-code");
            this._formEle.append(this._groupTag, this._codeEditor);

            this._previewTag = ej.buildTag("div.e-preview").attr({ 'tabindex': '0' });
            this._currentTag = ej.buildTag("div.e-current");
            this._previousTag = ej.buildTag("div.e-previous");
            this._previewTag.append(this._currentTag, this._previousTag);

            this._templateWrapper.append(this._formEle, this._previewTag);

            this._swatchesArea = ej.buildTag("div.e-color-labels");
            var blockCount = 11;
            this._divTag = ej.buildTag("div.e-recent-color");
            this._addTag = ej.buildTag('div.e-colorblock e-block');
            this._spanTag = ej.buildTag('div.e-color e-color-image e-add');
            this._addTag.append(this._spanTag)
            this._divTag.append(this._addTag);
            for (var count = 0; count < blockCount; count++) {
                this._liTag = ej.buildTag('div.e-colorblock e-block');
                var spanTag = ej.buildTag('div.e-color e-color-image e-empty');
                this._liTag.append(spanTag);
                this._divTag.prepend(this._liTag);
            }
            this._swatchesArea.append(this._divTag);

            this._footer = ej.buildTag('div.e-footer');
            this._swatches = ej.buildTag('div.e-element');
            this._changeTag = ej.buildTag('div.e-switcher').attr('tabindex', '0');
            this._switcher = ej.buildTag('div.e-color-image');
            this._presetTag = ej.buildTag('button.e-presets e-colorSplit');
            this._presets = ej.buildTag('div');
            this._changeTag.append(this._switcher);
            this._presetTag.append(this._presets);
            this._swatches.append(this._changeTag, this._presetTag);
            this._footer.append(this._swatches);
            this._footerBlock.append(this._templateWrapper, this._swatchesArea, this._footer);

            this.PaletteWrapper = this._layoutType(this.model.palette);
            this.popupList.append(this.PaletteWrapper, this._footerBlock);
            var oldWrapper = $("#" + this._id + "_Presets").get(0);
            if (oldWrapper) {
                if ($(oldWrapper).parent().hasClass("e-menu-wrap"))
                    $(oldWrapper).parent().remove();
                else
                    $(oldWrapper).remove();
            }
            this._presetContainer = $("<ul id='" + this._id + "_Presets' class='e-presetWrapper' style= top:87px ></ul>");
            this._presetLi = ej.buildTag('li.e-item');
            this._presetLi.append(this._renderPresets());
            this._presetContainer.append(this._presetLi);
            this.popupList.append(this._presetContainer);
            this.popupContainer.append(this.popupList);

            //IE Support
            if (this._browser.name = "msie" && (this._browser.version == "9.0" || this._browser.version == "8.0"))
                this._hueSlider.addClass('e-color-image e-filter');
            else
                this._hueSlider.addClass('e-common');
            this._width = this._gradientArea.width(); this._height = this._gradientArea.height();
        },
        _buttonContainer: function () {
            if (this.model.showApplyCancel) {
                this._buttonTag = ej.buildTag("button.e-applyButton", "", {}, { type: "button" });
                this._cancelTag = ej.buildTag("button.e-cancelButton", "", {}, { type: "button" });
                this._footer.append(this._buttonTag, this._cancelTag);
                this._applyObj = this.popupContainer.find('button.e-applyButton').ejButton({ text: this.model.buttonText.apply, type: "button", cssClass: "e-flat" }).data('ejButton');
                this._cancelObj = this.popupContainer.find('button.e-cancelButton').ejButton({ text: this.model.buttonText.cancel, type: "button", cssClass: "e-flat" }).data('ejButton');
                this._on(this._cancelTag, "click", this._hidePopup);
                this._on(this._buttonTag, "click", this._buttonClick);
            } else if (this._buttonTag !== undefined && this._cancelTag !== undefined) {
                this._buttonTag.remove();
                this._cancelTag.remove();
                this._off(this._cancelTag, "click", this._hidePopup);
                this._off(this._buttonTag, "click", this._buttonClick);
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._enabled(false);
                else proxy.wrapper.attr(key, value)
            });
        },
        _showClearIcon: function (bool) {
            if (bool) {
                this._clearIcon = ej.buildTag("div", {}, {}, { "class": "e-icon e-close_01" }).hide();
                this._codeEditor.append(this._clearIcon);
                this._on(this._clearIcon, "mousedown", this._clearColor);
                this._on(this._clearIcon, "click", this._clearColor);
            } else {
                this._clearIcon && this._clearIcon.remove();
                this._off(this._clearIcon, "mousedown", this._clearColor);
                this._off(this._clearIcon, "click", this._clearColor);
            }
        },
        _colorPresetsClick: function (e) {
            this._presetsId = e.currentTarget.id;
            if (this._presetsId === "e-presets00") this.model.presetType = "webcolors";
            else if (this._presetsId === "e-presets01") this.model.presetType = "vintage";
            else if (this._presetsId === "e-presets02") this.model.presetType = "seawolf";
            else if (this._presetsId === "e-presets10") this.model.presetType = "sandy";
            else if (this._presetsId === "e-presets11") this.model.presetType = "pinkshades";
            else if (this._presetsId === "e-presets12") this.model.presetType = "moonlight";
            else if (this._presetsId === "e-presets20") this.model.presetType = "monochrome";
            else if (this._presetsId === "e-presets21") this.model.presetType = "misty";
            else if (this._presetsId === "e-presets22") this.model.presetType = "flatcolors";
            else if (this._presetsId === "e-presets30") this.model.presetType = "basic";
            else if (this._presetsId === "e-presets31") this.model.presetType = "candycrush";
            else if (this._presetsId === "e-presets32") this.model.presetType = "citrus";
            this._splitObj.option('prefixIcon', 'e-icon e-color-image e-' + this.model.presetType);
            $("#" + this._id + "_Presets").find("li.e-preset-row").removeClass("e-presetsactive");
            $("#" + this._presetsId).addClass("e-presetsactive");
            this.PaletteWrapper.remove();
            if (this._modelType == "palette") {
                this.PaletteWrapper = this._layoutType(this.model.palette);
                this._gradient.addClass('e-hide');
                this._paletteType();
                this._switcher.addClass('e-pickerModel').removeClass('e-paletteModel');
            }
        },

        _renderPresets: function () {
            var tableDiv = ej.buildTag("div.e-presets-table");
            this._spnTag = ej.buildTag("span.e-presetHeader");
            this._spnTag.html(this.model.buttonText.swatches);
            tableDiv.append(this._spnTag);
            var color = 0, hexCode, rowDiv;
            for (var row = 0; row < 4 ; row++) {
                rowDiv = ej.buildTag("ul.e-tablerow");
                for (var col = 0; col < 3 ; col++) {
                    var tableCell = ej.buildTag("li.e-color-image e-preset-row" + "#" + "e-presets" + [row] + [col]);
                    tableCell.appendTo(rowDiv);
                }
                rowDiv.appendTo(tableDiv);
            }
            return tableDiv;
        },
        _renderPopupElement: function () {
            var proxy = this;
            this._hsv =
            {
                h: 360, s: 0, v: 100
            };
            this._rgb.ejButton({ text: "RGBA", type: "button" });
            this._hexCode.ejButton({ text: "HEX", type: "button" });
            this._hsva.ejButton({ text: "HSVA", type: "button" });
            this._splitObj = this._presetTag.ejSplitButton({ size: "normal", showRoundedCorner: true, contentType: "imageonly" }).data('ejSplitButton');
            this._splitObj.element.attr("aria-label","Presets");
            this._splitObj.dropbutton.attr("aria-label","Select");
            this._splitObj.option("beforeOpen", function (e) { proxy._bindClickOperation(e); });
            this._presetTag.parents('.e-split.e-widget').css({ "height": "27px" });
            this.model.custom.length == 0 ? this._splitObj.option('prefixIcon', "e-icon e-color-image e-" + this.model.presetType) : "";
            $("#" + this._presetsId).addClass("e-presetsactive");
            this._splitObj._getXYpos = function (e) {
                $("#" + this.model.targetID).ejMenu({ animationType: "none" });
                var btnposx, btnposy, btnpos = this.dropbutton.offset();
                btnposx = btnpos.left - this.dropbutton.prev().outerWidth() - 1;
                btnposy = (btnpos.top - $("#" + this.model.targetID).outerHeight()) - 1;
                return { x: btnposx, y: btnposy }
            }
            this._colorSlider = this._hueSlider.ejSlider({ orientation: "Vertical", showTooltip: this.model.showTooltip, minValue: 0, maxValue: 360, change: function (e) { proxy._changeHue(e); }, slide: function (e) { proxy._changeHue(e); } }).data('ejSlider');
            this._opacity = this._alphaSlider.ejSlider({ value: this.opacityValue(), showTooltip: this.model.showTooltip, orientation: "Vertical", incrementStep: 5, value: 100, change: function (e) { proxy._changeAlpha(e); }, slide: function (e) { proxy._changeAlpha(e); } }).data('ejSlider');
            if (this._browser.name = "msie" && this._browser.version == "8.0") {
                this._handleTag = ej.buildTag("div.e-handle-wrapper");
                this._handleTag.appendTo(this._opacity.element.find("a.e-handle"));
            }
            this._colorSlider.firstHandle.css({ "height": "13px", "width": "13px" });
            this._opacity.firstHandle.css({ "height": "13px", "width": "13px" });
            this.popupContainer.css({ "visibility": "visible", "display": "none" });
            if (this.model.modelType == "picker") {
                this._modelType = "picker";
                this._gradient.removeClass('e-hide');
                this.PaletteWrapper.addClass('e-hide');
                this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
                this._showSwitcher();
                this._switch = true;
            } else if (this.model.modelType == "palette") {
                this._modelType = "palette";
                this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
                this.PaletteWrapper.removeClass('e-hide');
                this._gradient.addClass('e-hide');
                this._hsva.ejButton("disable");
                this._showSwitcher();
                this._switch = false;
            }
        },
        _layoutType: function (type) {
            if (typeof type === "string" && type == "basicpalette")
                this._collection = this._paletteGenerate(Colors[this.model.presetType], this.model.columns);
            else if (typeof type === "string" && type == "custompalette" && this.model.modelType == "palette")
                this._collection = this._paletteGenerate(this.model.custom, this.model.columns);
            type == "custompalette" ? this._collection.addClass('e-custom') : "";
            return this._collection;
        },
        _presetType: function (type) {
            if (type === "e-presets00") this._collection = this._paletteGenerate(Colors.webcolors, this.model.columns);
            else if (type === "e-presets01") this._collection = this._paletteGenerate(Colors.vintage, this.model.columns);
            else if (type === "e-presets02") this._collection = this._paletteGenerate(Colors.seawolf, this.model.columns);
            else if (type === "e-presets10") this._collection = this._paletteGenerate(Colors.sandy, this.model.columns);
            else if (type === "e-presets11") this._collection = this._paletteGenerate(Colors.pinkshades, this.model.columns);
            else if (type === "e-presets12") this._collection = this._paletteGenerate(Colors.moonlight, this.model.columns);
            else if (type === "e-presets20") this._collection = this._paletteGenerate(Colors.monochrome, this.model.columns);
            else if (type === "e-presets21") this._collection = this._paletteGenerate(Colors.misty, this.model.columns);
            else if (type === "e-presets22") this._collection = this._paletteGenerate(Colors.flatcolors, this.model.columns);
            else if (type === "e-presets30") this._collection = this._paletteGenerate(Colors.basic, this.model.columns);
            else if (type === "e-presets31") this._collection = this._paletteGenerate(Colors.candycrush, this.model.columns);
            else if (type === "e-presets32") this._collection = this._paletteGenerate(Colors.citrus, this.model.columns);
            return this._collection;
        },
        _paletteGenerate: function (colors, columns) {
            var color;
            this._PresetTable = ej.buildTag("div.e-palette-color").attr({ "role": "presentation" });
            this._tag = ej.buildTag("div.e-row").attr({"role":"row"});
            for (color = 0; color < colors.length; color++) {
                if (color && color % columns == 0)
                    this._tag = ej.buildTag("div.e-row").attr({"role":"row"});
                this._td = ej.buildTag("div.e-item").attr({ 'role': 'gridcell', "aria-label": "#" + $.trim(colors[color]), "data-value": "#" + $.trim(colors[color]), "style": "background-color:" + "#" + $.trim(colors[color]) });
                this._tag.append(this._td);
                this._PresetTable.append(this._tag);
            }
            return this._PresetTable;
        },
        _checkNameAttr: function () {
            if (!this.element.attr("name")) this.element.attr({ "name": this.element[0].id });
        },
        _enabled: function (bool) {
            if (bool) this.enable();
            else {
                this.model.enabled = true;
                this.disable();
            }
        },
        _setDisplayInline: function (isDisplayInline) {
            if(!this.popupContainer && this.model.displayInline){
                this._renderPopup();
            }
            this.model.displayInline = isDisplayInline;
            if (isDisplayInline && this.element.is("input")) {
                this.popupContainer.insertAfter(this.wrapper);
                this._footer.css({ "display": "none" });
                this._setPopupPosition();
            }
            else if (isDisplayInline) {
                this.element.append(this.popupContainer);
                this.popupContainer.find('button.e-applyButton').css({ "display": "none" });
                this.popupContainer.find('button.e-cancelButton').css({ "display": "none" });
                this._footer.css({ "display": "none" });
            }
            else {
                if(this.popupContainer){
                    this.popupContainer.css('display', 'none');
                    $('body').append(this.popupContainer);
                    this._isOpen = false;
                }
                
                if (this.element.is("input")) {
                    this._bindIconClick();
                    this.wrapper.removeClass("e-focus");
                    if(this.popupContainer){
                        if (this.popupContainer.find('button.e-applyButton').length==0) {
                            this._buttonContainer();
                        }
                        this._footer.css({ "display": "block" });
                        this._off($(document), "mousedown", this._onDocumentClick);
                    }
                }
                this._isFocused = this.isPopupOpen = false;
            }
            if (isDisplayInline) {
                this.show();
                if (this.element.is("input")) this._off($(this._buttonElement), "mousedown", this._iconClick);
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            }
        },
        _bindIconClick: function () {
            var count = $._data($(this._buttonElement)[0], "events");
            if (ej.isNullOrUndefined(count) || ej.isNullOrUndefined(count.mousedown)) this._on(this._buttonElement, "mousedown", this._iconClick);
            else if (count.mousedown.length == 0) this._on(this._buttonElement, "mousedown", this._iconClick);
        },
        _unBindIconClick: function () {
            this._off(this._buttonElement, "mousedown", this._iconClick);
        },
        _setPopupPosition: function () {
            var elementObj = this.element.is('input') ? this.wrapper : this.element;
            var pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popupContainer.outerHeight(),
            popupWidth = this.popupContainer.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupContainer.outerWidth() - elementObj.outerWidth();
            if (popupWidth + elementObj.offset().left > $(window).width()) left = Math.abs(popupWidth - ($(window).width()));
            this.popupContainer.css({
                "left": left + "px",
                'position': 'absolute',
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popupContainer);
        },

        _setValue: function (value, isCode) {
            var reg = "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
            if (typeof value == "object" || (typeof value == "number") || ej.isNullOrUndefined(value.match(reg))) value = null;
            this.value(value);
            this._tempValue = value;
			if (this.rgb != undefined && this._selectedButton != undefined)
			{
				if (this._switch) this._rgbValue();
				if (value != null) this._HexToRGB(this._toHEX(value));
				this._inputTagValue(this._selectedButton);
				this._updateUI();			
				this._updatePreviewColor();
			}
            ej.isNullOrUndefined(value) ? this._setEmptyValue() : this._renderModelValue(value);
            this._changeEvent(false, isCode);
            this._selectEvent();
            this.element.is("input") && this._updateValue();
        },
        _renderModelValue: function (value) {
            var color;
            if (value && typeof value === "string") {
                color = this._HexToHSV(value);
                this._oldValue = this.rgb;
                if (this.isPopupOpen) {
                    if (this._switch) {
                        this._valueOperation();
                        this._colorSlider.option('value', parseInt(this._hsv.h));
                    }
                    this._inputTagValue(this._selectedButton);
                    if (!this._switch) {
                        this._updateUI();
                        this.element.val(this.value());
                    }
                    this._hueGradient();
                } else {
                    this.element.val(this.value());
                }
            }
        },
        setValue: function (code) {
            this._setValue(code);
        },

        enable: function () {
            if (this.model.enabled) return false;
            if (this.wrapper && this.wrapper.hasClass("e-disable")) {
                this.wrapper.removeClass("e-disable");
                this.element.prop("disabled", false);
                if (this.container.hasClass("e-disable")) this.container.removeClass('e-disable');
                if(this.popupContainer)this.popupList.removeClass('e-disable');
                this.dropdownbutton.removeClass('e-disable');
            } else if (this.model.displayInline) this.element.removeClass('e-disable');
            if(this.popupContainer){
                var temp = this._switch;
                this._switch = true;
                this._cancelObj.enable();
                this._colorSlider.enable();
                this.model.enableOpacity ? this._opacity.enable() : this._opacity.disable();
                this._splitObj.enable();
                this._applyObj.enable();
                this._switchEvents();
                this._switch = temp;
                $(this._inputTag).prop('readonly', false);
            }
            this._wireEvents();
            (this._buttonElement) && this._on(this._buttonElement, "mousedown", this._iconClick);
            this.model.enabled = true;
        },

        disable: function () {
            if (!this.model.enabled) return false;
            if (this.wrapper && !this.wrapper.hasClass("e-disable")) {
                this.wrapper.addClass("e-disable");
                this.element.attr("disabled", "disabled");
                if (!this.container.hasClass("e-disable")) this.container.addClass('e-disable');
                if(this.popupContainer)this.popupList.addClass('e-disable');
                this.dropdownbutton.addClass('e-disable');
            } else if (this.model.displayInline) this.element.addClass('e-disable');
            if(this.popupContainer){
                var temp = this._switch;
                this._switch = false;
                this._cancelObj.disable();
                this._colorSlider.disable();
                this._opacity.disable();
                this._splitObj.disable();
                this._applyObj.disable();
                this._unSwitchEvents();
                this._switch = temp;
                $(this._inputTag).attr('readonly', 'readonly');
            }
            this._unWireEvents();
            this._unBindIconClick();
            if (this.isPopupOpen && !this.model.displayInline) this.hide();
            this.model.enabled = false;
        },

        getColor: function () {
            return this.rgb;
        },

        getValue: function () {
            return this.value();
        },
        _alphaGradient: function (value) {
            var browser = ej.browserInfo();
            var value = ej.isNullOrUndefined(value) ? "#000000" : value;
            if (browser.name == "mozilla")
                this._alphaSlider.attr({ "style": "background:-moz-linear-gradient(center top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if ((browser.name == "msie") || (browser.name == "edge"))
                this._alphaSlider.attr({ "style": "background:-ms-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if (browser.name == "opera" && browser.version <= "11.61")
                this._alphaSlider.attr({ "style": "background:-o-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if (browser.name == "chrome" || browser.name == "safari" || (browser.name == "opera"))
                this._alphaSlider.attr({ "style": "background:-webkit-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            if ((browser.name == "msie") && (browser.version == "8.0" || browser.version == "9.0"))
                this._alphaSlider.attr({ "style": "progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=" + value + ", endColorstr=#ffffff)"});            
            if (browser.name == "msie" && browser.version == "8.0")
                this._handleTag.css({ "background": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
        },
        _hueGradient: function () {
            var temp = this._hsv;
            var value = { h: this._hsv.h, s: 100, v: 100 };
            this._hueSlider.children(".e-handle").css({ "background": this._formRGB(this.HSVToRGB(value)) });
            this._hsv = temp;
        },
        _updateColor: function () {
            if (this.model.displayInline || !this.model.showApplyCancel) {
                this.value(this._tempValue);
                if (this.element.is("input")) this._updateValue();
                this._trigger("select", { value: this.value() });
                this._previousColor = this._tempValue;
            }
        },
        _changeEvent: function (element, isCode) {
            if (this._change && this._previousValue !== this._tempValue) {
                this.popupContainer && this._alphaGradient(this._tempValue);
                this._previousValue = this._tempValue;
                this._trigger("change", { value: this._tempValue, changeFrom: element ? "slider" : "picker", isInteraction: !isCode });
                this._updateColor(element);
            }else{
               this.popupContainer && this._alphaGradient(this._tempValue);
            }
        },
        _selectEvent: function () {
            if (this._previousColor !== this._tempValue || this._tempOpacity !== this.opacityValue()) {
                this.value(this._tempValue);
                if (this.element.is("input")) this._updateValue();
                this.element.val(this.value());
                this._trigger("select", { value: this.value() });
                this._previousColor = this._tempValue;
            }
        },
        _changeHue: function (e) {
            this._handleArea.css("visibility", "visible");
            if (parseInt(this._hsv.h) !== parseInt(e.value) && this._switch) {
                this._hsv.h = Math.round(e.value);
                this._hueGradient();
                this._hsvValue();
                this._tempValue = this.RGBToHEX(this.rgb);
                this._changeEvent(true);
            }
        },
        _changeAlpha: function (e) {
            this._handleArea.css("visibility", "visible");
            if (this._switch) {
                this.rgb.a = e.value / 100;
                this._tempOpacity = parseInt(this.rgb.a * 100);
                this._changeOpacity(e);
            }
        },
        _changeOpacity: function (e) {
            this.rgb.a = this._tempOpacity / 100;
            if (this._browser.name = "msie" && this._browser.version == "8.0") {
                this._currentTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
                this._handleTag.css({ "background": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            }
            else {
                this._currentTag.css("background-color", this._formRGBA(this.rgb));
                this._alphaSlider.children(".e-handle").css({ "background": this._formRGBA(this.rgb) });
            }
            this._inputTagValue(this._selectedButton);
            if (this.model.displayInline) {
                this._trigger("change", { value: this._tempValue, changeFrom: "slider", isInteraction: !ej.isNullOrUndefined(e) ? e.isInteraction : false });
                (this._trigger("select", { value: this.value() }));
            }
        else this._trigger("change", { value: this._tempValue, changeFrom: "slider", isInteraction: !ej.isNullOrUndefined(e) ? e.isInteraction: false });
        },
        _updateValue: function () {
            if (this.value()) {
                if (this._browser.name = "msie" && this._browser.version == "8.0") this.spanElement.css({ "background-color": this._formRGB(this._HexToRGB(this.value())), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
                else this.spanElement.css({ "background-color": this._formRGBA(this._HexToRGB(this.value())) });
            }
            else this.spanElement.removeAttr('style');
        },
        _bindClickOperation: function (e) {
            var proxy = this, splitMenu;
            proxy._on($("#" + this._id + "_Presets").find("li.e-preset-row"), "mousedown", proxy._colorPresetsClick);
            var SplitMenu = $("#" + proxy._presetContainer.attr('id')).ejMenu("instance");
                SplitMenu.model.close = function () {
                proxy._splitObj.contstatus = false;
                proxy._off($("#" + this._id + "_Presets").find("li.e-preset-row"), "mousedown", proxy._colorPresetsClick);
            }
        },
        _wirePopupEvents: function() {
            this._on(this._changeTag, "click", this._switchModel);
            this._on(this._groupTag, "click", this._groupButton);
            this._on(this._addTag, "click", this._addColor);
            this._on(this._codeEditor, "mouseenter", this._inputEvent);
            this._on(this._codeEditor, "mouseleave", this._inputEvent);
            this._on(this._inputTag, "blur", this._inputEvent);
            this._on(this._inputTag, "focus", this._inputEvent);
            this._on(this._inputTag, "keyup", this._inputEvent);
            this._on(this.popupContainer, "focus", this._targetFocus);
            this._on(this.popupContainer, "blur", this._targetBlur);
        },
        _wireEvents: function () {
            if (this.element.is('input')) {
                this._on(this.wrapper, "blur", this._targetBlur);
                this._on(this.wrapper, "focus", this._targetFocus);
                this._on(this.wrapper, "keydown", this._popupShown);
                this._on(this.colorContainer, "click", this._containerClick);
            }
        },
        _unWireEvents: function () {
            if (!this.model.displayInline && this.element.is('input')) {
                this._off(this.wrapper, "blur", this._targetBlur);
                this._off(this.wrapper, "focus", this._targetFocus);
                this._off(this.wrapper, "keydown", this._popupShown);
                this._off(this.colorContainer, "click", this._containerClick);
            }
            this._off(this._changeTag, "click", this._switchModel);
            this._off(this._groupTag, "click", this._groupButton);
            this._off(this._addTag, "click", this._addColor);
            this._off(this._codeEditor, "mouseenter", this._inputEvent);
            this._off(this._codeEditor, "mouseleave", this._inputEvent);
            this._off(this._inputTag, "blur", this._inputEvent);
            this._off(this._inputTag, "focus", this._inputEvent);
            this._off(this._inputTag, "keyup", this._inputEvent);
            this._off(this.popupContainer, "focus", this._targetFocus);
            this._off(this.popupContainer, "blur", this._targetBlur);
        },
        _inputEvent: function (e) {
            if (e.type === "focus") {
                if (e.target.className.indexOf("e-color-code") > -1) {
                    this._codeEditor.addClass("e-focus");
                }
            }
            if (e.type === "blur") {
                if (e.target.className.indexOf("e-color-code") > -1) {
                    this._codeEditor.removeClass("e-focus");
                }
            }
            if (!this._clearIcon) return;
            if (e.type === "focus") this._off(this._codeEditor, "mouseleave", this._inputEvent);
            if (e.type === "blur") this._on(this._codeEditor, "mouseleave", this._inputEvent);
            if (e.type === "keyup") this._inputTag.val() !== "" ? (this._clearIcon.show(), this._handleArea.css("visibility", "visible")) : (this._clearIcon.hide(), this._handleArea.css("visibility", "hidden"));
            if (e.type === "mouseleave" || e.type === "blur" || this._inputTag.val() == "") this._clearIcon.hide();
            else this._clearIcon.show();
        },
        _clearColor: function (e) {
            this._tempValue = "";
            this._inputTag.val("");
            this._setEmptyValue();
            if (e.type == "click") {
                this._clearIcon.hide();
                this._inputTag.focus();
            }
        },
        _containerClick: function () {
            if (this.model.buttonMode == "split") this._trigger("select", { value: this.value() });
        },
        _popupShown: function (e) {
            if (e.keyCode == 13) {
                this._showHidePopup();
                if (!this.isPopupOpen)
                    this._buttonClick(e);
                return false;
            }
        },
        _recentColor: function (e) {
            this._divTag.find('.e-select').removeClass('e-select').addClass('e-block');
            var hexCode = e.target.attributes.getNamedItem("data-value"), value;
            var rgbCode = e.target.attributes.style;
            if (ej.isNullOrUndefined(hexCode) || ej.isNullOrUndefined(rgbCode)) { this._change = false; return false; }
            $(e.target.parentNode).addClass('e-select').removeClass('e-block');
            var alpha = rgbCode.value.replace(/^(background-color:rgb|background-color:rgba)\(/, '').replace(/\)$/, '').replace(/\s/g, '').split(',');
            if (!ej.isNullOrUndefined(alpha[3])) {
                this._opacity.option('value', parseInt((parseFloat(alpha[3]) * 100).toFixed(2)));
                this.rgb.a = parseFloat(parseFloat(alpha[3]).toFixed(2));
            }
            else if (this._browser.name = "msie" && this._browser.version == "8.0") {
                value = parseInt(rgbCode.nodeValue.replace(/^(FILTER: alpha)\(/, '').split('=')[1].split(')')[0]);
                this._opacity.option('value', value);
                this.rgb.a = value / 100;
            }
            else {
                this._opacity.option('value', 100);
                this.rgb.a = 1;
            }
            this._HexToHSV(hexCode.value);
            this._inputTagValue(this._selectedButton);
            this._tempValue = this.RGBToHEX(this.rgb);
            this._valueOperation();
            this._colorSlider.option('value', parseInt(this._hsv.h));
            this._hueGradient();
            this._changeEvent(false);
            if (!this.model.displayInline || this.element.is("input"))
                this.wrapper.focus();
        },

        _handleClick: function (e) {
            e.preventDefault();
            this._width = this._gradientArea.width(); this._height = this._gradientArea.height();
            if (this.model.displayInline)
                this._isFocused = true;
            this._handleArea.css("visibility", "visible");
            this.mouseDownPos = this._handlePos;
            $(document).on("mousemove touchmove", $.proxy(this._handleMovement, this));
            $(document).on("mouseup touchend", $.proxy(this._handleUp, this));
        },
        _handleMove: function (e) {
            this._handleArea.css("visibility", "visible");
            this._handleMovement(e);
            this._focusWrapper(e);
        },
        _handleMovement: function (e) {
            if (!this.model.enabled) return false;
            var clientX = e.pageX, clientY = e.pageY;
            this.element.is("input") && this.wrapper.focus();
            if (e.type == "touchstart" || e.type == "touchmove") {
                clientX = e.originalEvent.changedTouches[0].pageX;
                clientY = e.originalEvent.changedTouches[0].pageY;
            }
            this._hsv.v = parseInt(100 * (this._gradientArea.height() - Math.max(0, Math.min(this._gradientArea.height(), (clientY - this._gradientArea.offset().top)))) / this._gradientArea.height(), 10);
            this._hsv.s = parseInt(100 * (Math.max(0, Math.min(this._gradientArea.width(), (clientX - this._gradientArea.offset().left)))) / this._gradientArea.width(), 10);
            this._hsvValue();
            this._tempValue = this.RGBToHEX(this.rgb);
            this._change = true;
            this._changeEvent(false);
        },
        _handleUp: function (e) {
            $(document).off('mouseup touchend', this._handleUp);
            $(document).off('mousemove touchmove', this._handleMovement);
            this._focusWrapper(e);
            return false;
        },
        _handlePosition: function () {
            this._handlePos = this._handleArea ? {
                left: parseInt(parseInt(this._width) * this._hsv.s / 100, 10) + "px",
                top: parseInt(parseInt(this._height) * (100 - this._hsv.v) / 100, 10) + "px"
            } : "";
            this._handleArea.css({ "left": this._handlePos.left, "top": this._handlePos.top });
        },
        _addColor: function () {
            var value, collection = this._divTag.find('> div');
            value = this._selectedButton.html() != "HSVA" ? this._inputTag.val() : this._formRGBA(this.HSVToRGB(this._hsv));
            if (value !== "" && this._change) {
                if (this.model.showRecentColors && collection.length <= 12) {
                    $($(collection)[collection.length - 2]).remove();
                    this._generateLi();
                }
            }
            if (!this.model.displayInline || this.element.is("input")) this.wrapper.focus();
        },
        _buttonClick: function (e) {
            this._change = true;
            var value = this._inputTag.val(), collection = this._divTag.find('div');
            this._opacity.option('value', this._tempOpacity);
            this._tempValue = this.RGBToHEX(this.rgb);
            this._updatePreviewColor();
            if (this._inputTag.val() === "") {
                this._tempValue = "";
                if (this.model.showClearButton) this._setValue("");
                else {
                    this._inputTag.addClass('e-error');
                    return false;
                }
            }
            this._selectEvent();
            if (this.element.is("input")) {
                this._updateValue();
                this.wrapper.focus();
            }
            !this.model.displayInline && this.hide();
            this._tempOpacity !== this.opacityValue() && this.opacityValue(this._tempOpacity);
        },
        _generateLi: function () {
            this._liTag = ej.buildTag('div.e-colorblock e-block e-colorset').attr({ "data-value": this.RGBToHEX(this.rgb), "tabindex": "0" });
            var spanTag = ej.buildTag('div.e-color e-set').attr({ "data-value": this.RGBToHEX(this.rgb), "title": this.RGBToHEX(this.rgb) });
            if (this._browser.name = "msie" && this._browser.version == "8.0") spanTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            else spanTag.css({ "background-color": this._formRGBA(this.rgb) });
            this._liTag.append(spanTag);
            this._divTag.prepend(this._liTag);
        },
        _colorCodeValue: function (e) {
            var newValue = "", codeValue = this._inputTag.val(), value, code, count;
            value = $.trim(codeValue);
            value.length == 5 ? this._inputTag.removeClass('e-error') : "";
            if ((e.shiftKey && e.keyCode >= 35 && e.keyCode <= 40 || (e.keyCode >= 65 && e.keyCode < 71) ) || (e.keyCode == 51) || (e.ctrlKey && (e.keyCode == 88 || e.keyCode == 86)) || e.keyCode == 190)
                this._keyPressFlag = 1;
            else if ((!e.crtlKey && !e.shiftKey) && ((e.keyCode >= 65 && e.keyCode < 71) || (e.keyCode >= 35 && e.keyCode <= 40) || (e.keyCode >= 96 && e.keyCode <= 105) || (e.keyCode >= 48 && e.keyCode <= 57) || e.keyCode == 13 || e.keyCode == 8 || e.keyCode == 46 || e.type === "blur"))
                this._keyPressFlag = 1;
			else if (e.key == "#" || e.key == "(" || e.key == ")" || e.key == ",")  this._keyPressFlag = 1;
            else this._keyPressFlag = 0;
            if (this.model.enableOpacity && (e.keyCode == 188 || e.keyCode == 71 || e.keyCode == 72 || e.keyCode == 82 || e.keyCode == 83 || e.keyCode == 86) || (e.shiftKey && (e.keyCode == 57 || e.keyCode == 48)))
                this._keyPressFlag = 1;
            if (this._keyPressFlag == 1) {
                this._inputTag.removeClass('e-error');
                if (e.keyCode === 13 || e.type === "blur") {
                    if (value === "") {
                        if (this.model.showClearButton) this._setEmptyValue();
                        else this._inputTag.addClass('e-error');
                    }
                    var regex = /^\#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/;
                    code = value.match(regex);
                    if (!ej.isNullOrUndefined(code)) {
                        if (code[1].length === 3) {
                            for (count = 0; count < code[1].length; count++) {
                                newValue += code[1][count] + code[1][count];
                            }
                        }
                        else if (code[1].length === 6)
                            newValue = code[1];
                        value = this.hexCodeToRGB("#" + newValue);
                        this._inputTag.val("#" + newValue);
                        this.rgb = this.HSVToRGB(this.RGBToHSV(value));
                        this._tempValue = this.RGBToHEX(this.rgb);
                        this._change = true;
                    }
                    else {
                        var rgbRegex = /^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/;
                        code = value.match(rgbRegex);
                        if (!ej.isNullOrUndefined(code)) this._rgbaColor(code);
                        else {
                            var hsvRegex = /^hsva?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/;
                            code = value.match(hsvRegex);
                            if (!ej.isNullOrUndefined(code)) {
                                this._hsvColor(code);
                            }
                            else {
                                value != "" && this._inputTag.addClass('e-error');
                                this._change = false;
                                return false;
                            }
                        }
                    }
                    if (this._change) {
                        this._valueOperation();
                        this._colorSlider.option('value', parseInt(this._hsv.h));
                        this._hueGradient();
                        this._changeEvent(false);
                        !this.element.is('input') && this._selectEvent();
                        if (this._inputTag.val() !== "") this._inputTag.removeClass("e-error");
                    }
                }
            }
            else {
                if (e.keyCode != 9) e.preventDefault();
                if (!e.shiftKey && !e.ctrlKey && e.keyCode !== 27 && e.keyCode !=20) this._inputTag.addClass('e-error');
            }
        },
        _setEmptyValue: function () {
            if(this.popupContainer){
                this._handleArea.css("visibility", "hidden");
                this._currentTag.css({ "background-color": "" });
                this._removeClass();
                this._inputTag.val(null);
            }
            this._tempValue = null;
            if (this._previousValue !== this._tempValue) {
                this._trigger("change", { value: null });
                this._previousValue = this._tempValue
            }
        },
        _rgbaColor: function (code) {
            var rgb = {}, color;
            if (code[0].split('(')[0] == "rgba" && !ej.isNullOrUndefined(code[4])) {
                rgb.r = code[1]; rgb.g = code[2]; rgb.b = code[3]; rgb.a = code[4];
            }
            else if (code[0].split('(')[0] == "rgb" && ej.isNullOrUndefined(code[4])) {
                rgb.r = code[1]; rgb.g = code[2]; rgb.b = code[3]; rgb.a = this.rgb.a;
                this._inputTag.val("rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")");
            }
            else {
                this._inputTag.addClass('e-error');
                this._change = false;
                return false;
            }
            this.rgb.a = parseFloat(rgb.a);
            this._tempOpacity = this.rgb.a * 100;
            this._opacity.option('value', this._tempOpacity);
            this.opacityValue(this._tempOpacity);
            this._tempValue = this.RGBToHEX(rgb);
            this._HexToHSV(this._tempValue);
            this._inputTag.removeClass("e-error");
            this._change = true;
        },
        _hsvColor: function (code) {
            var hsv = {};
            if (!ej.isNullOrUndefined(code[4])) {
                hsv.h = code[1]; hsv.s = code[2]; hsv.v = code[3]; hsv.a = code[4];
            }
            else {
                this._inputTag.addClass('e-error');
                this._change = false;
                return false;
            }
            this.rgb.a = parseFloat(hsv.a);
            this._tempOpacity = this.rgb.a * 100;
            this._opacity.option('value', this._tempOpacity);
            this.opacityValue(this._tempOpacity);
            this.rgb = this.HSVToRGB(hsv);
            this._tempValue = this.RGBToHEX(this.rgb);
            this._inputTag.removeClass("e-error");
            this._change = true;
        },
        _iconClick: function (e) {
            e.preventDefault();
            this._showHidePopup();
            this.wrapper.focus();
        },
        _showHidePopup: function () {
            if (this.model.displayInline) return false;
            if (!this.isPopupOpen) this.show();
            else {
                this.hide();
                this.wrapper.focus();
            }
        },

        hide: function () {
            var proxy = this;
            if (!this.isPopupOpen||this.model.displayInline) return false;
            this.isPopupOpen = this._dataBind = false;
            if (this.element.is('input')) {
                this.wrapper.focus();
                this.wrapper.removeClass("e-active");
            }
            this._width = this._gradientArea.width(); this._height = this._gradientArea.height();
            this.popupContainer.slideUp(200, function () {
                if (proxy.model) {
                    proxy._tempOpacity = proxy.opacityValue();
                    proxy.rgb.a = proxy._tempOpacity / 100;
                    proxy._tempValue = proxy.value();
                    proxy._renderModelValue(proxy.value());
                    proxy._opacity.option('value', parseInt(proxy.opacityValue()));
                    if (!proxy.model.displayInline)
                        proxy._off($(document), "mousedown", proxy._onDocumentClick);
                    proxy._trigger("close");
                }
            });
            if (!this.model.displayInline)
                this._off($(document), "mousedown", this._onDocumentClick);
            this._off(this._inputTag, "keydown", this._colorCodeValue);
            this._off(this._inputTag, "blur", this._colorCodeValue);
            this._modelType == "palette" ? this._off($(document), "keydown", this._keyDown) : this._off($(document), "keydown", this._onKeyDown);
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            $(window).off("resize", $.proxy(this._OnWindowResize, this));
        },
        _hidePopup: function () {
            !this.model.displayInline && this.hide();
        },

        show: function () {
            if(!this.popupContainer){
                this._renderPopup();
            }
            if (this.element.is("input")) {
                this.wrapper.focus();
                this.wrapper.addClass("e-active");
            }
            if (this.isPopupOpen || !this.model.enabled) return false;
            this.isPopupOpen = true;
            if (this.model.modelType == "palette") this._cellSelect();
            if (!this.model.displayInline && (this.value() === "" || ej.isNullOrUndefined(this.value())))
                this._setEmptyValue();
            else
                this._handleArea.css("visibility", "visible");
            this._previousColor = this._previousValue = this.value();
            this.popupContainer.children().find('.e-focus').removeClass('e-focus');
            if (!this.model.displayInline) this._setPopupPosition();
            var proxy = this;
            this.popupContainer.slideDown(200, function () {
                proxy.isFocused = true;
                proxy._on($(document), "mousedown", proxy._onDocumentClick);
                proxy._trigger("open");
            });
            if (!this._dataBind)
                this._modelType == "palette" ? this._on($(document), "keydown", this._keyDown) : this._on($(document), "keydown", this._onKeyDown);
            this._on(this._inputTag, "keydown", this._colorCodeValue);
            this._on(this._inputTag, "blur", this._colorCodeValue);
            this._dataBind = true;
            $(window).on("resize", $.proxy(this._OnWindowResize, this));
            if (!this.model.displayInline) this._on(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            if (this._prevSize !== $(window).width()) this.refresh();
        },
        _showBindEvents: function () {
            this._modelType == "palette" ? this._on($(document), "keydown", this._keyDown) : this._on($(document), "keydown", this._onKeyDown);
        },
        _hideUnBindEvents: function () {
            this._modelType == "palette" ? this._off($(document), "keydown", this._onKeyDown) : this._off($(document), "keydown", this._keyDown);
        },
        _switchEvents: function () {
            if (this._switch) {
                this._on(this._gradientArea, "mousedown touchstart", this._handleMove);
                this._on(this._handleArea, "mousedown touchstart", this._handleClick);
                this._on(this._gradientArea, "mousedown touchstart", this._handleClick);
            }
            else this._on(this._collection, "mousedown", this._onSelect);
        },
        _unSwitchEvents: function () {
            if (!this._switch) {
                this._off(this._gradientArea, "mousedown touchstart", this._handleMove);
                this._off(this._handleArea, "mousedown touchstart", this._handleClick);
                this._off(this._gradientArea, "mousedown touchstart", this._handleClick);
            }
            else this._off(this._collection, "mousedown", this._onSelect);
        },
        _groupButton: function (e) {
            if ($(e.target).hasClass('e-disable')) return false;
            if ($(e.target).hasClass("e-button")) {
                var element = this._groupTag.find('.e-btn.e-select');
                if (this._inputTag.val() !== "") this._inputTagValue($(e.target));
                else this._selectedButton = $(e.target);
                this._selectedButton.html() !== "HEX" ? this._inputTag.attr('maxLength', '22') : this._inputTag.attr('maxLength', '7');
                this._groupTag.find('.e-click').removeClass('e-click');
                $(e.target).addClass('e-click');
                this._inputTag.removeClass('e-error');
            }
        },
        _inputTagValue: function (type) {
            if (type.html() == "RGBA") this._inputTag.val(this._formRGBA(this.rgb));
            else if (type.html() == "HEX") this._inputTag.val(this.RGBToHEX(this.rgb));
            else if (type.html() == "HSVA") {
                if (this._modelType != "palette")
                    this._inputTag.val("hsva(" + Math.round(this._hsv.h) + "," + Math.round(this._hsv.s) + "," + Math.round(this._hsv.v) + "," + this.rgb.a + ")");
            }
            this._selectedButton = type;
        },
        _bindRecentEvent: function () {
            this._on(this._divTag, "click", this._recentColor);
        },
        _unBindRecentEvent: function () {
            this._off(this._divTag, "click", this._recentColor);
        },
        _handlePlacement: function (prop, value, bool) {
            this._handleArea.css("visibility", "visible");
            var hsv = this._hsv;
            hsv[prop] += value * (bool ? 1 : 3);
            if (hsv[prop] < 0) { hsv[prop] = 0; }
            prop === "s" ? this._hsv.s = hsv[prop] : this._hsv.v = hsv[prop];
            this._hsvValue();
            this._tempValue = this.RGBToHEX(this.rgb);
            this._changeEvent(false);
        },
        _onKeyDown: function (e) {
            var key = e.keyCode;
            if (!this.model.enabled) return;
            if (e.shiftKey && key == 9) if ($(this._hueSlider).find('.e-handle').hasClass('e-focus')) this._focusWrapper(e);
            if (!this._isFocused) if (key == 9 && key !== 27) return;
            this._change = true;
            if ((!e.altKey && !e.shiftKey)) {
                switch (key) {
                    case 39:
                        if (this.element.is('input') && $(e.target).is(this.wrapper)) {
                            e.preventDefault();
                            this._handlePlacement("s", 1, e.ctrlKey);
                        }
                        break;
                    case 38:
                        if (this.element.is('input') && $(e.target).is(this.wrapper)) {
                            e.preventDefault();
                            this._handlePlacement("v", 1, e.ctrlKey);
                        }
                        break;
                    case 37:
                        if (this.element.is('input') && $(e.target).is(this.wrapper)) {
                            e.preventDefault();
                            this._handlePlacement("s", -1, e.ctrlKey);
                        }
                        break;
                    case 40:
                        if (this.element.is('input') && $(e.target).is(this.wrapper)) {
                            e.preventDefault();
                            this._handlePlacement("v", -1, e.ctrlKey);
                        }
                        break;
                    case 13:
                        e.preventDefault();
                        if ($(e.target).hasClass('e-switcher')) {
                            this._switchModel();
                            $(e.target).focus();
                        }
                        else if ($(e.target).hasClass('e-applyButton')) this._buttonClick(e);
                        break;
                    case 27:
                        e.preventDefault();
                        !this.model.displayInline && this.hide();
                        this._tempValue = this.value();
                        break;
                    case 9:
                        var active = document.activeElement;
                        if ($(active).is(this.wrapper)) this._focusPopup(e);
                        break;
                }
            }
        },
        _focusPopup: function (e) {
            $(this._hueSlider).find('.e-handle').focus();
            e.preventDefault();
        },
        _focusWrapper: function (e) {
            this.element.is('input') && $(this.wrapper).focus();
            e.preventDefault();
        },
        _onDocumentClick: function (e) {
            if (!$(e.target).is(this.popupContainer) && !$(e.target).parents(".e-colorpicker").is(this.popupContainer) &&
              !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-colorpickerwidget").is(this.wrapper) && !$(e.target).parents('.e-presetWrapper').is("#" + this._id + "_Presets")) {
                if (!this.model.displayInline) {
                    this.hide();
                    if (this.element.is('input')) this.wrapper.removeClass('e-focus');
                }
                this._isFocused = false;
            }
        },

        _OnWindowResize: function (e) {
            if (this.element.is('input')) this._setPopupPosition();
            this.refresh();
        },
        refresh: function () {
            var element = $(this._PresetTable.find('.e-item')[1]);
            var count = 10, paddingSize = 36; //paddingSize is fixed for  palette model cells
            if (!this.isPopupOpen) {
                this.popupContainer.css({ "display": "block", "visibility": "hidden" });
                this._modelType == "palette" && this.PaletteWrapper.css({ "display": "block", "visibility": "hidden" });
            } else if (this._modelType == "picker") {
                this.PaletteWrapper.css({ "display": "block", "visibility": "hidden" });
            }
            if (parseFloat(this._tag.outerHeight()) > element.outerHeight(true) || (($(this._tag).outerWidth() - ($(element).outerWidth(true) * count)) > element.outerWidth()) || $(this._tag).outerWidth() == 0) {
                var rowSize = parseFloat($(this._tag).outerWidth()) - paddingSize;
                var cellWidth = (rowSize / count) - (element.outerWidth() - element.width());
                this._PresetTable.find('.e-item').css('width', cellWidth);
                if (element.outerWidth(true) * count > this._tag.outerWidth()) this._PresetTable.find('.e-item').css('width', cellWidth - 1);
            }
            if (!this.isPopupOpen) {
                this.popupContainer.css({ "display": "none", "visibility": "visible" });
                this._modelType == "palette" && this.PaletteWrapper.css({ "visibility": "visible" });
            } else if (this._modelType == "picker") {
                this.PaletteWrapper.css({ "display": "none", "visibility": "visible" });
            }
            this._prevSize = $(window).width();
            this._width = this._gradientArea.width(); this._height = this._gradientArea.height();
        },

        _range: function (range, value) {
            if (value === "") return value = 0;
            else if (value > range) return range;
            else return value;
        },
        _hsvValue: function () {
            var colorCode, hsv;
            this._change = true;
            this._hsv.v = this._hsv.v >= 100 ? 100 : this._hsv.v;
            this._hsv.s = this._hsv.s >= 100 ? 100 : this._hsv.s;
            this.hsv = this._hsv;
            this.rgb = this.HSVToRGB(this.hsv);
            this._valueOperation();
            this._inputTagValue(this._selectedButton);
        },
        _formRGB: function (value) {
            if (!ej.isNullOrUndefined(value)) return "rgb(" + value.r + "," + value.g + "," + value.b + ")";
        },
        _formRGBA: function (value) {
            if (!ej.isNullOrUndefined(value)) return "rgba(" + value.r + "," + value.g + "," + value.b + "," + value.a + ")";
        },
        _rgbValue: function (e) {
            var rgbColor, colorCode, value;
            value = this._HexToRGB(this._tempValue);
            if (!ej.isNullOrUndefined(value)) {
                this.rgb = value;
                this._change = true;
                this.HSVToRGB(this.RGBToHSV(this.rgb));
                this._colorSlider.option('value', parseInt(this._hsv.h));
                this._opacity.option('value', this.rgb.a * 100);
            }
            this._valueOperation();
            this._inputTagValue(this._selectedButton);
        },
        _valueOperation: function () {
            this._handlePosition();
            this._alphaGradient(this._tempValue);
            this._inputTag.removeClass("e-error");
            this._updateUI();
        },
        _HexToHSV: function (hex) {
            return this.HSVToRGB(this.RGBToHSV(this._HexToRGB(hex)));
        },
        _HexToRGB: function (hex) {
            if (!ej.isNullOrUndefined(hex)) {
                var reg = "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$", hex, validate = hex.match(reg);
                if (ej.isNullOrUndefined(validate)) { this._change = false; return false; }
                if (validate[1].length == 3)
                    hex = "#" + validate[1][0] + validate[1][0] + validate[1][1] + validate[1][1] + validate[1][2] + validate[1][2];
                this._change = true;
                hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
                var value = ej.isNullOrUndefined(this.rgb) ? parseFloat(this._tempOpacity) / 100 : this.rgb.a;
                return this.rgb = { r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF), a: value };
            }
        },

        RGBToHSV: function (rgb) {
            var hsv = { h: 0, s: 0, v: 0 };
            var min = Math.min(rgb.r, rgb.g, rgb.b);
            var max = Math.max(rgb.r, rgb.g, rgb.b);
            var differ = max - min;
            hsv.v = max;
            hsv.v *= 100 / 255;
            if (differ === 0) {
                this._hsv = hsv;
                return hsv;
            }
            hsv.s = max != 0 ? 255 * differ / max : 0;
            if (hsv.s != 0) {
                if (rgb.r == max) hsv.h = (rgb.g - rgb.b) / differ;
                else if (rgb.g == max) hsv.h = 2 + (rgb.b - rgb.r) / differ;
                else hsv.h = 4 + (rgb.r - rgb.g) / differ;
            } else hsv.h = -1;
            hsv.h *= 60;
            if (hsv.h < 0) hsv.h += 360;
            hsv.s *= 100 / 255;
            this._hsv = hsv;
            return hsv;
        },

        HSVToRGB: function (hsv) {
            var rgb = {};
            var h = parseFloat(hsv.h);
            var s = parseFloat(hsv.s * 255 / 100);
            var v = parseFloat(hsv.v * 255 / 100);
            if (s == 0) {
                rgb.r = rgb.g = rgb.b = v;
            } else {
                var t1 = v;
                var t2 = (255 - s) * v / 255;
                var t3 = (t1 - t2) * (h % 60) / 60;
                if (h == 360) h = 0;
                if (h < 60) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3 }
                else if (h < 120) { rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3 }
                else if (h < 180) { rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3 }
                else if (h < 240) { rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3 }
                else if (h < 300) { rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3 }
                else if (h < 360) { rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3 }
                else { rgb.r = 0; rgb.g = 0; rgb.b = 0 }
            }
            this._hsv = hsv;
            var value = ej.isNullOrUndefined(this.rgb) ? parseFloat(this._tempOpacity) / 100 : this.rgb.a;
            return { r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b), a: value }
        },
        _HSVToHex: function (hsv) {
            return this.RGBToHEX(this.HSVToRGB(hsv));
        },
        _toHEX: function (rgb) {
            if (rgb.indexOf("#") !== -1) return rgb;
            rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            return "#" + this._hex(rgb[1]) + this._hex(rgb[2]) + this._hex(rgb[3]);
        },



        RGBToHEX: function (rgb) {
            if (!ej.isNullOrUndefined(rgb))
                return "#" + this._hex(rgb.r) + this._hex(rgb.g) + this._hex(rgb.b);
        },
        _hex: function (x) {
            return ("0" + parseInt(x).toString(16)).slice(-2);
        },
        _colorValue: function (value) {
            this._color = value.indexOf("#") != -1 ? this.hexCodeToRGB(value) : "";
            return "rgb(" + this._color.r + ", " + this._color.g + ", " + this._color.b + ")";
        },


        hexCodeToRGB: function (colorCode) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorCode);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
                a: this.rgb.a
            } : null;
        },

        _updatePreviewColor: function () {
            if (this._browser.name = "msie" && this._browser.version == "8.0")
                this._previousTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            else
			{
				if (this._tempValue == null)
				    this._previousTag.css({ "background-color": "" });
			    else
                    this._previousTag.css({ "background-color": this._formRGBA(this.rgb) });
			}
            this._oldValue = this.rgb;
        },
        _updateUI: function () {
            var value = this._hsv;
            if (this._switch) {
                var hsv = { h: this._hsv.h, s: 100, v: 100 };
                this._gradientArea.css({ "background-color": this._colorValue(this._HSVToHex(hsv)) });
            } else this._cellSelect();
            if (this._browser.name = "msie" && this._browser.version == "8.0") {
                this._currentTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
                this._previousTag.css({ "background-color": this._formRGB(this._oldValue), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            }
            else {
                this._currentTag.css({ "background-color": this._formRGBA(this.rgb) });
                this._previousTag.css({ "background-color": this._formRGBA(this._oldValue) });
                this._alphaSlider.children(".e-handle").css({ "background": this._formRGBA(this.rgb) });
            }
            this._hsv = value;
        },

        _targetFocus: function (e) {
            e.preventDefault();
            if (!this._isFocused) {
                this._isFocused = true;
                if (this.element.is("input")) this.wrapper.addClass("e-focus");
            }
        },
        _targetBlur: function (e) {
            this._isFocused = false;
            if (!this.isPopupOpen && this.element.is("input")) this.wrapper.removeClass("e-focus");
        },
        _switchModel: function () {
            this._tempValue = this.RGBToHEX(this.rgb);
            this.refresh();
            var proxy = this;
            this._off(this._changeTag, "click", this._switchModel);
            if (this._modelType == "palette") {
                this._modelType = "picker";
                this._switcher.removeClass("e-pickerModel").addClass("e-paletteModel");
                this.PaletteWrapper.fadeOut(300, function () {
                    proxy._presetTag.parents('.e-split.e-widget').addClass('e-hide');
                    proxy._gradient.fadeIn(300);
                    proxy._on(proxy._changeTag, "click", proxy._switchModel);
                });
                this._switch = true;
                this._rgbValue();
                this._hueGradient();
                this._hsva.ejButton("enable");
            } else {
                this.PaletteWrapper.remove();
                this._modelType = "palette";
                this.PaletteWrapper = this._layoutType(this.model.palette);
                this._gradient.addClass('e-hide');
                this._paletteType();
                this._switcher.removeClass("e-paletteModel").addClass("e-pickerModel");
                this._gradient.fadeOut(300, function () {
                    proxy._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
                    if (ej.isNullOrUndefined(proxy.PaletteWrapper)) {
                        proxy.PaletteWrapper = proxy._layoutType(proxy.model.palette);
                        proxy._splitObj.option('prefixIcon', 'e-color-image e-' + proxy.model.presetType);
                        proxy.popupList.prepend(proxy.PaletteWrapper);
                    }
                    proxy.PaletteWrapper.fadeIn(300);
                    proxy._on(proxy._changeTag, "click", proxy._switchModel);
                });
                if (this.value() !== "")
                    this._cellSelect();
                this._disableHSVButton();
            }
            this.model.palette === "custompalette" && this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            if (!this.model.displayInline || this.element.is(":input")) this.wrapper.focus();
            this._switchEvents();
            this._unSwitchEvents();
            if (this.isPopupOpen) {
                this._hideUnBindEvents();
                this._showBindEvents();
            }
        },
        _disableHSVButton: function () {
            if ($(this._groupTag.find('.e-click')).hasClass('e-hsvButton')) {
                this._inputTagValue(this._rgb);
                this._rgb.addClass('e-click');
                this._hsva.removeClass('e-click');
            }
            this._hsva.ejButton("disable");
        },

        _cellSelect: function () {
            var code, element, proxy = this;
            this._removeClass();
            this._collection.find('.e-item').each(function () {
                code = $(this).css("background-color");
                if (proxy._browser.name = "msie" && proxy._browser.version == "8.0") {
                    if (code && code.replace(/ /g, '') === proxy.RGBToHEX(proxy.rgb)) {
                        element = this;
                        $(element).addClass("e-filter");
                    }
                } else {
                    if (code && code.replace(/ /g, '') === proxy._formRGB(proxy.rgb)) element = this;
                }
            });
            $(element).addClass("e-state-selected").attr("aria-selected", true);
        },
        _removeClass: function () {
            this._collection.find('.e-item').removeClass('e-state-selected').removeClass("e-filter").removeAttr("aria-selected");
        },
        _position: function (items, element, columns) {
            items = Array.prototype.slice.call(items);
            var n = items.length,
            index = items.indexOf(element);
            if (index < 0) return columns < 0 ? items[n - 1] : items[0];
            index += columns;
            return items[index < 0 ? index += n : index %= n];
        },
        _onSelect: function (e) {
            if (!this.model.enabled) return false;
            this._isFocused = true;
            this._handleArea.css("visibility", "visible");
            if (e.target.style.backgroundColor != "") {
                this._collection.find('.e-item').removeClass("e-state-selected").removeAttr('aria-selected');
                this._HexToRGB(this._toHEX(e.target.style.backgroundColor));
                this._updateUI();
                this._inputTagValue(this._selectedButton);
                if (!this.model.displayInline || this.element.is("input")) this.wrapper.focus();
                this._tempValue = this.RGBToHEX(this.rgb);
                this._changeEvent(false);
            }
            e.preventDefault();
        },
        _keyDown: function (e) {
            if (this._isFocused) {
                this._change = true;
                if (!this.model.enabled) return false;
                var selected = "",
                    key = e.keyCode,
                    items = this._collection.find('.e-item'),
                    element = items.filter(".e-state-selected").get(0),
                    columnSize = this.model.columns;
                if (!e.altKey && (key == 37 || key == 38 || key == 39 || key == 40) && (e.target.className !== "e-color-code"))
                    this._removeClass();
                switch (!e.altKey && key) {
                    case 40:
                        if (e.target.className !== "e-color-code") {
                            e.preventDefault();
                            selected = this._position(items, element, columnSize);
                        }
                        break;
                    case 37:
                        if (e.target.className !== "e-color-code") {
                            e.preventDefault();
                            selected = this._position(items, element, -1);
                        }
                        break;
                    case 38:
                        if (e.target.className !== "e-color-code") {
                            e.preventDefault();
                            selected = this._position(items, element, -columnSize);
                        }
                        break;
                    case 39:
                        if (e.target.className !== "e-color-code") {
                            e.preventDefault();
                            selected = this._position(items, element, 1);
                        }
                        break;
                    case 13:
                        this._collection.find('.e-item').removeClass('e-state-selected').removeAttr("aria-selected");
                        if ($(e.target).hasClass('e-switcher')){
                            this._switchModel();
                            $(e.target).focus();
                        } 
                        else if ($(e.target).hasClass('e-applyButton')) {
                            this._buttonClick(e);
                            this._updateUI();
                            !this.model.displayInline && this.hide();
                            if (this.element.is("input")) this.wrapper.focus();
                        }
                        break;
                    case 27:
                        !this.model.displayInline && this.hide();
                        $(this._presetContainer).hide();
                        if (this.element.is("input")) this.wrapper.focus();
                        break;
                    case 9:
                        var active = document.activeElement;
                        if ($(active).is(this.wrapper)) this._focusPalettePopup(e, true);
                        break;
                }
                if (selected) {
                    $(selected).addClass('e-state-selected').attr("aria-selected", true);
                    this._currentTag.css({ "background-color": this._formRGB(this._HexToRGB($(selected).attr("data-value")))});
                    this._inputTagValue(this._selectedButton);
                    this._tempValue = this.RGBToHEX(this.rgb);
                    this._changeEvent(false);
                }
            } else {
                if (e.keyCode == 27) {
                    this.hide();
                    $(this._presetContainer).hide();
                }
            }
        },
        _focusPalettePopup: function (e, type) {
            $(this.popupContainer).focus();
            e.preventDefault();
        },
    })

    ej.ColorPicker.Locale = ej.ColorPicker.Locale || {};

    ej.ColorPicker.Locale["default"] = ej.ColorPicker.Locale["en-US"] = {
        buttonText: {
                apply: "Apply",
                cancel: "Cancel",
                swatches: "Swatches"
            },

            tooltipText: {
                switcher: "Switcher",
                addButton: "Add Color",
                basic: "Basic",
                monoChrome: "Mono Chrome",
                flatColors: "Flat Colors",
                seaWolf: "Sea Wolf",
                webColors: "Web Colors",
                sandy: "Sandy",
                pinkShades: "Pink Shades",
                misty: "Misty",
                citrus: "Citrus",
                vintage: "Vintage",
                moonLight: "Moon Light",
                candyCrush: "Candy Crush",
                currentColor: "Current Color",
                selectedColor: "Selected Color",
            }
    }
    ej.ColorPicker.Palette = {
        /**  Represents the basic Palette. This is default Type*/
        BasicPalette: "basicpalette",
        /**  Represents the custom Palette. User will customize the palette*/
        CustomPalette: "custompalette",
    }

    ej.ColorPicker.ModelType = {
        /**  Represents Palette Type*/
        Palette: "palette",
        /** Represents Picker Type */
        Picker: "picker"
    }

    ej.ColorPicker.ButtonMode = {
        /**  Represents the default bahavior*/
        Default: "dropdown",
        /**  Represents the Split bahavior, to perform the separete operation for each button*/
        Split: "split",
    }

    ej.ColorPicker.PresetType = {
        Basic: "basic",
        MonoChrome: "monochrome",
        FlatColors: "flatcolors",
        SeaWolf: "seawolf",
        WebColors: "webcolors",
        Sandy: "sandy",
        PinkShades: "pinkshades",
        Misty: "misty",
        Citrus: "citrus",
        Vintage: "vintage",
        MoonLight: "moonlight",
        CandyCrush: "candycrush",
    }
    var Colors = {
        basic: ["ffffff", "facbcb", "fccb98", "faf39a", "fbf8cd", "a6d38b", "aadee8", "d1ecf2", "cdcae5", "eecde1", "cccbcb", "f16667", "f69668", "f8ee6b", "f7ec37", "89c987", "75cddd", "8bd3e1", "7f7fcc", "9494c8", "b3b2b3", "ec2024", "f7971d", "ffcb67", "f5ea14", "74bf44", "69c8c9", "46c7f4", "6666ad", "b76cab", "676767", "971b1e", "ca6828", "ca9732", "979937", "0d9948", "339898", "4857a6", "62449a", "973794", "000000", "2f1110", "973620", "663433", "343416", "183319", "023334", "22205f", "3b2f8d", "310e31"],
        monochrome: ["ffffff", "e3e3e3", "c6c6c6", "aaaaaa", "8e8e8e", "717171", "555555", "393939", "1c1c1c", "000000", "f9e6e7", "f4d0d2", "efbabc", "e9a4a7", "e48e92", "df787c", "da6267", "d44c52", "cf363c", "ca2027", "fff4ca", "ffeb9e", "fff0b4", "ffefb1", "ffe788", "ffe272", "ffd947", "ffd531", "ffd01b", "ffcc05", "e4f4eb", "ccead9", "b4e0c7", "9cd6b5", "84cca3", "6dc190", "55b77e", "3dad6c", "25a35a", "0d9948", "e8f4f4", "d6e3eb", "c4d1e3", "b3c0da", "a1aed1", "8f9dc9", "7d8bc0", "6c7ab7", "5a68af", "4857a6"],
        flatcolors: ["7477b8", "488bca", "18b1d4", "1db369", "78c162", "acc063", "ffe84e", "f6b757", "f79853", "ed6346", "E87F3D", "E4C45D", "B7A575", "999999", "67809F", "002228", "00A578", "F9A41F", "F3770B", "D7401B", "FFCB36", "82CC2C", "36B595", "6370AD", "D4264E", "004D8E", "22A04B", "F3A414", "C77405", "F3420B", "1ABC9C", "3498DB", "9B59B6", "E67E22", "E74C3C", "3A738A", "EBD9A7", "89AD78", "FF766D", "C76160", "BF3542", "CDC5BA", "EBE3D6", "3C3C3C", "2E2E2E", "77A7FB", "E57368", "FBCB43", "34B67A", "FFFFFF"],
        seawolf: ["0EEAFF", "15A9FA", "1B76FF", "1C3FFD", "2C1DFF", "0B3C4C", "0E5066", "13647F", "127899", "1A8BB2", "74B8E8", "659EBB", "3C9FFF", "26466F", "2472FF", "0069A4", "009BF2", "004165", "49A0B4", "274C5F", "000000", "7A5848", "E0A088", "F9DEC6", "3A2A22", "DC3522", "D9CB9E", "374140", "2A2C2B", "1E1E20", "CB3937", "FE6B2C", "654E44", "6DD16F", "70FE2C", "275673", "4681A6", "FDDEC9", "F22816", "400101", "071C2F", "388494", "E6A934", "F3DB5F", "534329", "206956", "47683B", "E1BFA6", "BF7950", "903932"],
        webcolors: ["0066aa", "00bbdd", "338800", "77bb00", "ffcc99", "990c0c", "0303c9", "336699", "669933", "cccccc", "EEEEEE", "E7C36F", "F7B230", "E35B20", "000033", "7D7A74", "BD524A", "FCB200", "8CFCC2", "2ACD6B", "666666", "666553", "FFFEEC", "B2B2A4", "AAA4B2", "9CA5E3", "5A668C", "BBA469", "CFC295", "FFFFFF", "DBBF56", "2E94B3", "808080", "E96656", "14A168", "DE185B", "D8806F", "DBE186", "D8CC63", "DCC527", "4E6C89", "E2BDAD", "EC6053", "81BBAD", "DFCDA5", "453394", "66398A", "313E7D", "336694", "788E91"],
        sandy: ["c0a986", "ecd9c3", "dfc79b", "f6d58e", "ecdaad", "fff3e0", "7f6b4a", "ffd694", "7f7a70", "ccac76", "E6E2AF", "A79A71", "EFECCA", "806F4C", "2F2F2E", "997F1A", "CCB65F", "FFD291", "6B674A", "635F3A", "7F693A", "FFEBC1", "FFD275", "7F7561", "CCA85E", "D29854", "4A4034", "C9AD8D", "4A351D", "968169", "E6E39F", "9A9757", "FFFDC9", "94909A", "E2E0E6", "960010", "EB1517", "CD7C29", "9A571C", "1F7A94", "7F6826", "7F724C", "FFE499", "FFD04C", "CCA63D", "FFA669", "92FFB6", "FFF352", "E8C269", "D7E8CB"],
        pinkshades: ["F6B1C3", "F0788C", "DE264C", "BC0D35", "A20D1E", "E12256", "BB1C48", "7B132F", "3B0917", "FA2660", "FFB7B5", "9A423F", "FF6D68", "BB5855", "CC5753", "E88161", "D66C60", "C2646E", "996072", "705262", "FFA1BD", "FF8FB7", "FF82AE", "E9719B", "CC6882", "F250C7", "BF1774", "BF2696", "AC60AA", "BB90C5", "BF1553", "F20775", "F2F2F2", "e5566d", "f2afc1", "f43fa5", "fc8c99", "FF6887", "7F3443", "CC536C", "D06AA9", "E65F41", "650017", "BC1620", "FA427E", "3B1132", "84476E", "B83D65", "E6E0E8", "FF6EE8"],
        misty: ["5C7A84", "3D5372", "7C9196", "50748A", "ADBFBF", "010735", "052159", "194073", "376B8C", "FFFFFF", "985999", "C811CC", "892EFF", "FF6852", "DBA211", "0A0D0C", "85A67C", "46593E", "BBD9AD", "202616", "BF8E63", "734327", "A66C4B", "593A2F", "BFBFBF", "8DB0B6", "1B778A", "F46C1B", "881801", "192129", "81808C", "ABAABF", "0C0E09", "6A7366", "37402F", "5D6663", "84867B", "A4A66A", "BABBB1", "20211C", "6B9695", "646E8C", "6B8196", "61787F", "648C80", "8E9FBA", "89A8C8", "799ED1", "7FAEE7", "849EBD"],
        citrus: ["FAEA41", "E7F03E", "E3C647", "FAC541", "F0AB3E", "CCCA1F", "FFF300", "FFCB0D", "FF9500", "804A00", "6A692A", "FFFCA0", "FFFFFF", "CF664E", "EFAC66", "EFF299", "F2DC6D", "F29727", "F2600C", "592202", "214001", "4F7302", "1A2601", "BCD97E", "C0D904", "AAFEFF", "359D6D", "E5FF45", "65FCCF", "ABDC4B", "42B200", "C6FF00", "F2E304", "FFB200", "FF8600", "52EC04", "04E206", "94D507", "ECE404", "E2C904", "DA321C", "FF7913", "FBD028", "C0D725", "9FC131", "547312", "ADBF26", "DEB329", "F1DB47", "E08214"],
        vintage: ["684132", "fdbe30", "eaac21", "87783c", "3e4028", "ffc706", "cd5648", "5bafa9", "828282", "363636", "424862", "fb9a63", "bfc4d5", "f6fbf4", "febc98", "657050", "FCF082", "D8D98B", "A2AB80", "4D584A", "5ADED4", "4DAAAB", "26596A", "163342", "6C98A1", "010A26", "28403B", "557359", "AEBF8A", "C7D9AD", "AFFCCB", "CB4243", "D2997E", "36857E", "4AC6BB", "28394B", "191313", "AF0A18", "DC373D", "122438", "43734A", "A6A26D", "D9B448", "BF8C2C", "734002", "26010F", "866F53", "ACBD91", "7BAB87", "546859"],
        moonlight: ["241D37", "2A233D", "322B45", "362F49", "D4BA73", "261225", "592040", "8C3063", "A64985", "73345D", "A3C8FF", "85B6FF", "000040", "213190", "050859", "FFFFFF", "6AAED9", "4184BF", "224573", "2e4154", "bcad7e", "955351", "c36a57", "9a8556", "7e6029", "dbd78e", "beae3b", "c3a04c", "58504d", "967644", "CFC496", "B3B391", "889486", "61797B", "366577", "123340", "436E73", "7B8C61", "D7D996", "F0EBB4", "341F36", "D9B5E0", "9889AB", "4D4E66", "1B2129", "5CBBE3", "FCF1BC", "5C8182", "383A47", "B4F257"],
        candycrush: ["0779f4", "30da00", "fb8006", "f9d802", "a71df7", "f70200", "fd49ae", "682e07", "9b2424", "5e7693", "F9AB3B", "EF5627", "FF0000", "00A398", "803C2C", "DE5711", "FFF026", "FF0048", "14A0CC", "00B229", "FFFFBE", "F7CD99", "FF77A1", "9886E8", "97CACB", "EAEDE5", "FFD127", "FF870C", "EC4610", "9A1900", "993460", "CC1464", "C300FF", "FFFFBC", "CCB914", "FFFEE2", "B24C5F", "FF274F", "0A94CC", "679DB2", "C2FFE6", "16B271", "5FFFBC", "B2442F", "FFA190", "E89359", "FFFB75", "F36EFF", "5999E8", "73EB86"],
    }

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.common = {
        
        refreshContent: function (refreshTemplate) {
            if (refreshTemplate) {
                this.refreshTemplate();
                if(this._isLocalData) this.refreshHeader();
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                this._renderFilterBarTemplate();
            var args = {};
            this._initialRenderings();
            args.requestType = ej.Grid.Actions.Refresh;
            args.templateRefresh  = ej.isNullOrUndefined(refreshTemplate) ? false : refreshTemplate;
            if (this.model.scrollSettings.enableVirtualization) {
                this._refreshVirtualViewData();
                this._virtualDataRefresh = true;
            }
            this._processBindings(args);
        },

        refreshData: function (param) {
            if (this._isRemoteSaveAdaptor && this._dataManager.dataSource.url != undefined) {
                var proxy = this;
                $.ajax({
                    url: proxy.model.dataSource.dataSource.url,
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ value: param }),
                    dataType: "json",
                    cache: false,
                    success: function (data) {
                        proxy._dataManager.dataSource.json = data;
                        proxy.dataSource(proxy._dataManager);
                    }
                });
            }
            else
                this.refreshContent();
        },
        
        rowHeightRefresh: function () {
            if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.model.currentViewData) && this.model.currentViewData.length) {
                var frozenRows = this.getContentTable().get(0).rows;
                var movableRows = this.getContentTable().get(1).rows, height = 0;
                if (this.getContent().find(".e-frozencontentdiv").is(":visible")){
                    for (var i = 0; i < frozenRows.length; i++) {
                        if ($(frozenRows[i]).css("display") == "none")
                            continue;
						if(this._isResized){
							frozenRows[i].style.height = "";movableRows[i].style.height = "";							
						}
                        var frozenHeight = frozenRows[i].getClientRects()[0].height;
                        var movableHeight = movableRows[i].getClientRects()[0].height;
                        if (ej.isNullOrUndefined(frozenHeight) || ej.isNullOrUndefined(movableHeight))
                            height = ej.max([frozenRows[i].offsetHeight, movableRows[i].offsetHeight]);
                        else
                            height = ej.max([frozenHeight, movableHeight]);
                        $(frozenRows[i]).height(height); $(movableRows[i]).height(height);
                        if (i && (i == this.model.scrollSettings.frozenRows - 1 || i == frozenRows.length - 1))
                            height = height + 1;
                        if (!this.model.allowTextWrap) {
                            if (!i || i == this.model.scrollSettings.frozenRows - 1)
                                height = height - 1;
                        }
                        if (this.model.isEdit && $(frozenRows[i]).find("#" + this._id + "EditForm").length && i){
                            $(frozenRows[i]).find("#" + this._id + "EditForm td").css("height", height); 
							$(movableRows[i]).find("#" + this._id + "EditForm td").css("height", height);
						}
                    }
					this._isResized = false;
				}
                if (this.model.showSummary && this.model.summaryRows.length > 0) {
                    var frozenFooterRows = ej.isNullOrUndefined(this.getFooterTable())?[]:this.getFooterTable().get(0).rows;
                    var movableFooterRows = ej.isNullOrUndefined(this.getFooterTable())?[]:this.getFooterTable().get(1).rows, footerHeight = 0;
                    for (var j = 0; j < frozenFooterRows.length ; j++) {
                        footerHeight = ej.max([frozenFooterRows[j].getClientRects()[0].height, movableFooterRows[j].getClientRects()[0].height]);
                        $(frozenFooterRows[j]).height(footerHeight); $(movableFooterRows[j]).height(footerHeight);
                    }
                }
                this._getRowHeights()
                if (!ej.isNullOrUndefined(this.getContent().data("ejScroller")) && (this.getScrollObject()._vScrollbar != null || this.getScrollObject().isVScroll())) {
                    var scroller = this.getScrollObject()._vScrollbar;
                    if (ej.isNullOrUndefined(scroller) || scroller.value() != scroller.model.maximum)
						this._scrollObject.refresh(this.model.scrollSettings.frozenColumns > 0);                        
                }

            }
        },
                
        dataSource: function (dataSource, templateRefresh) {
            if (templateRefresh)
                this._templateRefresh = true;
            this._dataSource(dataSource);
			this._currentPage(1);
			if(this.model.scrollSettings.enableVirtualization){
				this.model.pageSettings.totalPages = null;
				this._currentVirtualIndex = 1;
				if (this.getContent().ejScroller("isVScroll"))
					this.getContent().ejScroller("scrollY", 0, true);
			}
			this._updateDataSource = true;
			this._refreshDataSource(dataSource, templateRefresh);			
			if (this.model.allowPaging || this.model.scrollSettings.allowVirtualScrolling) {
			    var model = this._refreshVirtualPagerInfo();
			    this._showPagerInformation(model);
			}
            if (this.model.scrollSettings.allowVirtualScrolling) {
				if(this.model.scrollSettings.enableVirtualization && this._isLocalData)
					this._refreshVirtualView(); 
				else
					this._refreshVirtualContent(); 
                if (this.getContent().ejScroller("isHScroll"))
                    this.getContent().ejScroller("scrollX", 0, true);
                if (this.getContent().ejScroller("isVScroll")) {
					if(!this.model.scrollSettings.enableVirtualization)
						this.getContent().ejScroller("scrollY", 0, true);
                    this.element.find(".e-gridheader").addClass("e-scrollcss");
                }
                else
                    this.element.find(".e-gridheader").removeClass("e-scrollcss");
            }
			if(!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount)
				this._addLastRow();
			this._trigger("dataBound", {});
        },
        _refreshDataSource: function (dataSource, refreshTemplate) {
            if (dataSource instanceof ej.DataManager)
                this._dataManager = dataSource;
            else
                this._dataManager = ej.DataManager(dataSource);
			this._isRemoteSaveAdaptor = (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.remoteSaveAdaptor);
            this._isLocalData = (!(this._dataSource() instanceof ej.DataManager) || (this._dataManager.dataSource.offline || this._isRemoteSaveAdaptor || this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor));
			if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
				this._refreshVirtualViewData();
				this._virtualDataRefresh = true;
				this._isLocalData && this._refreshVirtualViewDetails(true);
			}
			this.refreshContent(ej.isNullOrUndefined(refreshTemplate) ? true : refreshTemplate);
        },
        _hideRowTemplateColumns: function (column, state) {
            var index = $.inArray(column, this.model.columns);
            this.getContentTable().find("tbody:first > tr").find('> td:nth-child(' + (index + 1) + ')')[state == "hide" ? "addClass" : "removeClass"]("e-hide");
        },
        hideColumns: function (c) {
            var i, count = 0, args = {}, index, colIndex, newHideCol = []; var htext, field, hiddenFrozenCount = 0;
            htext = typeof (c) == "string" ? this.getColumnByHeaderText(c) : this.getColumnByHeaderText(c[0]);
			colIndex = typeof (c) == "number"? this.getColumnByIndex(c) : this.getColumnByIndex(c[0]);
            field = typeof (c) == "string" ? this.getColumnByField(c) : this.getColumnByField(c[0]);
            this._showHideColumns = true;
            var colHeaderText = [];
            $.map(this.model.columns, function (val, i) {
                colHeaderText.push(val.headerText)
            });
            var duparr = this._isDuplicate(colHeaderText);
            var hidden = !duparr ? "_hiddenColumns" : "_hiddenColumnsField";
            var visible = !duparr ? "_visibleColumns" : "_visibleColumnsField";
			if (!duparr && (field != null || colIndex != null)){
                if ($.isArray(c)) {
                    for (var i = 0; i < c.length; i++) {
                      var cfield = (colIndex != null) ? this.getColumnByIndex(c[i]):this.getColumnByField(c[i]); 
                        c[i] = cfield != null ? cfield.headerText : c[i];
                    }
                }
                else
                    c = (colIndex != null) ? colIndex.headerText: field.headerText;
            }
		    var getColumnMethod = (colIndex != null) ? "getColumnByIndex": "getColumnByHeaderText";
            if ($.isArray(c)) {
                for (i = 0; i < c.length; i++) {
                    index = $.inArray(c[i], this[visible]);
                    
                    if (index != -1) {
                        this[hidden].push(c[i]);
                        this[visible].splice(index, 1);
                    }
					else if(index==-1 && visible=="_visibleColumnsField" && $.inArray(c[i],this[hidden])==-1 && ej.isNullOrUndefined(this.getColumnByField(c[i]))){
					    this[hidden].push(this[getColumnMethod](c[i]).field) && this["_hiddenColumns"].push(this[getColumnMethod](c[i]).field);
					    this[visible].splice($.inArray(this[getColumnMethod](c[i]).field, this[visible]), 1) && this["_visibleColumns"].splice($.inArray(c[i], this["_visibleColumns"]), 1);
					}
                    if (this.model.rowTemplate != null) {
                        var templateColumn = index != -1 ? this.getColumnByHeaderText(c[i]) : this[getColumnMethod](c[i]);
                        this._hideRowTemplateColumns(templateColumn, "hide");
                    }
				}
            } else {
                index = $.inArray(c, this[visible]);
                if (index != -1) {
                    this[hidden].push(c);
                    this[visible].splice(index, 1);
                }
				else if(index==-1 && visible=="_visibleColumnsField" && $.inArray(c,this[hidden])==-1 && ej.isNullOrUndefined(this.getColumnByField(c))){
				    this[hidden].push(this[getColumnMethod](c).field) && this["_hiddenColumns"].push(this[getColumnMethod](c).field);
				    this[visible].splice($.inArray(this[getColumnMethod](c).field, this[visible]), 1) && this["_visibleColumns"].splice($.inArray(c, this["_visibleColumns"]), 1);
				}
                if (this.model.rowTemplate != null) {
                    var templateColumn = index != -1 ? this.getColumnByHeaderText(c) : this[getColumnMethod](c);
                    this._hideRowTemplateColumns(templateColumn, "hide");
                }
            }
            for (i = 0; i < this.model.columns.length; i++) {
                var com = !duparr ? "headerText" : "field";
                if ($.inArray(ej.isNullOrUndefined(this.model.columns[i][com]) || this.model.columns[i][com] == "" ? this.model.columns[i]["headerText"] : this.model.columns[i][com], this[hidden]) != -1) {
                    this.model.columns[i].visible && newHideCol.push(this.model.columns[i]);
                    this.model.columns[i].visible = false;
                    if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0 && this.model.columns.indexOf(this.model.columns[i]) < this.model.scrollSettings.frozenColumns)
                        hiddenFrozenCount++;
                    count++;
                }
                if (this[hidden].length == count)
                    break;
            }
            args.requestType = "refresh"; args.action = "hideColumn";
            this._hideHeaderColumn(this[hidden], duparr);
            if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
                var $table = this._renderGridHeader();
                this.element.find('.e-gridheader').replaceWith($table[0])
                if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") this._renderFiltering();
                if (this.model.allowReordering)
                   this._headerCellreorderDragDrop();
            }
            this.refreshTemplate();
            if (this.model.scrollSettings.allowVirtualScrolling)
                this._virtualShowHide(args);
            if(this._isAddNew && this.model.isEdit){
                this.model.query = this.commonQuery.clone();
                this._ensureDataSource(args);
                this._isAddNew = false;
            }
            this.sendDataRenderingRequest(args);
            this.rowHeightRefresh();
            if (this.model.allowScrolling) {
                if (this.model.scrollSettings.frozenColumns == 0 && !ej.isIOSWebView() && this.getBrowserDetails().browser == "msie") {
                    var tableWidth = this._calculateWidth();
                    this.getHeaderTable().width(tableWidth);
                    if (!ej.isNullOrUndefined(this.getFooterTable()))
                        this.getFooterTable().width(tableWidth);
                }
                if (!ej.isNullOrUndefined(this._scrollObject))
                this.getScrollObject().refresh();
            }
            if (this.model.showColumnChooser)
                this._refreshColumnChooserList();
             if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
				if(hiddenFrozenCount == this.model.scrollSettings.frozenColumns){
				    this._frozenPaneRefresh();
				}				
                 this.getScrollObject().refresh();
             }
			this._showHideColumns = false;
        },
        
        showColumns: function (c) {
            var i, count = 0, args = {}, index, colIndex, column, newVisColumns = []; var htext, field;
            htext = typeof (c) == "string" ? this.getColumnByHeaderText(c) : this.getColumnByHeaderText(c[0]);
			colIndex = typeof (c) == "number"? this.getColumnByIndex(c) : this.getColumnByIndex(c[0]);
            field = typeof (c) == "string" ? this.getColumnByField(c) : this.getColumnByField(c[0]);
            
			this._showHideColumns = true;
            var colHeaderText = [];
            $.map(this.model.columns, function (val, i) {
                colHeaderText.push(val.headerText)
            });
            var duparr = this._isDuplicate(colHeaderText);
            var hidden = !duparr ? "_hiddenColumns" : "_hiddenColumnsField";
            var visible = !duparr ? "_visibleColumns" : "_visibleColumnsField";
			if (!duparr && (field != null || colIndex != null)){
                if ($.isArray(c)) {
                    for (var i = 0; i < c.length; i++) {
                      var cfield = (colIndex != null) ? this.getColumnByIndex(c[i]):this.getColumnByField(c[i]); 
                        c[i] = cfield != null ? cfield.headerText : c[i];
                    }
                }
                else
                    c = (colIndex != null) ? colIndex.headerText: field.headerText;
             }
		    var getColumnMethod = (colIndex != null) ? "getColumnByIndex": "getColumnByHeaderText";
            if ($.isArray(c)) {
                for (i = 0; i < c.length; i++) {
                    index = $.inArray(c[i], this[hidden]);
                    
                    if (index != -1) {
                        this[hidden].splice(index, 1);
                        this[visible].push(c[i]);
                    }
					else if(index==-1 && hidden=="_hiddenColumnsField" && $.inArray(c[i],this[visible])==-1 && ej.isNullOrUndefined(this.getColumnByField(c[i]))){
					    this[visible].push(this[getColumnMethod](c[i]).field) && this["_visibleColumns"].push(c[i]);
					    this[hidden].splice($.inArray(this[getColumnMethod](c[i]).field, this[hidden]), 1) && this["_hiddenColumns"].splice($.inArray(c[i], this["_hiddenColumns"]), 1);
					}
                    if (this.model.rowTemplate != null) {
                        var templateColumn = index != -1 ? this.getColumnByHeaderText(c[i]) : this[getColumnMethod](c[i]);
                        this._hideRowTemplateColumns(templateColumn, "show");
                    }
                }
            } else {
                index = $.inArray(c, this[hidden]);
                if (index != -1) {
                    this[hidden].splice(index, 1);
                    this[visible].push(c);
                }
				else if(index==-1 && hidden=="_hiddenColumnsField" && $.inArray(c,this[visible])==-1 && ej.isNullOrUndefined(this.getColumnByField(c))){
				    this[visible].push(this[getColumnMethod](c).field) && this["_visibleColumns"].push(c);
				    this[hidden].splice($.inArray(this[getColumnMethod](c).field, this[hidden]), 1) && this["_hiddenColumns"].splice($.inArray(c, this["_hiddenColumns"]), 1);
				}
                if (this.model.rowTemplate != null) {
                    var templateColumn = index != -1 ? this.getColumnByHeaderText(c) : this[getColumnMethod](c);
                    this._hideRowTemplateColumns(templateColumn, "show");
                }
            }
            for (i = 0; i < this.model.columns.length; i++) {
                var com = !duparr ? "headerText" : "field";
                if ($.inArray(ej.isNullOrUndefined(this.model.columns[i][com]) || this.model.columns[i][com] == "" ? this.model.columns[i]["headerText"] : this.model.columns[i][com], this[visible]) != -1) {
                    !this.model.columns[i].visible && newVisColumns.push(this.model.columns[i])
                    this.model.columns[i].visible = true;
                    count++;
                }
                if (this[visible].length == count)
                    break;
            }


            if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
                var frozenHide = false;
                for (var i = 0; i < newVisColumns.length; i++) {
                    var index = this.model.columns.indexOf(newVisColumns[i]);
                    if (index < this.model.scrollSettings.frozenColumns)
                        frozenHide = true;
                }
                if (frozenHide) {
					for(var i = 0; i < this.model.columns.length; i++){
						if($.inArray(this.model.columns[i].headerText, this["_hiddenColumns"]) != -1)
							this.model.columns[i].visible = false;
						else if($.inArray(this.model.columns[i].headerText, this["_visibleColumns"]) != -1)
							this.model.columns[i].visible = true;
					}
                    var $table = this._renderGridHeader();
                    this.element.find('.e-gridheader').replaceWith($table[0])
                    if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") this._renderFiltering();
                    if (this.model.allowReordering)
                        this._headerCellreorderDragDrop();
                }
            }

            args.requestType = "refresh"; args.action = "showColumn";
            this._showHeaderColumn(this[visible], duparr);

            this.refreshTemplate();
            if (this.model.scrollSettings.allowVirtualScrolling)
                this._virtualShowHide(args);
            if (this._isAddNew && this.model.isEdit) {
                this.model.query = this.commonQuery.clone();
                this._ensureDataSource(args);
                this._isAddNew = false;
            }
            this.sendDataRenderingRequest(args);
            this.rowHeightRefresh();
            if (this.model.allowScrolling && !ej.isNullOrUndefined(this._scrollObject)) {
                this.getScrollObject().refresh();
            }
            if (this.model.showColumnChooser)
                this._refreshColumnChooserList();
			this._showHideColumns = false;
        },
        _virtualShowHide: function (args) {
            this._currentPage(1);
            this.model.query = this.commonQuery.clone();
            this._ensureDataSource(args);
            this._loadedJsonData = [];
            this._prevPage = this._currentPage();
        },
        
        resizeColumns: function (column, width) {
            if (column instanceof Array) {
                for (var i = 0; i < column.length; i++) {
                    var colWidth = width instanceof Array ? width[i] : width;
                    this._setWidthColumnCollection(column[i], colWidth);
                }
            }
            else
                this._setWidthColumnCollection(column, width);
            this.setWidthToColumns();
            if (this.model.scrollSettings.frozenColumns){
                this._frozenAlign();
                this.rowHeightRefresh();
            }
			if(!ej.isNullOrUndefined(this.getFooterContent()))
				this._scrollFooterColgroup();
			this._refreshScroller({requestType: "refresh"})
        },
        _setWidthColumnCollection: function (column, width) {
            var col = this.getColumnByHeaderText(column) || this.getColumnByField(column);
            col.width = width;
            if ($.inArray(col.field, this._disabledResizingColumns) == -1)
                this.columnsWidthCollection[$.inArray(col, this.model.columns)] = width;
        },
        
        refreshTemplate: function () {
            this.addInitTemplate();
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
				this._processEditing();
            }
            if (this.model.allowGrouping) this.addGroupingTemplate();
        },
        refreshHeader: function () {
            var $header = this.element.find(".e-gridheader");
            this.element[0].replaceChild(this._renderGridHeader()[0], $header[0]);           
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                this._renderFiltering();
            this.model.allowGrouping && this.model.groupSettings.showDropArea && this._headerCellgDragDrop(); 
            this.model.allowReordering && this._headerCellreorderDragDrop();
            this.model.showColumnChooser && this._renderColumnChooserData(true);
			if(this.model.gridLines != "both")
			    this._showHeaderGridLines();
			if (this.model.mergeHeaderCellInfo != null) {
			    this.setWidthToColumns();
			    var args = { columnHeaders: this.getHeaderContent().find(".e-columnheader"), model: this.model }, proxy = this;
			    this._headerCellMerge(args);
			    this._trigger("mergeHeaderCellInfo", args);
			}
            this.refreshScrollerEvent();
        },        
        set_dropColumn: function (from, to) {
            if (this.model.allowReordering && from != to) {
                this.model.columns.splice(to, 0, this.model.columns.splice(from, 1)[0]);
                var columns = this.model.columns;
                var $header = this.getHeaderTable().find(".e-columnheader:last .e-headercell").not(".e-stackedHeaderCell");
                var $headerCell = $header.find(".e-headercelldiv");
                var scrollLeft = this.getHeaderContent().find("div").first().scrollLeft();
                if (this.model.allowSorting && this.model.sortSettings.sortedColumns.length || this.model.groupSettings.showToggleButton) {
                    $header.find("span.e-ascending").remove();
                    $header.find("span.e-descending").remove();
                    $header.find("span.e-gridgroupbutton").remove();
                }
                if (this.model.allowSorting && this.model.sortSettings.sortedColumns.length) 
                    $header.eq(from).find("span").remove();
                if (!this.model.scrollSettings.frozenColumns)
                    this.getHeaderTable().find("colgroup").replaceWith(this._getMetaColGroup());
                (this.model.detailsTemplate != null || this.model.childGrid != null) && this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());

                //Remove and Returns name/value pair of element attributes
                var removeAttr = function (ele) {
                    var names = []; if (ele == undefined) return;
                    if (["", undefined].indexOf(ele.value) == -1) {
                        names.push({ name: "value", value: ele.value }); ele.value = "";
                    }
					if(ele.hasAttribute("value"))
						ele.removeAttribute("value");
                    for (var e = 0, eAttr = ele.attributes, eLen = eAttr.length; e < eLen; e++) {
                        var regex = /^jQuery[0-9]+$/;
                        !eAttr[e].name.match(regex) && names.push({ name: eAttr[e].name, value: eAttr[e].value });
                    }
                    for (var a = 0, aLen = names.length; a < aLen; a++) {
                        $(ele).removeAttr(names[a].name);
                    }
                    return names;
                };
                //Add attributes to the ele
                var addAttr = function (coll, ele) {
                    if (ele == undefined) return;
                    for (var e = 0, eLen = coll.length; e < eLen; e++) {
                        if (coll[e].name == "value") ele.value = coll[e].value;
                        $(ele).attr(coll[e].name, coll[e].value);
                    }
                };

                if (this.getHeaderTable().find(".e-fltrtempdiv").length == 0 && this.getHeaderTable().find(".e-filterdiv").length > 0)
                    var $filterCell = this.getHeaderTable().find(".e-filterdiv input");
                var $fState = ej.isNullOrUndefined($filterCell);
                var $attributeCollection = { "cellattributes": [], "headerattributes": [], "filtercellattributes": [], "filterThattributes": [] };
                var fromIndex = from < to ? from : to;
                var toIndex = from < to ? to : from;
                
                for (var i = fromIndex, j = 0; i <= toIndex; i++) {
                    var hIndx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? i + 1 : i;
                    $attributeCollection.headerattributes[j] = removeAttr($header[hIndx]);
                    $attributeCollection.cellattributes[j] = removeAttr($headerCell[i]);
                    $attributeCollection.filtercellattributes[j] = !$fState ? removeAttr($filterCell[i]) : [];
                    $attributeCollection.filterThattributes[j] = !$fState ? removeAttr($($filterCell[i]).closest("th")[0]) : [];
                    j++;
                }

                var spliceFrom = from < to ? $attributeCollection.cellattributes.length - 1 : 0;
                var spliceTo = from < to ? 0 : $attributeCollection.cellattributes.length - 1;

                for (var prop in $attributeCollection)
                    $attributeCollection[prop].splice(spliceFrom, 0, $attributeCollection[prop].splice(spliceTo, 1)[0]);

                
                for (var i = fromIndex, j = 0; i <= toIndex; i++) {
                    var indx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? i + 1 : i;
                    addAttr($attributeCollection.headerattributes[j], $header[indx]);
                    addAttr($attributeCollection.cellattributes[j], $headerCell[i]);
                    !$fState && addAttr($attributeCollection.filtercellattributes[j], $filterCell[i]);
                    !$fState && addAttr($attributeCollection.filterThattributes[j], $($filterCell[i]).closest("th")[0]);
                    j++;
                }
                if (this.model.allowFiltering && ["menu", "excel"].indexOf(this.model.filterSettings.filterType) != -1) {
                    if (this._$fDlgIsOpen)
                        this._closeFDialog();
                    var col = this.model.columns;
                    $header.find(".e-filtericon").remove();
                    for (var i = 0; i < col.length; i++) {
                        if (col[i]["allowFiltering"] || ej.isNullOrUndefined(col[i]["allowFiltering"])) {
                            var filterHeader = $header.find(".e-headercelldiv[data-ej-mappingname=\"" + col[i].field + "\"]").closest(".e-headercell")
                            filterHeader.append(ej.buildTag('div.e-filtericon e-icon e-filterset'));
                        }
                    }
                    this._refreshFilterIcon();
                }

                this.columnsWidthCollection.splice(to, 0, this.columnsWidthCollection.splice(from, 1)[0]);
                var headerCell;
                this._fieldColumnNames = this._headerColumnNames = [];
                for (var count = 0; count < columns.length; count++) {
                    this._fieldColumnNames[columns[count].headerText] = columns[count].field;
                    this._headerColumnNames[columns[count].field] = columns[count].headerText;
                    headerCell = $($headerCell[count]);
                    header = $($header[count]);
                    if (!ej.isNullOrUndefined(columns[count].headerTemplateID))
                        headerCell.html($(columns[count]["headerTemplateID"]).html());
                    else if (columns[count].type == "checkbox" && ej.isNullOrUndefined(columns[count]["headerText"]))
                        headerCell.html("<input type = 'checkbox' class = 'e-checkselectall'></input>");
                    else
                    columns[count].disableHtmlEncode ? headerCell.text(columns[count].headerText) : headerCell.html(columns[count].headerText);
                    if (this.model.groupSettings.showToggleButton && (ej.isNullOrUndefined(columns[count].allowGrouping) || columns[count].allowGrouping)) {
                        if ($.inArray(columns[count].field, this.model.groupSettings.groupedColumns) != -1)
                            header.append(this._getToggleButton().addClass("e-toggleungroup"));
                        else
                            header.append(this._getToggleButton().addClass("e-togglegroup"));
                        var $filterset = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").find(".e-headercell").not(".e-detailheadercell").find(".e-filterset");
                        $filterset.addClass("e-groupfiltericon");
                        if(this.model.enableRTL && !$filterset.length)
                            header.find(".e-togglegroupbutton").addClass("e-rtltoggle");
                    }
                }
                if (this.model.allowGrouping && this.model.allowSorting != true) {
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                        this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
                }
                if (this.model.allowSorting) {
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                        var opacity = 1;
                        var $sCol = this.model.sortSettings.sortedColumns[i];
                        var sortcolumn = this.getsortColumnByField($sCol.field);
                        var index = this.getColumnIndexByField($sCol.field);
                        var sortindex = $.inArray(sortcolumn, this.model.sortSettings.sortedColumns),
                        imageDirection = $sCol.direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
                        if (this.model.allowMultiSorting) {
                            for (var j = 1; j <= sortindex; j++) {
                                opacity = opacity + 1;
                            }
                            if ($headerCell.eq(index).css("text-align") == "right") {
                                if(this.model.sortSettings.sortedColumns.length > 1)
                                    $headerCell.eq(index).prepend(this._createSortNumber(opacity, $headerCell.eq(index)).addClass("e-sortnumber"));
                                $header.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
                            }
                            else {
                                $header.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
                                if (this.model.sortSettings.sortedColumns.length > 1)
                                    $headerCell.eq(index).append(this._createSortNumber(opacity, $headerCell.eq(index)).addClass("e-sortnumber"));
                            }
                        }
                        else {
                            imageDirection = $sCol.direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
                            $header.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
                        }
                        var $headertraversal = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").find(".e-headercell").not(".e-detailheadercell").eq(index);
                        var $filterset = $headertraversal.find(".e-filterset");
                        var $togglegroup = $headertraversal.find(".e-gridgroupbutton");
                        $filterset.addClass("e-sortfiltericon");
                        if(this.model.groupSettings.showToggleButton){
                            $filterset.addClass("e-sortfiltergroupicon");
                            $togglegroup.addClass("e-togglesortgroupfilter");
                            if(this.model.enableRTL && $filterset.length)
                                $headertraversal.find(".e-ascending,.e-descending").addClass("e-rtlsortfiltertoggle");
                        }
                        if(this.model.enableRTL) {
                            if((!$filterset.length || !$togglegroup.length) && (!$filterset.length && !$togglegroup.length))
                                $headertraversal.find(".e-ascending,.e-descending").addClass("e-rtlsortadjust");
                            else if(!$filterset.length || !$togglegroup.length)
                                $headertraversal.find(".e-ascending,.e-descending").addClass("e-rtlgrouporfilter");
                        }
                        else if(!this.model.enableRTL && !$filterset.length && !$togglegroup.length)
                            $headertraversal.find(".e-ascending,.e-descending").addClass("e-sortadjust");
                    }
                }
                if(this.getHeaderTable().find(".e-fltrtempdiv").length > 0 ){
                    this.getHeaderTable().find(".e-filterbar").first().remove();
					this._renderFiltering();
					this._renderFilterBarTemplate();
				}
                var args = {};
                args.requestType = ej.Grid.Actions.Reorder;
                this._isReorder = true;
                this.refreshTemplate();
				if(this._isAddNew && this.model.isEdit){
					this.model.query = this.commonQuery.clone();
					this._ensureDataSource(args);
					this._isAddNew = false;
				}
				this.setWidthToColumns();
				if (!this.model.scrollSettings.frozenColumns)
				    this.getHeaderContent().find("div").first().scrollLeft(scrollLeft);
                this.sendDataRenderingRequest(args);
                this._isReorder = false;
            }
        },
        
        getPager: function () {
            return this._gridPager;
        },
        
        getFooterTable: function () {
            return this._gridFooterTable;
        },

        setGridFooterTable: function (value) {
            this._gridFooterTable = value;
        },
        
        getFooterContent: function () {
            return this._gridFooterContent;
        },

        setGridFooterContent: function (value) {
            this._gridFooterContent = value;
        },
        
        getScrollObject: function () {
            if (this._scrollObject == null || ej.isNullOrUndefined(this._scrollObject.model))
                this._scrollObject = this.getContent().ejScroller("instance");
            return this._scrollObject;
        },
        setGridPager: function (value) {
            this._gridPager = value;
        },
        
        getRowHeight: function () {
            var rowHeight = -1;
			if (this.getContentTable() != null) {
				var trColl = this.getContentTable().find('tr:not(.e-virtualrow)'), index = trColl.length > 2 ? 1 : 0;
				if(trColl.length)
					var $trBound = trColl[index].getBoundingClientRect();
				if (trColl.length > 1) {
					if ($trBound && $trBound.height) {
						rowHeight = $trBound.height;
					} else
						rowHeight = trColl[index].offsetHeight;
				}
			}
			else if (!ej.isNullOrUndefined(this.model.rowTemplate) && !ej.isNullOrUndefined(this._dataSource()) && this._dataSource().length > 0) {
			    var temp = document.createElement('div');
			    var myTemplate = $.templates(this.model.rowTemplate);
			    var data = this._dataSource()[0];
			    temp.innerHTML = ['<table class="e-template-table">', myTemplate.render(data), '</table>'].join("");
			    $("body").append(temp.firstChild);
			    var tr = $("body").find(".e-template-table").find("tr")[0];
			    rowHeight = tr.offsetHeight;
			    $("body").find(".e-template-table").remove();
			}
            return rowHeight == -1 ? 32 : rowHeight;
        },
        
        getCurrentIndex: function () {
            return ((this._currentPage() - 1) * (this.model.pageSettings.pageSize));
        },
        
        getColumnByIndex: function (index) {
            if (index < this.model.columns.length)
                return this.model.columns[index];
            return null;
        },
        set_currentPageIndex: function (val) {
            var pageSetting = this.model.pageSettings;
            var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            if (pageSetting.totalPages == null)
                pageSetting.totalPages = Math.ceil(recordCount / pageSetting.pageSize);
            if (val > pageSetting.totalPages || val < 1 || val == this._currentPage())
                return false;
            if (ej.isNullOrUndefined(this._prevPageNo))
                this._prevPageNo = this._currentPage();
            this._currentPage(val);
            if (this._currentPage() != this._prevPageNo) {
                var args = {};
                args.requestType = "paging";
                this.gotoPage(this._currentPage(), args);
                return true;
            }
            else
                return false;
        },
        set_currentVirtualIndex: function (currentViewIndex) {                          
            if (currentViewIndex < 1 || (currentViewIndex != 1 && currentViewIndex != this._totalVirtualViews && currentViewIndex == this._currentVirtualIndex && this._checkCurrentVirtualView(this._virtualLoadedRows, currentViewIndex)))
                return false;                      
            this._prevVirtualIndex = this._currentVirtualIndex;							
            this._currentVirtualIndex = currentViewIndex;
			var currentPage = this._calculateCurrentViewPage();
			if(currentPage <= this.model.pageSettings.totalPages && !this._checkCurrentVirtualView(this._virtualLoadedRecords, this._currentVirtualIndex)){				
				if(this._prevVirtualIndex < currentViewIndex && currentViewIndex != 1){
					var setPage = this._isThumbScroll && currentPage != 1 ? currentPage : currentPage + 1;
                    if(!this._virtualPageRecords[setPage] && setPage <= this.model.pageSettings.totalPages)
                        this._setCurrentViewPage(setPage); 
					else	
						this._renderVirtulViewContent(currentPage);	
				}
				else if(this._prevVirtualIndex > currentViewIndex){
					var setPage = this._isThumbScroll ? currentPage : currentPage - 1;
                    if(this._virtualPageRecords[setPage] && !this._virtualLoadedRecords[currentViewIndex - 1])
                        setPage = currentPage - 1;
                    if(!this._virtualPageRecords[setPage] && setPage >= 1)
                        this._setCurrentViewPage(setPage);                                                     
				}                                                
                else 
                    this._renderVirtulViewContent(currentPage);
            }
            else 
                this._renderVirtulViewContent(currentPage);
            return true;            
        },
		_setCurrentViewPage: function(currentPage){
			this._needPaging = true;                
			this._prevPageNo = this._currentPage();             
            this.gotoPage(currentPage);
		},
		_renderVirtulViewContent: function(currentPage){
            this._needPaging = false;                      
            this._refreshVirtualView(this._currentVirtualIndex);
            this.element.ejWaitingPopup("hide");
        },
        _checkCurrentVirtualView: function(virtualContent, viewIndex){
            var virtualRowCount = this._virtualRowCount;            
            var prevView = viewIndex - 1, nextView = viewIndex + 1;
			if(virtualContent instanceof Array){
				if(virtualContent.length){
					if(((prevView == 0 || nextView == this._totalVirtualViews + 1) && $.inArray(viewIndex, virtualContent) != -1) || ($.inArray(prevView, virtualContent) != -1 && 
					$.inArray(viewIndex, virtualContent) != -1 && $.inArray(nextView, virtualContent) != -1))
						return true;					
				}				
			}
			else{
				var nextViewData = nextView == this._totalVirtualViews ? this._lastViewData : virtualRowCount;
				if((!this.initialRender && (viewIndex == 1 && this._virtualLoadedRows[viewIndex]) || viewIndex == this._totalVirtualViews && virtualContent == this._virtualLoadedRows && virtualContent[viewIndex]) ||
					((prevView == 0  && virtualContent[viewIndex] && virtualContent[viewIndex].length == virtualRowCount) || (nextView == this._totalVirtualViews + 1 && virtualContent[viewIndex] && virtualContent[viewIndex].length == this._lastViewData)) ||
					(virtualContent[prevView] && virtualContent[prevView].length == virtualRowCount && virtualContent[viewIndex] && virtualContent[viewIndex].length == virtualRowCount && virtualContent[nextView] && virtualContent[nextView].length == nextViewData))
						return true;								
			}
			return false;
        },
        expandCollapse: function ($target) {
            if ($target.prop("tagName") == "DIV" && ($target.parent().hasClass("e-recordplusexpand") || $target.parent().hasClass("e-recordpluscollapse") || $target.parent().hasClass("e-detailrowcollapse") || $target.parent().hasClass("e-detailrowexpand")))
                $target = $target.parent();
            var index = -1, fieldName, fieldvalue, parentGroup, collapsed;
            if (this.model.allowGrouping && (ej.isOnWebForms || this.initialRender)) {
                fieldName = $target.attr("data-ej-mappingname");
                fieldValue = $target.attr("data-ej-mappingvalue");
                if ($target.parents(".e-tabletd").length)
                    parentGroup = $target.parents(".e-tabletd").parent("tr").prev("tr").find(".e-recordplusexpand").attr("data-ej-mappingvalue");
                collapsed = this.model._groupingCollapsed;
                for (var i = 0; i < collapsed.length; i++) {
                    if (collapsed[i].key == fieldName && collapsed[i].value == fieldValue && (collapsed[i].parent == undefined || collapsed[i].parent == parentGroup)) {
                        index = i;
                        break;
                    }
                }
            }
            if (!($target.hasClass("e-recordplusexpand") || $target.hasClass("e-recordpluscollapse") || $target.hasClass("e-detailrowcollapse") || $target.hasClass("e-detailrowexpand")))
                return;
            if ($target.hasClass("e-recordplusexpand") && this.model.groupSettings.groupedColumns.length) {
                var cellIndex = $target.index();
                var $rows = $target.closest('tr').next();
                $rows.hide();
                $target.removeClass("e-recordplusexpand").addClass("e-recordpluscollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                if ((ej.isOnWebForms || this.initialRender) && index == -1)
                    this.model._groupingCollapsed.push({ key: fieldName, value: fieldValue, parent: parentGroup })
            } else if ($target.hasClass("e-recordpluscollapse") && this.model.groupSettings.groupedColumns.length) {
                var cellIndex = $target.index();
                var $rows = $target.closest('tr').next();
                var toExpandRows = [];
                var $row = $rows;
                if ($($row[0].cells[cellIndex]).hasClass("e-indentcell")) {
                    if ($row.children(".e-indentcell").length == ($target.parent().children('.e-indentcell').length) + 1) {
                        $row.show();
                        var $expand = $row.children(".e-recordplusexpand");
                        if ($expand != null && $expand.length > 0) {
                            toExpandRows.push($expand);
                        }
                    }
                }
                $target.removeClass("e-recordpluscollapse").addClass("e-recordplusexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                for (var i = 0; i < toExpandRows.length; i++) {
                    toExpandRows[i].removeClass("e-recordplusexpand").addClass("e-recordpluscollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                    this.expandCollapse(toExpandRows[i]);
                }
                if ((ej.isOnWebForms || this.initialRender) && index != -1)
                    this.model._groupingCollapsed.splice(index, 1);
            } else if ($target.hasClass("e-detailrowexpand")) {
                var cellIndex = $target.index(), proxy = this;
                var rowIndexValue = this.getIndexByRow($target.closest('tr'));
                var $rows = $target.closest('tr').next();
                $rows.hide(0, function () {
                    var args = { masterRow: $target.closest('tr'), detailsRow: $rows, masterData: proxy._currentJsonData[rowIndexValue] };
                    var foreignKeyData = proxy._getForeignKeyData(args.masterData);
                    if (!ej.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    proxy._trigger("detailsCollapse", args);
                });
                (proxy.model.childGrid != null || proxy.model.detailsTemplate != null) && proxy.model.allowScrolling && proxy._refreshScroller({ requestType: "refresh" });
                $target.removeClass("e-detailrowexpand").addClass("e-detailrowcollapse").find("div").addClass("e-gnextforward").removeClass("e-gdiagonalnext");
            } else if ($target.hasClass("e-detailrowcollapse")) {
                var cellIndex = $target.index(), proxy = this;
                var rowIndexValue = this.getIndexByRow($target.closest('tr'));
                var detailrow = $target.closest('tr').next();
                if (detailrow.hasClass("e-detailrow"))
                    $rows = detailrow;
                else {
                    var detailtr = ej.buildTag("tr.e-detailrow", "", { 'display': 'none' }, {});
                    var indenttd = ej.buildTag("td.e-detailindentcell");
                    var detailstd = ej.buildTag("td.e-detailcell", "", {}, { colspan: this._visibleColumns.length });
                    var detaildiv = ej.buildTag("div");
                    var count = $($target.closest('tr')).parents('.e-grid').length;
                    detaildiv.attr("id", "child" + count + "_grid" + rowIndexValue + Math.round(Math.random() * 1000));
                    $(detailtr).append(indenttd);
                    $(detailtr).append(detailstd);
                    var rowData = this._currentJsonData[rowIndexValue];
                    if (this.model.detailsTemplate) {
                        var detailTemplate = this.model.detailsTemplate,
                        ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (detailTemplate.startsWith("#") || detailTemplate.startsWith(".") || typeof detailTemplate === "object") ? this.model.ngTemplateId + "griddetailstemplate" : null;
                        $(detailtr).append(detailstd.append(this._renderEjTemplate(this.model.detailsTemplate, rowData, rowIndexValue, null, ngType)));
                    }
                        
                    $($target.closest('tr')).after(detailtr);
                    if (this.model.childGrid) {
                        this.model.childGrid["parentDetails"] = {
                            parentID: this._id,
                            parentPrimaryKeys: this.getPrimaryKeyFieldNames(),
                            parentKeyField: this.model.childGrid.queryString,
                            parentKeyFieldValue: rowData[this.model.childGrid.queryString],
                            parentRowData: rowData
                        }
                        $(detailtr).append(detailstd.append(detaildiv));
                    }
                    $rows = detailtr;
                }
                this._showGridLines();
                var toExpandRows = [];
                var $row = $rows;
                if ($($row[0].cells[cellIndex]).hasClass("e-detailindentcell")) {
                    $row.show(0, function () {
                        var args = { masterRow: $target.closest('tr'), detailsRow: $rows, masterData: proxy._currentJsonData[rowIndexValue] };
                        var foreignKeyData = proxy._getForeignKeyData(args.masterData);
                        if (!ej.isNullOrUndefined(foreignKeyData))
                            args.foreignKeyData = foreignKeyData;
                        proxy._trigger("detailsExpand", args);
                    });
                    if (!detailrow.hasClass("e-detailrow")) {
                        this._trigger("detailsDataBound", { detailsElement: detailtr, data: rowData, rowData: rowData }); // $(tbody).append(trchild);
                       this._trigger("refresh");
                    }
                    this.model.childGrid && !ej.isNullOrUndefined(detaildiv) && detaildiv.ejGrid(this.model.childGrid);
                    (proxy.model.childGrid != null || proxy.model.detailsTemplate != null) && proxy.model.allowScrolling && proxy._refreshScroller({ requestType: "refresh" });
                    var $expand = $row.children(".e-detailrowexpand");
                    if ($expand != null && $expand.length > 0) {
                        toExpandRows.push($expand);
                    }
                }
                $target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").addClass("e-gdiagonalnext").removeClass("e-gnextforward");
                for (var i = 0; i < toExpandRows.length; i++) {
                    toExpandRows[i].removeClass("e-detailrowexpand").addClass("e-detailrowcollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
                    this.expandCollapse(toExpandRows[i]);
                }
            }
            if (this.model.allowScrolling && !ej.isNullOrUndefined(this._scrollObject && this._scrollObject.model) && !$target.closest(".e-hscroll").length)
                this.getScrollObject().refresh();
            if (this.model.isResponsive)
                this.windowonresize();

        },
        _refreshGridPager: function () {
            if (this.getPager() != null) {
                var pagerModel = this.getPager().ejPager("model"), model = {};
                model.currentPage = this._currentPage();
                if ((ej.isNullOrUndefined(this._filteredRecordsCount) || this._filteredRecordsCount == 0) && (this.model.currentViewData != null && this.model.currentViewData.length == 0) && (ej.isNullOrUndefined(this._prevPageNo) || this._prevPageNo)) {
                    model.currentPage = 0;
                    this._prevPageNo = pagerModel.currentPage;
                    this.model.pageSettings.currentPage = 0;
                } else if (pagerModel.currentPage == 0 && (ej.isNullOrUndefined(this._prevPageNo) || this._prevPageNo))
                    model.currentPage = this._prevPageNo;
                 var excludeTr = this.model.editSettings.showAddNewRow  && this.model.groupSettings.groupedColumns.length ==  0 ? 1 : 0;
                model.totalRecordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount - excludeTr : this._searchCount : this._filteredRecordsCount;
                if (model.totalRecordsCount == 0 && model.currentPage != 0) {
                    model.currentPage = 0;
                    this.model.pageSettings.currentPage = 0;
                }
                if (ej.util.isNullOrUndefined(model.currentPage))
                    model.currentPage = this._currentPage();
                this.getPager().ejPager("option", model).ejPager("refreshPager");
                this.model.pageSettings.totalPages = pagerModel.totalPages || null;
				this.model.pageSettings.totalRecordsCount = pagerModel.totalRecordsCount || null;
            }
        },
        _showHeaderColumn: function (showColumns, field) {
            var $head = this.getHeaderTable().find("thead");
            var $headerCell = $head.find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
            var $filterBarCell = $head.find(".e-filterbar").find(".e-filterbarcell");
            var $col = this.getHeaderTable().find("colgroup").find("col"), column;
            for (var i = 0; i < showColumns.length; i++) {
                if (field)
                    column = ej.isNullOrUndefined(this.getColumnByField(showColumns[i])) ? this.getColumnByHeaderText(showColumns[i], ej.isNullOrUndefined(this.getColumnByField(showColumns[i]))) : this.getColumnByField(showColumns[i]);
                else
                    column = this.getColumnByHeaderText(showColumns[i]);
                var index = $.inArray(column, this.model.columns);
                index = (this.model.detailsTemplate != null || this.model.childGrid) ? index + 1 : index;
                var frznCol = this.model.scrollSettings.frozenColumns;
                if (frznCol != 0 && index >= frznCol)
                    var thIndex = $headerCell.eq(index).removeClass("e-hide").index() + frznCol;
                else
                    var thIndex = $headerCell.eq(index).removeClass("e-hide").index();
                $filterBarCell.eq(thIndex).removeClass("e-hide");
				 if ($col.length > this.model.columns.length && this.model.groupSettings.groupedColumns.length){
					var len = $col.length - this.model.columns.length;
					$col = $col.slice((this.model.detailsTemplate || this.model.childGrid) ? len + 1 : len);				
				}
                $col.eq(index).css("display", "");
            }
            if (this.model.showStackedHeader)
                this._refreshStackedHeader();
        },
        _hideHeaderColumn: function (hiddenColumns, field) {
            var $head = this.getHeaderTable().find("thead");
            var $headerCell = $head.find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
            var $filterBarCell = $head.find(".e-filterbar").find(".e-filterbarcell");
            var $col = this.getHeaderTable().find("colgroup").find("col"), column;
            for (var i = 0; i < hiddenColumns.length; i++) {
                if (field)
                    column = ej.isNullOrUndefined(this.getColumnByField(hiddenColumns[i])) ? this.getColumnByHeaderText(hiddenColumns[i], ej.isNullOrUndefined(this.getColumnByField(hiddenColumns[i]))) : this.getColumnByField(hiddenColumns[i]);
                else
                    column = this.getColumnByHeaderText(hiddenColumns[i]);
                var index = $.inArray(column, this.model.columns);
                var dindex = (this.model.detailsTemplate != null || this.model.childGrid) ? index + 1 : index;
                var frznCol = this.model.scrollSettings.frozenColumns;
                if (frznCol != 0 && index >= frznCol)
                    var thIndex = $headerCell.eq(dindex).addClass("e-hide").index() + frznCol;
                else
                    var thIndex = $headerCell.eq(dindex).addClass("e-hide").index();
                $filterBarCell.eq(thIndex).addClass("e-hide");
                if ($col.length > this.model.columns.length)
                    $col = $col.slice($col.length - this.model.columns.length);
                $col.eq(index).css("display", "none");
            }
            if (this.model.showStackedHeader) {
                this._refreshStackedHeader();
                this._colgroupRefresh();
            }
        },
        _refreshStackedHeader: function () {
			if(this.model.showStackedHeader){
            var stackedRows = this.model.stackedHeaderRows;
            for (var i = 0; i < stackedRows.length; i++) {
                if (this.model.scrollSettings.frozenColumns != 0) {
                    var frznHeader = $(this.getHeaderContent().find(".e-frozenheaderdiv"));
                    var movHeader = $(this.getHeaderContent().find(".e-movableheader"));
                    var newFrzn = this._createStackedRow(stackedRows[i], true);
                    var newMov = this._createStackedRow(stackedRows[i], false);
                    $(frznHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newFrzn);
                    $(movHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newMov);
                }
                else {
                    var stackedTR = this._createStackedRow(stackedRows[i], false);
                    if (this.getHeaderTable().find("tr.e-stackedHeaderRow")[i])
                        $(this.getHeaderTable().find("tr.e-stackedHeaderRow")[i]).replaceWith(stackedTR);
                    else
                        stackedTR.insertBefore(this.getHeaderTable().find("tr.e-columnheader:last"));
                }
            }
            var args = {};
            args.requestType = "refresh";
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0) {
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    this.getHeaderTable().find(".e-stackedHeaderRow").prepend(this._getGroupTopLeftCell());
            }
            this.model.allowScrolling && this._refreshScroller(args);
			}

        },
        _getStackedColumnByTarget: function (target) {
            var cls = (target.get(0) || {}).className, match = /e-row([0-9])-column([0-9])/.exec(cls),
                rIndx = match[1], cIndx = match[2], key = [rIndx, "stackedHeaderColumns", cIndx].join(".");

            return ej.getObject(key, this.model.stackedHeaderRows);
        },
        _checkSkipAction: function (args) {
            switch (args.requestType) {
                case ej.Grid.Actions.Save:
                case ej.Grid.Actions.Delete:
                    return true;
            }
            return false;
        },
        _unboundTemplateRendering: function (unboundTemplateId) {
            return $("#" + unboundTemplateId).html();
        },
        _processBindings: function (args) {
            this._requestType = args.requestType;
            this.model.query = this.commonQuery.clone();
            if (!this._checkSkipAction(args) && this._trigger("actionBegin", args))
                return true;
            if (this.model.editSettings.editMode == "batch" && args.requestType != "batchsave" && args.requestType != "cancel" && !this._confirmedValue && this._bulkChangesAcquired() && this.model.editSettings.showConfirmDialog) {
                this._confirmDialog.find(".e-content").html(this.localizedLabels.BatchSaveLostChanges);
                this._confirmDialog.ejDialog("open");
                this._requestArgs = args;
                return false;
            }
            if (!ej.isNullOrUndefined(this.model.dataSource) && (args.requestType == "refresh" || args.requestType == "filtering" ) && this.model.scrollSettings.allowVirtualScrolling) {
                this._currentPage(1);
                this._scrollValue = 0;
                this._loadedJsonData = [];
                this._prevPage = this._currentPage();
            }
            this._ensureDataSource(args);
            if (this.model.scrollSettings.allowVirtualScrolling) {
                if (args.requestType == "virtualscroll") {
                    this._loadedJsonData.push({ pageIndex: this._prevPage, data: this._currentJsonData });
                    this._prevPage = this._currentPage();
                }
                else if (!this.model.scrollSettings.enableVirtualization) {
                    this._virtualLoadedRecords[this._currentPage()] = !ej.isNullOrUndefined(this._currentPageData) ? this._currentPageData : this.model.currentViewData;
                    this._currentPageData = null;
                }
                if (args.requestType == "filtering") {
                    this._loadedJsonData = [];
                    this._prevPage = this._currentPage(); $("#" + this._id + "_externalEdit").remove();
                }
                if (args.requestType == ej.Grid.Actions.Delete || args.requestType == ej.Grid.Actions.Add)
                    this._refreshVirtualViewDetails();
            }
            if (this.model.scrollSettings.allowVirtualScrolling && args.requestType == "filtering" && this.model.filterSettings.filteredColumns.length >0) 
                this.getScrollObject().scrollY(0);
            if (this.model.enableRTL) {
                !this.element.hasClass("e-rtl") && this.element.addClass("e-rtl");
            } else {
                this.element.hasClass("e-rtl") && this.element.removeClass("e-rtl")
            }
            if (args.requestType == ej.Grid.Actions.Delete && this.model.groupSettings.groupedColumns.length == 0) {
                if (this.model.editSettings.showAddNewRow)
                    this.getContentTable().find(".e-addedrow").remove();
                args.tr.remove();
            }
            this._editForm = this.model.scrollSettings.frozenColumns > 0 || this.model.editSettings.showAddNewRow ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
			if (!(this.model.editSettings.showAddNewRow && args.requestType == "beginedit") && this._editForm.length != 0) {
                for(var i=0;i<this._editForm.length;i++){
					$(this._editForm[i]).find("select.e-dropdownlist").ejDropDownList("destroy");
					$(this._editForm[i]).find(".e-datepicker.e-js").ejDatePicker("destroy");
					$(this._editForm[i]).find(".e-datetimepicker.e-js").ejDateTimePicker("destroy");
					$(this._editForm[i]).find(".e-numerictextbox.e-js").ejNumericTextbox("destroy");
				}
            }
			if ((this._dataSource() instanceof ej.DataManager && !this._isRemoteSaveAdaptor && args.requestType != ej.Grid.Actions.BeginEdit && args.requestType != ej.Grid.Actions.Cancel && args.requestType != ej.Grid.Actions.Add) && (!(this._dataSource().adaptor instanceof ej.SqlDataSourceAdaptor) || (args.requestType != ej.Grid.Actions.Save && args.requestType != ej.Grid.Actions.Delete))) {
			    if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization && this.model.pageSettings.totalPages == this.model.pageSettings.currentPage && this.virtualLoadedPages.indexOf(((this.model.pageSettings.currentPage - 2) * (this.model.pageSettings.pageSize))) == -1) {
                    var pageQuery = ej.pvt.filterQueries(this.model.query.queries, "onPage");
                    this.model.query.queries.splice($.inArray(pageQuery[0], this.model.query.queries), 1);
                    this.model.query.page(this._currentPage() - 1, this.model.pageSettings.pageSize);
                    var lastQueryPromise = this._dataSource().executeQuery(this.model.query);
                    this.model.query.queries.splice($.inArray(pageQuery[0], this.model.query.queries), 1);
                    this.model.query.page(this._currentPage(), this.model.pageSettings.pageSize);
                }
                if (this._virtualSelectedRows && this._virtualSelectedRows.length > 0) {
                    this.model.query.addParams('virtualSelectRecords', this._virtualSelectedRows)
                }
                var queryPromise = this._queryPromise = this._dataSource().executeQuery(this.model.query);
                var waitingPopup = this.element.ejWaitingPopup("instance");
                var proxy = this;
                this.element.ejWaitingPopup("show");
                if (proxy._dataSource().ready) {
                    proxy._dataSource().ready.done(function () {
                        proxy._processDataRequest(proxy, args, queryPromise, lastQueryPromise)
                    });
                }
                else {
                    proxy._processDataRequest(proxy, args, queryPromise, lastQueryPromise)
                }
            } else {
                if (this._isRelationalRendering(args))
                    this._setForeignKeyData(args);
                else
                    this.sendDataRenderingRequest(args);
            }
        },
        _processDataRequest: function (proxy, args, queryPromise, lastQueryPromise) {
            queryPromise.done(ej.proxy(function (e) {
                if(e.count > 0 && !proxy._currentPage()){
                    proxy._currentPage(1);
                }
                if (ej.isNullOrUndefined(proxy.element) || proxy._dataSource().adaptor instanceof ej.SqlDataSourceAdaptor)
                    return;
                if (lastQueryPromise && !proxy._previousPageRendered)
                    proxy._processLastPageData(proxy, args, e, lastQueryPromise);
                else if (proxy._remoteLastPageRendered && proxy.model.pageSettings.currentPage == proxy.model.pageSettings.totalPages - 1 && !proxy.model.scrollSettings.enableVirtualization) {
                    var count = proxy.model.pageSettings.pageSize - proxy._previousPageLength;
                    for (var dupRow = 0; dupRow < count; dupRow++) {
                        var removeEle = proxy.getRows()[proxy.getRows().length - (proxy.model.pageSettings.pageSize - dupRow)];
                        removeEle.remove();
                    }
                    proxy._tempPageRendered = true;
                    proxy.model.currentViewData = e.result;
                    proxy._relationalColumns.length == 0 && proxy.element.ejWaitingPopup("hide");
                }
                else {
                    if (proxy._identityKeys.length && args.action == "add" && this.adaptor instanceof ej.ODataAdaptor)
                        proxy._processIdentityField(e.result, args);
                    if (proxy.model.pageSettings.currentPage == proxy.model.pageSettings.totalPages - 1 && !proxy._remoteLastPageRendered)
                        proxy._previousPageRendered = true;
                    proxy.model.currentViewData = e.result == null ? [] : e.result;
                    if (proxy._$fkColumn && proxy.model.filterSettings.filterType == "excel" && proxy.model.filterSettings.filteredColumns.length > 0)
                        proxy._fkParentTblData = e.result;
                    proxy._relationalColumns.length == 0 && proxy.element.ejWaitingPopup("hide");
                }
				if(proxy.model.allowScrolling && proxy.model.scrollSettings.allowVirtualScrolling && proxy.model.scrollSettings.enableVirtualization){
					if(args.requestType == "filtering"){
						proxy._gridRecordsCount = proxy._filteredRecordsCount = e.count;
						proxy._refreshVirtualViewDetails();
					}
					if(e.result.length){
					    if (proxy._isInitNextPage || proxy._isLastVirtualpage) {
							proxy._gridRecordsCount = e.count;
                            proxy._refreshVirtualViewDetails();
					        proxy._setInitialCurrentIndexRecords(e.result, proxy._currentPage());
					        proxy._isInitNextPage = proxy._isLastVirtualpage = false;
					    }
					    else {
					        proxy._gridRecordsCount = e.count;
                            proxy._refreshVirtualViewDetails();
					        proxy._setVirtualLoadedRecords(e.result, proxy._currentPage());
					    }
						if(proxy._isThumbScroll && !proxy._checkCurrentVirtualView(proxy._virtualLoadedRecords, proxy._currentVirtualIndex))
							proxy._checkPrevNextViews();																										
						proxy._remoteRefresh = true;
					}
					else
						proxy.getContent().find(".e-virtualtop, .e-virtualbottom").remove();					
				}
                if (!ej.isNullOrUndefined(e.aggregates))
                    proxy._remoteSummaryData = e.aggregates;
                if (args.templateRefresh) {
                   proxy.refreshHeader(); 
                }
                if (ej.isNullOrUndefined(lastQueryPromise) || (ej.isNullOrUndefined(proxy._previousPageRendered) || proxy._previousPageRendered))
                    proxy._processData(e, args);
				if (!ej.isNullOrUndefined(proxy._unboundRow) && args.selectedRow != proxy._unboundRow && args.requestType == "save") {
                    proxy._unboundRow.find(".e-editbutton").trigger("click");
                    proxy._unboundRow = null;
                }
            }));
            queryPromise.fail(ej.proxy(function (e) {
                if (ej.isNullOrUndefined(proxy.element))
                    return;
                proxy.element.ejWaitingPopup("hide");
                args.error = e.error;
                e = [];
                proxy.model.currentViewData = [];
                proxy._processData(e, args);
                if (!ej.isNullOrUndefined(proxy.getPager())) {
                    proxy.getPager().ejPager({ currentPage: 0, totalRecordsCount: 0 });
                }
                proxy._trigger("actionFailure", args);
            }));
        },
        _processIdentityField: function (result, args) {
            var _pKey = this._primaryKeys[0];
            var resultPK = ej.distinct(result, _pKey);
            var curPK = ej.distinct(this.model.currentViewData, _pKey);
            var addPK = $.grep(resultPK, function (value) {
                if ($.inArray(value, curPK) == -1)
                    return true;
                return false;
            });
            var data = ej.DataManager(result).executeLocal(new ej.Query().where(_pKey, "equal", addPK))[0]
            args.data = ej.isNullOrUndefined(data) ? args.data : data;
        },
        _processLastPageData: function (proxy, args, currentData, lastQueryPromise) {
            lastQueryPromise.done(ej.proxy(function (e) {
                proxy.element.ejWaitingPopup("hide");
                proxy.model.previousViewData = e.result;
                if (proxy.model.previousViewData && proxy.model.previousViewData.length != 0) {
                    proxy._previousPageLength = currentData.result.length;
                    proxy._currentPageData = currentData.result;
                    ej.merge(proxy.model.previousViewData, currentData.result);
                    proxy.model.currentViewData = proxy.model.previousViewData;
                    proxy._remoteLastPageRendered = true;
                }
                proxy._processData(currentData, args);
            }));
            lastQueryPromise.fail(ej.proxy(function (e) {
                proxy.element.ejWaitingPopup("hide");
                args.error = e.error;
                e = [];
                proxy.model.previousViewData = [];
                proxy._processData(e, args);
                proxy._trigger("actionFailure", args);
            }));
        },
        _createUnboundElement: function (column,count) {
            var divElement = document.createElement("div");
            column.headerText = !ej.isNullOrUndefined(column.headerText) ? column.headerText : ej.isNullOrUndefined(column.field) ? "" : column.field;
            if (!ej.isNullOrUndefined(column.headerText))
                divElement.id = this._id + column.headerText.replace(/[^a-z0-9|s_]/gi, '') + count + "_UnboundTemplate";
            var $div = ej.buildTag("div.e-unboundcelldiv"), commands = column["commands"];
            for (var unbounType = 0; unbounType < commands.length; unbounType++) {
                var $button = ej.buildTag("button.e-flat e-" + commands[unbounType].type.replace(/\s+/g, "") + "button", "", {}, { type: "button" });
                $button.val(commands[unbounType].type);
                if (commands[unbounType].type == "save" || commands[unbounType].type == "edit")
                    $button.addClass("e-btnsub")
                if (commands[unbounType].type == "cancel" || commands[unbounType].type == "delete")
                    $button.addClass("e-btncan")
                $div.append($button);
            }
            $("body").append($(divElement).html($div).hide());
            return divElement;
        },
        _refreshUnboundTemplate: function ($target) {
            if (this._isUnboundColumn) {
                var index = 0;
                for (var column = 0; column < this.model.columns.length; column++) {
                    if (this.model.columns[column]["commands"]) {
                        var $unboundDivs = $target.find(".e-unboundcell.e-" + this.model.columns[column]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+column).find(".e-unboundcelldiv");
                        var commands = $.extend(true, [], this.model.columns[column].commands);
                        for (var j = 0; j < commands.length; j++) {
                            if (ej.isNullOrUndefined(commands[j].buttonOptions))
                            commands[j].buttonOptions = {};
                            commands[j].buttonOptions.width = ej.isNullOrUndefined(commands[j].buttonOptions.width) ? "52" : commands[j].buttonOptions.width;
                            commands[j].buttonOptions.height = ej.isNullOrUndefined(commands[j].buttonOptions.height) ? "28" : commands[j].buttonOptions.height;
                            commands[j].buttonOptions.cssClass = ej.isNullOrUndefined(commands[j].buttonOptions.cssClass) ? this.model.cssClass : commands[j].buttonOptions.cssClass;
                            commands[j].buttonOptions.enableRTL = this.model.enableRTL;
                            var $buttons = $unboundDivs.find(".e-" + commands[j].type.replace(/\s+/g, "") + "button");
                            if (!this.model.isEdit || this._requestType == "cancel" || this._requestType == "sorting" || this._requestType == "grouping" || this._requestType == "filtering" || this._requestType == "paging") {
								if ($target.closest(".e-editcell").length) {
									if (commands[j].type == "save" || commands[j].type == "cancel")
										$buttons.show();
									else {
										$buttons.hasClass("e-deletebutton") && $buttons.hide();
										$buttons.hasClass("e-editbutton") && $buttons.hide();
									}
								} else {
									if (commands[j].type == "save" || commands[j].type == "cancel")
										$buttons.hide();
									else {
										$buttons.hasClass("e-deletebutton") && $buttons.show();
										$buttons.hasClass("e-editbutton") && $buttons.show();
									}
								}
                            }
                            for (var i = 0; i < $buttons.length; i++) {
                                if ($($buttons[i]).data("ejButton"))
                                    $($buttons[i]).ejButton("destroy");
                            }
                            $buttons.ejButton(commands[j].buttonOptions);
                        }
                    } else
                        continue;
                }
            }
        },
        _gridTemplate: function (self, templateId, index) {
            var $column = self.model.columns[index];
            if (self.model.scrollSettings.enableVirtualization)
                this.index += self._currentVirtualRowIndex;
            if ((!ej.isNullOrUndefined(self.model.ngTemplateId) && self._isAddNew) || !ej.isNullOrUndefined(self._isGrouping))
                this.index = self._isAddNew ? 0 : self._currentJsonData.indexOf(this.data);
			  this.index = ej.isNullOrUndefined(this.index) ? 0 : this.index;
            return self._renderEjTemplate("#" + templateId, this.data, this.index, $column);
        },
        _createTemplateElement: function (column, appendTo /* container to append */, text) {
            var tmpl = column["templateID" in column ? "templateID" : "template"], quickReg = /^#([\w-]*)/,
                match = quickReg.exec(tmpl), scriptReg = /^<script/i, appendTo = appendTo || $("body"), scripEle,
                idText = text ? "Pager" : (column.headerText + $.inArray(column, this.model.columns) + "_") + "Template";

            var options = {
                name: "SCRIPT",
                type: "text/x-template",
                text: tmpl,
                id: (this._id + idText).replace(/(\\|[^0-9A-z-_])/g, "")
            };

            if ( match && match[1] )
                scripEle = document.getElementById(match[1]);
            else {
                if (scriptReg.test(tmpl)) // branch here to handle tmpl string with SCRIPT. 
                    scripEle = $(tmpl).get(0);
                else
                    scripEle = ej.buildTag(options.name, options.text).get(0);
            }

            scripEle.id = scripEle.id || options.id; // Update Id and type if not in scriptElement template string.
            scripEle.type = scripEle.type || options.type;

            appendTo.append(text ? $(scripEle).html() : scripEle); //if `text` then append html instead of element.

            return scripEle;
        },
        _renderGridPager: function () {
            var $div = $(document.createElement('div'));
            var pagerModel = {};
            this.model.pageSettings.change = this._gPagerClickHandler;
            this.model.pageSettings.pageSizeSelected = this._gPageSize;
            this.model.pageSettings.totalRecordsCount = this._gridRecordsCount || null;
            this.model.pageSettings.enableRTL = this.model.enableRTL;
            this.model.pageSettings.locale = this.model.locale;
            this.model.pageSettings.enableQueryString = this.model.pageSettings.enableQueryString;
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                pagerModel.enableExternalMessage = this.model.filterSettings.showFilterBarStatus;
            $.extend(pagerModel, this.model.pageSettings);
            pagerModel.currentPage = this._currentPage();
            pagerModel.masterObject = this;
            this.setGridPager($div);
            if(pagerModel.template != undefined)
                pagerModel.template = null;
            $div.ejPager(pagerModel);
            $div.ejPager("refreshPager");
            pagerModel = $div.ejPager("model");
            this.model.pageSettings.totalPages = pagerModel.totalPages || null;
            if (this._currentPage() !== pagerModel.currentPage)
                this._currentPage(pagerModel.currentPage);
            this._renderPagerTemplate($div);
            return $div;
        },
        _renderPagerTemplate: function (pager, showDefaults) {
            var model = this.model.pageSettings, defaults = pager.find(".e-pagercontainer").not(".e-template").length == 0;            
            pager.find(".e-pagercontainer.e-template").remove();

            if ((showDefaults || !model.enableTemplates) && defaults) //Used to enable default pager from disabled
                pager.ejPager("renderPager");

            if (model.enableTemplates) {                

                if (!model.showDefaults)
                    pager.children().remove();               

                var $customDiv = ej.buildTag('div', null, null, { "class": "e-pagercontainer e-template", "style": "width: auto;" });                
                this._createTemplateElement(this.model.pageSettings, $customDiv, true);                
                pager.append($customDiv)
            }          
           
        },
        _renderContext: function (e) {
            var menuitems = this.model.contextMenuSettings.contextMenuItems;
            var item, item2, i = 0;
            var ul = ej.buildTag('ul', "", {}, { id: this._id + '_Context' });
            if (!this.model.contextMenuSettings.disableDefaultItems) {
                for (i; i < menuitems.length; i++) {
                    item = menuitems[i];
                    item2 = this._items(item, "contextMenuItem");
                    ul.append(item2);
                }
            }
            var customitems = this.model.contextMenuSettings.customContextMenuItems;
            var subMenuItems = this.model.contextMenuSettings.subContextMenu;
            var custom, custom2, j = 0, template;
            for (j; j < customitems.length; j++) {
                custom = customitems[j];
                custom2 = this._items(custom, "customContextMenuItem");                
                for (var k = 0 ; k < subMenuItems.length; k++)
                    if ((typeof custom == "string" && custom ==  subMenuItems[k].contextMenuItem) || (typeof custom == "object" && custom.id ==  subMenuItems[k].contextMenuItem )) {
                        template = subMenuItems[k].template;
                        var ul1 = ej.buildTag('ul', "", {}, { id: this._id + '_subMenuContext' + k }), menuItem, menuItem1;
                        if(!ej.isNullOrUndefined(template))
                            ul1 = this._renderEjTemplate(template);
                        else{
                            for (var l = 0; l < subMenuItems[k].subMenu.length; l++) {
                                menuItem = subMenuItems[k].subMenu[l];
                                menuItem1 = this._items(menuItem, "subMenuItems");
                                ul1.append(menuItem1);
                            }
                        }
                        custom2.append(ul1);
                    }
                ul.append(custom2);
            }
            if (ul.find("li").length > 0) {
                this.element.append(ul);
                var parentControl = this.element.parents("div.e-grid");
                var native = ej.Menu.prototype._showContextMenu;
                ej.Menu.prototype._showContextMenu = function (locationX, locationY, target, evt) {
                    $(this.model.contextMenuTarget).hasClass("e-grid") && (++locationX, ++locationY)
                    native.apply(this, [locationX, locationY, target, evt]);
                };
                $(ul).ejMenu({
                    menuType: ej.MenuType.ContextMenu,
                    openOnClick: false,
                    contextMenuTarget: "#" + this._id,
                    click: $.proxy(this._clickevent, this),
                    width: "auto",
                    beforeOpen: $.proxy(this._menu, this)
                });
                if (parentControl.length) {
                    var parentElement = $("#" + parentControl[0].id + '_Context');
                    var target = parentElement.ejMenu("model.excludeTarget");
                    parentElement.ejMenu({ excludeTarget: !ej.isNullOrUndefined(target) && target.length != 0 ? target.concat(",#" + this._id) : "#" + this._id });
                }
                this._conmenu = ul.data("ejMenu");
            }
        },
        _clickevent: function (sender) {
            var args = sender.events.text;
            var tr = $(this._contexttarget.parentNode);
            var c = $(this._contexttarget);
            if (c.hasClass("e-filterset"))
                c = c.siblings();
            else if (c.hasClass("e-icon") || c.hasClass("e-number"))
                c = c.parent();
            var columnName = c.attr("data-ej-mappingname")|| c.find(".e-headercelldiv").attr("data-ej-mappingname");
            if (this._trigger("contextClick", sender))
                return;
            switch (args) {
                case this.localizedLabels.AddRecord: this._startAdd();
                    break;
                case this.localizedLabels.EditRecord:
                    if (this.model.editSettings.editMode == "batch") {
                        var colindex = $(this._contexttarget.parentNode).find(".e-rowcell").index(c), index = this._excludeDetailRows().index(tr), fieldName = this.model.columns[colindex]["field"];
                        this.editCell(index, fieldName);
                    }
                    else
                        this.startEdit(tr);
                    break;
                case this.localizedLabels.DeleteRecord:
                    if (this.model.editSettings.showDeleteConfirmDialog)
                        this._confirmDialog.find(".e-content").html(this.localizedLabels.ConfirmDelete).end().ejDialog("open");
					else if (this.multiDeleteMode && this.selectedRowsIndexes.length > 1)
                       this._multiRowDelete();
                    else
                       this.deleteRow(tr);
                    break;
                case this.localizedLabels.Save:
                    if (this.model.editSettings.editMode == "batch")
                        this.batchSave();
                    else
                        this.endEdit();
                    break;
                case this.localizedLabels.Cancel: this.cancelEdit();
                    break;
                case this.localizedLabels.SortInDescendingOrder: var columnSortDirection = ej.sortOrder.Descending;
                    this.sortColumn(columnName, columnSortDirection);
                    break;
                case this.localizedLabels.SortInAscendingOrder: var columnSortDirection = ej.sortOrder.Ascending;
                    this.sortColumn(columnName, columnSortDirection);
                    break;
                case this.localizedLabels.Grouping: this.groupColumn(columnName);
                    break;
                case this.localizedLabels.Ungrouping: this.ungroupColumn(columnName);
                    break;
                case this.localizedLabels.NextPage:
                case this.localizedLabels.PreviousPage:
                case this.localizedLabels.LastPage:
                case this.localizedLabels.FirstPage: this._page(sender);
                    break;
            }

        },

        _menu: function (sender) {
            var context = this._conmenu.element;
            this._contexttarget = sender.target;
            var targetelement = $(sender.target), element, value;
            var td = $(this._contexttarget);
            if (this.model.allowSelection && (td.hasClass("e-rowcell") || td.closest(".e-rowcell").length)  && !targetelement.hasClass("e-selectionbackground")) {
                var tr = td.hasClass("e-rowcell") ? td.parent() : td.closest(".e-rowcell").parent();
                if (!this.model.isEdit)
                    this.selectRows(this.getIndexByRow(tr), null, td);
            }
            if ((targetelement.hasClass("e-ascending") || targetelement.hasClass("e-descending")) && !targetelement.parent().hasClass("e-headercelldiv"))
                return false;
            if (targetelement.hasClass("e-filtericon") || targetelement.hasClass("e-headercelldiv"))
                element = sender.target.parentNode.getAttribute("aria-sort");
			else if (targetelement.hasClass("e-headercell"))
				element = sender.target.getAttribute("aria-sort");
            else
                element = targetelement.parent().parent().attr("aria-sort");
            var target = sender.target.className;
            var sorting = $(context);
            if (targetelement.hasClass("e-filterset"))
                value = targetelement.siblings().attr("data-ej-mappingname");
            else if (targetelement.hasClass("e-icon") || targetelement.hasClass("e-number"))
                value = targetelement.parent().attr("data-ej-mappingname");
            else if(targetelement.hasClass("e-headercell"))
				value=targetelement.find(".e-headercelldiv").attr("data-ej-mappingname");
			else
                value = targetelement.attr("data-ej-mappingname");            
            context.css("visibility", "visible");            
            var index = targetelement.closest("tr").hasClass("e-insertedrow") ? this.model.groupSettings.groupedColumns.length : 0;
            var rowCell = targetelement.closest(".e-rowcell");
            var headerCell = targetelement.closest(".e-headercell");
            var tempIndex = rowCell.index() != -1 ? rowCell.index() : headerCell.index() - this.model.groupSettings.groupedColumns.length;
            var columnIndex = targetelement.hasClass("e-rowcell") ? targetelement.index() - index : tempIndex - index;
            columnIndex = (this.model.detailsTemplate != null || this.model.childGrid != null) ? columnIndex - 1 : columnIndex;
            var col = this.model.columns[columnIndex];
            var mapObj = {
                "allowGrouping": ".e-contextgrouping",
                "allowSorting": ".e-contextascending, .e-contextdescending",
                "editSettings.allowAdding": ".e-contextadd",
                "editSettings.allowEditing": ".e-contextedit",
                "editSettings.allowDeleting": ".e-contextdelete",
            };         
            for (var prop in mapObj) {
                var ele = context.find(mapObj[prop]).parent();
                if (ej.getObject(prop, this.model) == false || (ej.getObject(prop, col) === false))
                    ele.css("display", "none");
                else if (ele.css("display") == "none")
                    ele.css("display", "block");
           }
            if (targetelement.closest(".e-grid").attr("id") !== this._id || targetelement.is("input")) {
                context.css("visibility", "hidden");
                return;
            }
            else if (this.getHeaderTable().find(targetelement).length > 0) {
                if (!(headerCell.length != 0 && headerCell.children().hasClass("e-headercelldiv"))) {
                    context.css("visibility", "hidden");
                    return;
                }
                var a = $(context.find(".e-head"));
                context.find(".e-page").css("display", "none");
                context.find(".e-content").css("display", "none");
                context.find(".e-savcan").css("display", "none");
                a.css("display", "block");                
                if(ej.isNullOrUndefined(col.field) || col.field == "") {
                     a.css("display","none");
                     if (context.find(".e-customitem").length == 0)
                        context.css("visibility", "hidden")
               }
			   var exarg = { columnIndex: columnIndex, headerText: col.headerText }
			   $.extend(sender,exarg);
             }
            else if (this.getContentTable().find(targetelement).length > 0) {
			    var rowIndex = this.getIndexByRow($(sender.target.parentElement));
               var rowData = this.model.editSettings.editMode == "batch"?this.getDataByIndex(rowIndex):this.getSelectedRecords();
                if (rowCell.length == 0) {
                    context.css("visibility", "hidden");
                    return;
                }
                var a = $(context.find(".e-content"));
                context.find(".e-head").css("display", "none");
                context.find(".e-page").css("display", "none");
                context.find(".e-savcan").css("display", "none");
                a.css("display", "block");                
                if ((ej.isNullOrUndefined(col.field) || col.field == "") && this.model.editSettings.editMode == "batch") {
                    a.css("display","none");
                    if (context.find(".e-customitem").length == 0)
                       context.css("visibility", "hidden")
               }
		    if(this.model.editSettings.editMode =="batch")
			   {
			     var exarg = { columnIndex: columnIndex, rowIndex: rowIndex, rowData:rowData , headerText: col.headerText,cellValue:ej.getObject(ej.isNullOrUndefined(col.field) ? "" : col.field, rowData) }
			   }
		     else
			     var exarg = { columnIndex: columnIndex, rowIndex: rowIndex, rowData:rowData, headerText: col.headerText, }
				 $.extend(sender,exarg);
             }
            else if (!ej.isNullOrUndefined(this.getPager()) && this.getPager().find(targetelement).length > 0 || targetelement.hasClass("e-pager")) {
                var a = $(context.find(".e-page"));
                context.find(".e-head").css("display", "none");
                context.find(".e-content").css("display", "none");
                context.find(".e-savcan").css("display", "none");
                a.css("display", "block");
            }
            else {
                var a = $(context);
                context.css("visibility", "hidden");
                return false;
            }
            switch (element) {
                case "ascending": sorting.find(".ascending").parent().css("display", "none");
                    break;
                case "descending": sorting.find(".descending").parent().css("display", "none");
                    break;
            }
            if (targetelement.hasClass("e-rowcell") && this.model.editSettings.showAddNewRow) {
                var a = $(context.find(".e-savcan"));
                context.find(".e-contextadd").parent().css("display", "none");
                a.css("display", "block");
            }
            if (this.model.editSettings.editMode == "batch" && (this.batchChanges.changed.length || this.batchChanges.deleted.length || this.batchChanges.added.length)) {
                var a = $(context.find(".e-savcan"));
                context.find(".e-head").css("display", "none");
                context.find(".e-page").css("display", "none");
                a.css("display", "block");
            }
            if (this.model.isEdit && targetelement.closest(".e-rowcell").length && (!this.model.editSettings.showAddNewRow || $(".e-editedrow").length > 0)) {
                var a = $(context.find(".e-savcan"));
                context.find(".e-head").css("display", "none");
                context.find(".e-content").css("display", "none");
                context.find(".e-page").css("display", "none");
                a.css("display", "block");
            }
            if (this.model.pageSettings.totalPages == 1 && a.hasClass("e-page")) {
                if (context.find(".e-customitem").length == 0)
                    context.css("visibility", "hidden");
                else
                    context.find(".e-page").css("display", "none");
            }            
            else if (this.model.pageSettings.currentPage == 1) {
                sorting.find(".previous").parent().css("display", "none");
                sorting.find(".first").parent().css("display", "none");
            }
            else if (this.model.pageSettings.currentPage == this.model.pageSettings.totalPages) {
                sorting.find(".last").parent().css("display", "none");
                sorting.find(".nextpage").parent().css("display", "none");
            }
            if (this.model.groupSettings.groupedColumns.indexOf(value) != -1)
                a.find(".group").parent().css("display", "none");
            else if (this.model.groupSettings.groupedColumns.indexOf(value) == -1)
                a.find(".ungroup").parent().css("display", "none");
			if (this.model.contextOpen)
                this._trigger("contextOpen", sender);
        },

        _items: function (item, type) {
            if (item == "")
                return false;
            if (type == "contextMenuItem") {
                if (item.indexOf("Record") != -1) {
                    var li = ej.buildTag('li', "", {}, { "class": "e-content" });
                    li.css("display", "none");
                }
                else if (item.indexOf("Page") != -1) {
                    var li = ej.buildTag('li', "", {}, { "class": "e-page" });
                    if (item.indexOf("Next") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "nextpage" });
                    else if (item.indexOf("Previous") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "previous" });
                    else if (item.indexOf("Last") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "last" });
                    else if (item.indexOf("First") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "first" });
                    li.css("display", "none");
                }
                else if (item == "Save" || item == "Cancel") {
                    var li = ej.buildTag('li', "", {}, { "class": "e-savcan" });
                    li.css("display", "none");
                }
                else if (item.indexOf("Order") != -1 || item == "Grouping" || item == "Ungrouping") {
                    var li = ej.buildTag('li', "", {}, { "class": "e-head" });
                    if (item.indexOf("Ascending") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "ascending" });
                    else if (item.indexOf("Descending") != -1)
                        var div = ej.buildTag('div', "", {}, { "class": "descending" });
                    else if (item == "Grouping")
                        var div = ej.buildTag('div', "", {}, { "class": "group" });
                    else if (item == "Ungrouping")
                        var div = ej.buildTag('div', "", {}, { "class": "ungroup" });
                    li.css("display", "none");
                }
            }
            if (ej.isNullOrUndefined(li)) {
                var li = ej.buildTag('li', "", {}, { "class": "e-customitem" });
                li.css("display", "block");
            }
            li.append(div);
            var a = document.createElement("a"), classElement = "";
            if (typeof item == "string") {
                if (item.indexOf("Ascending") != -1)
                    classElement = "ascending";
                else if (item.indexOf("Descending") != -1)
                    classElement = "descending";
                else
                    classElement = item.split(" ")[0].toLowerCase();
                a.innerHTML = !ej.isNullOrUndefined(this.localizedLabels[item.replace(/\s+/g, '')]) ? this.localizedLabels[item.replace(/\s+/g, '')] : item;
            }
            if (typeof item == "object") {
                if (item.id == "Ascending")
                    classElement = "ascending";
                else if (item.id == "Descending")
                    classElement = "descending";
                else
                    classElement = item.id.split(" ")[0].toLowerCase();
                a.innerHTML = !ej.isNullOrUndefined(this.localizedLabels[item.text.replace(/\s+/g, '')]) ? this.localizedLabels[item.text.replace(/\s+/g, '')] : item.text;
                li.attr('id', item.id);
            }
            if (type == "contextMenuItem")
                $(a).append(ej.buildTag('span', "", {}, { "class": "e-gridcontext e-icon e-context" + classElement }));
            else
                $(a).append(ej.buildTag('span', "", {}, { "class": "e-gridcontext e-icon e-custommenu" + classElement }));
            li.append(a);
            return li;
        },

        _page: function (send) {
            if (send.events.text == this.localizedLabels.NextPage) {
                var b = this.model.pageSettings.currentPage;
                ++b;
                this.gotoPage(b);
            }
            else if (send.events.text == this.localizedLabels.PreviousPage) {
                var b = this.model.pageSettings.currentPage;
                if (b > 1) {
                    --b;
                    this.gotoPage(b);
                }
                else
                    this.gotoPage(b);
            }
            else if (send.events.text == this.localizedLabels.LastPage) {
                var b = this.model.pageSettings.totalPages
                this.gotoPage(b);
            }
            else
                this.gotoPage(1);


        },
        changePageSize: function (pageSize) {
            var args = {}, returnValue;
            var pageModel = this.getPager().ejPager("instance");
            this.model.pageSettings.pageSize = pageSize;
            this.model.pageSettings.currentPage = pageModel.model.currentPage;
            this.getPager().ejPager({pageSize: pageSize});
            args.requestType = ej.Grid.Actions.Refresh;
            returnValue = this._processBindings(args);
        },
        gotoPage: function (pageIndex) {
            if (!pageIndex || (pageIndex == this._currentPage() && !this.model.scrollSettings.allowVirtualScrolling) || (!this.model.allowPaging && (!this.model.allowScrolling && !this.model.scrollSettings.allowVirtualScrolling)))
                return;
            var args = {}, returnValue;
            args.previousPage = this._currentPage();
            this._currentPage(pageIndex);
            args.endIndex = ((this._currentPage() * this.model.pageSettings.pageSize) > this._gridRecordsCount) ? (this._gridRecordsCount) : (this._currentPage() * this.model.pageSettings.pageSize);
            args.startIndex = (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
            args.currentPage = pageIndex;
            if (this.model.allowPaging) {
                //this.model.pageSettings.currentPage = pageIndex;
                //this. getPager().ejPager("refreshPager");
                args.requestType = ej.Grid.Actions.Paging;
            }
            if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling) {
                this._isVirtualRecordsLoaded = false;
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
                args.requestType = ej.Grid.Actions.VirtualScroll;
            }
            returnValue = this._processBindings(args);
            if (returnValue)
                this._currentPage(args.previousPage);
            this._primaryKeyValues = [];
        },
        _gPagerClickHandler: function (sender) {
            if (this._prevPageNo == sender.currentPage)
                return;
            this.model.masterObject.gotoPage(sender.currentPage);
            return false;
        },
        _gPageSize: function (sender) {
            this.model.masterObject.changePageSize(sender.pageSize);
        },
        _processData: function (e, args) {
            if (this.initialRender) {
                this._initDataProcessed = true;
                this._initDataProcess(e, args);
            }
            else {
                if (e.count == 0 && this.model.currentViewData.length)
                    this._gridRecordsCount = e.result.length;
                else
                    this._gridRecordsCount = e.count;
                if (this.getPager() != null)
                    this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
                if ((args.requestType == ej.Grid.Actions.Filtering || ej.Grid.Actions.Save || (this.model.filterSettings.filteredColumns.length > 0 && args.requestType == ej.Grid.Actions.Refresh)))
                    this._filteredRecordsCount = e.count;
                if (this.model.allowScrolling && this.model.scrollSettings.enableVirtualization) {
                    this.model.currentViewData = [];
                    for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
                        var currentView = this._currentLoadedIndexes[i];
                        $.merge(this.model.currentViewData, this._virtualLoadedRecords[currentView] || []);
                    }
                }
                this._setForeignKeyData(args);
				this.model.groupSettings.groupedColumns.length && !this.initialRender && this._setAggregates();
                this._relationalColumns.length == 0 && this.sendDataRenderingRequest(args);
            }
        },

        _frozenCell: function (rowIndex, cellIndex) {
            var currentIndex = cellIndex, frozenDiv = 0, row = this.getRowByIndex(rowIndex), cell;
            if (cellIndex >= this.model.scrollSettings.frozenColumns) {
                frozenDiv = 1;
                currentIndex = currentIndex - this.model.scrollSettings.frozenColumns;
            }
            cell = $(row.eq(frozenDiv).find(".e-rowcell:eq(" + currentIndex + ")"));
            return cell;
        },
        _frozenColumnSelection: function (gridRows, columnIndex, endIndex) {
            var currentIndex = columnIndex, frozenDiv = 0;
            if (endIndex) {
                for (var i = columnIndex; i < endIndex; i++) {
                    currentIndex = i;
                    if (i >= this.model.scrollSettings.frozenColumns) {
                        frozenDiv = 1;
                        currentIndex = i - this.model.scrollSettings.frozenColumns;
                    }
                    for (var j = 0; j < gridRows[frozenDiv].length; j++) {
                        $(gridRows[frozenDiv][j].cells[currentIndex]).addClass("e-columnselection");
                    }
                    $(this.getHeaderTable().find("th.e-headercell")[i]).addClass("e-columnselection");
                    this.selectedColumnIndexes.push(i);
                }
            }
            else {
                if (columnIndex >= this.model.scrollSettings.frozenColumns) {
                    frozenDiv = 1;
                    currentIndex = columnIndex - this.model.scrollSettings.frozenColumns;
                }
                for (var i = 0; i < gridRows[frozenDiv].length; i++) {
                    $(gridRows[frozenDiv][i].cells[currentIndex]).addClass("e-columnselection");
                }
            }

        },
        _renderGridFooter: function () {
            if (this.model.summaryRows.length > 0) {
                var showTotalSummaryItems = ej.DataManager(this.model.summaryRows).executeLocal(ej.Query().where("showTotalSummary", ej.FilterOperators.equal, false));
                var _$gridFooter = ej.buildTag("div.e-gridfooter");
                var $innerDiv = ej.buildTag('div');
                if (this.model.allowScrolling)
                    $innerDiv.addClass("e-footercontent");
                var $table = ej.buildTag("table.e-gridsummary");
                this.setGridFooterContent(_$gridFooter);
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var $frozenFooterDiv = ej.buildTag("div.e-frozenfooterdiv"), $movableFooter = ej.buildTag("div.e-movablefooter")
                        , $tableClone = $table.clone(), $movableFooterDiv = ej.buildTag("div.e-movablefooterdiv");
                    $movableFooter.append($movableFooterDiv);
                    $table.append(this.getHeaderTable().first().find('colgroup').clone());
                    $tableClone.append(this.getHeaderTable().last().find('colgroup').clone());
                    $frozenFooterDiv.append($table);
                    $movableFooterDiv.append($tableClone);
                    this.setGridFooterTable($table.add($tableClone));
                    this._createSummaryRows(this.getFooterTable());
                    _$gridFooter.append($frozenFooterDiv.add($movableFooter));
                    _$gridFooter.find(".e-frozenfooterdiv").outerWidth(this.getHeaderContent().find(".e-frozenheaderdiv").width())
                          .end().find(".e-movablefooterdiv").outerWidth(this.getContent().find(".e-movablecontentdiv").width());
                }
                else {
                    $table.append(this.getHeaderTable().find('colgroup').clone());
                    this.setGridFooterTable($table);
                    this._createSummaryRows(this.getFooterTable());
                    $innerDiv.append($table);
                    _$gridFooter.html($innerDiv);
                }
                if (this.model.summaryRows.length == showTotalSummaryItems.length)
                    return;
                return _$gridFooter;
            } else
                throw "summary row collection is missing";
        },
        _setSummaryAggregate: function (queryManager) {
            var rows = this.model.summaryRows, scolumns, sCol = [];
            for (var row = 0, rlen = rows.length; row < rlen; row++) {
                scolumns = rows[row].summaryColumns;
                for (var col = 0, clen = scolumns.length; col < clen; col++) {
                    queryManager.aggregate(scolumns[col].summaryType, scolumns[col].dataMember);
                }
            }
        },
        _createSummaryRows: function (table, summaryData, aggregates, item, showGroup) {
            var col = table.find("col");
            if (table.find("tbody").length > 0)
                table.find("tbody").remove();
            var $tBody = ej.buildTag('tbody'), proxy = this, $tBodyClone = $tBody.clone();
            var summaryCol = this.model.summaryRows;
            if (!ej.isNullOrUndefined(summaryData) && this._isCaptionSummary)
                summaryCol = this._captionSummary(showGroup);
            $.each(summaryCol, function (indx, row) {
                if (row.showTotalSummary === false && ej.isNullOrUndefined(summaryData)) return true;
                if (row.showGroupSummary === false && showGroup && !ej.isNullOrUndefined(summaryData)) return true;
                var $tr = ej.buildTag('tr.e-gridSummaryRows');
                if (ej.isNullOrUndefined(item && item.level)) {
                    for (var i = 0; i < proxy.model.groupSettings.groupedColumns.length; i++) {
                        $tr.prepend(ej.buildTag('td').addClass("e-indentcell"));
                    }
                }
                var gc = showGroup ? " e-gcsummary" : "";
                if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
                    if (proxy.model.groupSettings.groupedColumns.length != 0)
                        $tr.children("td.e-indentcell").last().after("<td class='e-summaryrow" + gc + "'></td>");
                    else
                        $tr.prepend("<td class='e-summaryrow'></td>");
                }
                var $cells = proxy.getHeaderTable().find('td').slice(0, proxy.model.columns.length ).clone().addClass("e-summaryrow" + gc + ""), count = 0;
                var index = 0;
                if (!ej.isNullOrUndefined(row.titleColumn)) {
                    var index = proxy.getColumnIndexByField(row.titleColumn);
                    if (index == -1)
                        index = proxy.getColumnIndexByHeaderText(row.titleColumn);
                }
				if(index != -1)
					$cells = proxy._assignTitleColumn(index, row.title, $cells, count);
                proxy._hideSummaryColumn($cells, col);
                if (proxy.model.scrollSettings.frozenColumns > 0) {
                    var $trClone = $tr.clone();
                    $tBody.append($tr.append($cells.slice(0, proxy.model.scrollSettings.frozenColumns)));
                    $tBodyClone.append($trClone.append($cells.slice(proxy.model.scrollSettings.frozenColumns)));
                }
                else {
                    if ((!proxy._isCaptionSummary || showGroup) && !ej.isNullOrUndefined(item && item.level)) {
                        var level = proxy.model.groupSettings.groupedColumns.length - item.level + 1, tableClone = table.clone().addClass("e-groupsummary"), captionData = {};
                        captionData["data"] = { items: item };
                        $tr.prepend("<td class='e-summaryrow" + gc + "' colspan=" + proxy._colSpanAdjust(null, null, captionData) + " style = 'padding:0;' ></td>");
                        $($tr[0].cells).filter(".e-summaryrow").html(tableClone.append(ej.buildTag("tr", $cells)));
                        var len = tableClone.find("col").length - (proxy.model.columns.length + level);
                        if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null)
                            $tr.find("tr").prepend("<td class='e-summaryrow'></td>");
                        for (var i = 0; i < len; i++) {
                            tableClone.find("col").first().remove();
                        }
                        for (var i = 0; i < level; i++) {
                            $(tableClone[0].rows).prepend("<td class='e-indentcell'></td>");
                            $(tableClone.find("col")[i]).addClass("e-summary");
                        }
                        $tBody.append($tr);
                    }
                    else
                        $tBody.append($tr.append($cells));
                }
                $.each(row.summaryColumns, function (cindx, col) {
                    var value;
                    if (col.summaryType != "custom")
                        value = aggregates ? aggregates[col.dataMember + " - " + col.summaryType] : proxy._remoteSummaryData[col.dataMember + " - " + col.summaryType];
                    else
                        value = proxy.getSummaryValues(col, summaryData);
                    var prefix = col.prefix ? col.prefix : "",
                    index = proxy.getColumnIndexByField(col.displayColumn), suffix = col.suffix ? col.suffix : "";
                    if (proxy.model.allowScrolling)
                        $($cells[index]).addClass("e-scroller");
                    if ($($cells[index]).html() != "" && prefix == "")
                        prefix = $($cells[index]).html();
                    if (!ej.isNullOrUndefined(col.template)) {
                        var obj = {
                            summaryValue: col.format ? proxy.formatting(col.format, value, proxy.model.locale) : value,
							summaryColumn: col
                        },
                        sTemplate = obj.summaryColumn.template,
                        ngType = !ej.isNullOrUndefined(proxy.model.ngTemplateId) && (sTemplate.startsWith("#") || sTemplate.startsWith(".") || typeof sTemplate === "object") ? proxy.model.ngTemplateId + "gridsummarytemplate" : null;
                        proxy._summaryContextIndex = proxy._summaryContextIndex + 1;
                        $($cells[index]).html(proxy._renderEjTemplate(obj.summaryColumn.template, obj, proxy._summaryContextIndex, null, ngType)).css("text-align", proxy.model.columns[index].textAlign)
                        $($cells[index]).addClass("e-summarytemplate")
                    }
                    else if (index != -1)
                        $($cells[index]).html(prefix + (col.format ? proxy.formatting(col.format, value, proxy.model.locale) : value) + suffix).css("text-align", proxy.model.columns[index].textAlign);
                });
            });
            if (this.model.scrollSettings.frozenColumns > 0) {
                table.first().append($tBody);
                table.last().append($tBodyClone);
            }
            else
                table.append($tBody);
        },
        _assignTitleColumn: function (index, title, $cells, count) {
            for (var i = index; i < this.model.columns.length; i++) {
                var colindex = this.model.columns[i];
                if (count == 0 && colindex.visible != false) {
                    $cells.eq(i).html(title);
                    break;
                }
            }
            return $cells;
        },
        getSummaryValues: function (summaryCol, summaryData) {
            var $value, jsonData;
            if (!ej.isNullOrUndefined(summaryData))
                jsonData = summaryData;
            else if (this.model.filterSettings.filteredColumns.length > 0)
                jsonData = this._filteredRecords;
            else
                jsonData = this._dataSource();

            var dbMgr;
            if (jsonData instanceof ej.DataManager) {
                dbMgr = jsonData;
                jsonData = jsonData.dataSource.json;
            } else
                dbMgr = ej.DataManager(jsonData);

            switch (summaryCol.summaryType) {
                case ej.Grid.SummaryType.Maximum:
                    var obj = ej.max(jsonData, summaryCol.dataMember);
                    $value = ej.getObject(summaryCol.dataMember, obj);
                    break;
                case ej.Grid.SummaryType.Minimum:
                    var obj = ej.min(jsonData, summaryCol.dataMember);
                    $value = ej.getObject(summaryCol.dataMember, obj);
                    break;
                case ej.Grid.SummaryType.Average:
                    $value = ej.avg(jsonData, summaryCol.dataMember);
                    break;
                case ej.Grid.SummaryType.Sum:
                    $value = ej.sum(jsonData, summaryCol.dataMember);
                    break;
                case ej.Grid.SummaryType.Count:
                    $value = jsonData.length;
                    break;
                case ej.Grid.SummaryType.TrueCount:
                    var predicate = ej.Predicate(summaryCol.dataMember, "equal", true);
                    $value = dbMgr.executeLocal(ej.Query().where(predicate)).length;
                    break;
                case ej.Grid.SummaryType.FalseCount:
                    var predicate = ej.Predicate(summaryCol.dataMember, "equal", false);
                    $value = dbMgr.executeLocal(ej.Query().where(predicate)).length;
                    break;
                case ej.Grid.SummaryType.Custom:
                    var fn = summaryCol.customSummaryValue;
                    if (fn) {
                        if (typeof fn === "string")
                            fn = ej.util.getObject(fn, window);
                        if ($.isFunction(fn))
                            $value = fn.call(this, summaryCol, jsonData);
                    }
                    break;
            }
            return $value;
        },
        _hideCaptionSummaryColumn: function () {
            var headerColumn = this.getHeaderTable().find('.e-headercelldiv[data-ej-mappingname]').first();
            var captionTd = this.getContentTable().find('.e-groupcaption').clone();
            var groupCaptionParent = this.getContentTable().find('.e-groupcaption').parent();
            var colLength = this.model.columns.length - 1;
            if (this._isCaptionSummary) {
                this.getContentTable().find('.e-summaryrow:not(.e-gcsummary)').remove();
                this.getFooterTable().find("tbody td").slice(-colLength).removeClass("e-groupcaptionsummary").addClass("e-summaryrow");
                if (this.getFooterTable() != null) {
                    this.getContentTable().find('.e-recordplusexpand').parent().children('.e-indentcell').remove();
                }
                if (!this.model.groupSettings.showGroupedColumn && this.getContentTable().find(".e-groupcaptionsummary").not(".e-hide").length) {
                    var sumColumn = +this.getContentTable().find(".e-recordtable:first").parents("tbody:first").find(".e-groupcaption").attr("colspan");
                    if (this._hiddenColumnsField.length == this.model.columns.length - 1 && headerColumn.parent().hasClass("e-hide") || !sumColumn) {
                        for (var i = 0; i < captionTd.length; i++) {
                            groupCaptionParent.eq(i).children().not('.e-hide,.e-recordplusexpand').filter('td.e-groupcaptionsummary:first').addClass("e-hide");
                            var caption = groupCaptionParent.eq(i).find(".e-groupcaption");
                            var colspan = parseInt(caption.attr("colspan"));
                            caption.attr("colspan", ++colspan)
                        }
                    }
                }
            }
            this.getContentTable().find('.e-recordtable').find('.e-indentcell').remove();
        },
        _hideSummaryColumn: function (td, col) {
            var i,j;
            if (col.length > this.model.columns.length)
                col = col.slice(col.length - this.model.columns.length);
            if (!this.model.groupSettings.showGroupedColumn && this.model.showSummary) {
                for (i = 0; i < this.model.columns.length; i++) {
                    for (j = 0; j < this.model.groupSettings.groupedColumns.length || j < this._hiddenColumnsField.length; j++) {
                        var headerColumn = this.getHeaderTable().find('.e-headercelldiv:not(.e-emptyCell)');
                        if (headerColumn.eq(i).parent().hasClass('e-hide')) {
                            col.eq(i).css("display", "none");
                            $(td[i]).addClass("e-hide");
                            break;
                        }
                        else {
                            if (col.eq(i).css("display") == "none")
                                col.eq(i).css("display", "");
                        }
                    }
                }
            }
            else {
                for (i = 0; i < this.model.columns.length; i++) {
                    if (!this.model.columns[i]["visible"]) {
                        col.eq(i).css("display", "none");
                        $(td[i]).addClass("e-hide");
                    }
                    else {
                        if (col.eq(i).css("display") == "none")
                            col.eq(i).css("display", "");
                    }
                }
            }
        },

        _initScrolling: function () {
            var frozen = [], unfrozen = [], hideColumns = 0;
            if (this.model.scrollSettings.enableVirtualization)
                this.model.scrollSettings.allowVirtualScrolling = true;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                if (this.model.columns[columnCount].visible === false && columnCount < this.model.scrollSettings.frozenColumns)
                    hideColumns++;
                if (this.model.columns[columnCount]["isFrozen"] === true)
                    frozen.push(this.model.columns[columnCount]);
                else
                    unfrozen.push(this.model.columns[columnCount]);
            }            
            if (frozen.length > 0) {
                var freeze = this.model.scrollSettings.frozenColumns;
                this.model.columns = $.merge($.merge([], frozen), unfrozen);
                this.model.scrollSettings.frozenColumns = frozen.length;
                if (frozen.length != freeze && freeze != 0)
                    this.model.scrollSettings.frozenColumns = freeze;
            }
            if ((this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) && (this.model.allowGrouping || this.model.rowTemplate != null || this.model.detailsTemplate != null || this.model.childGrid != null || this.model.scrollSettings.allowVirtualScrolling || this.model.editSettings.editMode == "batch")) {
                this._renderAlertDialog();
                this._alertDialog.find(".e-content").text(this._getLocalizedLabels()["FrozenNotSupportedException"]);
                this._alertDialog.ejDialog("open");
                return;
            }
            if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling) {
				if(!this.model.scrollSettings.enableVirtualization){
					this.model.pageSettings.pageSize = this.model.pageSettings.pageSize == 12 ? Math.round(this.model.scrollSettings.height / 32) + 1 : this.model.pageSettings.pageSize;
					this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
				}
				else{					
					this._vRowHeight = Math.floor(this.getRowHeight() + 1);
					this._virtualRowCount = Math.round(this.model.scrollSettings.height / this._vRowHeight) + 1; 					
					this.model.pageSettings.pageSize = this.model.pageSettings.pageSize <= this._virtualRowCount * 5 ? this._virtualRowCount * 5 : this.model.pageSettings.pageSize;
                }
            }
            if (this.model.width || this.model.height) {
                this.model.allowScrolling = true;
                if (this.model.width) this.model.scrollSettings.width = this.model.width;
                if (this.model.height) this.model.scrollSettings.height = this.model.height;
            }
            this._originalScrollWidth = ej.isNullOrUndefined(this.model.scrollSettings.previousStateWidth) ? this.model.scrollSettings.width : this.model.scrollSettings.previousStateWidth;
        },
        _checkScrollActions: function (requestType) {
            if ((!this.model.scrollSettings.allowVirtualScrolling && (requestType == ej.Grid.Actions.Sorting || requestType == ej.Grid.Actions.Reorder)) || requestType == ej.Grid.Actions.Grouping || requestType == ej.Grid.Actions.Ungrouping || requestType == ej.Grid.Actions.Add || requestType == ej.Grid.Actions.Cancel
                || requestType == ej.Grid.Actions.Save || requestType == ej.Grid.Actions.BatchSave || requestType == ej.Grid.Actions.Delete || requestType == ej.Grid.Actions.Filtering || requestType == ej.Grid.Actions.Paging || requestType == ej.Grid.Actions.Refresh || requestType == ej.Grid.Actions.Search)
                return true;
            return false;
        },
        _frozenAlign: function () {
             var gridContent = this.getContent().first(), browserDetails = !ej.isIOSWebView() && this.getBrowserDetails(), direction;
             direction = this.model.enableRTL ? "margin-right" : "margin-left";
             gridContent.find(".e-movablecontent").css(direction, browserDetails && browserDetails.browser === "safari" ? "auto" : gridContent.find(".e-frozencontentdiv").width() + "px");
             this.getHeaderContent().find(".e-movableheader").removeAttr("style").css(direction,browserDetails && browserDetails.browser === "safari" ? "auto" : this.getHeaderContent().find(".e-frozenheaderdiv").width() + "px");
			 if(this.getFooterContent())
				 this.getFooterContent().find(".e-movablefooter").removeAttr("style").css(direction,browserDetails && browserDetails.browser === "safari" ? "auto" : this.getFooterContent().find(".e-frozenfooterdiv").width() + "px")
			         
		 },
        _refreshScroller: function (args) {
            var gridContent = this.getContent().first(), temp;
            if (ej.isNullOrUndefined(gridContent.data("ejScroller")))
                return;
            if (this.model.scrollSettings.frozenColumns > 0) {
                if (this._gridRecordsCount || this._isAddNew)
                    this.model.scrollSettings["targetPane"] = ".e-movablecontent";
                else
                    this.model.scrollSettings["targetPane"] = null;
                this.getScrollObject().option({ targetPane: this.model.scrollSettings["targetPane"] });
                if (!this._isFrozenColumnVisible()) {
                    gridContent.find(".e-movablecontentdiv").removeAttr("style");
                    this.getHeaderContent().find(".e-movableheaderdiv").removeAttr("style");
					if(this.getFooterContent())
						this.getFooterContent().find(".e-movablefooter").removeAttr("style");                 
                    gridContent.find(".e-frozencontent").width(0);
                    gridContent.find(".e-frozencontentdiv").width(0);
                    gridContent.find(".e-frozencontent").height(0);
                    gridContent.find("e-frozencontentdiv").height(0);
                }
                else if (this._visibleColumns.length <= this.model.scrollSettings.frozenColumns) {
                    var isMovableCol = false;
                    for (var i = this.model.scrollSettings.frozenColumns; i < this.model.columns.length; i++) {
                        if (this._visibleColumns.indexOf(this.model.columns[i].headerText) != -1) {
                            isMovableCol = true;
                            break;
                        }
                    }
                    if (!isMovableCol) {
                        gridContent.find(".e-frozencontentdiv").removeAttr("style");
                        this.getHeaderContent().find(".e-frozenheaderdiv").removeAttr("style");
                        gridContent.find(".e-movablecontent").width(0);
                        gridContent.find(".e-movablecontentdiv").width(0);
                        gridContent.find(".e-movablecontent").height(0);
                        gridContent.find(".e-movablecontentdiv").height(0);
                    }
                }
                else {
                    this._frozenAlign();
                    gridContent.find(".e-movablecontent").scrollLeft(this.getHeaderContent().find(".e-movableheader").scrollLeft());
                    if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && this.getScrollObject()._vScrollbar.value() > this.getScrollObject()._vScrollbar.model.maximum)
                        temp = this.getScrollObject()._vScrollbar.model.maximum;
                }
                this.refreshScrollerEvent();
            }
            if (this.model.scrollSettings.frozenRows > 0) {
                this._initFrozenRows();
                for (var i = 0 ; i < this.getRows().length ; i++) {
                                       $(this.getRows()[i]).filter(":hidden").css("display", "table-row");
                                    }
                if (!this.initialRender && ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && (this.element.height() > this.model.scrollSettings.height))
                    this.getContent().attr("tabindex", "0").ejScroller(this.model.scrollSettings);
                var temp = this.getScrollObject().model.scrollTop;
                var tempLeft = this.getScrollObject().model.scrollLeft;
                if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && temp > this.getScrollObject()._vScrollbar.model.maximum)
                    temp = this.getScrollObject()._vScrollbar.model.maximum;
                if ((args.requestType == "cancel" || args.requestType == "save") && temp > this._editFormHeight && this.model.editSettings.editMode.indexOf("inlineform") != -1)
                    temp = temp - this._editFormHeight;
                if (args.requestType == ej.Grid.Actions.Add)
                    this.getScrollObject().scrollY(0, true);
                if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && !ej.isNullOrUndefined(this.getScrollObject()._vScrollbar._scrollData))
                    this.getScrollObject()._vScrollbar._scrollData.skipChange = true;
            }
            if ((args.requestType == "beginedit" || args.requestType == "save") && !this.model.editSettings.editMode == "inlineformtemplate" && !this.model.editSettings.editMode == "inlineform") {
                var temp = this.getScrollObject().model.scrollTop;
                this.getScrollObject().scrollY(0, true);
            }
            if (!ej.isNullOrUndefined(this.model.dataSource) && (args.requestType == "refresh" || args.requestType=="searching") && this.model.scrollSettings.allowVirtualScrolling) {
                if (this.model.scrollSettings.enableVirtualization && (this._isLocalData || this._virtualDataRefresh) && this._gridRecordsCount > 0)
					this._refreshVirtualView(this._currentVirtualIndex);
				else
					this._refreshVirtualContent(1);
				if(this._currentVirtualIndex == 1)
					this.getScrollObject().scrollY(0);
            }            
            if (this.model.scrollSettings.frozenColumns > 0)
				this.rowHeightRefresh();
			this.getScrollObject().refresh();
            gridContent.ejScroller("model.enableRTL", this.model.enableRTL);
            if (this.model.isResponsive && (args.requestType == 'searching' || args.requestType == "filtering")) {
                var scrollObj = this.getScrollObject();
                var height = scrollObj.isHScroll() ? this.getContentTable().height() + scrollObj.model.buttonSize : this.getContentTable().height();
                height = typeof (this.model.scrollSettings.height) == "string" || height > this.model.scrollSettings.height ? this.model.scrollSettings.height : height
                var scrollWidth= typeof (this.model.scrollSettings.width) == "string" ? this.element.width():this.model.scrollSettings.width;
                var width = scrollWidth;
                this.getContent().ejScroller({ height: height, width: width });
            }
            if (this.getScrollObject().isVScroll() && !this.getScrollObject().model.autoHide) {
                this.getHeaderContent().addClass("e-scrollcss");                
                !this.getHeaderContent().find(".e-headercontent").hasClass("e-hscrollcss") && this.getHeaderContent().find(".e-headercontent").addClass("e-hscrollcss");
                if (this.model.showSummary && this.getScrollObject().isHScroll() && !ej.isNullOrUndefined(this.getFooterContent()))
                    this.getFooterContent().find("div table").first().width(this.getContentTable().width() + this.model.scrollSettings.scrollerSize);
                else if(!this.getScrollObject().isHScroll() && !ej.isNullOrUndefined(this.getFooterContent()))
                    this.getFooterContent().find("div table").first().width(this.getFooterContent().find("div").width());
            }
            else
                this._showHideScroller();
            if (!this.model.scrollSettings.frozenColumns && this.model.allowPaging && !this.getScrollObject().isVScroll() && !this.getScrollObject().isHScroll() && this.getContentTable().width() != this.getContent().width()) {
                if (!ej.isNullOrUndefined(this.getFooterTable()))
                    this.getFooterTable().width(this.getContentTable().width());
			}
            this._getRowHeights();
            if (temp && !ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && args.requestType != ej.Grid.Actions.Add && this.model.editSettings.editMode != "inlineformtemplate" && this.model.editSettings.editMode != "inlineform") {
                this._currentTopFrozenRow = 0;
                if (temp > this.getScrollObject()._vScrollbar.model.maximum)
                    temp = this.getScrollObject()._vScrollbar.model.maximum;
                this.getScrollObject()._vScrollbar.scroll(temp);
            }
            if (args.requestType == "beginedit" && !ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && (this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "inlineform")) {
                var editedFormHeight = $("#" + this._id + "EditForm").parents('tr.e-editedrow')[0].offsetTop + $("#" + this._id + "EditForm").parents('tr.e-editedrow')[0].offsetHeight;
                var content = this.getContent().find(".e-content"), cntHeight = content.height(), scrollerTop = this.getScrollObject().scrollTop(), contentHeight = scrollerTop + cntHeight;
                if (Math.round(editedFormHeight) > Math.round(contentHeight)) {
                    var value = this.getScrollObject()._vScrollbar.model.value + (editedFormHeight - contentHeight);
                    this.getScrollObject()._vScrollbar.scroll(value);
                    this.model.scrollSettings.scrollTop = value;
                }
                else {
                    this.getScrollObject()._vScrollbar.scroll(scrollerTop);
                    this.model.scrollSettings.scrollTop = scrollerTop;
                }
            }
            if(tempLeft && this.model.scrollSettings.frozenColumns > 0 && args.requestType == ej.Grid.Actions.BeginEdit)
            {
                this.getScrollObject()._hScrollbar.scroll(tempLeft);
            }
            if (args.requestType == "virtualscroll") {
                var top = this.getScrollObject().model.scrollTop + this.getScrollObject().model.height - (this.getScrollObject().model.height * .3);
                this.getScrollObject().scrollY(top, true);
            }
            if (args.requestType == "sorting" && this.model.scrollSettings.virtualScrollMode == "continuous") {
                this.getScrollObject().scrollY(0, true);
            }
        },
        _isFrozenColumnVisible: function () {
            for (var i = 0; i < this.model.scrollSettings.frozenColumns; i++) {
                if (this.model.columns[i].visible)
                    return true;
            }
            return false;
        },
        _frozenPaneRefresh: function () {
            this.getContent().find(".e-frozencontentdiv").css("display", "none");
            this.getHeaderContent().find(".e-frozenheaderdiv").css("display", "none");
            this.getHeaderContent().find(".e-movableheader")[0].style["margin-left"] = "";
            this.getContent().find(".e-movablecontent")[0].style["margin-left"] = "";
            var scrollWidth = ej.isNullOrUndefined(this._scrollObject._vScrollbar) ? 0 : this._scrollObject._vScrollbar["e-vscroll"].width();
            var movableWidth = this.model.scrollSettings.width - scrollWidth - 1;
            if (this.model.scrollSettings.width > this.getContent().find(".e-movablecontentdiv").width()) {
                this.getContent().find(".e-movablecontentdiv").width(movableWidth);
                this.getHeaderContent().find(".e-movableheaderdiv").width(movableWidth);
                if(!ej.isNullOrUndefined(this.getFooterContent()))
                    this.getFooterContent().find(".e-movablefooterdiv").width(movableWidth);
            }
            this._scrollObject.option("scrollLeft", 0);
        },
        _renderScroller: function () {
            if (!this.model.scrollSettings)
                this.model.scrollSettings = {};
            if (this.model.enablePersistence && (ej.isNullOrUndefined(this.model.scrollSettings.previousStateWidth) || !this.model.scrollSettings.previousStateWidth) && this.model.isResponsive)
                this.model.scrollSettings.previousStateWidth = this.model.scrollSettings.width;
            if (typeof (this._originalScrollWidth) == "string" && !this.model.isResponsive) {
                this.element.css("width", "auto");
                var width = this.element.width();
                if (this.model.scrollSettings.width == "auto" || this._originalScrollWidth == "auto")
                    this._originalScrollWidth = "100%";
                this.model.scrollSettings.width = width * (parseFloat(this._originalScrollWidth) / 100)
            }

            if (typeof (this.model.scrollSettings.height) == "string" && !this.model.isResponsive) {
                var height = this.element.height();
                if (this.model.scrollSettings.height == "auto")
                    this.model.scrollSettings.height = "100%";
                this.model.scrollSettings.height = height * (parseFloat(this.model.scrollSettings.height) / 100)
            }

            if ((this.model.scrollSettings.width || this.model.width) && !this._mediaQuery) {
                var width = this.model.scrollSettings.width || this.model.width;
                if (typeof width == "string")
                    this.element.css("width", this.model.scrollSettings.width || this.model.width);
                else
                    this.element.width(this.model.scrollSettings.width || this.model.width);
            }

            var $content = this.getContent().attr("tabindex", "0"), staticWidth, direction, gridRows = this.getRows();

            if (this.model.scrollSettings.frozenColumns > 0) {
                for (var i = 0 ; i < this.getRows().length ; i++) {
                                       $(this.getRows()[i]).filter(":hidden").css("display", "table-row");
                                   }
                var scrollWidth = this.getContent().find(".e-frozencontentdiv").width() + 20;
                if (scrollWidth > this.model.scrollSettings.width) {
                    this.getContent().remove();
                    this.getHeaderTable().eq(1).remove();
                    this._alertDialog.find(".e-content").text(this.localizedLabels.FrozenColumnsViewAlert);
                    this._alertDialog.ejDialog("open");
                    return;
                }
                staticWidth = this.getContent().find(".e-frozencontentdiv").width();
                direction = this.model.enableRTL ? "margin-right" : "margin-left";
                this.getContent().find(".e-movablecontent").css(direction, staticWidth + "px");
                this.getHeaderContent().find(".e-movableheader").css(direction, staticWidth + "px");
                if(!ej.isNullOrUndefined(this.getFooterContent()))
                    this.getFooterContent().find(".e-movablefooter").css(direction, staticWidth + "px");
                this.model.scrollSettings["targetPane"] = ".e-movablecontent";
            }
			else
				this.model.scrollSettings["targetPane"] = null;
            this._initFrozenRows();
            if (this.model.scrollSettings.autoHide)
                this.model.scrollSettings["show"] = $.proxy(this._showHideScroller, this);
			if(!this.model.scrollSettings.allowVirtualScrolling && this.model.currentIndex > 0 && !this.model.scrollSettings.scrollTop && ej.isNullOrUndefined(this.getContent().data("ejScroller"))){
				var sTop = this.model.currentIndex * this.getRowHeight();
				this.model.scrollSettings["scrollTop"] = sTop;
			}
			$content.ejScroller(this.model.scrollSettings);
			if (this.model.allowRowDragAndDrop && this.model.allowScrolling && ej.gridFeatures.dragAndDrop)
			    $content.ejScroller({ thumbStart: function () { return false } });
            if (this.model.rowTemplate != null && ((!ej.isIOSWebView()) && (this.getBrowserDetails().browser == "msie" || this.getBrowserDetails().browser == "safari")))
                this.getScrollObject().refresh();            
            if (this.model.scrollSettings.frozenColumns > 0 && this.model.scrollSettings.frozenRows == 0 && this.getScrollObject()._vScrollbar && this.getScrollObject()._hScrollbar)
                this.getScrollObject()._vScrollbar._scrollData.skipChange = this.getScrollObject()._hScrollbar._scrollData.skipChange = true;
            if (!this.model.scrollSettings.autoHide)
                this._showHideScroller();
            if ((!ej.isIOSWebView() && this.getBrowserDetails().browser == "safari") && this.model.scrollSettings.frozenColumns > 0)
                this.getHeaderContent().find(".e-movableheader").add(this.getContent().find(".e-movablecontent")).css(direction, "auto");
            this.refreshScrollerEvent();
            if (this.model.scrollSettings.frozenColumns > 0 && !this._isFrozenColumnVisible())
                this._frozenPaneRefresh();
            if (this.model.scrollSettings.allowVirtualScrolling) {
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
                this.refreshScrollerEvent();
            }
        },
		_checkScroller: function(e, scrollObj){
			var scrollLeft = e.scrollLeft > 0 ? e.scrollLeft : Math.abs(e.scrollLeft);
			if(e.source == "thumb" && (scrollObj.content()[0].scrollWidth - scrollLeft == scrollObj.content()[0].clientWidth || scrollLeft == 0)){
				if(this.model.enableRTL){
					var hLeft = scrollLeft == 0 ? e.scrollData.scrollable: 0;
					e.scrollData.sTop = e.model.scrollLeft = hLeft;
					scrollObj.content().scrollLeft(hLeft);	
				}
				scrollObj._hScrollbar.refresh();
			}
		},
        _showHideScroller: function () {
            if (this.getScrollObject().isVScroll()) {
                this.getHeaderContent().find("div").first().addClass("e-headercontent");
                if (this.model.showSummary && !ej.isNullOrUndefined(this.getFooterContent()))
                    this.getFooterContent().find("div").first().addClass("e-footercontent");
                !this.model.scrollSettings.autoHide && this.getHeaderContent().addClass("e-scrollcss")
            } else
                this.element.find(".e-gridheader").removeClass("e-scrollcss");
             if (this.model.scrollSettings.frozenColumns == 0 && !this._mediaQuery) {
                if (!this.element.find(".e-gridheader").hasClass("e-scrollcss") && (this.model.filterSettings.filteredColumns.length || (this._hiddenColumns.length&&!this.model.minWidth))) {
                    this.getHeaderTable().removeAttr('style');
                    this.getContentTable().removeAttr('style');
                    if (this.model.showSummary && !ej.isNullOrUndefined(this.getFooterTable()))
                    this.getFooterTable().removeAttr('style');
                }
                else {
                        if (this.model.showSummary && !ej.isNullOrUndefined(this.getFooterContent())) {
                        if(this.getScrollObject().isVScroll() && this.getScrollObject().isHScroll()){
                            if(this.model.minWidth && this.model.isResponsive)
                                this.getFooterContent().find("div table").first().width(this.getContentTable().width() + this.model.scrollSettings.scrollerSize);
                            else
                                this.getFooterContent().find("div table").first().width(this.getContentTable().width());
                            this.getFooterContent().find("div").width(this.getHeaderContent().width() + this.model.scrollSettings.scrollerSize);
                        }
                    }
                }
            }
            this._isHscrollcss();
        },
        _isHscrollcss: function () {
            var scroller = this.getContent().data("ejScroller"), css = (scroller && scroller.isVScroll() && (!ej.isNullOrUndefined(scroller._vScrollbar) && scroller._vScrollbar.element[0].style.display != "none")) ? "addClass" : "removeClass";
            this.getHeaderContent().find(".e-headercontent")[css]("e-hscrollcss")
			this.getHeaderContent()[css]("e-scrollcss");
		},
        _initFrozenRows: function () {
            var gridRows = this.getRows();
            if (!this.model.currentViewData || this.model.currentViewData.length == 0)
                return;
            if (this.model.scrollSettings.frozenRows > 0 && gridRows != null) {
                this.getContent().find(".e-frozeny").removeClass("e-frozeny")
                    .end().find(".e-frozenrow").removeClass("e-frozenrow");
                if (!ej.isNullOrUndefined(gridRows[0][this.model.scrollSettings.frozenRows - 1]) && !ej.isNullOrUndefined(gridRows[1][this.model.scrollSettings.frozenRows - 1]) && this.model.scrollSettings.frozenColumns > 0)
                    $(gridRows[0][this.model.scrollSettings.frozenRows - 1].cells).add(gridRows[1][this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
                else if (!ej.isNullOrUndefined(this.getRowByIndex(this.model.scrollSettings.frozenRows - 1)[0]))
                    $(gridRows[this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
                if (this.getContent().height() > this.model.scrollSettings.height) {
					 var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
                    if (!this.initialRender && !ej.isNullOrUndefined(scrollObj) && ej.isNullOrUndefined(scrollObj._vScrollbar))
                        this._getRowHeights();
                    this.model.scrollSettings.height = this._rowHeightCollection[Math.floor(this.model.scrollSettings.height / this._rowHeightCollection[1])] + 18;
                }
            }           
        },
        refreshScrollerEvent: function () {
            var proxy = this;
            var $content = this.getContent().attr("tabindex", "0");
            var scroller = $content.data("ejScroller");
            if (!ej.isNullOrUndefined(scroller) && scroller.model.scroll == null) {
                $content.ejScroller({
                    scroll: function (e) {
                        if (!ej.isNullOrUndefined(e.scrollData) && e.scrollData.scrollVal == "scrollLeft") {
                            if (proxy.model.scrollSettings.targetPane || (!ej.isNullOrUndefined(proxy.getHeaderContent()) && proxy.getHeaderContent().find(".e-movableheader").length)) {
                                proxy.getHeaderContent().find(".e-movableheader").scrollLeft(e.scrollLeft);
                            }
                            else
                                proxy.getHeaderContent().find("div").first().scrollLeft(e.scrollLeft);
                            if (proxy.model.scrollSettings.frozenRows > 0 && proxy.model.editSettings.editMode.indexOf("inlineform") != -1 && proxy.model.isEdit) {
                                var scrollTop = e.scrollTop;
                                proxy.getContent().find(".e-content").scrollTop(0);
                                this.scrollY(this.model.scrollTop + scrollTop, true);
                            }
                        };
                        if (proxy.model.scrollSettings.frozenRows > 0 && proxy.getRows() != null) {
                            if (e.scrollData != null && e.scrollData.dimension != "width") {
                                e.cancel = true;
                                var rows = proxy.getRows(), indexes = proxy._getTopRow(e.scrollTop), currentTopRow = indexes.imaginaryIndex, frozenRows;
                                if (currentTopRow > proxy._currentTopFrozenRow)
                                    proxy._showHideRow(proxy.model.scrollSettings.frozenRows, currentTopRow, "hide", e.scrollTop);
                                else if (currentTopRow < proxy._currentTopFrozenRow)
                                    proxy._showHideRow(currentTopRow, proxy._currentTopFrozenRow + 1, "show", e.scrollTop);
                                var movableContent = proxy.getContentTable().last().find("tr");
                                var border = (parseInt(movableContent.last().find("td:first").css("border-top-width")) * 2) + 1;
                                if (e.scrollTop == this._vScrollbar.model.maximum && ((movableContent.last()[0].offsetTop + movableContent.last().height() - border) > proxy.element.find(".e-content").height())) {
                                    var totalHeight = movableContent.last().prev()[0].offsetTop + movableContent.last().prev().height();
                                    var count = 1;
                                    for (var i = (movableContent.length - 2) ; totalHeight - border > proxy.element.find(".e-content").height() ; i++) {
                                        totalHeight = movableContent[i].offsetTop + movableContent.eq(i).height();
                                        count++;
                                        break;
                                    }
                                    proxy._showHideRow(proxy.model.scrollSettings.frozenRows, currentTopRow + count, "hide", e.scrollTop);
                                }
                                e.model.scrollTop = e.scrollTop;
                            }
                            else {
                                if (!ej.isNullOrUndefined(this._vScrollbar) && !ej.isNullOrUndefined(this._vScrollbar._scrollData))
                                    this._vScrollbar._scrollData.skipChange = true;
                            }
                        }
                        if (proxy.model.scrollSettings.allowVirtualScrolling) {
                            if (proxy.model.scrollSettings.enableVirtualization && e.scrollData != null && e.scrollData.handler != "e-hhandle") {
                                e["reachedEnd"] = e.scrollData.scrollable - e.scrollTop == 0;
                                if (e.source == "thumb") {
                                    var keys = ej._getObjectKeys(proxy._virtualLoadedRows);
                                    var index = (proxy._currentVirtualIndex + 2).toString();
                                    if (proxy.model.scrollSettings.virtualScrollMode == "continuous" && $.inArray(index, keys) == -1 && index < proxy._totalVirtualViews)
                                        proxy._isContinuous = true;
                                    else {
                                        e.model.scrollTop = e.scrollTop;
                                        proxy._isContinuous = false;
                                        e.cancel = true;
                                    }
                                }
                                if (e.source == "button" || e.source == "key" || e.source == "wheel" || (e.source == "custom" && e.model.keyConfigs.down == "") || (e.source == "thumb"  && e.originalEvent == "touchmove")) {
                                    if ($("#" + proxy._id + "_WaitingPopup").is(":visible"))
                                        e.cancel = true;
                                    else {
                                        proxy._isThumbScroll = false;
                                        proxy._virtualViewScroll(e);
                                    }
                                    if (proxy.model.scrollSettings.virtualScrollMode == "continuous" && e["reachedEnd"])
                                        this.refresh();
                                }
                                proxy.model.currentIndex = e.scrollTop == 0 ? e.scrollTop : Math.floor(e.scrollTop / proxy._vRowHeight);
                            }
                            else {
                                if (!ej.isNullOrUndefined(e.scrollData) && e.scrollData.handler == "e-hhandle" && proxy.model.allowFiltering && (proxy.model.filterSettings.filterType == "menu" || proxy._isExcelFilter))
                                    !proxy._isExcelFilter ? proxy._closeFilterDlg() : proxy._excelFilter.closeXFDialog();
                                e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollTop == this.content()[0].clientHeight;
                                if ((e.source == "button" || e.source == "key" || e.source == "wheel") && proxy.model != null) {
									if ($("#" + proxy._id + "_WaitingPopup").is(":visible")) 
                                        e.cancel = true;    
									else
										proxy._virtualScroll(e);
								}
                                if (e.source == "wheel" && e.scrollTop != proxy._scrollValue)
                                    e.scrollTop = proxy._scrollValue;
                                proxy._checkScroller(e, this);
                            }
                        }
                        if (!proxy.model.scrollSettings.frozenRows && !proxy.model.scrollSettings.frozenColumns)
                            if (!ej.isNullOrUndefined(e.scrollData) && e.scrollData.handler == "e-hhandle") {
                                if (proxy.model.allowFiltering && (proxy.model.filterSettings.filterType == "menu" || proxy._isExcelFilter))
                                    !proxy._isExcelFilter ? proxy._closeFilterDlg() : proxy._excelFilter.closeXFDialog();
                                proxy._checkScroller(e, this);
                            }
                            else {
                                proxy._scrollValue = e.scrollTop;
                                proxy.model.currentIndex = e.scrollTop == 0 ? e.scrollTop : Math.floor(e.scrollTop / proxy._vRowHeight);
                            }
                    },
					scrollStop: function (e) {
                        if (proxy.model.scrollSettings.allowVirtualScrolling) {
                            if (proxy.model.scrollSettings.enableVirtualization && proxy.model.scrollSettings.virtualScrollMode == "continuous")
                                e["reachedEnd"] = e.scrollData.scrollable - e.model.scrollTop == 0;
                            else if (e.originalEvent && !$(e.originalEvent.target).hasClass("e-rowcell"))
                                e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollData.sTop == this.content()[0].clientHeight;
                            if (e.scrollData.handler == "e-hhandle")
                                return;
                            if (proxy.model != null && e.originalEvent) {
                                if (proxy.model.scrollSettings.enableVirtualization) {
                                    proxy._isThumbScroll = true;
								proxy._virtualViewScroll(e);
								if(proxy.model.scrollSettings.virtualScrollMode == "continuous" && e["reachedEnd"])
									this.refresh();
							}
							else
								proxy._virtualScroll(e);
                            }
                        }
                    },
					scrollHide: function (e) {
                          proxy.getHeaderContent().find(".e-headercontent")['removeClass']("e-hscrollcss");
						  proxy.getHeaderContent()['removeClass']("e-scrollcss");
						  proxy.getHeaderContent().css({ "padding-right": "0px" });
                    },
					scrollVisible: function (e) {
						var scrollSize = e.model.scrollerSize-1;
						   if(scroller && scroller.isVScroll()){
                              proxy.getHeaderContent().find(".e-headercontent")['addClass']("e-hscrollcss");
							  proxy.getHeaderContent().css({ "padding-right": scrollSize });
							  proxy.getHeaderContent()['addClass']("e-scrollcss");
						  }
                    },
                    thumbEnd: function (e) {
                        if (proxy.model.scrollSettings.allowVirtualScrolling) {
                            if (proxy.model.scrollSettings.enableVirtualization && proxy.model.scrollSettings.virtualScrollMode == "continuous")
                                e["reachedEnd"] = e.scrollData.scrollable - e.model.scrollTop == 0;
                            else if (e.originalEvent && !$(e.originalEvent.target).hasClass("e-rowcell"))
                                e["reachedEnd"] = this.content()[0].scrollHeight - Math.round(e.scrollData.sTop) == this.content()[0].clientHeight;
                            if (e.scrollData.handler == "e-hhandle")
                                return;
                            if (proxy.model != null && e.originalEvent) {
                                if (proxy.model.scrollSettings.enableVirtualization) {
                                    proxy._isThumbScroll = true;
								proxy._virtualViewScroll(e);
								if(proxy.model.scrollSettings.virtualScrollMode == "continuous" && e["reachedEnd"])
									this.refresh();
							}
							else
								proxy._virtualScroll(e);
                            }
                        }
                    },
                    scrollEnd: function (e) {
                        if (proxy.model.scrollSettings.allowVirtualScrolling) {
                            if (e.scrollData.type == "mousewheel" || (e.scrollData.model != null && e.scrollData.model.orientation == "horizontal")) return;
                            var currentViewIndex = proxy._calculateCurrentVirtualIndex(e);
							if(!proxy._checkCurrentVirtualView(proxy._virtualLoadedRows, currentViewIndex) && (e.scrollData.source != "thumb"))	return;	
						    if (proxy.model.scrollSettings.enableVirtualization && !proxy._isContinuous) {
                                var currentPage = proxy._calculateCurrentViewPage(e.model);
                                var isVirtualPage = $.inArray(currentPage, proxy._virtualLoadedPages) != -1;
                                if (isVirtualPage) {
                                    proxy._isThumbScroll = true;
                                    proxy._virtualViewScroll(e);
                                    proxy.element.ejWaitingPopup("hide");
								if(proxy._totalVirtualViews <= proxy._maxViews * 3)
									this._content[0].scrollTop = e.scrollData.scrollTop;															
							}
							else {                             						
								e.cancel = true;
							}
						}						
                        }
                    }
                });
            }
            this.element.find(".e-gridheader").find(".e-headercontent,.e-movableheader").scroll(ej.proxy(function (e) {
                var $currentTarget = $(e.currentTarget);
                if (this.model.scrollSettings.targetPane) {
                    this.getContent().find(".e-movablecontent").scrollLeft($currentTarget.scrollLeft());
                    (this.model.showSummary && !ej.isNullOrUndefined(this.getFooterContent())) && this.getFooterContent().find(".e-movablefooter").scrollLeft($currentTarget.scrollLeft());;
                }
                else {
                    (this.model.showSummary && !ej.isNullOrUndefined(this.getFooterContent())) && this.getFooterContent().find("div").first().scrollLeft($currentTarget.scrollLeft());
                    this.getContent().find(".e-content").first().scrollLeft($currentTarget.scrollLeft());
                }
            }, this));
        },
        clearFiltering: function (field) {
            if (this.model.filterSettings.filterType == "filterbar")
                this.OldfilterValue = null;
		    if (field) {
		        this._clearFilter(field);
		        if (this.model.filterSettings.filterType != "filterbar")
		            for (var i = 0; i < this.filterColumnCollection.length; i++) {
		                if (this.filterColumnCollection[i].field == field)
		                    this.filterColumnCollection.splice(i, 1);
		            }
		    }
		    else {
		        var fltrCols = this.model.filterSettings.filteredColumns, i = 0;
		        while (i < fltrCols.length) {
		            this._clearFilter(fltrCols[i].field);
		        }
		        this.filterColumnCollection = [];
		        if (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel")
		            this.getHeaderTable().find(".e-filtericon").removeClass("e-filteredicon e-filternone");
		    }
		},
		_clearFilter: function (field) {
		    var filterType = this.model.filterSettings.filterType;
		    if (!ej.isNullOrUndefined(this.getColumnByField(field).filterType))
		        filterType = this.getColumnByField(field).filterType;
		    switch (filterType) {
		        case ej.Grid.FilterType.FilterBar:
		            if ($.inArray(this.getColumnByField(field), this.filterColumnCollection) != -1) {
		                var index = this.getColumnIndexByField(field);
		                this.getHeaderTable().find(".e-filtertext").eq(index).val("");
		                this._currentFilterbarValue = "";
		                var index = $.inArray(field, this.filterColumnCollection);
		                this._currentFilterColumn = this.getColumnByField(field);
		                this._showFilterMsg();
		            }
		            break;
		        case ej.Grid.FilterType.Menu:
					var id = "#" + this._id + "_" + this._$colType + "Dlg";
					if (this._$colType == "boolean")
						$(id).find('.e-value .e-js').ejCheckBox("model.checked", false);
					else
						if (this._$colType == "number")
							$(id).find('.e-numerictextbox.e-js').ejNumericTextbox("model.value", "");
						else
							$(id).find(".e-value input").val("");					
					        $(id).find(".e-value1 input").val("");
					if ((this._excelFilterRendered || this._isExcelFilter) && this._excelFilter._predicates.length)
					    delete this._excelFilter._predicates[0][field];
					this._$curFieldName = field;						
					break;
		        case ej.Grid.FilterType.Excel:
		            if (this._excelFilter._predicates.length)
		                delete this._excelFilter._predicates[0][field];
					this._excelFilter.closeXFDialog();
					this._$curFieldName = field;
					break;
			}
			this.filterColumn(field, "", "", "or");							
		},
		clearSearching: function(){
			this.element.find(".e-gridtoolbar #" + this._id + "_search").val("");
			this.search("");
			$.extend(this.model.searchSettings, this.defaults.searchSettings);
		},
        _renderByFrozenDesign: function () {
            var $div = $(document.createElement('div')), col = this._getMetaColGroup().find("col"), colgroups = {};
            colgroups["colgroup1"] = $div.append(ej.buildTag("colgroup").append(col.splice(0, this.model.scrollSettings.frozenColumns))).html();
            colgroups["colgroup2"] = $div.html(ej.buildTag("colgroup").append(col)).html();
            this.getContent().find("div").first().get(0).innerHTML = $.render[this._id + "_FrozenTemplate"]({ datas: this.model.currentViewData }, colgroups);
            this.setGridContentTable(this.getContent().find(".e-table").attr("data-role", "grid"));
        },
        addFrozenTemplate: function () {
            var template = "<div class='e-frozencontentdiv'>"
            + "<table class='e-table'>{{:~colgroup1}}<tbody>"
            + "{{for datas tmpl='" + this._id + "_JSONFrozenTemplate'/}}"
            + "</tbody></table></div>"
            + "<div class='e-movablecontent'><div class='e-movablecontentdiv'><table class='e-table'>{{:~colgroup2}}<tbody>"
            + "{{for datas tmpl='" + this._id + "_JSONTemplate'/}}"
            + "</tbody></table></div></div>", templates = {};
            templates[this._id + "_FrozenTemplate"] = template;
            $.templates(templates);
        },
        _getTopRow: function (offsetTop) {
            var currentTopRow = this.model.scrollSettings.frozenRows, i = 0;
            if (offsetTop > 10) {
                for (var i = 0; i < this._rowHeightCollection.length; i++) {
                    if (this._rowHeightCollection[i] > offsetTop) {
                        currentTopRow = this.model.scrollSettings.frozenRows + i - 1;
                        break;
                    }
                }
            }
            return { imaginaryIndex: currentTopRow, actualIndex: i };
        },
        _showHideRow: function (from, to, action, scrollPosition) {
            var rows = this.getRows();
            if (this.model.scrollSettings.frozenColumns > 0)
                $(rows[0]).slice(from, to).add($(rows[1]).slice(from, to).toArray())[action]();
            else
                $(rows).slice(from, to)[action]();
            this._currentTopFrozenRow = action == "show" ? from : to;
            this.getScrollObject()._changevHandlerPosition(scrollPosition);
        },
        _renderAlertDialog: function () {
            var $contentDiv = ej.buildTag('div.e-content', this._getLocalizedLabels()["frozenColumnsMessage"])
                , $buttons = ej.buildTag('span.e-buttons', "<input type='button' class='e-flat' id=" + this._id + 'ConfirmDialogOK' + " value='" + this._getDeprecatedLocalizedLabel("OKButton") + "'/>");
            this._alertDialog = ej.buildTag('div#' + this._id + 'AlertDialog');
            this._alertDialog.append($contentDiv).append($buttons);
            this.element.append(this._alertDialog);
            $buttons.find("input").ejButton({
                cssClass: this.model.cssClass,
                showRoundedCorner: true,
                size: "mini",
                click: $.proxy(function (args) {
                    this._alertDialog.ejDialog("close");
                }, this)
            });
            this._renderFDialog(this._id + 'AlertDialog');
            this._alertDialog.ejDialog({ width: "auto", enableModal: true });
        },
        _renderFDialog: function (id) {
            $("#" + id).ejDialog({ showOnInit: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, "showHeader": false, width: 260, enableResize: false, allowKeyboardNavigation: false, content: "#" + this._id });
        },
        _virtualScroll: function (e) {
			if (this.selectedRowsIndexes.length == this._gridRecordsCount)
                this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").prop("checked", "checked");
            if (e != null) {
                var flag = 0;
                var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
                var pageInfo = this.model.pageSettings;
                var tbody = this.getContentTable()[0].tBodies[0];
                var virtualRows = $(tbody).find('tr.e-virtualrow');
                pageInfo.totalPages = Math.ceil(recordCount / pageInfo.pageSize);
                if (e.scrollTop !== undefined)
                    e.model.scrollTop = e.scrollTop;
                if (e.reachedEnd != undefined) e.model.reachedEnd = e.reachedEnd;
                var currentPageNo = this._calculateCurrenPage(virtualRows, this.getContentTable(), e.model);
                if (currentPageNo > pageInfo.totalPages)
                    currentPageNo = pageInfo.totalPages;
                if (pageInfo.currentPage != currentPageNo && $.inArray((currentPageNo - 1) * pageInfo.pageSize, this.virtualLoadedPages) == -1 && this.element.find(".gridform:visible").length == 0) {
                    this._isVirtualRecordsLoaded = false;
                }
                if (!this._isVirtualRecordsLoaded) {
                    if ($.inArray((currentPageNo - 1) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
                        if (this.model.scrollSettings.virtualScrollMode == "continuous" && !e.reachedEnd)
                            return
                        if (currentPageNo == pageInfo.totalPages && $.inArray((currentPageNo - 2) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
                            flag++;
                            this.set_currentPageIndex(currentPageNo);
                        }
                        if (flag == 1) this._lastRow = true;
                        this.set_currentPageIndex(currentPageNo);
                    }
                    pageInfo.currentPage = currentPageNo;
                }
                else
                    pageInfo.currentPage = currentPageNo;
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
            }
        },
		_virtualViewScroll: function (e) {
            if (e != null) {                
                if (e.scrollTop !== undefined)
                    e.model.scrollTop = e.scrollTop;
                if (e.reachedEnd != undefined) e.model.reachedEnd = e.reachedEnd;
                var currentVirtualIndex = this._calculateCurrentVirtualIndex(e);
                if (this.model.isEdit)
                    this.cancelEdit();
                if ($.inArray(currentVirtualIndex, this._currentLoadedIndexes) == -1)
                    this._isVirtualRecordsLoaded = false;                               
                if (!this._isVirtualRecordsLoaded)                     
                    this.set_currentVirtualIndex(currentVirtualIndex);                							
            }
		},
        _createPagerStatusBar: function () {
            var $statusBar = this.element.find(".e-pagerstatusbar");
            if ($statusBar.length)
                $statusBar.remove();
            var $pagermsgDiv = ej.buildTag('div.e-pagermsgdiv');
            this.$pagerStatusBarDiv = ej.buildTag('div.e-pagerstatusbar').append($pagermsgDiv);
            if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
                var $messageDiv = ej.buildTag('div.e-pagerfiltermsg').css("display", "none");;
                this.$pagerStatusBarDiv.append($messageDiv);
            }
            this.$pagerStatusBarDiv.appendTo(this.element);
            this.$pagerStatusBarDiv.css("display", "none");
        },
        _refreshVirtualContent: function (currentPage) {
            var rowHeight = this.getRowHeight();
            var recordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            if (currentPage != null) {
                this._currentPage(currentPage);
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
            }
            var currentData = this.model.currentViewData;
            if (!this.model.scrollSettings.enableVirtualization)
                this._virtualLoadedRecords[currentPage] = currentData;
            var isVirtualization = 0;
            if (this.model.scrollSettings.enableVirtualization)
                isVirtualization = 1;
            var currentIndex = isVirtualization == 1 ? this.getCurrentIndex() + 1 : this.getCurrentIndex();
            var tbody = this.getContentTable()[0].tBodies[0];
            if (currentIndex > 1) {
                var virtualTRTop = document.createElement("tr");
                $(virtualTRTop).addClass("e-virtualrow").css("height", rowHeight * currentIndex).prependTo(tbody);
            } if (currentIndex + this.model.pageSettings.pageSize <= recordsCount && this.getContentTable().find("tr").last().hasClass("e-virtualrow") != true && this.model.scrollSettings.frozenColumns == 0) {
                var virtualTRBottom = document.createElement("tr");
                var virtualHeight = this.model.scrollSettings.virtualScrollMode == "normal" ? rowHeight * (recordsCount - (currentIndex + this.model.pageSettings.pageSize)) : 1;
                $(virtualTRBottom).addClass("e-virtualrow").css("height", virtualHeight).appendTo($(tbody));
            }
            this.virtualLoadedPages = new Array();
            this.orderedVirtualLoadedPage = [];
            this.virtualLoadedPages.push(currentIndex >= isVirtualization ? currentIndex : isVirtualization);
            this.orderedVirtualLoadedPage.push(currentIndex >= isVirtualization ? currentIndex : isVirtualization);
            var focusTR = $(tbody).find('tr:not(.e-virtualrow)').attr('name', currentIndex >= isVirtualization ? currentIndex : isVirtualization)[0];
            if (focusTR && focusTR.previousSibling && ($(focusTR.previousSibling).hasClass("e-virtualrow") || focusTR.previousSibling.offsetTop > (currentIndex * this.getContent().height()))) {
                this.getContent().children("div").first().scrollTop(this.getContent().find(".content").scrollTop() - (this.getContent().find(".content").scrollTop() - focusTR.offsetTop));
                this._isVirtualRecordsLoaded = true;
            }
        },
        isIntermediate: function(){
            if (this.model.currentIndex < this.model.pageSettings.pageSize * (this.model.pageSettings.currentPage - 1))
                return true;
            else
                return false;
        },
        _refreshVirtualView: function (currentIndex, isSelection, rowIndex) {
			if(!this._singleView){			
				var virtualRowCount = this._virtualRowCount;				
				if(currentIndex){     
					var scrollRefresh, currentPage;
					if(currentIndex > this._totalVirtualViews){						
						currentIndex = 1;					
						scrollRefresh = true;						
					}
					if (isSelection == "selectRows") {
					    scrollRefresh = true;
					}
					this._currentVirtualIndex = currentIndex;
					if (!this._virtualLoadedRecords[currentIndex]) {
					    if (!this._virtualDataRefresh && this._currentVirtualIndex != this._totalVirtualViews) scrollRefresh = true;
					    currentPage = Math.ceil(currentIndex * this._virtualRowCount / this.model.pageSettings.pageSize);
					}
					else {
					    var scrollObj = this.getScrollObject();
					    currentPage = Math.ceil((scrollObj.scrollTop() + this.model.scrollSettings.height) / this._vRowHeight / this.model.pageSettings.pageSize);
					}
					this._refreshVirtualViewScroller(scrollRefresh, isSelection, rowIndex);
					if(currentPage > this.model.pageSettings.totalPages) currentPage = this.model.pageSettings.totalPages;
					if(currentPage <= 0) currentPage = 1;
					if($.inArray(currentPage, this._virtualLoadedPages) == -1)
						this.gotoPage(currentPage);
					else{
						this._currentPage(currentPage);
						if(!this._checkCurrentVirtualView(this._virtualLoadedRecords, currentIndex))
							this._needPaging = true;
						else
							this._needPaging = false;
						this._getVirtualLoadedRecords(this.model.query);
						this._replacingVirtualContent();				
					}
				}
				else{               					
					this._refreshVirtualViewDetails();					
					var rows = $(this.getContentTable()[0].rows);
					this._setVirtualTopBottom();
					if (this.initialRender){
						for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
							var currentLoadedIndex = this._currentLoadedIndexes[i], viewIndex = (i + 1) * virtualRowCount, viewCount = i * virtualRowCount;
							$(rows[viewIndex - 1]).addClass("e-virtualview" + currentLoadedIndex);
							var hex = currentLoadedIndex.toString(32);
							var vRows = rows.slice(viewCount, viewCount + virtualRowCount).attr('name', hex).detach();
							this._virtualLoadedRows[currentLoadedIndex] = vRows;
							vRows.appendTo(this.getContentTable());
						}
						if(this._currentVirtualIndex > 1) 
							this._refreshVirtualViewScroller();											
					}			
					this._eventBindings();
				}
				if($.inArray(this._currentPage(), this._virtualLoadedPages) == -1)
					this._virtualLoadedPages.push(this._currentPage());				
			}
			else {
				this._singleView = false;				
				this._addLastRow();	
				this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();
				var hex = this._currentVirtualIndex.toString(32);				
				$(this._gridRows).attr('name', hex);
				this._virtualLoadedRows[this._currentVirtualIndex] = this._gridRows;				
				this._eventBindings();
			}
			if(!currentIndex && (this.model.queryCellInfo || this.model.rowDataBound)){
				for(var i = 0; i < this._currentLoadedIndexes.length; i++){					
					if($.inArray(this._currentLoadedIndexes[i], this._queryCellView) == -1 && !ej.isNullOrUndefined(this._virtualLoadedRows[this._currentLoadedIndexes[i]]))
						this._queryCellView.push(this._currentLoadedIndexes[i]);						
				}
			}
			this._isThumbScroll = false;
			this._virtualDataRefresh = false;
        },
		_refreshVirtualViewData: function(){
			this._virtualLoadedRecords = {};
			this._virtualLoadedRows = {};	
			this._virtualLoadedPages = [];	
			this._virtualPageRecords = {};
			this._queryCellView	= [];									
			if(this.model.pageSettings.totalPages != null && (this._currentPage() > this.model.pageSettings.totalPages || !this.model.pageSettings.totalPages)){
				this._currentPage(1);
				this._currentVirtualIndex = 1;
			}			
		},
		setCurrentPageData: function(currentData){
			if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
				this._refreshVirtualViewData();
				this._refreshVirtualViewDetails();										
				this._setVirtualLoadedRecords(currentData, this._currentPage());
				this._refreshVirtualView(this._currentVirtualIndex);
			}
		},
		_refreshVirtualViewScroller: function (needRefresh, isSelection, rowIndex) {
			var scrollValue;
			if ((this.initialRender && !this.model.scrollSettings.scrollTop) || needRefresh) {
			    var rowHeight = this._vRowHeight;
			    scrollValue = this.model.currentIndex * this._vRowHeight;
			}
			if (isSelection == "selectRows") {
			    scrollValue = rowIndex * this._vRowHeight;
			}
			else
				scrollValue = this._scrollObject.model.scrollTop;
			this.getContent().ejScroller("model.scrollTop", scrollValue);           
            this._scrollValue = scrollValue;
        },
		_calculateCurrentViewPage: function (args) {
			if(!args) args = this._scrollObject.model;
            var pageSize = this.model.pageSettings.pageSize;                                
            var currentPage =  Math.ceil((args.scrollTop + this.model.scrollSettings.height) / this._vRowHeight / pageSize);
			// if(this.model.scrollSettings.virtualScrollMode == "continuous")
				// currentPage = Math.ceil(this._currentVirtualIndex * this._virtualRowCount / this.model.pageSettings.pageSize);
            if(this.model.pageSettings.totalPages == null)
                this.model.pageSettings.totalPages = Math.ceil(this._getVirtualTotalRecord() / pageSize);                         
            if(currentPage > this.model.pageSettings.totalPages)
                currentPage = this.model.pageSettings.totalPages;
            this.model.pageSettings.currentPage = currentPage;
            return currentPage;
        },
		_calculateCurrentVirtualIndex: function (e) {
            var args = e.model, recordCount = this._getVirtualTotalRecord();
            var currentIndex, trEle, isLast, viewTr = [], cur, oTop, len, sTop = args.scrollTop;
            var index = sTop + this.model.scrollSettings.height;
            currentIndex = (sTop + this._vRowHeight) / this._vRowHeight / this._virtualRowCount;
            currentIndex = Math.ceil(currentIndex);
            if (sTop >= this._scrollValue && args.virtualScrollMode == "continuous" && args.reachedEnd) 
                currentIndex = currentIndex + 1;                      
            if(currentIndex > this._totalVirtualViews) currentIndex = this._totalVirtualViews;
            if(currentIndex <= 0) currentIndex = 1;                
            if ($.inArray(currentIndex, this._currentLoadedIndexes) !== -1 && this._virtualLoadedRows[currentIndex] && sTop != e.scrollData.scrollable) {
                var viewTrs = this.getContentTable()[0].rows; len = viewTrs.length;
                var virtualTopHeight = this.getContent().find(".e-virtualtop").height();
                isLast = sTop >= this._scrollValue;
                for (var i = 0; i < len; i++) {
                    cur = viewTrs[i];
                    oTop = cur.offsetHeight + cur.offsetTop + virtualTopHeight;
                    if (oTop > sTop + this.model.scrollSettings.height) {
                        if (viewTr.length === 0 && i !== 0)
                            viewTr = [viewTrs[cur.offsetTop <= sTop + this.model.scrollSettings.height ? i : i - 1]];
                        break;
                    }
                    if (oTop >= sTop && oTop <= sTop + this.model.scrollSettings.height) {
                        viewTr.push(cur);
                        if (isLast === false && viewTr.length > 1)
                            break;
                    }
                }
                trEle = $(sTop >= this._scrollValue ? viewTr[viewTr.length - 1] : viewTr[0]);
                if(trEle.length)
                    currentIndex = parseInt(trEle.attr("name"), 32);
            }						
            this._scrollValue = sTop;           
            return currentIndex;
        },
        _calculateCurrenPage: function (virtualRows, target, args) {
            var pageSize = this.model.pageSettings.pageSize;
            var currentPage, tempCPage, diff, proxy = this, trEle, isLast, viewTr = [], cur, oTop, len,currentRowValue,$currentRow;
            var rowHeight = this.getRowHeight();
            currentPage = (args.scrollTop + this.model.scrollSettings.height) / rowHeight / pageSize;            
            currentRowValue = (this.model.pageSettings.pageSize * (this.model.pageSettings.currentPage -1 ));
			 $currentRow = this.getContentTable().find("tr[name="+currentRowValue+"]").eq(0);
			if ($currentRow.length && $currentRow.offset().top > 0 && currentPage >= 1 &&  args.scrollTop < this._scrollValue && this.virtualLoadedPages.indexOf(Math.ceil(currentPage - 1) * pageSize) !== -1)
                currentPage = Math.floor(currentPage);
            else
                currentPage = Math.ceil(currentPage);

            if (args.scrollTop >= this._scrollValue && args.virtualScrollMode == "continuous" && args.reachedEnd) {
                currentPage = this.virtualLoadedPages[this.virtualLoadedPages.length - 1] / pageSize + 2;
            }

            if ($.inArray((currentPage - 1) * pageSize, this.virtualLoadedPages) !== -1) {
                var viewTrs = this.getContentTable().children("tbody").children("tr"); len = viewTrs.length;
                isLast = args.scrollTop >= this._scrollValue;
                for (var i = 0; i < len; i++) {
                    cur = viewTrs[i];
                    oTop = cur.offsetHeight + cur.offsetTop;
                    if (oTop > args.scrollTop + proxy.model.scrollSettings.height) {
                        if (viewTr.length === 0 && i !== 0)
                            viewTr = [viewTrs[cur.offsetTop <= args.scrollTop + proxy.model.scrollSettings.height ? i : i - 1]];
                        break;
                    }
                    if (oTop >= args.scrollTop && oTop <= args.scrollTop + proxy.model.scrollSettings.height) {
                        viewTr.push(cur);
                        if (isLast === false && viewTr.length > 1)
                            break;
                    }
                }
                trEle = $(args.scrollTop >= this._scrollValue ? viewTr[viewTr.length - 1] : viewTr[0]);
                if (trEle.hasClass('e-virtualrow')) {
                    if (viewTr.length === 1) {
                        currentPage++;
                    }
                }
                else
                    currentPage = parseInt(trEle.attr("name"), 10) / pageSize + 1;
            }
            this._scrollValue = args.scrollTop;
            for (var index = 0; index < virtualRows.length; index++) {
                var val = virtualRows[index];
                if (val.offsetTop + val.offsetHeight >= args.scrollTop) {
                    var prevVirtualPage = this._calculatePrevPage(virtualRows, target, args);
                    this._prevPageNo = prevVirtualPage;
                    if (currentPage == 0)
                        currentPage = 1;
                    currentPage = currentPage > this.model.pageSettings.totalPages ? this.model.pageSettings.totalPages : currentPage;
                    return currentPage;
                }
            }
            return currentPage;
        },
        _calculatePrevPage: function (virtualRows, target, args) {
            for (var i = 0; i < virtualRows.length; i++) {
                var val = virtualRows[i];
                if (val.offsetTop + val.offsetHeight >= args.scrollTop) {
                    var trElement = $(val).prevAll('tr[name]')[0];
                    if (trElement != null) {
                        return Math.ceil(parseInt($(trElement).attr('name'), 10) / this.model.pageSettings.pageSize) + 1;
                    }
                }
            }
            return -1;
        },
        _refreshVirtualPagerInfo: function () {
            var model = {};
            model.pageSize = this.model.pageSettings.pageSize;            
            model.totalRecordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
            if (model.totalRecordsCount == 0)
                this._currentPage(0);
            model.currentPage = this._currentPage();
            model.totalPages = Math.ceil(model.totalRecordsCount / model.pageSize);

            return model;
        },
        _showPagerInformation: function (model) {
            var from = (model.currentPage - 1) * model.pageSize;
            $(this.$pagerStatusBarDiv).find("div:first").html(String.format(this.localizedLabels.PagerInfo, model.currentPage, model.totalPages, model.totalRecordsCount), from, from + model.pageSize);
            $(this.$pagerStatusBarDiv).css('display', 'block');
        },
        _headerCellMerge: function(args){
            args.headerCellMerge = function(index, colspan){
                var thead = this.model.showStackedHeader && this.model.stackedHeaderRows.length ? this.columnHeaders.parent().find("tr:not('.e-stackedHeaderRow')") : this.columnHeaders;
                thead.find("th").eq(index).attr("colspan", colspan);
                for (var i = 1; i < colspan; i++) {
                    if (!ej.isNullOrUndefined(thead[0].children[index + i]))
                        thead[0].children[index + i].className += " e-hide";
                }
            };
        },
        _cellMerging: function (args) {
            args.colMerge = function (range) {
                if (this.cell.className.indexOf("e-colmerge") == -1) {
                    this.cell.className += " e-colmerge";
                    if (this.model.columns.length - this.cell.cellIndex < range)
                        range = this.model.columns.length - this.cell.cellIndex;
                    this.cell.colSpan = range;
                    for (var i = 1; i < range; i++) {
                        if (!ej.isNullOrUndefined(this.cell.parentElement.children[this.cell.cellIndex + i]))
                            this.cell.parentElement.children[this.cell.cellIndex + i].className += " e-hide";
                    }
                }
            };
            args.rowMerge = function (range) {
                if (this.cell.className.indexOf("e-rowmerge") == -1) {
                    this.cell.className += " e-rowmerge";
                    var ele = this.cell.parentNode.parentNode;
                    if (ele.rows.length - this.cell.parentElement.rowIndex < range)
                        range = ele.rows.length - this.cell.parentElement.rowIndex;
                    this.cell.rowSpan = range;
                    for (var i = 0; i < range - 1; i++) {
                        if (!ej.isNullOrUndefined(ele.children[this.cell.parentElement.rowIndex + i].nextSibling)) {
                            if (!($(".e-grid").children().is('.e-dialog')) || ($(".e-grid").find('.e-dialog').attr("style").indexOf("display: none")) != -1 || this.model.allowFiltering)
                                ele.children[this.cell.parentElement.rowIndex + i].nextSibling.children[this.cell.cellIndex].className += " e-merged e-hide";
                        }
                        else
                            break;
                    }
                }
            };
            args.merge = function (col, row) {
                if (col > 1 && row > 1) {
                    if (this.cell.className.indexOf("e-colmerge") == -1) {
                        this.cell.className += " e-colmerge";
                        var ele = this.cell.parentNode.parentNode;
                        if (ele.rows.length - this.cell.parentElement.rowIndex < row)
                            row = ele.rows.length - this.cell.parentElement.rowIndex;
                        if (!($(".e-grid").children().is('.e-dialog')) || ($(".e-grid").find('.e-dialog').attr("style").indexOf("display: none")) != -1 || this.model.allowFiltering) {
                            for (var i = 0; i < row ; i++) {
                                if (!ej.isNullOrUndefined(ele.children[this.cell.parentElement.rowIndex + i])) {
                                    var selectCell = ele.children[this.cell.parentElement.rowIndex + i].children[this.cell.cellIndex];
                                    if (this.model.columns.length - selectCell.cellIndex < col)
                                        col = this.model.columns.length - selectCell.cellIndex;
                                    selectCell.colSpan = col;
                                    for (var j = 1; j < col; j++) {
                                        if (!ej.isNullOrUndefined(selectCell.parentElement.children[this.cell.cellIndex + j]))
                                            selectCell.parentElement.children[this.cell.cellIndex + j].className += " e-hide";
                                    }
                                }
                                else
                                    break;
                            }
                        }
                        else {
                            this.cell.colSpan = col;
                            for (var j = 1; j < col; j++) {
                                if (!ej.isNullOrUndefined(this.cell.nextSibling))
                                    this.cell.parentElement.children[this.cell.cellIndex + j].className += " e-hide";
                            }
                        }
                        args.rowMerge(row);
                    }
                }
                else {
                    if (col > 1)
                        args.colMerge(col);
                    if (row > 1)
                        args.rowMerge(row);
                }
            };
        },
        _replacingContent: function () {
            var temp = document.createElement('div');
            var isVirtualization = 0;
            if (this.model.scrollSettings.enableVirtualization)
                isVirtualization = 1;
            var currentIndex = isVirtualization == 1 ? this.getCurrentIndex() + 1 : this.getCurrentIndex();
            var contentTable = this.getContentTable()[0];
            var colGroup = $(contentTable).find("colgroup").first();
            var rowHeight = this.getRowHeight();
            colGroup.replaceWith(this._getMetaColGroup());
           (this.model.detailsTemplate != null || this.model.childGrid!=null)&& colGroup.prepend(this._getIndentCol());
            var tbody = contentTable.tBodies[0];
            var currentData = this.model.currentViewData;
            if (!ej.isNullOrUndefined(this._currentPageData)) {
                this._virtualLoadedRecords[this._currentPage()] = this._currentPageData;
                this._currentPageData = null;
            }
            else
                this._virtualLoadedRecords[this._currentPage()] = currentData;
            var elementTbody = $("<tbody></tbody>").append($.render[this._id + "_JSONTemplate"](currentData));
            var proxy = this;
            var $elementTbody = elementTbody.children("tr");
            if (this._allowcolumnSelection && this.selectedColumnIndexes.length > 0) {
                for (var index = 0; index < this.selectedColumnIndexes.length; index++) {
                    var ind = this.selectedColumnIndexes[index] + 1;
                    $elementTbody.find('td:nth-of-type(' + ind + ')').addClass("e-columnselection");
                }
            }
            this.virtualLoadedPages.push(currentIndex >= isVirtualization ? currentIndex : isVirtualization);
            if (this._lastRow) {
                var currElementsLength = this._virtualLoadedRecords[this._currentPage()].length;
                $elementTbody.slice(-currElementsLength).attr('name', currentIndex);
                var prevPageElements = $elementTbody.slice(0, $elementTbody.length - currElementsLength);
                if (prevPageElements.length) {
                    var prevPage = ((this._currentPage() - 2) * (this.model.pageSettings.pageSize));
                    prevPageElements.attr('name', prevPage);
                    this.virtualLoadedPages[this.virtualLoadedPages.length - 1] = (prevPage >= isVirtualization) ? prevPage : isVirtualization;
                    this.virtualLoadedPages.push((currentIndex >= isVirtualization) ? currentIndex : isVirtualization);
                }
            }
            else
                $($elementTbody).attr('name', currentIndex);
            var orderedVirtualPages = ej.dataUtil.mergeSort(ej.distinct(this.virtualLoadedPages));
            var minValue = ej.dataUtil.min(orderedVirtualPages);
            var maxValue = ej.dataUtil.max(orderedVirtualPages);
            $(tbody).children(".e-virtualrow").remove();
            for (var i = 0; i < orderedVirtualPages.length; i++) {
                var val = orderedVirtualPages[i];
                var pVal = orderedVirtualPages[i - 1];
                if (val != this.orderedVirtualLoadedPage[i] || this.orderedVirtualLoadedPage[i] == undefined) {
                    if (pVal != undefined)
                        $elementTbody.insertAfter($(tbody).children('[name=' + pVal + ']:last'));
                    else
                        $elementTbody.insertBefore($(tbody).children('[name=' + this.orderedVirtualLoadedPage[i] + ']:first'));
                    this.orderedVirtualLoadedPage = orderedVirtualPages;
                }
                if (val != 0) {
                    var prevValue = val == minValue ? minValue : pVal;
                    var middleRows = val - prevValue - proxy.model.pageSettings.pageSize;
                    if (middleRows > 0) {
                        var virtualTRMiddle = document.createElement("tr");
                        $(virtualTRMiddle).addClass("e-virtualrow").css("height", rowHeight * middleRows).insertBefore($(tbody).children('[name=' + val + ']:first'));
                    }
                }
                if (val == maxValue) {
                    var bottomRows = proxy._gridRecordsCount - maxValue - proxy.model.pageSettings.pageSize;
                    if (bottomRows > 0) {
                        var virtualTRBottom = document.createElement("tr");
                        $(virtualTRBottom).addClass("e-virtualrow").css("height", rowHeight * bottomRows).appendTo(tbody);
                    }
                }
            }
            if (minValue > 0) {
                var virtualTRTop = document.createElement("tr");
                $(virtualTRTop).addClass("e-virtualrow").css("height", rowHeight * minValue).prependTo(tbody);
            }
            var $content = this.getContent();
            var focusTR = $(tbody).children("tr[name=" + currentIndex + "]")[0];
            var focusPrev = focusTR.previousSibling;
            var con = $content.height();
            var focus = focusTR.offsetTop
            if (this._virtaulUnSel) {
                var virtualClone = $.extend(true, [], this._virtaulUnSel);
                for (var i = 0; i < virtualClone.length; i++) {
                    var row = virtualClone[i];
                    var page = this.model.pageSettings.currentPage;
                    var corresPage = row % this.model.pageSettings.pageSize == 0 ? parseInt(row / this.model.pageSettings.pageSize) : parseInt(row / this.model.pageSettings.pageSize) + 1;
                    if (corresPage == page) {
                        var index = row % this.model.pageSettings.pageSize;
                        var $row = $(tbody).find("tr[name=" + currentIndex + "]").eq(index);
                        $row.attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                        var removeIndex = this._virtaulUnSel.indexOf(row);
                        if (removeIndex != -1)
                            this._virtaulUnSel.splice(removeIndex, 1);
                    }
                }
            }
            if ((focusTR && focusPrev && ((this._virIndex || $(focusPrev).hasClass("e-virtualrow")) || focusPrev.offsetTop > (currentIndex * con))
            && (this._gridRecordsCount - currentIndex >= this.model.pageSettings.pageSize || focusTR.offsetParent.offsetHeight - focus < con)) || this._lastRow) {
                if (this._lastRow) this._lastRow = false;
                if (this._virIndex) this._virIndex = false;
                this._isVirtualRecordsLoaded = true;
                //this.getContent().children("div").first().scrollTop(this.getContent().find(".content").scrollTop() - (this.getContent().find(".content").scrollTop() - focusTR.offsetTop));
                $content.find(".e-content").scrollTop(focus);
                this._scrollValue = this.getContent()[0].firstChild.scrollTop;
            }
            var $contentTableTr = $(contentTable).get(0);
            var tFirst = temp.firstChild;
            this._currentJsonData = currentData;
            this._gridRows = $(contentTable).get(0).rows;
            var lastVirtualRow = $(contentTable).find(".e-virtualrow").last();
            var lastVirtualRowHeight = this.model.scrollSettings.virtualScrollMode == "normal" ? (lastVirtualRow.height() - ($(contentTable).height() - (this._gridRecordsCount * rowHeight))) : 1;
            lastVirtualRow.css("height", lastVirtualRowHeight);
			if(this._enableCheckSelect && this.element.find(".e-checkselectall").prop("checked"))
				this._virtualCheckSelection(currentIndex);
            this._eventBindings();
        },
		_virtualCheckSelection:function(index){
			var tbody = this.getContentTable()[0].tBodies[0];
		    $(tbody).find("tr[name=" + index + "]").find('.e-checkcelldiv input').prop("checked","checked")
			$(tbody).find("tr[name=" + index + "]").attr("aria-selected", "true").find("td").addClass("e-selectionbackground e-active");
		},
		_replacingVirtualContent: function () {                  
            var contentTable = this.getContentTable()[0];                            
            var currentLoadedIndexes = this._currentLoadedIndexes;            
            var tempTbody = $("<tbody></tbody>");		                   
            if (this._checkCurrentVirtualView(this._virtualLoadedRows, this._currentVirtualIndex)) {
				var currentRows = [];
                for (var i = 0; i < currentLoadedIndexes.length; i++) {
					$.merge(currentRows, this._virtualLoadedRows[currentLoadedIndexes[i]]);                    					
                }
				$(tempTbody).append(currentRows);
            }
            else {
				var elementTbody = $("<tbody></tbody>"); 				
                for (var i = 0; i < currentLoadedIndexes.length; i++) {					
                    var currentIndex = currentLoadedIndexes[i], virtualRow = this._virtualLoadedRows[currentIndex];                  
                    if (!virtualRow) {
                        this._currentVirtualRowIndex = currentIndex > 0 ? (currentIndex - 1) * (this._virtualRowCount) : 0;
                        var elementTbody = $("<tbody></tbody>").append($.render[this._id + "_JSONTemplate"](this._virtualLoadedRecords[currentIndex]));                        
                        var $elementTbody = elementTbody[0].rows, length = $elementTbody.length - 1;                        
                        $($elementTbody[length]).addClass("e-virtualview" + currentIndex);
						var hex = currentIndex.toString(32);
                        var vRows = $($elementTbody).attr('name', hex);                        
                        if (vRows.length == this._virtualRowCount || currentIndex == this._totalVirtualViews){
                            this._virtualLoadedRows[currentIndex] = vRows;
                            tempTbody.append($elementTbody);
                        }
                    }
                    else {
                        if (currentIndex < this._currentVirtualIndex) {
                            var vRow = tempTbody.find(".e-virtualview" + currentIndex);
                            if (vRow.length)
                                $(virtualRow).insertBefore(vRow);
                            else
                                tempTbody.prepend(virtualRow);
                        }
                        else
                            $(virtualRow).insertAfter(tempTbody.find(".e-virtualview" + (currentIndex - 1)));
                    }					
                }				
            }						   						
            contentTable.replaceChild(tempTbody[0], contentTable.lastChild);
			var ind;
            if (this.selectedRowsIndexes.length && !this._enableCheckSelect) {
                var loadedIndex = $.inArray(this._prevVirtualIndex, this._currentLoadedIndexes);
                var prevLoadedIndex = $.inArray(this._prevVirtualIndex, this._prevLoadedIndexes);
                if (loadedIndex != -1 && loadedIndex != prevLoadedIndex) {
                    var changes = this._prevVirtualIndex > this._currentVirtualIndex ? this._virtualRowCount : -this._virtualRowCount;
                    this.selectedRowsIndexes = this.selectedRowsIndexes.map(function (val) { return val + changes; });
                    var selectIndex = this._selectedRow() + changes;
                    selectIndex = selectIndex >= 0 ? selectIndex : -1;
                    this._selectedRow(selectIndex);
					ind = selectIndex;
                }
            }
            $(contentTable.rows).removeClass("e-hover");
			this._setVirtualTopBottom();
			if(this._isThumbScroll || this._remoteRefresh){				
				//this._scrollObject.refresh();				
				this._scrollObject._content[0].scrollTop = this._scrollObject.scrollTop();
                this._isThumbScroll = this._remoteRefresh = false;
            }
			if(this.model.allowSelection)							
				this._checkVirtualSelection();																						
			this._gridRows = contentTable.rows;
			this._currentJsonData = this.model.currentViewData;
			if(!this._checkCurrentVirtualView(this._queryCellView, this._currentVirtualIndex))            
				this._eventBindings();			
			if(this.model.queryCellInfo || this.model.rowDataBound){
				for(var i = 0; i < this._currentLoadedIndexes.length; i++){
					if($.inArray(this._currentLoadedIndexes[i], this._queryCellView) == -1 && !ej.isNullOrUndefined(this._virtualLoadedRows[this._currentLoadedIndexes[i]]))
						this._queryCellView.push(this._currentLoadedIndexes[i]);						
				}
			}
			this._trigger("refresh");
        },
		_setVirtualTopBottom: function(){
			var contentTable = this.getContentTable()[0];
			var rowHeight = this._vRowHeight;
			var orderedVirtualNames = ej.dataUtil.mergeSort(ej.distinct(this._currentLoadedIndexes));				
			var minValue = ej.dataUtil.min(orderedVirtualNames);
			if(!this.initialRender && !this._virtualLoadedRows[minValue])
				minValue = minValue + 1;
			var maxValue = ej.dataUtil.max(orderedVirtualNames);
			var recordsCount = this._getVirtualTotalRecord(), botHeight, maxViewValue;
			if(this.model.scrollSettings.virtualScrollMode == "continuous" && this._virtualLoadedRows[maxValue + 1]	){
				var keys = Object.keys(this._virtualLoadedRows);
				maxViewValue =  parseInt(ej.dataUtil.max(keys), 10);
				maxValue = maxViewValue - maxValue;
			}			
			botHeight = (maxValue * this._virtualRowCount * rowHeight);
			if($.inArray(this._totalVirtualViews, this._currentLoadedIndexes) != -1 && this._currentVirtualIndex != this._totalVirtualViews)
				botHeight = (recordsCount - (this._virtualRowCount - this._lastViewData)) * rowHeight;										
			var vBot = (recordsCount * rowHeight) - botHeight;	
			if(this.model.scrollSettings.virtualScrollMode == "continuous" && !this._virtualLoadedRows[maxValue + 1]){				
				vBot = maxViewValue && maxViewValue <=  maxValue + 1 ? vBot : 1;			 				
			}
			this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();
			var max = 1000000;							
			if (vBot > 0 && this._getVirtualTotalRecord() > this._virtualRowCount * 2){ 
				if(Math.round(vBot).toString().length < 7)
					ej.buildTag("div.e-virtualbottom", "", { height: vBot }).insertAfter(contentTable);
				else {					
					ej.buildTag("div.e-virtualbottom").insertAfter(contentTable);
					var length = Math.ceil(vBot / max);
					for(var i = 0; i < length; i++){
						var divHeight = max;
						if(i == length - 1) divHeight = vBot % max;
						$(contentTable).next().append(ej.buildTag("div", "", { height: divHeight }));
					}
				}							
			}
			if (minValue > 1) {				
				var vTop =  (minValue - 1) * this._virtualRowCount * rowHeight;																	
				if(Math.round(vTop).toString().length < 7)
					ej.buildTag("div.e-virtualtop", "", { height: vTop }).insertBefore(contentTable);			
				else {					
					ej.buildTag("div.e-virtualtop").insertBefore(contentTable);
					var length = Math.ceil(vTop / max);
					for(var i = 0; i < length; i++){
						var divHeight = max;
						if(i == length - 1) divHeight = vTop % max;
						$(contentTable).prev().append(ej.buildTag("div", "", { height: divHeight }));
					}
				}								
			}      				
			if(this._scrollObject.model.scrollTop != this._scrollValue)
				this.getContent().ejScroller("model.scrollTop", this._scrollValue);				
        },
		_checkVirtualSelection: function(){
			var contentTable = this.getContentTable()[0];
			var selectedIndexes, rowIndex;
			if (this._enableCheckSelect) {
			    this.selectedRowsIndexes = [];
				this._virtualSelectedRowIndex = [];
			    this._virtualSelectedRecords = [];
			    this.model.selectedRecords = [];
			    var count = this.model.pageSettings.pageSize;
			    selectedIndexes = [].concat.apply([], this.checkSelectedRowsIndexes.map(function (n, i) {
			        return n.map(function (x) { return x + (i * count) });
			    }));
			}
			else
			    selectedIndexes = this._virtualSelectedRowIndex;
			if (selectedIndexes)
			    for (var i = 0; i < selectedIndexes.length; i++) {
			        var selectedIndex = selectedIndexes[i];
			        var selectedData = this._getSelectedViewData(selectedIndex);
			        var viewIndex = selectedData.viewIndex
			        if ($.inArray(viewIndex, this._currentLoadedIndexes) != -1) {
			            var selIndex = selectedIndex % this._virtualRowCount + this._currentLoadedIndexes.indexOf(viewIndex) * this._virtualRowCount;
			            if (!ej.isNullOrUndefined(contentTable.rows[selIndex])) {
			                if (!$(contentTable.rows[selIndex].cells).hasClass("e-selectionbackground") && this._virtualSelectedRowIndex.length-1){
			                    $($(contentTable.rows[selIndex]).attr("aria-selected", "true")[0].cells).addClass("e-selectionbackground e-active");
								this.model.selectedRowIndex = selIndex;
						    }
			                if (this._enableCheckSelect || !$(contentTable.rows[selIndex].cells).hasClass("e-selectionbackground")) {
			                    rowIndex = $(contentTable.rows[selIndex]).index();
			                    this.selectedRowsIndexes.push(rowIndex);
								this._virtualSelectedRowIndex.push(rowIndex);
			                    this._virtualSelectedRecords[rowIndex] = selectedData.data;
			                    this._virtualCheckSelectedRecords[((viewIndex - 1) * this._virtualRowCount) + rowIndex] = selectedData.data;
			                    this.model.selectedRecords.push(selectedData.data);
			                    $(contentTable.rows[selIndex]).find(".e-checkcelldiv [type=checkbox]").prop("checked", true);
			                }
			            }
			        }
			    }
			for(var i = 0; i < this._rowIndexesColl.length; i++){
				var selectedIndex = this._rowIndexesColl[i];
				var viewIndex = this._getSelectedViewData(selectedIndex).viewIndex;
				if(($.inArray(viewIndex, this._currentLoadedIndexes) != -1 && $.inArray(selectedIndex, this._virtualRowCellSelIndex) == -1) || this._virtualDataRefresh){
					var curIndex = $.inArray(selectedIndex, this._rowIndexesColl);
					var cellIndexes = this.selectedRowCellIndexes[curIndex].cellIndex;
					for(var j = 0; j < cellIndexes.length; j++)
						this._selectMultipleCells(selectedIndex, cellIndexes[j]);						
				}
			}
			var selectedRows = $(contentTable.rows).find(".e-active, .e-cellselectionbackground").closest("tr");
			for(var i = 0; i < selectedRows.length; i++){
				var limit = parseInt($(selectedRows[i]).attr("name"), 32) * this._virtualRowCount;
				var remain = this._virtualRowCount - $(selectedRows[i]).index() % this._virtualRowCount;	
				var current = limit - remain;
				    rowIndex = $(selectedRows[i]).index();
				var nameIndex = $(selectedRows[i]).attr("name");
				var selectedIndex = parseInt(nameIndex, 32) * this._virtualRowCount - this._virtualRowCount + $(selectedRows[i]).prevAll("tr[name="+nameIndex+"]").length;
				if (this._virtualSelectedRowIndex.length && $.inArray(this._enableCheckSelect?rowIndex:selectedIndex, this._virtualSelectedRowIndex) == -1) {
					this._clearVirtualSelection = true;
					this.clearSelection(selectedIndex);					
				}				
				if(this._rowIndexesColl.length && $.inArray(current, this._rowIndexesColl) == - 1)											
					$(this.getRowByIndex(rowIndex)[0].cells).removeClass("e-cellselectionbackground e-activecell");											
			}	
			$(contentTable.rows).find('.e-columnselection').removeClass('e-columnselection');
            for (var index = 0; index < this.selectedColumnIndexes.length; index++) {
				var ind = this.selectedColumnIndexes[index] + 1;
                $(contentTable.rows).find('td:nth-of-type(' + ind + ')').addClass("e-columnselection");
            }  				
			this._clearVirtualSelection = false;
		},
        _refreshPagerTotalRecordsCount: function () {
            if (this.model.filterSettings.filteredColumns.length)
                this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
            else
                this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
        },
        _maxZindex: function () {
            var maxZ = 1;
            maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
                if ($(e).css('position') == 'absolute')
                    return parseInt($(e).css('z-index')) || 1;
            }));
            if (maxZ == undefined || maxZ == null)
                maxZ = 1;
            return maxZ;
        },
        _keyPressed: function (action, target, e, event) {
            var $target = $(target), toolbarId;
            if ($target.hasClass('e-tooltxt') && e.code == 13) {
                var args = { currentTarget: target, target: target.firstChild }, $toolbar = $(target).closest(".e-gridtoolbar");
                $toolbar.ejToolbar("instance")._trigger("click", args);
                return false;
            }
            if (this._allowcellSelection && !(this._previousRowCellIndex && this._previousRowCellIndex.length != 0) && !(this._lastSelectedCellIndex && this._lastSelectedCellIndex.length != 0)) {
                this._previousRowCellIndex = [];
                this._previousRowCellIndex.push([0, [0]]);
                this._lastSelectedCellIndex.push([0, [0]]);
            }
            if ($target.hasClass('e-ddl') && e.code == 13 && $(document.activeElement).parents('td').hasClass("e-templatecell") )
            return true;
            if (!this.model.allowKeyboardNavigation || ((target.tagName == 'INPUT' || target.tagName == 'TEXTAREA') && this.model.keyConfigs[action].indexOf(",") == -1 && e.code != 13 && e.code != 27 && e.code != 9) || String.fromCharCode(e.code).toLowerCase() == this.element[0].accessKey.toLowerCase())
                return true;
            if ($(target).prop("type") == "checkbox" && (e.code != 13 && e.code != 9 && e.code!=27))
                return true;
            if (this.model.editSettings.editMode == "batch" && ((target.tagName == 'INPUT' || target.tagName == 'TEXTAREA') && e.code != 13 && e.code != 9 && e.code!=27) && ((target.selectionStart != 0 && action != "moveCellRight") || (target.selectionEnd != target.value.length && action != "moveCellLeft")))
				return true;
            if (this.model.allowFiltering && ($target.hasClass('e-filtertext') && e.code == 13) || ($target.hasClass('e-fltrbtn') && e.code == 13))
                return true;
            if ((this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") && $(target).closest("#" + this._id + "EditForm").length)
                return true;
            else if ($(target).parent().siblings("#" + this._id + "EditForm").length)
                return true;
            if (e.code == 13 && $target.parent().hasClass("e-unboundcelldiv"))
                return true;
            if (e.code == 13 && target.tagName == 'INPUT' && $target.closest("#" + this._id + "_search").length)
                action = "searchRequest";
            if (e.code == 13 && this._excelFilter != null && !ej.isNullOrUndefined(this._excelFilter._openedFltr) && this._excelFilter._openedFltr.length && this._excelFilter._openedFltr.is(":visible"))
                action = "excelfilter";
            if (e.code == 13 && $(target).hasClass("e-gridtoolbar")) {
                toolbarId = $target.find(".e-hover").attr("Id");
                action = "toolbarOperationRequest";
            }
            if ((action == "multiSelectionByRightArrow" && e.code == 39 && e.shift == true) || (action == "multiSelectionByLeftArrow" && e.code == 37 && e.shift == true)) {
                action = "multiSelectionByRLArrow";
            }
            if (!this.model.isEdit && action == "cancelRequest") {
                this.clearSelection();
                this.clearCellSelection();
				this.clearColumnSelection();
                return true;
            }
            if ($(target).find("input.e-dropdownlist").attr("aria-expanded") == "true" && this.model.isEdit && action == "saveRequest")
                return true;
            if (this.getPager() != null)
                var pager = this.getPager().ejPager("model"), pageIndex = pager.currentPage;
            var returnValue = false, curEl, $target = $(target);
            if ($target.closest(".e-grid").attr("Id") !== this._id)
                return;
            switch (action) {
                case "insertRecord":
                    if (ej.gridFeatures.edit && (!this.model.isEdit && (!this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")))
                        this._toolbarOperation(this._id + "_add");
                    if(pageIndex == 0) pageIndex = 1;
                    break;
                case "toolbarOperationRequest":
                    this._toolbarOperation(toolbarId);
                    this.element.focus();
                    break;
                case "searchRequest":
                    this.search($target.val());
                    break;
                case "excelfilter":
                    var dlgID = this._id + this._excelFilter._$colType;
                    if (this._excelFilter._openedFltr.hasClass("e-dlgcustom"))
                        dlgID += "Custom";
                    this._excelFilter._openedFltr.find("#" + dlgID + "_OkBtn").trigger("click");
                    break;
                case "saveRequest":
                    if (ej.gridFeatures.edit) {
                        if (this.model.editSettings.editMode == "batch") {
							this._enterKey = true;
                            var tr = $(this.getRowByIndex(this._bulkEditCellDetails.rowIndex))
                            ej.copyObject(this._copyBulkEditCellDetails, this._bulkEditCellDetails, true);
                            if(this.model.isEdit && tr.hasClass('e-insertedrow'))
                                this._batchCellValidation(this._bulkEditCellDetails.rowIndex);
                            this._moveCurrentCell("down");
                        }
                        else
                            this._toolbarOperation(this._id + "_update");
                            event.stopPropagation();
                    }
                    break;
                case "cancelRequest":
                    if (ej.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_cancel");
                    break;
                case "deleteRecord":
                    if (ej.gridFeatures.edit)
                        this._toolbarOperation(this._id + "_delete");
                    break;
                case "editRecord":
                    if (ej.gridFeatures.edit && (!this.model.isEdit || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")))
                        this._toolbarOperation(this._id + "_edit");
                    break;
                case "totalGroupCollapse":
                    if (ej.gridFeatures.group) {
                        this.collapseAll();
                        this.element.focus();
                    }
                    break;
                case "totalGroupExpand":
                    if (ej.gridFeatures.group) {
                        this.expandAll();
                        this.element.focus();
                    }
                    break;
                case "selectedGroupExpand":
                    if (ej.gridFeatures.group) {
                        this._$currentTr = $(this.getRows()).eq(this._selectedRow());
                        curEl = this._$currentTr.parents("tr").first().prev().find(".e-recordpluscollapse");
                        this.expandCollapse(curEl);
                    }
                    break;
                case "selectedGroupCollapse":
                    if (ej.gridFeatures.group) {
                        this._$currentTr = $(this.getRows()).eq(this._selectedRow());
                        curEl = this._$currentTr.parents("tr").first().prev().find(".e-recordplusexpand");
                        this.expandCollapse(curEl);
                    }
                    break;
                case "firstRowSelection":
                    if (ej.gridFeatures.selection)
                        this.selectRows(0);
                    break;
                case "lastRowSelection":
                    var lastRow;
                    if (ej.gridFeatures.selection)
                        if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
                            lastRow = $(this.getRows()[0]).length - 1;
                        else
                            lastRow = $(this._excludeDetailRows()).length - 1;
                        this.selectRows(lastRow);
                    break;
                case "rowUpSelection":
                    this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
                    var index = this._traverseRow != null ? this._traverseRow : this._selectedRow();
                    if (index > 0) {
                        this._nextRow = index;
                        this._prevRow = index - 1;
                        var $removeHover = $(this.getContent().find("tr.e-traverse")[0]);
                        $removeHover.removeClass("e-traverse");
                        this.getRowByIndex(this._prevRow).addClass("e-traverse");
                        var selectedRows = this.getContent().find("tr.e-traverse");
                        this._traverseRow = this.getIndexByRow(selectedRows);
                    }
                    break;
                case "rowDownSelection":
                    this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
                    var index = this._traverseRow != null ? this._traverseRow : this._selectedRow();
                    if ((index + 1 < this.model.currentViewData.length) || (this.model.scrollSettings.allowVirtualScrolling)) {
                        this._prevRow = index;
                        this._nextRow = index + 1;
                        var $removeHover = $(this.getContent().find("tr.e-traverse")[0]);
                        $removeHover.removeClass("e-traverse");
                        this.getRowByIndex(this._nextRow).addClass("e-traverse");
                        var selectedRows = this.getContent().find("tr.e-traverse");
                        this._traverseRow = this.getIndexByRow(selectedRows);
                    }
                    break;
                case "randomSelection":
                    this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
                    if (this.model.selectionType == "multiple")
                        this.multiSelectCtrlRequest = true;
                    var selectedRows = this.getContent().find("tr.e-traverse");
                    this._traverseRow = this.getIndexByRow(selectedRows);
                    if (this._traverseRow != -1) {
                        if (this.model.selectionSettings.enableToggle && this.getSelectedRecords().length == 1 && $.inArray(this._traverseRow, this.selectedRowsIndexes) != -1)
                            this.clearSelection(selectedIndex);
                        else
                            this.selectRows(this._traverseRow);
                    }
                    this.getRowByIndex(index).removeClass("e-traverse");
                    this.multiSelectCtrlRequest = false;
                    break;
                case "upArrow":
                    this.multiSelectCtrlRequest = false;
                    this._traverseRow = null;
					if( this.model.isEdit && $target.hasClass('e-ddl'))
						break;
					if (ej.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined) && (this.element.is(document.activeElement)|| this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
                        if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        if (this._selectedRow() > 0) {
                            var row = this.getRowByIndex(this._selectedRow() - 1);
                            !this._enableCheckSelect && this.selectRows(this._selectedRow() - 1, null, row);
                            if (this.model.editSettings.editMode == "batch" && !this.model.scrollSettings.enableVirtualization && $.inArray("cell", this.model.selectionSettings.selectionMode) == -1)
                                this._moveCurrentCell("up");
                        }
                        if (this._allowcellSelection && this._previousRowCellIndex &&  this._previousRowCellIndex.length != 0 && this._lastSelectedCellIndex[0][0] > 0) {
                            this.selectCells([[this._lastSelectedCellIndex[0][0] - 1, this._lastSelectedCellIndex[0][1]]]);
                        }
                    }
                    break;
                case "downArrow":
                    this.multiSelectCtrlRequest = false;
                    this._traverseRow = null;
					if( this.model.isEdit && $target.hasClass('e-ddl'))
						break;
					if (ej.gridFeatures.selection && (this.element.is(document.activeElement)|| this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
                        if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        if(this._selectedRow() == -1)
							this.model.selectedRowIndex=0;
                        var lastRow = this._excludeDetailRows().length - 1;
                        if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
                            lastRow = this.getRows()[0].length - 1;
                        if (this._selectedRow() != lastRow && this._selectedRow() != -1) {
							var row = this._selectedRow() == 0 ? this.getRowByIndex(this._selectedRow()):this.getRowByIndex(this._selectedRow() - 1);
                            !this._enableCheckSelect && this.selectRows(this._selectedRow() + 1, null, row);
                            if (this.model.editSettings.editMode == "batch" && !this.model.scrollSettings.enableVirtualization && $.inArray("cell", this.model.selectionSettings.selectionMode) == -1) {
                                ej.copyObject(this._copyBulkEditCellDetails, this._bulkEditCellDetails, true);
                                this._moveCurrentCell("down");
                            }
                        }
                        if (this._allowcellSelection && this._previousRowCellIndex &&  this._previousRowCellIndex.length != 0 && this._lastSelectedCellIndex[0][0] < lastRow) {
                            this.selectCells([[this._lastSelectedCellIndex[0][0] + 1, this._lastSelectedCellIndex[0][1]]]);
                        }
                    }
                    break;
                case "rightArrow":
                    if (ej.gridFeatures.selection && this._allowcellSelection && (this.element.is(document.activeElement)|| this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
                        if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var row, rowIndex, columnIndex;
                        rowIndex = this._lastSelectedCellIndex[0][0];
                        row = this.getRowByIndex(rowIndex);
                        columnIndex = this._lastSelectedCellIndex[0][1][0];
                        if (ej.isNullOrUndefined(columnIndex))
                            columnIndex = this._lastSelectedCellIndex[0][1];
                        cellIndex = $(row.find("td:gt(" + columnIndex + ")").not(".e-hide")[0]).index();
                        if (cellIndex == -1) {
                            rowIndex = rowIndex + 1;
                            row = this.getRowByIndex(rowIndex);
                            cellIndex = $(row.find("td").not(".e-hide")[0]).index();
                        }
                        if (rowIndex != -1 && cellIndex != -1)
                            this.selectCells([[rowIndex, [cellIndex]]]);
                    }
                    break;
                case "leftArrow":
                    if (ej.gridFeatures.selection && this._allowcellSelection && (this.element.is(document.activeElement)|| this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
                        if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var row, rowIndex, columnIndex, cellIndex, Index;
                        rowIndex = this._lastSelectedCellIndex[0][0];
                        row = this.getRowByIndex(rowIndex);
                        var columnIndex = this._lastSelectedCellIndex[0][1];
                        Index = row.find("td:lt(" + columnIndex + ")").not(".e-hide").length - 1;
                        cellIndex = $(row.find("td:lt(" + columnIndex + ")").not(".e-hide")[Index]).index();
                        if (cellIndex == -1) {
                            rowIndex = rowIndex - 1;
                            row = this.getRowByIndex(rowIndex);
                            Index = row.find("td:lt(" + this.model.columns.length + ")").not(".e-hide").length - 1;
                            cellIndex = $(row.find("td:lt(" + this.model.columns.length + ")").not(".e-hide")[Index]).index();
                        }
                        if (rowIndex != -1 && cellIndex != -1)
                            this.selectCells([[rowIndex, [cellIndex]]]);
                    }
                    break;
                case "firstCellSelection":
                    if (ej.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var lastRow = $(this.getRows()).length - 1;
                        lastRow > -1 && this.selectCells([[0, [0]]]);
                    }
                    break;
                case "lastCellSelection":
                    var lastRow;
                    if (ej.gridFeatures.selection && this._allowcellSelection) {
                        if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
                            lastRow = this.getRows()[0].length - 1;
                        else
                            lastRow = $(this._excludeDetailRows()).length - 1;
                        lastRow > -1 && this.selectCells([[lastRow, [this.model.columns.length - 1]]]);
                    }
                    break;
                case "nextPage":
                    if (this.getPager() != null)
                        pageIndex = pageIndex + 1;
                    if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "msie")
                        this.element.focus();
                    break;
                case "previousPage":
                    if (this.getPager() != null)
                        pageIndex = pageIndex - 1;
                    if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "msie")
                        this.element.focus();
                    break;
                case "lastPage":
                    if (this.getPager() != null)
                        pageIndex = pager.totalPages;
                    break;
                case "firstPage":
                    if (this.getPager() != null)
                        pageIndex = 1;
                    break;
                case "nextPager":
                    if (this.getPager() != null)
                        pageIndex = Math.ceil(pager.currentPage / pager.pageCount) * pager.pageCount + 1;
                    break;
                case "previousPager":
                    if (this.getPager() != null)
                        pageIndex = (Math.floor(pager.currentPage / pager.pageCount) - 1) * pager.pageCount + 1;
                    break;
                case "moveCellLeft":
                    if (this.model.editSettings.editMode == "batch"){
						this._tabKey = true;
						returnValue = this._moveCurrentCell("left", event);
					}
                    else
                        returnValue = true;
                    if (e.code == 9 && $.inArray("cell", this.model.selectionSettings.selectionMode) != -1)
                        this.selectCells([[this._bulkEditCellDetails.rowIndex, this._bulkEditCellDetails.columnIndex]]);
                    break;
                case "moveCellRight":
                    if (this.model.editSettings.editMode == "batch" && $target){
						this._tabKey = true;
						returnValue = this._moveCurrentCell("right", event);
					}
                    else
                        returnValue = true;
                    if (e.code == 9 && $.inArray("cell", this.model.selectionSettings.selectionMode) != -1)
                        this.selectCells([[this._bulkEditCellDetails.rowIndex, this._bulkEditCellDetails.columnIndex]]);
                    break;
                case "multiSelectionByDownArrow":
                    if (ej.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined)) {
                        var lastRow = this._excludeDetailRows().length - 1, $target = this.element.find('.e-gridcontent').find('.e-rowcell');
                        if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
                            lastRow = this.getRows()[0].length - 1;
                        this.multiSelectShiftRequest = true;
                        if (this._allowcellSelection && this._lastSelectedCellIndex[0][0] <= lastRow && this._lastSelectedCellIndex[0][0] != -1) {
                            var rowIndex, columnIndex;
                            rowIndex = this._lastSelectedCellIndex[0][0] + 1;
                            columnIndex = parseInt(this._lastSelectedCellIndex[0][1]);
                            if (rowIndex <= lastRow)
                                this.selectCells([[rowIndex, [columnIndex]]])
                        }
                        this.multiSelectShiftRequest = false;
                        if (this._selectedRow() <= lastRow && this._selectedRow() != -1) {
                            var selectedRow = this._selectedRow() + 1, fromIndex = this._previousIndex;
                            this.multiSelectShiftRequest = true;
                            this.selectRows(fromIndex, selectedRow, $target);
                            this.multiSelectShiftRequest = false;
                            if ((selectedRow - 1) == lastRow) {
                                this.selectRows(fromIndex, lastRow);
                                selectedRow = lastRow;
                            }
                        }
                        this._selectedRow(selectedRow);
                        this._previousIndex = fromIndex;
                    }
                    this.model.editSettings.editMode == "batch" && this.element.focus();
                    break;
                case "multiSelectionByUpArrow":
                    var firstRow = 0;
                    if (ej.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined)) {
                        var lastRow = this._excludeDetailRows().length - 1, $target = this.element.find('.e-gridcontent').find('.e-rowcell');
                        this.multiSelectShiftRequest = true;
                        if (this._allowcellSelection && this._lastSelectedCellIndex[0][0] <= lastRow && this._lastSelectedCellIndex[0][0] != -1) {
                            var rowIndex, columnIndex;
                            rowIndex = this._lastSelectedCellIndex[0][0] - 1;
                            columnIndex = parseInt(this._lastSelectedCellIndex[0][1]);
                            if (rowIndex != -1)
                                this.selectCells([[rowIndex, [columnIndex]]])
                        }
                        this.multiSelectShiftRequest = false;
                        if (this._selectedRow() >= 0 && this._selectedRow() >= -1) {
                            var selectedRow = this._selectedRow() - 1, fromIndex = this._previousIndex;
                            this.multiSelectShiftRequest = true;
                            this.selectRows(fromIndex, selectedRow, $target);
                            this.multiSelectShiftRequest = false;
                            if (selectedRow < 0) {
                                this.selectRows(fromIndex, firstRow);
                                selectedRow = firstRow;
                            }
                        }
                        this._selectedRow(selectedRow);
                        this._previousIndex = fromIndex;
                    }
                    this.model.editSettings.editMode == "batch" && this.element.focus();
                    break;
                case "multiSelectionByRLArrow":
                    if (ej.gridFeatures.selection && this._allowcellSelection && (this.element.is(document.activeElement) || this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
                        if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
                            return true;
                        var row, rowIndex, columnIndex, cellIndex, Index;;
                        this.multiSelectShiftRequest = true;
                        rowIndex = this._lastSelectedCellIndex[0][0];
                        row = this.getRowByIndex(rowIndex);
                        if (e.code == 37 && e.shift == true) {
                            columnIndex = this._lastSelectedCellIndex[0][1];
                            Index = row.find("td:lt(" + columnIndex + ")").not(".e-hide").length - 1;
                            cellIndex = $(row.find("td:lt(" + columnIndex + ")").not(".e-hide")[Index]).index();
                            if (cellIndex == -1) {
                                rowIndex = rowIndex - 1;
                                row = this.getRowByIndex(rowIndex);
                                Index = row.find("td:lt(" + this.model.columns.length + ")").not(".e-hide").length - 1;
                                cellIndex = $(row.find("td:lt(" + this.model.columns.length + ")").not(".e-hide")[Index]).index();
                            }
                        }
                        else {
                            columnIndex = this._lastSelectedCellIndex[0][1][0];
                            if (ej.isNullOrUndefined(columnIndex))
                                columnIndex = this._lastSelectedCellIndex[0][1];
                            cellIndex = $(row.find("td:gt(" + columnIndex + ")").not(".e-hide")[0]).index();
                            if (cellIndex == -1) {
                                rowIndex = rowIndex + 1;
                                row = this.getRowByIndex(rowIndex);
                                cellIndex = $(row.find("td").not(".e-hide")[0]).index();
                            }
                        }
                        if (rowIndex != -1 && cellIndex != -1)
                            this.selectCells([[rowIndex, [cellIndex]]]);
                        this.multiSelectShiftRequest = false;
                    }
                    break;
                default:
                    returnValue = true;
            }
            if (this.getPager() != null && pageIndex <= pager.totalPages && pager.currentPage !== pageIndex && action != "searchRequest" && action !== "deleteRecord")
                this.getPager().ejPager("goToPage", pageIndex);
            return returnValue;
        },
        _findColumnsWidth: function () {
            var j = this.getHeaderTable().find(".e-headercell").not(".e-stackedHeaderCell, .e-detailheadercell"), index = 0;           
            for (var i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i]["visible"])
                    this.columnsWidthCollection[i] = j.eq(i + index).outerWidth();
            }
        },
        _calculateWidth: function () {
            var j = this.getHeaderTable().find(".e-columnheader").last().find("th:visible"), width = 0;
            for (var i = 0; i < j.length; i++)
                width += j.eq(i).outerWidth();
            return width;

        },
        _initIndicators: function () {
            var indicatorId = this._id + "_ColumnDropIndicator";
            if ($("#" + indicatorId).length)
                $("#" + indicatorId).remove();
            this._Indicator = document.createElement("DIV");
            $(this._Indicator).attr('id', indicatorId).addClass("e-columndropindicator").addClass("e-dropAcceptor").appendTo(document.body);
            $(this._Indicator).css({ "display": "none" });

        },
        _refreshGridFooterColGroup: function () {
            this.getFooterTable().find("colgroup").remove();
            this._scrollFooterColgroup();
        },
        _refreshGroupSummary: function () {
            var headerCols = this.getHeaderContent().find("colgroup col").clone();
            headerCols.splice(0, this.model.groupSettings.groupedColumns.length);
            var $gsColgroup = this.getContentTable().find(".e-groupsummary colgroup");
            for (var i = 0; i < $gsColgroup.length; i++) {
                if (!$($gsColgroup[i]).find(".e-summary").is("visible"))
                    $($gsColgroup[i]).find(".e-summary").show();
                $($gsColgroup[i]).find("col:not('.e-summary')").remove();
                $($gsColgroup[i]).append(headerCols.clone());
            }
        },
        
        reorderColumns: function (fromfname, tofname) {
            var fromindex, toindex;
            if (typeof (fromfname) == "string" && typeof (tofname) == "string") {
                fromindex = this.getColumnIndexByField(fromfname);
                toindex = this.getColumnIndexByField(tofname);
            }
            else {
                fromindex = fromfname;
                toindex = tofname;
            }
            if (fromindex == -1 || toindex == -1 || typeof (fromindex) == "string" || typeof (toindex) == "string") return;
            this.set_dropColumn(fromindex, toindex);
            if (this.model.showStackedHeader)
                this._refreshStackedHeader();
            if (this.model.scrollSettings.allowVirtualScrolling){
				if(this.model.scrollSettings.enableVirtualization){
					this._virtualDataRefresh = true;
					this._queryCellView = [];
					this._virtualLoadedRows = {};
					this._refreshVirtualView(this._currentVirtualIndex);								
				}
				else
					this._refreshVirtualContent(); 
			}
        },
        
        columns: function (details, action) {
            if (ej.isNullOrUndefined(details)) return;
            var isString = false;
            if (typeof details === "string") {
                details = [details];
                isString = true;
            }
            else if (details instanceof Array && details.length && typeof details[0] === "string")
                isString = true;
            for (var i = 0; i < details.length; i++) {
                var field = isString ? details[i] : details[i].field, headerText = isString ? details[i] : details[i].headerText, index;
                if ((ej.isNullOrUndefined(field) || field == "") && (ej.isNullOrUndefined(headerText) || headerText == ""))
                    index = -1;
                else if (ej.isNullOrUndefined(field) || field == "")
                    index = $.inArray(this.getColumnByHeaderText(headerText), this.model.columns);
                else
                    index = $.inArray(this.getColumnByField(field), this.model.columns);
                if (action == "add" || ej.isNullOrUndefined(action)) {
                    if (index == -1)
                        this.model.columns.push(isString ? { field: details[i] } : details[i]);
                    else
                        this.model.columns[index] = isString ? { field: details[i] } : details[i];
                }
                else {
                    if (index != -1)
                        this.model.columns.splice(index, 1);
                }
            }            
            this.columnsWidthCollection = []; var tooltip = false;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                this.columnsWidthCollection.push(this.model.columns[columnCount]["width"]);
                if (!ej.isNullOrUndefined(tooltip))
                    tooltip = true;
            }
            this._enableRowHover(tooltip);
            this.refreshHeader();
			if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) 
				this._processEditing();
            this.refreshContent(true);
            if (this.model.allowScrolling) {
                this.refreshScrollerEvent();
                if (this.model.allowResizeToFit && this.getContent().ejScroller("isVScroll"))
                    this._showHideScroller();
            }
        },
        _resetDisabledCollections: function(){
            this._disabledResizingColumns = [];
			this._disabledSortableColumns = [];
			this._disabledGroupableColumns = [];
			this._disabledEditableColumns = [];
        },
        _enableRowHover: function (isTooltip) {
            var tooltip = true;
            if (ej.isNullOrUndefined(isTooltip)) {
                for (var i = 0 ; i < this.model.columns.length; i++) {
                    if (!ej.isNullOrUndefined(this.model.columns[i]['tooltip'])) {
                        tooltip = true;
                        break;
                    }
                }
            }
            else
                tooltip = isTooltip;
            if (this.model.enableRowHover || tooltip)
                this._on(this.element, "mouseenter mouseleave", ".e-gridcontent tr td", this._rowHover);
            else
                this._off(this.element, "mouseenter mouseleave", ".e-gridcontent tr td");
        },
        _rowHover: function (e) {
            var $target = $(e.target);
            if (!$target.hasClass("e-rowcell"))
                $target = $target.closest(".e-rowcell");
            if (this.model.scrollSettings.frozenColumns)
                var $gridRows = $(this.getRows());
            else
                var $gridRows = this.element.find(".e-row.e-hover,.e-alt_row.e-hover");
            if (($target.closest("#" + this._id + "EditForm").length && $target.hasClass("e-rowcell")) || !$target.hasClass("e-rowcell"))
                return;
            if (e.type == "mouseenter" && $target.hasClass("e-gridtooltip"))
                this._showTooltip($target);
            if (this.model.enableRowHover) {
                this.element.find(".e-traverse").removeClass("e-traverse");
                this._traverseRow=null;
                if (e.type == "mouseenter" && !this._dragActive) {
                     if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined($gridRows[0]) && !ej.isNullOrUndefined($gridRows[1]))	
					 {
						$gridRows = $($gridRows[0]).add($gridRows[1]);
						$gridRows.removeClass("e-hover");
						var index = this.getIndexByRow($target.parent());
						index != -1 && this.getRowByIndex(index).addClass("e-hover");
					}
                 else {
                     $gridRows.removeClass("e-hover");
                     if( $target.parent().hasClass('e-row') ||$target.parent().hasClass ('e-alt_row'))
                         $target.parent().addClass("e-hover");
					}
                } else {
                    if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined($gridRows[0]) && !ej.isNullOrUndefined($gridRows[1]))
                        $gridRows = $($gridRows[0]).add($gridRows[1]);
                    $gridRows.removeClass("e-hover");
                }
                var gridRows = $target.parent();
                var index = this.getIndexByRow(gridRows);
                var data = this._currentJsonData[index];
                if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization) {
                    index = (index % this.model.pageSettings.pageSize);
                    data = this._currentJsonData[index];
                }
                else if (this.model.scrollSettings.enableVirtualization) {
                    var viewDetails = this._getSelectedViewData(index, $target);
                    data = viewDetails.data;
                    index = viewDetails.rowIndex;
                }
                var args = { row: gridRows, rowIndex: index, rowData: data, cell: $target };
                this._trigger("rowHover", args);
            }
            return false;
        },
        _showTooltip: function ($target, isHeaderTooltip) {
            var index = $target.index(), isStack = $target.hasClass("e-stackedHeaderCell"), data = {};
            if ($target.hasClass("e-headercelldiv"))
                index = $target.parent(".e-headercell").index() - this.model.groupSettings.groupedColumns.length;
            if (!isStack && (this.model.childGrid || this.model.detailsTemplate))
                index--;
            if (this.model.scrollSettings.frozenColumns > 0 && ($target.closest(".e-movableheaderdiv").length || $target.closest(".e-movablecontentdiv").length))
                index = index + this.model.scrollSettings.frozenColumns;
            var col =  !isStack ? this.getColumnByIndex(index) : this._getStackedColumnByTarget($target);            
            if (col["clipMode"] != ej.Grid.ClipMode.Ellipsis) {
                if (col["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip) {
                    var td = $target;
                    if (!$target.find("span").hasClass("e-ellipsistooltip")) {
                        var $span = ej.buildTag('span.e-ellipsistooltip', {}, {})
                        $span.html($target.html());
                        td.append($span);
                    }
                    td.find('span.e-ellipsistooltip').css('display', 'inline-block')
                    var width = td.find('span:first')[0].getBoundingClientRect().width;
                    td.find('span.e-ellipsistooltip').remove();
                    if ($target.width() > (width)) {
                        $target.removeAttr('title');
                        return;
                    }
                }

                var scriptElement = document.createElement("script");
                if (ej.isNullOrUndefined(col["tooltip"]) && ej.isNullOrUndefined(col["headerTooltip"]))
                    return;
                else {
                    var t;
                    scriptElement.id = (this._id + col.headerText + $.inArray(col, this.model.columns) + "_TemplateToolTip").split(" ").join("");
                    scriptElement.type = "text/x-template";
                    var tooltipType = !isHeaderTooltip ? "tooltip" : "headerTooltip";
                    if (!ej.isNullOrUndefined(col[tooltipType]) && col[tooltipType].slice(0, 1) !== "#")
                        scriptElement.text = col[tooltipType];
                    else
                        t = $(col[tooltipType]);
                    if (t) {
                        scriptElement.text = t.html();
                        scriptElement.type = t.attr("type") || scriptElement.type;
                    }
                   if(!ej.isNullOrUndefined(t) && col[tooltipType].slice(0, 1) !== "#")
                    $("body").append(scriptElement);
                }
                var rowElement = $target.closest("tr");
                if (!$(rowElement).hasClass("e-columnheader") && !$target.hasClass("e-gridheader")) {
                    var index = this.getIndexByRow(rowElement);//get the target rowIndex
                    if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling) {
                        if (!this.model.scrollSettings.enableVirtualization)
                            index = index % this.model.pageSettings.pageSize;
                        else {
                            var nameAttr = rowElement.attr("name");
                            index = index % this._virtualRowCount;
                            var virtualIndex = parseInt(nameAttr, 32);
                            data = this._virtualLoadedRecords[virtualIndex][index];
                        }
                    }
                    else
                        data = this.getCurrentViewData()[index];//get the data corresponding to row hovered
                }
                data.value = !$target.hasClass("e-headercell") || isStack ? $target.text() : $target.find("e-gridheadertooltip").text();
                var str = $(scriptElement).render(data);
                $target.attr('title', str);
                if (!ej.isNullOrUndefined(data.value))
                    delete data.value;
            }
            else
                $target.removeAttr('title');

        },
        _rightClickHandler: function (e) {
            e.preventDefault(); var browser = ej.browserInfo();
            if (e.which == 3 || (browser.name == "msie" && browser.version == "8.0")) {
                var args = {},
                $target = $(e.target),
                $gridRow = $(this.getRows());
                if (this.getContentTable().has($target).length) {
                    var index = $gridRow.index($target.parent());					
					var $row = this.getRowByIndex(index);
					var $data = this._currentJsonData[index];
					if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){	
						var viewDetails = this._getSelectedViewData(index, $target);					
						$data = viewDetails.data;				
						index = viewDetails.rowIndex;					
					}
                    if (index == -1)
                        return;
                    args = { rowIndex: index, row: $row, data: $data, rowData: $data, cellIndex: $target.index(), cellValue: $target.html(), cell: $target };
                }
                else if (this.getHeaderTable().has($target).length) {
                    var index = 0,
                    $th = this.getHeaderTable().find('th').not('.e-detailheadercell,.e-grouptopleftcell,.e-filterbarcell');
                    if ($target.is('.e-headercelldiv'))
                        index = $th.index($target.closest('.e-headercell'));
                    else
                        index = $th.index($target);
                    if (index == -1)
                        return;
                    args = { headerIndex: index, headerText: this.getColumnFieldNames()[index], headerCell: $th.eq(index), column: this.getColumnByIndex(index) }
                }
                else if ($target.is('.e-pager') || (this.getPager() != null && this.getPager().has($target).length)) {
                    args = { pager: this.model.pageSettings }
                }
                this._trigger("rightClick", args);
            }
        },
        _touchGrid: function (e) {
            var curPage = this._currentPage(), doPage = true;
            if (this.model.allowScrolling || (this.model.isResponsive && this.model.minWidth != 0)) {
                var d = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? (this.getScrollObject() || {})._scrollXdata : null;
                if (d)
                    doPage = e.type == "swipeleft" ? d.scrollable - d.sTop == 0 : d.sTop == 0;
            }
            switch (e.type) {
                case "swipeleft":
                    if (this.model.allowPaging && curPage != this.model.pageSettings.totalPages && !this.model.isEdit)
                        doPage && this.element.ejGrid("gotoPage", curPage + 1);
                    break;
                case "swiperight":
                    if (this.model.allowPaging && curPage > 1 && !this.model.isEdit)
                        doPage && this.element.ejGrid("gotoPage", curPage - 1);
                    break;
            }
        },
        _recorddblClickHandler: function (e) {
             if(!ej.isNullOrUndefined(this._previousTr)){
                var isFrozenEnabled, $target = (isFrozenEnabled = this._previousTr.length > 1) ? this.getRowByIndex($(e.target).closest("tr").index()) :  $(e.target).closest("tr");
                if( isFrozenEnabled && $target[0] != this._previousTr[0] && $target[1] != this._previousTr[1])
                    return;
                else if($target[0] != this._previousTr[0])
                        return;
            }
            this._recordClickProcess(e, this, "recordDoubleClick");
        },
        _recordClickProcess: function (e, proxy, eventName) {
            var args = {}, $target = $(e.target).is(".e-rowcell") ? $(e.target) : $(e.target).closest("td");
            if ($target.closest(".e-grid").attr("id") !== proxy._id || (!$target.is('.e-rowcell') && !$target.closest("td").is(".e-rowcell")) || ($target.closest('.e-editcell,.e-insertedrow')).length > 0)
                return;
            var cellIndx = (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) ? $target.index() - 1 : $target.index();
            var column = proxy.getColumnByIndex(cellIndx);
            if (proxy.model.editSettings.editMode == "batch" && !(column.allowEditing == false) && !(column.isPrimaryKey == true))
                return;
            var index = proxy.getIndexByRow($target.closest('tr'));
            var $row = proxy.getRowByIndex(index);
            var $data = proxy._currentJsonData[index];
            if (proxy.model.scrollSettings.allowVirtualScrolling) {
                if (proxy.model.scrollSettings.enableVirtualization) {
                    var viewDetails = proxy._getSelectedViewData(index, $target);
                    $data = viewDetails.data;
                    index = viewDetails.rowIndex;
                }
                else {
                    var trIndex = index % proxy.model.pageSettings.pageSize;
                    var virtualIndex = (parseFloat($row.attr("name")) - (this.model.scrollSettings.enableVirtualization ? 1 : 0)) / proxy.model.pageSettings.pageSize + 1;
                    var vs = ej.isNullOrUndefined(ej.getObject(virtualIndex,this._virtualLoadedRecords)) ? this.model.previousViewData : ej.getObject(virtualIndex,this._virtualLoadedRecords);
					$data =(!ej.isNullOrUndefined(vs) ? vs[trIndex] : this._currentJsonData[trIndex]);
                }
            }
            args = { rowIndex: index, row: $row, data: $data, rowData: $data, cell: $target, cellIndex: cellIndx, columnName: column["headerText"], cellValue: $target.text(),event:e };
            proxy._previousTr = args.row;
            proxy._trigger(eventName, args);
        },
        _invokeRecordClick: function (e, proxy) {
            this._recordClickProcess(e, proxy, "recordClick");
        },
        _recordClick: function (e) {
            this._click++;
            var proxy = this, singleClickTimer = null;
            if (proxy._click == 1) {
                if ($.inArray("recordClick", this.model.serverEvents) !== -1 && $.inArray("recordDoubleClick", this.model.serverEvents) !== -1) {
                    singleClickTimer = setTimeout(function () {
                        proxy._click = 0;
                        proxy._invokeRecordClick(e, proxy);
                    }, 400);
                }
                else {
					proxy._click = 0;
                    !ej.isNullOrUndefined(singleClickTimer) && clearTimeout(singleClickTimer);
                    proxy._invokeRecordClick(e, proxy);
                }
            }
            else if (proxy._click == 2) {
                !ej.isNullOrUndefined(singleClickTimer) && clearTimeout(singleClickTimer);
                proxy._click = 0;
            }
        },
        _headerMouseDown: function (e) {
            if (($(e.target).hasClass("e-headercelldiv") && !$(e.target).parent().hasClass("e-grouptopleftcell")) || $(e.target).hasClass("e-headercell")) {
                var $headercell = $(e.target).hasClass("e-headercelldiv") ? $(e.target).parent() : $(e.target);
                this.model.enableHeaderHover && $headercell.removeClass("e-hover e-headercell-hover").addClass("e-headercellactive e-active");
            }
            if (this.model.allowResizing)
                return this._resizer._mouseDown(e);
        },
        _contentMouseDown: function (e) {
            if ($(e.target).closest("td").hasClass("e-selectionbackground"))
                return;
            if ($(e.target).closest("tr").length) {
                var xPos = e.type == "touchstart" ? e.originalEvent.touches[0].pageX : e.pageX;
                var yPos = e.type == "touchstart" ? e.originalEvent.touches[0].pageY : e.pageY;
                this._dragDiv = ej.buildTag("div.e-griddragarea", "", { "position": "absolute", "width": "0px", "height": "0px" })
                this.getContent().append(this._dragDiv);
                var tr = $(e.target).closest("tr.e-row");
                if (!tr.length)
                    tr = $(e.target).closest("tr.e-alt_row");
                this._startIndex = tr.length ? this.getIndexByRow(tr) : null;
                this._previousRowCellIndex = [[this._startIndex, [e.target.cellIndex]]];
                this._on($(document), "touchmove mousemove", this._mouseMoveDragHandler);
                if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "safari") {
                    if (!this.model.contextMenuSettings.enableContextMenu)
                        this._on(this.element, "contextmenu", function (e) { e.preventDefault() });
                }
                this._on($(document), "touchend mouseup", this._mouseUpDragHandler);
                this._startDrag = { _x: xPos, _y: yPos };
            }
        },
        _mouseMoveDragHandler: function (e) {
            if (e.pageY != this._startDrag._y) {
                var xPos = e.type == "touchmove" ? e.originalEvent.touches[0].pageX : e.pageX;
                var yPos = e.type == "touchmove" ? e.originalEvent.touches[0].pageY : e.pageY;
                this._selectDrag = true;
                var left = this._dragDiv[0].offsetLeft;
                var top = this._dragDiv[0].offsetTop;

                var x1 = this._startDrag._x,
                y1 = this._startDrag._y,
                x2 = xPos,
                y2 = yPos, tmp, eleLocation = yPos + 2;

                if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
                if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; eleLocation = yPos - 2 }
                var height = this._dragDiv.height();
                this._dragDiv.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });
                var element = $(document.elementFromPoint(xPos, eleLocation));
                var tr = element.closest("tr.e-row");
                if (!tr.length)
                    tr = element.closest("tr.e-alt_row");
                if (tr.length) {
                    this._endIndex = this.getIndexByRow(tr);
                    if (ej.isNullOrUndefined(this._startIndex))
                        this._startIndex = this._endIndex;
                    this.selectRows(this._startIndex, this._endIndex);
                    this.selectCells([[this._endIndex, [element.index()]]]);
                }
            }
        },
        _mouseUpDragHandler: function (e) {
            this._off($(document), "touchend mouseup", this._mouseUpDragHandler);
            this._off($(document), "touchmove mousemove", this._mouseMoveDragHandler);
            if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "safari") {
                if (!this.model.contextMenuSettings.enableContextMenu)
                    this._off(this.element, "contextmenu", function (e) { e.preventDefault() })
            }
            e.stopPropagation();
            this._selectDrag = false;
            this._dragDiv.remove();
        },
        _headerHover: function (e) {
            var $target = $(e.target);
            if (e.type == "mouseover" || e.type == "mousemove" || e.type == "touchmove" || e.type == "MSPointerMove") {
                if (this.model.allowResizing || this.model.allowResizeToFit)
                    this._resizer._mouseHover(e);

                if (this.model.enableHeaderHover && !this._dragActive && (($target.hasClass("e-headercelldiv") && !$target.parent().hasClass("e-grouptopleftcell")) || $target.hasClass("e-headercell"))) {
                    if ($target.hasClass("e-headercelldiv"))
                        $target = $target.parent();
                    this.getHeaderTable().find(".e-columnheader").find(".e-headercell-hover").removeClass("e-headercell-hover").removeClass("e-hover");
                    $target.addClass("e-headercell-hover e-hover");
                }
                if ($target.hasClass("e-gridtooltip"))
                    this._showTooltip($target);
                if ($target.hasClass("e-gridheadertooltip") || $target.find(".e-gridheadertooltip").length)
                    this._showTooltip($target, true);
                if (e.type == "mouseover")
                    this._addCursor();
            } else
                this.model.enableHeaderHover && this.getHeaderTable().find(".e-columnheader").find(".e-headercell-hover").removeClass("e-headercell-hover").removeClass("e-hover");
        },
        _addCursor: function () {
            var flag = (this.model.allowResizing || this.model.allowResizeToFit || this.model.allowGrouping || this.model.allowFiltering || this.model.allowSorting || this.model.allowReordering || this.model.contextMenuSettings.enableContextMenu || this._allowcolumnSelection), isTempCol;
            if (!flag) {
                this.getHeaderTable().find(".e-columnheader").addClass("e-defaultcursor");
                this.getHeaderTable().find(".e-headercell").removeClass("e-defaultcursor");
            }
            else {
                this.getHeaderTable().find(".e-columnheader").removeClass("e-defaultcursor");
                if (!(this.model.contextMenuSettings.enableContextMenu || this.model.selectionSettings.selectionMode == "column")) {
                    var propArray = [{ val: this.model.allowSorting, str: "sort" }, { val: this.model.allowGrouping, str: "group" }, { val: this.model.allowReordering, str: "reorder" }, { val: this.model.allowFiltering, str: "filter" },{ val: this.model.allowResizing, str: "resize" }];
                    var colpropcount = 0;
                    for (var i = 0; i < propArray.length; i++) {
                        if (propArray[i].val == false) {
                            propArray.splice(i, 1);
                            i--;
                        }
                    }

                    for (i = 0; i < this.model.columns.length && propArray.length > 0 ; i++) {
                        for (var j = 0; j < propArray.length; j++) {
                            switch (propArray[j].str) {
                                case "sort":
                                    if (!ej.isNullOrUndefined(this.model.columns[i].allowSorting) && !this.model.columns[i].allowSorting)
                                        colpropcount++;
                                    break;
                                case "group":
                                    if (!ej.isNullOrUndefined(this.model.columns[i].allowGrouping) && !this.model.columns[i].allowGrouping)
                                        colpropcount++
                                    break;
                                case "reorder":
                                    if (!ej.isNullOrUndefined(this.model.columns[i].allowReordering) && !this.model.columns[i].allowReordering)
                                        colpropcount++
                                    break;
                                case "filter":
                                    if (!ej.isNullOrUndefined(this.model.columns[i].allowFiltering) && !this.model.columns[i].allowFiltering)
                                        colpropcount++;
                                    break;
								case "resize":
								    if (!ej.isNullOrUndefined(this.model.columns[i].allowResizing) && !this.model.columns[i].allowResizing)
                                        colpropcount++;
									break;
                            }
                        }
						if(!ej.isNullOrUndefined(this.model.columns[i].template) || !ej.isNullOrUndefined(this.model.columns[i].templateID))
							isTempCol = true;
						else 
							isTempCol = false;
						if (colpropcount == propArray.length && !(isTempCol))
                            this.getHeaderTable().find(".e-headercell").eq(i).addClass("e-defaultcursor");
                        colpropcount = 0;
                    }
                }
            }
        },
        _colgroupRefresh: function () {
            if ((this.model.allowResizing || this.model.allowResizeToFit) && this.model.scrollSettings.frozenColumns > 0) {
                var gridheaderCol = $(this.getHeaderTable()).find('colgroup');
                var gridcontentCol = $(this.getContentTable()).find('colgroup');
            }
            else {
                var gridheaderCol = $(this.getHeaderTable()).find('colgroup')[0];
                var gridcontentCol = $(this.getContentTable()).find('colgroup')[0];
            }
            var headerColClone = $(gridheaderCol).clone();
            var contentColClone = $(gridcontentCol).clone();
            $(gridcontentCol).remove();
            $(gridheaderCol).remove();
            if ((this.model.allowResizing || this.model.allowResizeToFit) && this.model.scrollSettings.frozenColumns > 0) {
                $(headerColClone[0]).prependTo(this.getHeaderTable()[0]);
                $(headerColClone[1]).prependTo(this.getHeaderTable()[1]);
                $(contentColClone[0]).prependTo(this.getContentTable()[0]);
                $(contentColClone[1]).prependTo(this.getContentTable()[1]);
            }
            else {
                $(headerColClone).prependTo(this.getHeaderTable());
                $(contentColClone).prependTo(this.getContentTable());
            }
        },
        _detailColsRefresh: function () {
            this._$headerCols = this.getHeaderTable().children("colgroup").find("col");
            this._$contentCols = this.getContentTable().children("colgroup").find("col");
            var colCount = this.model.columns.length;
            if (this._$headerCols.length > colCount) this._$headerCols.splice(0, (this._$headerCols.length - colCount));
            if (this._$contentCols.length > colCount) this._$contentCols.splice(0, (this._$contentCols.length - colCount));
        },
        _summaryColRrefresh: function () {
            var table = this.getFooterContent().find('.e-gridsummary');
            for (var i = 0; i < this.columnsWidthCollection.length; i++) 
                table.find('col').eq(i).width(this.columnsWidthCollection[i]);
        },
        _headerdblClickHandler: function (e) {
            if (this.model.allowResizeToFit)
                this._resizer._columnResizeToFit(e);
            if (this.model.allowScrolling)	{		
                this.getScrollObject().refresh(this.model.scrollSettings.frozenColumns > 0);
					if (this.getScrollObject().isVScroll()) {
                        this.getHeaderContent().addClass("e-scrollcss");
						this.getHeaderContent().find(".e-headercontent").addClass("e-hscrollcss");
                    }
			}
        },

        _mouseUp: function (e) {
            if (this.model.allowResizing)
                this._resizer._mouseUp(e);
        },

        _mouseMove: function (e) {
            if (this.model.allowResizing)
                this._resizer._mouseMove(e);
        },
        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "enableResponsiveRow":
                        if (options[prop]) {
                            this.element.addClass("e-responsive");
                            if (this.model.minWidth) {
                                this._removeMedia();
                                this._scrollerAddedOnMedia = false;
                            }
                            if (this.model.allowFiltering) {
                                this.element.find('.e-filterDialog').remove();
                                this._renderFilterDialogs();
                                this._renderResponsiveFilter();
                                this.element.find('.e-gridtoolbar').remove();
                            }
                        } else {
                            if (this.model.allowFiltering) {
                                $('body').find('.e-filterDialog').remove();
                                this._renderFilterDialogs();
                            }
                            if (this.element.css("display") == "none")
                                this.element.css("display", "block");
                            this.element.removeClass("e-responsive");
                            if (this.model.minWidth)
                                this._addMedia();
                            if (this.model.allowScrolling) {
                                this.getScrollObject().refresh();
                                if (!this.getScrollObject().isVScroll()) {
                                    this.getHeaderContent().removeClass("e-scrollcss");
                                    this.getHeaderContent().find(".e-headercontent").removeClass("e-hscrollcss");
                                }
                                else if (this.getScrollObject().isVScroll()) {
                                    this.getHeaderContent().addClass("e-scrollcss");
                                    this.getHeaderContent().find(".e-headercontent").addClass("e-hscrollcss");
                                }
                            }
                        }
                        this._tdsOffsetWidth = [];
                        if (this.model.allowFiltering || this.model.allowSorting) {
                            var index = this.model.toolbarSettings.toolbarItems.indexOf('responsiveFilter');
                            index != -1 && this.model.toolbarSettings.toolbarItems.splice(index, 1);
                            var sortIndex = this.model.toolbarSettings.toolbarItems.indexOf('responsiveSorting');
                            sortIndex != -1 && this.model.toolbarSettings.toolbarItems.splice(sortIndex, 1);
                            this.element.find('.e-gridtoolbar').remove();
                            this._renderToolBar().insertBefore(this.element.find(".e-gridheader").first());
                        }
                        break;
                    case "showColumnChooser":
                        if (options[prop]) {
                            this._visibleColumns = [];
                            this._hiddenColumns = [];
                            this._visibleColumnsField = [];
                            this._hiddenColumnsField = [];
                            this._renderGridHeaderInternalDesign(this.model.columns);
                            this._renderColumnChooser();
                        }
                        else {
                            var dlgObj = $("#" + this._id + "ccDiv").data("ejDialog");
                            if (dlgObj.isOpened())
                                $("#" + this._id + "_ccTail").remove();
                            var ccBtnHeight = 0;
                            if (!ej.isNullOrUndefined(this.element.find(".e-ccButton").outerHeight()))
                                ccBtnHeight += this.element.find(".e-ccButton").outerHeight();
                            this.element.find(".e-ccButton").remove();
                            $("#" + this._id + 'ccDiv_wrapper').remove();
                            this.element.css('margin-top', (parseInt(this.element.css('margin-top'), 10) - ccBtnHeight));
                        }
                        break;
                    case "gridLines":
                        this.getContent().removeClass("e-horizontallines e-verticallines e-hidelines");
						this.getHeaderContent().removeClass("e-horizontallines e-verticallines e-hidelines");
						this._showHeaderGridLines();
                        this._showGridLines();
                        break;
                    case "showDeleteConfirmDialog":
                        this.model.editSettings.showDeleteConfirmDialog = options[prop];
                        if (options[prop])
                            this._renderConfirmDialog();
                        else
                            this.element.find("#" + this._id + 'ConfirmDialog_wrapper').remove()
                        break;
                    case "showConfirmDialog":
                        this.model.editSettings.showConfirmDialog = options[prop];
                        if (options[prop])
                            this._renderConfirmDialog();
                        else
                            this.element.find("#" + this._id + 'ConfirmDialog_wrapper').remove()
                        break;
                    case "pageSettings":
                        var pageModel = this.getPager().ejPager("model");
                        if (ej.isNullOrUndefined(options[prop]["currentPage"]) || pageModel.currentPage != this._currentPage()) {
                            for (var pageProp in options[prop]) {
                                if (pageProp != "currentPage" && options[prop][pageProp] === pageModel[pageProp])
                                    delete options[prop][pageProp];
                            }
                            if ($.isEmptyObject(options[prop]))
                                break;
                            options[prop]["currentPage"] = this._currentPage();
							var pagerObj = {};
							$.extend(pagerObj,options[prop]);
                            if(pagerObj["template"] != undefined && pagerObj["template"] != pageModel.template)
                                pagerObj["template"] = null;
                            this.getPager().ejPager("option", pagerObj);
                            this._renderPagerTemplate(this.getPager(), pagerObj["showDefaults"]);
                            this._currentPage(this._currentPage() > pageModel.totalPages ? pageModel.totalPages : this._currentPage());
                            this.refreshContent();
                        }
                        break;
                    case "columns":
                        var columns = options.columns;
                        this.model.columns = [];
                        this.columns(columns, "add");
                        break;
                    case "allowPaging":
                        this.model.allowPaging = options[prop];
                        if (options[prop] && this.element.children(".e-pager").length == 0) {
						  if(this.model.isResponsive)
                                this.model.pageSettings.isResponsive = true;
                            this.element.append(this._renderGridPager());
                            this.refreshContent();
                            this.getPager().ejPager("refreshPager");
                        } else {
                            this.getPager().remove();
                            this.setGridPager(null);
                            this.refreshContent();
                            if (this.model.filterSettings.filterType == "filterbar" && this.model.allowFiltering)
                                this._createPagerStatusBar();
                        }
                        break;
					case "selectionType":
                            this.multiDeleteMode =  this.model.editSettings.allowDeleting && (this.model.selectionType=="multiple");
                        break;
                    case "allowSearching":
                        this.model.allowSearching = options[prop];
                        break;
                    case "searchSettings":
                        $.extend(this.model.searchSetings, options[prop]);
                        this.refreshContent();
                        break;
                    case "allowGrouping":
                        if (options[prop] && this.element.children(".e-groupdroparea").length == 0) {
                            this.model.allowGrouping = options[prop];
                            this.addGroupingTemplate();
							this.model.showColumnChooser && this.element.find(".e-ccButton").length > 0 ? this.element.find(".e-ccButton").after(this._renderGroupDropArea()) : this.element.prepend(this._renderGroupDropArea());
                            this._enableGroupingEvents();
                            this.model.groupSettings.showDropArea && this._headerCellgDragDrop();
                            this._off(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);
                            this._on(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);
                        } else
						{
							this.element.children(".e-groupdroparea").remove();
							if(this.model.groupSettings.groupedColumns.length > 0){
								   for(var i=this.model.groupSettings.groupedColumns.length ; i >0 ;i--){
										this.ungroupColumn(this.model.groupSettings.groupedColumns[0]);
								}
							}
						  if(!this.model.allowReordering){
							this.element.find('.e-draggable, .e-droppable').ejDraggable();
							this.element.find('.e-draggable, .e-droppable').ejDraggable("destroy");
							}
						
						}
                        if (this.model.allowGrouping) {
                            !ej.isNullOrUndefined(options["groupSettings"]) && $.extend(this.model.groupSettings, options["groupSettings"]);
                            this._enableGrouping();
                        }
                        
                        break;
                    case "groupSettings":
                        $.extend(this.model.groupSettings, options[prop]);
                        if(this.model.allowGrouping && ej.isNullOrUndefined(options["allowGrouping"]))
                            this._enableGrouping();
                        if(!ej.isNullOrUndefined(this.model.groupSettings.enableDropAreaAnimation))
                            this.model.groupSettings.enableDropAreaAutoSizing = this.model.groupSettings.enableDropAreaAnimation;
						if(!this.model.allowReordering && !this.model.groupSettings.showDropArea){
							this.element.find('.e-draggable, .e-droppable').ejDraggable();
							this.element.find('.e-draggable, .e-droppable').ejDraggable("destroy");
							}
                        break;
                    case "cssClass":
                        this.element.removeClass(this.model.cssClass).addClass(options[prop]);
                        break;
                    case "allowFiltering":
                    case "filterSettings":
                        if (prop == "filterSettings")
                            $.extend(this.model.filterSettings, options[prop]);
                        else
                            this.model.allowFiltering = options[prop];
                        this.filterColumnCollection = [];
						this._excelColTypes = [];
                        if (this._$fDlgIsOpen)
                            this._closeFDialog();
                        if (!this.model.allowFiltering) {
                            if (this.model.filterSettings.filterType == ej.Grid.FilterType.FilterBar)
                                this.getHeaderTable().find(".e-filterbar").remove();
                            else if (this.model.filterSettings.filterType == ej.Grid.FilterType.Menu || this.model.filterSettings.filterType == ej.Grid.FilterType.Excel) {
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                                this.getHeaderTable().find(".e-columnheader").find(".e-headercellsortfilter").removeClass("e-headercellsortfilter");
                                this.getHeaderTable().find(".e-columnheader").find(".e-headercellsort").removeClass("e-headercellsort");
                                var $columheader = this.getHeaderTable().find(".e-columnheader");
                                if(this.model.groupSettings.showToggleButton){
                                    this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").find(".e-headercell").not(".e-detailheadercell").addClass("e-headercellgroup");
                                    $columheader.find(".e-headercellgroupfilter").removeClass("e-headercellgroupfilter");
                                    if(this.model.enableRTL) {
                                        $columheader.find(".e-gridgroupbutton").addClass("e-rtltoggle");
                                        $columheader.find(".e-headercelldivgroup").removeClass("e-headercelldivgroup");
                                    }
                                }
                            }
                            if (this._isExcelFilter || this._excelFilterRendered) {
                                this._isExcelFilter = this._excelFilterRendered = false;
                                this._excelFilter.resetExcelFilter();
                                this._excelFilter = null;
                            }
                            this.model.filterSettings.filteredColumns = [];
                            this.refreshContent();
                        } else {
                            if (this.model.filterSettings.filterType == ej.Grid.FilterType.FilterBar) {
                                this.getHeaderTable().find(".e-filterbar").remove();
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                                this._renderFiltering();
                                this._renderFilterBarTemplate();
                                if (this.model.filterSettings.showFilterBarStatus && !this.model.allowPaging)
                                    this._createPagerStatusBar();
                                else if (this.model.allowPaging)
                                    this.getPager().ejPager({ enableExternalMessage: this.model.filterSettings.showFilterBarStatus });
                                var $filterbar = this.getHeaderTable().find(".e-filterbar");
                                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                                    $filterbar.prepend(this._getEmptyFilterBarCell());
                            } else if (!_filter && (this.model.filterSettings.filterType == ej.Grid.FilterType.Menu || this.model.filterSettings.filterType == ej.Grid.FilterType.Excel)) {
                                var _filter = 1;
                                this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
                                    .end().find(".e-headercellfilter").removeClass("e-headercellfilter");
                                this.getHeaderTable().find(".e-columnheader").find(".e-headercellsort").removeClass("e-headercellsort");
                                this.getHeaderTable().find(".e-filterbar").remove();
                                var columnHeader = this.getHeaderTable().find(".e-columnheader").find(".e-headercell").not(".e-detailheadercell");
                                for (var i = 0; i < columnHeader.length; i++) {
                                    var columnName = columnHeader.eq(i).find(".e-headercelldiv").attr("data-ej-mappingname");
									if(!ej.isNullOrUndefined(columnName)){
										var column = this.getColumnByField(columnName);
										if (!ej.isNullOrUndefined(column) && (ej.isNullOrUndefined(column.allowFiltering) || column.allowFiltering))
											columnHeader.eq(i).addClass("e-headercellfilter").append(ej.buildTag('div.e-filtericon e-icon e-filterset'));
									}
								}                           
                                if(this.model.groupSettings.showToggleButton){
                                    this.getHeaderTable().find(".e-columnheader").find(".e-headercellgroup").removeClass("e-headercellgroup");
                                    var $headertraversal = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").find(".e-headercell").not(".e-detailheadercell");
                                    $headertraversal.addClass("e-headercellgroupfilter");
                                    $headertraversal.find(".e-filterset").addClass("e-groupfiltericon");
                                    $headertraversal.find(".e-gridgroupbutton").addClass("e-togglegroup");
                                    if(this.model.enableRTL) {
                                        $headertraversal.find(".e-gridgroupbutton").removeClass("e-rtltoggle");
                                        $headertraversal.find(".e-headercelldiv").addClass("e-headercelldivgroup");
                                    }
                                }                                 
							   if (this.model.filterSettings.filterType == ej.Grid.FilterType.Excel) {
                                    this._isExcelFilter = true;
                                    this._renderExcelFilter();
                                } else if (this._isExcelFilter) {
                                    this._isExcelFilter = false;
                                    this._excelFilter.resetExcelFilter();
                                    this._excelFilter = null;
                                }
							   if (this.model.filterSettings.filterType == ej.Grid.FilterType.Menu)
							       this._renderFilterDialogs();
							   if(options[prop].hasOwnProperty("filterType"))
                                   this.model.filterSettings.filteredColumns = [];
                                this.refreshContent();
                            }
                            this._enableFilterEvents();
                        }
                        if (this.model.isResponsive && this.model.allowScrolling) {
                            var args = {};
                            args.requestType = "filtering"
                            this._refreshScroller(args);
                        }
                        break;
                    case "enableRowHover":
                        this.model.enableRowHover = options[prop];
                        this._enableRowHover();
                        break;
                    case "allowScrolling":
                    case "scrollSettings":
                        var isDestroy = false;
                        var $content = this.getContent();
						if (prop != "allowScrolling") {
                            if (!ej.util.isNullOrUndefined(options["scrollSettings"])) {
                                if ($.isEmptyObject(options["scrollSettings"])) break;
                                if (!ej.util.isNullOrUndefined(options["scrollSettings"]["enableVirtualization"]) && !ej.util.isNullOrUndefined(options["scrollSettings"]["allowVirtualScrolling"]))
                                    options["scrollSettings"]["allowVirtualScrolling"] = options["scrollSettings"]["enableVirtualization"];
                                $.extend(this.model.scrollSettings, options["scrollSettings"]);
                            }
                            this._initHeight = this.model.scrollSettings.height;
                            this._isHeightResponsive = this.model._isHeightResponsive = this.model.scrollSettings.height == "100%" ? true : false;                           
                            if (!ej.util.isNullOrUndefined(options["allowScrolling"]))
                                this.model.allowScrolling = options["allowScrolling"];
                            this._columnsPixelConvert();
							if(this.model.scrollSettings.allowVirtualScrolling){
								this._currentPage(1);
								this.model.currentIndex = 1;
								if(this.model.scrollSettings.enableVirtualization){								
								    this.model.scrollSettings.scrollTop = this.getScrollObject().model.scrollTop;							
									this._virtualRowCount = Math.round(this.model.scrollSettings.height / this.getRowHeight()) + 1; 
									this._refreshVirtualViewDetails();
						            if(!this._singleView)
										this._refreshVirtualViewData();
									this._refreshVirtualView(this._currentVirtualIndex);
								}
								else {
									this._createPagerStatusBar();
									this._showPagerInformation(this.model.pageSettings);
								}
							}
                            if (options["scrollSettings"]["frozenColumns"] !== undefined || options["scrollSettings"]["frozenRows"] !== undefined ||
                                options["scrollSettings"]["allowVirtualScrolling"] !== undefined || options["scrollSettings"]["virtualScrollMode"] !== undefined ||
								options["scrollSettings"]["enableVirtualization"] != undefined) {
                                var model = this.model;
                                model.query = this.commonQuery.clone();
                                if (this._selectedRow() != -1){
                                    this.clearSelection(this._selectedRow());
									this._selectedRow(-1);
									if(!this._selectAllCheck)
									this._selectedMultipleRows([]);
									}
                                if (options["scrollSettings"]["virtualScrollMode"] != undefined)
                                    model.pageSettings.currentPage = 1;
                                isDestroy = true;
                                this.element.ejGrid("destroy").ejGrid(model);
                            }
                            else {
							    !ej.util.isNullOrUndefined($content.data("ejScroller")) && $content.ejScroller("destroy");
								this.getContentTable().css("width", "100%");
								this.getHeaderTable().css("width", "100%");
                                if (this.model.allowScrolling) {
                                    this.getHeaderContent().find("div").first().addClass("e-headercontent");
									 this._originalScrollWidth = this.model.scrollSettings.width;
									 this._renderScroller();
									 this.setWidthToColumns();
									 !ej.util.isNullOrUndefined($content.data("ejScroller")) && this.getScrollObject().refresh();
									 this.refreshScrollerEvent();
                                } else {
                                    this.element.children(".e-gridheader").removeClass("e-scrollcss");
                                    this.element.get(0).style.width.length == 0 && this.element.css("width", "auto");
                                    this.setWidthToColumns();
                                }
                                this._addLastRow();
                            }
						}
                            if (!isDestroy && !ej.isNullOrUndefined(this.model)) {
                                ej.util.isNullOrUndefined(options["scrollSettings"]) && this._columnsPixelConvert();
                                if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0) {
                                    this._groupingAction(true);
                                    this._recalculateIndentWidth();
                                }
                                if (!ej.isNullOrUndefined(this.getContent().data("ejScroller")) && this.model.allowScrolling)
                                    var scroller = this.getScrollObject();
                                var css = this.model.enableRTL ? "e-summaryscroll e-rtl" : "e-summaryscroll";
                                if (this.model.allowScrolling && this.model.showSummary) {
                                    if (scroller._vScroll)
                                        this.element.find(".e-summaryrow.e-scroller").addClass(css);
                                    this._scrollFooterColgroup();
                                }
                            }
                        break;
					case "currentIndex":
						if(this.model.allowScrolling &&  this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
							var currentView = Math.ceil(options["currentIndex"] / this._virtualRowCount);
							this._isThumbScroll = true;
							this._refreshVirtualView(currentView);
							this._refreshVirtualViewScroller(true);
						}
						else
							this._scrollObject.option("scrollTop", options["currentIndex"] * this.getRowHeight());						
						break;
                    case "locale":
                        this.model.locale = options[prop];
                        this.model.query = this.commonQuery.clone();                       
                        this._destroy();
                        this.element.css("margin-top", "0px").addClass("e-grid" + this.model.cssClass);
                        this._init();
                        break;
                    case "dataSource":
                        var $content = this.element.find(".e-gridcontent").first();
                        if (!$.isFunction(options["dataSource"]))
                            this.resetModelCollections();
						if(this._gridRecordsCount == 1 && !ej.isNullOrUndefined(this._cDeleteData) && $.inArray(this._cDeleteData[0], this._dataSource()) == -1 && this.model.editSettings.allowDeleting)
						    this._gridRecordsCount = this._dataSource().length;
						for (var i = 0; i < this.model.columns.length; i++) {
						    if (this.model.columns[i].template !== undefined)
						        this._columntemplaterefresh = true;
						}
                        this._updateDataSource = true;
						this._refreshDataSource(this._dataSource());
						this.element.children(".e-gridfooter").remove();
						if (this.model.showSummary && this.model.currentViewData.length > 0) {
						    var footer = this._renderGridFooter();
						    if (!ej.isNullOrUndefined(footer)) footer.insertAfter($content);
						}
						if(!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount)
							this._addLastRow();
                        break;
                    case "selectedRowIndex":
                        if (this._selectedRow() != -1 && $.inArray(this._selectedRow(), this.selectedRowsIndexes) == -1){
							this.model.currentIndex = this._selectedRow();
                            this.selectRows(this._selectedRow());
						}
                        else if (this._selectedRow() == -1) {
                            this.clearSelection();
                            this.selectedRowsIndexes = [];
                        }
                        break;
                    case "selectedRowIndices":
                        if (this.model.allowSelection == true && this.model.selectionType == "multiple" && this._selectedMultipleRows().length > 0) {
							var val = typeof options[prop] === 'function' ? options[prop]() : options[prop];
                           this.clearSelection();							
							this.selectedRowsIndexes = val;
							this.selectRows(val);
							this.model.selectedRecords = this.getSelectedRecords();
                        }
                        else if (this._selectedMultipleRows().length == 0) {
                            this.clearSelection();
                        }
                        break;
                    case "editType":
                        if (this._selectedRow() != -1 && $.inArray(this._selectedRow(), this.selectedRowsIndexes) == -1)
                            this.selectRows(this._selectedRow());
                        break;
                    case "editSettings":
                        $.extend(this.model.editSettings, options[prop]);
                        this.refreshToolbar();
                        this.refreshContent(true);
                        this.refreshBatchEditMode();
                        this._tdsOffsetWidth = [];
                        $("#" + this._id + "_dialogEdit").data("ejDialog") && $("#" + this._id + "_dialogEdit").ejDialog("destroy");
                        $("#" + this._id + "_dialogEdit_wrapper,#" + this._id + "_dialogEdit").remove();
                        $("#" + this._id + "_externalEdit").remove();
                        this.getContentTable().find(".e-insertedrow").remove();
                        this.model.isEdit = false;
                        if (this.model.editSettings.editMode != 'normal')
                            this.model.editSettings.showAddNewRow = false;
                        if (!this.model.editSettings.showAddNewRow) 
                            this.getContentTable().find(".e-addedrow").length && this.cancelEdit();
                        if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                            if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate")
                                this.element.append(this._renderDialog());
                            else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                                this.element.append(this._renderExternalForm());
                       }
                        if ((this.model.editSettings.allowDeleting && this.model.editSettings.showDeleteConfirmDialog) ||
                            this.model.editSettings.editMode == "batch" && this.model.editSettings.showConfirmDialog)
                            ej.isNullOrUndefined(this._confirmDialog) && this._renderConfirmDialog();
                        this._enableEditingEvents();
						this.refreshToolbar();
                        break;
                    case "allowResizing":
                        this.model.allowResizing = options[prop];
                        if (this.model.allowResizing) {
                            this._on(this.element, ej.eventType.mouseMove, this._mouseMove);
                            this._on(this.element, "mouseup", this._mouseUp);
                            this._resizer = this._resizer || new ej.gridFeatures.gridResize(this);
                        }
                        else {
                            this._off(this.element, ej.eventType.mouseMove, this._mouseMove);
                            this._off(this.element, "mouseup", this._mouseUp);
                            if (!this.model.allowResizeToFit)
                                this._resizer = null;
                        }
                        break;
                    case "allowResizeToFit":
                        if (this.model.allowResizeToFit) {
                            this._on(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
                            this._resizer = this._resizer || new ej.gridFeatures.gridResize(this);
                            this.setWidthToColumns();
                        }
                        else {
                            this._off(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
                            if (!this.model.allowResizing)
                                this._resizer = null;
                        }
                        break;
                    case "allowReordering":
                        this.model.allowReordering = options[prop];
                        if (this.model.allowReordering)
                            this._headerCellreorderDragDrop();
						else if(!this.model.allowGrouping)
							this.element.find('.e-draggable, .e-droppable').ejDraggable("destroy");
                        break;
                    case "allowRowDragAndDrop":
                        if (this.model.allowRowDragAndDrop) {
                            this._rowsDragAndDrop();
                            if (this.model.selectionType == "multiple")
                                this._on(this.element, "touchstart mousedown", ".e-gridcontent", this._contentMouseDown)
                            this.model.allowScrolling && this.getContent().ejScroller({ thumbStart: function () { return false } });
                        } else {
                            this._off(this.element, "touchstart mousedown", ".e-gridcontent", this._contentMouseDown)
                            this.getContent().ejDroppable("destroy");
                            $(this.getRows()).ejDraggable("destroy");
                            this.getContent().ejScroller({ thumbStart: null });
                        }
                        break;
                    case "showSummary":
                    case "summaryRows":
                        if (prop == "showSummary" && options[prop]) this.addSummaryTemplate();
                        if (prop == "showSummary" && !options[prop])
                            this.element.children(".e-gridfooter").remove();
                        else if (prop == "summaryRows" && this.model.showSummary || prop == "showSummary") {
                            this.element.children(".e-gridfooter").remove();
                            this.element.children(".e-gridfooter").remove();
                            var $content = this.element.find(".e-gridcontent").first();
                            var query = this.model.query.queries;
                            var pageQuery = [];
                            for (var i = 0; i < query.length; i++) {
                                if (query[i].fn === "onPage") {
                                    pageQuery = query.splice(i, 1);
                                }
                            }
                            var queryManager = this.model.query;
                            this._setSummaryAggregate(queryManager);
                            if(pageQuery.length)
                                queryManager.queries.push(pageQuery[0]);
                            if (this.model.currentViewData.length) {
                                if (this._isLocalData) {
                                    this._remoteSummaryData = this._dataManager.executeLocal(queryManager).aggregates;
                                    var footer = this._renderGridFooter();
                                    if (!ej.isNullOrUndefined(footer)) footer.insertAfter($content);
                                }
                                else {
                                    var proxy = this;
                                    var promise = this._dataManager.executeQuery(queryManager);
                                    promise.done(function (e) {
                                        proxy.element.children(".e-gridfooter").remove();
                                        proxy._remoteSummaryData = e.aggregates
                                        var footer = proxy._renderGridFooter();
                                        if (!ej.isNullOrUndefined(footer)) footer.insertAfter($content);
                                    });
                                }
                            }
                            if (this.model.allowGrouping) {
                                this._rowCol = this._captionSummary();
                                this._isCaptionSummary = (this._rowCol != null && this._rowCol.length) > 0 ? true : false;
                                this.refreshContent(true);
                            }
                        }
                        break;
                    case "enableAltRow":
                        this.model.enableAltRow = options[prop];
                        this.addInitTemplate();
                        this.refreshContent();
                        break;
                    case "toolbarSettings":
                        $.extend(this.model.toolbarSettings, options[prop]);
                        this.element.children(".e-gridtoolbar").remove();
                        if (this.model.toolbarSettings.showToolbar)
                            this._renderToolBar().insertBefore(this.element.find(".e-gridheader").first());
                        break;
                    case "allowSorting":
                        this.model.allowSorting = options[prop];
                        if (!this.model.allowSorting) 
                            this.clearSorting();
                        break;
                    case "selectionSettings":
                        $.extend(this.model.selectionSettings, options[prop]);
                        this.clearSelection();
                        this.clearCellSelection();
                        this.clearColumnSelection();
                        this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
						if(this.model.selectionSettings.selectionMode.length > 0 && this.model.allowSelection)
							this._initSelection();
                        break;
                    case "sortSettings":
                        $.extend(this.model.sortSettings, options[prop]);
                        this.refreshContent();
                        break;
                    case "contextMenuSettings":
                        $.extend(this.model.contextMenuSettings, options[prop]);
                        !ej.isNullOrUndefined($("#" + this._id + "_Context").data("ejMenu")) && $("#" + this._id + "_Context").ejMenu("destroy") && $("#" + this._id + "_Context").remove();
                        if (this.model.contextMenuSettings.enableContextMenu)
                            this._renderContext()
                        break;
                    case "enableRTL":
                        this.model.enableRTL = options[prop];
                        var model = this.model;
                        model.query = this.commonQuery.clone();
                        this.element.ejGrid("destroy");
                        model.enableRTL ? $("#" + this._id).addClass("e-rtl") : $("#" + this._id).removeClass("e-rtl");
                        $("#" + this._id).ejGrid(model);
                        break;
                    case "enableTouch":
                        this.model.enableTouch = options[prop];
                        if (!this.model.enableTouch) {
                            this.element.addClass("e-touch");
                            this._off(this.element, "swipeleft swiperight", ".e-gridcontent .e-table");
                        }
                        else {
                            this._on(this.element, "swipeleft swiperight", ".e-gridcontent .e-table", $.proxy(this._touchGrid, this));
                            this.element.removeClass("e-touch");
                        }
                        break;
                    case "allowSelection":
                        if (options[prop]) {
                            this._off(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", this._clickHandler);
                            this._on(this.element, "click", this._clickHandler);
							this._initSelection();
                        }
                        else {
                            this.clearSelection();
                            this.clearCellSelection();
                            this.clearColumnSelection();
                            this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
                        }
                        break;
                    case "query":
                        this.commonQuery = $.extend(true, {}, options[prop]);
                        break;
                    case "showStackedHeader":
                    case "stackedHeaderRows":
                        if (this.model.showStackedHeader && options["stackedHeaderRows"] && options.stackedHeaderRows.length > 0) {
                            if (ej.getObject("stackedHeaderRows.length", options))
                                this.model.stackedHeaderRows = options["stackedHeaderRows"];                            
                            this._refreshStackedHeader();
                         }
                          else
                            this.getHeaderTable().find(".e-stackedHeaderRow").remove();
                        break;
                    case "allowTextWrap":
                    case "textWrapSettings":
                        $.extend(this.model.textWrapSettings, options[prop]);
                            this._setTextWrap();
                        break;
                    case "rowTemplate":
                        this.refreshContent(true);
                        break;
                    case "keySettings":
                        if(this.model.keySettings)
                            $.extend(this.model.keyConfigs, this.model.keySettings);
                        break;
                    case "detailsTemplate":
                        if (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) {
                            this._renderAlertDialog();
                            this._alertDialog.find(".e-content").text(this._getLocalizedLabels("FrozenNotSupportedException"));
                            this._alertDialog.ejDialog("open");
                        }
                        else {
                            var $header = this.element.children(".e-gridheader");
                            $header.find("div").first().empty().append(this._renderGridHeader().find("table"));
                            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                                this._renderFiltering();
                            this.setGridHeaderContent($header);
                            this.refreshContent(true);
                            if (this.model.allowReordering)
                                this._headerCellreorderDragDrop();
                            if (this.model.allowGrouping && this.model.groupSettings.showDropArea)
                                this._headerCellgDragDrop();
                        }
                        break;
                }
            }

        },
        
        resetModelCollections: function () {
            this.model.groupSettings.groupedColumns = [];
            this.model.filterSettings.filteredColumns = [];
            this.filterColumnCollection = [];
            this.model.sortSettings.sortedColumns = [];
            this.model.pageSettings.currentPage = this.defaults.pageSettings.currentPage;
        },
        _enableGrouping: function(){
			this.refreshTemplate();
			if (this.model.groupSettings.showToggleButton) {
			    var isFiltering = this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel");
			    var columns = this.model.columns;
			    for (var columnCount = 0; columnCount < columns.length; columnCount++) {
			        var headercell = this.getHeaderTable().find(".e-columnheader").find(".e-headercell").not(".e-stackedHeaderCell, .e-detailheadercell").eq(columnCount);
			        var field = columns[columnCount].field;
			        if ($.inArray(field, this._disabledGroupableColumns) == -1 && !ej.isNullOrUndefined(field) && field != "") {
			            if (!headercell.find(".e-gridgroupbutton").length) {
			                if ($.inArray(field, this.model.groupSettings.groupedColumns) != -1)
			                    headercell.append(this._getToggleButton().addClass("e-toggleungroup"));
			                else
			                    headercell.append(this._getToggleButton().addClass("e-togglegroup"));
			                if (isFiltering && (columns[columnCount]["allowFiltering"] == undefined || columns[columnCount]["allowFiltering"] === true) && (!ej.isNullOrUndefined(columns[columnCount].field) || columns[columnCount].field == "") && (columns[columnCount]["type"] != "checkbox")) {
			                    headercell.addClass("e-headercellgroupfilter");
			                    headercell.find(".e-filtericon").addClass("e-groupfiltericon");
			                }
			                headercell.addClass("e-headercellgroup");
			            }
			        }
			    }
			}
			if (!this.model.groupSettings.showToggleButton)
			    this.getHeaderTable().find(".e-gridgroupbutton").remove();
			this.element.find(".e-groupdroparea").remove();
			if (this.model.groupSettings.showDropArea) {
			    this.model.showColumnChooser && this.element.find(".e-ccButton").length > 0 ? this.element.find(".e-ccButton").after(this._renderGroupDropArea()) : this.element.prepend(this._renderGroupDropArea());
			    if (ej.gridFeatures.dragAndDrop) {
			        this._groupHeaderCelldrag();
			        this._headerCellgDragDrop();
			    }
			}
			if (!ej.isNullOrUndefined(this.model.groupSettings.groupedColumns.length) && this.model.groupSettings.groupedColumns.length) {
				var args = {};
			    args.columnName = this.model.groupSettings.groupedColumns[this.model.groupSettings.groupedColumns.length - 1];
			    args.requestType = ej.Grid.Actions.Grouping;
			    this.element.find(".e-groupdroparea").empty();
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length - 1; i++)
					this._addColumnToGroupDrop(this.model.groupSettings.groupedColumns[i]);
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
					if (ej.isNullOrUndefined(this.getsortColumnByField(this.model.groupSettings.groupedColumns[i])))
						this.model.sortSettings.sortedColumns.push({ field: this.model.groupSettings.groupedColumns[i], direction: ej.sortOrder.Ascending});
				}
				this._processBindings(args);
			}
        },
        
        addIgnoreOnExport: function (args) {
            if (typeof (args) == 'string')
                this.ignoreOnExport.push(args);
            else
                this.ignoreOnExport = this.ignoreOnExport.concat(args);
        },
        addIgnoreOnToolbarServerClick: function (args) {
            if (typeof (args) == 'string')
                this.ignoreOnToolbarServerClick.push(args);
            else
                this.ignoreOnToolbarServerClick = this.ignoreOnToolbarServerClick.concat(args);
        },
        _decode: function (value) {
            return $('<div/>').html(value).text();
        },
        _htmlEscape: function (str) {
            var regx = /[&<>"']/g, charEntities = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                "\"": "&#34;",
                "'": "&#39;"
            };
            return str.replace(regx, function (c) {
                return charEntities[c];
            });
        },
        _mappingSelection: function () {
            if (ej.gridFeatures.selection && this._enableCheckSelect) {
                this.multiSelectCtrlRequest = true;
                var rowIndexes = [];
                for (var i = 0; i < this._currentJsonData.length; i++) {
                    if (ej.pvt.getObject(this._selectionMapColumn, this._currentJsonData[i]) == true)
                        rowIndexes.push(i)
                }
                this.selectedRowsIndexes = [];
                this.checkSelectedRowsIndexes = [];
                this._selectedRow(-1);
                this._selectionByGrid = true;
                rowIndexes.length && this.selectRows(rowIndexes);
                this._selectionByGrid = false;
            }
        },
        _headerCheckUpdateAll: function (val) {
            var data = [];
            if (this._isLocalData) {
                if (this.model.searchSettings.key != "" || this.model.filterSettings.filteredColumns.length)
                    data = this.getFilteredRecords();
                else
                    data = this._dataSource() instanceof ej.DataManager ? this._dataSource().dataSource.json : this._dataSource();
            }
            else
                data = this._currentJsonData;
            for (var i = 0; i < data.length; i++) {
                data[i][this._selectionMapColumn] = val;
                this.batchChanges.changed.push(data[i]);
            }
            this.clearSelection();
            this.batchSave();
            return;
        },
        _getForeignKeyData: function (data) {
            var proxy = this;
            var column = {},i;
            for (i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i].foreignKeyValue && this.model.columns[i].dataSource) {
                    var fieldName = ej.isNullOrUndefined(proxy.model.columns[i]["foreignKeyField"]) ? proxy.model.columns[i]["field"] : proxy.model.columns[i]["foreignKeyField"];
                    var dataSource = this.model.columns[i].dataSource instanceof ej.DataManager ? this.model.columns[i].foreignKeyData : this.model.columns[i].dataSource;
                    dataSource.filter(function (col) {
                        var value = ej.getObject(proxy.model.columns[i]["field"], data);
                        var fValue = !isNaN(parseFloat(value)) && isFinite(value) ? parseFloat(value) : value;
                        if (col[fieldName] == fValue) {
                            column[fieldName] = col;
                        }
                    });
                }
            }
            return column;
        },
        _foreignKeyBinding: function (curColumn, cellValue, gridId) {
            var cellData, val;
            var gridObj = $("#" + gridId).ejGrid('instance');
            curColumn = gridObj.model.columns[curColumn];
            var dataSource = curColumn.dataSource instanceof ej.DataManager ? curColumn.foreignKeyData : curColumn.dataSource;
            dataSource.filter(function (col) {
                if (ej.getObject(curColumn.foreignKeyField, col) == cellValue) {
                    val = ej.getObject(curColumn.foreignKeyValue, col);
                    return cellData = curColumn.type == "date" ? new Date(val) : val;
                }
            });
            if (curColumn.format) {
                cellData = gridObj.formatting(curColumn.format, cellData, gridObj.model.locale);
            }
            return cellData;
        },
        _checkForeignKeyBinding: function () {
            if (!this.model.columns.length)
                return;
            var c, _cols, _len, _col;
            for (c = 0, _cols = this.model.columns, _len = _cols.length; c < _len; c++) {
                _col = _cols[c];
                if (_col.hasOwnProperty("foreignKeyField") && _col["dataSource"] instanceof ej.DataManager)
                    this._relationalColumns.push({ field: _col["field"], key: _col["foreignKeyField"], value: _col["foreignKeyValue"], dataSource: _col["dataSource"] });
            }
            this._$fkColumn = true;
        },  
        _setForeignKeyData: function (args) {
            if (!this._relationalColumns.length)
                return;
            var arr = this._relationalColumns, len = this._relationalColumns.length,
                promises = [], viewData = this.model.currentViewData, e = {};
            var obj, qry, pred, dist, qPromise, proxy = this;
            if (viewData.length == 0) {
                for (var c = 0, clen = this.model.columns.length; c < clen; c++) {
                    var column = this.model.columns[c];
                    if (!ej.isNullOrUndefined(column["foreignKeyField"]) && column.dataSource instanceof ej.DataManager)
                        column["foreignKeyData"] = [];
                }
            }
            var failFn = ej.proxy(function (e) { /*Separate fail handler to get more control over request*/
                this._trigger("actionFailure", { requestType: "fetchingforeigndata", error: e.error });
            }, this);
            if (!this.element.ejWaitingPopup("model.showOnInit"))
                this.element.ejWaitingPopup("show");
                
            for (var i = 0; i < len; i++) {
                if (!(0 in viewData)) continue;
                obj = arr[i], e.field = obj["field"], e.keyField = obj["key"], e.valueField = obj["value"], e.dataSource = obj["dataSource"],
                            e.query = new ej.Query().select([e.valueField, e.keyField]),
                            dist = ej.distinct(viewData.level ? viewData.records : viewData, e.field, true);
                       
                var predicate = [];
                for (var j = 0; j < dist.length; j++)
                    predicate.push(new ej.Predicate(e.keyField, "equal", dist[j][e.field], true));
                predicate = ej.Predicate.or(predicate);
                e.query.where(predicate);
                        
                if (this._trigger("actionBegin", $.extend(e, { requestType: "fetchingforeigndata", column: this.getColumnByField(e.field) })))
                    return;
                qPromise = e.dataSource.ready === undefined ? e.dataSource.executeQuery(e.query, null, failFn) : e.dataSource.ready.fail(failFn);
                promises.push(qPromise);
            }
                
            $.when.apply(this, promises).then(function () {
                proxy.element.ejWaitingPopup("hide");
                var arg = [].slice.call(arguments, 0, arguments.length), column;
                for (var i = 0, plen = promises.length; i < plen; i++) {
                    obj = arr[i];
                    for (var c = 0, clen = proxy.model.columns.length; c < clen; c++) {
                        column = proxy.model.columns[c];
                        if (column["foreignKeyField"] == obj["key"] && column["foreignKeyValue"] == obj["value"] && column["field"] == obj["field"])
                            column["foreignKeyData"] = arg[i].result;
                    }
                }
                proxy.initialRender ? proxy._initGridRender() : proxy.sendDataRenderingRequest(args);
            });
                
        },
        _isRelationalRendering: function (args) {
            return (0 in this._relationalColumns) && ["add", "beginedit", "cancel"].indexOf(args.requestType) == -1;
        }        
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.edit = {
        _processEditing: function () {
            var colInfo = this._columnToSelect(), query = colInfo.query, dropObj = [], dropField = colInfo.fields, promises = [], qPromise,
                            e = this._relationalColumns, len = e.length, req;
            this.model.query._fromTable != "" && query.from(this.model.query._fromTable);
            req = dropField.length;
            if (req && !ej.isNullOrUndefined(this._dataManager)) 
                promises.push(this._dataManager.executeQuery(query));
            if (len != 0) {
                var obj, qry;
                for (var i = 0; i < len; i++) {
                    obj = e[i], qry = new ej.Query().select([obj.key, obj.value]);
                    qPromise = obj["dataSource"].ready === undefined ? obj["dataSource"].executeQuery(qry) : obj["dataSource"].ready;
                    promises.push(qPromise);
                }
            }
            if (colInfo.fieldsDrop.length) {
                var colLen = colInfo.fieldsDrop.length, fields = colInfo.fieldsDrop;
                for (var col = 0; col < colLen; col++) {
                    var tempobj = [];
                    var colObj = this.getColumnByField(fields[col]);
                    if (!ej.isNullOrUndefined(ej.getObject("editParams.fields.text", colObj))) {
                        var params = colObj.editParams;
                        dropObj.push(params.fields);
                    }
                    else
                        dropObj.push(fields[col]);
                    if (dropObj[col] instanceof Object) {
                        tempobj.push(dropObj[col].text);
                        tempobj.push(dropObj[col].value);
                    }
                    else tempobj.push(dropObj[col]);
                    var query = new ej.Query().select(tempobj);
                    promises.push(colObj.dataSource.executeQuery(query));
                }
            }
            if (promises.length != 0) {
                $.when.apply(this, promises).then(ej.proxy(function () {
                    var arg = [].slice.call(arguments, 0, arguments.length);
                    for (var i = 0, j = 0, k = 0, s = req, flag, plen = promises.length; i < plen; i++) {
                        while (s > 0) {
                            ej.createObject(dropField[--s], arg[i].result, this._dropDownManager);
                            flag = true;
                        }
                        if (flag && i == 0) continue; /* i == 0 - since one req will be made for all Ddl columns*/
                        if (e.length != j) {
                            var obj = e[j], key = obj.field + "." + obj.key + "." + obj.value;
                            ej.createObject(key, arg[i].result, this._dropDownManager);
                            j++;
                            continue;
                        }
                        if (e.length == j && dropObj.length) {
                            if (dropObj[k] instanceof Object) {
                                ej.createObject(dropObj[k].text, arg[i].result, this._dropDownManager);
                                ej.createObject(dropObj[k].value, arg[i].result, this._dropDownManager);
                            }
                            else
                                ej.createObject(dropObj[k], arg[i].result, this._dropDownManager);
                            k++;
                        };
                    }
                    this._initiateTemplateRendering();
                }, this));
            }
            else
                this._initiateTemplateRendering();
        },
        _initiateTemplateRendering: function() {
            if (this.model.editSettings.editMode == "normal") this.addEditingTemplate();
            else if (this.model.editSettings.editMode == "batch") this.addBatchEditTemplate();
            else if (this.model.editSettings.editMode == "dialog" ||
                this.model.editSettings.editMode == "externalform" ||
               this.model.editSettings.editMode == "inlineform")
                this.addDialogEditingTemplate();
            else this.addExternalDialogEditingTemplate();
            if ((this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal"))
                this._startAdd();
        },
        addEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var $tbody = ej.buildTag('tbody');
            var $tr = ej.buildTag('tr');
            var $td = ej.buildTag('td', "", {}, { colSpan: this.model.scrollSettings.frozenColumns > 0 ? this.model.scrollSettings.frozenColumns : this.model.columns.length });
            var $form = ej.buildTag('form', "", {}, { id: this._id + "EditForm", "class": "gridform" });
            var $table = ej.buildTag('table.e-table');
            var $innerTbody = ej.buildTag('tbody');
            var $innerTr = ej.buildTag('tr');
            $tbody.append($tr);
            $tr.append($td);
            $td.append($form);
            var $colGroup = $(document.createElement('colgroup'));
            $form.append($table);
            $table.append($colGroup);
            $innerTbody.append($innerTr).appendTo($table);
            if (this.model.scrollSettings.frozenColumns > 0) {
                var $tbodyClone = $tbody.clone();
                $tbodyClone.find("td").first().prop("colSpan", this.model.columns.length - this.model.scrollSettings.frozenColumns);
            }
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                var $innerTd = ej.buildTag('td.e-rowcell');
                $innerTr.append($innerTd.get(0));
                if (this.model.columns[columnCount]["type"] == "checkbox" && !this._isMapSelection)
                    continue;
                if (ej.isNullOrUndefined(this.model.columns[columnCount]["commands"]) &&
                 (!this.model.columns[columnCount]["template"] || (this.model.columns[columnCount]["template"] && this.model.columns[columnCount]["allowEditing"] != false && this.model.columns[columnCount]["field"]))) {
                    this._initCellEditType(columnCount, $innerTd);
                } else if (this.model.columns[columnCount]["template"]) {
                    var helpers = {}, htxt = this.model.columns[columnCount].headerText;
                    helpers["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this);
                    $.views.helpers(helpers);
                    if (!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
                        htxt = htxt.replace(/[^0-9\s\w]/g, "_");
                    $("#" + this._id + htxt + columnCount + "_Template").remove();
                    var scriptElement = this._createTemplateElement(this.model.columns[columnCount]);
                    $innerTd.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "','" + columnCount + "')}}");
                } else if (this.model.columns[columnCount]["commands"]) {
                    var helpers = {};
                    helpers["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                    $.views.helpers(helpers);
                    $("#" + this._id + this.model.columns[columnCount].headerText.replace(/[^a-z0-9|s_]/gi, '')+ columnCount + "_UnboundTemplate").remove();
                    var divElement = this._createUnboundElement(this.model.columns[columnCount], columnCount);
                    $innerTd.addClass("e-unboundcell").addClass("e-" + this.model.columns[columnCount]["headerText"].replace(/[^a-z0-9|s_]/gi, '') + columnCount).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                    this.model.scrollSettings.frozenColumns > 0 && $innerTd.addClass("e-frozenunbound");
                    this._isUnboundColumn = true;
                }
                if (this.model.columns[columnCount]["textAlign"] != undefined)
                    $innerTd.css("text-align", this.model.columns[columnCount]["textAlign"]);
                this.model.columns[columnCount]["allowEditing"] == false && $innerTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                if (this.model.columns[columnCount]["isPrimaryKey"] === true)
                    $innerTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                if (this.model.columns[columnCount]["isIdentity"] === true) {
                    $innerTd.find(".e-field").addClass("e-identity");
                    this._identityKeys.push($.trim(this.model.columns[columnCount].field));
                    this._identityKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._identityKeys.sort()) : $.uniqueSort(this._identityKeys.sort());
                }
                var $col = $(document.createElement('col'));
                if (this.model.columns[columnCount]["priority"]) {
                    $innerTd.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                    $col.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                }
                if (this.model.columns[columnCount]["visible"] === false) {
                    $col.css("display", "none");
                    $innerTd.addClass("e-hide");
                }
                if (!ej.isNullOrUndefined(this.model.columns[columnCount]["cssClass"])) {
                    $innerTd.addClass(this.model.columns[columnCount]["cssClass"]);
                }
                !this.model.groupSettings.showGroupedColumn && $innerTd.addClass("{{for ~groupedColumns}}" +
                    " {{if #data == '" + this.model.columns[columnCount]["field"] + "'}}e-hide{{/if}}" +
                    "{{/for}}") && $col.css("display", "none");
                $colGroup.append($col);
                if (columnCount == this.model.scrollSettings.frozenColumns - 1) {
                    $innerTr = $tbodyClone.find("tr").last();
                    $colGroup = $tbodyClone.find("colgroup");
                    $.templates(this._id + "_JSONFrozenEditingTemplate", $tbody.html());
                    $tbody = $tbodyClone;
                }
            }
            $.templates(this._id + "_JSONEditingTemplate", $tbody.html());
        },

        addDialogEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var $tbody = ej.buildTag('div');
            var $form = ej.buildTag('form.gridform', "", {}, { id: this._id + "EditForm" });
            var $table = ej.buildTag('table');
            var $innerTr, $labelTd, $valueTd, trElement, tdElement;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                if (this.model.columns[columnCount]["type"] == "checkbox" && !this._isMapSelection)
                    continue;
                if (this.model.editSettings.editMode == "dialog") {
                    trElement = 'tr';
                    tdElement = 'td';
                }
                else trElement = tdElement = 'div';
                $innerTr = ej.buildTag(trElement);
                $labelTd = ej.buildTag(tdElement, "", { "text-align": "right" }).addClass("e-label");
                $valueTd = ej.buildTag(tdElement, "", { "text-align": "left" }).addClass("e-rowcell");
				if($innerTr.is('div'))
                    $innerTr.addClass("e-gridFromDiv")
                 if (this.model.columns[columnCount]["priority"] && this.model.editSettings.editMode == "inlineform") 
                    $innerTr.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
                $innerTr.append($labelTd.get(0)).append($valueTd.get(0));
                if (this.model.columns[columnCount].headerText == undefined)
                    this.model.columns[columnCount].headerText = this.model.columns[columnCount].field;
                $labelTd.append("<label for='" + this.model.columns[columnCount].field + "'>" + this.model.columns[columnCount].headerText + "</label>");
                if (ej.isNullOrUndefined(this.model.columns[columnCount]["commands"]) &&
				(!this.model.columns[columnCount]["template"] || (this.model.columns[columnCount]["template"] && this.model.columns[columnCount]["allowEditing"] !=false && this.model.columns[columnCount]["field"])))
                    this._initCellEditType(columnCount, $valueTd);
                else if (this.model.columns[columnCount]["template"]) {
                    var helpers = {}, htxt = this.model.columns[columnCount].headerText;
                    helpers["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this);
                    $.views.helpers(helpers);
                    if (!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
                        htxt = htxt.replace(/[^0-9\s\w]/g, "_");
                    $("#" + this._id + htxt + columnCount + "_Template").remove();
                    var scriptElement = this._createTemplateElement(this.model.columns[columnCount]);
                    $valueTd.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "','" + columnCount + "')}}");
                } else if (this.model.columns[columnCount]["commands"]) {
                    var helpers = {};
                    helpers["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                    $.views.helpers(helpers);
                    $("#" + this._id + this.model.columns[columnCount].headerText.replace(/[^a-z0-9|s_]/gi, '')+columnCount+ "_UnboundTemplate").remove();
                    var divElement = this._createUnboundElement(this.model.columns[columnCount], columnCount);
                    $valueTd.addClass("e-unboundcell").addClass("e-" + this.model.columns[columnCount]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+columnCount).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                    this.model.scrollSettings.frozenColumns > 0 && $valueTd.addClass("e-frozenunbound");
                    this._isUnboundColumn = true;
                    $innerTr.addClass("e-hide");
                }
                this.model.columns[columnCount]["allowEditing"] == false && $valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                if (this.model.columns[columnCount]["isIdentity"] === true) {
                    $valueTd.find(".e-field").addClass("e-identity");
                    this._identityKeys.push($.trim(this.model.columns[columnCount].field));
                    this._identityKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._identityKeys.sort()) : $.uniqueSort(this._identityKeys.sort());
                }
                if (this.model.columns[columnCount]["visible"] === false)
                    $innerTr.addClass("e-hide");
                 if (!ej.isNullOrUndefined(this.model.columns[columnCount]["cssClass"])) {
                     $valueTd.addClass(this.model.columns[columnCount]["cssClass"]);
                }
                if (this.model.editSettings.editMode == "dialog") {
                    $form.append($table);
                    $table.append($innerTr);
                } else
                    $form.append($innerTr);
                $form.appendTo($tbody);
                if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
                    $valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                    this._primaryKeys.push($.trim(this.model.columns[columnCount].field));
                    this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
                }
            }
            if (this.model.editSettings.editMode == "dialog") $form.append($table);
            $tbody = this.renderDiaglogButton($form, $tbody);
            $.templates(this._id + "_JSONDialogEditingTemplate", $tbody.html());
        },
        _editEventTrigger: function (args) {
            if (args.requestType == "save" || args.requestType == "delete") {
                var params = {
                    data: args.data,
                    rowData: args.data,
                    previousData: args.previousData,
                    action: args.action !== undefined ? args.action : args.requestType,
                };
                if (!ej.isNullOrUndefined(args.foreignKeyData))
                    params.foreignKeyData = args.foreignKeyData;
				this._trigger("end" + params.action.charAt(0).toUpperCase() + params.action.slice(1), params);
            }
        },
        _compiledDropDownTemplate: function (valueField, textField, colType, format) {
            var helpers = { _gridFormatting: this.formatting };
            $.views.helpers(helpers);
            var $select = ej.buildTag('select');
            var $option = ej.buildTag("option", format != null ? "{{:~_gridFormatting('" + format + "'," + textField + ",'" + this.model.locale + "')}}" : "{{:" + textField + "}}", {}, { value: "{{:" + valueField + "}}" });
            $select.append($option);
            return $.templates($select.html());
        },
        _initCellEditType: function (columnCount, element) {
            var fName = this.model.columns[columnCount].field;
            if (this.model.columns[columnCount]["foreignKeyValue"])
                this.model.columns[columnCount]["editType"] = "dropdownedit";
            if (this._dataSource() instanceof ej.DataManager  && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) {
                var index = $.inArray(this.model.columns[columnCount].field,this._dataSource().adaptor.value),fk_Value,fk_fieldName;
				 if(index != -1){
						fk_Value = this._dataSource().adaptor.value[index];
						fk_fieldName = this._dataSource().adaptor.key[index];	 
				 }
            }
            if (this.model.columns[columnCount]["editTemplate"])
                this.model.columns[columnCount]["editType"] = "edittemplate";
            if (ej.isNullOrUndefined(this.model.columns[columnCount]["editType"]))
                if (this.model.columns[columnCount]["type"] == "date" || this.model.columns[columnCount]["type"] == "datetime")
                    this.model.columns[columnCount]["editType"] = this.model.columns[columnCount]["type"] + "picker";
                else
                    this.model.columns[columnCount]["editType"] = "stringedit";
            if (this.model.isResponsive)
                element.attr("data-cell",this._decode(this.model.columns[columnCount]["headerText"]));
            var splits = (fName || "").split("."), sLen = splits.length - 1, braces = "";
            if (!ej.isNullOrUndefined(fName))
                fName = fName.replace(/[^a-z0-9\s_]/gi, '');
            while (sLen) {
                braces += "(";
                sLen--;
            }
            switch (this.model.columns[columnCount]["editType"]) {
                case "edittemplate":
                    var temp = this.model.columns[columnCount].editTemplate.create;
                    if (typeof temp == "string") {
                        var temp1 = ej.util.getObject(temp, window);
                        if (!$.isFunction(temp1)) {
                            if ($(temp).length == 1 && $(temp).get(0).tagName == "SCRIPT")
                                var $edittemplate = $($(temp).html()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field, "class":"e-field" });
                            else
                                var $edittemplate = $(temp).attr({ id: this._id + fName, name: this.model.columns[columnCount].field , "class":"e-field"});
                        }
                        else
                            var $edittemplate = $(temp1()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field, "class":"e-field" });
                    }
                    else
                        var $edittemplate = $(temp()).attr({ id: this._id + fName, name: this.model.columns[columnCount].field, "class":"e-field" });
                    element.append($edittemplate);
                    break;
                case "stringedit":
                    element.html(ej.buildTag('input.e-field e-ejinputtext', "", {}, { value: "{{html:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field, type:"text" }));
                    break;
                case "booleanedit":
                    element.html('{{if #data["' + splits.join('"]["') + '"]}} <input class="e-field e-checkbox" type ="checkbox" id=' + this._id + fName + ' name=' + this.model.columns[columnCount].field + ' checked="checkbox"></input>{{else}} <input class="e-field e-checkbox" type ="checkbox" id=' + this._id + fName + ' name=' + this.model.columns[columnCount].field + ' > {{/if}}');
                    if (this.model.editSettings.editMode == "normal")
                        element.addClass("e-boolcell");
                    break;
                case "numericedit":
                    var $numericText = ej.buildTag('input.e-numerictextbox e-js e-field', "", {}, { type: "text", value: "{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field });
                    element.append($numericText);
                    break;
                case "datepicker":
                case "datetimepicker":
                    var $datePicker = ej.buildTag('input.e-' + this.model.columns[columnCount]["editType"] + ' e-js e-field', "", {}, { type: "text", value: "{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}", id: this._id + fName, name: this.model.columns[columnCount].field });
                    element.append($datePicker);
                    break;
                case "dropdownedit":
                    var currColumn = this.model.columns[columnCount], selectedItems = [], $foreignkeyfield, $foreignkeyvalue;
                    if (ej.isNullOrUndefined(currColumn.dataSource)) {
                        var arrayOfDatas;
                        if (ej.isNullOrUndefined(currColumn.dataSource) && (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor && currColumn.field == fk_Value)) {
                            var data = this.model.dataSource.adaptor.foreignData[index];
                            $foreignkeyfield = this.model.dataSource.adaptor.key[index];
                            $foreignkeyvalue = this.model.dataSource.adaptor.value[index];
                            selectedItems = data;
                        }
                        var arrayOfDatas, field = currColumn.field;
                        if (ej.isNullOrUndefined(ej.getObject(field, this._dropDownManager)))
                            return;
                        arrayOfDatas = ej.getObject(field, this._dropDownManager);
                        var isObj = 0 in arrayOfDatas && typeof arrayOfDatas[0] == "object";
                        var uniqueData = uniqueData = ej.dataUtil.mergeSort(ej.distinct(arrayOfDatas, isObj ? field : undefined, isObj ? false : undefined));
                        if (selectedItems.length == 0) {
                            if (ej.isNullOrUndefined(currColumn.dataSource) && (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor && currColumn.field == fk_Value)) {
                                for (var index = 0; index < uniqueData.length; index++)
                                    selectedItems.push({ text: uniqueData[index][0], value: uniqueData[index][1] });
                            }
                            else {
                                for (var index = 0; index < uniqueData.length; index++)
                                    selectedItems.push({ text: uniqueData[index], value: uniqueData[index] });
                            }
                        }
                    }
                    else {
                        if (ej.isNullOrUndefined(currColumn.foreignKeyField) && currColumn.dataSource instanceof ej.DataManager) {
                            var field = currColumn.field, arrData = ej.getObject(field, this._dropDownManager);
                            var isObj = 0 in arrData && typeof arrData[0] == "object";
                            var uniqueData = uniqueData = ej.dataUtil.mergeSort(ej.distinct(arrData, isObj ? field : undefined, isObj ? false : undefined));
                            if (!ej.isNullOrUndefined(ej.getObject("editParams.fields.text", currColumn)))
                                selectedItems = arrData;
                            if (selectedItems.length == 0) {
                                for (var index = 0; index < uniqueData.length; index++) {
                                    selectedItems.push({ text: uniqueData[index], value: uniqueData[index] });
                                }
                            }
                        }
                        else if(ej.isNullOrUndefined(currColumn.foreignKeyField) || (!(currColumn.field in this._dropDownManager) && !(currColumn.dataSource instanceof ej.DataManager)))
                            selectedItems = currColumn.dataSource
                        else
                            selectedItems = ej.getObject(currColumn.field + "." + currColumn.foreignKeyField + "." + currColumn.foreignKeyValue, this._dropDownManager);
                    }
                    var dropDownTemplate;
                    var fieldName = ej.isNullOrUndefined(currColumn.foreignKeyField) ? currColumn.field : currColumn.foreignKeyField;
                    if (currColumn.foreignKeyValue)
                        dropDownTemplate = this._compiledDropDownTemplate(fieldName, currColumn.foreignKeyValue, currColumn.type, currColumn.format);
                    else if ((this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) && (currColumn.field == fk_Value)) {
                        dropDownTemplate = this._compiledDropDownTemplate($foreignkeyfield ? $foreignkeyfield : "value", $foreignkeyvalue ? $foreignkeyvalue : "text", currColumn.type, currColumn.format);
                    }
                    else {
                        var value = ej.getObject("editParams.fields.value", currColumn) || "value";
                        var text = ej.getObject("editParams.fields.text", currColumn) || "text";
                        dropDownTemplate = this._compiledDropDownTemplate(value, text, currColumn.type, currColumn.format);
                    }
                    if (!ej.isNullOrUndefined(currColumn.editParams) && ((this._dataSource() instanceof ej.DataManager && (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor)) && (currColumn.field == fk_Value)))
                        element.get(0).innerHTML = "<input data-value='{{:" + fk_fieldName + "}}'/>";
                    else
                        element.get(0).innerHTML = ["<select>", dropDownTemplate.render(selectedItems), "</select>"].join("");
                    element.find("select,input").prop({ id: this._id + fName, name: currColumn.field }).addClass("e-field e-dropdownlist");
                    break;
            }
        },
        addBatchEditTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var $outerDiv = ej.buildTag('div', "", { display: "none" }, { id: this._id + "_BulkEditTemplate" }), i, columnCount, $innerDiv;
            for (i = 0, columnCount = this.model.columns.length; i < columnCount; i++) {
                if (ej.isNullOrUndefined(this.model.columns[i]["commands"]) && (ej.isNullOrUndefined(this.model.columns[i]["template"])) ||
                    (this.model.columns[i]["template"] && this.model.columns[i]["allowEditing"] != false && this.model.columns[i]["field"])) {				 
                    $innerDiv = ej.buildTag('div', "", {}, { id: this.model.columns[i].field.replace(/[^a-z0-9\s_]/gi, ej.pvt.consts.complexPropertyMerge) + "_BulkEdit" });
                    this._initCellEditType(i, $innerDiv);
                    $outerDiv.append($innerDiv);
                }
                if (this.model.columns[i]["isPrimaryKey"] === true) {
                    this._primaryKeys.push($.trim(this.model.columns[i].field));
                    this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
                }
                if (this.model.columns[i]["isIdentity"] === true) {
                    $innerDiv.find(".e-field").addClass("e-identity");
                    this._identityKeys.push($.trim(this.model.columns[i].field));
                    this._identityKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._identityKeys.sort()) : $.uniqueSort(this._identityKeys.sort());
                }
            }
            if ($outerDiv.children().length)
                this._bulkEditTemplate = $outerDiv;

        },
        addExternalDialogEditingTemplate: function () {
            if (this.model.columns.length == 0)
                return;
			  var  $valueTd;
			   $valueTd = ej.buildTag('td', "", { "text-align": "left" }).addClass("e-rowcell");
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                if (this.model.columns[columnCount]["type"] == "checkbox" && !this._isMapSelection)
                    continue;
                if (ej.isNullOrUndefined(this.model.columns[columnCount]["commands"]) && (!ej.isNullOrUndefined(this.model.columns[columnCount]["template"]) && this.model.columns[columnCount]["allowEditing"] != false && this.model.columns[columnCount]["field"]) && !ej.isNullOrUndefined(this.model.columns[columnCount].editTemplate))
                    this._initCellEditType(columnCount, $valueTd);
                if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
                    this._primaryKeys.push($.trim(this.model.columns[columnCount].field));
                    this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
                }
                if (this.model.columns[columnCount]["isIdentity"] === true) {
                    this._identityKeys.push($.trim(this.model.columns[columnCount].field));
                    this._identityKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._identityKeys.sort()) : $.uniqueSort(this._identityKeys.sort());
                }
            }
            var $tbody = ej.buildTag('div', "", { 'display': 'none' });
            var $form = ej.buildTag('form.gridform', "", {}, { id: this._id + "EditForm" });
            var cloneElement;
            if (this.model.editSettings.editMode == "dialogtemplate" && this.model.editSettings.dialogEditorTemplateID != null)
                cloneElement = this.model.editSettings.dialogEditorTemplateID;
            else if (this.model.editSettings.editMode == "externalformtemplate" && this.model.editSettings.externalFormTemplateID != null) {
                cloneElement = this.model.editSettings.externalFormTemplateID;
                $form.addClass("e-display");
            }
            else {
                cloneElement = this.model.editSettings.inlineFormTemplateID;
                $form.addClass("e-display");
            }

            $form.html($(cloneElement).html());
            $tbody = this.renderDiaglogButton($form, $tbody);
            $.templates(this._id + "_JSONdialogTemplateMode", $tbody.html());
        },
        _editdblClickHandler: function (e) {
            var $target = $(e.target);
			if ($target.closest(".e-grid").attr("id") !== this._id) return;
            if ($target.hasClass("e-rowcell") || $target.closest("td").hasClass("e-rowcell")) {
                if (!this.model.isEdit || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")) {
                    this._$currentTr = (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0)
                        ? this.getRowByIndex($target.closest('tr').index())
                        : $target.closest('tr');
                     if(!ej.isNullOrUndefined(this._previousTr)){
                        if(this._$currentTr.length > 1 && this._$currentTr[0] != this._previousTr[0] && this._$currentTr[1] != this._previousTr[1])
                            return;
                        else if(this._$currentTr[0] != this._previousTr[0])
                            return;
                    }
                    this.startEdit(this._$currentTr);
                }
            }
        },
        _columnToSelect: function () {
            var column = [], columnDrop = [], cols = this.model.columns;
            for (var i = 0; i < this.model.columns.length; i++) {
                if (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) {
                    if ($.inArray(this.model.columns[i].field, this._dataSource().adaptor.value) != -1)
                        if (ej.isNullOrUndefined(this.model.columns[i]["editType"]))
                        this.model.columns[i]["editType"] = "dropdownedit";
                }
                if (this.model.columns[i]["editType"] === ej.Grid.EditingType.Dropdown && ej.isNullOrUndefined(this.model.columns[i]["dataSource"]))
                    column.push(this.model.columns[i].field);
                if (cols[i]["editType"] === ej.Grid.EditingType.Dropdown && ej.isNullOrUndefined(cols[i].foreignKeyField) && cols[i]["dataSource"] instanceof ej.DataManager)
                    columnDrop.push(this.model.columns[i].field);
            }
            if (column.length)
                return { query: ej.Query().select(column), fields: column, fieldsDrop: columnDrop };
            return { query: ej.Query(), fields: [], fieldsDrop: columnDrop };
        },
        _renderExternalForm: function () {
            var $externalform = ej.buildTag("div", "", { display: "none" }, { id: this._id + "_externalEdit", 'class': "e-form-container" });
            var $eformHeader = ej.buildTag("div", "", "", { id: this._id + "_eFormHeader", 'class': "e-form-titlebar" });
            var $eformTitle = ej.buildTag("span", "", "", { 'class': "e-form-title" });
            var $eformToggleBtn = ej.buildTag("div", "", "", { id: this._id + "_eFormToggleBtn", 'class': "e-form-togglebtn" });
            var $eformToggleIcon = ej.buildTag("span", "", "", { 'class': "e-form-toggle-icon e-icon" });
            $eformToggleBtn.append($eformToggleIcon);
            $eformHeader.append($eformTitle).append($eformToggleBtn);

            var $eformContent = ej.buildTag("div", "", "", { id: this._id + "_eFormContent", 'class': "e-form-content" });
            var $eform = ej.buildTag("div", "", "", { id: this._id + "_externalForm", 'class': "e-externalform" });
            var $contentOuterDiv = ej.buildTag("div", "", "", { 'class': "e-externalformedit" });
            $eform.append($contentOuterDiv);
            $eformContent.append($eform);
            return $externalform.append($eformHeader).append($eformContent);;
        },
        _buttonClick: function (e) {
            if (e.type == "close") {
                if (!this.model.isEdit)
                    return;
                this.model.isEdit = false;
                this.element.ejGrid("cancelEdit");
                this.refreshToolbar();
                return;
            }
            if ((e.keyCode !== undefined && e.keyCode != 13 && e.keyCode != 0) || this.model == null)
                return true;
            if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                if (e.target.id == "EditDialog_" + this._id + "_Save") 
                    this.element.ejGrid("endEdit");
                 else if (e.target.id == "EditDialog_" + this._id + "_Cancel") {
                    this.element.ejGrid("cancelEdit");
                    $("#" + this._id + "_dialogEdit").ejDialog("close");
                }
            }
            else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                if ($(e.target).hasClass("e-form-toggle-icon")) {
                    this.element.ejGrid("cancelEdit");
                    $("#" + this._id + "_externalEdit").css("display", "none");
                }
                else {
                    if (e.target.id == "EditExternalForm_" + this._id + "_Save") {
                        if (this.element.ejGrid("endEdit").length !== undefined)
                            $("#" + this._id + "_externalEdit").css("display", "none");
                    } else if (e.target.id == "EditExternalForm_" + this._id + "_Cancel") {
                        this.element.ejGrid("cancelEdit");
                        $("#" + this._id + "_externalEdit").css("display", "none");
                    }
                }
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                if (e.target.id == "InlineEditForm_" + this._id + "_Save")
                    this.element.ejGrid("endEdit");
                else if (e.target.id == "InlineEditForm_" + this._id + "_Cancel")
                    this.element.ejGrid("cancelEdit");
            }
            else
                this.element.ejGrid("cancelEdit");
        },
        _enableEditingEvents: function () {
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                if (this.model.editSettings.allowEditing && this.model.editSettings.editMode != "batch" && this.model.editSettings.allowEditOnDblClick) 
                    this._on(this.element, ($.isFunction($.fn.doubletap) && this.model.enableTouch) ? "doubletap" : "dblclick", ".e-gridcontent", this._editdblClickHandler);
                else {
                    this._off(this.element, "dblclick", ".e-gridcontent");
                    this._off(this.element, "doubletap", ".e-gridcontent");
                }
                this._off($("#" + this._id + "_dialogEdit"), "click ", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel");
                this._off($("#" + this._id + "_externalEdit"), "click ", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel");
                $(this.element).off("click", ".e-form-toggle-icon");
                $(this.element).off("click ", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel");
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    this._on($("#" + this._id + "_dialogEdit"), "click ", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel", this._buttonClick);
                }
                else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                    this._on($("#" + this._id + "_externalEdit"), "click ", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel", this._buttonClick);
                    $(this.element).on("click", ".e-form-toggle-icon", $.proxy(this._buttonClick, this));
                }
                else if (this.model.editSettings.editMode == "batch") {
                    this._on($(document), "touchstart mousedown", this._saveCellHandler);
					this._batchEnabled = true;
				}

                else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")
                    $(this.element).on("click ", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel", $.proxy(this._buttonClick, this));
				
				if (this.model.editSettings.editMode != "batch" && this._batchEnabled) {
				    this._off($(document), "touchstart mousedown", this._saveCellHandler);
					this._batchEnabled = false;
				}

            } else {
                this._off($("#" + this._id + "_dialogEdit"), "click", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel");
                $(this.element).off("click", ".e-icon");
                this._off($("#" + this._id + "_externalEdit"), "click", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel");
                $(this.element).off("click", ".e-form-toggle-icon");
                $(this.element).off("click", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel");
            }
        },
        _multiRowDelete: function () {
            var changes = {};
            changes.added = []; changes.deleted = [], changes.changed = [];
            changes.deleted = this.getSelectedRecords();
            var args = {};
			args.data = this.getSelectedRecords();
            args.tr = this.getSelectedRows();
            var foreignKeyData = this._getForeignKeyData(args.data);
            if (!ej.isNullOrUndefined(foreignKeyData))
                args.foreignKeyData = foreignKeyData;
                args.requestType = "delete";
            if (this._trigger("actionBegin", args))
                return true;
            var gridObject = this;
            this._sendBulkReuqest(changes, args);
        },
        deleteRow: function ($tr) {
            if (!this.model.editSettings.allowDeleting || (this.model.isEdit && this.model.editSettings.editMode != "batch" && !this.model.editSettings.showAddNewRow))
                return;
            if (this.model.editSettings.showDeleteConfirmDialog && !(this._confirmDialog).is(":visible")) {
                this._cDeleteData = $tr;
                this._confirmDialog.find(".e-content").html(this.localizedLabels.ConfirmDelete).end().ejDialog("open");
                return;
            }
            if ($.isArray($tr)) {
                this.selectRows($tr);
                this._multiRowDelete();
            }
            else {
                if (this.model.editSettings.editMode == "batch")
                    this._bulkDelete(this.getIndexByRow($tr));
                else {
                    if (this._primaryKeys.length == 0 && !this.model.editSettings.allowEditing && !this.model.editSettings.allowAdding) {
                        for (var i = 0; i < this.model.columns.length; i++) {
                            if (this.model.columns[i]["isPrimaryKey"] === true) {
                                this._primaryKeys.push($.trim(this.model.columns[i].field));
                                this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
                            }
                        }
                    }
                    if (this._selectedRow() == -1 && ej.isNullOrUndefined($tr)) {
                        alert(this.localizedLabels.DeleteOperationAlert);
                        return;
                    }
                    if (ej.isNullOrUndefined($tr))
                        $tr = this.model.scrollSettings.enableVirtualization ? this.getContentTable().find("tr[aria-selected='true']") : this.getRowByIndex(this._selectedRow());
                    this._primaryKeyValues = [];
                    this._getPrimaryKeyValues($tr);
                    var deleteManager = ej.DataManager(this._currentJsonData);
                    var query = new ej.Query();
                    for (var i = 0; i < this._primaryKeys.length; i++)
                        query = query.where(this._primaryKeys[i], ej.FilterOperators.equal, this._primaryKeyValues[i]);
                    var currentData = deleteManager.executeLocal(query);
                    var args = {};
                    args.tr = $tr;
                    args.data = args.rowData = currentData[0];
                    var foreignKeyData = this._getForeignKeyData(args.data);
                    if (!ej.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    args.requestType = ej.Grid.Actions.Delete;
                    if (this._trigger("actionBegin", args))
                        return true;
                    this._cDeleteData = currentData;
                    var promise;
                    if (!(ej.isOnWebForms && this.model.serverEvents && this.model.serverEvents.indexOf("endDelete") != -1) && this._dataSource() instanceof ej.DataManager && (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json !== undefined) || (this._dataSource().adaptor instanceof ej.remoteSaveAdaptor)) {
                        promise = this._dataManager.remove(this._primaryKeys[0], this._primaryKeys.length ? ej.getObject(this._primaryKeys[0], currentData[0]) : null, this.model.query);
                        var proxy = this;
                        if ($.isFunction(promise.promise)) {
                            promise.done(function (e) {
                                proxy._processBindings(args);
                                proxy._primaryKeyValues = [];
                                proxy._cDeleteData = null;
                            });
                            promise.fail(function (e) {
                                args.error = e;
                                proxy._cDeleteData = null;
                                proxy._trigger("actionFailure", args)
                            });
                        } else
                            this._processBindings(args);
                    } else
                        this._processBindings(args);
                    if (promise == undefined || !$.isFunction(promise.promise)) {
                        this._primaryKeyValues = [];
                        this._cDeleteData = null;
                    }
                }
            }
        },
        
        _htmlEncode: function (html) {
            var str = html;
            if (!ej.isNullOrUndefined(str))
                str = isNaN(str) ? str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, '\'') : str;
            return str;
        },
        startEdit: function ($tr) {
		    if (!this.model.editSettings.allowEditing || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal" && this._excludeDetailRows().hasClass("e-editedrow")))
		        return;
		    if (this.element.ejWaitingPopup("model.showOnInit"))
		        return;
            if (this._selectedRow() == -1 && ej.isNullOrUndefined($tr)) {
                alert(this.localizedLabels.EditOperationAlert);
                return;
            }
            if (this.model.scrollSettings.enableVirtualization && ej.isNullOrUndefined($tr))
                $tr = this.getContentTable().find("tr[aria-selected='true']");
            if (ej.isNullOrUndefined($tr)) {
                this._currentTrIndex = this._selectedRow();
                this._$currentTr = this.getRowByIndex(this._currentTrIndex);
            } else {
                this._currentTrIndex = this.getIndexByRow($tr);
                this._$currentTr = $tr;
            }
            if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization)
                this._currentTrIndex = this._currentTrIndex % this.model.pageSettings.pageSize;
            if (!$(this._$currentTr).is(":visible"))
                return false;
            this._primaryKeyValues = [];
            this._getPrimaryKeyValues(this._$currentTr);
            var editedData = this._editedData = this._currentJsonData[this._currentTrIndex];
            var args = { row: this._$currentTr, rowIndex: this._currentTrIndex, primaryKey: this._primaryKeys, primaryKeyValue: this._primaryKeyValues, rowData: editedData };
            var cancel = this._trigger("beginEdit", args);
            if (cancel) {
                this._primaryKeyValues = [];
                return;
            }
            args.requestType = ej.Grid.Actions.BeginEdit;
            this._processBindings(args);

        },
        _getPrimaryKeyValues: function ($tr) {
            var trIndex, pkVal, nameAttr = $tr.attr("name"), column, virtualIndex, lastPageVal, isLastPage = false;
            this._lastVirtualPage = null;
            for (var index = 0; index < this._primaryKeys.length; index++) {
                column = this.getColumnByField(this._primaryKeys[index]);
                trIndex = this.getIndexByRow($tr);
                pkVal = this._currentJsonData;
                if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling) {
                    if (!this.model.scrollSettings.enableVirtualization) {
                        trIndex = trIndex % this.model.pageSettings.pageSize;
                        virtualIndex = parseFloat(nameAttr) / this.model.pageSettings.pageSize + 1;
                        this._currentJsonData = this._virtualLoadedRecords[virtualIndex];
                        if (virtualIndex == this.model.pageSettings.totalPages && !this._prevPageRendered && this._virtualLoadedRecords[virtualIndex].length != this.model.pageSettings.pageSize) {
                            pkVal = $.extend(true, [], this._previousPageRecords);
                            lastPageVal = $.extend(true, [], this._virtualLoadedRecords[virtualIndex]);
                            ej.merge(pkVal, lastPageVal);
                            this._lastVirtualPage = this._currentJsonData = $.extend(true, [], pkVal);
                            isLastPage = true;
                        }

                    }
                    else {
                        trIndex = trIndex % this._virtualRowCount;
                        virtualIndex = parseInt(nameAttr, 32);
                    }
                    pkVal = isLastPage ? pkVal : this._virtualLoadedRecords[virtualIndex];
                    this._vCurrentTrIndex = trIndex;
                    this._currentVIndex = virtualIndex;
                }
                this._primaryKeyValues.push(this._htmlEncode(ej.getObject(column.field, pkVal[trIndex])));
            }
        },
         _startAdd: function() {
            if (!this.model.editSettings.allowAdding)
                return;
			this._isAddNew = true;
            if (this.model.editSettings.editMode == "batch")
                this._bulkAddRow();
            else {
                var cloneData = {}, cols = this.model.columns;
                for (var i = 0; i < cols.length; i++) {
                    if (!ej.isNullOrUndefined(this.model.parentDetails) && cols[i].field == this.model.parentDetails.parentKeyField)
                        cols[i].defaultValue = this.model.parentDetails.parentKeyFieldValue;
                    if (!ej.isNullOrUndefined(cols[i].field) && cols[i].field.indexOf(".") > 0)
                        ej.createObject(cols[i].field, cols[i].defaultValue || "", cloneData);
                    else
                        cloneData[cols[i].field] = !ej.isNullOrUndefined(cols[i].defaultValue) ? cols[i].defaultValue : (cols[i].type == "date" || cols[i].type == "datetime") ? null : "";
                }
                var args = {}, complexObject = {};
                args.data = args.rowData = cloneData;
                if (this.model.editSettings.editMode.indexOf('template') != -1) {
                    for (var i = 0; i < this.model.columns.length; i++) {
                        if (!ej.isNullOrUndefined(this.model.columns[i].field) && this.model.columns[i].field.indexOf(".") != -1) {
                            var splits = this.model.columns[i].field.split('.');
                            ej.createObject(this.model.columns[i].field, args.data[this.model.columns[i].field], complexObject);
                            args.data[splits[0]] = complexObject;
                            delete args.data[this.model.columns[i].field];
                        }
                    }
                }
                var foreignKeyData = this._getForeignKeyData(args.data);
                if (!ej.isNullOrUndefined(foreignKeyData))
                    args.foreignKeyData = foreignKeyData;
                args.requestType = "add";
                if (!this._enableCheckSelect || !this._isMapSelection)
                    this.clearSelection();
				if(this.model.selectionSettings.selectionMode.indexOf('cell') != -1)
					this.clearCellSelection();
                if (this.model.scrollSettings.allowVirtualScrolling) {
                    this._currentVIndex = null;
                    this._lastVirtualPage = null;
                    if (this.model.scrollSettings.enableVirtualization)
                        this._refreshVirtualView(1);
                    else
                        !this._virtualLoadedRecords[1] ? this.gotoPage(1) : this._currentPage(1);
                    this.getScrollObject().scrollY(0);
                }
                var returnValue = this._processBindings(args);
                if (!returnValue)
                    this.model.editSettings.showAddNewRow ? this._selectedRow(-1) : this._selectedRow(0);
                var groupedColumns = this.model.groupSettings.groupedColumns.length;
                if (groupedColumns > 1) {
                    var $editCol = this.getContentTable().find(".e-addedrow").find("table").find("colgroup").children();
                    $($editCol.slice(0, groupedColumns - 1)).css('width', this.getHeaderTable().find('colgroup').children()[0].style.width);
                }
            }
        },
        
        endEdit: function () {
            if (this.model.isEdit) {
                var formElement, $formElement, editedTr, count = 0;
                if (!this.editFormValidate())
                    return true;
                var obj = {};
                var editedRowWrap, type;
                if (this.model.editSettings.editMode == "batch")
                    this.saveCell();
                else {
					if(this._isAddNew|| this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineformtemplate" ||this.model.editSettings.editMode == "dialogtemplate" )
						this._isEditChangesApplied = true
					if(this.model.editSettings.showAddNewRow)
						editedTr = this.getContentTable().find(".e-editedrow");
                    formElement = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr[0].lastChild.lastChild: document.getElementById(this._id + "EditForm");
                    $formElement = $(formElement);
                    if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")
                        editedRowWrap = $formElement.closest('tr');
                    else
                        editedRowWrap = $formElement.closest('div');
                    editedRowWrap.find('td.e-rowcell').removeClass('e-validError');
                    formElement = this.model.scrollSettings.frozenColumns > 0 ? formElement[0] : formElement;
                    for (var index = 0; index < formElement.length; index++) {
                        if (editedRowWrap.hasClass("e-addedrow") && $(formElement[index]).hasClass("e-identity"))
                            continue;
                        var columnName = formElement[index].name, $element = $(formElement[index]), column = this.getColumnByField(columnName);
                        if ($element.hasClass("e-dropdownlist e-input") && $element.attr("id").indexOf("_input") != -1 && ej.isNullOrUndefined($formElement[1]))
                            continue;
                        if (columnName != undefined) {
                            if (columnName != "" && obj[columnName] == null) {
                                column = this.getColumnByField(columnName);
                                var  value = formElement[index].value, checkType = formElement[index].type, checkState = $(formElement[index]).is(':checked'),
                                    type = column ? column.originalType : null,colFormat;
                                if ($(formElement[index]).attr("type") == "hidden" && ej.isNullOrUndefined($element.attr("value")))
                                    continue;
                                if (!ej.isNullOrUndefined(column) && (column.editType == "edittemplate")) {
									this._isEditChangesApplied = true;
                                    var isHidden = $(formElement[index]).attr("type") == "hidden";
                                    if ($(formElement[index]).is("#" + this._id + columnName) || isHidden || $(formElement[index]).attr("name") == columnName) {
                                        var temp1 = column.editTemplate.read; $element = $(formElement[index]);
                                        $element = isHidden ? $(formElement[index]).siblings("#" + this._id + columnName).length ? $(formElement[index]).siblings("#" + this._id + columnName) : $element : $element;
                                        if (typeof temp1 == "string")
                                            temp1 = ej.util.getObject(temp1, window);
                                        value = temp1($element);
                                       }
                                    else
                                        continue;
                                }
                                else if ($(formElement[index]).hasClass("e-datepicker e-js")) {
                                    value = $element.ejDatePicker("model.value");
                                    if (!this._isEditChangesApplied) {
                                        colFormat = !ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.format) ? column.format : "{0:MM/dd/yyyy}";
                                        if (this.formatting(colFormat, value, this.model.locale) != this.formatting(colFormat, this._editedData[columnName], this.model.locale))
                                            this._isEditChangesApplied = true;
                                    }
                                }
                                else if ($(formElement[index]).hasClass("e-datetimepicker e-js")) {
                                    value = $element.ejDateTimePicker("model.value");
                                    if (!this._isEditChangesApplied) {
                                        colFormat = !ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.format) ? column.format : "{0:MM/dd/yyyy hh:mm:ss}";
                                        if (this.formatting(colFormat, value, this.model.locale) != this.formatting(colFormat, this._editedData[columnName], this.model.locale))
                                            this._isEditChangesApplied = true;
                                    }
                                }
                                else if ($element.is(".e-numerictextbox e-js")) {
                                    value = $element.ejNumericTextbox("getValue");
                                    if (!ej.isNullOrUndefined(column) && column.type == "string" && !ej.isNullOrUndefined(value))
                                        value = value.toString();
                                    if (!this._isEditChangesApplied && this._editedData[columnName] != value)
                                        this._isEditChangesApplied = true;
								}
                                else if ($element.data("ejDropDownList") || $element.is(".e-dropdownlist")) {
                                    if ($element.is(":hidden") && $element.is("input") && ej.isNullOrUndefined($element.data("ejDropDownList")))
                                        $element = $element.siblings(".e-dropdownlist");
                                    value = $element.ejDropDownList("getSelectedValue");
                                    if (!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.format) && (column.type == "date" || column.type == "datetime"))
                                        value = value.length > 0 ? new Date(value) : value;
                                    if (!this._isEditChangesApplied && this._editedData[columnName] != value)
                                        this._isEditChangesApplied = true;
                                
								}
                                if (type)
                                    value = type == "number" ? +value : type == "boolean" ? (value === this.localizedLabels.True ? true : false) : type === "date" ? new Date(value) : value;
                                if (column == null)
                                    value = !isNaN(parseFloat(value)) && isFinite(value) ? parseFloat(value) : value;
                                else if (column.type == "number" && !ej.isNullOrUndefined(value) && value.length) {
                                    value = ej.parseFloat(value, this.model.locale);
                                    if (!this._isEditChangesApplied && this._editedData[columnName] != value)
                                        this._isEditChangesApplied = true;
                                }
                                if (typeof value == "string" && !value.length)
                                    value = null;
                                if (!this._isEditChangesApplied && (!ej.isNullOrUndefined(column)&& column.type=="string")  && this._editedData[columnName] != value)
                                    this._isEditChangesApplied = true;
                                 if(!this._isEditChangesApplied && (!ej.isNullOrUndefined(column)&& column.type=="date" && column.editType == 'stringedit')){	
                                     if (column.format != null && this.formatting(column.format, this._editedData[columnName], this.model.locale) != value)
											this._isEditChangesApplied = true;
								}
								if ((checkType != "checkbox" && !ej.isNullOrUndefined(value) && value !== "") || checkState)
                                    count++;
                                var originalvalue;
                                if (checkType != "checkbox" || (!ej.isNullOrUndefined(column) && column.type != "boolean" && column.type != "checkbox"))
                                    originalvalue = value;
                                else
                                    originalvalue = checkState;
                                if (!this._isEditChangesApplied && (!ej.isNullOrUndefined(column) && (column.type == "boolean" || column.type == "checkbox"))) {
									  var colValue =  checkType == "checkbox" ?checkState :  JSON.parse(value);
									  if( this._editedData[columnName] != colValue)
										this._isEditChangesApplied = true;
                                }
                                if (!this._isEditChangesApplied && typeof originalvalue == "string" && typeof this._editedData[columnName] == "string" && this._editedData[columnName] != originalvalue)
                                    this._isEditChangesApplied = true;
                                if (!this._isEditChangesApplied && (!ej.isNullOrUndefined(column) && column.type == "object")) {
                                    var editVal = typeof (value) == "object" ? JSON.stringify(value) : value;
                                    var OrgDbVal = typeof (this._editedData[columnName]) == "object" ? JSON.stringify(this._editedData[columnName]) : this._editedData[columnName];
                                    if(editVal != OrgDbVal )
                                        this._isEditChangesApplied = true;
                                }
                                if (columnName.indexOf(".") != -1)
                                ej.createObject(columnName, originalvalue, obj);
                            else
                                obj[columnName] = originalvalue;
                            }
                        }
                        if (index == formElement.length - 1 && $formElement.length > 1 && $formElement.index(formElement) == 0) {
                            formElement = $formElement[1];
                            index = -1;
                        }

                    }
                    var args = { data: obj, rowData: obj };
                    var foreignKeyData = this._getForeignKeyData(args.data);
                    if (!ej.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    args.requestType = ej.Grid.Actions.Save;
                    args.selectedRow = this._selectedRow();
                    args.previousData = jQuery.extend({}, this.model.currentViewData[args.selectedRow]);
                    var currentData;
                    if (this._trigger("actionBegin", args))
                        return true;
                    if (editedRowWrap.hasClass("e-editedrow")) {
                        this._cModifiedData = obj;
                        args.action = "edit";
                    } else if (editedRowWrap.hasClass("e-addedrow")) {
                        if (count)
                            this._cAddedRecord = obj;
                        args.action = "add";
                    }
                    if (args.action == "add" && this.editFormValidate()) {
                        if (!ej.isNullOrUndefined(this.model.queryString)) {
                            var keyField = this.model.foreignKeyField || this.model.queryString;
                            args.data[keyField] = this.model.parentDetails.parentRowData[this.model.queryString]
                        }
                        if (!count) {
                            var elements = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
                            var error = ej.buildTag("div");
                            elements.addClass("field-validation-empty");
                            var element = elements.find("input:visible").not(".e-identity").first();
                            this._renderValidator(error, element);
                            error.width("auto");
                            var $errorMessage = ej.buildTag("div.e-field-validation-error", this.localizedLabels.EmptyRowValidationMessage),
                            $tail = $(error).find(".e-errortail");
                            $errorMessage.insertAfter($tail);
                            $errorMessage.css("display", "block");
                            return false;
                        }
                    }
                    if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                        $("#" + this._id + "_externalEdit").css("display", "none");
                    if (!this._isAddNew && !this._isEditChangesApplied)
                        this.cancelEdit();
                    else {
                        this._isEditChangesApplied = false;
                        this._updateAction(args);
                    }
                }
            }
        },
        _updateAction: function (args) {
            var promise;
            if (this._dataSource() instanceof ej.DataManager && (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json !== undefined) || (this._dataSource().adaptor instanceof ej.remoteSaveAdaptor) || this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) {
                if (this.model.editSettings.editMode == 'batch') {
                    this.batchChanges.added.push(args.data);
                    this.batchSave();
                }
                else {
                    if (!ej.isNullOrUndefined(this._cModifiedData) && !(ej.isOnWebForms && this.model.serverEvents && this.model.serverEvents.indexOf("endEdit") != -1))
                        promise = this._dataManager.update(this._primaryKeys[0], args.data, this.model.query);
                    else if (!(ej.isOnWebForms && this.model.serverEvents && this.model.serverEvents.indexOf("endAdd") != -1))
                        promise = this._dataManager.insert(args.data, this.model.query);
                    var proxy = this;
                    this.element.ejWaitingPopup("show");
                    if (promise && $.isFunction(promise.promise)) {
                        promise.done(function (e) {
                            proxy.model.isEdit = false;
                            if (!ej.isNullOrUndefined(e) && $.isPlainObject(e.record)) {
                                $.extend(args.data, e.record);
                                if (args.action == "add")
                                    proxy._cAddedRecord = args.data;
                                if (args.action == "edit")
                                    proxy._cModifiedData = args.data;
                            }
                            proxy._processBindings(args);
                            if (proxy._isRemoteSaveAdaptor) {
                                proxy.element.ejWaitingPopup("hide");
                                if (!ej.isNullOrUndefined(proxy._unboundRow) && args.selectedRow != proxy._unboundRow && args.requestType == "save") {
                                    proxy._unboundRow.find(".e-editbutton").trigger("click");
                                    proxy._unboundRow = null;
                                }
                            }
                            proxy._cModifiedData = null;
                            proxy._cAddedRecord = null;
                            proxy._primaryKeyValues = [];
                        });
                        promise.fail(function (e) {
                            args.error = (e && e.error) ? e.error : e;
                            proxy._cModifiedData = null;
                            proxy._cAddedRecord = null;
                            proxy.element.ejWaitingPopup("hide");
							if (proxy.model.editSettings.editMode == "externalform" || proxy.model.editSettings.editMode == "externalformtemplate")
								$("#" + proxy._id + "_externalEdit").css("display", "block");
                            proxy._trigger("actionFailure", args)
                        });
                    } else {
                        proxy.model.isEdit = false;
                        proxy._processBindings(args);
                    }
                }
            } else
                this._processBindings(args);
            if (promise == undefined || !$.isFunction(promise.promise)) {
                this._cModifiedData = null;
                this._cAddedRecord = null;
                this._primaryKeyValues = [];
            }
        },
        
        cancelEdit: function () {
            var args = {};
            args.requestType = ej.Grid.Actions.Cancel;
            this._cModifiedData = null;
            this._processBindings(args);
            this._primaryKeyValues = [];
            this._currentData = null;
            if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                $("#" + this._id + "_externalEdit").css("display", "none");
        },
        
        refreshToolbar: function () {
            var $toolbar = $("#" + this._id + "_toolbarItems");
            var lis = $toolbar.find("li");
            $toolbar.ejToolbar("enableItem", lis);
			var editedTr = this.getContentTable().find(".e-editedrow");
			if(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal" && editedTr.length==0)
				this._disabledToolItems.push(lis.filter('[id='+this._id+'_add]'));
			else
			{
			    for (var i = 0; i < lis.length; i++) {
			        switch (lis[i].id) {
			            case this._id + "_add":
			            case this._id + "_edit":
			            case this._id + "_delete":
			            case this._id + "_responsiveFilter":
			            case this._id + "_responsiveSorting":
			            case this._id + "_search":
			                if (this.model.isEdit) {
			                    if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal") || editedTr.length != 0) {
			                        $(lis[i]).hasClass("e-hover") && $(lis[i]).removeClass("e-hover");
			                        this._disabledToolItems.push(lis[i]);
			                    }
			                }
			                else if (!this.model.enableToolbarItems && !this.model.editSettings.allowAdding && lis[i].id == this._id + "_add")
			                        this._disabledToolItems.push(lis[i]);
                            else if (!this.model.enableToolbarItems && !this.model.editSettings.allowEditing && lis[i].id == this._id + "_edit")
                                    this._disabledToolItems.push(lis[i]);
                            else if (!this.model.enableToolbarItems && !this.model.editSettings.allowDeleting && lis[i].id == this._id + "_delete")
                                    this._disabledToolItems.push(lis[i]);
			                break;
			            case this._id + "_update":
			            case this._id + "_cancel":
			                if (!this.model.isEdit && (this.getContentTable().find(".e-updatedtd.e-icon.e-gupdatenotify").length == 0 && !this._isBatchDeleteApplied)) {
			                    $(lis[i]).hasClass("e-hover") && $(lis[i]).removeClass("e-hover");
			                    this._disabledToolItems.push(lis[i]);
			                }
			                break;
			        }
			    }
			}
            $toolbar.ejToolbar("disableItem", this._disabledToolItems);
            $toolbar.ejToolbar("model.enableRTL", this.model.enableRTL);
            this._disabledToolItems = $();

        },
        _getHiddenCount: function (elements) {
            var count = 0;
            for (var i = 0; i < elements.length; i++) {
                if (elements.eq(i).hasClass("e-hide"))
                    count++;
            }
            return count;
        },
        _refreshTemplateCell: function (temp, data) {
            var tempcell = temp.find('.e-templatecell');
			for(var i =0; i< tempcell.length;i++){						
				var args = { cell: tempcell[i], data: data, column: this.model.columns[$(tempcell[i]).index()], rowIndex: temp.index()};
				this._trigger("templateRefresh", args);	
			}			
        },
        _edit: function (args) {
            var editingManager = this.model.scrollSettings.enableVirtualization ? ej.DataManager(this._virtualLoadedRecords[this._currentVIndex]) : ej.DataManager(this._currentJsonData), $tempFirstTR;
            var queryManager = new ej.Query(), templateID, ngType;
            if (this.model.allowFiltering)
                this._previousFilterCount = this._filteredRecordsCount;
            for (var index = 0; index < this._primaryKeys.length; index++)
                queryManager = queryManager.where(this._primaryKeys[index], ej.FilterOperators.equal, this._primaryKeyValues[index]);
            this._currentData = editingManager.executeLocal(queryManager);
            var temp = document.createElement('div');
            var formTitle = !ej.isNullOrUndefined(this.model.editSettings.titleColumn) ? this.model.editSettings.titleColumn : this._primaryKeys[0];
            var $temp = $(temp), $tempSecondTR, $tempFirstTR;
            if (this.model.editSettings.editMode == "normal") {
                temp.innerHTML = ['<table>', $.render[this._id + "_JSONEditingTemplate"](this._currentData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
                var $tr = $temp.find("tr").first(), detailCount = 0, firstHidden = this.model.columns.length
                , $currentTrFr = args.row.first(), $currentTrLa, $tempLastTR;
                if (this.model.scrollSettings.frozenColumns > 0) {
                    $temp.prepend(['<table>', $.render[this._id + "_JSONFrozenEditingTemplate"](this._currentData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join(""));
                    $tr.splice(0, 0, $temp.find("table").first().find("tr").first().get(0));
                    $currentTrLa = args.row.last();
                    $tempLastTR = $tr.last();
                }
                $tempFirstTR = $temp.find("tr").first();
                $temp.find('td').not(".e-rowcell").addClass("e-editcell e-normaledit");
                this._setEditDropdownValue($temp);
                if (this.model.groupSettings.groupedColumns.length >= 2) {
                    var $indentCell = args.row.find("td.e-indentcell");
                    $temp.find("tr").first().prepend($indentCell);
                }
                if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                    detailCount++;                    
                    $temp.find(".e-editcell").find("tr").prepend(args.row.find("[class*=e-detailrow]").eq(0).removeClass("e-selectionbackground e-active"));
                    if (this.model.gridLines != "both")
                        $temp.find(".e-editcell .e-rowcell:first").addClass("e-detailrowvisible");
                }
                if (this.model.scrollSettings.frozenColumns > 0) {
                    $temp.find(".e-editcell").get(1).colSpan = this.model.columns.length - this.model.scrollSettings.frozenColumns - args.row.last().find(".e-hide").length + detailCount;
                    firstHidden = this.model.scrollSettings.frozenColumns;
                    $currentTrLa.hasClass("e-alt_row") && $tempLastTR.addClass("e-alt_row")
                }
                $temp.find(".e-editcell").get(0).colSpan = firstHidden - $currentTrFr.find("td").not(":visible").length + detailCount;
                $currentTrFr.hasClass("e-alt_row") && $tempFirstTR.addClass("e-alt_row");                
                $currentTrFr.empty().replaceWith($tempFirstTR.addClass("e-editedrow"));
                args.row = $tempFirstTR;
                if (!$tempFirstTR.is(":last-child"))
                    $tempFirstTR.find('td.e-rowcell').addClass('e-validError');
                if (this.model.scrollSettings.frozenColumns > 0) {
                    $currentTrLa.empty().replaceWith($tempLastTR.addClass("e-editedrow"));
                    args.row = $tempLastTR;
                }
                this._refreshUnboundTemplate($tr.find(".gridform"));
                if(this.model.scrollSettings.frozenColumns == 0){
				   if (this.model.detailsTemplate != null || this.model.childGrid != null)
					   this._gridRows = this._excludeDetailRows();
				   else
					   this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row, tr.e-editedrow").toArray();
				}
				else
					this._gridRows = $(this.getContentTable().get(0).rows).toArray();                 
                if (this.model.scrollSettings.frozenColumns > 0) {
					this.getScrollObject().scrollY(this.getScrollObject().model.scrollTop, true);
                    this._gridRows = [this._gridRows, $(this.getContentTable().get(1).rows).toArray()];
				}
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                var detailCount = 0;
                if (this.model.editSettings.editMode == "inlineformtemplate") {
                    templateID = this.model.editSettings.inlineFormTemplateID;
                    ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (templateID.startsWith("#") || templateID.startsWith(".") || typeof templateID === "object") ? this.model.ngTemplateId + "gridedittemplate" : null;
                } 
                temp.innerHTML = this.model.editSettings.editMode == "inlineform" ? $.render[this._id + "_JSONDialogEditingTemplate"](this._currentData) : this._renderEjTemplate(this.model.editSettings.inlineFormTemplateID, this._currentData[0], args.rowIndex, null, ngType);
                if (this.model.editSettings.editMode == "inlineformtemplate") {
                    temp.innerHTML = this._appendForm(temp.innerHTML);
                }
				this._setEditDropdownValue($temp);
                var tr = ej.buildTag('tr');
                var td = ej.buildTag('td');
                tr.addClass("e-editedrow");
                td.addClass("e-inlineformedit");
                temp = $(temp).clone(true).children();
                td.html(temp);
                tr.append(td);
                if (!tr.is(":last-child"))
                    tr.find('.e-rowcell').addClass('e-validError');
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var $trClone = tr.clone();
                    $trClone.find("td").empty().prop("colspan", this.model.scrollSettings.frozenColumns);
                    args.row.eq(1).after(tr).end().eq(0).after($trClone);
                    this._gridRows = [this._gridRows, this.getContentTable().last().find("tr").toArray()];
                }
                else
                    args.row.after(tr);
				if (this.model.detailsTemplate != null || this.model.childGrid != null){
					this._gridRows = this._excludeDetailRows();
					detailCount++;
				}
				else
					this._gridRows = this.getContentTable().first().find(".e-rowcell,.e-inlineformedit").closest("tr").toArray();
                if (this.model.scrollSettings.frozenColumns > 0)
                    td.prop("colspan", this.model.columns.length - this.model.scrollSettings.frozenColumns - tr.find("form").children().not(":visible").length + detailCount);
                else
                    td.prop("colspan", this.model.columns.length - this._hiddenColumns.length + detailCount);
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find("tr").toArray()];
                $("#" + this._id + "_inlineFormTitle").text(this.localizedLabels.EditFormTitle + this._currentData[0][formTitle]);
                args.row.find("input").attr('disabled', 'disabled').addClass("e-disable");
            }
            else {
                $temp.addClass("e-editedrow");
                if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate") {
                    templateID = this.model.editSettings.editMode == "dialogtemplate" ? this.model.editSettings.dialogEditorTemplateID : this.model.editSettings.externalFormTemplateID;
                    ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (templateID.startsWith("#") || templateID.startsWith(".") || typeof templateID === "object") ? this.model.ngTemplateId + "gridedittemplate" : null;
                }
                temp.innerHTML = this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ? $.render[this._id + "_JSONDialogEditingTemplate"](this._currentData) : this._renderEjTemplate(templateID, this._currentData[0], args.rowIndex, null, ngType);
                if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate") {
                    temp.innerHTML = this._appendForm(temp.innerHTML);
                }
                this._setEditDropdownValue($temp);
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    $("#" + this._id + "_dialogEdit").html($(temp));
                    var model = {};
                    model.cssClass = this.model.cssClass;
                    model.enableRTL = this.model.enableRTL;
                    model.width = "auto";
                    model.enableResize = this.phoneMode;
                    model.close = $.proxy(this._buttonClick, this);
                    model.content = "#" + this._id;
                    model.enableModal = true;
                    model.allowKeyboardNavigation = false;
                    model.title = this.localizedLabels.EditFormTitle + this._currentData[0][formTitle];
                    $("#" + this._id + "_dialogEdit").ejDialog(model);
                    $("#" + this._id + "_dialogEdit").ejDialog("open");
                }
                else {
                    $("#" + this._id + "_externalEdit").css("display", "block").css('z-index', this._maxZindex() + 1);
                    $("#" + this._id + "_externalForm").find(".e-externalformedit").html($(temp));
                    $("#" + this._id + "_eFormHeader").find(".e-form-title").text(this.localizedLabels.EditFormTitle + this._currentData[0][formTitle]);
                    this._externalFormPosition();
                    args.row.find("input").attr('disabled', 'disabled').addClass("e-disable");
                }
            }
            if (this.model.editSettings.editMode != "normal")
                $tempFirstTR = $(temp);
			if(!ej.isNullOrUndefined(this.model.templateRefresh) && $tempFirstTR.find(".e-templatecell").length != 0) 
				this._refreshTemplateCell($tempFirstTR, this.model.currentViewData[$tempFirstTR.index()]);
        },
        _appendForm: function (temp) {
            var $form = ej.buildTag('form.gridform', "", {}, { id: this._id + "EditForm" });
            $form.addClass("e-display");
            var $tbody = ej.buildTag('div', "", { 'display': 'none' });
            $form.html(temp);
            $tbody = this.renderDiaglogButton($form, $tbody);
            return $tbody.html();
        },
        _setEditDropdownValue: function ($temp) {
            var $select = $temp.find("select.e-field"), x, inputDrop = $temp.find("input.e-field.e-dropdownlist");
            for (var i = 0; i < $select.length; i++) {
                var ddlTemplate = {}, opPara = "";
                if ($select[i].name.indexOf('.') != -1) {
                    for (var j = 1; j < $select[i].name.split(".").length; j++)
                        opPara = opPara.concat("(");
                    ddlTemplate[this._id + "ddlTemp"] = "{{:" + opPara + "#data['" + $select[i].name.split('.').join("'] || {})['") + "']}}";
                }
                else
                    ddlTemplate[this._id + "ddlTemp"] = "{{:" + $select[i].name.replace(/[^a-z0-9\s_]/gi, '') + "}}"
                $.templates(ddlTemplate);
                x = $.render[this._id + "ddlTemp"](this._currentData);
                var $selOptions = $temp.find('select:eq(' + i + ') option[value="' + x + '"]');
                $select.eq(i).data("ej-value", x);
                var curColumn = this.getColumnByField($select[i].name);
                if (this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor && this._dataSource().adaptor.value.indexOf(curColumn.field) != -1){
				    $selOptions = $temp.find('select:eq(' + i + ') option:contains("' + x + '")');
				    $select.eq(i).val($selOptions[0].value);
				    $select.eq(i).data("ej-value", $selOptions[0].value);
				}
                $selOptions.attr("selected", "selected");
            }
            for (var j = 0; j < inputDrop.length; j++) {
                inputDrop.eq(j).data("ej-value", ej.getObject(inputDrop.eq(j).attr("name"), this._currentData[0]));
            }
        },
        _add: function (args) {
            var temp = document.createElement('div'), $editTr, templateID, ngType;
            if (this._isLocalData && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)
                !(this._dataSource() instanceof ej.DataManager) ? this._dataSource().splice(0, 1) : this._dataSource().dataSource.json.splice(0, 1);
            this._previousFilterCount = this._filteredRecordsCount;
            if (this.model.editSettings.editMode == "normal") {
                var $tempFirstTR, $temp = $(temp), frozenColSpan = this.model.columns.length, $tempLastTR;
                temp.innerHTML = ['<table>', $.render[this._id + "_JSONEditingTemplate"](args.data, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
                var $select = $(temp).find('select.e-field');
                for (var i = 0; i < $select.length; i++) {
                    $select.eq(i).val(args.data[$select[i].name]);
                    $select.eq(i).data('ej-value', args.data[$select[i].name]);
                }
                if (this.model.scrollSettings.frozenColumns > 0) {
                    $tempLastTR = $temp.find("table").first().find("tr").first();
                    $temp.prepend(['<table>', $.render[this._id + "_JSONFrozenEditingTemplate"](args.data, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join(""));
					$($tempLastTR).find("td").first().addClass("e-editcell");
                }
                $tempFirstTR = $temp.find("tr").first();
                var td = $(temp).find(".e-editcell").get(0);
                $(temp).find('td').first().addClass("e-editcell");
                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this._currentJsonData.length && this.model.groupSettings.groupedColumns.length == 0 && !this.model.editSettings.showAddNewRow)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $(this.getContentTable().get(0).lastChild.lastChild).children('.e-detailrowexpand').length)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                if ((this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0) && this.model.scrollSettings.frozenColumns == 0) {
                    this.getContentTable().find('tr').first().replaceWith($(temp).find("tr").first().addClass("e-addedrow e-normaledit"));
					if(this.getContentTable().find('tr').length == 0) 
						this.getContentTable().append($(temp).find("tr").first().addClass("e-addedrow e-normaledit"));
				}
                else {
                    if (this.model.scrollSettings.frozenColumns > 0)
                        this._renderByFrozenDesign();
					var  $contentTbody = this.getContentTable().first().find('tbody').first();
                    if (this.model.editSettings.rowPosition == "top")
                        $contentTbody.prepend($tempFirstTR.addClass("e-addedrow e-normaledit"));
                    else if (this.model.editSettings.rowPosition == "bottom")
                        $contentTbody.append($tempFirstTR.addClass("e-addedrow e-normaledit"));
                    if (this.model.scrollSettings.frozenColumns > 0)
                        this.getContentTable().last().find('tbody').first().prepend($tempLastTR.addClass("e-addedrow e-normaledit"));
                }
                $editTr = this.getContentTable().find("tr.e-addedrow");
                if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling)
                    $editTr.attr("name", 0);
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    $editTr.find('tr').first().prepend(ej.buildTag('td.e-detailrowcollapse'));
                if (this.model.groupSettings.groupedColumns.length) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                        if (i == 0)
                            $editTr.prepend(ej.buildTag("td.e-indentcell"));
                        else {
                            $editTr.find("tr").prepend(ej.buildTag("td.e-indentcell"));
                        }
                    }
                    if (this.model.groupSettings.groupedColumns.length > 0 && (this.model.detailsTemplate != null || this.model.childGrid != null))
                        $editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length + (this.model.groupSettings.groupedColumns.length) - this._hiddenColumns.length));
                    else if (this.model.groupSettings.groupedColumns.length >= 2)
                        $editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length + (this.model.groupSettings.groupedColumns.length - 1) - this._hiddenColumns.length));
                    else
                        $editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length));
                } else if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    $editTr.find(".e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length + 1));
                else {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        $editTr.find(".e-editcell").last().prop("colspan", (this.model.columns.length - this.model.scrollSettings.frozenColumns - this._hiddenColumns.length));
                        frozenColSpan = this.model.scrollSettings.frozenColumns;
                    }
                    $editTr.find(".e-editcell").first().prop("colspan", (frozenColSpan - this._hiddenColumns.length));

                }
                if (!$editTr.is(":last-child"))
                    $editTr.find('td.e-rowcell').addClass('e-validError');
                if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "msie" && this.model.editSettings.rowPosition == "bottom")
					this._colgroupRefresh();
                this._refreshUnboundTemplate($editTr.find(".gridform"));
                this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray();
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray()];
            }
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                if (this.model.editSettings.editMode == "inlineformtemplate") {
                    templateID = this.model.editSettings.inlineFormTemplateID;
                    ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (templateID.startsWith("#") || templateID.startsWith(".") || typeof templateID === "object") ? this.model.ngTemplateId + "gridedittemplate" : null;
                }
                temp.innerHTML = this.model.editSettings.editMode == "inlineform" ? $.render[this._id + "_JSONDialogEditingTemplate"](args.data) : this._renderEjTemplate(this.model.editSettings.inlineFormTemplateID, args.data, 0, null, ngType);
                if (this.model.editSettings.editMode == "inlineformtemplate") {
                    temp.innerHTML = this._appendForm(temp.innerHTML);
                }
                var detailCount = 0;
                var tr = ej.buildTag('tr');
                var td = ej.buildTag('td');
                tr.addClass("e-addedrow");
                td.addClass("e-inlineformedit e-editcell");
                temp = $(temp).clone(true).children();
				var $select = $(temp).find('select.e-field');
                for (var i = 0; i < $select.length; i++){
                    $select.eq(i).val(args.data[$select[i].name]);
                    $select.eq(i).data('ej-value', args.data[$select[i].name]);
                    }
                td.html(temp);
                tr.append(td);
                if (!tr.is(":last-child"))
                    tr.find('.e-rowcell').addClass('e-validError');
                if (this.model.groupSettings.groupedColumns.length) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                        tr.prepend(ej.buildTag("td.e-indentcell"));
                    }
                } else
                    tr.find("td.e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length));
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var $trClone = tr.clone(), $divs = td.find(".gridform").children();
                    $trClone.find("td").empty().prop("colSpan", this.model.scrollSettings.frozenColumns - this._getHiddenCount($divs.slice(0, this.model.scrollSettings.frozenColumns)));
                    td.prop("colSpan", this.model.columns.length - this.model.scrollSettings.frozenColumns - this._getHiddenCount($divs.slice(this.model.scrollSettings.frozenColumns)));
                    if (this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0)
                        this._renderByFrozenDesign();
                    this.getContentTable().first().find('tbody').first().prepend($trClone);
                    this.getContentTable().last().find('tbody').first().prepend(tr);
                }
                else {
					if (this.model.detailsTemplate != null || this.model.childGrid != null)
                        detailCount++;
                    td.prop("colspan", this.model.columns.length - this._hiddenColumns.length + detailCount);
                    if (this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0)
                        this.getContentTable().find('tr').first().replaceWith($(tr));
                    else
                        if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && this.model.groupSettings.groupedColumns.length == 0)
                            this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                    if (this.model.editSettings.rowPosition == "top")
                        this.getContentTable().first().find('tbody').first().prepend(tr);
                    else if (this.model.editSettings.rowPosition == "bottom")
                        this.getContentTable().first().find('tbody').first().append(tr);
                }
                
                if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $(this.getContentTable().get(0).lastChild.lastChild).children('.e-detailrowexpand').length)
                    this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                $("#" + this._id + "_inlineFormTitle").text(this.localizedLabels.AddFormTitle);
                this._refreshUnboundTemplate($("#" + this._id + "EditForm"));
                this._gridRows = this.getContentTable().first().find(".e-rowcell,.e-inlineformedit").closest("tr.e-row, tr.e-alt_row").toArray();
                if (this.model.scrollSettings.frozenColumns > 0)
                    this._gridRows = [this._gridRows, this.getContentTable().last().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray()];
            }
            else {
                $(temp).addClass("e-addedrow");
                if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate") {
                    templateID = this.model.editSettings.editMode == "dialogtemplate" ? this.model.editSettings.dialogEditorTemplateID : this.model.editSettings.externalFormTemplateID;
                    ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (templateID.startsWith("#") || templateID.startsWith(".") || typeof templateID === "object") ? this.model.ngTemplateId + "gridedittemplate" : null;
                }   
                temp.innerHTML = this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ? $.render[this._id + "_JSONDialogEditingTemplate"](args.data) : this._renderEjTemplate(templateID, args.data, 0, null, ngType);
                if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate") {
                    temp.innerHTML = this._appendForm(temp.innerHTML);
                }
                var $select = $(temp).find('select.e-field');
                for (var i = 0; i < $select.length; i++){
                    $select.eq(i).val(args.data[$select[i].name]);
                    $select.eq(i).data('ej-value', args.data[$select[i].name]);
                    }
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
                    $("#" + this._id + "_dialogEdit").html($(temp));
                    var model = {};
                    model.cssClass = this.model.cssClass;
                    model.width = "auto";
                    model.enableResize = this.phoneMode;
                    model.content = "#" + this._id;
                    model.enableModal = true;
                    model.close = $.proxy(this._buttonClick, this);
                    model.enableRTL = this.model.enableRTL;
                    model.allowKeyboardNavigation = false;
                    model.title = this.localizedLabels.AddFormTitle;
                    $("#" + this._id + "_dialogEdit").ejDialog(model);
                    $("#" + this._id + "_dialogEdit").ejDialog("open");
                }
                else {
                    $("#" + this._id + "_externalEdit").css("display", "block").css('z-index', this._maxZindex() + 1);
                    $("#" + this._id + "_externalForm").find(".e-externalformedit").html($(temp));
                    $("#" + this._id + "_eFormHeader").find(".e-form-title").text(this.localizedLabels.AddFormTitle);
                    this._externalFormPosition();
                }
            }
            if (this.model.editSettings.editMode != "normal")
                $editTr = $(temp);
			if(!ej.isNullOrUndefined(this.model.templateRefresh) && $editTr.find(".e-templatecell").length != 0) 
				this._refreshTemplateCell($editTr, args.data);
            if (this.model.allowPaging) {
                if (this.model.filterSettings.filteredColumns.length)
                    this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
                else
                    this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
                this._refreshGridPager();
            }
        },
        editFormValidate: function () {
            if ($.isFunction($.validator)) {
                if (this.model.scrollSettings.frozenColumns > 0) {
                    var forms = this.element.find(".gridform");
                    if (forms.length > 1) {
                        var form1, form2;
                        form1 = forms.eq(0).validate().form();
                        form2 = forms.eq(1).validate().form();
                        if (!(form1 && form2))
                            return false;
                        else
                            return true;
                    }
                    else
                        return forms.validate().form();
                }
                else if (this.model.editSettings.showAddNewRow) {
                   return $(this.getRows()).hasClass("e-editedrow") ? this.element.find(".e-editedrow .gridform").validate().form() : this.element.find(".e-addedrow .gridform").validate().form();
                }
                return $("#" + this._id + "EditForm").validate().form();
            }
            return true;
        },
        _refreshAltRow: function () {
            var $gridRows = this._excludeDetailRows();
            for (var r = 0; r < $gridRows.length; r++) {
                var $row = $($gridRows[r]);
                $row.hasClass("e-alt_row") && $row.removeClass("e-alt_row");
                (r % 2 != 0) ? $row.addClass("e-alt_row") : $row.addClass("e-row")
            }
        },
        _editCompleteAction: function (args) {
            var $form = this.element.find(".gridform");
            this.model.isEdit = true;
            var $cols1 = this.getContentTable().children("colgroup").find("col");
            var width = this.element.width()
            this.setWidthToColumns();
            if (ej.Grid.Actions.Add == args.requestType) {
                var disabledElements = $form.find(".e-field:disabled");
                for (var j = 0; j < disabledElements.length; j++) {
                    var fieldName = $(disabledElements[j]).attr("name");
                    if (!$(disabledElements[j]).hasClass("e-identity"))
                        if ($.inArray(fieldName, this._disabledEditableColumns) == -1 || $.inArray(fieldName, this._primaryKeys) !== -1)
                            $(disabledElements[j]).prop("disabled",false).removeClass("e-disable");
                }
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length - 1; i++)
                    $form.find("colgroup").prepend(this._getIndentCol());
            }
            if (this._tdsOffsetWidth.length == 0 || this.model.groupSettings.groupedColumns.length || $.inArray(0, this._tdsOffsetWidth) != -1 || this._hiddenColumns.length > 0)
                this._setoffsetWidth();
            this._refreshEditForm(args);
            if (this.model.scrollSettings.frozenColumns > 0 && (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")) {
                if (args.requestType == "beginedit")
                    args.row.eq(0).next().find("td").height(args.row.eq(1).next().find("td").height());
                else
                    this.getContentTable().first().find("tr").first().find("td").height(this.getContentTable().last().find("tr").first().find("td").height());
            }
            if (this.model.scrollSettings.frozenRows > 0 && args.requestType == "beginedit"){
				this._initFrozenRows();
				if (ej.getObject("_vScrollbar._scrollData", this.getScrollObject()))
					this.getScrollObject()._vScrollbar._scrollData.skipChange = true;
			}
            if (this.model.scrollSettings.frozenColumns > 0) {
                this.rowHeightRefresh();
                this._refreshScroller(args);
            }
            if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns <= 0 && this.getScrollObject()
                && this.getScrollObject().isHScroll())
                this.getScrollObject().refresh();
        },
        _refreshEditForm: function (args) {
			var editedTr; 
			if(this.model.editSettings.showAddNewRow)
				editedTr = this.getContentTable().find(".e-editedrow");
            var form = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr[0].lastChild.lastChild : document.getElementById(this._id + "EditForm");
            var elementFocused = false, columnIndex, matchMedia;
            if (this.model.enableResponsiveRow && $.isFunction(window.matchMedia))
                matchMedia = window.matchMedia("(max-width: 320px)");
            var $formElement = $(form).find("input,select,div.e-field,textarea"), percent = 86;
            if ((this._isUnboundColumn || this.getContentTable().find(".e-templatecell") != null) && this.model.editSettings.editMode != "batch")
                $formElement = $formElement.filter(function () { return (!$(this).closest(".e-rowcell").hasClass("e-unboundcell") && !$(this).closest(".e-rowcell").hasClass("e-templatecell")) })
            var focusEle = null;
            for (var i = 0; i < $formElement.length; i++) {
                var $element = $formElement.eq(i);
                var inputWidth, column = this.getColumnByField(!ej.isNullOrUndefined($element.prop("name")) ? $element.prop("name") : $element.attr("name"));
                if (column != null)
                    columnIndex = $.inArray(column, this.model.columns);
                if (this.model.editSettings.editMode == "batch") {
                    percent = 95;
                }
                else if (this.model.editSettings.editMode == "normal")
                    percent = 96;
                if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                    $element.parent().css("width", ej.dataUtil.max(this._tdsOffsetWidth) + "px");
                    inputWidth = ej.max(this._tdsOffsetWidth) * (percent / 100);
                }
                else
                    inputWidth = this._tdsOffsetWidth[i] * (percent / 100);
                if ((this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch" || this.model.allowResizing || this.model.allowResizeToFit) && !$element.hasClass("e-checkbox"))
                    inputWidth = "100%";
                if (column !=null && columnIndex !== undefined && (columnIndex < this.model.columns.length && this.model.columns[columnIndex].editTemplate)) {
                    var temp = { rowdata: args.rowData, column: this.model.columns, element: $element, requestType: args.requestType, type: args.type };
                    var temp1 = this.model.columns[columnIndex].editTemplate.write;                    
                    if (typeof temp1 == "string")
                        temp1 = ej.util.getObject(temp1, window);
                    temp1(temp);
					if(this.model.columns[columnIndex].isPrimaryKey && args.requestType == "beginedit")
						$element.addClass("e-disable").attr("disabled", "disabled");
                }
                else if ($element.hasClass("e-numerictextbox e-js") || $element.hasClass("e-datepicker e-js") || $element.hasClass("e-datetimepicker e-js") || $element.hasClass("e-dropdownlist")) {
                    var customParams = this.getColumnByField($element.prop("name")), value = $element.val();
                    if ((!ej.isNullOrUndefined(matchMedia) && matchMedia.matches) || customParams["width"] && typeof customParams["width"] == "string" && customParams["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
                        inputWidth = "100%";
                    $element.css("width", inputWidth);
                    if ($element.hasClass("e-numerictextbox e-js")) {

                        if (value.length)
                            $element.attr("value", parseFloat(value));
                        $element.prop("name", $element.prop("name").replace(this._id, ""));
                    }
                    if ($element.hasClass("e-disable"))
                        $element.attr("disabled", "disabled");
                }
				 else if ($element.hasClass("e-save e-button") || $element.hasClass("e-cancel e-button") )
					 $element.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, width: "100","text-align":"centre",height:"35px"});
                    //else if ($element.hasClass("checkbox"))
                    //{
                    //    var value = $element.prop("checked");
                    //    $element.ejCheckBox({
                    //        id: $element[0].id,
                    //        checked: value
                    //    });
                    //}
                else {
                    switch ($element.prop('tagName')) {
                        case "INPUT":
                            if (!ej.isNullOrUndefined(column) && column.format && $element.val() != "") {
                                switch (column.type) {
                                    case ("date" || "datetime"):
                                        var value = $element.val();
                                        var date = new Date(value);
                                        var format = column.format.replace("{0:", "").replace("}", "");
                                        var newformat = ej.format(date, format, this.model.locale);
                                        $element.val(newformat);
                                        break;
                                    case "number":
                                        var value = $element.val();
                                        var format = new RegExp("\\{0(:([^\\}]+))?\\}", "gm").exec(column.format);
										if(format!=null){
											format[2].toLowerCase().split("")[0] == "c" ? format[2] = format[2].toLowerCase().replace("c", "n") : format[2];
											$element.val(ej.format(parseFloat(value), format[2], this.model.locale));
										}
                                        break;
                                }
                            }
                            if ($element.attr("type") != "checkbox") {
                                $element.css("text-align", $element.attr("name") != null && this.getColumnByField($element.attr("name")) != null ?
                                this.getColumnByField($element.attr("name")).textAlign : "center");
                                if (this.model.editSettings.editMode == "batch"){
                                    $element.css('width', '100%').css("height", "28px");
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
									   $element.css("line-height", "22px");
							    }
                                else if (this.model.editSettings.editMode == "normal"){
                                    $element.css('width', '100%').css("height", "30px");
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
									   $element.css("line-height", "24px");
								}	
                                else{
                                    $element.outerWidth(inputWidth).height(28);
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
									   $element.css("line-height", "26px");
								}

                            }
                            else
                                $element.width(inputWidth > 0 ? ($element.width() > inputWidth ? inputWidth : $element.width()) : this.model.editSettings.editMode.indexOf("template") != -1 ? $element.width() : 1);
								if(this.model.editSettings.editMode == "batch" && !this._tabKey && !this._enterKey)
									$element.is(':checked') ? $element.prop("checked",false) : $element.prop("checked",true);
                            break;
                        case "SELECT":
                            $element.width(inputWidth).height(28);
                            break;
                    }
                }
                if (column != null && !column.visible && column.validationRules && !(this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineformtemplate")){				
					$element.addClass("e-hide");
				}
                if (!$element.is(":disabled") && !elementFocused && (!$element.is(":hidden") || typeof ($element.data("ejDropDownList") || $element.data("ejNumericTextbox")) == "object")) {
                    focusEle = $element;
                    elementFocused = true;
                }
            }
            var params2 = {};
            params2.enableRTL = this.model.enableRTL;
            params2.cssClass = this.model.cssClass;
            params2.watermarkText = this.localizedLabels.NumericTextBoxWaterMark;
            params2.locale = this.model.locale;
            $formElement.filter(".e-numerictextbox.e-js").ejNumericTextbox($.extend({ showSpinButton: true }, params2));
            params2.watermarkText = this.localizedLabels.DatePickerWaterMark;
            $formElement.filter(".e-datepicker.e-js").ejDatePicker($.extend({ displayDefaultDate: true, showPopupButton: false }, params2));
            delete params2["watermarkText"];

            $formElement.filter(".e-datetimepicker.e-js").ejDateTimePicker($.extend({ showPopupButton: false }, params2));
            $formElement.filter(".e-dropdownlist").ejDropDownList($.extend({ enableIncrementalSearch: true, htmlAttributes: {style: "width: 100%"} }, params2));
            for (var i = 0; i < this.model.columns.length; i++) {
                var col = this.model.columns[i];
                if (!ej.isNullOrUndefined(col.editParams)) {
                    var field = col.field;
                    field = /^[a-zA-Z0-9- ]*$/.test(field) ? field : field.replace(/[^a-z0-9\s_]/gi, '');

                    switch (col.editType) {
                        case ej.Grid.EditingType.DateTimePicker:
                            $formElement.filter("#" + this._id + field + ".e-datetimepicker.e-js").ejDateTimePicker(col.editParams);
                            break;
                        case ej.Grid.EditingType.DatePicker:
                            $formElement.filter("#" + this._id + field + ".e-datepicker.e-js").ejDatePicker(col.editParams);
                            break;
                        case ej.Grid.EditingType.Numeric:
                            $formElement.filter("#" + this._id + field + ".e-numerictextbox.e-js").ejNumericTextbox(col.editParams);
                            break;
                        case ej.Grid.EditingType.Dropdown:
                            $formElement.filter("#" + this._id + field + ".e-dropdownlist").ejDropDownList(col.editParams);
                            break;
                    }
                }

                if (col.editType == ej.Grid.EditingType.Dropdown) {
                    var f_index = -1;
                    if (this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor)
                        f_index = this._dataSource().adaptor.value.indexOf(col.field)
                    var ele = $formElement.filter("#" + this._id + col.field.replace(/[^a-z0-9\s_]/gi, "") + ".e-dropdownlist");
                    var dataSource = null;
                    if (!ej.isNullOrUndefined(col.dataSource) && !ej.isNullOrUndefined(col.editParams) && ej.isNullOrUndefined(col.foreignKeyField) && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor && f_index != -1)
                        dataSource = col.dataSource;
                    else if (ej.isNullOrUndefined(col.dataSource) && f_index != -1 && !ej.isNullOrUndefined(col.editParams))
                        dataSource = this._dataSource().adaptor.foreignData[f_index];
                    else if (!ej.isNullOrUndefined(col.editParams) && 'fields' in col.editParams && ej.isNullOrUndefined(col.foreignKeyField))
                        dataSource = col.dataSource; //when field is present in 'editParams' then dataSource is needed.
                    if (dataSource != null)
                        ele.ejDropDownList({ dataSource: dataSource });
                    var val = ele.data("ej-value");
                    if ((this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) && f_index != -1 && !ej.isNullOrUndefined(col.editParams))
                        ele.ejDropDownList("setSelectedText", args.requestType == "add" && ej.isNullOrUndefined(col.defaultValue) && ej.isNullOrUndefined(val) ? ele.val("") : val);
                    else
                        ele.ejDropDownList("setSelectedValue", args.requestType == "add" && ej.isNullOrUndefined(col.defaultValue) && ej.isNullOrUndefined(val) ? ele.val("") : val);
                    if (col != null && !col.visible && col.validationRules && !(this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineformtemplate")) {
                        if (col.editType == ej.Grid.EditingType.Dropdown)
                            ele.closest(".e-rowcell").find("input").addClass("e-hide");
                    }
                }
                var format = null;
                if (col["format"] !== undefined && (col.format.length > 0)) {
                    var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                    var formatVal = toformat.exec(col.format);
					if(formatVal!=null)
						format = formatVal[2];
                }

                if ([ej.Grid.EditingType.DatePicker, ej.Grid.EditingType.DateTimePicker].indexOf(col.editType) != -1) {
                    var picker = col.editType == ej.Grid.EditingType.DatePicker ? "datePicker" : "dateTimePicker";
                    var pickerControl = "ej" + picker.replace(/\b\w/g, function (m) { return m.toUpperCase(); });
                    var eleID = this._id + col.field;
                    var dateElement = $formElement.filter(function (e, k) { return k.id == eleID && ($(k).hasClass("e-datepicker") || $(k).hasClass("e-datetimepicker")); });
                    var dateParams = {};
                    if (format != null && !(!ej.isNullOrUndefined(col["editParams"]) && (col["editParams"].dateFormat || col["editParams"].dateTimeFormat)))
                        dateParams[picker.replace("Picker", "") + "Format"] = format;
                    if (dateElement.hasClass("e-disable")) dateParams["enabled"] = false;
                    dateElement[pickerControl](dateParams);
					if (this.model.editSettings.editMode == "batch")
					{
					  setTimeout(function(){
						  dateElement[pickerControl]("show");
					  });
					}
                }
            }
			if ($.isFunction($.validator) && this.model.editSettings.editMode != "batch")
                this.initValidator();
            if (focusEle != null) {
                this._focusElements(focusEle);
            }
        },
        _focusElements: function ($currentCell) {
            if ($currentCell.length) {
                var $childElem = $currentCell;
                if (($childElem[0].tagName.toLowerCase() == "select" && !$childElem.hasClass("e-field e-dropdownlist")) || ($childElem[0].tagName.toLowerCase() == "input") && !$childElem.hasClass("e-numerictextbox") && !$childElem.hasClass("e-datepicker")) {
                        $childElem.focus().select();
                        $childElem[0].focus();
			    }
                else if ($childElem.hasClass("e-field e-dropdownlist"))
                     $childElem.closest(".e-ddl").focus();
				else if ($childElem.hasClass('e-numerictextbox'))
					 $childElem.siblings('input:visible').first().select().focus();
                else
                    $childElem.find('input:visible,select').first().select().focus();
            }
        },
        _renderToolBar: function () {
            var $div = ej.buildTag('div.e-gridtoolbar', "", {}, { id: this._id + "_toolbarItems" });
            var $ul = ej.buildTag("ul");
            ((!ej.isNullOrUndefined(this.model.toolbarSettings.toolbarItems) && this.model.toolbarSettings.toolbarItems.length) || ((this.model.allowSorting || this.model.allowFiltering) && this.model.enableResponsiveRow)) && this._renderLi($ul);
            $div.append($ul);
            var $customUl = ej.buildTag("ul");
            $div.append($customUl);
            (!ej.isNullOrUndefined(this.model.toolbarSettings.customToolbarItems) && this.model.toolbarSettings.customToolbarItems.length) && this._renderCustomLi($customUl);
            var model = {};
            model.click = this._toolBarClick;
            model.cssClass = this.model.cssClass;
            model.enableRTL = this.model.enableRTL;
            model.enableSeprator = false;
            $div.ejToolbar(model);
            $div.ejToolbar("disableItem", this._disabledToolItems);
            this._disabledToolItems = $();
            return $div;
        },
        _renderCustomLi: function ($ul) {
            var $li; var customToolbar;
            for (var i = 0; i < this.model.toolbarSettings.customToolbarItems.length; i++) {
                customToolbar = this.model.toolbarSettings.customToolbarItems[i]["templateID"] ? this.model.toolbarSettings.customToolbarItems[i]["templateID"].replace("#", "") : this.model.toolbarSettings.customToolbarItems[i];
                $li = ej.buildTag("li", "", {}, { id: this._id + "_" + customToolbar, title: customToolbar });
                switch (typeof this.model.toolbarSettings.customToolbarItems[i]) {
                    case "string":
                        var $item = ej.buildTag("a.e-toolbaricons e-icon", "", {}).addClass(this.model.toolbarSettings.customToolbarItems[i]);
                        break;
                    case "object":
                        var templi = this.model.toolbarSettings.customToolbarItems[i];
                        $li.attr("title", !ej.isNullOrUndefined(templi["tooltip"]) ? templi["tooltip"] : templi["templateID"].replace("#", ""));
                        var $item = $(templi["templateID"]).hide().html();
                        break;
                }
                $li.html($item);
                $ul.append($li);
            }
        },
        _renderLi: function ($ul) {
            if ($.isFunction(window.matchMedia)) {
                if (this.model.enableResponsiveRow && this.phoneMode) {
                    var searchIndex = this.model.toolbarSettings.toolbarItems.indexOf('search');
                    searchIndex != -1 && this.model.toolbarSettings.toolbarItems.splice(searchIndex, 1);
                    if (this.model.allowFiltering)
                        this.model.toolbarSettings.toolbarItems.push('responsiveFilter');
                    if (this.model.allowSorting) {
                        this.model.toolbarSettings.toolbarItems.push('responsiveSorting');
                    }
                    searchIndex != -1 && this.model.toolbarSettings.toolbarItems.push('search');
                }
            }
            for (var i = 0; i < this.model.toolbarSettings.toolbarItems.length; i++) {
                var $li = ej.buildTag("li", "", {}, { id: this._id + "_" + this.model.toolbarSettings.toolbarItems[i], title: this.localizedLabels[this.model.toolbarSettings.toolbarItems[i].slice(0, 1).toUpperCase() + this.model.toolbarSettings.toolbarItems[i].slice(1)] });
                this._renderLiContent($li, this.model.toolbarSettings.toolbarItems[i]);
                var item = this.model.toolbarSettings.toolbarItems[i];
                if (this.model.enableResponsiveRow && (item === "responsiveFilter" || item === "responsiveSorting")) {
                    $li.addClass("e-gridresponsiveicons");
                    $li.css("display", "none");
                }
                $ul.append($li);
            }
        },
        _renderLiContent: function ($li, item) {
            var $a, $input, $div, $span;
            switch (item) {
                case "add":
                    $a = ej.buildTag("a.e-addnewitem e-toolbaricons e-icon e-addnew", "", {});
                    break;
                case "edit":
                    $a = ej.buildTag("a.e-edititem e-toolbaricons e-icon e-edit", "", {});
                    break;
                case "delete":
                    $a = ej.buildTag("a.e-deleteitem e-toolbaricons e-icon e-delete", "", {});
                    break;
                case "update":
                    $a = ej.buildTag("a.e-saveitem e-toolbaricons e-disabletool e-icon e-save", "", {});
                    this._disabledToolItems.push($li.get(0));
                    break;
                case "cancel":
                    $a = ej.buildTag("a.e-cancel e-toolbaricons e-disabletool e-icon e-gcancel", "", {});
                    this._disabledToolItems.push($li.get(0));
                    break;
				
                case "search":
                    $a = ej.buildTag("a.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", {});
                    if (!this.model.enableResponsiveRow || !this.phoneMode) {
                        $input = ej.buildTag("input.e-ejinputtext e-gridsearchbar", "", {}, { type: "text", id: this._id + "_searchbar" });
                        $span = ej.buildTag('span.e-cancel e-icon e-hide', "", { 'right': '1%' });
                        $div = ej.buildTag('div.e-filterdiv e-searchinputdiv', "", { 'display': 'inline-table', 'width': '85.5%' });
                        $div.append($input).append($span);
                        $li.append($div);
                        if (!ej.isNullOrUndefined(this.model.searchSettings.key))
                            $input.val(this.model.searchSettings.key);
                    }
                    this.model.allowSearching = true;
                    break;
				case "printGrid":
					 $a = ej.buildTag("a.e-print e-toolbaricons e-icon", "", {});
					 break;
                case "excelExport":
                    $a = ej.buildTag("a.e-toolbaricons e-excelIcon e-icon", "", {});
                    break;
                case "wordExport":
                    $a = ej.buildTag("a.e-toolbaricons e-wordIcon e-icon", "", {});
                    break;
                case "pdfExport":
                    $a = ej.buildTag("a.e-toolbaricons e-pdfIcon e-icon", "", {});
                    break;
                case "responsiveFilter":
                    $a = ej.buildTag("a.e-toolbaricons e-filterset e-icon", "", {});
                    break;
                case "responsiveSorting":
                    $a = ej.buildTag("a.e-toolbaricons e-respponsiveSorting e-icon", "", {});
                    break;
            }
            $li.append($a);
            if (item == "search"){
                this._searchBar = $li;
				$li.css('display','flex');
			}
        },
        _toolBarClick: function (Sender) {
            var $gridEle = $(this.itemsContainer).closest(".e-grid"), gridInstance = $gridEle.ejGrid("instance"), gridId = $gridEle.attr('id');
            if (Sender.event == undefined && Sender.target.tagName == "INPUT" && Sender.currentTarget.id == gridId + "_search")
                return;
            $.isFunction($.fn.ejDatePicker) && $("#" + gridId + "EditForm").find(".e-datepicker.e-js").ejDatePicker("hide");
            var currentTarget = Sender.currentTarget; var target = Sender.target;
            var gridModelClone = $.extend({}, gridInstance.model);
            if (gridInstance.ignoreOnToolbarServerClick.length) {
                for (var i = 0; i < gridInstance.ignoreOnToolbarServerClick.length; i++)
                    delete gridModelClone[gridInstance.ignoreOnToolbarServerClick[i]];
            }
            var args = { itemName: $(currentTarget).attr("data-content"), itemId: currentTarget.id, currentTarget: currentTarget, target: target, itemIndex: $(currentTarget).index(), itemCurrentTarget: currentTarget.outerHTML, gridModel: gridModelClone, itemTarget: target.outerHTML, toolbarData: Sender };
            if ($gridEle.ejGrid("instance")._trigger("toolbarClick", args))
                return;
            switch (args.itemId) {
                case gridId + "_add":
                    gridInstance._toolbarOperation(gridId + "_add");
                    break;
                case gridId + "_edit":
                    gridInstance._toolbarOperation(gridId + "_edit");
                    break;
                case gridId + "_delete":
                    gridInstance._toolbarOperation(gridId + "_delete");
                    break;
                case gridId + "_update":
                    gridInstance._toolbarOperation(gridId + "_update");
                    break;
                case gridId + "_cancel":
                    if (gridInstance.model.editSettings.editMode == "batch"){
                        if(gridInstance.model.editSettings.showConfirmDialog)
                             gridInstance._confirmDialog.find(".e-content").html(gridInstance.localizedLabels.CancelEdit).end().ejDialog("open");
                        else    
                             gridInstance.cancelEdit();
                    }
                    else
                        gridInstance._toolbarOperation(gridId + "_cancel");
                    break;
                case gridId + "_search":
                    if (gridInstance.model.enableResponsiveRow && gridInstance.phoneMode) {
                        if (ej.isNullOrUndefined(gridInstance.element.find('.e-responsesearch')[0])) {
                            var $div = ej.buildTag('div.e-gridtoolbar', "", {}, { id: this._id + "_toolbarItems" });
                            var $ul = ej.buildTag('div.e-responsesearch', '', { 'width': '95%', 'height': '38px', 'margin-top': '7px', 'margin-left': '6px' });
                            var $span = ej.buildTag('span.e-ttoltxt', '', { width: '98%', 'margin-left': '2%' }, { id: gridInstance._id + "_search" });
							var $a = ej.buildTag("span.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", { 'position': 'absolute', 'right': '2%', 'margin-top': '1%' });
                            if (ej.browserInfo().name === "webkit")
                                $a.css("margin-top", "-2px");
                            var $input = ej.buildTag("input.e-ejinputtext", "", { width: '97%', 'height': '30px' }, { type: "search", id: gridInstance._id + "_searchInput" });
                            if (!ej.isNullOrUndefined(gridInstance.model.searchSettings.key))
                                $input.val(gridInstance.model.searchSettings.key);
                            $span.append($input);
                            $span.append($a);
                            $ul.append($span);
                            $div.append($ul);
                            $div.ejToolbar({
                                click: function (sender) {
                                    gridInstance._toolbarOperation(gridId + "_search", $(sender.currentTarget).find("input").val(),Sender);
                                }
                            });
                            $input.on('keyup', function (e) {
                                if ($input.val() != '') {
                                    $a.removeClass('e-searchfind');
                                    $a.addClass('e-cancel')
                                }
                                else {
                                    $a.removeClass('e-cancel');
                                    $a.addClass('e-searchfind');
                                }
                            });
                            $a.click(function () {
                                if ($a.hasClass('e-cancel')) {
                                    $input.val('');
                                    $a.removeClass('e-cancel');
                                    $a.addClass('e-searchfind');
                                    gridInstance._toolbarOperation(gridId + "_search", $("#" + gridId + "_searchInput").val(),Sender);
                                }
                            })
                            $div.insertBefore(gridInstance.getHeaderContent());
                        }
                        else {
                            if (gridInstance.element.find('.e-responsesearch').css('display') == 'block')
                                gridInstance.element.find('.e-responsesearch').css('display', 'none');
                            else
                                gridInstance.element.find('.e-responsesearch').css('display', 'block');
                        }
                    }
                    else
                        gridInstance._toolbarOperation(gridId + "_search", $(Sender.target).hasClass("e-cancel") ? "" : $(Sender.currentTarget).find("input").val(),Sender);
                    break;
				case gridId + "_printGrid":
                    gridInstance._toolbarOperation(gridId + "_printGrid");
                    break;
                case gridId + "_excelExport":
                    gridInstance._toolbarOperation(gridId + "_excelExport");
                    break;
                case gridId + "_wordExport":
                    gridInstance._toolbarOperation(gridId + "_wordExport");
                    break;
                case gridId + "_pdfExport":
                    gridInstance._toolbarOperation(gridId + "_pdfExport");
                    break;
                case gridId + "_responsiveFilter":
                    gridInstance._toolbarOperation(gridId + "_responsiveFilter");
                    break;
                case gridId + "_responsiveSorting":
                    gridInstance._toolbarOperation(gridId + "_responsiveSorting");
                    break;
            }
            return false;
        },

        _toolbarOperation: function (operation, searchEle,args) {
            var $gridEle = this.element, gridObject = $gridEle.ejGrid("instance"), batchEnable = gridObject.model.editSettings.editMode == "batch", gridId = $gridEle.attr('id'), fieldName;
            gridObject._exportTo = gridObject["export"];
            switch (operation) {
                case gridId + "_add":
                    if (batchEnable)
                        gridObject._bulkAddRow();
                    else
                        gridObject._startAdd();
                    break;
                case gridId + "_edit":
                    if (batchEnable && gridObject.model.editSettings.allowEditing) {
					    if (gridObject._bulkEditCellDetails.columnIndex == -1) {
					        alert(this.localizedLabels.EditOperationAlert);
                            return;
                        }
                        fieldName = gridObject.model.columns[gridObject._bulkEditCellDetails.columnIndex].field;
                        fieldName && gridObject.editCell(gridObject._bulkEditCellDetails.rowIndex, fieldName);
                    }
                    else
                        gridObject.startEdit();
                    break;
                case gridId + "_delete":
                    if (this._selectedRow() == -1) {
                        alert(this.localizedLabels.DeleteOperationAlert);
                        return;
                    }
                    if (this.model.editSettings.showDeleteConfirmDialog)					     
						this._confirmDialog.find(".e-content").html(this.localizedLabels.ConfirmDelete).end().ejDialog("open");
                    else {
                        if (batchEnable)
                            this._bulkDelete()
                        else {
                            if (this.multiDeleteMode)
                                this._multiRowDelete();
                            else
                                this.deleteRow();
                        }
                    }
                    break;
                case gridId + "_update":
                    if (batchEnable && $("#" + this._id + "EditForm").children().find(".e-field-validation-error").length == 0)
                        this.model.editSettings.showConfirmDialog ? this._confirmDialog.find(".e-content").html(this.localizedLabels.BatchSaveConfirm).end().ejDialog("open") : this.batchSave();
                    else
                        gridObject.endEdit();
                    break;
                case gridId + "_cancel":
                    if (batchEnable) {
                        if ($("#" + gridId + "ConfirmDialog").ejDialog("isOpened") === true)
                            this._triggerConfirm();
                        else
                            gridObject.cancelEditCell();
                    }
                    else
                        gridObject.cancelEdit();
                    break;
                case gridId + "_search":
                    if (args.type == 'click' && (args.target.nodeName == "A" || args.target.nodeName == "SPAN"))
                        $gridEle.ejGrid("search", searchEle);
                    break;
				case gridId + "_printGrid":
                    this.print();
                    break;
                case gridId + "_excelExport":
                    gridObject._exportTo(gridObject.model.exportToExcelAction, 'excelExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_wordExport":
                    gridObject._exportTo(gridObject.model.exportToWordAction, 'wordExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_pdfExport":
                    gridObject._exportTo(gridObject.model.exportToPdfAction, 'pdfExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_responsiveFilter":
				    $("#"+gridObject._id+"responsiveFilter").css('display', 'block'),
                    setTimeout(function () { gridObject.element.css('display', 'none'),  0 });
                    break;
                case gridId + "_responsiveSorting":
                    this._sortColumns = []; this._removeSortCol = []
                    for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                        this._sortColumns.push({ field: this.model.sortSettings.sortedColumns[i].field, direction: this.model.sortSettings.sortedColumns[i].direction });
                    }
                    if (ej.isNullOrUndefined($("#"+this._id+"responsiveSort")[0])) {
                        var $dlg = $("#"+this._id+"responsiveFilter").clone().css('display', 'block');
                        $dlg.insertAfter(this.element);
                        $dlg.attr('id', this._id+'responsiveSort');
                        gridObject._setSortingButton();
                        var $btnDiv = ej.buildTag('div.btnContainer', '', { 'width': '100%', 'bottom': '0px','position' : 'absolute' });
                        var $inputOk = ej.buildTag('input.e-resposnsiveFilterBtnLeft e-flat e-btnsub', 'OK', { 'width': '45.6%' });
                        var $inputCancel = ej.buildTag('input.e-resposnsiveFilterBtnRight e-flat e-btncan', 'Cancel', { 'width': '46%' });
                        var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon');
                        var $cspanIcon = ej.buildTag('span.e-icon e-responsiveClose e-resIcon');
                        $dlg.find('.e-resFilterleftIcon').remove();
                        $dlg.find('.e-labelRes').text('Sorting');
                        $dlg.find('.e-resFilterDialogHeaderDiv').append($closeIcon.append($cspanIcon))
                        $dlg.find('.e-resFilterDialogHeaderDiv').find('.e-resFIlterRigthIcon').click(function (e) {
                            $("#"+gridObject._id+"responsiveSort").css('display', 'none');
                            gridObject.element.css('display', 'block');
                        })
                        var $divIcon = ej.buildTag('div.e-resFilterleftIcon', '', { 'margin-top': '3%' });
                        var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responsiveSortClear');
                        $divIcon.click(function () {
                            $dlg.find('.e-responsivefilterColDiv').find('.e-button').remove();
                            gridObject._setSortingButton(true);
                            for (var i = 0; i < gridObject._sortColumns.length; i++) {
                                if (gridObject._removeSortCol.indexOf(gridObject._sortColumns[i].field) == -1)
                                    gridObject._removeSortCol.push(gridObject._sortColumns[i].field);
                            }
                            gridObject._sortColumns = [];
							gridObject._removeSortCol = [];
                        });
                        $dlg.find('.e-resFilterDialogHeaderDiv').prepend($divIcon.append($spanIcon));
                        $dlg.css('height', $(window).height());
                        $dlg.append($btnDiv);
                        $btnDiv.append($inputOk).append($inputCancel);
                        $inputOk.ejButton({
                            text: 'OK', type: 'button',
                            click: $.proxy(this._resSortOperation, this)
                        })
                        $inputCancel.ejButton({
                            text: 'Cancel', type: 'button',
                            click: function () {
                                $("#"+gridObject._id+"responsiveSort").css('display', 'none');
                                gridObject.element.css('display', 'block');
                                gridObject._sortColumns = [];
                                $dlg.find('.e-responsivefilterColDiv').find('.e-button').remove();
                                gridObject._setSortingButton();
                            }
                        })
                    }
                    else {
                        $("#"+this._id+"responsiveSort").find('.e-responsivefilterColDiv').find('.e-button').remove();
                        this._setSortingButton();
                    }
                     $("#"+this._id+"responsiveSort").css('display', 'block');
                    $("#"+this._id+"responsiveSort").find('.e-responsivefilterColDiv').find('.e-filternone').remove();
					$("#"+this._id+"responsiveSort").css({'position':'relative'});
                    setTimeout(function () { gridObject.element.css('display', 'none'), 0 });
                    break;
            }
            return false;
        },
        _resSortOperation: function (sender) {
            var rCol=[];
			for(var i=0; i< this.model.sortSettings.sortedColumns.length;i++)
				rCol.push(this.model.sortSettings.sortedColumns[i].field);
            for (var i = 0; i < rCol.length; i++)
                this.removeSortedColumns(rCol[i]);
            for (var i = 0 ; i < this._sortColumns.length; i++) {
                if (this.model.allowMultiSorting)
                    this.multiSortRequest = true;
                this.sortColumn(this._sortColumns[i].field, this._sortColumns[i].direction);
            }
            $("#"+this._id+"responsiveSort").css('display', 'none');
            this.element.css('display', 'block');
        },
        _setSortingButton: function (clear) {
            var $sortDiv = $("#"+this._id+"responsiveSort");
            var gridObj = this;
            this._sortCols = [];
            if (ej.isNullOrUndefined($sortDiv.find('.e-responsivefilterColDiv').find('.e-button')[0])) {
                $sortDiv.find('.e-responsivefilterColDiv').each(function (index, object) {
                    var $btnDiv = ej.buildTag('div', '', { 'float': 'right', 'margin-right': '2%', 'margin-top': '-1%' })
                    var fieldName = $(object).attr('data-ej-mappingname');
                    var $but = ej.buildTag('button#' + gridObj._id+fieldName + ".e-sortingBtn e-flat", '');
                    $(object).append($btnDiv.append($but));
                    var btnText = 'None', icon = '';
                    if (!clear) {
                        for (var sortC = 0; sortC < gridObj.model.sortSettings.sortedColumns.length; sortC++) {
                            if (gridObj.model.sortSettings.sortedColumns[sortC].field == fieldName) {
                                btnText = gridObj.model.sortSettings.sortedColumns[sortC].direction == 'ascending' ? 'Ascending' : 'Descending';
                                icon = btnText == 'Ascending' ? 'e-resIcon e-respponsiveSortingAsc' : 'e-resIcon e-respponsiveSortingDesc';
                            }
                        }
                        if (icon != '') {
                            $but.ejButton({
                                text: btnText, type: 'button',
                                height: 28,
                                width: 120,
                                cssClass: 'e-resSortIconBtn',
                                id: fieldName,
                                prefixIcon: icon,
                                imagePosition: "imageright",
                                contentType: "textandimage",
                                showRoundedCorner: true,
                                click: $.proxy(gridObj._resSortButClick, gridObj)
                            })
                        }
                        else {
                            $but.ejButton({
                                text: btnText, type: 'button',
                                height: 28,
                                cssClass: 'e-resSortIconBtn',
                                width: 120,
                                id: fieldName,
                                showRoundedCorner: true,
                                click: $.proxy(gridObj._resSortButClick, gridObj)
                            })
                        }
                    }
                    else {
                        $but.ejButton({
                            text: btnText, type: 'button',
                            height: 28,
                            width: 120,
                            id: fieldName,
                            showRoundedCorner: true,
                            click: $.proxy(gridObj._resSortButClick, gridObj)
                        })
                    }
                });
            }
        },
        _sortOperation: function (field, direction) {
            if (this._removeSortCol.indexOf(field) != -1) {
                this._sortColumns.splice(this._removeSortCol.indexOf(field), 0);
				this._removeSortCol.splice(this._removeSortCol.indexOf(field), 0);
            }
            for (var column = 0; column < this._sortColumns.length; column++) {
                if (this._sortColumns[column]["field"] == field)
                    break;
            }
            if (this.model.allowMultiSorting) {
                this.multiSortRequest = true;
                if (column != -1) {
                    this._sortColumns.splice(column, 1);
					if (this._removeSortCol.indexOf(field) == -1)
						this._removeSortCol.push(field);
                }
            }
            else {
                $("#"+this._id+"responsiveFilter").find('.e-responsivefilterColDiv').find('.e-button').removeClass('e-disable');
                var $divColg = $("#"+this._id+"responsiveFilter").find('.e-responsivefilterColDiv').not(".e-responsivefilterColDiv[data-ej-mappingname='" + field + "']");
                var $btn = $divColg.find('.e-button').addClass('e-disable');
                $btn.text('None');
                if (this._sortColumns.length > 0) {
                    this._removeSortCol.push(this._sortColumns[0].field);
                    this._sortColumns = [];
                }
            }
            this._sortColumns.push({ field: field, direction: direction });
        },
        _resSortButClick: function (sender) {
            var text = '', prefixIcon = '', fieldName = sender.model.id;
            var obj = $("#" +this._id+ sender.model.id).ejButton('instance');
            if (sender.model.text == 'None') {
                text = 'Ascending';
                prefixIcon = 'e-resIcon e-respponsiveSortingAsc';
                this._sortOperation(fieldName, 'ascending');
            }
            else if (sender.model.text == 'Ascending') {
                text = 'Descending';
                prefixIcon = 'e-resIcon e-respponsiveSortingDesc';
                this._sortOperation(fieldName, 'descending');
            }
            else {
                obj.model.text = 'None';
                obj.model.prefixIcon = '';
                obj.type = 'button';
                obj.model.contentType = "text";
                obj._render();
                for (var column = 0; column < this._sortColumns.length; column++) {
                    if (this._sortColumns[column]["field"] == fieldName)
                        break;
                }
                this._removeSortCol.push(fieldName);
                this._sortColumns.splice(column, 1);
                $("#"+this._id+"responsiveFilter").find('.e-responsivefilterColDiv').find('.e-button').removeClass('e-disable');
                return;
            }
            obj.model.text = text; obj.model.prefixIcon = 'e-resIcon ' + prefixIcon; obj.model.imagePosition = "imageright";
            obj.model.contentType = "textandimage"; obj._render();
        },
        renderDiaglogButton: function (form, tbody) {
            var btnId;
            if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                btnId = "EditExternalForm_";
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                btnId = "InlineEditForm_";
                var inlineTitleBar = ej.buildTag("div", "", "", { id: this._id + "_inlineFormTitle", 'class': "e-inlineform-titlebar" });
                inlineTitleBar.appendTo(tbody);
                    }
					
            else
                btnId = "EditDialog_";
            var savebtn = ej.buildTag('input.e-save e-button e-btnsub e-flat', "", { 'margin-left': '30px' }, { type: "button", id: btnId + this._id + "_Save" });
            savebtn.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: this.localizedLabels.SaveButton, width: "100" });
            var cancelbtn = ej.buildTag('input.e-cancel e-button e-btncan e-flat', "", { 'margin-left': '19px', 'margin-right': '13px' }, { type: "button", id: btnId + this._id + "_Cancel" });
            cancelbtn.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: this.localizedLabels.CancelButton, width: "100" });
            var btnDiv = (this.model.editSettings.editMode != "dialog" && this.model.editSettings.editMode != "dialogtemplate") ? ej.buildTag('div', "", "", { 'class': "e-editform-btn" }) : ej.buildTag('div');
            btnDiv.append(savebtn);
            btnDiv.append(cancelbtn);
            form.appendTo(tbody);
            if (this.model.editSettings.editMode != "dialog" && this.model.editSettings.editMode != "dialogtemplate")
                btnDiv.appendTo(tbody);
            else
                form.append(btnDiv);
            return tbody;
        },
        _externalFormPosition: function () {
            var pos = $(this.element).offset();
            var width = $(this.element).width();
            var height = $(this.element).height();
            var DivElement = $("#" + this._id + "_externalEdit");
            switch (this.model.editSettings.formPosition) {
                case "topright":
                    $(DivElement).find('.e-form-toggle-icon').removeClass('e-bottomleft').addClass('e-topright');
                    $(DivElement).css({ "left": (pos.left + width + 1) + "px", "top": pos.top + "px", "position": "absolute", "width": "290px" });
                    $("#" + this._id + "_eFormContent").height("auto");
                    break;
                case "bottomleft":
                    $(DivElement).find('.e-form-toggle-icon').removeClass('e-topright').addClass('e-bottomleft');
                    $(DivElement).css({ "left": (pos.left) + "px", "top": (pos.top + height + 1) + "px" });
                    $("#" + this._id + "_eFormContent").width("100%");
                    break;
            }
        },
        _setoffsetWidth: function () {
            var tds, $form = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
            if (this._gridRecordsCount == 0 && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0 && this.model.editSettings.editMode != "batch" && (!($form.find(".e-checkbox").length > 0 && this._dataSource() instanceof ej.DataManager)))
                return;
            if (this.model.editSettings.editMode == "batch")
                tds = $form.closest("td");
            else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                tds = $form.find(".e-rowcell").not(".e-unboundcell,.e-templatecell");
            else
                tds = $form.find("tr").find(".e-rowcell").not(".e-unboundcell,.e-templatecell");
            for (var i = 0; i < tds.length; i++)
                this._tdsOffsetWidth[i] = tds.get(i).offsetWidth;
        },
        _bulkChangesAcquired: function () {
            if (this.batchChanges.added.length > 0 || this.batchChanges.changed.length || this.batchChanges.deleted.length)
                return true;
            return false;
        },
        _renderDialog: function () {
            var $dialog = ej.buildTag("div.e-dialog e-dialog-content e-shadow e-widget-content", "", { display: "none" }, { id: this._id + "_dialogEdit" });
            return $dialog;
        },
        
        getCurrentEditCellData: function () {
            if (this.model.isEdit && $("#" + this._id + "EditForm").length) {
                var $element = $("#" + this._id + this._bulkEditCellDetails.fieldName.replace(/[^a-z0-9\s_]/gi, '')), cellValue,
                    column = this.model.columns[this._bulkEditCellDetails.columnIndex], temp1;
                switch (this._bulkEditCellDetails.cellEditType) {
                    case ej.Grid.EditingType.String:
					case ej.Grid.EditingType.Numeric:
                        cellValue = $element.val();
                        break;                                          
                    case ej.Grid.EditingType.Dropdown:
                        cellValue = this._bulkEditCellDetails.isForeignKey ? { "value": $element.ejDropDownList("getSelectedValue"), "text": $element.ejDropDownList("getValue") } : $element.ejDropDownList("getSelectedValue");
                        if ( this._bulkEditCellDetails.isForeignKey && column.originalType == "number" && cellValue.value !="" )
							cellValue.value = JSON.parse(cellValue.value);
						break;
                    case ej.Grid.EditingType.Boolean:
                        cellValue = $element.is(':checked');
                        break;
                    case ej.Grid.EditingType.DatePicker:                       
                        var val = $.trim($element.val());
                        var dropObj = $element.ejDatePicker("instance");
                        dropObj._setDateValue(val);//to update dropdownlist model when manually entering value
                        cellValue = val == "" ? val : dropObj.model.value;
                        break;
                    case ej.Grid.EditingType.DateTimePicker:
                        cellValue = $.trim($element.val()) == "" ? $.trim($element.val()) :$element.ejDateTimePicker("model.value");
                        break;
                    case "edittemplate":
                        temp1 = column.editTemplate.read;
                        if (typeof temp1 == "string")
                            temp1 = ej.util.getObject(temp1, window);
                        cellValue = temp1($element);
                        break;
                }
                if (typeof cellValue == "string" && cellValue.length && column.type == "number")
                   cellValue = ej.globalize.parseFloat(cellValue,this.model.locale);
                return cellValue;
            }
            return null;
        },
        cancelEditCell: function () {
            if (this.model.isEdit) {
                var tr = this.getRows()[this._bulkEditCellDetails.rowIndex], cellData = {}, cell;
                ej.createObject(this._bulkEditCellDetails.fieldName, this._bulkEditCellDetails.cellValue, cellData);
                if ($(tr).hasClass("e-insertedrow"))
                    cell = $(tr).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex + this.model.groupSettings.groupedColumns.length);
                else
                    cell = $(tr).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex);
                $(cell).removeClass("e-validError");
                if ($(cell).hasClass("e-updatedtd"))
                    $(cell).addClass("e-gupdatenotify");
                $(cell).removeClass("e-editedbatchcell").empty().html($($.templates[this._id + "_JSONTemplate"].render(cellData)).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex).innerHTML);
                this.model.isEdit = false;
                this.element.focus();
            }
        },
        saveCell: function (preventSaveEvent) {
            if (this.model.isEdit) {
                if (!this.editFormValidate())
                    return true;
                var $form = $("#" + this._id + "EditForm"), $targetTR = $form.closest("tr"), $targetTD = $form.closest("td"), $toolBar, tempVal, formattedValue
                , args = {}, column = this.model.columns[this._bulkEditCellDetails.columnIndex], $element = $("#" + this._id + this._bulkEditCellDetails.fieldName.replace(/[^a-z0-9\s_]/gi,'')), getVal, setVal;
                args = {
                    columnName: column.field,
                    value: this.getCurrentEditCellData(),
                    rowData: this._bulkEditCellDetails.rowData,
                    previousValue: this._bulkEditCellDetails.cellValue,
                    columnObject: column,
                    cell: $targetTD,
                    isForeignKey: this._bulkEditCellDetails.isForeignKey
                };
                if (!preventSaveEvent && this._trigger("cellSave", args)) {
                    this._focusElements(args.cell);
                    this._bulkEditCellDetails.cancelSave = true;
                    return;
                }
                if (this.model.allowTextWrap)
                    args.cell.addClass("e-nowrap");
                if (this._bulkEditCellDetails.cellEditType == "datetimepicker" || this._bulkEditCellDetails.cellEditType == "dropdownedit" || this._bulkEditCellDetails.cellEditType == "datepicker")
                    $element[$element.data("ejWidgets")[0]]("destroy");
                if (!ej.isNullOrUndefined(column.format)) {
                    if ((column.type == "date" || column.type == "datetime") && !ej.isNullOrUndefined(args.value))
                        (!args.isForeignKey) ? args.value = args.value.length > 0 ? new Date(args.value) : args.value : args.value.text = args.value.text.length > 0 ? new Date(args.value.text) : args.value.text;
                
                    formattedValue = this.formatting(column.format, args.isForeignKey ?
                                              (!isNaN(parseFloat(args.value.text)) && isFinite(args.value.text)
                                              ? parseFloat(args.value.text)
                                              : args.value.text) : args.value,this.model.locale);
                    args.cell.empty().html(formattedValue);
                }
                ej.createObject(this._bulkEditCellDetails["fieldName"], args.isForeignKey ? args.value.value : args.value, args.rowData);
                if (ej.isNullOrUndefined(column.format))
                    formattedValue = args.isForeignKey ? args.value.text : args.value;
                if (!ej.isNullOrUndefined(column.template)) {
                    var rowData = ej.copyObject({}, args.rowData);
                    ej.createObject(this._bulkEditCellDetails["fieldName"], args.isForeignKey ? args.value.value : args.value, rowData);
                    formattedValue = $.templates(column.template).render(rowData);
                }
                if (this._bulkEditCellDetails.cellEditType == "edittemplate") {                
                    if (args.value instanceof Array)
                        formattedValue = args.value.join();
                    args.cell.empty().html(formattedValue);
                }
                else {
                    if (args.columnObject.type == "boolean" || args.columnObject.editType == "booleanedit") {
                        var cellData = {};
                        ej.createObject(args.columnObject.field, args.value, cellData);
                        var columnIndex = (this.model.detailsTemplate != null || this.model.childGrid != null) ? this._bulkEditCellDetails.columnIndex + 1 : this._bulkEditCellDetails.columnIndex;
                        args.cell.empty().html($($.templates[this._id + "_JSONTemplate"].render(cellData))[0].cells[columnIndex].innerHTML);
					}
                    else if ((args.columnObject.editType == "datepicker" || args.columnObject.editType == "datetimepicker") && !ej.isNullOrUndefined(column.format))
						args.cell.empty().html(formattedValue);
                    else {
                        if (args.columnObject.disableHtmlEncode)
                            args.cell.text(formattedValue).html();
                        else
                            args.cell.empty().html(formattedValue);
                    }
                }
                args.cell.removeClass('e-validError');
                if (args.cell.hasClass('e-updatedtd'))
                    args.cell.addClass("e-gupdatenotify");
                args.previousValue = !ej.isNullOrUndefined(args.previousValue) ? (column.type == "date" || column.type == "datetime") ? new Date(args.previousValue) : args.previousValue : "";
                tempVal = args.isForeignKey ? args.value.value : args.value;
                var isValueModified = false,gridColData,index = this.getIndexByRow(args.cell.parent());
                if (this.model.editSettings.rowPosition == "bottom") {
                    var rowDataIndex = this.getBatchChanges().added.length ? index : ((this.model.groupSettings.groupedColumns)? index : args.cell.parent().index());
                    gridColData = (this.getBatchChanges().added.length && args.cell.parent().hasClass("e-insertedrow") && (this._currentJsonData.length == this._bulkEditCellDetails.rowIndex)) ? this._currentJsonData[0] : this._currentJsonData[rowDataIndex];
                }
                else {
                    var rowDataIndex = this.getBatchChanges().added.length ? args.cell.parent().hasClass("e-insertedrow") ? index : index - this.getBatchChanges().added.length : ((this.model.groupSettings.groupedColumns) ? index : args.cell.parent().index());
                    gridColData = (!this.getBatchChanges().added.length && (this._currentJsonData.length == this._bulkEditCellDetails.rowIndex)) ? this._currentJsonData[this._bulkEditCellDetails.rowIndex - 1] : this._currentJsonData[rowDataIndex];
                }
                if(this._currentJsonData.length>0){
				    if ((this._bulkEditCellDetails.type == "date" || this._bulkEditCellDetails.type == "datetime") && !ej.isNullOrUndefined(this._bulkEditCellDetails.format))
				        isValueModified = args.value instanceof Date ? this.formatting(this._bulkEditCellDetails.format, tempVal) != this.formatting(this._bulkEditCellDetails.format, ej.getObject(args.columnName, gridColData)) : (ej.isNullOrUndefined(gridColData[this._bulkEditCellDetails.fieldName]) && this._bulkEditCellDetails._data[rowDataIndex][this._bulkEditCellDetails.fieldName] == args.value) ? false : true;
                    else if (!ej.isNullOrUndefined(ej.getObject(args.columnName, gridColData)))
                       isValueModified = ((this._bulkEditCellDetails.cellEditType == "datepicker" || this._bulkEditCellDetails.cellEditType == "datetimepicker" || this._bulkEditCellDetails.cellEditType == "dropdownedit")
						  && tempVal instanceof Date && args.previousValue instanceof Date) ? (tempVal.getTime() !== ej.getObject(args.columnName, gridColData).getTime()) : (typeof (tempVal) == "number" ? tempVal !== parseFloat(ej.getObject(args.columnName, gridColData)) : typeof (tempVal) == "boolean" ? tempVal != ej.getObject(args.columnName, gridColData) : tempVal !== ej.getObject(args.columnName, gridColData).toString());
				    else
                        isValueModified = args.cell.parent().hasClass("e-insertedrow") ? true : (ej.isNullOrUndefined(gridColData[this._bulkEditCellDetails.fieldName]) && (tempVal == "") ? !(args.previousValue == tempVal) : args.previousValue != gridColData[this._bulkEditCellDetails.fieldName]);
                }
				else
					isValueModified = true;
				this.model.isEdit = false;
                if (isValueModified) {
                    args.cell.addClass("e-updatedtd e-icon e-gupdatenotify");
                    this._enableSaveCancel();
                    getVal = ej.getObject(this._bulkEditCellDetails["fieldName"], args.rowData);
                    if (typeof getVal == "string" && getVal.length)
                        setVal = args.isForeignKey ? args.value.value.toString() : args.value.toString();
                    else
                        setVal = args.isForeignKey ? (!isNaN(parseInt(args.value.value)) ? parseInt(args.value.value) : args.value.value) : args.value;
                    if (typeof args.value == "string" && !setVal.length)
                        setVal = null;
                    ej.createObject(this._bulkEditCellDetails["fieldName"], setVal, args.rowData);
                    if ($.inArray(args.rowData, this.batchChanges.changed) == -1 && $.inArray(args.rowData, this.batchChanges.added) == -1)
                        this.batchChanges.changed.push(args.rowData);
					if(this.isejObservableArray){
                        var batchAction;
                        if (args.cell.closest("tr").hasClass("e-insertedrow"))
                            batchAction = "insert";
                        else
                            batchAction = "update";                                                                             
                        this._refreshViewModel(args, batchAction);
                    }
                }
                else{
                    args.cell.removeClass("e-updatedtd e-icon e-gupdatenotify");
                    this._enableSaveCancel();
                    if(this.batchChanges.changed.length >0 &&  !args.cell.hasClass("e-editedbatchcell e-updatedtd e-icon e-gupdatenotify") && !args.cell.parent().children().hasClass("e-updatedtd")){
						for(var index = 0 ; index < this.batchChanges.changed.length; index++){
							if(args.rowData[this._primaryKeys[0]] == this.batchChanges.changed[index][this._primaryKeys[0]])
								this.batchChanges.changed.splice(index,1)
						}
					}
                }
                $targetTR.removeClass("e-editedrow").removeClass("e-batchrow");
                args.cell.removeClass("e-editedbatchcell");
            }
        },
		_refreshViewModel:function(args, batchAction){
            var dm;
            if (!(this._dataSource() instanceof ej.DataManager))
                dm = ej.DataManager(this._dataSource());
            else 
                dm = this._dataSource();
            var query = new ej.Query();
            for (var i = 0; i < this._primaryKeys.length; i++)
                query = query.where(this._primaryKeys[i], ej.FilterOperators.equal, this._primaryKeys.length ? ej.getObject(this._primaryKeys[i], args.rowData) : null);
            var currentData = dm.executeLocal(query);
            var $dataSource = this._dataSource(undefined, true);
            var index = $.inArray(currentData[0], this._dataSource());
            this.model.editSettings.showConfirmDialog = false;
            switch (batchAction) {
                case "update":                
                $dataSource(args.rowData, index, batchAction);
                break;
                case "remove":
                $dataSource(args.rowData, index, batchAction);               
                break;
                case "insert":
                $dataSource(args.rowData, 0, batchAction);                  
                break;
            }            
        },
        _enableSaveCancel: function () {
            if (this.model.toolbarSettings.showToolbar) {
                var toolbarState = this.getContentTable().find(".e-updatedtd.e-icon.e-gupdatenotify").length > 0 ||  this._isBatchDeleteApplied  ? "enableItemByID" : "disableItemByID";
                var $toolBar = this.element.find("#" + this._id + "_toolbarItems");
                $toolBar.ejToolbar(toolbarState, this._id + "_update");
                $toolBar.ejToolbar(toolbarState, this._id + "_cancel");
            }
        },
        setCellText: function (rowIndex, cellIndex, value) { /*Supports only local datasource*/
            var byField = typeof cellIndex == "string", rows = this._excludeDetailRows(), cell,
                isGrouped = this.model.groupSettings.groupedColumns.length != 0, isVirtualized = this.model.scrollSettings.allowVirtualScrolling,
                column = this[byField ? "getColumnByField" : "getColumnByIndex"](cellIndex), current = ej.getObject(["currentViewData", (isGrouped ? ".records" : "")].join(""), this.model),
                edited = {}, dm = isVirtualized ? this._dataManager : new ej.DataManager(current),
                key = this._primaryKeys[0], keyValue = byField || ej.getObject(rowIndex + "." + key, isVirtualized ? this._dataManager.dataSource.json : current),
                editedValue = value, valid = false;

            ej.createObject(column.field, value, edited);

            if (byField) {
                keyValue = rowIndex;
                rowIndex = dm.executeLocal(new ej.Query().select(key)).indexOf(rowIndex);
                cellIndex = this.getColumnIndexByField(column.field);
            }
            if (isVirtualized) {
                var pageSize = this.model.pageSettings.pageSize, page, name, mod = rowIndex % pageSize, isCached;
                page = (rowIndex + pageSize - mod)/ pageSize;        
                name = (page - 1) * pageSize; isCached = $.inArray(name, this.virtualLoadedPages) != -1
                if (isCached) {
                    cell = this.getContentTable().find("tr[name=" + name + "]")[mod].cells[cellIndex];
                }
            }

            var tr = this._excludeDetailRows()[rowIndex], proxy = this;
            if (!ej.isNullOrUndefined(column) && !column.isPrimaryKey && column.allowEditing != false) {

                if (!ej.isNullOrUndefined(column.validationRules)) {

                    var $form = ej.buildTag("form", "", {}, { id: this._id + "EditForm" }), $valElem = ej.buildTag("input", "", {}, { id: this._id + column.field, value: value, name: column.field });
                    $form.addClass("gridform");
                    $form.append($valElem);
                    this.element.append($form);
                    $form.validate({
                        errorPlacement: function (error, element) {
                            if (!proxy._alertDialog) proxy._renderAlertDialog();
                            $("#" + proxy._id + "AlertDialog_wrapper").css("min-height", "");
                            proxy._alertDialog.find(".e-content").text(error.text());
                            proxy._alertDialog.ejDialog("open");
                            proxy.element.find($form).remove();
                            valid = true;
                            return true;
                        },
                    });
                    this.setValidationToField(column.field, column.validationRules);
                }
                if (!ej.isNullOrUndefined(column.format)) {
                    var formattedValue = this.formatting(column.format, column.foreignKeyValue ?
                                                (!isNaN(parseFloat(value)) && isFinite(value)
                                                ? parseFloat(value)
                                                : value) : value, this.model.locale);
                    editedValue = formattedValue;
                }
                if (!ej.isNullOrUndefined(column.validationRules)) {
                    $($form).validate().form();
                    this.element.find($form).remove();
                }
                if (!valid) {
                    var canSkip = rowIndex == -1 || cellIndex == -1 || (isVirtualized && !isCached)
                       || rowIndex > (isVirtualized ? this._dataSource() : current).length || cellIndex > this.model.columns.length;
                    if (!canSkip) { /*Skip when not in current page*/
                        if (this.model.scrollSettings.frozenColumns)
                            cell = this._frozenCell(rowIndex, cellIndex)[0];
                        else
                            cell = cell || this._excludeDetailCells(rows[rowIndex])[cellIndex];
                        value = column.format === undefined ? value : this.formatting(column.format, value, this.model.locale);
                        if (!ej.isNullOrUndefined(column.foreignKeyField) && !ej.isNullOrUndefined(column.foreignKeyValue))
                            value = this._getForeignKeyData(edited)[column.foreignKeyField][column.foreignKeyValue];
                        if (column.disableHtmlEncode)
                            $(cell).text(value);
                        else
                            cell.innerHTML = value;
                        this._trigger("queryCellInfo", { cell: cell, text: cell.innerHTML, column: column, data: edited });
                    }
                    if (key) {
                        ej.createObject(key, keyValue, edited);
                        this._dataManager.update(key, edited);
                    }
                }
            }
        },
        _excludeDetailCells: function ($tr) {
            var $gridCells;
            if (!ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid || this.model.showSummary))
                $gridCells = $($tr.cells).not(".e-detailrowexpand, .e-detailrowcollapse");
            else
                $gridCells = $($tr.cells);
            return $gridCells;
        },
        setCellValue: function (index, fieldName, cellValue) {
            if ($("#" + this._id + "EditForm").length > 0)
                $("#" + this._id + "EditForm").attr("id", "EditForm1");
            if (this.model.editSettings.editMode == "batch" && !this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.frozenColumns) {
                var data = this.getDataByIndex(index), tr = this._excludeDetailRows()[index], dataIndex, columnIndex = this.getColumnIndexByField(fieldName), proxy = this, editedValue = cellValue, valid = false;
                var column = this.getColumnByField(fieldName), editedTd;
                if ($(tr).hasClass("e-insertedrow"))
                    editedTd = $(tr.cells).not(".e-detailrowcollapse, .e-detailrowexpand")[columnIndex + this.model.groupSettings.groupedColumns.length];
                else
                    editedTd = $(tr.cells).not(".e-detailrowcollapse, .e-detailrowexpand")[columnIndex];
                if (!ej.isNullOrUndefined(column) && !column.isPrimaryKey && column.allowEditing != false) {
                    if (!ej.isNullOrUndefined(column.validationRules)) {/*Check for validation*/
                        var $form = ej.buildTag("form", "", {}, { id: this._id + "EditForm" }), $valElem = ej.buildTag("input", "", {}, { id: this._id + column.field, value: cellValue, name: column.field });
                        $form.append($valElem);
                        this.element.append($form);
                        $form.validate({/*Validate the form*/
                            errorPlacement: function (error, element) {
                                if (!proxy._alertDialog) proxy._renderAlertDialog();
                                $("#" + proxy._id + "AlertDialog_wrapper").css("min-height", "");
                                proxy._alertDialog.find(".e-content").text(error.text());
                                proxy._alertDialog.ejDialog("open");
                                proxy.element.find($form).remove();
                                valid = true;
                                return true;
                            },
                        });
                        this.setValidationToField(column.field, column.validationRules);
                    }

                    if (column.foreignKeyValue) {
                        editedValue = this._foreignKeyBinding(columnIndex, cellValue, this._id);/*Get the corresponding foreign key value*/

                        if (editedValue == undefined) {
                            if (!this._alertDialog) this._renderAlertDialog();
                            $("#" + this._id + "AlertDialog_wrapper").css("min-height", "");
                            this._alertDialog.find(".e-content").text(this.localizedLabels.ForeignKeyAlert);
                            this._alertDialog.ejDialog("open");
                            if (!ej.isNullOrUndefined(column.validationRules)) this.element.find($form).remove();
                            return;
                        }
                    }

                    if (!ej.isNullOrUndefined(column.format)) {/*Get the formatted value*/
                        var formattedValue = this.formatting(column.format, column.foreignKeyValue ?
                                                    (!isNaN(parseFloat(cellValue)) && isFinite(cellValue)
                                                    ? parseFloat(cellValue)
                                                    : cellValue) : cellValue, this.model.locale);
                        editedValue = formattedValue;
                    }
                    


                    if (!ej.isNullOrUndefined(column.validationRules)) {
                        $($form).validate().form();
                        this.element.find($form).remove();
                    }
                    $("#EditForm1").attr("id", this._id + "EditForm");
                    if (!valid && editedTd.innerHTML != editedValue) {
                        if ($(editedTd).has("form").length > 0) this.model.isEdit = false;
                        if ($(editedTd).hasClass("e-boolrowcell"))
                            $(editedTd).find("input").attr("checked", editedValue);
                        else
                            editedTd.innerHTML = editedValue;
                        $(editedTd).addClass("e-updatedtd e-icon e-gupdatenotify");
                        $(editedTd).removeClass("e-validError e-editedbatchcell");
                        ej.createObject(fieldName, cellValue, data);
						if (!$(tr).hasClass("e-insertedrow"))
                        $.inArray(data, this.batchChanges.changed) == -1 && this.batchChanges.changed.push(data);
                        this._enableSaveCancel();
                    }
                }
            }
        },
        setDefaultData: function (defaultData) {
            if (ej.isNullOrUndefined(defaultData)) {
                var fieldNames = [];
                var columns = this.model.columns;
                for (var column = 0; column < this.model.columns.length; column++)
                    fieldNames.push(this.model.columns[column]["field"]);
                if (ej.isNullOrUndefined(this._bulkEditCellDetails._data))
                    this._bulkEditCellDetails._data = [];
                defaultData = {};
                var setter = function (field, value) { ej.createObject(field, value, defaultData) };
                for (var i = 0; i < fieldNames.length; i++) {
                    var index = i, field = fieldNames[i], columnType = columns[i].type, val = ej.getObject(field, this._bulkEditCellDetails._data[0]);
                    var isChild = !ej.isNullOrUndefined(this.model.parentDetails) ? this.model.parentDetails.parentKeyField : null;
                    if (field === isChild)
                        this.model.columns[index].defaultValue = this.model.parentDetails.parentKeyFieldValue;
                    if (!ej.isNullOrUndefined(this.model.columns[index]["defaultValue"])) {
                        setter(field, this.model.columns[index]["defaultValue"]);
                    }
                    else {
                        switch (columnType) {
                            case "number":
                                setter(field, 0);
                                break;
                            case "string":
                                setter(field, null);
                                break;
                            case "boolean":
                                setter(field, false);
                                break;
                            case "object":
                                if ($.isArray(val))
                                    setter(field, new Array());
                                else
                                    setter(field, null);
                            case "datetime":
                            case "date":
                                setter(field, null);
                        }
                    }
                }
                if (!ej.isNullOrUndefined(this.model.queryString)) {
                    var keyField = this.model.foreignKeyField || this.model.queryString;
                    defaultData[keyField] = this.model.parentDetails.parentRowData[this.model.queryString]
                }
            }
            this._bulkEditCellDetails.defaultData = defaultData;
        },
        _bulkDelete: function (index) {
            if (this.model.editSettings.allowDeleting) {
                if (ej.isNullOrUndefined(index))
                    index = this._selectedRow();
                if (index == -1) {
                    alert(this.localizedLabels.DeleteOperationAlert);
                    return;
                }
                var tr, $tr, data, args = {};
                if (this.multiDeleteMode && this.selectedRowsIndexes.length > 1) {
                    data = [];
                    $tr = this.getSelectedRows();
                    Array.prototype.push.apply(data, this.getSelectedRecords());
                    Array.prototype.push.apply(this.batchChanges.deleted, this.getSelectedRecords());
                }
                else
                    tr = this.getRows()[index], $tr = $(tr), data = this.getDataByIndex(index);
                args = {
                    primaryKey: this._primaryKeys,
                    rowIndex: index,
                    rowData: data,
                    row: $tr
                };
                if (this._trigger("beforeBatchDelete", args))
                    return;
				if(this.isejObservableArray)                   
                    this._refreshViewModel(args, "remove");
                if (this.model.isEdit)
                     this.cancelEditCell();
                if ($tr.hasClass("e-insertedrow")) {
                    $tr.remove();
                    index = $.inArray(tr, this._bulkEditCellDetails.insertedTrCollection);
                    if (index != -1) {
                        this._bulkEditCellDetails.insertedTrCollection.splice(index, 1);
                        this.batchChanges.added.splice(index, 1);
                    }
                }
                else {
                    $tr.hide();
					if(args.rowIndex == 0 || $tr.hasClass("e-firstrow")){
						$tr.hasClass("e-firstrow") && this.getContentTable().find("tr").removeClass("e-firstrow");
						this.getContentTable().find("tr:visible").first().addClass("e-firstrow");
					}
                    if (!$.isArray(data))
                        this.batchChanges.deleted.push(data);
                }
                this._gridRows =  (this.model.detailsTemplate != null || this.model.childGrid != null) ? this._gridRows : this.getContentTable().find("td.e-rowcell").closest("tr").toArray();
				if (this.model.allowScrolling)
                  this._refreshScroller(args);
			  this._isBatchDeleteApplied = true;
                this._enableSaveCancel();
                this._selectedRow(-1);
                args = {
                    primaryKey: this._primaryKeys,
                    rowIndex: index,
                    rowData: data
                };
                this._trigger("batchDelete", args);
            }
        },
        _bulkAddRow: function (defaultData) {
            var  $form = $("#" + this._id + "EditForm");
            if ($form.length && !this.editFormValidate())
                return true;
            if (this.model.editSettings.allowAdding) {
                this._isAddNew = true;
                var args = {}, $tr, editCellIndex, rows = this.getRows();
                if (!ej.isNullOrUndefined(defaultData))
                    this._bulkEditCellDetails.defaultData = defaultData;
                ej.isNullOrUndefined(this._bulkEditCellDetails.defaultData) && this.setDefaultData();
                args = {
                    defaultData: $.extend(true, {}, this._bulkEditCellDetails.defaultData),
                    primaryKey: this._primaryKeys,
                };
                if (this._trigger("beforeBatchAdd", args))
                    return;
                $tr = $($.render[this._id + "_JSONTemplate"](args.defaultData)).addClass("e-insertedrow");
                rows != null && $(rows[0]).hasClass("e-alt_row") && $tr.removeClass("e-alt_row");
                if (this.model.editSettings.rowPosition == "top")
                    this.getContentTable().first().find('tbody').first().prepend($tr);
                else if (this.model.editSettings.rowPosition == "bottom")
                    this.getContentTable().first().find('tbody').first().append($tr);
                if (this._gridRecordsCount === 0)
                    this.getContentTable().find("tbody .emptyrecord").first().remove();
                this._gridRows = this.getContentTable().find("td.e-rowcell").closest("tr").toArray();
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    $tr.prepend(ej.buildTag("td.e-indentcell"));
                this._bulkEditCellDetails.insertedTrCollection.push($tr.get(0));
                this.batchChanges.added.push(args.defaultData);
                var rowindex = this._gridRows.length - 1;
                if (this.model.editSettings.rowPosition == "bottom") {
                    editCellIndex = this._findNextEditableCell(0);
                    this.selectRows(rowindex);
                    this.editCell(rowindex, this.model.columns[editCellIndex].field);
                }
                else {
                    editCellIndex = this._findNextEditableCell(0);
                    this.selectRows(0);
                    this.editCell(0, this.model.columns[editCellIndex].field);
                }
				if (this.model.allowScrolling)
                    this._refreshScroller(args);
                $tr.find(".e-rowcell").addClass("e-updatedtd e-icon e-gupdatenotify");
                this._enableSaveCancel();
                args = { defaultData: args.defaultData };
                $.extend(args, {
                    columnObject: this.model.columns[editCellIndex],
                    columnIndex: editCellIndex,
                    row: $tr,
                    primaryKey: this._primaryKeys,
                    cell: $($tr[0].cells[editCellIndex])
                });
                this._trigger("batchAdd", args);
                this._trigger("refresh", args);
            }
        },
        getDataByIndex: function (rowIndex) {
            var $tr = $(this._excludeDetailRows()[rowIndex]), insertedRowIndex, currentRowData, index;
            if ($tr.hasClass("e-insertedrow")) {
                insertedRowIndex = $.inArray($tr[0], this._bulkEditCellDetails.insertedTrCollection);
                return this.batchChanges.added[insertedRowIndex];
            }
            else
                return this._bulkEditCellDetails._data[this.model.editSettings.rowPosition == "top" ? rowIndex - this._bulkEditCellDetails.insertedTrCollection.length : rowIndex];

        },
        
        refreshBatchEditChanges: function () {
            this._bulkEditCellDetails = {
                cellValue: null,
                rowIndex: -1,
                _data: null,
                columnIndex: -1,
                fieldName: null,
                cellEditType: "",
                cancelSave: false,
                defaultData: null,
                insertedTrCollection: [],
                rowData: null,
                isForeignKey: false
            };
            this.batchChanges = {
                added: [],
                deleted: [],
                changed: []
            };
        },
        refreshBatchEditMode: function () {
            if (this.model.editSettings.editMode == "batch" || this._enableCheckSelect) {
                this.refreshBatchEditChanges();
                this._bulkEditCellDetails._data = $.extend(true, [], this.getCurrentViewData());
            }
        },
        
        batchCancel: function () {
            this.cancelEdit();
        },
        
        batchSave: function () {
            var args = {}, deferedObject, gridObject = this;
			var index=(this.model.editSettings.rowPosition == "top" || this._gridRows == null)?0:this._gridRows.length - 1;
			this._batchCellValidation(index);
            if(!this.saveCell()){
            args["batchChanges"] = this.getBatchChanges();
            if (this._trigger("beforeBatchSave", args))
                return;
            args = {};
            args.requestType = "batchsave";
            this._isAddNew = false;
            this._sendBulkReuqest(this.getBatchChanges(), args);
		  }
        },
        _sendBulkReuqest: function (batchChanges, args) {
            var deferedObject = this._dataManager.saveChanges(batchChanges, this._primaryKeys[0], this.model.query._fromTable, this.model.query), gridObject = this;
            this._isBatchDeleteApplied=false;
			if (this._dataManager instanceof ej.DataManager && !this._dataManager.dataSource.offline) {
                deferedObject.done(function (e) {
                    gridObject._processBindings(args);
                });
                deferedObject.fail(function (e) {
                    var args = { error: e.error };
                    gridObject._trigger("actionFailure", args);
                });
            }
            else
                this._processBindings(args);

        },
        
        getBatchChanges: function () {
            return this.batchChanges;
        },
        
        editCell: function (index, fieldName) {
            if (this.element.ejWaitingPopup("model.showOnInit"))
                return;
            if (this.model.editSettings.allowEditing && $.inArray(fieldName, this._disabledEditableColumns) == -1) {
                var $form = $("#" + this._id + "EditForm");
                this.model.isEdit && this.saveCell();
                if ($.isFunction($.validator) && $form.length && $form.validate().errorList.length)
                    return;
                var $targetTR = $(this._excludeDetailRows()[index]), columnIndex = this.getColumnIndexByField(fieldName), $targetTd = $targetTR.find(".e-rowcell").eq(columnIndex), column = this.model.columns[columnIndex], rowData = this.getDataByIndex(index);
                var args = {
                    validationRules: ej.isNullOrUndefined(column.validationRules) ? {} : $.extend(true, {}, column.validationRules),
                    columnName: column.field,
                    value: ej.getObject(ej.isNullOrUndefined(fieldName) ? "" : fieldName, rowData),
                    rowData: rowData,
                    row: $targetTR,
                    primaryKey: this._primaryKeys,
                    columnObject: column,
                    cell: $targetTd,
                    isForeignKey: !ej.isNullOrUndefined(column.foreignKeyValue) && this.model.editSettings.editMode == "batch" ? true : false,
                }, isEditable = true;
                if (this.model.allowTextWrap)
                    this.element.find(".e-rowcell").removeClass("e-nowrap");
                if (this.model.allowScrolling)
                    this._refreshScroller(args);
                this._batchEditRowData = rowData;
                if (this._trigger("cellEdit", args))
                    return;
                if ($targetTR.hasClass("e-insertedrow")) args.requestType = "add";
                if ($.inArray(fieldName, this._primaryKeys) != -1 || args.columnObject.allowEditing === false || ((args.columnObject.template || args.columnObject.type=="checkbox") && (args.columnObject["allowEditing"] == false || !args.columnObject["field"])) || args.columnObject.commands) {
                    $.extend(this._bulkEditCellDetails, {
                        cellValue: args.value,
                        rowIndex: index,
                        fieldName: fieldName,
                        rowData: args.rowData,
                        columnIndex: columnIndex,
                        isForeignKey: ej.isNullOrUndefined(args.columnObject.foreignKeyValue) ? false : true
                    });
                    isEditable = false;
                }
                if ($targetTR.hasClass("e-insertedrow") && (args.columnObject.isPrimaryKey))
                    isEditable = true;
                if (isEditable) {
                    $.extend(this._bulkEditCellDetails, {
                        rowIndex: index,
                        cellValue: args.value,
                        columnIndex: columnIndex,
                        format: column.format == undefined ? null : column.format,
                        type: column.type,
                        fieldName: fieldName,
                        cellEditType: args.columnObject.editType,
                        rowData: rowData,
                        isForeignKey: ej.isNullOrUndefined(args.columnObject.foreignKeyValue) ? false : true
                    });
                    this._renderBulkEditObject(args, $targetTd);
                    $targetTR.addClass("e-editedrow").addClass("e-batchrow");
                    args.cell.addClass("e-editedbatchcell");
                    if (args.columnObject.editType == "booleanedit")
                        args.cell.addClass("e-boolrowcell");
                }
            }
        },
        _findNextEditableCell: function (columnIndex) {
            var endIndex = this.model.columns.length;
            for (var i = columnIndex; i < endIndex; i++) {
                if (!this.model.columns[i].template && !this.model.columns[i].commands && this.model.columns[i].visible)
                    return i;
            }
            return -1;
        },
        _findNextCell: function (columnIndex, direction, event) {
            var splittedColumn, visibleColumns = [], predicate, rows = this.getRows();
			if (this.model.columns[columnIndex].template) 
                this.model.columns[columnIndex].__isTemplate = true;  
			if(this.model.columns[columnIndex].commands)
				this.model.columns[columnIndex].__isCommand = true; 
			if (!ej.isNullOrUndefined(event) && (event.keyCode == 39 || event.keyCode == 37))
			   predicate = ej.Predicate("visible", "equal", true);
		    else
               predicate = ej.Predicate("visible", "equal", true).and("__isTemplate", "notequal", true).and("__isCommand", "notequal", true).and("allowEditing", "notequal", false).and("isPrimaryKey", "notequal", true);
            splittedColumn = direction == "right" ? this.model.columns.slice(columnIndex) : this.model.columns.slice(0, columnIndex + 1).reverse();
            visibleColumns = ej.DataManager(splittedColumn).executeLocal(ej.Query().where(predicate));
            if (visibleColumns.length == 0 && (!(direction == "left" && this._bulkEditCellDetails.rowIndex == 0) && !(direction == "right" && this._bulkEditCellDetails.rowIndex + 1 == this.getRows().length))) {
                splittedColumn = direction == "right" ? this.model.columns.slice(0, columnIndex) : this.model.columns.slice(columnIndex).reverse();
                visibleColumns = ej.DataManager(splittedColumn).executeLocal(ej.Query().where(predicate));
                this._bulkEditCellDetails.rowIndex = visibleColumns.length && direction == "right" ? this._bulkEditCellDetails.rowIndex + 1 : this._bulkEditCellDetails.rowIndex - 1;
            }
            return visibleColumns.length ? $.inArray(visibleColumns[0], this.model.columns) : -1;
        },
        _moveCurrentCell: function (direction, event) {
            var editCellIndex, rowIndex = this._bulkEditCellDetails.rowIndex, currentRow, $form = $("#" + this._id + "EditForm");
            if (this._bulkEditCellDetails.rowIndex == -1 && this._bulkEditCellDetails.columnIndex == -1)
                return true;
            switch (direction) {
                case "right":
                    if ((this._bulkEditCellDetails.rowIndex == this.getRows().length - 1 && this._bulkEditCellDetails.columnIndex == this.model.columns.length - 1) || (!this.element.is(document.activeElement) && !this.getContent().is(document.activeElement) && $form.length == 0))
                        return true;
                    if (this._bulkEditCellDetails.columnIndex == this.model.columns.length - 1) {
                        editCellIndex = 0;
                        this._bulkEditCellDetails.rowIndex = this._bulkEditCellDetails.rowIndex + 1;
                    }
                    else
                        editCellIndex = this._bulkEditCellDetails.columnIndex + 1;
                    if ((!ej.isNullOrUndefined(this.model.columns[editCellIndex].template) && ej.isNullOrUndefined(this.model.columns[editCellIndex].field)) || !ej.isNullOrUndefined(this.model.columns[editCellIndex].commands) || this.model.columns[editCellIndex].visible === false || this.model.columns[editCellIndex].allowEditing === false)
                        editCellIndex = this._findNextCell(editCellIndex, direction, event);
                    this._bulkEditCellDetails.rowIndex != rowIndex && this.selectRows(this._bulkEditCellDetails.rowIndex);
                    editCellIndex != -1 && this.editCell(this._bulkEditCellDetails.rowIndex, this.model.columns[editCellIndex].field);
                    break;
                case "left":
                    if ((this._bulkEditCellDetails.rowIndex == 0 && this._bulkEditCellDetails.columnIndex == 0) || (!this.element.is(document.activeElement) && $form.length == 0))
                        return true;
                    if (this._bulkEditCellDetails.columnIndex == 0) {
                        editCellIndex = this.model.columns.length - 1;
                        this._bulkEditCellDetails.rowIndex = this._bulkEditCellDetails.rowIndex - 1;
                        this.selectRows(this._bulkEditCellDetails.rowIndex);
                    }
                    else
                        editCellIndex = this._bulkEditCellDetails.columnIndex - 1;
                    if ((!ej.isNullOrUndefined(this.model.columns[editCellIndex].template) && ej.isNullOrUndefined(this.model.columns[editCellIndex].field)) || !ej.isNullOrUndefined(this.model.columns[editCellIndex].commands) || this.model.columns[editCellIndex].visible === false || this.model.columns[editCellIndex].allowEditing === false)
                        editCellIndex = this._findNextCell(editCellIndex, direction, event);
                    this._bulkEditCellDetails.rowIndex != rowIndex && this.selectRows(this._bulkEditCellDetails.rowIndex);
                    editCellIndex != -1 && this.editCell(this._bulkEditCellDetails.rowIndex, this.model.columns[editCellIndex].field);
                    break;
                case "up":
                    if (this._bulkEditCellDetails.rowIndex == 0)
                        return;
                    editCellIndex = this._bulkEditCellDetails.columnIndex;
                    !this._enableCheckSelect && this.selectRows(this._bulkEditCellDetails.rowIndex - 1);
                    this.editCell(this._bulkEditCellDetails.rowIndex - 1, this.model.columns[this._bulkEditCellDetails.columnIndex].field);
                    break;
                case "down":
                    var editCellDetails;
                    this._bulkEditCellDetails.columnIndex != this._copyBulkEditCellDetails.columnIndex ? editCellDetails = this._copyBulkEditCellDetails : editCellDetails = this._bulkEditCellDetails;
                    if (editCellDetails.rowIndex == this.getRows().length - 1) {
                        this.endEdit();
                        return;
                    }
                    editCellIndex = editCellDetails.columnIndex;
                    !this._enableCheckSelect && this.selectRows(editCellDetails.rowIndex + 1);
                    if (editCellDetails.columnIndex != -1) {
                        this.editCell(editCellDetails.rowIndex + 1, this.model.columns[editCellDetails.columnIndex].field);
                        this.selectCells([[editCellDetails.rowIndex, editCellDetails.columnIndex]]);
                    }
                    break;

            }
            var addedRow = !$(this.getRows()[this._bulkEditCellDetails.rowIndex]).hasClass("e-insertedrow");
            if (editCellIndex != -1 && (this.model.columns[editCellIndex].commands || (this.model.columns[editCellIndex].isPrimaryKey && addedRow && !ej.isNullOrUndefined(event) && event.keyCode == 9) || (this.model.columns[editCellIndex].template && this.model.columns[editCellIndex].field == "")))
                this.element.focus();
            return false;
        },
        _renderBulkEditObject: function (cellEditArgs, $td) {
            var $form = ej.buildTag("form", "", {}, { id: this._id + "EditForm" }), $bulkEditTemplate = this._bulkEditTemplate, mappingName = this._id + cellEditArgs.columnObject.field, $element, htmlString, cellData = {};
            ej.createObject(cellEditArgs.columnObject.field, cellEditArgs.value, cellData);
            var args = { requestType: cellEditArgs.requestType, cell:cellEditArgs.cell, columnName:cellEditArgs.columnName,rowData:cellEditArgs.rowData,row:cellEditArgs.row };
            $td.empty();
            if (!$td.parent().is(":last-child")){
                $td.addClass('e-validError');
                $td.removeClass('e-gupdatenotify');
             }
            htmlString = $bulkEditTemplate.find("#" + cellEditArgs.columnObject.field.replace(/[^a-z0-9\s_]/gi, ej.pvt.consts.complexPropertyMerge) + "_BulkEdit").html();
            $element = $($.templates(htmlString).render(cellData));
            if ($element.get(0).tagName == "SELECT") {
                var cellValue = ej.getObject(cellEditArgs.columnObject.field, cellData);
                $element.val(ej.isNullOrUndefined(cellValue) ? "" : cellValue.toString());
                $element.val() == null && $element.val($element.find("option").first().val());
                $element.data('ej-value', cellValue);
            }
            $form.append($element);
            $td.append($form);
            this._setoffsetWidth();
            this._refreshEditForm(args);
            if ($.isFunction($.validator) && !$.isEmptyObject(cellEditArgs.validationRules)) {
                this.initValidator();
                this.setValidationToField(cellEditArgs.columnObject.field, cellEditArgs.validationRules);
            }
            this.model.isEdit = true;
        },
        _triggerConfirm: function (args) {
            if (args !== undefined && args.model.text == this._getDeprecatedLocalizedLabel("OKButton")) {
                if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.BatchSaveConfirm)
                    this.batchSave();
                else if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.ConfirmDelete) {
                    if (this.model.editSettings.editMode == "batch")
                        this._bulkDelete()
                    else {
                        if (this.multiDeleteMode)
                            this._multiRowDelete();
                      else
                        if (!ej.isNullOrUndefined(this._cDeleteData)) {
                            this.deleteRow(this._cDeleteData);
                            this._cDeleteData = null;
                          }
                        else
                            this.deleteRow();
                    }
                }
                else if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.CancelEdit)
                    this.cancelEdit();
                else {
                    this._confirmedValue = true;
                    this._processBindings(this._requestArgs);
                }
				this._isBatchDeleteApplied=false;
				this.clearSelection();
            }
            else {
                if (this._confirmDialog.find(".e-content").text() != this.localizedLabels.BatchSaveConfirm && this._confirmDialog.find(".e-content").text() != this.localizedLabels.ConfirmDelete) {
                    if (this._confirmDialog.find(".e-content").text() != this.localizedLabels.CancelEdit) {
                        switch (this._requestArgs.requestType) {
                            case "grouping":
                                this.model.groupSettings.groupedColumns.pop();
                                break;
                            case "ungrouping":
                                this.model.groupSettings.groupedColumns.push(this._requestArgs.columnName);
                                break;
                            case "sorting":
                                this._cSortedDirection = this._cSortedColumn = null;
                                break
                            case "filtering":
                                this.model.filterSettings.filteredColumns.reverse().splice(0, this._requestArgs.currentFilterObject);
                                this.model.filterSettings.filteredColumns.reverse();
                                break;
                            case "paging":
                                this._currentPage(this._requestArgs.previousPage);
                                this.getPager().ejPager("model.currentPage", this._requestArgs.previousPage);
                                break

                        }
                    }
                }
                this._confirmedValue = false;
            }
            this._requestArgs = null;
            this._confirmDialog.ejDialog("close");
        },
        _batchCellValidation: function (index,$target) {
            var $row = this.getRowByIndex(index),i;
            if (this.model.editSettings.editMode == "batch" && this.model.isEdit && $row.hasClass('e-insertedrow')) {
                for (i = 0; i < this._validatedColumns.length; i++) {
                    var colindex = this.getColumnIndexByField(this._validatedColumns[i])
                    if (!this.editFormValidate() || (index != colindex) && !ej.isNullOrUndefined($target)  && $target.closest('tr').hasClass("e-insertedrow") ) 
                        return true;
                    this.editCell(index, this.model.columns[colindex].field);
                }
            }
         },
        _saveCellHandler: function (e) {
            var $target = $(e.target);
            e.stopPropagation();
            var index=(this.model.editSettings.rowPosition == "top" || this._gridRows == null)?0:this._gridRows.length - 1;
            if ($target.closest(".e-popup").length == 0 && $target.closest(".e-rowcell").find("#" + this._id + "EditForm").length == 0) {
                if ($(this.getRows()).hasClass("e-insertedrow"))
                    this._batchCellValidation(index,$target);
                this.saveCell();
            }
        },
        initValidator: function () {
            var gridObject = this, elements = this.model.scrollSettings.frozenColumns > 0 || this.model.editSettings.showAddNewRow ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
            for (var i = 0; i < elements.length ; i++) {
                elements.eq(i).validate({
                    ignore: ".e-hide",
                    errorClass: 'e-field-validation-error',
                    errorElement: 'div',
                    wrapper: "div",
                    errorPlacement: function (error, element) {
                        gridObject._renderValidator(error, element);
                    },

                });
            }
        },
        _renderValidator: function (error, element) {          
            if (element.is(":hidden"))
                element = element.siblings("input:visible");
            if (!element.length)
                return;
            var $td = element.closest(".e-rowcell"), $container = $(error).addClass("e-error"),
             $tail = ej.buildTag("div.e-errortail e-toparrow");
            var isScrolling = this.model.isResponsive || this.model.allowScrolling;
            var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null; var scrollTop = 0;
            $td = !$td.length ? $td = element.closest("td") : $td;
            $td.find(".e-error").remove();

            if (element.parent().hasClass("e-in-wrap"))
                $container.insertAfter(element.closest(".e-widget"));
            else
                $container.insertAfter(element);
            var doInvert = (this.model.scrollSettings.frozenRows > 0 && (this._currentTrIndex >= this.model.scrollSettings.frozenRows)) ? true : false
            var operation = doInvert ? "append" : "prepend";
            $container[operation]($tail);
            if (isScrolling && (!ej.isNullOrUndefined(scrollObj) && (scrollObj._hScrollbar || scrollObj._vScrollbar))) {
                $td.addClass("e-validError");
                scrollTop = scrollObj._hScrollbar ? scrollObj._hScrollbar.element[0].offsetTop : 0;
            }
            var heightExpected = $td[0].offsetTop + $td[0].offsetHeight + error[0].offsetHeight;
            var eleExceed = false, hScrollerSize = scrollObj && scrollObj._hScrollbar ? scrollObj._hScrollbar.model.height : 0;
            if ((scrollObj && scrollObj.isHScroll() && heightExpected > scrollTop) || (heightExpected > (this.getContent()[0].offsetTop + this.getContent().find(".e-content").height())))
                eleExceed = true;
            if (!isScrolling || !(!ej.isNullOrUndefined(scrollObj) && (scrollObj._hScrollbar || scrollObj._vScrollbar))) {
                var rect = error[0].getBoundingClientRect();
                var errorWidth = rect ? rect.width : error.width();
                if (errorWidth < $td.width())
                    error.width(errorWidth);
                else
                    error.width($td.width());
                element.closest(".e-validError").removeClass("e-validError");
            }
            if (this.model.enableRTL)
                this.model.editSettings.editMode != "dialog" && $container.offset({ top: element.offset().top + element.height() });
            else
                this.model.editSettings.editMode != "dialog" && $container.offset({ left: element.offset().left, top: element.offset().top + element.height() });
            if (this.model.scrollSettings.frozenRows <= 0 && $.inArray(this.model.editSettings.editMode, ["externalform", "externalformtemplate", "dialog", "dialogtemplate"]) == -1) {
                var content = this.getContent();
                var scrollContent = content.find(".e-content");
                var cntHeight = scrollContent.height();
                var contentTop = content[0].offsetTop;
                if (eleExceed && scrollObj != null && scrollObj._vScrollbar && (this.model.scrollSettings.frozenColumns)) {
                    var val = scrollObj._vScrollbar.model.value - (heightExpected - (contentTop + scrollContent[0].scrollHeight));
                    var contentScrollHeight = contentTop + scrollContent[0].scrollHeight;
                    var contentHeight = contentTop + cntHeight;
                    if ((!this.model.scrollSettings.frozenColumns && heightExpected > contentScrollHeight) || (this.model.scrollSettings.frozenColumns && heightExpected > contentHeight)) {
                        scrollObj._vScrollbar.model.maximum += (heightExpected - (contentTop + cntHeight));;
                        scrollObj._vScrollbar.refresh(true);
                    }
                    if (this.model.scrollSettings.frozenColumns) {
                        var movableContent = this.getContent().find(".e-movablecontent");
                        movableContent.height(movableContent[0].scrollHeight);
                    }
                    scrollObj.scrollY(element.offset().top - contentTop + scrollContent[0].scrollTop);
                }
                else if (eleExceed && isScrolling && scrollObj != null) {
                    if (!scrollObj.isVScroll()) {
                        var eleHeight = heightExpected - (contentTop + cntHeight);
                        scrollContent.height(cntHeight + eleHeight);
                    }
                    else if (scrollObj.isVScroll()) {
                        scrollObj.refresh();
                        this._showHideScroller();
                        if (scrollObj._vScroll) {
                            var value = scrollObj._vScrollbar.model.value + (heightExpected - (contentTop + cntHeight + hScrollerSize - hScrollerSize));
                            scrollObj.scrollY(value);
                        }
                    }
                }
            }
            else if (doInvert) {
				if(eleExceed){
					var top = $container.css('top');
					$tail.addClass("e-bottomarrow");
					$container.css({
						'bottom': top,
						'top': 'auto'
					});
				}
				else{
					$tail.prependTo($tail.parent());
				}
            }
            $container.show("slow");
        },

        setValidation: function () {
            for (var i = 0; i < this.model.columns.length; i++) {
                if (!ej.isNullOrUndefined(this.model.columns[i]["validationRules"])) {
                    this.setValidationToField(this.model.columns[i].field, this.model.columns[i].validationRules);
                }
            }
        },
        
        setValidationToField: function (name, rules) {
            var fName = name, ele, col = this.getColumnByField(name);
            if (!ej.isNullOrUndefined(name))
                fName = fName.replace(/[^a-z0-9\s_]/gi, '');
            if (this.model.editSettings.editMode == "batch")
                var form = this.element.find("#" + this._id + "EditForm");
            else if(this.model.editSettings.showAddNewRow)
                var form = $(this.getRows()).hasClass("e-editedrow") ? this.element.find(".e-editedrow .gridform") : this.element.find(".e-addedrow .gridform");
            else
                var form = this.element.find(".gridform");
            ele = /^[a-zA-Z0-9- ]*$/.test(name) ?  form.find("[name=" + fName + "]") : form.find("#" + this._id + fName);
            if (!ej.isNullOrUndefined(ele.attr("id")) && ele.attr("id").indexOf("hidden") != -1)
                ele = form.find("#" + this._id + fName);
            if(ele.length == 0) 
               ele = form.find("#" + fName);
            if (rules["regex"]) {
                rules[name + "regex"] = rules["regex"]; delete rules["regex"];
                $.validator.addMethod(fName + "regex", function (value, element, options) {
                    var ptn = options instanceof RegExp ? options : new RegExp(options);
                    return ptn.test(value);
                }, ej.getObject("messages.regex", rules) || col.headerText + " should match the given pattern");
            }
            !ele.attr("name") && ele.attr("name", name);
            ele.rules("add", rules);
            var validator = $("#" + this._id + "EditForm").validate();
            validator.settings.messages[name] = validator.settings.messages[name] || {};
            if (!ej.isNullOrUndefined(rules["required"])) {
                if (!ej.isNullOrUndefined(rules["messages"] && rules["messages"]["required"]))
                    var message = rules["messages"]["required"];
                else
                    var message = $.validator.messages.required;
                if (message.indexOf("This field") == 0)
                    message = message.replace("This field", col.headerText);               
                validator.settings.messages[name]["required"] = message;				
				if (ele.hasClass("e-datepicker e-js") && (ej.isNullOrUndefined(col.editParams) || ej.isNullOrUndefined(col.editParams.watermarkText)))
					ele.ejDatePicker({watermarkText: ""});
            }
        },
        _renderConfirmDialog: function () {
            var $contentDiv = ej.buildTag('div.e-content', this.localizedLabels.BatchSaveConfirm)
            , $buttons = ej.buildTag('span.e-buttons', '<input type="button" class="e-flat e-btnsub" id=' + this._id + "ConfirmDialogOK" + ' value="' + this._getDeprecatedLocalizedLabel("OKButton") + '" /> '
                + "<input type='button' class='e-flat e-btncan' id=" + this._id + 'ConfirmDialogCancel' + " value='" + this.localizedLabels.CancelButton + "' />");

            this._confirmDialog = ej.buildTag('div#' + this._id + 'ConfirmDialog', { float: "left" },{overflow:"hidden" });
            this._confirmDialog.append($contentDiv).append($buttons);
            this.element.append(this._confirmDialog);
            $buttons.find("input").ejButton({
                cssClass: this.model.cssClass,
                showRoundedCorner: true,
                size: "mini",
                click: $.proxy(this._triggerConfirm, this)
            });
            this._renderFDialog(this._id + 'ConfirmDialog');
            this._confirmDialog.ejDialog({ showOnInit: false, width: "auto", minWidth: 0, minHeight: 0, enableModal: true });
        },
        _unboundClickHandler: function (e) {
            var $target = $(e.target).closest("button");
            if (($target.hasClass("e-button") && ($target.hasClass("e-disable") || $target.prop("disabled"))) || $target.closest(".e-grid").attr("id") !== this._id) return;
            var $editTrLen = 0, params = {};
            if ($(e.target).hasClass("e-unboundcelldiv"))
                return;
            var index = $target.hasClass("e-savebutton") ? this.getIndexByRow($(".e-editedrow")) : this.getIndexByRow($target.closest("tr"));
            if (this.model.isEdit && (!this._isLocalData || this._isRemoteSaveAdaptor) && $target.hasClass("e-editbutton")) {
                this._unboundRow = $target.closest("tr");
                return;
            }
            var rowData = this._currentJsonData[index];
            var btnObj = $($target).ejButton("instance");
			 if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlinetemplate")
                $editTrLen = $("#" + this._id).find(".e-editedrow").length;
            this.model.allowSelection && !this._enableCheckSelect && !this.model.isEdit && this.selectRows(this.getIndexByRow($target.closest("tr")) - $editTrLen);
            if ($target.hasClass("e-cancelbutton"))
                this.model.isEdit = false;
            $.isFunction($.fn.ejDatePicker) && $("#" + this._id + "EditForm").find(".e-datepicker.e-js").ejDatePicker("hide");
            if ($target.hasClass("e-editbutton") && this.model.editSettings.editMode != "batch") {
                if (this.model.isEdit)
                    this.cancelEdit();
                var $tr = this.getRowByIndex(index);
                this.startEdit($tr);
            } else if ($target.hasClass("e-deletebutton")) {
                var $tr = this.getRowByIndex(index);
                if (this.model.editSettings.showDeleteConfirmDialog && !this._isUnboundColumn) {
                    this._toolbarOperation(this._id + "_delete");
                    return;
                }
                this.deleteRow($tr);
            }
            else if ($target.hasClass("e-savebutton")) {
                this.endEdit();
                rowData = this._currentJsonData[index];
            }
            else if ($target.hasClass("e-cancelbutton"))
                this.cancelEdit();
            params = { rowIndex: index, data: rowData, buttonModel: btnObj.model, commandType: $target.val() };
            if (ej.raiseWebFormsServerEvents) {
                var serverArgs = { model: this.model, originalEventType: "commandButtonClick" };
                var clientArgs = params;
				if(!ej.isNullOrUndefined(this.model.serverEvents) && $.inArray("commandButtonClick",this.model.serverEvents) != -1)
                  ej.raiseWebFormsServerEvents("commandButtonClick", serverArgs, clientArgs);
            }
        },
          
        addRecord: function (data, serverChange) {
            if (this.model.editSettings.allowAdding && (this.element.find(".e-gridcontent .gridform").length == 0)) {
            if (data) {
                if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                    var $addRow = ej.buildTag('tr.e-addedrow');
                    this.getContentTable().find('tbody').first().prepend($addRow);
                }
                var args = { data: data };
                args.action = "add";
                args.selectedRow = this._selectedRow();
                this._cAddedRecord = data;
                args.requestType = ej.Grid.Actions.Save;
                this._updateAction(args);
                args.selectedRow  != -1 && this.selectRows( args.selectedRow + 1)
                if (this._isUnboundColumn)
                    this._refreshUnboundTemplate(this.getContentTable());
                if (!serverChange) {
                    if ((this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") && this.model.allowPaging && this.model.pageSettings.pageSize < this.model.currentViewData.length && this.model.groupSettings.groupedColumns.length == 0 && !this.model.editSettings.showAddNewRow)
                        this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
                }
            } else
                    this._startAdd();
            }
        },
        
        updateRecord: function (keyField, data, action) {
            this._updateDeleteRecord(keyField, data, "update");
        },
        _updateDeleteRecord: function (keyField, data, action) {
            var dataMgr = ej.DataManager(this._currentJsonData), dataFilter = [], index, $row, $newrow;
            if (!ej.isNullOrUndefined(keyField))
                dataFilter = dataMgr.executeLocal(ej.Query().where(keyField, ej.FilterOperators.equal, ej.getObject(keyField,data)));
            if (dataFilter.length) {
                index = $.inArray(dataFilter[0], this._currentJsonData);
                var args = { data: data, rowData: data, requestType: ej.Grid.Actions.Save, previousData: dataFilter[0], rowIndex: index };
                var foreignKeyData = this._getForeignKeyData(args.data);
                if (!ej.isNullOrUndefined(foreignKeyData))
                    args.foreignKeyData = foreignKeyData;
                if ($(document.activeElement).closest('td.e-checkcell'))
                    args.checkboxTarget = document.activeElement;
                this._trigger("actionBegin", args);
                if (index != -1) {
                    $row = this.getRowByIndex(index);
                    if (action == "update") {
                        ej.copyObject(dataFilter[0], data);
                        if(this.model.scrollSettings.frozenColumns){
							var $frow = $($.render[this._id + "_JSONFrozenTemplate"](dataFilter))[0], $mrow = $($.render[this._id + "_JSONTemplate"](dataFilter))[0];
                            $row.hasClass("e-alt_row") ? ($row.find('td').hasClass('e-lastrowcell') ? $($frow).find('td').addClass("e-lastrowcell") && $($frow).addClass("e-alt_row") : $($frow).addClass("e-alt_row")) :$($frow).removeClass("e-alt_row");
                            $row.hasClass("e-alt_row") ? ($row.find('td').hasClass('e-lastrowcell') ? $($mrow).find('td').addClass("e-lastrowcell") && $($mrow).addClass("e-alt_row") : $($mrow).addClass("e-alt_row")) :$($mrow).removeClass("e-alt_row");                            $row[0].replaceWith($frow); $row[1].replaceWith($mrow);
                            $row[0].replaceWith($frow); $row[1].replaceWith($mrow);
                            var frozenRows = this.getContentTable().get(0).rows, movableRows = this.getContentTable().get(1).rows, height = 0;                            
                            if (this.model.scrollSettings.frozenRows)							
                            $(frozenRows[this.model.scrollSettings.frozenRows - 1].cells).add(movableRows[this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");                                                        
                            var frozenHeight = frozenRows[index].getClientRects()[0].height, movableHeight = movableRows[index].getClientRects()[0].height, height= ej.max([frozenHeight, movableHeight])
                            $(frozenRows[index]).height(height); $(movableRows[index]).height(height);
                        }
                        else{
                            $newrow = $($.render[this._id + "_JSONTemplate"](dataFilter));
                            $row.hasClass("e-alt_row") ? ($row.find('td').hasClass('e-lastrowcell') ? $newrow.find('td').addClass("e-lastrowcell") && $newrow.addClass("e-alt_row") : $newrow.addClass("e-alt_row")) : $newrow.removeClass("e-alt_row");
                            $row.replaceWith($newrow);
							if(this.model.scrollSettings.frozenRows){
								var gridRows = this.getRows();
							    $(gridRows[this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
                            }
                        }
                        if (this._isUnboundColumn)
                            this._refreshUnboundTemplate(this.getContentTable());
                        if (this.model.editSettings.editMode == 'batch')
                            this.batchChanges.changed.push(dataFilter[0]);
                        else {
                            var promise = this._dataManager[action](keyField, data);
                            var proxy = this;
                            if (promise && $.isFunction(promise.promise)) {
                                promise.done(function (e) {
                                    if (proxy.model.editSettings.editMode != 'batch' && (proxy.model.sortSettings.sortedColumns.length || proxy.model.summaryRows.length > 0 || proxy.model.groupSettings.groupedColumns.length || !ej.isNullOrUndefined(proxy._searchCount) || proxy.filterColumnCollection.length))
                                        proxy._processBindings(args);
                                    else{
										if(proxy.model.scrollSettings.frozenColumns){
											proxy._rowEventTrigger($frow, data);
											proxy._rowEventTrigger($mrow, data);
										}
										else
											proxy._rowEventTrigger($newrow, data);
                                        proxy._trigger("actionComplete", args);
									}
                                });
                                promise.fail(function (e) {
                                    proxy._trigger("actionFailure", args);
                                });
                            }
                            else {
                                if (proxy.model.editSettings.editMode != 'batch' && (proxy.model.sortSettings.sortedColumns.length || proxy.model.summaryRows.length > 0 || proxy.model.groupSettings.groupedColumns.length || !ej.isNullOrUndefined(proxy._searchCount) || proxy.filterColumnCollection.length))
                                    proxy._processBindings(args);
                                else{
									if(proxy.model.scrollSettings.frozenColumns){
										proxy._rowEventTrigger($frow, data);
										proxy._rowEventTrigger($mrow, data);
									}
									else
										proxy._rowEventTrigger($newrow, data);
                                    proxy._trigger("actionComplete", args);
								}
                            }
                        }
                        if (this._isMapSelection) {
                            this._selectionByGrid = true;
                            this.multiSelectCtrlRequest = true;
                            data[this._selectionMapColumn] ? this.selectRows(index) : this.clearSelection(index);
                            this._selectionByGrid = false;
                        }
                    }
                    else {
                        if ($.inArray(index, this.selectedRowsIndexes)==-1) 
                            this.selectedRowsIndexes.push(index);
                        this.deleteRow($row);
                    }
                    if (this.model.editSettings.editMode == 'batch') {
                        this.batchSave();
                        this._confirmedValue=true;
                    }
                }
            }
            else {
                if (this.model.editSettings.editMode == 'batch') {
                    this.batchChanges[action == "update" ? "changed":"deleted"].push(data);
                    this.batchSave();
                    this._confirmedValue=true;
                }
                else
                    this._dataManager[action](keyField, data);
            }
           
        },
        
        deleteRecord: function (keyField, data) {
            this._updateDeleteRecord(keyField, data, "remove");
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.sort = {
        _addSortElementToColumn: function (field, direction) {
            var duplicateColumn = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("field", "equal", field)), imageDirection;
            if (duplicateColumn.length > 1 && !ej.isNullOrUndefined(this._$curSElementTarget))
                var column = this.getColumnByHeaderText(this._$curSElementTarget.text());
            else
                var column = this.getColumnByField(field);
            if (ej.isNullOrUndefined(column))
                return;
            var index = $.inArray(column, this.model.columns);
            var sortcolumn = this.getsortColumnByField(field);
            var sortindex = $.inArray(sortcolumn, this.model.sortSettings.sortedColumns);
            var $headerCell = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").find(".e-headercell").not(".e-detailheadercell").eq(index);
            var $headerCellDiv = $headerCell.find(".e-headercelldiv");
            var $filterset = $headerCell.find(".e-filterset");
            var $togglegroup = $headerCell.find(".e-gridgroupbutton");
            if($filterset.length && $togglegroup.length) {
              if(!this.model.enableRTL) {
                $headerCell.addClass("e-headercellsortgroupfilter");
                $filterset.addClass("e-sortfiltergroupicon");
                $togglegroup.addClass("e-togglesortgroupfilter");
              }
              else 
                $headerCellDiv.addClass("e-headercelldivsortgroupfilter");
            }
            else if($filterset.length) {
                if(!this.model.enableRTL) {
                    $headerCell.addClass("e-headercellsortfilter");
                    $filterset.addClass("e-sortfiltericon");
                }
                else
                    $headerCellDiv.addClass("e-headercellsortfilter");
            }
            else if($togglegroup.length) {
                if(!this.model.enableRTL) {
                    $headerCell.addClass("e-headercellsortfilter");
                    $togglegroup.addClass("e-sortgroupicon");
                }
                else
                    $headerCellDiv.addClass("e-headercellsortfilter");
                if(this.model.enableRTL && !$filterset.length) 
                    $togglegroup.addClass("e-rtltoggle");
            }
            else
                $headerCell.addClass("e-headercellsort");
            direction = ej.isNullOrUndefined(direction) ? "ascending" : direction.toLowerCase();
            $headerCell.find(".e-ascending,.e-descending").remove();
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[data-ej-mappingname='" + field + "']").find(".e-ascending,.e-descending").not(".e-ungroupbutton").remove();
            imageDirection = direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
            var opacity = 1;
            if (this.model.allowSorting && this.model.allowMultiSorting && this.model.sortSettings.sortedColumns.length > 1) {
                for (var i = 1; i <= sortindex; i++) {
                    opacity = opacity + 1;
                }
                if ($headerCellDiv.css("text-align") == "right") {
                    $headerCellDiv.prepend(this._createSortNumber(opacity, $headerCellDiv).addClass("e-sortnumber"));
                    $headerCell.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
                }
                else {
                    $headerCellDiv.prepend(this._createSortNumber(opacity, $headerCellDiv).addClass("e-sortnumber"));
                    $headerCell.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
                }
            }
            else
                $headerCell.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
           if(this.model.enableRTL) {
               if($filterset.length && $togglegroup.length)
                    $headerCell.find(".e-ascending,.e-descending").addClass("e-rtlsortfiltertoggle");
               else if($filterset.length || $togglegroup.length)
                    $headerCell.find(".e-ascending,.e-descending").addClass("e-rtlgrouporfilter");
               else
                    $headerCell.find(".e-ascending,.e-descending").addClass("e-rtlsortadjust");
            }
            else if(!this.model.enableRTL && !$filterset.length && !$togglegroup.length)
                $headerCell.find(".e-ascending,.e-descending").addClass("e-sortadjust");
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[data-ej-mappingname='" + field + "']").append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
            $headerCellDiv.parent().attr("aria-sort", direction);
        },
        _removeSortElementFromColumn: function (field) {
            var column = this.getColumnByField(field);
            var index = $.inArray(column, this.model.columns);
            var $headerCellDiv = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell").eq(index).find(".e-headercelldiv");
            $headerCellDiv.find(".e-ascending,.e-descending").remove();
            $headerCellDiv.parent().prop("aria-sort",false);
        },
        _sortCompleteAction: function (args) {
            var imageDirection, prevCol;
            var $columnheader = this.getHeaderTable().find(".e-columnheader");
            prevCol = this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-ascending,.e-descending,.e-number").parent().attr('data-ej-mappingname');
            $columnheader.find(".e-headercell")
                    .find(".e-ascending,.e-descending,.e-number").remove();
            var $filterset = $columnheader.find(".e-filterset");
            var $togglegroup = $columnheader.find(".e-gridgroupbutton");
            if($filterset.length || $togglegroup.length)  {
                $columnheader.find(".e-sortfiltericon").removeClass("e-sortfiltericon");
                $columnheader.find(".e-headercellsortfilter").removeClass("e-headercellsortfilter");
                $columnheader.find(".e-sortgroupicon").removeClass("e-sortgroupicon");
                $columnheader.find(".e-headercellsortgroupfilter").removeClass("e-headercellsortgroupfilter");
                $columnheader.find(".e-headercelldivsortgroupfilter").removeClass("e-headercelldivsortgroupfilter");
                $columnheader.find(".e-sortfiltergroupicon").removeClass("e-sortfiltergroupicon");
                $columnheader.find(".e-togglesortgroupfilter").removeClass("e-togglesortgroupfilter");
            }
            else
                $columnheader.find(".e-headercellsort").removeClass("e-headercellsort");
            $(this.getHeaderTable().find(".e-columnheader").find(".e-headercell:not(.e-stackedHeaderCell,.e-detailheadercell,.e-hide)")[this.getColumnIndexByField(prevCol)]).removeAttr("aria-sort");
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this.element.find(".e-groupdroparea").find("div[data-ej-mappingname='" + args.columnName + "']").find(".e-ascending,.e-descending,.e-number").not(".e-ungroupbutton").remove();
            this.getHeaderTable().find("[aria-sort]").prop("aria-sort",false);
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (this.model.groupSettings.groupedColumns.length && this._$curSElementTarget != null) {
                var $element = this._checkEinGroupDrop($.trim(this._$curSElementTarget.attr("data-ej-mappingname")));
                if (!ej.isNullOrUndefined($element)) {
                    imageDirection = (ej.isNullOrUndefined(args.columnSortDirection) || args.columnSortDirection == "" ? this.getsortColumnByField(this._$curSElementTarget.attr("data-ej-mappingname")).direction.toLowerCase() : args.columnSortDirection) == "ascending" ? "e-rarrowup-2x" : "e-rarrowdown-2x"
                    $element.find(".e-ascending,.e-descending").removeClass().addClass("e-icon e-" + (ej.isNullOrUndefined(args.columnSortDirection) || args.columnSortDirection == "" ? this.getsortColumnByField(this._$curSElementTarget.attr("data-ej-mappingname")).direction.toLowerCase() : args.columnSortDirection) + " " + imageDirection);
                }
            }
            this.multiSortRequest = false;
            if (((!this.model.allowScrolling || !this.initialRender || this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0) && !this.model.allowResizeToFit))
                this.setWidthToColumns();
        },
        
        removeSortedColumns: function (fieldName) {
            if ($.isArray(fieldName)) {
                for (var i = 0; i < fieldName.length; i++) {
                    this._removeSortedColumnFromCollection(fieldName[i]);
                }
            }
            else
                this._removeSortedColumnFromCollection(fieldName);
            this.multiSortRequest = true;
            this.sortColumn(null, null);
        },
        _removeSortedColumnFromCollection: function (fieldName) {
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == fieldName) {
                    this.model.sortSettings.sortedColumns.splice(i, 1);
                    break;
                }
            }
        },
        
        clearSorting: function () {
            var proxy = this;
            this.model.sortSettings.sortedColumns = $.grep(this.model.sortSettings.sortedColumns, function (value, index) {
                if ($.inArray(value.field, proxy.model.groupSettings.groupedColumns) != -1)
                    return true;
                return false;
            });
            this._$prevSElementTarget = null;
            this._$curSElementTarget = null;
            this.refreshContent();
        },
        
        sortColumn: function (columnName, columnSortDirection) {
            if (!this.model.allowSorting || $.inArray(columnName, this._disabledSortableColumns) != -1 || (columnName != null && columnName.length == 0))
                return;
            var args = {};
            if (!this.multiSortRequest) {
                var proxy = this;
                this.model.sortSettings.sortedColumns = $.grep(this.model.sortSettings.sortedColumns, function (value, index) {
                    if ($.inArray(value.field, proxy.model.groupSettings.groupedColumns) != -1)
                        return true;
                    return false;
                });
            }
            args.requestType = ej.Grid.Actions.Sorting;
            this._cSortedColumn = args.columnName = columnName;
            this._cSortedDirection = args.columnSortDirection = ej.isNullOrUndefined(columnSortDirection) ? ej.sortOrder.Ascending : columnSortDirection.toLowerCase();
            if (this._cSortedColumn !== null) {
                this._removeSortedColumnFromCollection(columnName);
                this.model.sortSettings.sortedColumns.push({ field: this._cSortedColumn, direction: this._cSortedDirection });
            }
            var returnValue = this._processBindings(args);
            if (returnValue)
                this._cSortedDirection = this._cSortedColumn = null;
            this._primaryKeyValues = [];
        },
        _createSortElement: function () {
            return ej.buildTag('span.e-icon', "&#160;");
        },
        _renderMultiTouchDialog: function () {
            this._customPop = ej.buildTag("div.e-gridpopup", "", { display: "none" });
            var $content = ej.buildTag("div.e-content"), $downTail = ej.buildTag("div.e-downtail e-tail");
            if (this.model.allowMultiSorting) {
                var $selElement = ej.buildTag("span.e-sortdirect e-icon");
                $content.append($selElement);
            }
            if (this.model.selectionType == "multiple") {
                var $selElement = ej.buildTag("span.e-rowselect e-icon");
                $content.append($selElement);
            }
            this._customPop.append($content);
            this._customPop.append($downTail);
            this.element.append(this._customPop);
        },

    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.filter = {

        getFilterBar: function () {
            return this._gridFilterBar;
        },

        setGridFilterBar: function (value) {
            this._gridFilterBar = value;
        },

        filterColumn: function (fieldName, filterOperator, filterValue, predicate, matchcase, actualFilterValue, actualOperator) {
            if (!this.model.allowFiltering)
                return;
            var column,_format;
			typeof fieldName == "object"?column = this.getColumnByField(fieldName[0].field):column = this.getColumnByField(fieldName);
            if (!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.filterBarTemplate) && column.type == "boolean" && filterValue == "true" || filterValue == "false")
                filterValue = JSON.parse(filterValue);
            if (column && ej.isNullOrUndefined(column.format)) {
                if (column.type == "date")
                    _format = ej.preferredCulture().calendar.patterns.d; //System Date format
                else if (column.type == "datetime")
                    _format = ej.preferredCulture().calendar.patterns.f; //System DateTime format
            }
            else if (column)
                _format = column.format.replace("{0:", "").replace('}', "");
            if (!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.filterBarTemplate) && (column.type == "date" || column.type == "datetime") && filterValue.length > 0) {
                filterValue = ej.parseDate(filterValue, _format, this.model.locale);
            }
            var filterCollection = [];
            if (typeof (fieldName) == "object")
                filterCollection = fieldName;
            else
                filterCollection.push({ field: fieldName, operator: filterOperator, value: filterValue, predicate: predicate, matchcase: matchcase, actualFilterValue: actualFilterValue });

            for (var i = 0; i < filterCollection.length; i++) {
                var fieldName = filterCollection[i].field, filterOperator = filterCollection[i].operator,
                filterValue = filterCollection[i].value, predicate = filterCollection[i].predicate,
                matchcase = !ej.isNullOrUndefined(filterCollection[i].matchcase) ? filterCollection[i].matchcase : false, actualFilterValue = filterCollection[i].actualFilterValue;
                var args = {};
                args.requestType = ej.Grid.Actions.Filtering;
                args.currentFilterObject = [];
                this._$curFieldName = fieldName;
                if (!$.isArray(filterOperator))
                    filterOperator = $.makeArray(filterOperator);
                if (!$.isArray(filterValue))
                    filterValue = $.makeArray(filterValue);
                if (!$.isArray(predicate))
                    predicate = $.makeArray(predicate);
                var firstLoop = false;
                var filterCol = this._filterCollection;
                this._currentFilterColumn =(!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.foreignKeyValue) && (this._$curFilterValue != column.foreignKeyValue) && ej.isNullOrUndefined(column.filterBarTemplate))? this._currentFilterColumn :this.getColumnByField(fieldName);
                for (var index = 0; index < filterOperator.length; index++) {
                    var filterObject = {
                        field: fieldName,
                        operator: filterOperator[index],
                        value: filterValue[index],
                        matchcase: matchcase,
                        predicate: predicate[index],
                        actualFilterValue: ej.getObject("value", actualFilterValue),
                        actualOperator: ej.getObject("operator", actualFilterValue)
                    };
                    var predicated = ej.getObject("ejpredicate", actualFilterValue);
                    if (predicated)
                        filterObject = predicated;
                    if ((this._$colType == null || this.model.filterSettings.filterType == "filterbar") && !ej.isNullOrUndefined(this._currentFilterColumn))
                        this._$colType = this._currentFilterColumn.type;
                    if (this.model.filterSettings.filteredColumns.length == 0 && filterObject.value !== "") {
                        if ((this._$colType == "date" || this._$colType == "datetime") && this.model.filterSettings.filterType !== "excel" && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
                            this._setDateFilters(filterObject);
                        else
                            this.model.filterSettings.filteredColumns.push(filterObject);
                    } else {
                        var proxy = this;
                        if (!firstLoop) {
                            var dataManger = ej.DataManager(this.model.filterSettings.filteredColumns);
                            var query = new ej.Query().where("field", ej.FilterOperators.equal, filterObject.field);
                            var object = [];
							if((!ej.isNullOrUndefined(column.filterType) && column.filterType != 'excel') ||  (ej.isNullOrUndefined(column.filterType) && this.model.filterSettings.filterType != "excel") || filterObject.value == "")
								object = dataManger.executeLocal(query);
                            for (var j = 0; j < object.length; j++) {
                                var objectIndex = $.inArray(object[j], this.model.filterSettings.filteredColumns)
                                if (objectIndex != -1)
                                    this.model.filterSettings.filteredColumns.splice(objectIndex, 1);
                            }
                        }
                        if (filterObject.value !== "") {
                            if ((this._$colType == "date" || this._$colType == "datetime") && this.model.filterSettings.filterType !== "excel" && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
                                this._setDateFilters(filterObject);
                            else
                                this.model.filterSettings.filteredColumns.push(filterObject);
                        }
                    }
                    firstLoop = true;
                    args.currentFilterObject.push(filterObject);
                }
                args.filterCollection = this.model.filterSettings.filteredColumns;
                args.currentFilteringColumn = fieldName;
                var returnValue = this._processBindings(args);
                if (returnValue) {
                    this.model.filterSettings.filteredColumns.reverse().splice(0, filterOperator.length);
                    this.model.filterSettings.filteredColumns.reverse();
                }
                if (this.model.filterSettings.filterType == "filterbar") {
					var filterbaroperator = null, operSymbols = ej.data.operatorSymbols;
					for(var oper in operSymbols){
						if(operSymbols[oper] == filterOperator[0]){
							filterbaroperator=oper; 
							break;
						}
					}
				    var col = this._currentFilterColumn;
			        var fltrId = !ej.isNullOrUndefined(col) && ej.isNullOrUndefined(col["foreignKeyValue"]) ? fieldName : fieldName  + "_" + col["foreignKeyValue"] ;
					var filterBarCell = this.getHeaderTable().find("#" + fltrId.replace(/[^a-z0-9|s\_]/gi, '') + "_filterBarcell"), reg = /[<=|>=|<|>]+/;
                    var checkOper = !ej.isNullOrUndefined(operSymbols[filterBarCell.val().match(reg)]) && operSymbols[filterBarCell.val().match(reg)][0] == filterbaroperator;
                    if (filterBarCell.val() == "" || ((filterBarCell.val() != filterValue) || !checkOper) && !this._fltrBarcell) {
                        if (filterValue[0] instanceof Date)
                            this._setFilterbarValues(filterBarCell,ej.format(filterValue[0], _format, this.model.locale),filterOperator[0]);
                        else
                            this._setFilterbarValues(filterBarCell,filterValue[0],filterOperator[0]);
                        this._currentFilterbarValue = filterValue;
                        this.filterStatusMsg = "";
                        this._showFilterMsg();
                    }
                }
                if (!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.filterBarTemplate)) {
                    this.filterStatusMsg = "";
                    this._currentFilterbarValue = args.currentFilterObject[0].value;
                    if (this._oldFilterColumn != column && (this.filterColumnCollection.length > 0 && $.inArray(column, this.filterColumnCollection) == -1))
                        this.filterColumnCollection.push(column);
                    this._oldFilterColumn = this._currentFilterColumn = column;
                    this._showFilterMsg();
                }
                this._fltrBarcell = false;
            }
        },

        search: function (searchString) {
            var args = {};
            if ($("#" + this._id + "_search").find("input").val() != searchString);
            $("#" + this._id + "_search").find("input").val(searchString);
            args.requestType = ej.Grid.Actions.Search;
            args.keyValue = searchString;
            this.model.searchSettings.fields = this.model.searchSettings.fields.length != 0 ? this.model.searchSettings.fields : this.getColumnFieldNames();
            if (searchString != "" || this.model.searchSettings.key != "") {
                this.model.searchSettings.key = searchString.toLowerCase() == this.localizedLabels.True.toLowerCase() ? "true" : searchString.toLowerCase() == this.localizedLabels.False.toLowerCase() ? "false" : searchString;
                this._processBindings(args);
            }
            this._primaryKeyValues = [];
        },
        _filterBarHandler: function (e) {
            var keycode = e.keyCode, $target = $(e.target);
            if ($target.closest(".e-grid").attr("id") !== this._id)
                return;
            if ((this.model.filterSettings["filterBarMode"] == "immediate" || keycode == 13) && keycode != 9) {
                var $target = $(e.target);
                this.filterStatusMsg = "";
                var fieldName = $target.prop("id").replace("_filterBarcell", "");
                var column;
                for (var k = 0; k < this.model.columns.length; k++) {
                    if (!ej.isNullOrUndefined(this.model.columns[k].foreignKeyValue) && fieldName.indexOf("_" + this.model.columns[k].foreignKeyValue) != -1) {
                        column = this.model.columns[k];
                        break;
                    }
                    else
                        if (this.model.columns[k].field.replace(/[^a-z0-9|s\_]/gi, '') == fieldName) {
                            column = this.model.columns[k];
                            break;
                        }
                }
                if (column == null)
                    return;
                this._currentFilterColumn = column;
                this._$curFieldName = column.field;
				this._$curFilterValue = column.foreignKeyValue; 
                if (this._currentFilterColumn != this._oldFilterColumn)
                    this.filterValueOldLength = 0;
                this._currentFilterbarValue = $target.val().toLowerCase() == this.localizedLabels.True.toLowerCase() ? "true" : $target.val().toLowerCase() == this.localizedLabels.False.toLowerCase() ? "false" : $target.val();
                this.filterValueCurrentLength = this._currentFilterbarValue.length;
                if (((this.filterValueCurrentLength == 0 && this.filterValueOldLength == 0) || this._currentFilterbarValue == this.OldfilterValue) && this._currentFilterColumn == this._oldFilterColumn && !this.model.scrollSettings.enableVirtualization) {
                    this._showFilterMsg();
                    return;
                }
                this._skipFilterProcess = this._checkForSkipInput();
                if (!this._skipFilterProcess) {
                    this._processFilter(e);
                } else {
                    if (this._currentFilterColumn.type == "string") {
                        this.filterStatusMsg = "Invalid Filter Data";
                        this._showFilterMsg();
                    } else {
                        this._skipFilterProcess = false;
                        if (!this.model.scrollSettings.enableVirtualization)
                            this._showFilterMsg();
                        return;
                    }
                }
            }
        },
       _renderResponsiveFilter: function () {
            var $outerDiv = ej.buildTag('div#'+this._id+'responsiveFilter.e-resFilterDiv', '', { 'width': '100%', 'padding': '0px' });
            var height = $(window).height() + 1;
            var headerHieght = height * (8 / 100);
            var width = this.element.height() > height ? $(window).width() + 16.5 : $(window).width();
            var $columnDiv = ej.buildTag('div.columnDiv', '', { width: '100%' });
            for (var i = 0; i < this.model.columns.length; i++) {
                var $cDiv = ej.buildTag('div.e-responsivefilterColDiv', '', { width: '100%' }, { 'data-ej-mappingname': this.model.columns[i].field });
                var $span = ej.buildTag('span', this.model.columns[i].headerText, { 'margin-left': '4%' });
                $cDiv.append($span);
                $columnDiv.append($cDiv);
            }
            $outerDiv.append($columnDiv);
            this.element.append($outerDiv);
            var gridObj = this;
            var widt = this.element.outerWidth();
            var $headerDiv = ej.buildTag('div.e-resFilterDialogHeaderDiv', '', { 'height': headerHieght });
            var $span = ej.buildTag('div.e-labelRes', '<span>Filter</span>');
            var $resIcon = ej.buildTag('div.e-resFilterleftIcon', '', { 'margin-top': '3%' });
            var $resspan = ej.buildTag('span.e-icon e-responsiveFilterClear e-resIcon', '', { 'font-size': '23px' });
            var $divIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', { 'float': 'right', 'margin-top': '3%' }, { closeDialogue: 'responsiveFilter', gridEle: true });
            var $spanIcon = ej.buildTag('span.e-icon e-responisveClose e-resIcon', '', { 'font-size': '23px' }, { closeDialogue: 'responsiveFilter', gridEle: true });
            $divIcon.click(function (e) {
                $("#"+gridObj._id+"responsiveFilter").css('display', 'none');
                gridObj.element.css('display', 'block');
            });
            $resIcon.click(function (e) {
                $("#"+gridObj._id+"responsiveFilter").find('.e-responsivefilterColDiv').find('.e-filternone').click();
            });
            $headerDiv.append($resIcon.append($resspan));
            $headerDiv.append($span).append($divIcon.append($spanIcon));
            $outerDiv.prepend($headerDiv);
            $outerDiv.insertAfter(this.element);
            $outerDiv.css('display', 'none');		
            this._on($("#"+this._id+"responsiveFilter"),"click", ".e-responsivefilterColDiv", $.proxy(this._mouseClickHandler, this)) ;
        },
        _closeDivIcon: function (sender) {
            var $div = $(sender.target);
            if (!ej.isNullOrUndefined($div.attr('closeDialogue'))) {
                var $dialog = $("#" + $div.attr('closeDialogue'));
                if (!ej.isNullOrUndefined($dialog.data('ejDialog')))
                    $dialog.ejDialog('close');
                else
                    $dialog.css('display', 'none');
            }
            if (!ej.isNullOrUndefined($div.attr('gridEle'))) {
                this.element.css('display', 'block');
            }
            if (!ej.isNullOrUndefined($div.attr('openDialogue'))) {
                if (this.model.enableResponsiveRow || $div.attr('closeDialogue').indexOf('Custom') != -1) {
                    var $dialog = $("#" + $div.attr('openDialogue'));
                    if (!ej.isNullOrUndefined($dialog.data('ejDialog')))
                        $dialog.ejDialog('open');
                    else
                        $dialog.css('display', 'block');
                }
                else
                    this.element.css('display', 'block');
            }
        },
        _setResponsiveFilterIcon: function () {
            var $div = $("#"+this._id+"responsiveFilter").find('.columnDiv'), $proxy = this;
            $div.find('.e-filtericon').remove();
            for (var i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
                var column = this.model.filterSettings.filteredColumns[i];
                var $selcDiv = $div.find('.e-responsivefilterColDiv[data-ej-mappingname=' + column.field + ']');
                var $divIcon = ej.buildTag('div.e-filtericon e-icon e-resIcon e-filterset e-filternone e-filterreset', '', { float: 'right', height: '22px', width: '21px', 'font-size': '20px', 'margin-right': '3%', 'margin-top': '2%' });
                var $iconSapn = ej.buildTag('span.e-filtericon e-icon e-resIcon e-filterset e-filternone', '', {}, { 'colType': column.type });
                $selcDiv.find('.e-filternone').remove();
                $selcDiv.append($divIcon);
                $iconSapn.click(function (e) {
                    var $target = e.target;
                    $proxy._$colType = $target.attr('colType');
                    $proxy._fltrClrHandler();
                    $target.remove();
                })
            }
        },
        _renderExcelFilter: function () {
            var filterCol = this.model.filterSettings.filteredColumns.length != 0 ? this.model.filterSettings.filteredColumns[0].field : null;
            var model = {
                instance: this,
                showSortOptions: this.model.allowSorting,
                allowFormatFiltering: this.model.filterSettings.allowFormatFiltering,
                allowCaseSensitive: this.model.filterSettings.enableCaseSensitivity,
			    allowAccent: this.model.filterSettings.ignoreAccent,
                maxFilterLimit: this.model.filterSettings.maxFilterChoices,
                interDeterminateState: this.model.filterSettings.enableInterDeterminateState,
                enableComplexBlankFilter: this.model.filterSettings.enableComplexBlankFilter,
                blankValue: this.model.filterSettings.blankValue,
                filterHandler: ej.proxy(this._filterHandler, this),
                initFilterCol: filterCol,
                actionBegin: "actionBegin",
                actionComplete: "actionComplete"
            };
            this._excelFilter = new ej.excelFilter(model);
            $.extend(this._excelFilter, this.model.filterSettings);
        },
        _filterHandler: function (args) {
            var arg = {}, fQMgr;
            arg.requestType = args.action == "sorting" ? args.action : "filtering";
            var temp = this.model.filterSettings.filteredColumns;
            if (args.action == "filtering") {
                fQMgr = ej.DataManager(this.model.filterSettings.filteredColumns);
                var query = new ej.Query().where("field", ej.FilterOperators.equal, args.fieldName);
                var object = fQMgr.executeLocal(query);
                for (var i = 0; i < object.length; i++) {
                    var objectIndex = $.inArray(object[i], this.model.filterSettings.filteredColumns)
                    if (objectIndex != -1)
                        this.model.filterSettings.filteredColumns.splice(objectIndex, 1);
                }
                ej.merge(this.model.filterSettings.filteredColumns, args.filterCollection);
                args.currentFilterCollection = args.filterCollection;
            }
            else if (args.action == "clearfiltering") {
                var filterObj = args.filterDetails;
                delete this._excelFilter._predicates[0][args.fieldName];
                this.filterColumn(filterObj.field, filterObj.operator, filterObj.value, filterObj.predicate);
                for (var i = 0; i < this.filterColumnCollection.length; i++) {
                    if (this.filterColumnCollection[i].field == filterObj.field)
                        this.filterColumnCollection.splice(i, 1);
                }
                return;
            }
            else if (args.action == "sorting") {
                var sortObj = args.sortDetails;
                if (ej.gridFeatures.sort)
                    this.sortColumn(sortObj.field, sortObj.direction);
                this._excelFilter.closeXFDialog();
                return;
            }

            arg.currentFilteringColumn = args.fieldName;
			arg.filterCollection = args.filterCollection;
            arg.predicated = args.ejpredicate;
            var returnValue = this._processBindings(arg);
            if (returnValue)
                this.model.filterSettings.filteredColumns = temp;
        },
        _renderFiltering: function () {
            var $headerTable = this.getHeaderTable(), args, temp;
            var $tr = ej.buildTag('tr.e-filterbar'), $trClone, filteredFields = [], $input;
            if (this.model.detailsTemplate || this.model.childGrid) $tr.append(ej.buildTag('th.e-filterbarcell e-mastercell'));
            for (var column = 0; column < this.model.columns.length; column++) {
                var $th = ej.buildTag('th.e-filterbarcell'), $div = ej.buildTag('div.e-filterdiv'), $span = ej.buildTag('span.e-cancel e-icon e-hide');
                var fltrField = ej.isNullOrUndefined(this.model.columns[column]["field"]) ? this.model.columns[column]["field"] : this.model.columns[column].field.replace(/[^a-z0-9|s_]/gi, ''), fltrId = ej.isNullOrUndefined(this.model.columns[column]["foreignKeyValue"]) ? fltrField + "_filterBarcell" : fltrField + "_" + this.model.columns[column]["foreignKeyValue"] + "_filterBarcell";
                if(!ej.isNullOrUndefined(this.model.columns[column]["priority"]))
					$($th).addClass("e-table-priority-" + this.model.columns[column]["priority"]);
				if (this.model.columns[column]["allowFiltering"] != false && !ej.isNullOrUndefined(this.model.columns[column].filterBarTemplate) && !ej.isNullOrUndefined(this.model.columns[column]["field"])) {
                    $th.addClass('e-fltrtemp');
                    $div.addClass('e-fltrtempdiv');
                    if (ej.isNullOrUndefined(this.model.columns[column].filterBarTemplate.create)) {
                        $input = ej.buildTag('input e-filtertext', "", {}, { title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle, id: fltrId, "class": "e-filterUi_input e-filtertext e-fltrTemp" });
                    }
                    else {
                        args = { columnIndex: column, column: this.model.columns[column] }
                        temp = this.model.columns[column].filterBarTemplate.create;
                        if (typeof temp == "string")
                            temp = ej.util.getObject(temp, window);
                        $input = temp(args)
                        $input = $($input).attr({ title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle, id: fltrId, "class": "e-filterUi_input e-filtertext e-fltrTemp" });
                    }
                }
                else {
                    $div.addClass('e-fltrinputdiv');
                    var fltrField = this.model.columns[column]["field"], fltrId = ej.isNullOrUndefined(this.model.columns[column]["foreignKeyValue"]) ? fltrField + "_filterBarcell" : fltrField + "_" + this.model.columns[column]["foreignKeyValue"] + "_filterBarcell";
                    $input = ej.buildTag('input.e-ejinputtext e-filtertext', "", {}, { title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle, type: "search", id: fltrId.replace(/[^a-z0-9|s\_]/gi, '') });
                }
                if (this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "filterbar" && $.inArray(this.model.columns[column].field, filteredFields) == -1) {
                    for (var fColumn = 0; fColumn < this.model.filterSettings.filteredColumns.length; fColumn++) {
                        if (this.getColumnIndexByField(this.model.filterSettings.filteredColumns[fColumn].field) == column) {
                            this._setFilterbarValues($input,this.model.filterSettings.filteredColumns[fColumn].value,this.model.filterSettings.filteredColumns[fColumn].operator);
                            if ($.inArray(this.model.filterSettings.filteredColumns[fColumn].field, filteredFields) == -1) filteredFields.push(this.model.filterSettings.filteredColumns[fColumn].field);
                        }
                    }
                }
                if (this.model.columns[column]["allowFiltering"] === false || this.model.columns[column]["field"] == "" || ej.isNullOrUndefined(this.model.columns[column]["field"])) {
                    $input.attr("disabled", true).addClass("e-disable");
                    this._disabledFilterableColumns.push(this.model.columns[column]["headerText"]);
                }
                this.model.columns[column]["visible"] === false && $th.addClass("e-hide");
                !ej.isNullOrUndefined(this.model.columns[column]["cssClass"]) && $th.addClass(this.model.columns[column]["cssClass"]);
                if (this.model.columns[column]["allowFiltering"] != false && !ej.isNullOrUndefined(this.model.columns[column].filterBarTemplate))
                    $div.append($input);
                else
                    $div.append($input).append($span);
                $tr.append($th.append($div));
                if (column == this.model.scrollSettings.frozenColumns - 1) {
                    $trClone = $tr.clone();
                    $headerTable.find("thead").first().append($trClone);
                    $tr.empty();
                }
            }
            $headerTable.find("thead").last().append($tr);
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10) {
                var filterBarCell = $headerTable.find("thead").find(".e-ejinputtext.e-filtertext");
                for (var cell = 0; cell < filterBarCell.length; cell++)
                    ej.ieClearRemover(filterBarCell[cell]);
            }
            this.setGridFilterBar($tr);
        },
        _renderFilterBarTemplate: function () {
            var args, temp1, temp2, flag = false;
            for (var count = 0 ; count < this.model.columns.length; count++) {
                if (this.model.columns[count]["allowFiltering"] != false && !ej.isNullOrUndefined(this.model.columns[count].filterBarTemplate) && !ej.isNullOrUndefined(this.model.columns[count]["field"])) {
                    temp1 = this.model.columns[count].filterBarTemplate.read;
                    if (typeof temp1 == "string")
                        temp1 = ej.util.getObject(temp1, window);
                    if (this.model.columns[count].foreignKeyField)
                        args = { element: this.getHeaderTable().find('.e-filterbar').find('.e-fltrtemp').find("#" + this.model.columns[count].field.replace(/[^a-z0-9|s_]/gi, '') + "_" + this.model.columns[count].foreignKeyValue.replace(/[^a-z0-9|s_]/gi, '') + "_filterBarcell"), columnIndex: count, column: this.model.columns[count] }
                    else
                        args = { element: this.getHeaderTable().find('.e-filterbar').find('.e-fltrtemp').find("#" + this.model.columns[count].field.replace(/[^a-z0-9|s_]/gi, '') + "_filterBarcell"), columnIndex: count, column: this.model.columns[count] }
                    if (typeof args.column.filterBarTemplate.read == "string")
                        args.column.filterBarTemplate.read = temp1;
                    temp2 = this.model.columns[count].filterBarTemplate.write;
                    if (typeof temp2 == "string")
                        temp2 = ej.util.getObject(temp2, window);
                    if (this.model.filterSettings.filteredColumns.length > 0) {
                        for (var index = 0 ; index < this.model.filterSettings.filteredColumns.length; index++) {
                            if (this.model.columns[count].field == this.model.filterSettings.filteredColumns[index].field)
                                args.modelVal = this.model.filterSettings.filteredColumns[index].value;
                        }
                    }
                    temp2.call(this, args);
                    flag = true
                }
            }
            if (flag)
                this.model.filterSettings.filterBarMode = ej.Grid.FilterBarMode.OnEnter;
        },
        _closeFilterDlg: function () {
            if (!ej.isNullOrUndefined($("#" + this._id + "_" + this._$colType + "Dlg").data('ejDialog')))
                $("#" + this._id + "_" + this._$colType + "Dlg").ejDialog('close');
            else
                $("#" + this._id + "_" + this._$colType + "Dlg").css('display', 'none');
            this._$fDlgIsOpen = false;
            this._$menuDlgIsOpen = false;
        },
        _filterBarClose: function (e) {
            var $target = $(e.target);
            if ($target.closest(".e-grid").attr("id") !== this._id)
                return;
            if (e.type == "click" && $target.hasClass("e-cancel")) {
                var $targetText = $target.prev();
                $targetText.focus().val("");
                $targetText.trigger("keyup");
                e.stopPropagation();
            }
            if (e.type == "focusin" && $target.hasClass("e-filtertext")) {
                $target = $(e.target).next();
                this.getFilterBar().find(".e-cancel").addClass("e-hide");
                $target.removeClass("e-hide");
            }
        },
        _processFilter: function (e) {
            if (!this._alreadyFilterProcessed) {
                this._alreadyFilterProcessed = true;
                this._startTimer(e);
            } else {
                this._stopTimer();
                this._startTimer(e);
            }
        },
        _startTimer: function (e) {
            var proxy = this;
            var delay = e.keyCode == 13 ? 0 : proxy.model.filterSettings.immediateModeDelay;
            this._timer = window.setTimeout(
                function () {
                    proxy._onTimerTick();
                },
                delay);
        },
        _stopTimer: function () {
            if (this._timer != null)
                window.clearTimeout(this._timer);
        },

        _onTimerTick: function () {
            this.OldfilterValue = this._currentFilterbarValue;
            this._oldFilterColumn = this._currentFilterColumn;
            this.filterValueOldLength = this.filterValueCurrentLength;
            this._findPredicate();
            var result = null;
            var matchcase = this._currentFilterColumn.type == "string" ? false : true;
            var collection = $.extend([], this.model.filterSettings.filteredColumns);
            for (var i = 0; i < collection.length; i++) {
                if (this.getHeaderContent().find(".e-filterbar #" + collection[i].field.replace(/[^a-z0-9|s\_.]/gi, '') + "_filterBarcell").val() == "") {
                    if ($.inArray(this.model.filterSettings.filteredColumns[i], this.filterColumnCollection) != -1)
                        this.filterColumnCollection.splice(i, 1);
                    this.model.filterSettings.filteredColumns.splice(i, 1);
                }
            }
            if (this._currentFilterColumn.type == "date" || this._currentFilterColumn.type == "datetime") {
                for (var j = 0; j < this.model.filterSettings.filteredColumns.length; j++) {
                    if (this.model.filterSettings.filteredColumns[j].isComplex) {
                        var preobject = this.model.filterSettings.filteredColumns[j].predicates;
                        if (this.model.filterSettings.filteredColumns.length == 1) {
                            this.model.filterSettings.filteredColumns = preobject;
                        }
                        else {
                            this.model.filterSettings.filteredColumns[j] = preobject[0];
                            this.model.filterSettings.filteredColumns.push(preobject[1]);
                        }
                    }
                }
            }
            if (!this._skipFilterProcess) {
                if (this._currentFilterColumn.foreignKeyValue && this._currentFilterColumn.dataSource && this._currentFilterbarValue != "")
                    this._fltrForeignKeyValue(this._operator, this._currentFilterbarValue, matchcase,
                                              this._currentFilterColumn.dataSource, this._currentFilterColumn.foreignKeyField,
                                              this._currentFilterColumn.foreignKeyValue, this._currentFilterColumn.type);
                else {
                    if (ej.isNullOrUndefined(this._currentFilterColumn.filterBarTemplate)) {
                        this._fltrBarcell = true;
                        this.filterColumn(this._currentFilterColumn.field, this._operator, this._currentFilterbarValue, this._predicate, matchcase);
                    }
                }
            }
            else
                this.filterStatusMsg = "Invalid Filter Data";
            if (!this.model.scrollSettings.enableVirtualization && ej.isNullOrUndefined(this._currentFilterColumn.filterBarTemplate))
                this._showFilterMsg();
            this._stopTimer();
        },

        _findPredicate: function () {
            var _value = this._currentFilterbarValue.replace(/ && /i, " and ").replace(" || ", " or ");
            var _predicateFinder = _value.split(' ');
            this._predicate = "and";
            if (_predicateFinder.length != 0) {
                if ($.isFunction(ej.Predicate[_predicateFinder[1]])) {
                    this._skipFilterProcess = false;
                    this._predicate = _predicateFinder[1];
                    var valuesArray = _value.split(" " + _predicateFinder[1] + " ");
                    var tempOperator = [];
                    var filterValues = [];
                    for (var i = 0; i < valuesArray.length; i++) {
                        this._validateFilterValue(valuesArray[i]);
                        tempOperator.push(this._operator);
                        if (this._currentFilterColumn.type == "number")
                            filterValues.push(this._currentFilterbarValue);
                        else if (this._currentFilterColumn.type == "string")
                            filterValues.push(valuesArray[i]);
                    }
                    this._currentFilterbarValue = filterValues;
                    this._operator = tempOperator;
                } else
                    this._validateFilterValue($.trim(this._currentFilterbarValue));
            } else
                this._validateFilterValue($.trim(this._currentFilterbarValue));
        },

        _validateFilterValue: function (_value) {
            switch (this._currentFilterColumn.type) {
                case "number":
                    this._operator = ej.FilterOperators.equal;
                    var stringSkipInput = new Array(">", "<", "=", "!");
                    for (var i = 0; i < _value.length; i++) {
                        if (jQuery.inArray(_value[i], stringSkipInput) != -1) {
                            break;
                        }
                    }
                    if (i != _value.length) {
                        this._getOperator(_value.substring(i));
                        if (i != 0)
                            this._currentFilterbarValue = _value.substring(0, i);
                    }
					else if(!ej.isNullOrUndefined(this._currentFilterColumn.filterOperator))
						this._operator = this._currentFilterColumn.filterOperator;	
                    if (this._currentFilterbarValue != "" && _value.length >= 1)
                        this._currentFilterbarValue = ej.parseFloat(this._currentFilterbarValue, this.model.locale);
                    else
                        this._currentFilterbarValue = _value.length > 1 ? ej.parseFloat(_value, this.model.locale) : _value;
                    break;
                case "date":
                case "datetime":
                    this._operator = ej.FilterOperators.equal;
                    this._getOperator(_value);
                    var _format;
                    if (ej.isNullOrUndefined(this._currentFilterColumn.format)) {
                        if (this._currentFilterColumn.type == "date")
                            _format = ej.preferredCulture().calendar.patterns.d; //System Date format
                        else
                            _format = ej.preferredCulture().calendar.patterns.f; //System DateTime format
                    }
                    else
                        _format = this._currentFilterColumn.format.replace("{0:", "").replace('}', "");
                    if (this._currentFilterbarValue != "") {
                        var filterbarValue = ej.parseDate(this._currentFilterbarValue, _format, this.model.locale);
                        if (!ej.isNullOrUndefined(filterbarValue))
                            this._currentFilterbarValue = ej.parseDate(this._currentFilterbarValue, _format, this.model.locale);
                        else
                            this.filterStatusMsg = "Invalid Filter Data";
                    }
                    break;
                case "string":
                    if (_value.charAt(0) == '*') {
                        this._currentFilterbarValue = this._currentFilterbarValue.slice(1);
                        this._operator = ej.FilterOperators.startsWith;
                    }
                    else if (_value.charAt(_value.length - 1) == '%') {
                        this._currentFilterbarValue = this._currentFilterbarValue.slice(0, -1);
                        this._operator = ej.FilterOperators.startsWith;
                    }
                    else if (_value.charAt(0) == '%') {
                        this._currentFilterbarValue = this._currentFilterbarValue.slice(1);
                        this._operator = ej.FilterOperators.endsWith;
                    }
					else if(!ej.isNullOrUndefined(this._currentFilterColumn.filterOperator))
						this._operator = this._currentFilterColumn.filterOperator;	
                    else
                        this._operator = ej.FilterOperators.startsWith;
                    break;
                case "boolean":
                case "checkbox":
                    if (this._currentFilterbarValue.toLowerCase() == "true" || this._currentFilterbarValue == "1")
                        this._currentFilterbarValue = true;
                    else if (this._currentFilterbarValue.toLowerCase() == "false" || this._currentFilterbarValue == "0")
                        this._currentFilterbarValue = false;
                    this._operator = ej.FilterOperators.equal;
                    break;
                default:
                    this._operator = ej.FilterOperators.equal;
            }
        },
        _getOperator: function (_value) {
            if (_value.charAt(0) == "=") {
                this._operator = ej.FilterOperators.equal;
                this._currentFilterbarValue = _value.substring(1);
            }
            if (ej.data.operatorSymbols[_value.charAt(0)] !== undefined || ej.data.operatorSymbols[_value.slice(0, 2)] !== undefined) {
                this._operator = ej.data.operatorSymbols[_value.charAt(0)];
                this._currentFilterbarValue = _value.substring(1);
                if (this._operator === undefined) {
                    this._operator = ej.data.operatorSymbols[_value.slice(0, 2)];
                    this._currentFilterbarValue = _value.substring(2);
                }
            }
            if (this._operator == ej.FilterOperators.lessThan || this._operator == ej.FilterOperators.greaterThan) {
                if (this._currentFilterbarValue.charAt(0) == "=") {
                    this._operator = this._operator + "orequal";
                    this._currentFilterbarValue = this._currentFilterbarValue.substring(1);
                }
            }

        },

        _checkForSkipInput: function () {
            var isSkip = false;
            var skipInput = new Array("=", " ", "!");
            var context = this;
            if (this._currentFilterColumn.type == "number") {
                if (ej.data.operatorSymbols[this._currentFilterbarValue] !== undefined || $.inArray(this._currentFilterbarValue, skipInput) != -1)
                    isSkip = true;
            }
            if (this._currentFilterColumn.type == "string") {
                var stringSkipInput = new Array(">", "<", "=", "!");
                for (var i = 0; i < this._currentFilterbarValue.length; i++) {
                    if ($.inArray(this._currentFilterbarValue[i], stringSkipInput) != -1)
                        isSkip = true;
                }
            }
            return isSkip;
        },
		_setFilterbarValues: function(elem,val,operator){
			if (operator == "greaterthan")
				elem.val(">" + val);
			else if (operator == "greaterthanorequal")
				elem.val(">=" + val);
			else if (operator == "lessthan")
				elem.val("<" + val);
			else if (operator == "lessthanorequal")
				elem.val("<=" + val);
			else if (operator == "notequal")
				elem.val("!=" + val);
			else
				elem.val(val);
		},
        _showFilterMsg: function () {
            var index = !ej.isNullOrUndefined(this._currentFilterColumn) && $.inArray(this._currentFilterColumn, this.filterColumnCollection);
            if (this._currentFilterbarValue !== "" && index == -1)
                this.filterColumnCollection.push(this._currentFilterColumn);
            if (this._currentFilterbarValue === "" && index != -1) {
                this.filterColumnCollection.splice(index, 1);
            }
            if ((!this._skipFilterProcess || this.filterColumnCollection.length > 0) && this.filterStatusMsg != "Invalid Filter Data") {
                for (var index = 0; index < this.filterColumnCollection.length; index++) {
                    if (!ej.isNullOrUndefined(this.filterColumnCollection[index])) {
                        var val, filterColumnName, hTxt = this.filterColumnCollection[index].headerText;
                        if (this.filterColumnCollection[index].disableHtmlEncode)
                            hTxt = this._htmlEscape(hTxt);
                        if (this.filterColumnCollection[index].field.indexOf('.') != -1) {
                            filterColumnName = (this.filterColumnCollection[index].field.replace(/[^a-z0-9|s\_]/gi, ''));
                            val = $("#" + filterColumnName + "_filterBarcell").val();
                        }
                        else {
                            var fltrId = ej.isNullOrUndefined(this.filterColumnCollection[index]["foreignKeyValue"]) ? this.filterColumnCollection[index].field.replace(/[^a-z0-9|s\_.]/gi, '') + "_filterBarcell" : this.filterColumnCollection[index].field.replace(/[^a-z0-9|s\_.]/gi, '') + "_" + this.filterColumnCollection[index]["foreignKeyValue"] + "_filterBarcell";
                            var column = this._currentFilterColumn || this.getColumnByField(this.filterColumnCollection[index].field);
							if (column.type == "boolean" && !ej.isNullOrUndefined(column.filterBarTemplate) && this.element.find("#" + fltrId).hasClass('e-checkbox e-js'))
                                val = this.element.find("#" + fltrId).parent().attr('aria-checked');
                            else
                                val = this.element.find("#" + fltrId).val();
                        }
                        if (val != "") {
                            if (index > 0 && this.filterStatusMsg != "")
                                this.filterStatusMsg += " && ";
                            this.filterStatusMsg += hTxt + ": " + val;
                        }
                    }
                }
            }

            if (this.model.allowPaging)
                this.getPager().ejPager("model.externalMessage", this.filterStatusMsg);
           else if(!this.model.scrollSettings.enableVirtualization){
                if (this.model.scrollSettings.allowVirtualScrolling){
                    this.$pagerStatusBarDiv.find(".e-pagerfiltermsg")[0].innerHTML = this.filterStatusMsg;
				    this.$pagerStatusBarDiv.find(".e-pagerfiltermsg").css("display", "block");
				}
                else
                    this.$pagerStatusBarDiv.find("div")[0].innerHTML = this.filterStatusMsg;
                if (this.filterStatusMsg.length)
                    this.$pagerStatusBarDiv.css("display", "block");
                else
                    this.model.scrollSettings.allowVirtualScrolling ? this.$pagerStatusBarDiv.find(".e-pagerfiltermsg").hide() : this.$pagerStatusBarDiv.hide();
            }
            if (this.filterStatusMsg == "Invalid Filter Data") {
                index = $.inArray(this._currentFilterColumn, this.filterColumnCollection);
                this.filterColumnCollection.splice(index, 1);
            }
            this.filterStatusMsg = "";
        },
        _renderFilterDialogs: function () {
            var $strDlg, $numDlg, $boolDlg, $dateDlg, $datetimeDlg, $guidDlg;

            $.each(this.model.columns, ej.proxy(function (indx, col) {
                if (col.type == "string" && (!$strDlg || !ej.isNullOrUndefined(col.filterType))) {
                    if (ej.isNullOrUndefined(col.filterType))
                        $strDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "guid" && (!$guidDlg || !ej.isNullOrUndefined(col.filterType))) {
                    if (ej.isNullOrUndefined(col.filterType))
                        $guidDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "number" && (!$numDlg || !ej.isNullOrUndefined(col.filterType))) {
                    if (ej.isNullOrUndefined(col.filterType))
                        $numDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "date" && (!$dateDlg || !ej.isNullOrUndefined(col.filterType))) {
                    if (ej.isNullOrUndefined(col.filterType))
                        $dateDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "datetime" && (!$datetimeDlg || !ej.isNullOrUndefined(col.filterType))) {
                    if (ej.isNullOrUndefined(col.filterType))
                        $datetimeDlg = true;
                    this._renderFilters(col);
                } else if (col.type == "boolean" && (!$boolDlg || !ej.isNullOrUndefined(col.filterType))) {
                    if (ej.isNullOrUndefined(col.filterType))
                        $boolDlg = true;
                    this._renderFilters(col);
                }
            }, this));
        },
        _renderFilters: function (col) {
            if ((this._isExcelFilter && col.filterType != "menu") || col.filterType == "excel") {
                if (ej.isNullOrUndefined(this._excelFilter)) {
                    this._renderExcelFilter();
                    this._excelFilterRendered = true;
                }
                this._excelFilter.renderDialog(col.type);
            }
            else
                eval(this["_render" + col.type.substring(0, 1).toUpperCase() + col.type.substring(1) + "Dialog"](col));
        },
        _renderStringDialog: function () {
            var $id = this._id + "_stringDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
            $content.appendTo("body");
            this._renderDlgContent($content, "string");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
        },
        _renderBooleanDialog: function () {
            var $id = this._id + "_booleanDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
            $content.appendTo("body");
            this._renderDlgContent($content, "boolean");
            if (!this.model.isResponsive || !this._mediaStatus) {
                this._renderFDialog($id);
                if (!this.model.filterSettings.showPredicate)
                    $("#" + $id).ejDialog({ minHeight: 90, width: "100%" });
                else
                    $("#" + $id).ejDialog({ minHeight: 136, width: "100%" });
            }
        },
        _renderGuidDialog: function () {
            var $id = this._id + "_guidDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
            $content.appendTo("body");
            this._renderDlgContent($content, "guid");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
        },
        _renderNumberDialog: function () {
            var $id = this._id + "_numberDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
            $content.appendTo("body");
            this._renderDlgContent($content, "number");
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
        },
        _renderDateDialog: function (col) {
            var $id = this._id + "_dateDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
            $content.appendTo("body");
            this._renderDlgContent($content, "date", col);
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
        },
        _renderDatetimeDialog: function (col) {
            var $id = this._id + "_datetimeDlg";
            if ($("#" + $id).length > 0) return;
            var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
            $content.appendTo("body");
            this._renderDlgContent($content, "datetime", col);
            if (!this.model.isResponsive || !this._mediaStatus)
                this._renderFDialog($id);
        },
        _renderFDialog: function (id) {
            $("#" + id).ejDialog({ showOnInit: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, "showHeader": false, width: 260, enableResize: false, allowKeyboardNavigation: false, content: "#" + this._id });
        },
        _closeFDialog: function () {
            if (this._isExcelFilter || this._excelFilterRendered)
                this._excelFilter.closeXFDialog();
            if (this._$menuDlgIsOpen)
                this._closeFilterDlg();
        },
        _renderDlgContent: function (content, type, col) {
            content.addClass("e-grid");
            var $predicate = ej.buildTag("div.e-predicate"), $operator = ej.buildTag("div.e-operator"), $value = ej.buildTag("div.e-value"), $value1 = ej.buildTag("div.e-value1");
            var $strOp = this.localizedLabels.StringMenuOptions;
            var $numOp = this.localizedLabels.NumberMenuOptions;
            var $drdown = ej.buildTag("input#" + this._id + type + "_ddinput", {}, {}, { "type": "text" });
            var $drdownDiv = ej.buildTag("div#" + this._id + type + "_dropdown");
            var $drdownUl = ej.buildTag("ul");
            var $radio = ej.buildTag("input", {}, {}, { "type": "radio", "name": this._id + "_predicate" + type, "value": "or" });
            var $andRadio = ej.buildTag("input", {}, {}, { "type": "radio", "name": this._id + "_predicate" + type, "value": "and", "checked": "checked" });
            var $cbox;
            $predicate.append($andRadio)
                .append(ej.buildTag("span.e-caption").html(this.localizedLabels.PredicateAnd))
                .append($radio)
                .append(ej.buildTag("span.e-caption").html(this.localizedLabels.PredicateOr));
            !this.model.filterSettings.showPredicate && $predicate.hide();
            if (type == "string") {
                $cbox = ej.buildTag("input", {}, {}, { "type": "checkbox" });
                $predicate.append($cbox)
                    .append(ej.buildTag("span.e-caption").html(this.localizedLabels.MatchCase));
                $.each($strOp, function (indx, operator) {
                    $drdownUl.append(ej.buildTag("li", {}, {}, { "value": operator.value }).html(operator.text));
                });
            }
            if (type == "number" || type == "date" || type == "datetime" || type == "guid") {
                if (type == "guid")
                    $numOp = $numOp.slice(4, 6);
                $.each($numOp, function (indx, operator) {
                    $drdownUl.append(ej.buildTag("li", {}, {}, { "value": operator.value }).html(operator.text));
                });
            }
            if (type != "boolean") {
                $drdownDiv.append($drdownUl);
                $operator.append($drdown);
                $operator.append($drdownDiv);
            }
            var $tBox = ej.buildTag("input", {}, {}, { "type": "text" }), $tBox1 = ej.buildTag("input", {}, {}, { "type": "text" });
            var $tchkBox = ej.buildTag("input", {}, {}, { "type": "checkbox" });
            var filterVal = this.model.enableResponsiveRow ? 'OKButton' : 'Filter';
            var clearVal = this.model.enableResponsiveRow ? 'CancelButton' : 'Clear';
            var $filter = ej.buildTag("input.e-filter e-flat e-btnsub", {}, {}, { "type": "button", "value": this.localizedLabels[filterVal] });
            var $clear = ej.buildTag("input.e-clear e-flat e-btncan", {}, {}, { "type": "button", "value": this.localizedLabels[clearVal] });
            $value.append(ej.buildTag("span.e-caption").html(this.localizedLabels.FilterMenuCaption)), $value1.append(ej.buildTag("span.e-caption").html(this.localizedLabels.FilterMenuToCaption));
            content.append($predicate);
            if (type == "boolean") {
                $value.find("span.e-caption").css("top", "1px");
                $value.append($tchkBox);
            }
            else {
                $value.append(ej.buildTag("br")).append($tBox);
                content.append($operator);
            }
            content.append($value);
            $value1.append(ej.buildTag("br")).append($tBox1);
            content.append($value1);
            $value1.addClass("e-hide");
            content.append(ej.buildTag("div.e-dlgBtns").append($filter)
                .append($clear));
            var betresult = [$value, $value1];
            if (type != "boolean")
                $drdown.ejDropDownList({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "targetID": this._id + type + "_dropdown", width: "100%", height: "26px", selectedItemIndex: 0, select: ej.proxy(this._openfset, this, betresult) });
            $radio.ejRadioButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            $andRadio.ejRadioButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, checked: true });
            if ($cbox)
                $cbox.ejCheckBox({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            content.css("display", "none");
            this._createButton("filter", $filter);
            this._createButton("clear", $clear);
            var NumberDlgstyle = { "cssClass": this.model.cssClass, locale: this.model.locale, "enableRTL": this.model.enableRTL, showSpinButton: false, height: "26px", decimalPlaces: 2, width: "100%", watermarkText: this.localizedLabels.NumericTextBoxWaterMark };
            if (type == "number")
                $tBox.ejNumericTextbox(NumberDlgstyle),
                $tBox1.ejNumericTextbox(NumberDlgstyle);
            else if (type == "guid")
                $tBox.css({ "height": "26px", "width": "100%" });
            else if (type == "date" || type == "datetime") {
                var cnt = type == "date" ? "Date" : "DateTime";
                $tBox.attr("id", this._id + "_dp" + cnt), $tBox1.attr("id", this._id + "_dpTo" + cnt);
                var DateDlgstyle = { "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, enableStrictMode: true, width: "100%", locale: this.model.locale }
                if (type == "date")
                    DateDlgstyle["watermarkText"] = this.localizedLabels.DatePickerWaterMark;
                if (!ej.isNullOrUndefined(col.format)){
                    var fmt = type == "date" ? "dateFormat" : "dateTimeFormat";
                    DateDlgstyle[fmt] = col.format.replace(/{0:|}/g, function () { return "" })
                }                    
                $tBox["ej" + cnt + "Picker"](DateDlgstyle);
                $tBox1["ej" + cnt + "Picker"](DateDlgstyle);
            }
            else if (type == "boolean")
                $tchkBox.ejCheckBox({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL });
            else if (type == "string") {
                $tBox.attr("id", this._id + "_acString");
                $tBox.ejAutocomplete({
                    "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "dataSource": this._dataSource(), width: "100%", height: 26, enableDistinct: true, focusIn: function (args) {
                        var $dropdown = this.element.closest(".e-dialog").find(".e-dropdownlist");
                        var $matchcase = this.element.closest(".e-dialog").find(".e-checkbox").prop("checked");
                        this.model.filterType = $dropdown.ejDropDownList("model.value");
                        this.model.caseSensitiveSearch = $matchcase;
                    },
                    open: function (args) {
                        var doped = !this.element.closest(".e-dialog").ejDialog("isOpened")
                        this.suggestionList.css({ visibility: (doped ? "hidden" : "visible") });
                    }

                });
            }
        },
        _createButton: function (name, element) {
            var $func = name == "filter" ? ej.proxy(this._fltrBtnHandler, this) : ej.proxy(this._fltrClrHandler, this);
            element.ejButton({ "cssClass": this.model.cssClass, "enableRTL": this.model.enableRTL, "click": $func });
        },
        _getIdField: function () {
            var $key;
            $.each(this.model.columns, function (indx, col) {
                if (col.key) {
                    $key = col.field;
                    return false;
                }
            });
            return $key;
        },
        _openfset: function (betresult, args) {
            var margin = "5%", padding = "10px";
            if (args.value == "Between") {
                betresult[0].find(".e-caption").eq(0).html(this.localizedLabels.FilterMenuFromCaption)
                betresult[1].removeClass("e-hide");
                $(betresult[1]).css({ "padding-top": padding });
                if (this.model.isResponsive && this._mediaStatus)
                    margin = padding = "0px";
            }
            else {
                betresult[1].addClass("e-hide");
                betresult[0].find(".e-caption").eq(0).html(this.localizedLabels.FilterMenuCaption)
            }
            $(".e-responsiveLabelDiv").css({ "margin-top": margin }), $(".e-operator").css({ "padding-top": padding });
        },
        _filterCompleteAction: function () {
            if (this.model.allowPaging)
                this._refreshGridPager();
            if (this.model.scrollSettings.allowVirtualScrolling) {
                var model = this._refreshVirtualPagerInfo();
                this._showPagerInformation(model);
            }
            if (this.model.filterSettings.filterType == "menu" || this._isExcelFilter) {
                this._closeFDialog();
                var column = this.getColumnByField(this._$curFieldName);
                var index = $.inArray(column, this.model.columns), proxy = this, _addicon = false;
                $.each(this.model.filterSettings.filteredColumns, function (indx, col) {
                    if (col.field == proxy._$curFieldName) {
                        _addicon = true;
                        return false;
                    }
                    else if (col.isComplex == true) {
                        if (col.predicates[0].field == proxy._$curFieldName) {
                            _addicon = true;
                            return false;
                        }
                    }
                });
                var $fIcon = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell").eq(index).find(".e-filtericon");
                if (_addicon)
                    $fIcon.addClass("e-filteredicon e-filternone");
                else
                    $fIcon.removeClass("e-filteredicon e-filternone");
            }
        },
        _refreshFilterIcon: function () {
            if (!this.model.filterSettings.filteredColumns.length)
                return;
            var filteredCols = ej.distinct(this.model.filterSettings.filteredColumns, "field", true), _$headerCells = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell"), index, col;
            if (this.model.showStackedHeader)
                _$headerCells = _$headerCells.not(".e-stackedHeaderCell");
            if (this.model.allowReordering)
                _$headerCells.find(".e-filtericon").removeClass("e-filteredicon e-filternone");
            for (var i = 0, flen = filteredCols.length; i < flen; i++) {
                col = filteredCols[i]
                index = this.getColumnIndexByField(col.isComplex === true ? col.predicates[0].field : col.field);
                _$headerCells.eq(index).find(".e-filtericon").addClass("e-filteredicon e-filternone");
            }
        },
        _setFilterFieldValues: function (id) {
            var $fVal = "", proxy = this, $fVal1 = "";
            var flchk = -1, optr;
            $.each(this.model.filterSettings.filteredColumns, function (indx, value) {
                if (value.field == proxy._$curFieldName)
                    flchk = indx;
            });
            if (flchk == -1 && this._$colType != "boolean") {
                if (this._$colType == "string") {
                    $(".e-predicate input.e-js[type='checkbox']").ejCheckBox({
                        checked: false
                    });
                }
                $(".e-predicate input[name =" + this._id + "_predicate" + this._$colType + "]:first").ejRadioButton({ checked: true });
                $("#" + this._id + this._$colType + "_ddinput").ejDropDownList({
                    selectedItemIndex: 0, change: function (args) {
                        this.element.closest(".e-dialog").find(".e-autocomplete").val($fVal);
                    }
                });
            }
            {
                var filteredFields = $(this.model.filterSettings.filteredColumns).map(function () {
                    return this.field;
                }).get();

                if (this._$curFieldName != this._$prevFieldName || $.inArray(this._$curFieldName, filteredFields) != -1) {
                    var flag = 0;
                    $.each(this.model.filterSettings.filteredColumns, function (indx, col) {
                        if (col.field == proxy._$curFieldName) {
                            var index;
                            var option = proxy._$colType == "number" || proxy._$colType == "date" || proxy._$colType == "datetime" ? "Number" : "String";
                            var $dlist = proxy.localizedLabels[option + "MenuOptions"];
                            var optr = ej.isNullOrUndefined(col.actualOperator) ? col.operator : col.actualOperator
                            for (index = 0; index < $dlist.length; index++) {
                                if ($dlist[index].value.toLowerCase() == optr)
                                    break;
                            }
                            if (proxy._$colType == "string")
                                $(".e-predicate input.e-js[type='checkbox']").ejCheckBox({ checked: col.matchcase });
                            $("input[value=" + col.predicate + "]").ejRadioButton({ checked: true });
                            $("#" + proxy._id + proxy._$colType + "_ddinput").ejDropDownList({ selectedItemIndex: index });
                            if ((proxy.model.isResponsive && proxy._mediaStatus) && (optr == "between")) {
                                $(".e-responsiveLabelDiv").css({ "margin-top": "0%" }), $(".e-operator").css({ "padding-top": "0px" });
                            }
                            if (optr == "between" && flag <= 1) {
                                if (!flag)
                                    $fVal = col.value;
                                else
                                    $fVal1 = col.value;
                                flag++;
                                return true;
                            }
                            else
                                $fVal = col.actualFilterValue != null ? col.actualFilterValue : col.value;
                        }
                    });
                }

                if (this._$colType == "boolean") {
                    if ($fVal && $fVal != "")
                        $(id).find(".e-value input:checkbox.e-js").ejCheckBox({ checked: true });
                    else
                        $(id).find(".e-value input:checkbox.e-js").ejCheckBox({ checked: false });
                }
                else if (this._$colType == "date" || this._$colType == "datetime") {
                    $(id).find(".e-value .e-datepicker")[this._$colType == "date" ? "ejDatePicker" : "ejDateTimePicker"]("model.value", $fVal);
                    $(id).find(".e-value1 .e-datepicker")[this._$colType == "date" ? "ejDatePicker" : "ejDateTimePicker"]("model.value", $fVal1);
                }
                else if (this._$colType == "number") {
                    $(id).find(".e-value .e-numerictextbox").ejNumericTextbox("model.value", $fVal);
                    $(id).find(".e-value1 .e-numerictextbox").ejNumericTextbox("model.value", $fVal1);
                } else
                    $(id).find(".e-value input").val($fVal);
                $(id).find(".e-value1 input1").val($fVal1);
            }
        },
        _fltrBtnHandler: function (e) {
            if (this.model.isResponsive && this._mediaStatus)
                this._responsiveFilterClose();
            var id = this._id + "_" + this._$colType + "Dlg";
            var $par = $("#" + id);
            var $input = $par.find(".e-value input.e-js"), $operator, result, predicateEle, $input1 = $par.find(".e-value1 input.e-js");
            var value = $input.val(), matchcase = undefined, filterValue, value1 = $input1.val();
            if (this._$colType == "number") {
                $input = $input.filter(".e-numerictextbox");
                value = parseFloat($input.ejNumericTextbox("getValue"));
                matchcase = true;
            }
            if (this._$colType == "string")
                matchcase = $par.find(".e-predicate input[type='checkbox']").is(":checked");
            if (this._$colType == "date" || this._$colType == "datetime") {
                value = ej.parseDate(value, this._$colFormat, this.model.locale);
                matchcase = true;
            }
            if (this._$colType == "boolean") {
                value = $input.ejCheckBox("model.checked") != null ? $input.ejCheckBox("model.checked") : false;
                $operator = "equal";
            } else
                $operator = $("#" + this._id + this._$colType + "_ddinput").ejDropDownList("getSelectedValue").toLowerCase();
            predicateEle = $par.find(".e-predicate input[type='radio']:checked");
            if (this._$colForeignKeyValue && this._$colDropdownData)
                this._fltrForeignKeyValue($operator, value, matchcase, this._$colDropdownData, this._$colForeignKeyField, this._$colForeignKeyValue, this._$colType, predicateEle);
            else {
                if (this._$colType != "boolean") {
                    if (($("#" + this._id + this._$colType + "_ddinput").ejDropDownList("getSelectedValue").toLowerCase() == "between")) {
                        if ((this._$colType == "datetime") || (this._$colType == "date")) {
                            value1 = ej.parseDate(value1, this._$colFormat, this.model.locale);
                        }
                        if (this._$colType == "number") {
                            value1 = parseFloat($input1.ejNumericTextbox("getValue"));
                        }
                        value = [value, value1];
                        $operator = ["greaterthanorequal", "lessthanorequal"];
                        var actualOperator = {};
                        actualOperator.operator = 'between';
                    }
                }
            }
			var predicate = [],pred = $par.find(".e-predicate input[type='radio']:checked").attr("value");
			if(!ej.isNullOrUndefined(actualOperator) && actualOperator.operator == "between")
				predicate.push(pred,"and");
			else
				predicate.push(pred);
			if (!(this._$colForeignKeyValue && this._$colDropdownData))
            this.filterColumn(this._$curFieldName, $operator, value, predicate, matchcase, actualOperator);
            if (this.model.isResponsive) {
                $par.css('display', 'none');
                this._setResponsiveFilterIcon();
                this.element.css('display', 'block');
                if (this.model.allowScrolling && (!this.model.enableResponsiveRow || !this.model.minWidth)) {
                    var args = {};
                    args.requestType = 'refresh';
                    this._refreshScroller(args);
                }
            }
        },
        _fltrClrHandler: function (e) {
            this.clearFiltering(this._$curFieldName);
        },

        _fltrForeignKeyValue: function (operator, value, matchcase, dataSource, fieldName, mapFieldName, colType, predicateEle) {
            if (ej.isNullOrUndefined(matchcase))
                matchcase = true;
            var operatorCol = [], predicateCol = [], query, filterValue, visible = predicateEle ? predicateEle.css("display") == "none" : true, condition = predicateEle ? predicateEle.attr("value") : "and", predicate;
            var data = dataSource, val;
            var filterCollection = { mapFieldName: mapFieldName, fieldName: fieldName, operator: operator, value: value, predicate: predicateEle, matchcase: matchcase };
            var args = { requestType: ej.Grid.Actions.Filtering, action: "fetchingForeignKeyField", currentFilteringColumn: fieldName, currentFilterObject: filterCollection };
            this._trigger("actionBegin", args);
            if (!(dataSource instanceof ej.DataManager))
                data = new ej.DataManager(dataSource);
            if (colType == "date") {
                var $prevDate = new Date(value.setDate(value.getDate() - 1));
                var $nextDate = new Date(value.setDate(value.getDate() + 2));
                if (operator == "equal" || operator == "notequal") {
                    if (operator == "equal")
                        query = new ej.Query().where(ej.Predicate(filterCollection.mapFieldName, ">", $prevDate, !filterCollection.matchcase).and(filterCollection.mapFieldName, "<", $nextDate, !filterCollection.matchcase)).select(filterCollection.fieldName);
                    else
                        query = new ej.Query().where(ej.Predicate(filterCollection.mapFieldName, "<=", $prevDate, !filterCollection.matchcase).or(filterCollection.mapFieldName, ">=", $nextDate, !filterCollection.matchcase)).select(filterCollection.fieldName);
                }
                else
                    query = new ej.Query().where(filterCollection.mapFieldName, filterCollection.operator, filterCollection.value, !filterCollection.matchcase).select(filterCollection.fieldName);
            }
            else
                query = new ej.Query().where(filterCollection.mapFieldName, filterCollection.operator, filterCollection.value, !filterCollection.matchcase).select(filterCollection.fieldName);
            filterValue = { actualFilterValue: filterCollection.value, actualOperator: filterCollection.operator, ejpredicate: undefined, predicate: condition };
            data.executeQuery(query).done(ej.proxy(function (e) {
                val = e.result;
                var requireProc = $.isPlainObject(val[0]), preds = [], merge = false, field = this._$curFieldName;
                val = requireProc ? ej.distinct(val, fieldName, false) : val,
                predicate = new ej.Predicate(field, "equal", val[0], matchcase);
                for (var i = 1, vlen = val.length; i < vlen; i++) {
                    preds.push(new ej.Predicate(field, "equal", val[i], matchcase));
                    merge = true;
                }
                if (merge) {
                    preds.unshift(predicate);
                    predicate = ej.Predicate.or(preds); /*ensure same level for multiple predicates*/
                }
                $.extend(filterValue, { ejpredicate: $.extend(predicate, { field: field }, filterValue) });
                this.filterColumn(filterCollection.fieldName, filterCollection.operator, filterCollection.value, predicateCol, filterCollection.matchcase, filterValue);
            }, this));
        },
        _setDateFilters: function (filterObject, forGrouping) {
            var $prevDate, $nextDate, pred, predicate;
            if (!forGrouping && !ej.isNullOrUndefined(this.getColumnByField(filterObject.field).format)) {
                var formatString = this.getColumnByField(filterObject.field).format;
                if (formatString.indexOf("s") != -1) {
                    $prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
                    $nextDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() + 2));
                }
                else if (formatString.indexOf("m") != -1) {
                    $prevDate = new Date(filterObject.value.setMinutes(filterObject.value.getMinutes() - 1));
                    $nextDate = new Date(filterObject.value.setMinutes(filterObject.value.getMinutes() + 2));
                }
                else if (formatString.indexOf("h") != -1) {
                    $prevDate = new Date(filterObject.value.setHours(filterObject.value.getHours() - 1));
                    $nextDate = new Date(filterObject.value.setHours(filterObject.value.getHours() + 2));
                }
                else {
                    $prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
                    $nextDate = new Date(filterObject.value.setDate(filterObject.value.getDate() + 1));
                }
            }
            else {
                $prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
                $nextDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() + 2));
            }
            var $prevObj = $.extend({}, filterObject);
            var $nextObj = $.extend({}, filterObject);
            $prevObj.value = $prevDate;
            $nextObj.value = $nextDate;
            if (filterObject.operator == "equal") {
                $prevObj.operator = "greaterthan";
                $prevObj.predicate = "and";
                $nextObj.operator = "lessthan";
                $nextObj.predicate = "and";
            } else {
                $prevObj.operator = "lessthanorequal";
                $prevObj.predicate = "or";
                $nextObj.operator = "greaterthanorequal";
                $nextObj.predicate = "or";
            }
            pred = ej.Predicate($prevObj.field, $prevObj.operator, $prevObj.value, false);
            predicate = pred[$nextObj.predicate](ej.Predicate($nextObj.field, $nextObj.operator, $nextObj.value, false));
            filterObject.value = new Date(filterObject.value.setSeconds($nextObj.value.getSeconds() - 1));
            if (forGrouping)
                return predicate;
            else
                this.model.filterSettings.filteredColumns.push($.extend(predicate, { field: filterObject.field, operator: filterObject.operator, value: filterObject.value }));
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.group = {
        _renderGroupDropArea: function () {
            if(!ej.isNullOrUndefined(this.model.groupSettings.enableDropAreaAnimation))
                this.model.groupSettings.enableDropAreaAutoSizing = this.model.groupSettings.enableDropAreaAnimation;
            var dragLabel = this.model.groupSettings.enableDropAreaAutoSizing ? "" : this.localizedLabels.GroupDropArea;
            if (this.model.groupSettings.showDropArea) {
                var $div = ej.buildTag("div.e-groupdroparea", dragLabel);
				$div.addClass("e-default");
                this.model.groupSettings.enableDropAreaAutoSizing && $div.append(ej.buildTag("div.e-animatebutton e-icon").addClass(this.model.groupSettings.enableDropAreaAutoSizing ? "e-animatebuttondown e-gdownarrow" : "e-animatebuttonup e-guparrow"));
                return $div;
            }
        },
        _getColGroup: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            if (gridObject.model.groupSettings.groupedColumns.length == 1)
                var level = this.data.items.level === undefined ? 0 : this.data.items.level - 1;
            else
                var level = this.data.items.level === undefined ? gridObject.model.groupSettings.groupedColumns.length : this.data.items.level - 1;
            var $div = $(document.createElement("div"));
            var $colGroup;
            if (gridObject._isCaptionSummary)
                $colGroup = gridObject._getCaptionColGroup(level);
            else {
                $colGroup = gridObject._getMetaColGroup();
                if (level != gridObject.model.groupSettings.groupedColumns.length && gridObject.model.groupSettings.groupedColumns.length > 1)
                    $colGroup.prepend(gridObject._getIndentCol());
            }
            $div.html($colGroup);
            return $div.html();
        },
        _colSpanAdjust: function (gridObjectId, type, captionDetails) {
            var gridObject, groupData;
            if (ej.isNullOrUndefined(gridObjectId)) {
                gridObject = this;
                groupData = captionDetails;
            }
            else {
                gridObject = this.getRsc("helpers", gridObjectId);
                groupData = this;
            }
            if (gridObject.model.groupSettings.groupedColumns.length == 1) {
                var level = groupData.data.items.level === undefined ? 1 : groupData.data.items.level - 1;
                if (type == "groupcaption")
                    gridObject._currentJsonData = gridObject._currentJsonData.concat(groupData.data.items);
            } else {
                var level = groupData.data.items.level === undefined ? gridObject.model.groupSettings.groupedColumns.length : groupData.data.items.level - 1;
                if (type == "groupcaption" && groupData.data.items.level === undefined)
                    gridObject._currentJsonData = gridObject._currentJsonData.concat(groupData.data.items);
            }            
            gridObject._isGrouping = true;
            var hideGroupColumnCount = !gridObject.model.groupSettings.showGroupedColumn ? gridObject.model.groupSettings.groupedColumns.length : 0;
            var count = 0;
            $.each(gridObject._hiddenColumnsField, function (indx, col) {
                var tempIndex = $.inArray(col, gridObject.model.groupSettings.groupedColumns);
                if (tempIndex != -1) {
                    count = count + 1;
                    if (gridObject.model.groupSettings.showGroupedColumn)
                        hideGroupColumnCount = hideGroupColumnCount + 1;
                }
            })
            var colHeaderText = [];
            $.map(gridObject.model.columns, function (val, i) {
                colHeaderText.push(val.headerText)
            });
            var duparr = gridObject._isDuplicate(colHeaderText), colspan;
            if(!duparr)
                colspan = gridObject.model.columns.length + gridObject.model.groupSettings.groupedColumns.length - level - gridObject._hiddenColumns.length - hideGroupColumnCount + count;
            else
                colspan = gridObject.model.columns.length + gridObject.model.groupSettings.groupedColumns.length - level - gridObject._hiddenColumnsField.length - hideGroupColumnCount + count;
            colspan = (gridObject.model.detailsTemplate != null || gridObject.model.childGrid != null) ? colspan + 1 : colspan;

            if (gridObject._isCaptionSummary && type == "groupcaption") {
                var index = [], cIndex = 0;
                var row = gridObject._captionSummary();
                var hiddenIndexCount = 0, summaryColIndexes = [];
                $.each(row[0].summaryColumns, function (cindx, col) {
                    if ($.inArray(col.displayColumn, gridObject._hiddenColumnsField) != -1)
                        cIndex++;
                    summaryColIndexes.push(gridObject.getColumnIndexByField(col.displayColumn));
                    index.push(gridObject.getColumnIndexByField(col.displayColumn) + gridObject.model.groupSettings.groupedColumns.length - level);
                });
                var sumColIndex = ej.min(summaryColIndexes)
                var hiddenCol = duparr ? gridObject._hiddenColumnsField : gridObject._hiddenColumns;
                for (var i = 0 ; i < hiddenCol.length; i++) {
                    if (duparr)
                        var colIndex = ej.isNullOrUndefined(gridObject.getColumnByField(gridObject._hiddenColumnsField[i])) ? gridObject.getColumnIndexByHeaderText(gridObject._hiddenColumnsField[i], ej.isNullOrUndefined(gridObject.getColumnByField(gridObject._hiddenColumnsField[i]))) : gridObject.getColumnIndexByField(gridObject._hiddenColumnsField[i]);
                    else
                        var colIndex = ej.isNullOrUndefined(gridObject.getColumnByHeaderText(gridObject._hiddenColumns[i])) ? gridObject.getColumnIndexByHeaderText(gridObject._hiddenColumns[i], ej.isNullOrUndefined(gridObject.getColumnByHeaderText(gridObject._hiddenColumns[i]))) : gridObject.getColumnIndexByHeaderText(gridObject._hiddenColumns[i]);
                    if (sumColIndex > colIndex)
                        hiddenIndexCount++;
                }
                if (index.length > 0)
                    colspan = ej.min(index);
                colspan = colspan - hiddenIndexCount;
                colspan = (gridObject.model.detailsTemplate != null || gridObject.model.childGrid != null) ? colspan + 1 : colspan;
            }
            return colspan;
        },
        _captionEncode: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            var column = gridObject.getColumnByField(this.data.field);
            return column.disableHtmlEncode;
        },
        _captionFormat: function (gridObjectId) {
            var gridObject = this.getRsc("helpers", gridObjectId);
            var keyValue, captionData = $.extend({}, this.data);
			var capationFormat = !ej.isNullOrUndefined(gridObject.model.groupSettings.captionFormat)? gridObject.model.groupSettings.captionFormat: gridObject.localizedLabels.GroupCaptionFormat;
            var column = gridObject.getColumnByField(captionData.field);
            if (column.foreignKeyValue && column.dataSource)
                keyValue = gridObject._foreignKeyBinding(gridObject.getColumnIndexByField(captionData.field), captionData.key, gridObject._id);
            else
                keyValue = captionData.key;
			if(!ej.isNullOrUndefined(column.format) && column.format.indexOf("{0:") == -1){
				captionData[captionData.field] = captionData.key;
				gridObject.data = captionData;
			}
            captionData.key = column.format ? gridObject.formatting(column.format, keyValue, gridObject.model.locale) : keyValue;
            captionData.headerText = column.headerText;
            gridObject._groupContextIndex = gridObject._groupContextIndex + 1;
            if (capationFormat.startsWith("#") || capationFormat.startsWith(".") || typeof capationFormat === "object")
                return gridObject._renderEjTemplate(capationFormat, captionData, gridObject._groupContextIndex, null, !ej.isNullOrUndefined(gridObject.model.ngTemplateId) ? gridObject.model.ngTemplateId + "gridgroupcaptiontemplate" : null);
            else
                return $.render[gridObject._id + "_CaptionTemplate"](captionData);
        },
        _getCaptionColGroup: function (level) {
            var cloneColGroup = this.getHeaderTable().find("colgroup").clone();
            var colColl = cloneColGroup.find("col");
            var indentCol = colColl.length - this.model.columns.length;
            if (this.model.detailsTemplate != null || this.model.childGrid != null)
                indentCol = indentCol - 1;
            cloneColGroup.find("col:lt(" + indentCol + ")").remove();
            if (level > 0 && level != this.model.groupSettings.groupedColumns.length) {
                if (this.model.groupSettings.groupedColumns.length > 2 && level != this.model.groupSettings.groupedColumns.length - 1) {
                    for (var i = 0; i < this.model.groupSettings.groupedColumns.length - level; i++) {
                        cloneColGroup.prepend(this._getIndentCol());
                    }
                }
                else
                    cloneColGroup.prepend(this._getIndentCol());
            }
            return cloneColGroup;
        },
        _groupSummaryRow: function (item, aggregates, gridObjectId, showGroup) {
            var gridObject = this.getRsc("helpers", gridObjectId), showGroup = !ej.isNullOrUndefined(showGroup), colIndex;
            if (gridObject.model.showSummary) {
                if (gridObject.getFooterTable() == null)
                    gridObject._renderGridFooter();
                gridObject._createSummaryRows(gridObject.getFooterTable(), item.records == null ? item : item.records, aggregates, item, showGroup);
                if (gridObject._isCaptionSummary && !showGroup) {
                    var index = [];
                    var row = gridObject._captionSummary();
                    $.each(row[0].summaryColumns, function (cindx, col) {
                        index.push(gridObject.getColumnIndexByField(col.displayColumn));
                    });
                    if (index.length > 0)
                        colIndex = ej.min(index);
                    var colLength = gridObject.model.columns.length;
                    gridObject.getFooterTable().find("tbody td").slice(-(colLength - colIndex)).removeClass("e-summaryrow").addClass("e-groupcaptionsummary");
                }
                if (!gridObject.model.groupSettings.showGroupedColumn) {
                    var groupedcolumns = gridObject.model.groupSettings.groupedColumns;
                    var count = 0;
                    var gridfooterrow = gridObject.getFooterTable().children('tbody').find('tr');
                    for (var j = 0; j < gridObject.model.summaryRows.length; j++) {
                        for (var k = 0; k < gridObject.model.summaryRows[j].summaryColumns.length; k++) {
                            for (var i = 0; i < groupedcolumns.length; i++) {
                                if (groupedcolumns[i] == gridObject.model.summaryRows[j].summaryColumns[k].displayColumn) {
                                    count++;
                                    if (gridObject.model.summaryRows[j].summaryColumns.length == count) {
                                        $(gridfooterrow[j]).addClass("e-hide")
                                    }
                                }
                            }
                        }
                        count = 0;
                    }
                }
                return !showGroup ? gridObject.getFooterTable().find("tbody").find("tr").html() : gridObject.getFooterTable().find("tbody").html();
            }
        },
        addGroupingTemplate: function () {
            var tbody = document.createElement('tbody');
            var expandTd = "<td class='e-recordplusexpand' data-ej-mappingname='{{:field}}' data-ej-mappingvalue='{{:key}}'><div class='e-icon e-gdiagonalnext'></div></td>";
            var proxy = this;
            var helpers = {};
            helpers["_" + proxy._id + "ColSpanAdjust"] = this._colSpanAdjust;
            helpers["_" + proxy._id + "Colgroup"] = this._getColGroup;
            if (ej.isNullOrUndefined(this.model.groupSettings.captionFormat))
                $.templates(proxy._id + "_CaptionTemplate", this.localizedLabels.GroupCaptionFormat);
            else
                $.templates(proxy._id + "_CaptionTemplate", this.model.groupSettings.captionFormat);
            helpers["_" + proxy._id + "CaptionFormat"] = this._captionFormat;
            helpers["_" + proxy._id + "GroupSummaryRow"] = this._groupSummaryRow;
            helpers["_" + proxy._id + "CaptionEncode"] = this._captionEncode;
            helpers[proxy._id + "Object"] = this;
            $.views.helpers(helpers);
            var caption = " ~_" + proxy._id + "CaptionFormat('" + proxy._id + "Object')";
            var cpationTd = expandTd + "<td class='e-groupcaption' colspan='{{:~_" + proxy._id + "ColSpanAdjust('" + proxy._id + "Object" + "','groupcaption') }}'>{{if ~_" + proxy._id + "CaptionEncode('" + proxy._id + "Object')}}{{html:" + caption + "}}{{else}}{{:" + caption + "}}{{/if}}</td>";
            if (this._isCaptionSummary && this.model.showSummary)
                cpationTd = cpationTd + "{{:~_" + proxy._id + "GroupSummaryRow(items, aggregates,'" + proxy._id + "Object')}}";
            var captionTr = "<tr class='e-groupcaptionrow'>" + cpationTd + "</tr>";
            var $tbody = ej.buildTag("tbody");
            $tbody.html("{{if items.GROUPGUID}}" +
                "{{for items tmpl='" + proxy._id + "_GroupingTemplate'/}}" +
                "{{else}}" +
                "{{for items tmpl='" + proxy._id + "_JSONTemplate'/}}" +
                "{{/if}}");
            var indentTd = "<td class='e-indentcell'></td>";
            var table = "<table class='e-table {{if items.GROUPGUID}}{{else}}e-recordtable{{/if}}'>" +
                "{{:~_" + proxy._id + "Colgroup('" + proxy._id + "Object')}}" +
                $tbody.html() + "{{:~_" + proxy._id + "GroupSummaryRow(items, aggregates,'" + proxy._id + "Object', '" + proxy._id + "showGroupCaption')}}" +
            "</table>";
            var tableTd = "<td class='e-tabletd' colspan='{{:~_" + proxy._id + "ColSpanAdjust('" + proxy._id + "Object" + "','table')}}'>" + table + "</td>";
            var tr = "<tr>" + indentTd + tableTd + "</tr>";
            $.templates(proxy._id + "_GroupingTemplate", captionTr + tr);
        },
        addSummaryTemplate: function () {
            var proxy = this;
            $.each(proxy.model.summaryRows, function (cindx, row) {
                $.each(row.summaryColumns, function (cindx, cols) {
                    if (!ej.isNullOrUndefined(cols.template))
                        $.templates(proxy._id + "_summaryTemplate" + cols.template, cols.template)
                });
            });
        },
        _getGroupTopLeftCell: function () {
            var $th = ej.buildTag("th.e-grouptopleftcell");
            $th.append(ej.buildTag("div.e-headercelldiv e-emptyCell", "&#160;"));
            return $th;
        },
        _getEmptyFilterBarCell: function () {
            var $th = ej.buildTag("th.e-filterbarcell e-grouptopleftcell");
            return $th;
        },
        _groupingAction: function (refWidth) {
            var $groupTopCell = this.getHeaderTable().find("thead").find(".e-columnheader:not(.e-stackedHeaderRow)").find(".e-grouptopleftcell"), $col = this.getHeaderTable().find("colgroup").find("col");
            var groupColumn = $groupTopCell.length;
            if (groupColumn) {
                this.getHeaderTable().find("colgroup").replaceWith(this._getMetaColGroup());
                (this.model.detailsTemplate != null || this.model.childGrid != null) && this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());
                $groupTopCell.remove();
                this.getHeaderTable().find("thead").find(".e-filterbar").find(".e-filterbarcell:lt(" + groupColumn + ")").remove();
            }
            if (!this.model.allowResizeToFit || refWidth)
                this.setWidthToColumns();
            for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());
                this.getHeaderTable().find("thead").find(".e-columnheader").prepend(this._getGroupTopLeftCell());
                this.getHeaderTable().find("thead").find(".e-filterbar").prepend(this._getEmptyFilterBarCell());
            }
            this.getHeaderTable().find(".e-columnheader").find("th.e-grouptopleftcell").last().addClass("e-lastgrouptopleftcell");
        },
        
        groupColumn: function (columnName) {
            if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel"))
                this._closeFDialog();
            if (!this.model.allowGrouping || $.inArray(columnName, this._disabledGroupableColumns) != -1)
                return;
            if (ej.isNullOrUndefined(this.getColumnByField(columnName)) || $.inArray(columnName, this.model.groupSettings.groupedColumns) != -1)
                return;
            this.model.groupSettings.groupedColumns.push(columnName);
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == columnName) {
                    break;
                }
            }
            this.model.sortSettings.sortedColumns.length == i && this.model.sortSettings.sortedColumns.push({ field: columnName, direction: ej.sortOrder.Ascending });
            var args = {};
            args.columnName = columnName;
            args.requestType = ej.Grid.Actions.Grouping;
            var returnValue = this._processBindings(args);
            if (returnValue) {
                if (!($.inArray(columnName, this._scolumns) != -1 || this._gridSort == columnName))
                    this.model.sortSettings.sortedColumns.pop();
                this.model.groupSettings.groupedColumns.pop();
            }
            this._primaryKeyValues = [];
        },
        
        ungroupColumn: function (columnName) {
            if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel"))
                this._closeFDialog();
            if (!this.model.allowGrouping &&this.model.groupSettings.groupedColumns.length == 0)
                return;
            if ($.inArray(columnName, this.model.groupSettings.groupedColumns) != -1)
                this.model.groupSettings.groupedColumns.splice($.inArray(columnName, this.model.groupSettings.groupedColumns), 1);
            else
                return null;
            if (this.model.groupSettings.groupedColumns.length == 0)
                this._LastColumnUnGroup = true;
            var column = this.getColumnByField(columnName)
            if (!this.model.groupSettings.showGroupedColumn && !column["visible"]) {
                var index = this._hiddenColumnsField.indexOf(columnName), hTxt = this.getColumnByField(columnName).headerText;
                this._hiddenColumnsField.splice(index, 1);
                this._hiddenColumns.splice(this._hiddenColumns.indexOf(hTxt), 1);
                this._visibleColumns.push(hTxt);
                this._visibleColumnsField.push(columnName);
                column["visible"] = true;
            }
            var args = {};
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                if (this.model.sortSettings.sortedColumns[i].field == columnName) {
                    if (this._scolumns.indexOf(columnName) != -1 && this.model.allowSorting && this.model.allowMultiSorting || this._gridSort == columnName)
                        if (this.model.allowSorting && this.model.allowMultiSorting) {
                            var no = $.inArray(columnName, this._scolumns);
                            this._scolumns.splice(no, 1);
                            break;
                        }
                        else {
                            this._gridSort = null;
                            break;
                        }
                    else
                        this.model.sortSettings.sortedColumns.splice(i, 1);
                    break;
                }
            }
            args.columnName = columnName;
            args.requestType = ej.Grid.Actions.Ungrouping;
			this._isUngrouping = true;
            var returnValue = this._processBindings(args);
            if (returnValue)
                this.model.groupSettings.groupedColumns.push(columnName);
            this._primaryKeyValues = [];
        },
        
        collapseGroupDropArea: function () {
            var $groupDropArea = this.element.find(".e-groupdroparea").first(), proxy = this;
            this.model.groupSettings.groupedColumns.length == 0 && this.model.groupSettings.enableDropAreaAutoSizing && $groupDropArea.animate({ height: "10px" }, 200, function () {
                if (proxy.model != null && proxy.model.groupSettings.groupedColumns.length == 0) {
                    $(this).html("").append(ej.buildTag("div.e-animatebutton e-animatebuttondown e-icon e-gdownarrow"));
                    $(this).dequeue().css("height", "auto");
                }
            });
            
        },
        
        expandGroupDropArea: function () {
            var $groupDropArea = this.element.find(".e-groupdroparea").first(), proxy = this;
            this.model.groupSettings.groupedColumns.length == 0 && proxy.model.groupSettings.enableDropAreaAutoSizing && $groupDropArea.animate({ height: "30px" }, 150, function () {
                proxy.model.groupSettings.groupedColumns.length == 0 && $groupDropArea.html(proxy.localizedLabels.GroupDropArea).append(ej.buildTag("div.e-animatebutton e-animatebuttonup e-icon e-guparrow"));
                $groupDropArea.dequeue().css("height", "30px");
            });
        },
        _enableGroupingEvents: function () {
            if (this.model.allowGrouping) {
                this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", ".e-groupdroparea", this._groupHeaderCellClick);
            }
        },
        _recalculateIndentWidth: function () {
            var proxy = this;
            var browserDetails = !ej.isIOSWebView() && this.getBrowserDetails();
            var indentWidth = this.getHeaderTable().find(".e-lastgrouptopleftcell").width(), newWidth = indentWidth, perPixel = indentWidth / 30, $col;
            if (perPixel >= 1)
                newWidth = (30 / perPixel);
            this.getHeaderTable().find("colgroup").find("col").slice(0, this.model.groupSettings.groupedColumns.length).css("width", newWidth + "px");
            var $conCol = this.getContentTable().find("table").filter(":not(.e-recordtable)");
            indentWidth = this.getHeaderTable().find(".e-lastgrouptopleftcell").width();
            if (indentWidth > 30 || (this._isCaptionSummary && (indentWidth >= 30 || (indentWidth > newWidth)))) {
                if (this._isCaptionSummary) {
                    var colgroup = this.model.isEdit ? $conCol.parent(":not(.gridform)").children("colgroup") : $conCol.children("colgroup");
                    $.each(colgroup, function (index, item) {
                        var indentCol = $(item).find("col").length - proxy.model.columns.length;
                        if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
                            if (indentCol > 0)
                                indentCol = indentCol - 1;
                        }
                        $(item).find("col").slice(0, indentCol).css("width", newWidth + "px");
                    });
                }
                else {
                    if (this.model.isEdit) {
                        var colgroup = $conCol.parent(".gridform").find("colgroup");
                        this._setEditColGroup(colgroup, proxy, newWidth);
                    }
                    else
                        $conCol.children("colgroup").find("col:first-child").css("width", indentWidth + "px");
                }$col = this.getContentTable().find("colgroup").first().find("col").slice(0, this.model.groupSettings.groupedColumns.length);
                if (browserDetails && browserDetails.browser != "msie")
                    $col.css("width", newWidth + "px");
                else{
                    if (this._isCaptionSummary) 
						$col.css("width", newWidth + "px");
					else
						$col.first().css("width", ((indentWidth / this.element.width()) * 100) + "%");
				}
            } else {
                this.getContentTable().find("colgroup").first().find("col").slice(0, this.model.groupSettings.groupedColumns.length).css("width", newWidth + "px");
                if (this.model.isEdit) {
                    var colgroup = this.getContentTable().find(".gridform table").find("colgroup");
                    this._setEditColGroup(colgroup, proxy, newWidth);
                }
                this.getContentTable().find("table").filter(":not(.e-recordtable)").parent(":not(.gridform)").children("colgroup").find("col:first-child").css("width", indentWidth + "px");
            }
            if (this.model.showSummary) {
                var sumCols = this.getContentTable().find("table").filter(".e-groupsummary").find(".e-summary");
                sumCols.css("width", newWidth + "px");
            }
        },
        _setEditColGroup: function (colgroup, proxy, newWidth) {
            $.each(colgroup, function (index, item) {
                var indentCol = $(item).find("col").length - proxy.model.columns.length;
                if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
                    if (indentCol > 0)
                        indentCol = indentCol - 1;
                }
                $(item).find("col").slice(0, indentCol).css("width", newWidth + "px");
            });
        },
        getFieldNameByHeaderText: function (headerText) {
            if (ej.isNullOrUndefined(this._fieldColumnNames[headerText]))
                return null;
            return this._fieldColumnNames[headerText];
        },
        
        getHeaderTextByFieldName: function (field) {
            if (ej.isNullOrUndefined(this._headerColumnNames[field]))
                return null;
            return this._headerColumnNames[field];
        },
        
        expandAll: function () {
            var recordPlus = this.element.find(".e-recordpluscollapse");
            var detailRow = this._excludeDetailRows().find(".e-detailrowcollapse");
            if (recordPlus.length != 0) {
                for (var i = 0; i < recordPlus.length; i++)
                    this.expandCollapse($(recordPlus[i]));
            }
            if (detailRow.length != 0) {
                for (var i = 0; i < detailRow.length; i++)
                    this.expandCollapse($(detailRow[i]));
            }
        },
        
        collapseAll: function () {
            var recordPlus = this.element.find(".e-recordplusexpand");
            var detailRow = this.element.find(".e-detailrowexpand");
            if (recordPlus.length != 0) {
                for (var i = 0; i < recordPlus.length; i++)
                    this.expandCollapse($(recordPlus[i]));
            }
            if (detailRow.length != 0) {
                for (var i = 0; i < detailRow.length; i++)
                    this.expandCollapse($(detailRow[i]));
            }
        },
        _group: function (args) {
            if (this.model.groupSettings.groupedColumns.length && this.model.currentViewData) {
                this._currentJsonData = [];
                this._groupContextIndex = -1;
                this._summaryContextIndex = -1;
                var temp = document.createElement('div');
                if (!this.model.groupSettings.showGroupedColumn) {
                    if (!this.initialRender && !ej.isNullOrUndefined(args.columnName) && args.requestType == "grouping") {
                        var col = this.getColumnByField(args.columnName);
                        if ($.inArray(args.columnName, this._hiddenColumnsField) == -1) {
                            var hTxt = this.getColumnByField(args.columnName).headerText;
                            this._hiddenColumnsField.push(args.columnName)
                            this._hiddenColumns.push(hTxt);
                            this._visibleColumns.splice(this._visibleColumns.indexOf(hTxt), 1);
                            this._visibleColumnsField.splice(this._visibleColumnsField.indexOf(args.columnName), 1);
                            col.visible = false;
                        }
                    }
                    else {
                        for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                            if ($.inArray(this.model.groupSettings.groupedColumns[i], this._hiddenColumnsField) == -1) {
                                this._hiddenColumnsField.push(this.model.groupSettings.groupedColumns[i]);
								this._hiddenColumns.push(this.getColumnByField(this.model.groupSettings.groupedColumns[i]).headerText);
                                this.getColumnByField(this.model.groupSettings.groupedColumns[i]).visible = false;
                            }
                        }
                    }
                    this._hideHeaderColumn(this.model.groupSettings.groupedColumns, true);
                    this.getContentTable().children("colgroup").replaceWith(this.getHeaderTable().find('colgroup').clone());
                }
                if (args.requestType == "reorder")
                    this._isReorder = true;
                else
                    this._isReorder = false;
                var $col = this.getContentTable().children("colgroup").find('col');
                var length = $col.length - this.model.columns.length;
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    length--;
                if ($col.length > this.model.columns.length)
                    this.getContentTable().children("colgroup").find('col:lt(' + length + ')').remove();
                if (!this.initialRender) {
                    this.addInitTemplate();
                    this.addGroupingTemplate();
                }
                this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
                var dlen;
                if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                    dlen = this.model.groupSettings.groupedColumns.length + 1;
                }
                else
                    dlen = this.model.groupSettings.groupedColumns.length;
                for (var i = 0; i < dlen; i++)
                    this.getContentTable().children("colgroup").prepend(this._getIndentCol());
                if (this.model.currentViewData.length) {
                    var $tbody = this.getContentTable().children('tbody');
                    $tbody.empty();
                    temp.innerHTML = ['<table><tbody>', $.render[this._id + "_GroupingTemplate"](this.model.currentViewData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</tbody></table>'].join("");
                    this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                    this._hideCaptionSummaryColumn();
                }
				else if (this.model.isEdit)
                    this.cancelEdit();
                this._groupingAction();
                this._gridRows = this.getContentTable().find(".e-recordtable").find("tbody").find("tr.e-row,tr.e-alt_row").not(".e-gridSummaryRows");
                this._eventBindings();
            }
        },
        _ungroup: function () {
            this._isGrouping = false;
            if (!ej.isNullOrUndefined(this.model.detailsTemplate))
                this._detailsOuterWidth = null;
            var $header = this.element.children(".e-gridheader");
            var $filterInput = $header.find(".e-filterbar").find("th").find("input");
            $header.find("div").first().empty().append(this._renderGridHeader().find("table"));
            this.setGridHeaderContent($header);
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
                this._renderFiltering();
                this._renderFilterBarTemplate();

                var filterThNew = this.element.children(".e-gridheader").find(".e-filterbar").find("th").find("input");
                for (var i = 0; i < $filterInput.length; i++)
                    filterThNew.eq(i).val($filterInput.eq(i).val());
            }
            if (!this.model.groupSettings.showGroupedColumn)
                this._hideHeaderColumn(this.model.groupSettings.groupedColumns, true);
            this.addInitTemplate();
            this.addGroupingTemplate();
            this._initiateTemplateRendering();
            this.element.find(".e-gridcontent").children("div").first().empty().append(this._renderGridContent().find("table").first());
            this.setGridContent(this.element.find(".e-gridcontent"));
            if (this.model.groupSettings.groupedColumns.length != 0)
                this._gridRows = this.getContentTable().find(".e-recordtable").find("tbody").find("tr").toArray();
            else
                this._gridRows = this.getContentTable().get(0).rows;
           if(this.element.find('.e-groupdroparea').first().hasClass('e-allowDrop'))
				this.element.find('.e-groupdroparea').first().removeClass('e-allowDrop');
        },
        _groupHeaderCellClick: function (e) {
            var $target = $(e.target);
            if ($target.hasClass('e-groupdroparea'))
                return;
            if ($target.hasClass("e-ungroupbutton")) {
                var field = $target.parent().attr("data-ej-mappingname");
                this.ungroupColumn(field);
            } else if ($target.hasClass("e-togglegroupbutton")) {
                var field = $target.parent().attr("data-ej-mappingname");
                $target.hasClass("e-toggleungroup") && this.ungroupColumn(field);
            } else if ($target.hasClass("e-animatebutton")) {
                if (!$(e.target).hasClass("e-animatebuttondown")) {
                    this.collapseGroupDropArea();
                } else {
                    this.expandGroupDropArea();
                }
            }
            else {
                $target.addClass("e-headercelldiv");
                this._mouseClickHandler(e);
                $target.removeClass("e-headercelldiv");
            }           
        },
        _captionSummary: function (nocaption) {
            var summary = null, cols = this.model.summaryRows, k, len = cols.length;
            for (k = 0; k < len; k++) {
                if (cols[k].showCaptionSummary == true) {
                    summary = $(cols[k]);
                    break;
                }
            }
            
            if (nocaption) {
                var left = cols.slice(0, k), right = cols.slice(k + 1, len);
                ej.merge(summary = left, right);
            }

            return summary;
        },
        _dropAreaHover: function (e) {
            var $target = $(e.target), proxy = this;
            if (e.type == "mouseenter") {
                if (this._dragActive) {
                    if ($target.hasClass("e-groupdroparea"))
                        $target.addClass("e-hover");
                } else
                    $target.removeClass("e-hover");
                if ($(e.target).is(".e-icon.e-ascending, .e-descending") || $target.closest(".e-groupheadercell").length) {
                    $target = $(e.target).closest(".e-groupheadercell")
                }
                $target.hasClass("e-groupheadercell") && this.model.groupSettings.showUngroupButton && $target.find(".e-ungroupbutton").show(150);
            } else if (e.type == "mouseleave") {
                if ($target.hasClass("e-groupdroparea")) {
                    $target.find(".e-ungroupbutton").hide(150);
                    $target.removeClass("e-hover");
                }
                if ($(e.target).is(".e-icon.e-ascending, .e-descending") || $target.closest(".e-groupheadercell").length) {
                    $target = $(e.target).closest(".e-groupheadercell")
                }
                $target.hasClass("e-groupheadercell") && this.model.groupSettings.showUngroupButton && $target.find(".e-ungroupbutton").hide(150);
            }
            return false;
        },
        _groupingCompleteAction: function (args) {
            var $groupDrop = this.element.children(".e-groupdroparea");
            if (this.model.groupSettings.groupedColumns.length && $groupDrop.find(".e-grid-icon").length == 0 || ej.Grid.Actions.Refresh == args.requestType)
                $groupDrop.empty();
            if (this.initialRender || ej.Grid.Actions.Refresh == args.requestType) {
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
                    this._addColumnToGroupDrop(this.model.groupSettings.groupedColumns[i]);
                this._refreshGridPager();
            } else
                this._addColumnToGroupDrop(args.columnName);
            this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-number").remove();
            this.getHeaderTable().find(".e-columnheader").find(".e-ascending,.e-descending").remove();
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (!this.initialRender && ej.gridFeatures.dragAndDrop)
                this._groupHeaderCelldrag();
            this.model.allowScrolling && this.getContentTable().parent().scrollLeft(this.getHeaderTable().parent().scrollLeft() - 1);
            this.element.children(".e-cloneproperties").remove();
            if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType))
                this._refreshFilterIcon();
        },
        _ungroupingCompleteAction: function (args) {
            var $groupDrop = this.element.children(".e-groupdroparea");
            if (args.requestType != ej.Grid.Actions.Refresh)
               this._removeColumnFromDrop(args.columnName);
            this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-number").remove();
            this.getHeaderTable().find(".e-columnheader").find(".e-ascending,.e-descending").remove();
            for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
                this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
            if (this.model.groupSettings.groupedColumns.length == 0) {
                $groupDrop.html(this.model.groupSettings.enableDropAreaAutoSizing ? "" : this.localizedLabels.GroupDropArea);
                this.model.groupSettings.enableDropAreaAutoSizing && $groupDrop.append(ej.buildTag("div.e-animatebutton e-icon").addClass(this.model.groupSettings.enableDropAreaAutoSizing ? "e-animatebuttondown e-gdownarrow" : "e-animatebuttonup e-guparrow"));
                $groupDrop.css("height", "auto");
            }
            if (ej.gridFeatures.dragAndDrop)
                this._headerCellgDragDrop();
            if (this.model.allowReordering && ej.gridFeatures.dragAndDrop)
                this._headerCellreorderDragDrop();
            this.model.allowScrolling && this.getContentTable().parent().scrollLeft(this.getHeaderTable().parent().scrollLeft() -1);
            this.element.children(".e-cloneproperties").remove();
            if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType))
                this._refreshFilterIcon();
        },
        _getToggleButton: function () {
            return ej.buildTag("span.e-togglegroupbutton e-icon e-gridgroupbutton", "&#160;");
        },
        _checkEinHeader: function (field) {
            var $headerCell = this.element.children(".e-gridheader").find("thead").find(".e-columnheader").find(".e-headercell");
            for (var i = 0; i < $headerCell.length; i++) {
                if ($.trim($headerCell.eq(i).find("div").attr("data-ej-mappingname")) == field)
                    return $headerCell.eq(i);
                else if (this.model.allowSorting && this.model.allowMultiSorting) {
                    var header = $($headerCell.eq(i)).clone();
                    header.find(".e-number").remove();
                    if ($.trim(header.find("div").attr("data-ej-mappingname")) == field)
                        return header;
                }
            }
            return null;

        },

        _checkEinGroupDrop: function (field) {
            var $groupHeaderCell = this.element.children(".e-groupdroparea").find(".e-grid-icon");
            for (var i = 0; i < $groupHeaderCell.length; i++) {
                if ($.trim($groupHeaderCell.eq(i).find("div").attr("data-ej-mappingname")) == field)
                    return $groupHeaderCell.eq(i);
            }
            return null;
        },

        _addColumnToGroupDrop: function (field) {
            var $groupedColumn = ej.buildTag("div.e-grid-icon e-groupheadercell"), $groupDropArea = this.element.find(".e-groupdroparea").first();
            var $childDiv = ej.buildTag("div", {}, {}, { "data-ej-mappingname": field }), imageDirection = "e-rarrowup-2x";
            var column = this.getColumnByField(field)
            if (column.disableHtmlEncode)
                $groupedColumn.append($childDiv.text(column.headerText));
            else if (column.headerTemplateID)
                $groupedColumn.append($childDiv.html($(column.headerTemplateID).html()))
            else
                $groupedColumn.append($childDiv.html(column.headerText));
            var $headerCell = this._checkEinHeader(field);
            if (this.model.groupSettings.showToggleButton) {
                $childDiv.append(this._getToggleButton().addClass("e-toggleungroup"));
                $headerCell.find(".e-togglegroupbutton").remove().end().append(this._getToggleButton().addClass("e-toggleungroup"));
            }
            var direction = "ascending";
            if ($headerCell.find(".e-ascending,.e-descending").length) {
                direction = $headerCell.find(".e-ascending,.e-descending").hasClass("e-ascending") ? "ascending" : "descending";
                imageDirection = direction == "ascending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
            }
            $childDiv.append(this._createSortElement().addClass("e-" + direction + " " + imageDirection));
            this.model.groupSettings.showUngroupButton && $childDiv.append(ej.buildTag("span.e-ungroupbutton e-icon e-cancel", " ", {}, { title: this.localizedLabels.UnGroup }));
            $groupDropArea.append($groupedColumn).css("height", "auto");
            var left = $groupedColumn.offset().left, $cloned = $groupedColumn.clone().css("position", "absolute"), proxy = this;
            $groupedColumn.css("visibility", "hidden")
            $groupDropArea.append($cloned).dequeue();
            $cloned.css({ "left": left + 150 }).animate({ left: left }, 150, function (e) {
                $groupedColumn.css("visibility", "visible");
                $cloned.remove();
            });
        },
        _removeColumnFromDrop: function (field) {
            var headerText = this.getHeaderTextByFieldName(field), proxy = this, $groupDropArea = this.element.children(".e-groupdroparea");
            var $groupHeaderCell = $groupDropArea.css("height", "30px").find(".e-grid-icon");
            for (var i = 0; i < $groupHeaderCell.length; i++) {
                if ($.trim($groupHeaderCell.eq(i).find("div").attr("data-ej-mappingname")) == field) {
                    if (this.model.groupSettings.groupedColumns.length == 0) {
                        this.collapseGroupDropArea();
                    } else
                        $groupHeaderCell.eq(i).remove();
                }
            }
        },
        _setAggreatedCollection: function (clonedQuery) {
            if ((this._dataSource() instanceof ej.DataManager && this._dataManager.dataSource.url != undefined && !this._isRemoteSaveAdaptor && !this._dataManager.dataSource.offline) || this.model.enableLoadOnDemand)
                return;
            var data;
            data = this._dataManager.executeLocal(clonedQuery).result;
            this._aggregatedCollection = data;
        },
        _setAggregates: function (data, collection) {
            var indx, pred, query = new ej.Query();
            data = data || this.model.currentViewData, collection = collection || this._aggregatedCollection;
            var dLen = data.length, cLen;
            if (dLen != 0){
                var fieldPred = ej.Predicate("field", "equal", data[0].field), keyPred = ej.Predicate("key", "equal", data[0].key);
                if(data[0].key instanceof Date) {
                    var dateObject = { value: data[0].key, operator : "equal", field : "key" };
                    keyPred = this._setDateFilters(dateObject,true);
                }
                pred = (fieldPred["and"](keyPred));
            }
            for (indx = 1; indx < dLen; indx++) {
                var fieldPred = ej.Predicate("field", "equal", data[indx].field), keyPred = ej.Predicate("key", "equal", data[indx].key);
                if(data[indx].key instanceof Date) {
                    var dateObject = { value: data[indx].key, operator : "equal", field : "key" };
                    keyPred = this._setDateFilters(dateObject,true);
                }
                pred = pred["or"](fieldPred["and"](keyPred));
            }
            collection = pred ? new ej.DataManager(collection).executeLocal(query.where(pred)) : collection;
            if(!ej.isNullOrUndefined(collection))
			cLen = collection.length;
            if (data.length > 0) {
                for (indx = 0; indx < cLen; indx++) {
                    if (indx > 0 && indx < cLen - 1) continue;
                    data[indx].count = collection[indx].count; 
                    if (data[indx].items.GROUPGUID)
                        this._setAggregates(data[indx].items, collection[indx].items);
                    if (this.model.showSummary) { 
                        var agg = data[indx]["aggregates"] = [];
                        var rows = this.model.summaryRows, scolumns, summaryData;
                        for (var row = 0, rlen = rows.length; row < rlen; row++) {
                            scolumns = rows[row].summaryColumns;
                            for (var col = 0, clen = scolumns.length; col < clen; col++) {
                                summaryData = collection[indx].items.level ? collection[indx].items.records : collection[indx].items;
                                agg[scolumns[col].dataMember + " - " + scolumns[col].summaryType] = this.getSummaryValues(scolumns[col], summaryData);
                            }
                        }
                    }
                }
            }
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.dragAndDrop = {
        _headerCellgDragDrop: function () {
            var proxy = this;
            this.dragHeaderElement();
            var $droppableElements = this.element.children("div.e-groupdroparea");
            $droppableElements.ejDroppable({
                accept: $droppableElements,
                drop: function (event, ui) {
                    if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible"))
                        return;
                    var column = proxy.getColumnByField($.trim($(ui.draggable[0]).find("div").attr("data-ej-mappingname")));
                    ui.helper.remove();
                    if (proxy._disabledGroupableColumns.length && $.inArray(column["field"], proxy._disabledGroupableColumns) != -1)
                        return;
                    if (!(ej.isNullOrUndefined(column)) && (!(ej.isNullOrUndefined(column.field) || column.field == "")))
                        proxy.groupColumn(column.field);
                    if (proxy.model.allowGrouping)
                        proxy.collapseGroupDropArea();
                }
            });
        },
        _headerCellreorderDragDrop: function () {
            var proxy = this;
            this.dragHeaderElement();
            var $droppableElements = this.element.find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell");
            $droppableElements.ejDroppable({
                accept: $droppableElements,
                drop: function (event, ui) {
                    if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible") || $(ui.draggable[0]).closest('.e-grid').attr("id") != proxy._id)
                        return;
                    if (ui.draggable.attr("aria-sort") == "ascending" || ui.draggable.attr("aria-sort") == "descending") {
                        var scolumn = proxy.getColumnByField($.trim($(ui.draggable[0]).find("div").attr("data-ej-mappingname")));
                        if (proxy.model.allowSorting && proxy.model.allowMultiSorting)
                            proxy._scolumns.push(scolumn.field);
                        else
                            proxy._gridSort = scolumn.field;
                    }
                    var column, dropcolumn, fromindex, toindex, droppedIndex;
                    var draggedIndex = ui.draggable.index();
                    if (event.dropTarget.hasClass("e-headercelldiv"))
                        droppedIndex = event.dropTarget.parent().index();
                    else if (event.dropTarget.parent().hasClass("e-headercell") || event.dropTarget.hasClass("e-headercell"))
                        droppedIndex = event.dropTarget.index();
                    if ($(event.dropTarget).hasClass("e-number") || $(event.dropTarget).hasClass("e-icon") || event.dropTarget.closest(".e-headercelldiv"))
                        droppedIndex = event.dropTarget.closest(".e-headercell").index();
                    if (proxy.model.scrollSettings.frozenColumns > 0) {
                        fromindex = ui.draggable.closest('.e-frozenheaderdiv').length > 0 ? draggedIndex : draggedIndex + proxy.model.scrollSettings.frozenColumns;
                        toindex = event.dropTarget.closest('.e-frozenheaderdiv').length > 0 ? droppedIndex : droppedIndex + proxy.model.scrollSettings.frozenColumns;
                    }
                    else {
                        fromindex = draggedIndex;
                        toindex = droppedIndex;
                    }
                    if (proxy.model.allowGrouping && proxy.model.groupSettings.groupedColumns.length > 0) {
                        fromindex = fromindex - proxy.model.groupSettings.groupedColumns.length;
                        toindex = toindex - proxy.model.groupSettings.groupedColumns.length;
                    }
                    if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
                        fromindex = fromindex - 1;
                        toindex = toindex - 1;
                    }
                    column = proxy.getColumnByIndex(fromindex);
                    dropcolumn = proxy.getColumnByIndex(toindex);
                    var field = !ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.field) && column.field != "" ? column.field : null;
                    var field2 = !ej.isNullOrUndefined(dropcolumn.field) && dropcolumn.field != "" ? dropcolumn.field : null;
                    ui.helper.remove();
                    var header = $(event.dropTarget).clone();
                    header.find(".e-number").remove();
                    if (!ej.isNullOrUndefined(field) && !ej.isNullOrUndefined(field2)) {
                        if ($(event.dropTarget).hasClass("e-droppable")) {
                            header = header.children(".e-headercelldiv");
                            var eDropTarget = $(event.dropTarget).children(".e-headercelldiv");
                        }
                        else {
                            header = $(event.dropTarget).siblings(".e-headercelldiv");
                            var eDropTarget = $(event.dropTarget);
                            if ($(eDropTarget).hasClass("e-filtericon"))
                                eDropTarget = header = $(eDropTarget).siblings(".e-headercelldiv");
                        }
                        if (proxy.model.allowSorting && proxy.model.allowMultiSorting){
                            if (event.dropTarget.hasClass("e-number") || event.dropTarget.hasClass("e-icon")) 
                                var toColumn = proxy.getColumnByField($.trim(header.attr("data-ej-mappingname")));							                            
                            else 
                                var toColumn = proxy.getColumnByField($.trim(eDropTarget.attr("data-ej-mappingname")));
                            }
                        else {
                            if (event.dropTarget.hasClass("e-icon") && !event.dropTarget.hasClass("e-filtericon"))
                                var toColumn = proxy.getColumnByField($.trim(header.attr("data-ej-mappingname")));
                            else
                                var toColumn = proxy.getColumnByField($.trim(eDropTarget.attr("data-ej-mappingname")));
                        }
						if(ej.isNullOrUndefined(toColumn) && event.dropTarget.closest(".e-headercelldiv"))
							 var toColumn = proxy.getColumnByField($.trim(eDropTarget.closest(".e-headercelldiv").attr("data-ej-mappingname")));							
                        proxy.reorderColumns(column.field, toColumn.field);
                    }
                    else {
                        proxy.reorderColumns(fromindex, toindex);
                    }
                    if (proxy.model.allowGrouping)
                        proxy.collapseGroupDropArea();
                }
            });
        },

        dragHeaderElement: function () {
            var proxy = this;
            var $dragableElements = this.element.children("div.e-gridheader").find("th.e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell");
            var $visualElement = ej.buildTag('div.e-cloneproperties', "", { 'height': '20px', 'z-index': 2 }), column;
            //header element columnDrag
            $dragableElements.ejDraggable({
                cursorAt: { top: 0, left: 0 },
                helper: function (event, ui) {
                    if (proxy.element.find(".e-dragclone").length > 0) proxy.element.find(".e-dragclone").remove();
                    var $th, hcell;
                    if ($(event.element).hasClass("e-headercell"))
                        $th = $(event.element);
                    else
                        $th = $(event.element).closest("th");
                    hcell = $th.find(".e-headercelldiv");
                    var columnIndex = $(event.element).index();
                    if (proxy.model.allowGrouping && proxy.model.groupSettings.groupedColumns.length > 0)
                        columnIndex = columnIndex - proxy.model.groupSettings.groupedColumns.length;
                    else if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null)
                        columnIndex = columnIndex - 1;
                    column = proxy.getColumnByIndex(columnIndex);
                    proxy._$curSElementTarget = hcell; 
                    if (proxy.model.allowSorting && proxy.model.allowMultiSorting) {
                        var header = $($th).clone();
                        header.find(".e-number").remove();
                        return $visualElement.text(header.text()).clone().width($th.outerWidth() + 2).height($th.height() + 2).css({ "font-size": parseInt(($th.height() + 3) / 2) }).addClass("e-dragclone").appendTo(proxy.element);
                    }
                    else
                        return $visualElement.text($th.text()).clone().width($th.outerWidth() + 2).height($th.height() + 2).css({ "font-size": parseInt(($th.height() + 3) / 2) }).addClass("e-dragclone").appendTo(proxy.element);
                },
                dragStart: function (args) {
                    var target = args.target , $target = $(target);
                    var data = { target: target, draggableType: "headercell", column: column }, isGrouped, toggleClass, dragOnToggle = false;
                    if (proxy.model.groupSettings.showToggleButton && column && column.allowGrouping) {
                        isGrouped = $.inArray(column.field, proxy.model.groupSettings.groupedColumns);
                        toggleClass = $(args.element).find(".e-togglegroupbutton").hasClass("e-togglegroup");
                        if ((isGrouped != -1 && toggleClass) || (isGrouped == -1 && !toggleClass))
                            dragOnToggle = true;
                    }
                    if ((proxy._resizer != null && proxy._resizer._expand) || dragOnToggle || $target.eq(0).hasClass("e-filtericon") || (column && column.allowGrouping == false && column.allowReordering == false)) {
                        $(".e-dragclone").remove();
                        return false;
                    }
                    proxy._dragActive = true; 
                    if (proxy.model.allowGrouping)
                        proxy.expandGroupDropArea();
                    if (proxy._trigger("columnDragStart", data))
                        return false;
                },
                drag: function (args) {
                    var $target = $(args.target);
                    var data = { target: $target, draggableType: "headercell", column: column };
                    if (proxy._trigger("columnDrag", data))
                        return false;
                    if ($target.closest(".e-grid").attr("id") !== proxy._id)
                        return;
                    proxy.getHeaderTable().find(".e-headercell").removeClass("e-reorderindicate");
                    if (proxy.model.allowReordering && ($target.hasClass('e-headercelldiv') || $target.hasClass('e-headercell')) && !$target.hasClass('e-detailheadercell') && !$target.hasClass('e-stackedHeaderCell') && !$target.parent().hasClass("e-grouptopleftcell")) {
                        document.body.style.cursor = '';
                        $target.addClass("e-allowDrop");
                        proxy.getHeaderTable().find(".e-reorderindicate").removeClass("e-reorderindicate");
                        if ($target.hasClass('e-headercell')) $target.addClass("e-reorderindicate");
                        else $target.parent().addClass("e-reorderindicate");
                    }
                    if (proxy.model.allowScrolling) {
                        var pos = args.event.type == "touchmove" ? args.event.originalEvent.touches[0].pageX : args.event.pageX;
                        proxy._dragAutoScrollX(pos, args);
                    }
                    if ($target.hasClass('e-groupdroparea') || $target.closest('.e-groupdroparea').length) {
                        document.body.style.cursor = 'default';
                        $target.addClass("e-allowDrop");
                    }
                    else if ($target.hasClass('e-headercelldiv') || $target.hasClass('e-headercell')) {
                        document.body.style.cursor = 'pointer';
                    } else if ($target.hasClass("e-rowcell"))
                        document.body.style.cursor = 'not-allowed';
                },
                dragStop: function (args) {
                    if (!args.element.dropped) {
                        var $target = $(args.target);
                        var data = { target: $target, draggableType: "headercell", column: column };
                        proxy._trigger("columnDrop", data);
                        proxy.element.find(".e-groupdroparea").removeClass("e-hover");
                        proxy.getHeaderTable().find(".e-columnheader").find(".e-headercellactive").removeClass("e-headercellactive").removeClass("e-active");
                        if (!($(args.target).closest(".e-groupdroparea").length || ($(args.target).closest(".e-columnheader").length && proxy.model.allowReordering && !$(args.target).hasClass("e-stackedHeaderCell"))))
                            $(".e-dragclone").remove();
                        if ($(args.target).hasClass("e-rowcell") || $(args.target).hasClass("e-stackedHeaderCell"))
                            proxy.collapseGroupDropArea();
                        proxy._dragActive = false;
                        proxy.getHeaderTable().find(".e-reorderindicate").removeClass("e-reorderindicate");
                        document.body.style.cursor = '';
                        $(proxy._Indicator).css('display', 'none');
                    }
                }
            });
        },
        _groupHeaderCelldrag: function () {
            //grouped header cell drag.
            var $visualElement = ej.buildTag('div.e-cloneproperties e-grid', "", { 'height': '20px', 'z-index': 2 }), proxy;
            proxy = this;
            var $groupedHeaderCells = this.element.children(".e-groupdroparea").find(".e-groupheadercell");
            $groupedHeaderCells.ejDraggable({
                cursorAt: { top: 0, left: 0 },
                helper: function (event, ui) {
                    var $div = $(event.sender.target).closest(".e-grid-icon");
                    return $visualElement.text($(event.sender.target).closest(".e-groupheadercell").text()).clone().width($div.width() + 2).height($div.height() + 2).addClass("e-dragclone").appendTo(proxy.element);
                },
                dragStart: function (args) {
                    var target = args.target;
                    args.model.cursorAt = { top: 0, left: 0 };
                    var data = { target: target, draggableType: "groupheadercell" };
                    if (proxy._trigger("columnDragStart", data))
                        return false;
                },
                drag: function (args) {
                    $(".Sibling").remove();
                    var $target = $(args.target);
                    var data = { target: $target, draggableType: "groupheadercell" };
                    if (proxy._trigger("columnDrag", data))
                        return false;
                    if ($target.closest('div.e-gridcontent').length) {
                        document.body.style.cursor = '';
                        $target.addClass("e-allowDrop");
                    }
                    else if ($(args.target).closest(".e-columnheader").length > 0) {
                        document.body.style.cursor = 'pointer';
                    }
                    else
                        document.body.style.cursor = 'not-allowed';
                },
                dragStop: function (args) {
                    $(args.element).data("targetInstance", proxy);
                    if (!args.element.dropped) {
                        var $target = $(args.target);
                        var data = { target: $target, draggableType: "groupheadercell" };
                        if (!($(args.target).closest(".e-rowcell").length || $(args.target).closest(".e-groupcaption").length || $(args.target).closest(".e-columnheader").length ))
                            $(".e-dragclone").remove();
                        document.body.style.cursor = '';
                    }
                }
            });

            //grid content drop
            var $contentDroppableElements = this.element.children(".e-gridcontent, .e-gridheader");
            $contentDroppableElements.ejDroppable({
                accept: proxy.element.children("div.e-groupdroparea").find(".e-groupheadercell"),
                drop: function (event, ui) {
                    if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible") || !ui.draggable.hasClass("e-groupheadercell"))
                        return;
                    var field = $(ui.draggable[0]).find("div").attr("data-ej-mappingname");
                    ui.helper.remove();
                    if (!ej.isNullOrUndefined(field)) {
                        var childProxy = $(ui.draggable).data("targetInstance");
                        childProxy.ungroupColumn(field);
                    }
                }
            });
        },

        //Rows DragAndDrop
        _rowsDragAndDrop: function () {
            this.dragRowElement();
            var $droppableElements = this.getContent();
            var proxy = this;
            $droppableElements.ejDroppable({
                accept: $droppableElements,
                drop: function (event, ui) {
                    var targetRow = $(event.dropTarget).closest("tr"), srcControl, currentPageIndex;
                    if (!ui.helper.find("tr.e-srcgridinfo").length)
                        return false;
                    proxy._draggedGridID = ui.helper.find("tr.e-srcgridinfo").children("td").text();
                    if (proxy._draggedGridID != proxy._id)
                        srcControl = $("#" + proxy._draggedGridID).ejGrid("instance");
                    else
                        srcControl = proxy;
                    if (srcControl._id != proxy._id && srcControl.model.rowDropSettings.dropTargetID != "#" + proxy._id)
                        return false;
                    var records =srcControl.selectedRowsIndexes.length >0 ? srcControl.getSelectedRecords():$(srcControl._currentJsonData[srcControl._dragIndex]);
                    if(!ej.isNullOrUndefined(srcControl._dragIndex))
					  srcControl._dragIndex = null;
					var targetIndex = currentPageIndex = proxy.getIndexByRow(targetRow), count = 0;
                    if (targetIndex == -1){
                        targetIndex = currentPageIndex = 0;
                        if(proxy.getRows().length != 0)
                            targetIndex = proxy.getRows().length;
                    }
                    var currentPage = proxy._currentPage() || 1;
                    targetIndex = targetIndex + (currentPage * proxy.model.pageSettings.pageSize) - proxy.model.pageSettings.pageSize;
                    var dropDetails = { sourceID: srcControl._id, destinationID: proxy._id, destinationRowIndex: targetIndex };
                    var args = { target: targetRow, targetIndex: targetIndex, draggedRecords: records, dropDetails: dropDetails };
                    if (proxy._trigger("beforeRowDrop", args)){
                        $(".e-dragclone").remove();
                        return;
                    }                   
                    var dataSource = proxy._dataSource() instanceof ej.DataManager ? proxy._dataSource().dataSource : proxy._dataSource();
                    if (!ej.isNullOrUndefined(proxy.model.rowDropSettings.dropMapper)) {
                        if (ej.isNullOrUndefined(dataSource.headers))
                            dataSource.headers = [];
                        dataSource.headers.push({ rowDropDetails: JSON.stringify(dropDetails) });
                    }
                    if (proxy._id != srcControl._id) {
                        var dm = proxy._dataManager, adaptor = proxy._dataSource().adaptor;
                        var srcBatch = srcControl.getBatchChanges();
                        if(srcControl.model.rowDropSettings.dragBehavior == "move")
                        srcBatch["deleted"] = records;
                        var args = { dropDetails: dropDetails, records: records, requestType: ej.Grid.Actions.Refresh, targetIndex: targetIndex, action: "rowDragged" };
                        proxy._processDropRequest(srcControl, srcBatch, "drag", args);

                        var batch = proxy.getBatchChanges(); batch["added"] = records;
                        args.action = "rowDropped";
                        proxy._processDropRequest(proxy, batch, "drop", args);
                    }
                    else {
                        if (proxy._draggedGridID == proxy._id) {
                            proxy.reorderRows(srcControl.selectedRowsIndexes, currentPageIndex);
                            $(".e-dragclone").remove();
                        }
                    }
                }
            });
        },
        _dragAutoScrollX: function (pos, args) {
            var Position = pos - this.element.offset().left;
            var contentwidth = this.element.width() - this.model.scrollSettings.scrollerSize;
            var scrollObj = this.getScrollObject();
            var proxy = this;
            if (scrollObj && scrollObj._hScrollbar) {
                if (Position < 5) {
                    this._dragLeftInterval = setInterval(function () {
                        if (proxy._dragLeftInterval) {
                            var scrolLeft = scrollObj.scrollLeft();
                            var AvgWidth = ej.sum(proxy.columnsWidthCollection) / proxy.model.columns.length;
                            if (scrolLeft > scrollObj._hScrollbar.model.minimum) {
                                if (scrolLeft > AvgWidth)
                                    scrollObj.scrollX(scrollObj.scrollLeft() - AvgWidth, true);
                                else
                                    scrollObj.scrollX(scrollObj._hScrollbar.model.minimum, true);
                            }
                            else
                                proxy._dragLeftInterval && (proxy._dragLeftInterval = clearInterval(proxy._dragLeftInterval));
                        }
                    }, 500);
                }
                else if (Position > (contentwidth - 5)) {
                    this._dragRightInterval = setInterval(function () {
                        if (proxy._dragRightInterval) {
                            var scrollLeft = scrollObj.scrollLeft();
                            var AvgWidth = ej.sum(proxy.columnsWidthCollection) / proxy.model.columns.length;
                            if (Math.round(scrollLeft) < scrollObj._hScrollbar.model.maximum)
                                scrollObj.scrollX(scrollObj.scrollLeft() + AvgWidth, true);
                            else
                                proxy._dragRightInterval && (proxy._dragRightInterval = clearInterval(proxy._dragRightInterval));
                        }
                    }, 500);
                }
                else {
                    this._dragLeftInterval && (this._dragLeftInterval = clearInterval(this._dragLeftInterval));
                    this._dragRightInterval && (this._dragRightInterval = clearInterval(this._dragRightInterval));
                }
            }
        },
        _dragAutoScroll: function (proxy, args) {
            var scrollObj = proxy.getContent().data("ejScroller");
            var contentOffset = proxy.getContent()[0].getBoundingClientRect();
            if (!contentOffset)
                contentOffset = proxy.getContent().offset();
            if (scrollObj && scrollObj._vScrollbar) {
                if (contentOffset.top >= args.event.clientY) {
                    proxy._dragUpInterval = setInterval(function () {
                        if (proxy._dragUpInterval) {
                            var scrollPixel = -proxy.getRowHeight();
                            var scrolTop = scrollObj.scrollTop();
                            if (scrolTop != 0)
                                scrollObj.scrollY(scrollObj.scrollTop() + scrollPixel, true);
                            else
                                proxy._dragUpInterval && (proxy._dragUpInterval = clearInterval(proxy._dragUpInterval));

                        }
                    }, 500);

                }
                else if (contentOffset.top + proxy.getContent().height() <= args.event.clientY) {
                    proxy._dragDownInterval = setInterval(function () {
                        if (proxy._dragDownInterval) {
                            var scrollPixel = proxy.getRowHeight();
                            var scrolTop = scrollObj.scrollTop();
                            if (Math.round(scrolTop) <= scrollObj._vScrollbar.model.maximum)
                                scrollObj.scrollY(scrollObj.scrollTop() + scrollPixel, true);
                            else
                                proxy._dragDownInterval && (proxy._dragDownInterval = clearInterval(proxy._dragDownInterval));

                        }
                    }, 500);

                }
                else {
                    proxy._dragUpInterval && (proxy._dragUpInterval = clearInterval(proxy._dragUpInterval));
                    proxy._dragDownInterval && (proxy._dragDownInterval = clearInterval(proxy._dragDownInterval));
                }
            }
        },
        dragRowElement: function () {
            var proxy = this;
            var $dragableElements = $(this.getRows());
            var column;
            //header element columnDrag
            $dragableElements.ejDraggable({
                cursorAt: { top: -8, left: -8 },
                helper: function (event, ui) {
                    this.clone = true;
                    var tr = $(event.element).closest("tr"),$tr;
                    if (proxy._selectDrag || !tr.length || ($.inArray(proxy.getIndexByRow(tr), proxy.selectedRowsIndexes) == -1 && proxy.model.selectionType != "single") )
                        return false;
                    var $visualElement = ej.buildTag('div.e-cloneproperties e-draganddrop e-grid e-js', "", { 'height': 'auto', 'z-index': 2, 'position': 'absolute', 'width': proxy.element.width() }), $tr;
                    $visualElement.append(ej.buildTag("table", "", { 'width': proxy.element.width() }));
                    var rows = $(proxy.getRows()).clone().removeClass();
                    var height = 0;
					if(proxy.model.selectionType != "single" && proxy.selectedRowsIndexes.length >0){
						$tr = $.map(rows, function (ele, idx) {
						if ($.inArray(idx, proxy.selectedRowsIndexes) != -1) {
                            return ele
                        }
						$($tr).find("td").removeClass("e-selectionbackground e-active");
						if (!tr.find("td.e-selectionbackground").length)
							$visualElement.css("display", "none");
						});
					}
					else
						$tr = tr.clone();
                    var infoTr = ej.buildTag('tr.e-srcgridinfo e-grid', "", { 'display': 'none', 'height': 'auto' }).append("<td>" + proxy._id + "</td>");
                    $tr.push(infoTr[0]);
                    $visualElement.find("table").append($tr);
                      return $visualElement.addClass("e-dragclone").appendTo($('body'));
                },
                dragStart: function (args) {
                    var tr = $(args.target).closest("tr");
                    if (proxy._selectDrag ||($.inArray(proxy.getIndexByRow(tr), proxy.selectedRowsIndexes) == -1 && proxy.model.selectionType != "single"))
                        return false;
                    var target = args.target;
                    var rows = proxy.selectedRowsIndexes.length >0  ?proxy.getRowByIndex(proxy.selectedRowsIndexes[0], proxy.selectedRowsIndexes[proxy.selectedRowsIndexes.length]):tr;
                    if(proxy.model.selectionType != "single" && proxy.selectedRowsIndexes.length >0)
					{
						var records = proxy.getSelectedRecords();	
					}
					 else{
						proxy._dragIndex=proxy.getIndexByRow(tr);
						var records = proxy._currentJsonData[proxy._dragIndex];				
					}	
                    var data = { target: rows, currentTarget: target, draggableType: "rows", data: records, draggedRecords: records };
                    if (proxy._trigger("rowDragStart", data)){
                        $(".e-dragclone").remove();
                        return false;
                    }
                },
                drag: function (args) {
                    var $target = $(args.target), isGrid = $target.closest(".e-grid");
                    if (args.event.type == 'touchmove' && isGrid.length) {
                        isGrid.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
                        $target.closest(".e-rowcell").parent().addClass("e-hover");
                    }
                    var rows = proxy.selectedRowsIndexes.length >0?proxy.getRowByIndex(proxy.selectedRowsIndexes[0], proxy.selectedRowsIndexes[proxy.selectedRowsIndexes.length]):proxy.getRowByIndex(proxy._dragIndex);
                    var records = proxy.selectedRowsIndexes.length >0?proxy.getSelectedRecords():proxy._currentJsonData[proxy._dragIndex];
					var data = { target: rows, currentTarget: $target, draggableType: "rows", data: records, draggedRecords: records};
                    proxy._dragAutoScroll(proxy, args);
                    if (proxy._trigger("rowDrag", data)){
                        $(".e-dragclone").remove();
                        return false;
                    }
                    document.body.style.cursor = 'not-allowed';
                    var dropEle = $(proxy.model.rowDropSettings.dropTargetID);
                    if ($target.closest(proxy.model.rowDropSettings.dropTargetID).length || $target.closest("#" + proxy._id).length) {
                        if ($target.closest(".e-grid").length && ($target.closest(".e-rowcell").length || $target.closest(".emptyrecord").length))
                            $target.closest("table").addClass("e-allowRowDrop")
                        else if (!dropEle.hasClass("e-grid"))
                            dropEle.addClass("e-allowRowDrop");
                    }
                },
                dragStop: function (args) {
                    var $target = $(args.target), isGrid = $target.closest(".e-grid");
                    if (args.event.type == 'touchend' && isGrid.length)
                        isGrid.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
                    if (!args.element.dropped) {
                        proxy._dragUpInterval && (proxy._dragUpInterval = clearInterval(proxy._dragUpInterval));
                        proxy._dragDownInterval && (proxy._dragDownInterval = clearInterval(proxy._dragDownInterval));
                        var rows = proxy.selectedRowsIndexes.length >0?proxy.getRowByIndex(proxy.selectedRowsIndexes[0], proxy.selectedRowsIndexes[proxy.selectedRowsIndexes.length]):proxy.getRowByIndex(proxy._dragIndex);
                        var records = proxy.selectedRowsIndexes.length >0?proxy.getSelectedRecords():proxy._currentJsonData[proxy._dragIndex];
						document.body.style.cursor = '';
                        var dropEle = $(proxy.model.rowDropSettings.dropTargetID);
                        dropEle.hasClass("e-grid") ? dropEle.find(".e-gridcontent").find("table").removeClass("e-allowRowDrop") : dropEle.removeClass("e-allowRowDrop");
                        proxy.getContent().find("table").removeClass("e-allowRowDrop");
                        var data = { rows: rows, target: $target, draggableType: "rows", data: records, droppedRecords: records };
						if(ej.isNullOrUndefined(this._checkTargetElement(args.event)))
						  $(".e-dragclone").remove();
                        if (proxy._trigger("rowDrop", data))
                            return false;
                    }
                }
            });
        },
        _processDropRequest: function (cntrl, batch, action, args) {
			if(args.action == "rowDragged")
				$(".e-dragclone").remove();
            var mapper = cntrl._dataManager.dataSource.batchUrl;
            cntrl._dataManager.dataSource.batchUrl = cntrl.model.rowDropSettings[action + "Mapper"];
            if (cntrl._isRemoteSaveAdaptor && cntrl._dataManager.dataSource.batchUrl == null) {
                if (action == "drop")
                    for (i = 0; i < batch.added.length; i++)
                        ej.JsonAdaptor.prototype.insert(cntrl._dataManager, batch.added[i]);
                else
                    for (i = 0; i < batch.deleted.length; i++)
                        ej.JsonAdaptor.prototype.remove(cntrl._dataManager, cntrl._primaryKeys[0], batch.deleted[i]);
            }
            var dragPromise = cntrl._dataManager.saveChanges(batch, cntrl._primaryKeys[0], cntrl.model.query._fromTable);
            if ($.isFunction(dragPromise.promise) && cntrl._dataManager.dataSource.batchUrl != null) {
                $("#" + cntrl._id).data("ejWaitingPopup").show();
                dragPromise.done(function (e) {
                    if (cntrl._isLocalData && (action == "drop")) {
                        if (args.dropDetails.sourceID == args.dropDetails.destinationID)
                            cntrl._moveDroppedRowIndex(args.targetIndex, args.records, args.draggedRowIndexes);
                        else
                            cntrl._moveDroppedRowIndex(args.targetIndex, args.records);
                    }
                    if (action == "drop")
                        cntrl._dataSource() instanceof ej.DataManager ? cntrl._dataSource().dataSource.headers.pop() : cntrl._dataSource().headers.pop();
                    cntrl._dataManager.dataSource.batchUrl = mapper;
                    cntrl.refreshBatchEditChanges();
                    $("#" + cntrl._id).data("ejWaitingPopup").hide();
                    cntrl._processBindings(args);
                });
                dragPromise.fail(function (e) {
                    cntrl._dataManager.dataSource.batchUrl = mapper;
                    $("#" + cntrl._id).data("ejWaitingPopup").hide();
                    args.error = (e && e.error) ? e.error : e;
                    cntrl._trigger("actionFailure", args)
                });
            }
            else {
                cntrl.refreshBatchEditChanges();
                cntrl._dataManager.dataSource.batchUrl = mapper;
                if (action == "drop")
                    cntrl._moveDroppedRowIndex(args.targetIndex, args.records);
                if (!(args.dropDetails.sourceID == args.dropDetails.destinationID && action == "drag"))
                    cntrl._processBindings(args);
            }
        },
        reorderRows: function (indexes, toIndex) {
            if (!this.model.sortSettings.sortedColumns.length) {
                var records = this.getSelectedRecords();
                this.selectedRowsIndexes = [];
                var args = { requestType: ej.Grid.Actions.Refresh, action: "rowReordering", draggedRowIndexes: indexes, targetIndex: toIndex, dropDetails: { sourceID: this._id, destinationID: this._id, DestinationRowIndex: toIndex }, records: records };
                if (ej.isNullOrUndefined(this.model.rowDropSettings.dropMapper)) {
                    if (this._trigger("actionBegin", args))
                        return false;
                    this._moveDroppedRowIndex(toIndex, records, indexes);
                    this._trigger("actionComplete", args)
                } else {
                    var batch = this.getBatchChanges();
                    batch["changed"] = records;
                    this._processDropRequest(this, batch, "drop", args);
                }
            }
        },
        _moveDroppedRowIndex: function (targetIndex, records, reorderFrom) {
            if (!ej.isNullOrUndefined(reorderFrom)) {
                var reorderFrom = reorderFrom.sort(function (a, b) { return a - b });
                var currentargetIndex = targetIndex, skip, index, count = 0;
                var currentRecords = this.model.currentViewData.slice();
                var targetRow = this.getRowByIndex(targetIndex);
                targetIndex += (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
                for (var i = 0; i < reorderFrom.length; i++) {
                    var data = currentRecords[reorderFrom[i]];
                    index = reorderFrom[i] - count;
                    skip = 0;
                    var rows = this._excludeDetailRows();
                    var srcRow = $(rows[index]);
                    if (currentargetIndex > index)
                        count++;
                    if (this.model.allowPaging)
                        skip = (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
                    index = skip + index;
                    this.selectedRowsIndexes.push(currentargetIndex - count);
                    if (i == reorderFrom.length - 1)
                        this.model.selectedRowIndex = this.selectedRowsIndexes[0];
                    if ((this.model.detailsTemplate != null || this.model.childGrid != null) && srcRow.next().hasClass("e-detailrow"))
                        srcRow = srcRow.add(srcRow.next()[0]);
                    targetRow.before(srcRow);
                    if (currentargetIndex < reorderFrom[i] - count)
                        currentargetIndex++
                    else
                        targetIndex--;
                    if (!(this._dataSource() instanceof ej.DataManager))
                        this._dataSource().splice(targetIndex + i, 0, this._dataSource().splice(index, 1)[0])
                    else
                        this._dataSource().dataSource.json.splice(targetIndex + i, 0, this._dataSource().dataSource.json.splice(index, 1)[0])
                    this.model.currentViewData.splice(targetIndex + i - skip, 0, this.model.currentViewData.splice(index - skip, 1)[0])
                }
            }
            else if (targetIndex > -1) {
                var data = this._dataSource() instanceof ej.DataManager ? this._dataSource().dataSource.json : this._dataSource();
                var currentIndex = targetIndex + (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
                for (var i = 0; i < records.length; i++) {
                    data.splice(targetIndex++, 0, data.splice(data.length - records.length + i, 1)[0]);
                }
            }
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.selection = {
        
        selectRows: function (rowIndex, toIndex, target) {
            if (!this._allowrowSelection)
                return false;
            if (this._traverseRow != rowIndex)
                $(".e-traverse").removeClass("e-traverse");
            this._traverseRow = null;
            var rowIndexCollection = [];
			if(this.initialRender)
				this.model.currentIndex = rowIndex;
			if(this.model.scrollSettings.enableVirtualization){
				if ($.isArray(rowIndex))
					this.model.currentIndex = rowIndex[0];
				else if(toIndex){
					this.model.currentIndex = rowIndex > toIndex ? toIndex : rowIndex;
				}							
			}
            var scrollObj = null;
			if(this.model.allowScrolling && !ej.isNullOrUndefined(this.getContent().data("ejScroller")))
			  scrollObj = this.getScrollObject();
            if (!this.multiSelectCtrlRequest && this.model.scrollSettings.allowVirtualScrolling) {
                if (!this._virtuaOtherPage) {
                    if (!(scrollObj !=null && scrollObj.model.keyConfigs.down == "" && target)) this.clearSelection();
                    this._virtualScrollingSelection = false;
                }
                else
                    this._virtualScrollingSelection = true;
            }
            if ($.isArray(rowIndex)) {
                rowIndexCollection = rowIndex;
				rowIndex = rowIndexCollection[0];
				this._virtaulSel = [];
				if(this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization){										
					this._virtualScrollingSelection = true;
					this._virtualSelectedRows = rowIndexCollection;
					var from = (parseInt(rowIndex / this.model.pageSettings.pageSize)) * this.model.pageSettings.pageSize;
					var to = (parseInt((rowIndex / this.model.pageSettings.pageSize)) + 1) * this.model.pageSettings.pageSize;
					this._virtaulSel.push(rowIndex);
					if (rowIndexCollection.length > 0) {
                       this._virtualSelRecords = [];
                        for (var i = 0; i < rowIndexCollection.length; i++) {
                            this._virtualSelRecords.push(this.model.currentViewData[rowIndexCollection[i]]);
                        }
                    }
					if (!this._virtuaOtherPage)
						this._virtaulUnSel = []
					for (var i = 1; i < rowIndexCollection.length; i++) {
						if (from < rowIndexCollection[i] && rowIndexCollection[i] < to)
							this._virtaulSel.push(rowIndexCollection[i]);
						else
							this._virtaulUnSel.push(rowIndexCollection[i]);
					}										
				}
            }

            var $gridRows = $(this.getRows()),Data;
            if (this.model.allowScrolling && !this.multiSelectShiftRequest && (this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows ==0 )) {
                var selectedRow = $gridRows.eq(rowIndex)[0];
                if (!ej.isNullOrUndefined(selectedRow) && this.model.groupSettings.groupedColumns.length == 0 && !ej.isNullOrUndefined(this.getContent().data("ejScroller"))) {
                    var scrollTop = scrollObj.scrollTop();
                    var ContentViewHeight = scrollTop + scrollObj.content()[0].clientHeight;
                    var selectedRowPos = selectedRow.offsetTop + selectedRow.offsetHeight;
                    var pixel = selectedRow.offsetTop, currentIndex = !target ? Math.ceil((rowIndex + 1) / this._virtualRowCount) : parseInt($(this._gridRows[rowIndex]).attr("name"), 32);
                    if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
                        selectedRowPos += (ej.min(this._currentLoadedIndexes) - 1) * this._virtualRowCount * this._vRowHeight;
                        pixel = (this.model.currentIndex * this._vRowHeight) + rowIndex + selectedRow.offsetHeight;
                    }
                    var scrollBottom = ((selectedRowPos - this._vRowHeight) <= scrollTop && selectedRowPos < ContentViewHeight) && (rowIndex || scrollTop) ;
                    if (!ej.isNullOrUndefined(selectedRow) && ContentViewHeight < selectedRowPos || scrollBottom) {
                        if (scrollBottom) pixel = selectedRowPos - selectedRow.offsetHeight;
						if(scrollObj.model.keyConfigs.down == "") 
							pixel = this.model.selectedRowIndex < rowIndex ?  scrollObj.model.scrollTop + selectedRow.offsetHeight :  scrollObj.model.scrollTop - selectedRow.offsetHeight;
						var loadedIndex = this._currentLoadedIndexes;
                        (!this.model.scrollSettings.enableVirtualization || $.inArray(currentIndex, this._currentLoadedIndexes) != -1) && scrollObj.scrollY(pixel,true);
						if(scrollObj.model.keyConfigs.down == "" &&  JSON.stringify(this._currentLoadedIndexes)!= JSON.stringify(loadedIndex)) return;
                    }
                }
            }
            var args = {}, ascend, res, currentPage = this._currentPage() - 1, pageSize = this.model.pageSettings.pageSize;
            if (!this.model.scrollSettings.enableVirtualization) {
                var nameIndx = this.getRowByIndex(rowIndex).attr("name");
                var pageIndex = !ej.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
            }
            if (!ej.isNullOrUndefined(rowIndex)) {
                if (this.model.editSettings.editMode == "batch" && $($gridRows[rowIndex]).hasClass("e-insertedrow")) {
                    var addedrows = this.batchChanges.added.reverse();
					if(this.model.editSettings.rowPosition == "bottom"){
						if(rowIndex >= this.model.currentViewData.length){
							var Index = rowIndex - this.model.currentViewData.length;
						 var currentData = addedrows.slice(0);
						 Data = currentData.reverse()[Index];
						}
					}					
					else				
						Data = addedrows[rowIndex];
                    this.batchChanges.added.reverse();
                }
                else
                    Data = this.model.editSettings.editMode == "batch"?(this.model.editSettings.rowPosition == "bottom" ? this._currentJsonData[rowIndex]:this._currentJsonData[rowIndex - this.batchChanges.added.length]):this._currentJsonData[ej.isNullOrUndefined(rowIndex) ? toIndex : rowIndex];
            }
            var $rowIndex = rowIndex, $prevIndex = this._previousIndex, $prevRow = this.getRowByIndex(this._previousIndex), isSelection = "selectRows";
            args = { rowIndex: $rowIndex, row: $gridRows.eq(rowIndex), data: Data, selectedData: Data, target: target, prevRow: $prevRow, prevRowIndex: $prevIndex };
            if (this.model.scrollSettings.allowVirtualScrolling) {
				if(!this.initialRender)
				this._virtualDataRefresh = true;
                args = this._getVirtualRows(rowIndex, target, isSelection, rowIndexCollection);
                if(args == false || ej.isNullOrUndefined(args))
                    return;
                if (!this.model.scrollSettings.enableVirtualization)
                    $rowIndex = rowIndex = args.rowIndex;
                else if (this._enableCheckSelect && ej.isNullOrUndefined(target) && args.row.length)
                    $rowIndex = rowIndex = args.row.index();
                Data = args.data;
                $prevIndex = args.prevRowIndex;
                $prevRow = args.prevRow;
            }
			if (target && target.hasClass("e-checkselectall")){
				if(this._isLocalData)
					args.data = this._dataSource() instanceof ej.DataManager ? this._dataSource().dataSource.json : this._dataSource();
				else
					args.data = this.model.currentViewData;
			}
            if (this._trigger("rowSelecting", args)) {
                if (this._enableCheckSelect && !ej.isNullOrUndefined(target) && (args.target.parent(".e-checkcelldiv").length || target.hasClass("e-checkselectall") ))
                    target.prop("checked", this.model.enableTouch);
                return;
            }
            if (target && target.hasClass("e-checkselectall") && this._isLocalData && this._isMapSelection)
                return this._headerCheckUpdateAll(!target[0].checked);
            var $gridRows = $(this.getRows());
            if (this._isMapSelection && !this._selectionByGrid && ej.isNullOrUndefined(toIndex) && !this.initialRender) {
                if (!rowIndexCollection.length) {
                    if (this.model.scrollSettings.frozenColumns) {
                        var index=this.model.columns.indexOf(ej.DataManager(this.model.columns).executeLocal(new ej.Query().where("type","equal","checkbox"))[0]);
                        $gridRows=$(this.getContent).find(index >= this.model.scrollSettings.frozenColumns ? ".e-movablecontent" : ".e-frozencontentdiv").find('tr')
                        Data[this._selectionMapColumn] = !$gridRows.eq(rowIndex).find($(".e-checkcelldiv input")).prop("checked");                                         
                    }
                    else
                    Data[this._selectionMapColumn] = !args.row.find(".e-checkcelldiv input").prop("checked");
                    this.updateRecord(this._primaryKeys[0], Data, "update");
                    return;
                }
            }
            if ((this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) && this.model.isEdit && this.model.enableAutoSaveOnSelectionChange) {
                if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal") || this.getContentTable().find(".e-editedrow").length != 0) {
                    if (this.endEdit())
                        return; 
                    else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                        $("#" + this._id + "_externalEdit").css("display", "none");
                }
            }
            if (this.checkSelectedRowsIndexes[currentPage] == undefined && !this._isMapSelection)
                this.checkSelectedRowsIndexes[currentPage] = [];
            if (rowIndexCollection.length > 0) {
                for (var i = 0; i < rowIndexCollection.length; i++) {
                    this.selectedRowsIndexes.indexOf(rowIndexCollection[i]) == -1 && this.selectedRowsIndexes.push(rowIndexCollection[i]);
                    this._selectedMultipleRows(this.selectedRowsIndexes);
                    if (this._isMapSelection && !this._selectionByGrid) {
                        var cData = this._currentJsonData[rowIndexCollection[i]];
                        cData[this._selectionMapColumn] = true;
                        this.batchChanges.changed.push(cData);
                    }
                }
				if( !this.model.scrollSettings.enableVirtualization){
					var diff = this._virtaulSel[0] - rowIndex;
					for (var i = 0; i < this._virtaulSel.length; i++) {
						this._virtaulSel[i] -= diff;
					}
				}
                var rows = this.getRowByIndex(this.model.scrollSettings.allowVirtualScrolling ? this._virtaulSel : rowIndexCollection);
				for(var i = 0;i < rows.length;i++){
					if(ej.isNullOrUndefined(rows[i]))
						rows.splice(i,1);
				}
                $(rows).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                if (this._enableCheckSelect && !this._isMapSelection) {
                    $(rows).find(".e-checkcelldiv input").prop("checked", "checked");
                }
                Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                if (this._isMapSelection && !this._selectionByGrid && !this.initialRender) {
                    this.batchSave();
                    return;
                }
            }
            else if (ej.isNullOrUndefined(toIndex) || ej.isNullOrUndefined(rowIndex)) {
                rowIndex = ej.isNullOrUndefined(rowIndex) ? toIndex : rowIndex;
                $rowIndex = rowIndex;
                switch (this.model.selectionType) {
                    case ej.Grid.SelectionType.Multiple:
                        if (this.multiSelectCtrlRequest) {
                            this.model.selectedRecords = [];
                            var virtualIndex = $rowIndex;
                            if (this.model.scrollSettings.enableVirtualization && this._enableCheckSelect)
                                virtualIndex = args.rowIndex;
                            var selectedRowIndex = $.inArray($rowIndex, this.selectedRowsIndexes);
                            selectedRowIndex != -1 && !this._isMapSelection && this.clearSelection($rowIndex, target) && this.selectedRowsIndexes.splice(selectedRowIndex, 0);
                            if (selectedRowIndex == -1) {
                                this.selectedRowsIndexes.push($rowIndex);
								this._selectedMultipleRows(this.selectedRowsIndexes);
								var tr = this.getRowByIndex(rowIndex);
								if(this.model.scrollSettings.enableVirtualization)
	                                this._virtualSelectedRowIndex.push(args.rowIndex);
								if (this.model.scrollSettings.enableVirtualization && this._enableCheckSelect) {
								    var curRowIndex = parseInt(tr.attr("name"), 32);
								    var rowPage = curRowIndex % (this.model.pageSettings.pageSize / this._virtualRowCount);
								    if (rowPage == 0)
								        rowPage = (this.model.pageSettings.pageSize / this._virtualRowCount);
								    var curPage = Math.ceil((curRowIndex * this._virtualRowCount) / this.model.pageSettings.pageSize) - 1
								    var checkIndex = (args.rowIndex % this._virtualRowCount) + ((rowPage * this._virtualRowCount) - this._virtualRowCount);
								    if (this.checkSelectedRowsIndexes[curPage] == undefined && !this._isMapSelection)
								        this.checkSelectedRowsIndexes[curPage] = [];
								    this.checkSelectedRowsIndexes[curPage].push(checkIndex);
								}
                                tr.attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                                if (!this.model.scrollSettings.enableVirtualization)
                                    this._virtualSelectAction(pageIndex, rowIndex, pageSize);
                                else {
                                    this._virtualSelectedRecords[$rowIndex] = this._getSelectedViewData(rowIndex, target).data;
                                    this._virtualCheckSelectedRecords[args.rowIndex] = this._getSelectedViewData(rowIndex, target).data;
                                }
                                if ((this._enableCheckSelect && target && !target.parent().hasClass("e-checkcelldiv")) || (ej.isNullOrUndefined(target) && this._enableCheckSelect))
                                    tr.find(".e-checkcelldiv input").prop("checked", "checked");
                            }
                            Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                            break;
                        }
                    case ej.Grid.SelectionType.Single:
                        this.clearSelection();
                        this.clearColumnSelection();
                        this.selectedRowsIndexes = [];
                        this.model.selectedRecords = [];
                        this._virtualSelectedRecords = {};
                        this._virtualCheckSelectedRecords = {};
                        this.selectedRowsIndexes.push($rowIndex);
						this._selectedMultipleRows(this.selectedRowsIndexes);
						if(this.model.scrollSettings.enableVirtualization&& (rowIndex > this.getRows().length)){
							var Index = rowIndex % this._virtualRowCount;
							$(this._virtualLoadedRows[this._currentVirtualIndex][Index]).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
						}
						else
							this.getRowByIndex(rowIndex).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
						if(this.model.scrollSettings.enableVirtualization)
	                        this._virtualSelectedRowIndex.push(args.rowIndex);
						if (!this.model.scrollSettings.enableVirtualization)
						    this._virtualSelectAction(pageIndex, rowIndex, pageSize);
						else {
						    this._virtualSelectedRecords[$rowIndex] = Data;
						    this._virtualCheckSelectedRecords[args.rowIndex] = Data;
						}
                        Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                        this._enableCheckSelect && this.getRowByIndex(rowIndex).find(".e-checkcelldiv [type=checkbox]").prop("checked", true);
                        break;
                }
            } else {
                if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
                    !this._isMapSelection && this.clearSelection(undefined,target);
                    this.clearColumnSelection();
                    this.selectedRowsIndexes = [];
                    this.model.selectedRecords = [];                  
                    this._virtualSelectedRecords = {};
                    this._virtualCheckSelectedRecords = {};
                    this._selectedMultipleRows([]);
					var $toIndex = toIndex;					
					this._virtualUnSel = [];
					this._virtualUnSelIndexes = [];
					if (this._isMapSelection || !(target && target.hasClass("e-checkselectall") && target[0].checked) && !this._isCheckboxUnchecked || this._isCheckboxChecked) {
					    if (this.model.scrollSettings.enableVirtualization && (target && !target.hasClass("e-checkselectall"))) {
					        var viewIndex = this._getSelectedViewData(toIndex, target).viewIndex;
					        var remain = toIndex % this._virtualRowCount;
					        $toIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
					        if ($rowIndex != this._prevSelIndex) $rowIndex = this._prevSelIndex;
					    }
					    ascend = $rowIndex - $toIndex < 0;
                        var rows;
					    if (!this.model.scrollSettings.enableVirtualization)
					        rows = ascend ? this.getRowByIndex(rowIndex, toIndex + 1) : this.getRowByIndex(toIndex, rowIndex + 1);
					    if (this.model.scrollSettings.frozenColumns)
					        rows = $(rows[0]).add(rows[1]);
					    var rowIndexes = [];
					    for (var i = ascend ? $rowIndex : $toIndex, to = ascend ? $toIndex : $rowIndex; i <= to; i++) {
					        if (this.model.scrollSettings.allowVirtualScrolling) {
					            if (!this.model.scrollSettings.enableVirtualization) {
					                var nameIndx = this.getRowByIndex(i).attr("name");
					                var pageIndex = !ej.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
					                this._virtualSelectedRecords[selIndex] = this._getSelectedViewData(i).data;
					                this._virtualSelectAction(pageIndex, i, pageSize);
					            }
					            else {
					                var viewIndex = this._getSelectedViewData(i).viewIndex;
					                if ($.inArray(viewIndex, this._currentLoadedIndexes) != -1) {
					                    var indx = this._currentLoadedIndexes.indexOf(viewIndex);
					                    var selIndex = i % this._virtualRowCount + indx * this._virtualRowCount;
					                    if (selIndex == 0) indx * this._virtualRowCount;
					                    rowIndexes.push(selIndex);
					                }
					                else {
					                    this._virtualUnSel.push(i);
					                    if ($.inArray(viewIndex, this._virtualUnSelIndexes) == -1)
					                        this._virtualUnSelIndexes.push(viewIndex);
					                }
					            }
					        }
					        if (!(this.model.scrollSettings.enableVirtualization && this._enableCheckSelect) || this.getRowByIndex(i).length){
					                this.selectedRowsIndexes.push(i);
									this._virtualSelectedRowIndex.push(i);
							}
					            this._selectedMultipleRows(this.selectedRowsIndexes);

					        if (this._isMapSelection && !this._selectionByGrid) {
					            var cData = this._currentJsonData[i];
					            cData[this._selectionMapColumn] = !target[0].checked;
					            this.batchChanges.changed.push(cData);
					        }
					    }
					    if(this.model.scrollSettings.enableVirtualization && this._enableCheckSelect){
							var cloneQuery = this.model.query.clone(), data = null;               
							this._virtualCheckSelectedRecords = {};
							cloneQuery.queries = cloneQuery.queries.filter(function(e,i){ return e.fn!="onPage" });
							if(this._isLocalData) 
								data = !(this._dataSource() instanceof ej.DataManager) ? ej.DataManager(this._dataSource()).executeLocal(cloneQuery).result : this._dataSource().executeLocal(cloneQuery).result;
							ej.copyObject(true,this._virtualCheckSelectedRecords, ej.isNullOrUndefined(data) ? this._currentJsonData : data);
						}
					    if (this._isMapSelection) {
					        this.batchSave();
					        return;
					    }
					    if (this.model.scrollSettings.enableVirtualization)
					        rows = this.getRowByIndex(rowIndexes[0], rowIndexes[rowIndexes.length - 1] + 1);
					    $(rows).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
					    Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
					    if (this._enableCheckSelect)
					        $(rows).find(".e-checkcelldiv input").prop("checked", "checked");
						    if(this.multiSelectShiftRequest)
								target.prop("checked",false);
							this._isCheckboxChecked = false;
							this._isCheckboxUnchecked = false;
					}
                }
            }
            if (this._enableCheckSelect) {
                if (!this.model.scrollSettings.enableVirtualization)
                    this.checkSelectedRowsIndexes[currentPage] = this.selectedRowsIndexes;
                if (!this._selectAllCheck) {
                    if (this.selectedRowsIndexes.length == this._currentJsonData.length || this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && [].concat.apply([], this.checkSelectedRowsIndexes).length >= this._gridRecordsCount)
                        this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").prop("checked", "checked");
                    else if (this._selectionByGrid)
                        this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").prop("checked", false);
                }
            }
            if (this._selectedRow() !== $rowIndex && $(this.getRowByIndex($rowIndex)).attr("aria-selected") == "true")
                this._selectedRow($rowIndex);
            if (target && target.hasClass("e-checkselectall") && !this._isMapSelection) {
                var gridInstance = this;
				var totalPage = this._dataSource() instanceof ej.DataManager && this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling && !this.model.scrollSettings.enableVirtualization ? Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize) :this.model.pageSettings.totalPages;
				var sel = this.model.enableTouch ? !target.is(":checked") : target.is(":checked");
				this.checkSelectedRowsIndexes = sel ? $.map(Array(totalPage), function (x, i) { x = Array($.map(Array(gridInstance.model.pageSettings.pageSize), function (x2, i2) { return i2 })); return x; }) : [];
				var totalcount = [].concat.apply([], this.checkSelectedRowsIndexes).length;
				if (!target.is(":checked") && totalcount > this._gridRecordsCount) this.checkSelectedRowsIndexes[this.checkSelectedRowsIndexes.length - 1].splice(this._gridRecordsCount - totalcount);
            }
            Data = this._virtualScrollingSelection ? this._virtualSelRecords : Data;
			var selectedIndex = this.model.scrollSettings.enableVirtualization ? $rowIndex : this._selectedRow();
            var args = { rowIndex: selectedIndex, row: this.getRowByIndex(this._selectedRow()), data: Data, selectedData: Data, target: target, prevRow: $prevRow, prevRowIndex : $prevIndex };
            this._previousIndex = this.selectedRowsIndexes.length ? rowIndex :this._previousIndex;
			if(this.model.scrollSettings.enableVirtualization){
				this._prevSelIndex = $rowIndex; 
				this._prevSelRow = this.getRowByIndex(rowIndex);
			}
			for (var i = 0; i < this.checkSelectedRowsIndexes.length; i++) {
			    if (ej.isNullOrUndefined(this.checkSelectedRowsIndexes[i]))
			        this.checkSelectedRowsIndexes[i] = [];
			}
			this.model._checkSelectedRowsIndexes = this.checkSelectedRowsIndexes;
			if (target && target.hasClass("e-checkselectall")){
				if(this._isLocalData)
					args.data = this._dataSource() instanceof ej.DataManager ? this._dataSource().dataSource.json : this._dataSource();
				else
					args.data = this.model.currentViewData;
			}
			if ($(this.getRowByIndex(rowIndex)).is('[data-role="row"]') && $(this.getRowByIndex($rowIndex)).attr("aria-selected") == "true")
                this._trigger("rowSelected", args);            
        },
        _getVirtualRows: function (rowIndex, target, isSelection, rowIndexCollection) {
		    var $rowIndex = rowIndex,$prevIndex = this._previousIndex, $prevRow = this.getRowByIndex(this._previousIndex),res,Data,args = {};
		    var $gridRows = $(this.getRows()), preventDynamicSelection=false;
		     if(this.model.scrollSettings.enableVirtualization){					
					var virtualRowCount = this._virtualRowCount;
					var currentIndex = !target ? Math.ceil((rowIndex + 1) / virtualRowCount) : parseInt($(this._gridRows[rowIndex]).attr("name"), 32);
					var rowCount = currentIndex > 1 ? this._virtualRowCount: 0;					
					if (this.initialRender || (currentIndex != this._currentVirtualIndex && !target)) {
					    this._isThumbScroll = true;
                        if(ej.isNullOrUndefined(this._virtualLoadedRecords[currentIndex]) && !this._isLocalData){
                            this._dynamicSelectedRowIndex = rowIndex;
                            preventDynamicSelection = true;
                        }
					    if ($.inArray(currentIndex, this._currentLoadedIndexes) == -1 && isSelection != "clearSelection")
						    this._refreshVirtualView(currentIndex, isSelection, rowIndex);
                            if(preventDynamicSelection)
                                return false;
						rowIndex = rowIndex != 0 ? rowIndex % this._virtualRowCount + rowCount : rowIndex;			
						}					
					else {						
					    if (rowIndex > this._virtualRowCount * 3 || !ej.isNullOrUndefined(target) && !$(target).parent().hasClass("e-headercelldiv") && !ej.isNullOrUndefined(target[0]) && !target[0].checked) {
							var viewIndex = this._getSelectedViewData(rowIndex, target).viewIndex;
							var remain = rowIndex % this._virtualRowCount;
							$rowIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
                        }
					    else {
					        var nameAttr = $(this._gridRows[rowIndex]).attr("name");
					        var trIndex = parseInt(nameAttr, 32);
					        var trSiblings = $(this._gridRows[rowIndex]).prevAll("tr[name=" + nameAttr + "]").length;
					        $rowIndex = ((trIndex - 1) * this._virtualRowCount) + trSiblings;
                        }
                    }
					if(rowIndexCollection.length){												
						for(var i = 0; i < rowIndexCollection.length; i++){
							var viewIndex = this._getSelectedViewData(rowIndexCollection[i]).viewIndex;
							if($.inArray(viewIndex, this._currentLoadedIndexes) != -1)
								this._virtaulSel.push(rowIndexCollection[i]);
							if (!this._virtualSelectedRecords[rowIndexCollection[i]]) {
							    this._virtualSelectedRecords[rowIndexCollection[i]] = this._getSelectedViewData(rowIndexCollection[i]).data;
							    this._virtualCheckSelectedRecords[rowIndexCollection[i]] = this._getSelectedViewData(rowIndexCollection[i]).data;
							}
						}					
					}
					Data = this._getSelectedViewData(rowIndex, target, currentIndex).data;
					$prevIndex = this._prevSelIndex;
					$prevRow = this._prevSelRow;
				}
				else{
					var pageSize = this.model.pageSettings.pageSize;
					var nameIndx = this.getRowByIndex(rowIndex).attr("name");
					var pageIndex = !ej.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
					var trIndex = (rowIndex) % (pageSize);
					var pageto = parseInt(rowIndex / pageSize);
					var nameattr = pageto * pageSize;
					if ((!ej.isNullOrUndefined(pageto) && pageto > 0 && $.inArray(nameattr, this.virtualLoadedPages) == -1) && ej.isNullOrUndefined(target) && !(this._requestType =="save" || this._requestType == "cancel")) {
						trIndex--; this._virIndex = true;
						this._virtualTrIndex=trIndex;
						this.gotoPage(pageto + 1);
						var proxy = this;
						if (this._dataSource() instanceof ej.DataManager) {
							this._queryPromise.done(function (e) {
								proxy._virtuaOtherPage=true;
								proxy._virtualdata = proxy._currentJsonData;
								proxy._pageTo = pageto;
								if(proxy._virtualScrollingSelection)
									proxy._virtualSelRecords = e.virtualSelectRecords;
								var from = (parseInt(rowIndex / proxy.model.pageSettings.pageSize)) * proxy.model.pageSettings.pageSize;
								var to = (parseInt((rowIndex / proxy.model.pageSettings.pageSize)) + 1) * proxy.model.pageSettings.pageSize;
								var _selctRow = []
								_selctRow.push(rowIndex);
								for (var i = 1; i < rowIndexCollection.length; i++)
									if (from < rowIndexCollection[i] && rowIndexCollection[i] < to)
										_selctRow.push(rowIndexCollection[i]);
								proxy.selectRows(_selctRow);
								return false;
							});
							if(proxy._virtualScrollingSelection)
								return;
						}
						else {
							proxy._virtualdata = proxy._currentJsonData;
							if (rowIndexCollection.length > 0) {
								proxy._virtualSelRecords = [];
								for (var i = 0; i < rowIndexCollection.length; i++) {
									proxy._virtualSelRecords.push(this.model.dataSource[rowIndexCollection[i]]);
								}
							}
							proxy._pageTo = pageto;
						}
					}
					if (this._virtuaOtherPage) {
						this._virtuaOtherPage=false;
					}
					res = !ej.isNullOrUndefined(ej.getObject(pageIndex, this._virtualLoadedRecords)) ? this._virtualLoadedRecords[pageIndex] : this.model.previousViewData;
					Data = ej.isNullOrUndefined(res) ? this._currentJsonData[trIndex] : res[trIndex];
					Data = this._virtualScrollingSelection ? this._virtualSelRecords : Data;
					var nameattr = this._pageTo * pageSize;
					if (!ej.isNullOrUndefined(this._virtualdata) && this._virtualdata.length > 0) {
						rowIndex = $(document.getElementsByName(nameattr)[trIndex]).index();
						Data = this._virtualdata[trIndex];
						this._virtualdata = [];
					}
					else if ($(document.getElementsByName(pageto * pageSize)).length > 0 && !ej.isNullOrUndefined(this._pageTo))
						rowIndex = $(document.getElementsByName(pageto * pageSize)[rowIndex % pageSize]).index();
				}
		     args = { rowIndex: !this.model.scrollSettings.enableVirtualization ? (!(this._requestType == "save" || this._requestType == "cancel") ? rowIndex : rowIndex % pageSize) : $rowIndex, row: $gridRows.eq(rowIndex), data: Data, selectedData: Data };
			   if (isSelection == "selectRows") {
			       args.prevRow = $prevRow;
			       args.prevRowIndex = $prevIndex;
			   }
		       return args; 
          },
        _selectingMultipleRows: function (selectedIndexes) {
            this._modelMultiSelectedIndexes = selectedIndexes;
            this.clearSelection();
            this.multiSelectCtrlRequest = true;
            for (var index = 0; index < selectedIndexes.length; index++)
                this.selectRows(selectedIndexes[index])
            this.multiSelectCtrlRequest = false;
            this._modelMultiSelectedIndexes = [];
        },
        _virtualSelectAction: function (pageIndex, rowIndex, pageSize) {
            if (this.model.scrollSettings.allowVirtualScrolling && !ej.isNullOrUndefined(rowIndex)) {
                if (!ej.isNullOrUndefined(this._virtualLoadedRecords[pageIndex])) {
                    this._virtualSelectedRecords[rowIndex] = this._virtualLoadedRecords[pageIndex][rowIndex % pageSize];
                    this._virtualCheckSelectedRecords[((pageIndex - 1) * pageSize) + rowIndex] = this._virtualLoadedRecords[pageIndex][rowIndex % pageSize];
                }
                else {
                    this._virtualSelectedRecords[rowIndex] = this._currentJsonData[rowIndex % pageSize];
                    this._virtualCheckSelectedRecords[((pageIndex - 1) * pageSize) + rowIndex] = this._currentJsonData[rowIndex % pageSize];
                }
            }
        },
		_getSelectedViewData: function(rowIndex, target, currentViewIndex){
			var index = rowIndex % this._virtualRowCount, viewIndex, result = {};
			if(target)
				viewIndex = parseInt($(target).closest("tr").attr("name"), 32);
			else if(currentViewIndex)
				viewIndex = currentViewIndex;
			else
				viewIndex = rowIndex > 1 ? Math.ceil((rowIndex + 1) / this._virtualRowCount) : 1;
			result["viewIndex"] = viewIndex;
			if(this._virtualLoadedRecords[viewIndex])
				result["data"] = this._virtualLoadedRecords[viewIndex][index];
			var remain = rowIndex % this._virtualRowCount;	
			result["rowIndex"] = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
			return result;
		},
        selectCells: function (rowCellIndexes) {
            if (!this._allowcellSelection)
                return false;
            this._lastSelectedCellIndex = rowCellIndexes;
            var $cell = null, previousRowCell, prevRowCellIndex;
            var gridRows = this._excludeDetailRows();
            if (this.model.scrollSettings.frozenColumns)
                $cell = this._frozenCell(rowCellIndexes[0][0], rowCellIndexes[0][1][0]);
            else
                $cell = gridRows.eq(rowCellIndexes[0][0]).find(".e-rowcell:eq(" + rowCellIndexes[0][1] + ")");				
            if(!ej.isNullOrUndefined(this._previousRowCellIndex) && this._previousRowCellIndex.length != 0 ){
				if(this.model.scrollSettings.enableVirtualization){
					previousRowCell = this._prevRowCell;
					prevRowCellIndex = this._preVirRowCellIndex;
				}
				else{
					previousRowCell = $(this.getRowByIndex(this._previousRowCellIndex[0][0]).find(".e-rowcell:eq("+this._previousRowCellIndex[0][1]+")"));
					prevRowCellIndex = this._previousRowCellIndex;
				}
			}			
			var $data = this._currentJsonData[rowCellIndexes[0][0]], $rowIndex = rowCellIndexes[0][0], viewDetails;
			if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
				viewDetails = this._getSelectedViewData(rowCellIndexes[0][0], $cell);
				$data = viewDetails.data;
				$rowIndex = viewDetails.rowIndex;
			}				
            var args = { currentCell: $cell, cellIndex: rowCellIndexes[0][1], data: $data, selectedData: $data, previousRowCellIndex: prevRowCellIndex, previousRowCell: previousRowCell };
            if (this.model.selectionType == "multiple") {
                args["isCtrlPressed"] = this.multiSelectCtrlRequest;
                args["isShiftPressed"] = this.multiSelectShiftRequest;
            }
            if (this._trigger("cellSelecting", args))
                return;
            switch (this.model.selectionType) {
                case ej.Grid.SelectionType.Multiple:
                    if (this.multiSelectCtrlRequest) {
                        var selectedCellIndex = $.inArray($rowIndex, this._rowIndexesColl);
                        if (selectedCellIndex != -1)
                            this.selectedRowCellIndexes[selectedCellIndex].cellIndex.push(parseInt(rowCellIndexes[0][1].toString()));
                        else {
                            if ($.inArray($rowIndex, this._rowIndexesColl) == -1)
                                this._rowIndexesColl.push($rowIndex);
                            this.selectedRowCellIndexes.push({ rowIndex: $rowIndex, cellIndex: rowCellIndexes[0][1] });
                        }
                        $cell.addClass("e-cellselectionbackground e-activecell");
                        break;
                    }
                    else if (this._selectDrag || (this.multiSelectShiftRequest && this._previousRowCellIndex != undefined)) {
                        this.clearCellSelection();
                        this.clearColumnSelection();
                        this.selectedRowCellIndexes = [];
                        var previousRowIndex = this._previousRowCellIndex[0][0];
                        var previousCellIndex = parseInt(this._previousRowCellIndex[0][1]);
                        var currentRowIndex = rowCellIndexes[0][0];
                        var currentCellIndex = parseInt(rowCellIndexes[0][1]);
						if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
							previousRowIndex = this._preVirRowCellIndex[0][0];
							currentRowIndex = this._getSelectedViewData(currentRowIndex, this.getRowByIndex(currentRowIndex).find(".e-rowcell")).rowIndex;
						}
                        var newCellColl = [];
                        var min, max;
                        if(this.model.selectionSettings.cellSelectionMode == "box"){
							var $rowCount =  this.model.scrollSettings.frozenColumns ? this.getRows()[0].length - 1 : this.getRows().length - 1;
							var pCellIndex = previousCellIndex < currentCellIndex ? previousCellIndex : currentCellIndex;
							var cCellIndex = pCellIndex == currentCellIndex ? previousCellIndex : currentCellIndex;	
							var newRowColl = [], newCellColl = [];							
							for (var i = pCellIndex; i <= cCellIndex; i++) {								
								min = previousRowIndex;									
								max = currentRowIndex;
								if( min < max ){
									for (var j = min; j <= max; j++) {
										$.inArray(j, newRowColl) == -1 && newRowColl.push(j);											
										this._selectMultipleCells(j, i, currentCellIndex, previousCellIndex);										
									}
								}
								else{
									for (var j = max; j <= min; j++) {
										$.inArray(j, newRowColl) == -1 && newRowColl.push(j);											
										this._selectMultipleCells(j, i, currentCellIndex, previousCellIndex);										
									}
								}
								newCellColl.push(i);								
							}							
							for(var i = 0; i < newRowColl.length; i++){								
								this.selectedRowCellIndexes.push({ rowIndex: newRowColl[i], cellIndex: newCellColl });										
							}
							this._rowIndexesColl = ej.distinct(newRowColl);
						}
                        else if (currentRowIndex > previousRowIndex) {
                            for (var i = previousRowIndex; i <= currentRowIndex; i++) {
                                newCellColl = [];
                                min = i == previousRowIndex ? previousCellIndex : 0;
                                max = i == currentRowIndex ? currentCellIndex : this.model.columns.length - 1;
                                for (var j = min; j <= max; j++) {
                                    newCellColl.push(j);
                                    this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
                                }								
                                this.selectedRowCellIndexes.push({ rowIndex: i, cellIndex: newCellColl });
                                this._rowIndexesColl.push(i);
                            }
                        } 						 						
						else {
                            for (var i = previousRowIndex; i >= currentRowIndex; i--) {
                                newCellColl = [];
                                min = i == previousRowIndex ? previousCellIndex : this.model.columns.length - 1;
                                max = i == currentRowIndex ? currentCellIndex : 0;
								if( min > max ){
									for (var j = min; j >= max; j--) {
										newCellColl.push(j);
										this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
									}
								}
								else{
									for (var j = max; j >= min; j--) {
										newCellColl.push(j);
										this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
									}
								}                                
                                this.selectedRowCellIndexes.push({ rowIndex: i, cellIndex: newCellColl });
                                this._rowIndexesColl.push(i);
                            }
                        }
                        break;
                    }
                    else {
                        this.clearCellSelection();
						this._virtualRowCellSelIndex = [];
                        for (var i = 0; i < rowCellIndexes.length; i++) {
                            if (rowCellIndexes[i][1].length > 1) {
                                var td = gridRows.eq(rowCellIndexes[i][0]).find(".e-rowcell");
                                if (this.model.scrollSettings.frozenColumns)
                                    td = $(gridRows[0]).eq(rowCellIndexes[i][0]).find(".e-rowcell").add($(gridRows[1]).eq(rowCellIndexes[i][0]).find(".e-rowcell"));
                                for (var j = 0; j < td.length; j++) {
                                    var index = (this.model.detailsTemplate != null || this.model.childGrid != null) ? td[j].cellIndex - 1 : j;
                                    if ($.inArray(index, rowCellIndexes[i][1]) != -1) {
                                        $(td[j]).addClass("e-cellselectionbackground e-activecell");
                                        var selectedCellIndex = $.inArray(rowCellIndexes[i][0], this._rowIndexesColl);
                                        if (selectedCellIndex != -1)
                                            this.selectedRowCellIndexes[selectedCellIndex].cellIndex.push(td[j].cellIndex);
                                        else {
											$rowIndex = rowCellIndexes[i][0];
											if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
												viewDetails = this._getSelectedViewData($rowIndex, td);
												$data = viewDetails.data;
												$rowIndex = viewDetails.rowIndex;
											}
                                            this.selectedRowCellIndexes.push({ rowIndex: $rowIndex, cellIndex: [td[j].cellIndex] });
                                            this._rowIndexesColl.push(rowCellIndexes[i][0]);
                                        }
                                    }
                                }
                            }
                            else {
                                if (this.model.scrollSettings.frozenColumns)
                                    this._frozenCell(rowCellIndexes[i][0], rowCellIndexes[i][1][0]).addClass("e-cellselectionbackground e-activecell");
                                else
                                    $(this.getRowByIndex(rowCellIndexes[i][0]).find(".e-rowcell:eq(" + rowCellIndexes[i][1] + ")")).addClass("e-cellselectionbackground e-activecell");
                                this.selectedRowCellIndexes.push({ rowIndex: $rowIndex, cellIndex: rowCellIndexes[i][1] });
                                this._rowIndexesColl.push($rowIndex);
                            }
                        }
                        break;

                    }
                case ej.Grid.SelectionType.Single:
                    this.clearCellSelection();
                    this.clearColumnSelection();
                    this.selectedRowCellIndexes = [];
					this._virtualRowCellSelIndex = [];
                    if ($.inArray($rowIndex, this._rowIndexesColl) == -1)
                       this._rowIndexesColl.push($rowIndex);
                    this.selectedRowCellIndexes.push({ rowIndex: $rowIndex, cellIndex: rowCellIndexes[0][1] });
                    if (this.model.scrollSettings.frozenColumns)
                        this._frozenCell(rowCellIndexes[0][0], rowCellIndexes[0][1][0]).addClass("e-cellselectionbackground e-activecell");
                    else
						$(this.getRowByIndex(rowCellIndexes[0][0]).find(".e-rowcell:eq(" + rowCellIndexes[0][1] + ")")).addClass("e-cellselectionbackground e-activecell");
                    break;
            }
            var args = { currentCell: $cell, cellIndex: rowCellIndexes[0][1], data: $data, selectedData: $data, selectedRowCellIndex: this.selectedRowCellIndexes, previousRowCellIndex: prevRowCellIndex, previousRowCell: previousRowCell};
            if (!this._selectDrag && (!this.multiSelectShiftRequest || ej.isNullOrUndefined(this._previousRowCellIndex))){
				this._previousRowCellIndex = rowCellIndexes;
				if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){					
					this._preVirRowCellIndex = $.extend(true, [], rowCellIndexes);
					this._preVirRowCellIndex[0][0] = $rowIndex;
				}											
				this._prevRowCell = $cell;
            }
            if (!ej.isNullOrUndefined(rowCellIndexes[0][1][0])) {
                $.extend(this._bulkEditCellDetails, {
                    rowIndex: rowCellIndexes[0][0],
                    columnIndex: rowCellIndexes[0][1][0],
                });
            }
            else {
                $.extend(this._bulkEditCellDetails, {
                    rowIndex: rowCellIndexes[0][0],
                    columnIndex: rowCellIndexes[0][1],
                });
            }
            if (this._trigger("cellSelected", args))
                return;			
        },
		_selectMultipleCells: function(i, j, currentCellIndex, previousCellIndex){			
			if (this.model.scrollSettings.frozenColumns)
				this._frozenCell(i, j).addClass("e-cellselectionbackground e-activecell");
			else{				
				if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
					var viewIndex = this._getSelectedViewData(i).viewIndex;
					if($.inArray(viewIndex, this._currentLoadedIndexes) != -1){
						var indx = this._currentLoadedIndexes.indexOf(viewIndex);
						var selIndex = i % this._virtualRowCount + indx * this._virtualRowCount;						
						$(this.getRowByIndex(selIndex).find(".e-rowcell:eq(" + j + ")")).addClass("e-cellselectionbackground e-activecell");
						if($.inArray(i, this._virtualRowCellSelIndex) == -1 && $.inArray(i, this._rowIndexesColl) != -1 && i != this._preVirRowCellIndex[0][0])
							this._virtualRowCellSelIndex.push(i);
					}					
				}
				else
					$(this.getRowByIndex(i).find(".e-rowcell:eq(" + j + ")")).addClass("e-cellselectionbackground e-activecell");
			}
		},

        
        selectColumns: function (columnIndex, toIndex) {
            if (!this._allowcolumnSelection)
                return false;
            this._allowcolumnSelection = true;
            var gridRows = this.getRows();            
            var prevColumnHeaderCell = this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[this._previousColumnIndex];
            var args = { columnIndex: columnIndex == undefined ? toIndex : columnIndex, headerCell: $(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[columnIndex]), column: this.model.columns[columnIndex], previousColumnIndex: this._previousColumnIndex, prevColumnHeaderCell: prevColumnHeaderCell };
            var $precolIndex = this._previousColumnIndex;
            if ((args["isShiftPressed"] = this.multiSelectShiftRequest) == true)
                this._previousColumnIndex = columnIndex == undefined ? toIndex : columnIndex;
            else
                this._previousColumnIndex = toIndex;
            if (this.model.selectionType == "multiple") {
                args["isCtrlPressed"] = this.multiSelectCtrlRequest;
                args["isShiftPressed"] = this.multiSelectShiftRequest;
            }
            if (this._trigger("columnSelecting", args))
                return;
            if (ej.isNullOrUndefined(toIndex) || ej.isNullOrUndefined(columnIndex)) {
                columnIndex = ej.isNullOrUndefined(columnIndex) ? toIndex : columnIndex;
                switch (this.model.selectionType) {
                    case ej.Grid.SelectionType.Multiple:
                        if (this.multiSelectCtrlRequest) {
                            var selectedColumnIndex = $.inArray(columnIndex, this.selectedColumnIndexes);
                            selectedColumnIndex != -1 && this.clearColumnSelection(columnIndex) && this.selectedColumnIndexes.splice(selectedColumnIndex, 0);
                            if (selectedColumnIndex == -1) {
                                this.selectedColumnIndexes.push(columnIndex);
                                this._previousColumnIndex = this.selectedColumnIndexes.length ? columnIndex : undefined;
                                if (this.model.scrollSettings.frozenColumns)
                                    this._frozenColumnSelection(gridRows, columnIndex);
                                else
                                    for (var i = 0; i < gridRows.length; i++) {
                                        $(this._excludeDetailCells(gridRows[i])[columnIndex]).addClass("e-columnselection");
                                    }
                                $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell,.e-detailheadercell)")[columnIndex]).addClass("e-columnselection");
                            }
                            break;
                        }
                    case ej.Grid.SelectionType.Single:
                        this.clearSelection();
                        this.clearCellSelection();
                        this.clearColumnSelection();
                        this.selectedColumnIndexes = [];
                        this.selectedColumnIndexes.push(columnIndex);
                        this._previousColumnIndex = this.selectedColumnIndexes.length ? columnIndex : undefined;
                        if (this.model.scrollSettings.frozenColumns)
                            this._frozenColumnSelection(gridRows, columnIndex);
                        else
                        for (var i = 0; i < gridRows.length; i++) {
                            $(this._excludeDetailCells(gridRows[i])[columnIndex]).addClass("e-columnselection");
                        }
                        $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell,.e-detailheadercell)")[columnIndex]).addClass("e-columnselection");
                        break;
                }
            } else {
                if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
                    this.clearColumnSelection();
                    this.selectedColumnIndexes = [];
                    var indent = 0;
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                        indent = 1;
                    }
                    var startIndex = columnIndex > toIndex ? toIndex : columnIndex;
                    var endIndex = columnIndex > toIndex ? columnIndex + 1 : toIndex + 1;
                    if (this.model.scrollSettings.frozenColumns)
                        this._frozenColumnSelection(gridRows, startIndex, endIndex);
                    else
                    for (var i = startIndex; i < endIndex; i++) {
                        for (var j = 0; j < gridRows.length; j++) {
                            $(this._excludeDetailCells(gridRows[j])[i]).addClass("e-columnselection");
                        }
                        $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell,.e-detailheadercell)")[i]).addClass("e-columnselection");
                        this.selectedColumnIndexes.push(i);
                    }
                }
            }
            var args = { columnIndex: columnIndex == undefined ? toIndex : columnIndex, headerCell: $(this.getHeaderTable().find('.e-columnheader').last().find('th').not('.e-detailheadercell')[columnIndex]), column: this.model.columns[columnIndex], selectedColumnIndex: this.selectedColumnIndexes, previousColumnIndex: $precolIndex, prevColumnHeaderCell: prevColumnHeaderCell };
            if (this._trigger("columnSelected", args))
                return;
        },
        
        clearSelection: function (index, $target) {
            var rIndex = index, cSelection = "clearSelection", gridRows = $(this.getRows()), Data, args = {};
            var $gridRows = $(this.getRows()), index;
            if (this._selectedRow() >= -1) {
                if (this.model.scrollSettings.frozenColumns || !ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid))
                    $gridRows = this._excludeDetailRows();
                else
                    $gridRows = $(this.element.find("tr[aria-selected='true']"));
                var isSelected = $gridRows.find("td").hasClass("e-selectionbackground e-active");
                if (isSelected) {
                    $gRows = $(this.getContent().find("tr[aria-selected='true']"));
                    if (!this.model.scrollSettings.allowVirtualScrolling) {
                        if (!ej.isNullOrUndefined(index)) {
                            if (this.model.editSettings.editMode == "batch" && $($gridRows[index]).hasClass("e-insertedrow")) {
                                var addedrows = this.batchChanges.added.reverse();
                                Data = addedrows[index];
                                this.batchChanges.added.reverse();
                            }
                            else
                                Data = this.model.editSettings.editMode == "batch" ? this._currentJsonData[index - this.batchChanges.added.length] : this._currentJsonData[ej.isNullOrUndefined(index) ? toIndex : index];
                        }
                        var srow = [];
                        for (var j = 0; j < this.selectedRowsIndexes.length; j++) {
                            srow.push(this._currentJsonData[this.selectedRowsIndexes[j]]);
                        }
                        args = { rowIndex: index == undefined ? this.selectedRowsIndexes : index, row: index == undefined ? $gRows : gridRows.eq(index), data: index == undefined ? srow : Data, selectedData: index == undefined ? srow : Data };
                    }
                    else{
                     var vIndex, $target;
                     if (ej.isNullOrUndefined(index)) {
                        vIndex = this.selectedRowsIndexes[0];
                        $target = this.getSelectedRecords().length && this._enableCheckSelect && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization?this.element.find('.e-headercheckcelldiv .e-checkselectall') :$gRows[0];
                    }
                    else
                        vIndex = index;
                    var vrowIndexCollection = this.selectedRowsIndexes;
                    args = this._getVirtualRows(vIndex, $target, cSelection, vrowIndexCollection);
                    }
					if ($($target) && $($target).hasClass("e-checkselectall")){
				        if(this._isLocalData)
					        args.data = this._dataSource() instanceof ej.DataManager ? this._dataSource().dataSource.json : this._dataSource();
				        else
					        args.data = this._currentJsonData;
			        }
                    if (this._trigger("rowDeselecting", args))
                        return;
                }
                if (!ej.isNullOrUndefined(index)) {
                    this.getRowByIndex(index).removeAttr("aria-selected").find(".e-selectionbackground").removeClass("e-selectionbackground").removeClass("e-active");
					var row = this.getRowByIndex(index);
					if (this.model.scrollSettings.enableVirtualization && this.multiSelectCtrlRequest && !this._enableCheckSelect) {
						var limit = parseInt(row.attr("name"), 32) * this._virtualRowCount;
						var remain = this._virtualRowCount - row.index() % this._virtualRowCount;	
						index = limit - remain;
					}
                    index = $.inArray(index, this.selectedRowsIndexes);
                    if (index != -1) {
                        this.selectedRowsIndexes.splice(index, 1);
                        this._selectedMultipleRows(this.selectedRowsIndexes);
                        this.model.selectedRecords.splice(index, 1);
                    }
					if (index != -1 && this.model.scrollSettings.enableVirtualization) {
                         this._virtualSelectedRowIndex.splice(index, 1);
                    }
                    if (this._enableCheckSelect && !$target)
                        row.find(".e-checkcelldiv [type=checkbox]").prop("checked", false);
                    if (this._isMapSelection) {
                        if (!this._selectionByGrid && !ej.isNullOrUndefined(index) && index != -1) {
                            var Data = this._currentJsonData[rIndex];
                            Data[this._selectionMapColumn] = false;
                            this.updateRecord(this._primaryKeys[0], Data, "update");
                        }
						this._trigger("rowDeselected", args);
                        Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                    }
                } else {
                    var rows = $gridRows;
                    if (this.model.scrollSettings.enableVirtualization) {
                        for (var i in this._virtualLoadedRows) {
                            $.merge(rows, this._virtualLoadedRows[i]);
                        }
                    }
                    $gridRows.removeAttr("aria-selected").find(".e-rowcell, .e-detailrowcollapse, .e-detailrowexpand").removeClass("e-selectionbackground").removeClass("e-active");
                    if(!this._clearVirtualSelection){
						this.selectedRowsIndexes = [];
						this.model.selectedRecords = [];
						this._virtualSelectedRowIndex = [];
						this._selectedMultipleRows().length && this._selectedMultipleRows([]);	
                    }
                    if (!this._selectionByGrid && (!this.initialRender || !this._isMapSelection)) {
                        $gridRows.find(".e-checkcelldiv [type=checkbox]").prop("checked", false);
                        var data = null;
                        if (this._isMapSelection && isSelected && this._trigger("rowDeselected", args));
                        Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
                    }
                }
                if (this._enableCheckSelect) {
                    if (!this._selectAllCheck && (this.selectedRowsIndexes.length != this._currentJsonData.length || this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && [].concat.apply([], this.checkSelectedRowsIndexes).length >= this._gridRecordsCount))
                        this.getHeaderTable().find(".e-headercheckcelldiv .e-checkselectall").prop("checked", false);
                    var i, curPage = this._currentPage() - 1;
                    if (this.model.scrollSettings.enableVirtualization && args.row) {
                        var curRowIndex = parseInt(args.row.attr("name"), 32);
                        var rowPage = curRowIndex % (this.model.pageSettings.pageSize / this._virtualRowCount);
                        if (rowPage == 0)
                            rowPage = (this.model.pageSettings.pageSize / this._virtualRowCount);
                        curPage = Math.ceil((curRowIndex * this._virtualRowCount) / this.model.pageSettings.pageSize) - 1
                        rIndex = (args.rowIndex % this._virtualRowCount) + ((rowPage * this._virtualRowCount) - this._virtualRowCount);

                    }
                    checkBoxIndex = $.inArray(rIndex, this.checkSelectedRowsIndexes[curPage]);
                    if (checkBoxIndex != -1) {
                        this.checkSelectedRowsIndexes[curPage].splice(checkBoxIndex, 1);
                    }
                    if (!this.selectedRowsIndexes.length && !this._isMapSelection && !$target) {
                        this.checkSelectedRowsIndexes[curPage] = [];
                        $gridRows.find(".e-checkcelldiv [type=checkbox]").prop("checked", false);
                    }
                }
                if (!this.selectedRowsIndexes.length)
                    this._selectedRow(-1);
            }
            this.model._checkSelectedRowsIndexes = this.checkSelectedRowsIndexes;
			if ($($target) && $($target).hasClass("e-checkselectall")){
				if(this._isLocalData)
					args.data = this._dataSource() instanceof ej.DataManager ? this._dataSource().dataSource.json : this._dataSource();
				else
					args.data = this._currentJsonData;
			}
            if (isSelected && !this._isMapSelection && this._trigger("rowDeselected", args))
                return true;
        },

        _excludeDetailRows:function()
		{
			var $gridRows;
			if (!ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid || this.model.showSummary) && !this.model.scrollSettings.frozenColumns)
			    $gridRows = $(this.getRows()).not(".e-detailrow,.e-gridSummaryRows");
			else if (this.model.scrollSettings.frozenColumns > 0 && this.getRows() != null && this.getRows().length > 1)
			    $gridRows = $(this.getRows()[0]).not(".e-detailrow,.e-gridSummaryRows").add($(this.getRows()[1]).not(".e-detailrow,.e-gridSummaryRows"));
			else
			    $gridRows = $(this.getRows());
            return $gridRows;
		},
        
        clearCellSelection: function (rowIndex, columnIndex) {
            var $gridRows,$cell, cellIndex;
            if (this._allowcellSelection) {
                if (!ej.isNullOrUndefined(rowIndex) || !ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid))
                    $gridRows = this._excludeDetailRows();
                else
                    $gridRows = $(this.element.find(".e-cellselectionbackground")).parent();
                var isCellSelected = $gridRows.find("td").hasClass("e-cellselectionbackground e-activecell");
                if (isCellSelected) {
                    if (this.model.scrollSettings.frozenColumns && !ej.isNullOrUndefined(rowIndex))
                        $cell = this._frozenCell(rowIndex, columnIndex);
                    else
                        $cell = this.getContent().find(".e-cellselectionbackground");
                    var $data = [], cIndex = [columnIndex], vCell = [];
                    for (var j = 0; j < this.selectedRowCellIndexes.length; j++) {
                        $data.push(this._currentJsonData[this.selectedRowCellIndexes[j].rowIndex]);
                        for (var i = 0; i < this.selectedRowCellIndexes[j].cellIndex.length; i++) {
                            vCell.push(this.selectedRowCellIndexes[j].cellIndex[i]);
                        }
                    }
                    var args = { currentCell: (rowIndex || columnIndex) == undefined ? $cell : $gridRows.eq(rowIndex).find(".e-rowcell").eq(columnIndex), cellIndex: (rowIndex || columnIndex) == undefined ? vCell : cIndex, data: (rowIndex || columnIndex) == undefined ? $data : this._currentJsonData[rowIndex], selectedData: (rowIndex || columnIndex) == undefined ? $data : this._currentJsonData[rowIndex] };
                    if (this.model.selectionType == "multiple") {
                        args["isCtrlPressed"] = this.multiSelectCtrlRequest;
                        args["isShiftPressed"] = this.multiSelectShiftRequest;
                    }
                    if (this._trigger("cellDeselecting", args))
                        return true;
                }
                if (ej.isNullOrUndefined(rowIndex)) {
                    if (this.model.scrollSettings.frozenColumns)
                        $gridRows = $($gridRows[0]).add($gridRows[1]);
                    $gridRows.find(".e-rowcell, .e-detailrowcollapse, .e-detailrowexpand").removeClass("e-cellselectionbackground").removeClass("e-activecell");
                    this.selectedRowCellIndexes = [];
                    this._rowIndexesColl = [];
                }
                else {
                    for (var i = 0; i < this.selectedRowCellIndexes.length ; i++) {
                        if (this.selectedRowCellIndexes[i].rowIndex == rowIndex) {
                            cellIndex = $.inArray(columnIndex, this.selectedRowCellIndexes[i].cellIndex);
                            if (this.model.scrollSettings.frozenColumns)
                                this._frozenCell(rowIndex, columnIndex).removeClass("e-cellselectionbackground").removeClass("e-activecell");
                            else
                            $gridRows.eq(rowIndex).find(".e-rowcell").eq(columnIndex).removeClass("e-cellselectionbackground").removeClass("e-activecell");
                            break;
                        }
                    }
                    if (i != this.selectedRowCellIndexes.length) {
                        this.selectedRowCellIndexes[i].cellIndex.splice(cellIndex, 1);
                        if (this.selectedRowCellIndexes[i].cellIndex.length == 0) {
                            this.selectedRowCellIndexes.splice(i, 1);
                            this._rowIndexesColl.splice($.inArray(rowIndex, this._rowIndexesColl), 1);
                        }
                    }
                }
            }
            if (isCellSelected && this._trigger("cellDeselected", args))
                return true;
        },

        
        clearColumnSelection: function (index) {
             if (this._allowcolumnSelection) {
                var $gridRows = $(this._excludeDetailRows());
				var cIndex = $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)"));
				var isColumnSelected = cIndex.hasClass("e-columnselection");
                if(isColumnSelected){
                var scol = [],hcell = [];
                for (var j = 0; j < this.selectedColumnIndexes.length; j++) {
                    scol.push(this.model.columns[this.selectedColumnIndexes[j]]);
                    hcell.push($(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[this.selectedColumnIndexes[j]]));
                }
                var args = { columnIndex: index == undefined ? this.selectedColumnIndexes : index, headerCell: index == undefined ? hcell : $(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[index]), column: index == undefined ? scol : this.model.columns[index] };
                if (this.model.selectionType == "multiple") {
                   args["isCtrlPressed"] = this.multiSelectCtrlRequest;
                   args["isShiftPressed"] = this.multiSelectShiftRequest;
                 }
               if (this._trigger("columnDeselecting", args))
                   return;
                }
                if (!ej.isNullOrUndefined(index)) {
                    var indent = 0;
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                        ++index; indent = 1;
                    }
                    if (this.model.scrollSettings.frozenColumns) {
                        var currentIndex = index;
                        if (index >= this.model.scrollSettings.frozenColumns) {
                            currentIndex = index - this.model.scrollSettings.frozenColumns;
							 $gridRows=$(this.getContent).find(".e-movablecontent").find('tr');
                        }
                        else
                            $gridRows=$(this.getContent).find(".e-frozencontentdiv").find('tr');
                        for (var j = 0; j < $gridRows.length; j++) {
                            $($gridRows[j].cells[currentIndex]).removeClass("e-columnselection");
                        }
                    }
                    else
                        for (var i = 0; i < $gridRows.length; i++) {
                            $($gridRows[i].cells[index]).removeClass("e-columnselection");
                        }
                    $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")[index]).removeClass("e-columnselection");
                    this.selectedColumnIndexes.splice(0, index - indent);

                } else {
                    $gridRows.find(".e-rowcell").removeClass("e-columnselection");
                    $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")).removeClass("e-columnselection");
                    this.selectedColumnIndexes = [];
                }
            }
            if (isColumnSelected && this._trigger("columnDeselected", args))
                return true;
        },
        getSelectedRows:function(){
            var $rows = $();
            for (var i = 0; i < this.selectedRowsIndexes.length; i++) {
                if (this.model.scrollSettings.frozenColumns > 0) {
                    $rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[0]);
                    $rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[1]);
                }
                else
                    $rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[0]);
            }
            return $rows;
        },
        getSelectedRecords: function () {
            var records = [], $gridRows = this.getRows();
            if (this._virtualScrollingSelection)
                return this._virtualSelRecords;
			var loopDone = false;
            if (this.model.scrollSettings.allowVirtualScrolling && this._enableCheckSelect) {
                for (var i = 0 ; i < this.checkSelectedRowsIndexes.length; i++) {
                    if (!ej.isNullOrUndefined(this.checkSelectedRowsIndexes[i])) {
                        for (var j = 0; j < this.checkSelectedRowsIndexes[i].length ; j++) {
							if(this._currentJsonData.length <= j && !this._isLocalData) {
								loopDone = true;
								break;
							}
                            var checkIndex = (i * this.model.pageSettings.pageSize) + this.checkSelectedRowsIndexes[i][j];
                            records.push(this._virtualCheckSelectedRecords[checkIndex]);
                        }
                    }
					if(loopDone) break;
                }
            }
            else {
				var selIndexes = this.model.scrollSettings.enableVirtualization?this._virtualSelectedRowIndex:this.selectedRowsIndexes;
                for (var i = 0; i < selIndexes.length; i++) {
                    if (selIndexes[i] != -1) {
                        if (this.model.editSettings.editMode == "batch" && $($gridRows[selIndexes[i]]).hasClass("e-insertedrow")) {
                            var addedrecords = this.batchChanges.added.reverse();
                            records.push(addedrecords[selIndexes[i]])
                            this.batchChanges.added.reverse();
                        }
                        else if (this.model.scrollSettings.allowVirtualScrolling && !this._enableCheckSelect)
                            records.push(this._virtualSelectedRecords[selIndexes[i]]);
                        else
                            this.model.editSettings.editMode == "batch" ? records.push(this._currentJsonData[selIndexes[i] - this.batchChanges.added.length]) : records.push(this._currentJsonData[selIndexes[i]]);

                    }
                }
            }
            return records;
        },
        _setCurrentRow: function (requestType) {
            if (requestType == ej.Grid.Actions.Refresh || requestType == ej.Grid.Actions.Ungrouping || requestType == ej.Grid.Actions.Grouping || requestType == ej.Grid.Actions.Filtering || requestType == ej.Grid.Actions.Sorting || requestType == ej.Grid.Actions.Paging || requestType == ej.Grid.Actions.Search || ((requestType == ej.Grid.Actions.Delete || requestType == ej.Grid.Actions.Cancel) && this.model.currentViewData != null && this.model.currentViewData.length == 0)) {
                this._selectedRow(-1);
                this._selectedMultipleRows([]);
				if(!this._virtualDataRefresh || requestType == ej.Grid.Actions.Refresh )
					this.selectedRowsIndexes = [];
            }
            if (!this._isMapSelection && this._currentJsonData.length && requestType == ej.Grid.Actions.Delete && this._selectedRow() >= this._currentJsonData.length) {
                var lastIndex = this._currentJsonData.length - 1;
                this._selectedRow(lastIndex);
                this._selectedMultipleRows([lastIndex]);
                if (!this._virtualDataRefresh || requestType == ej.Grid.Actions.Refresh)
                    this.selectedRowsIndexes = lastIndex;
            }
            if (!this._isMapSelection && (requestType == ej.Grid.Actions.Delete || (requestType == ej.Grid.Actions.Save && !this._isMapSelection)) && this.model.selectedRowIndex != -1){
                var target = this.getRowByIndex(this.model.selectedRowIndex);
                this.selectRows(this.model.selectedRowIndex,null,target);
			}
            if (requestType == ej.Grid.Actions.Save || requestType == ej.Grid.Actions.Cancel)
                this.element.focus();
        },
        _renderMultiTouchDialog: function () {
            this._customPop = ej.buildTag("div.e-gridpopup", "", { display: "none" });
            var $content = ej.buildTag("div.e-content"), $downTail = ej.buildTag("div.e-downtail e-tail");
            if (this.model.allowMultiSorting) {
                var $selElement = ej.buildTag("span.e-sortdirect e-icon");
                $content.append($selElement);
            }
            if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
                var $selElement = ej.buildTag("span.e-rowselect e-icon");
                $content.append($selElement);
            }
            this._customPop.append($content);
            this._customPop.append($downTail);
            this.element.append(this._customPop);
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.widget("ejGrid", "ej.Grid",  {
        
        _rootCSS: "e-grid",
        // widget element will be automatically set in this
        element: null,
        validTags: ["div"],
        // user defined model will be automatically set in this
        model: null,
        _requiresID: true,
        keyConfigs: /** @lends ejGrid# */{
            focus: "e",
            insertRecord: "45", //Insert
            deleteRecord: "46", // delete
            editRecord: "113", //F2
            saveRequest: "13", // enter
            cancelRequest: "27", //Esc
            nextPage: "34", // PgDn
            previousPage: "33", // PgUp
            lastPage: "ctrl+alt+34", //"CtrlAltPgDn",
            firstPage: "ctrl+alt+33", //"CtrlPlusAltPlusPgUp",
            nextPager: "alt+34", //"AltPlusPgDown",
            previousPager: "alt+33", //"AltPlusPgUp",
            firstCellSelection: "36", //"Home",
            lastCellSelection: "35", //"End",
            firstRowSelection: "ctrl+36", //"CtrlPlusHome",
            lastRowSelection: "ctrl+35", //"CtrlPlusEnd",
            rowUpSelection: "ctrl+shift+38", //"CtrlPlusShiftplusUpArrow",
            rowDownSelection: "ctrl+shift+40", //"CtrlPlusShiftplusDownArrow",
            randomSelection: "ctrl+shift+83", // "CtrlPlusShiftplusSkey",
            upArrow: "38", //Up arrow
            downArrow: "40", //Down arrow
            rightArrow: "39", //Right arrow
            leftArrow: "37", //Left arrow
            moveCellRight: "9", //tab
            moveCellLeft: "shift+9", //shifttab
            selectedGroupExpand: "alt+40", //"AltPlusDownArrow",
            totalGroupExpand: "ctrl+40", //"CtrlPlusDownArrow",
            selectedGroupCollapse: "alt+38", //"AltPlusUpArrow",
            totalGroupCollapse: "ctrl+38", //"CtrlPlusUpArrow",
            multiSelectionByUpArrow: "shift+38",//"shiftPlusUpArrow",
            multiSelectionByDownArrow:"shift+40",//"shiftPlusDownArrow"
            multiSelectionByRightArrow: "shift+39",//"shiftPlusRigthArrow"
            multiSelectionByLeftArrow: "shift+37",//"shiftPlusLeftArrow"
        },
        _ignoreOnPersist: [
            "actionBegin", "actionComplete", "actionFailure", "batchAdd", "batchDelete", "beforeBatchSave", "beforeBatchAdd", "beforeBatchDelete", "beginEdit",
            "cellEdit", "cellSave", "cellSelecting", "cellSelected", "cellDeselecting", "cellDeselected", "columnDrag", "columnDragStart", "columnDrop", "columnSelecting",
            "columnSelected", "columnDeselecting", "columnDeselected", "create", "dataBound", "destroy", "detailsCollapse", "detailsExpand", "endAdd", "endDelete",
            "endEdit", "recordClick", "recordDoubleClick", "load", "resized", "resizeEnd", "resizeStart", "rightClick", "rowSelected", "rowSelecting", "rowDeselected",
            "rowDeselecting", "rowDrag", "rowDragStart", "rowDrop", "templateRefresh", "beforePrint", "beforeRowDrop", "query", "isEdit", "toolbarClick", "queryCellInfo",
            "mergeCellInfo", "mergeHeaderCellInfo","currentViewData", "enableAltRow", "enableRTL", "contextClick", "contextOpen", "rowDataBound", "rowTemplate", "detailsDataBound",
            "detailsTemplate", "childGrid", "summaryRows", "toolbarSettings", "editSettings", "allowMultiSorting", "enableAutoSaveOnSelectionChange", "locale",
            "allowCellMerging", "allowTextWrap", "textWrapSettings", "cssClass", "dataSource", "groupSettings.enableDropAreaAutoSizing", "enableRowHover", "showSummary",
            "allowGrouping", "enableHeaderHover", "allowKeyboardNavigation", "scrollSettings.frozenRows", "scrollSettings.frozenColumns", "enableTouch",
            "contextMenuSettings.enableContextMenu", "exportToExcelAction", "exportToWordAction", "exportToPdfAction"
        ],
        ignoreOnExport: [
            "isEdit", "toolbarClick", "query", "queryCellInfo", "selectionType", "currentViewData", "rowDataBound", "rowTemplate",
            "detailsDataBound", "editSettings", "pageSettings", "enableAutoSaveOnSelectionChange", "localization", "allowScrolling",
            "cssClass", "dataSource", "groupSettings.enableDropAreaAnimation", "enableRowHover", "allowSummary",
            "enableHeaderHover", "allowKeyboardNavigation","currentIndex"
        ],
        ignoreOnToolbarServerClick: [],
        observables: ["dataSource", "selectedRowIndex", "pageSettings.currentPage", "selectedRowIndices"],
        _tags: [{
            tag: "columns",
            attr: ["allowEditing", "allowFiltering","allowTextWrap", "filterType", "allowGrouping","allowResizing","allowSorting", "cssClass", "customAttributes", "dataSource", "defaultValue",
			"disableHtmlEncode", "editTemplate", "editType", "foreignKeyField", "foreignKeyValue", "headerTemplateID", "headerText", "isFrozen",
			"isIdentity", "isPrimaryKey","filterBarTemplate","filterOperator", "textAlign", "templateID", "textAlign", "headerTextAlign", "tooltip", "clipMode",
            "validationRules.minlength", "validationRules.maxlength", "validationRules.range", "validationRules.number", "validationRules.required",
            "editParams.decimalPlaces", [{ tag: "commands", attr: ["type", "buttonOptions"] }]
            ],
            content: "template"
        }, {
            tag: "summaryRows",
            attr: ["showCaptionSummary", "showTotalSummary", [{
                tag: "summaryColumns", attr: ["customSummaryValue", "dataMember", "displayColumn", "summaryType", "template"]
            }]]
        }, {
            tag: "stackedHeaderRows",
            attr: [
            [{
                tag: "stackedHeaderColumns", attr: ["headerText", "column"]
            }]]
        }, {
            tag: "filterSettings.filteredColumns", attr: []
        }, {
            tag: "sortSettings.sortedColumns", attr: []
        }],
        _dataSource: ej.util.valueFunction("dataSource"),
        _selectedRow: ej.util.valueFunction("selectedRowIndex"),
        _selectedMultipleRows: ej.util.valueFunction("selectedRowIndices"),
        _currentPage: ej.util.valueFunction("pageSettings.currentPage"),
        // default model
        defaults: /** @lends ejGrid# */ {            
            allowPaging: false,            
            showColumnChooser: false,            
            gridLines: "both",            
            allowSorting: false,            
            showStackedHeader: false,            
            selectedRecords: [],
            stackedHeaderRows: [],
            allowFiltering: false,
            allowMultipleExporting: false,            
            allowSelection: true,            
            allowGrouping: false,            
            showSummary: false,            
            allowResizing: false,            
            allowResizeToFit: false,            
            allowTextWrap: false,            
            allowCellMerging: false,            
            enableRowHover: true,            
            enablePersistence: false,
            enableFocusout: false,
            selectedRowIndex: -1,
            selectedRowIndices: [],
            allowSearching: false,
            enableToolbarItems:false,            
            enableHeaderHover: false,            
            allowReordering: false,            
            allowKeyboardNavigation: true,
            allowRowDragAndDrop: false,
            enableTouch: true,
			enableLoadOnDemand: false,
            columnLayout:'auto',            
            selectionType: "single",            
            dataSource: null,            
            cssClass: "",            
            allowScrolling: false,            
            locale: "en-US",            
            enableAutoSaveOnSelectionChange: true,            
            allowMultiSorting: false,
            exportToExcelAction: "ExportToExcel",
            exportToWordAction: "ExportToWord",
            exportToPdfAction: "ExportToPdf",
            _groupingCollapsed: [],
            _isHeightResponsive: false,
            _checkSelectedRowsIndexes: [],
            editSettings:  {                
                allowEditing: false,                
                showAddNewRow: false,                
                allowAdding: false,                
                showAddNewRow: false,                
                allowDeleting: false,                
                editMode: "normal",                
                rowPosition: "top",                
                dialogEditorTemplateID: null,                
                allowEditOnDblClick: true,                
                externalFormTemplateID: null,                
                inlineFormTemplateID: null,                
                formPosition: "bottomleft",               
				titleColumn: null,			   
                showConfirmDialog: true,                
                showDeleteConfirmDialog: false
            },            
            selectionSettings:  {                
                selectionMode: ["row"],                
                enableToggle: false,                
                allowDragSelection:false,  
                cellSelectionMode: "flow"
            },
            resizeSettings: {
                resizeMode: 'normal'
            },
            pageSettings:  {               
                pageSize: 12,                
                pageCount: 8,                
                currentPage: 1,                
                totalPages: null,                
                enableTemplates: false,                
                showDefaults: false,                
                template: null,      
			     pageSizeList:[],				
                totalRecordsCount: null,                
                enableQueryString: false,
                printMode: "allpages"
            },            
            groupSettings:  {               
                showDropArea: true,                
                showToggleButton: false,                     
                showGroupedColumn: true,                
                showUngroupButton: true,                
                enableDropAreaAutoSizing: true,                
                captionFormat: null,                
                groupedColumns: []
            },          
            contextMenuSettings: {                
                enableContextMenu: false,                
                contextMenuItems: ["Add Record", "Edit Record", "Delete Record", "Sort In Ascending Order", "Sort In Descending Order", "Next Page", "Last Page", "Previous Page", "First Page", "Save", "Cancel", "Grouping", "Ungrouping"],
                customContextMenuItems: [],
                subContextMenu: [],
                disableDefaultItems: false
            },            
            filterSettings:  {                
                filterType: "filterbar",                
                filterBarMode: "immediate",                
                showFilterBarStatus: true,
                statusBarWidth: 450,                
                showPredicate: false,                
                filteredColumns: [],
                enableInterDeterminateState: true,                
                maxFilterChoices: 1000,                
                enableCaseSensitivity: false,
                immediateModeDelay: 1500,
                enableComplexBlankFilter: true,
                blankValue: "",
				ignoreAccent: false
            },
            searchSettings:  {                
                fields: [],                
                key: "",                
                operator: "contains",                
                ignoreCase: true
            },            
            sortSettings:  {                                             
                sortedColumns: []
            },            
            toolbarSettings:  {                
                showToolbar: false,                
                toolbarItems: [],                
                customToolbarItems: []
            },            
            minWidth: 0,
            currentIndex: 0,
            rowDropSettings: {
                dragBehavior:"move",
                dropMapper: null,
                dragMapper: null,
                dropTargetID: null,
            },
            scrollSettings: 
            {                
                width: "auto",                
                height: 0,                
                enableTouchScroll: true,                
                allowVirtualScrolling: false,                
                virtualScrollMode: "normal",                
                frozenRows: 0,                
                frozenColumns: 0,
                buttonSize: 18,
                autoHide: false,
                scrollerSize: 18,
                scrollOneStepBy: 57,
				enableVirtualization: false
            },  
            textWrapSettings: {
                wrapMode: "both"
            },                    
            summaryRows: [],            
            enableRTL: false,            
            enableAltRow: true,
            currentViewData: [],            
            detailsTemplate: null,            
            childGrid: null,            
            keySettings: null,            
            rowTemplate: null,            
            detailsDataBound: null,            
            rowDataBound: null,            
            queryCellInfo: null,                      
            mergeCellInfo: null,
            mergeHeaderCellInfo:null,
            create: null,            
            actionBegin: null,            
            actionComplete: null,            
            actionFailure: null,            
            beginEdit: null,            
            endEdit: null,            
            endAdd: null,            
            endDelete: null,            
            beforeBatchAdd: null,            
            beforeBatchSave: null,            
            beforeBatchDelete: null,
            beforePrint: null,
            batchAdd: null,            
            batchDelete: null,            
            cellSave: null,            
            cellEdit: null,            
            resizeStart: null,            
            resizeEnd: null,            
            resized: null,            
            load: null,            
            destroy: null,            
            rowSelecting: null,            
            rowSelected: null,
            rowHover: null,
            rowDeselecting:null,
            rowDeselected:null,	            
            cellSelecting: null,            
            cellSelected: null, 
            cellDeselecting:null,
      	    cellDeselected:null,				
            columnSelecting: null,            
            columnSelected: null, 
            columnDeselecting: null,            
            columnDeselected: null,		         
            columnDragStart: null,            
            columnDrag: null,            
            columnDrop: null,
            rowDrag: null,
            rowDragStart: null,
            rowDrop: null,
            beforeRowDrop: null,
            dataBound: null,            
            recordClick: null,            
            recordDoubleClick: null,            
            templateRefresh: null,            
            rightClick: null,            
            detailsCollapse: null,            
            detailsExpand: null,            
            toolbarClick: null,           
            contextOpen: null,            
            contextClick: null,       
            columns: [],            
            query: null,
            isEdit: false,            
            isResponsive: false,            
            enableResponsiveRow: false,
			virtualLoading: null
        },
        dataTypes: {
            dataSource: "data",
            query: "data",
            columns: "array",
            childGrid: "parent",
            gridLines: "enum",
            summaryRows: "array",
            stackedHeaderRows: "array",
            toolbarSettings: {
                toolbarItems: "array",
                customToolbarItems: "array"
            },
            contextMenuSettings: {
                contextMenuItems: "array",
                customContextMenuItems: "array",
                subContextMenu: "array"
            },
            selectionSettings: {
                cellSelectionMode: "enum",
                selectionMode: "array",
                selectedRecords: "array"
            },
            sortSettings: {
                sortedColumns: "array"
            },
            filterSettings: {
                filteredColumns: "array",
                filterType: "enum",
                filterBarMode: "enum",
            },
            groupSettings: {
                groupedColumns: "array"
            },
			pageSettings:{
				pageSizeList: "array"
			},
            editSettings: {
                editMode: "enum",
                formPosition: "enum",
                rowPosition: "enum",
            },
            rowDropSettings: {
                dragBehavior: "enum"
            },
            searchSettings: {
                fields: "array"
            },
            textWrapSettings: {
                wrapMode: "enum"
            }
        },

        _columns: function (index, property, value, old) {
            var $header = this.element.find(".e-gridheader");
            $header.find("div").first().empty().append(this._renderGridHeader().find("table"));
            this._headerCellgDragDrop();
            this.refreshContent(true);
            this._trigger("refresh");
        },
        _summaryRows: function (index, property, value, old) {
            if (property == "showTotalSummary" || property == "showCaptionSummary") {
                var indx = index.summaryRows;
                var val = value.toLowerCase() == "true" || value.toLowerCase() == "false" ? ej.parseJSON(value) : false;
                this.option("summaryRows")[indx][property] = val;
            }
            this.element.find(".e-gridfooter").remove();
            var footer = this._renderGridFooter();
            if (!ej.isNullOrUndefined(footer)) footer.insertAfter(this.getContent());
            if (property == "showCaptionSummary" || property == "title") {
                this._isCaptionSummary = this.option("summaryRows")[indx]["showCaptionSummary"];
                this.model.showSummary = this._isCaptionSummary;
                if (this.model.groupSettings.groupedColumns.length != 0)
                    this._refreshCaptionSummary();
            }
        },
        _summaryRows_summaryColumns: function (index, property, value, old) {
            if (property == "displayColumn" || property == "dataMember") {
                if (ej.isNullOrUndefined(this.getColumnByField(value)))
                    return;
            }
            this._createSummaryRows(this.getFooterTable());
            if (this.element.find(".e-groupcaptionsummary").length != 0)
                this._refreshCaptionSummary();
        },
        _stackedHeaderRows_stackedHeaderColumns: function (index, property, value, old) {
            this._refreshStackedHeader();
        },
        _sortSettings_sortedColumns: function (index, property, value, old) {
            var colName, direction;
            var sortObj = this.model.sortSettings.sortedColumns[index["sortSettings.sortedColumns"]];
            if (property == "field") {
                colName = this.getColumnByField(value) != null ? value : null;
                direction = (sortObj.direction == "ascending" || sortObj.direction == "descending") ? sortObj.direction : null;
            }
            else if (property == "direction") {
                colName = this.getColumnByField(sortObj.field) != null ? sortObj.field : null;
                direction = (value == "ascending" || value == "descending") ? value : null;
            }
            if (colName != null && direction != null)
                this.sortColumn(colName, direction);
        },
        _filterSettings_filteredColumns: function (index, property, value, old) {
            var field, operator, matchcase, predicate, filtervalue;
            var filterObj = this.model.filterSettings.filteredColumns[index["filterSettings.filteredColumns"]];
            switch (property) {
                case "field":
                    field = this.getColumnByField(value) != null ? value : null;
                    operator = this._map(ej.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "matchcase":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(ej.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = value.toLowerCase() == "true" || value.toLowerCase() == "false" ? ej.parseJSON(value) : false;
                    break;
                case "operator":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(ej.FilterOperators, value);
                    filtervalue = filterObj.value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "predicate":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(ej.FilterOperators, filterObj.operator);
                    filtervalue = filterObj.value;
                    predicate = (value == "and" || value == "or") ? value : null;
                    matchcase = filterObj.matchcase;
                    break;
                case "value":
                    field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
                    operator = this._map(ej.FilterOperators, filterObj.operator);
                    filtervalue = value;
                    predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
                    matchcase = filterObj.matchcase;
                    break;
            }
            if (field != null && operator != null && filtervalue != null && predicate != null && matchcase != null)
                this.filterColumn(field, operator, filtervalue, predicate, matchcase);
        },
        _map: function (object, value) {
            var data = $.map(object, function (obj) {
                if (obj === value)
                    return obj;
            });
            return data.length != 0 ? data[0] : null;
        },
        _refreshCaptionSummary: function () {
            var temp = document.createElement('div');
            temp.innerHTML = ['<table>', $.render[this._id + "_GroupingTemplate"](this.model.currentViewData, { groupedColumns: this.model.groupSettings.groupedColumns }), '</table>'].join("");
            this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
            this.refreshContent();
        },
        
        getContentTable: function () {
            return this._gridContentTable;
        },

        setGridContentTable: function (value) {
            this._gridContentTable = value;
        },
        
        getContent: function () {
            return this._gridContent;
        },

        setGridContent: function (value) {
            this._gridContent = value;
        },
        
        getHeaderContent: function () {
            return this._gridHeaderContent;
        },

        setGridHeaderContent: function (value) {
            this._gridHeaderContent = value;
        },
        
        getHeaderTable: function () {
            return this._gridHeaderTable;
        },

        setGridHeaderTable: function (value) {
            this._gridHeaderTable = value;
        },
        
        getRows: function () {
            return this._gridRows;
        },
        
        getFilteredRecords: function () {
            return this._filteredRecords;
        },
        
        getRowByIndex: function (from, to) {
            try {
                var gridRows = this.getRows(), $gridRows = this._excludeDetailRows(), $row = $();
                if ($.isArray(from)) {
                    for (var i = 0; i < from.length; i++) {
                        if (this.model.scrollSettings.frozenColumns > 0) {
                            $row.push(gridRows[0][from[i]]);
                            $row.push(gridRows[1][from[i]]);
                        }
                        else
                            $row.push(gridRows[from[i]]);
                    }
                    return $row;
                }
                else if (ej.isNullOrUndefined(to)) {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        $row.push(gridRows[0][from]);
                        $row.push(gridRows[1][from]);
                        return $row;
                    }
                    return $(($gridRows).not(".e-virtualrow")[from]);
                } else {
                    if (this.model.scrollSettings.frozenColumns > 0) {
                        $row.push($(gridRows[0]).slice(from, to));
                        $row.push($(gridRows[1]).slice(from, to));
                        return $row;
                    }
                    return $($gridRows.not(".e-virtualrow").slice(from, to));
                }
            } catch (e) {
                return $();
            }
        },
        
        getColumnIndexByField: function (field) {
            for (var i = 0, col = this.model.columns, len = col.length ; i < len ; i++) {
                if (col[i]["field"] === field)
                    return i;
            }
            return -1;
        },
        
        getColumnIndexByHeaderText: function (headerText, field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["headerText"] == headerText) {
                    if (field) {
                        if (ej.isNullOrUndefined(this.model.columns[column]["field"]) || this.model.columns[column]["field"] == "")
                            break;
                    }
                    else
                        break;
                }
            }
            return column;
        },
        
        getIndexByRow: function ($tr) {
            var gridRows = this.getRows(), $gridRows = this._excludeDetailRows(), rowIndex;
            if (this.model.scrollSettings.frozenColumns > 0) {
                rowIndex = $(gridRows[0]).index($tr);
                if (rowIndex == -1)
                    rowIndex = $(gridRows[1]).index($tr);
                return rowIndex;
            } else
                return $gridRows.not(".e-virtualrow").index($tr);
        },
        
        getPrimaryKeyFieldNames: function () {
            if (this._primaryKeys.length != 0)
                return this._primaryKeys;
            for (var key = 0, col = this.model.columns, cLen = col.length; key < cLen; key++) {
                if (col[key]["isPrimaryKey"])
                    this._primaryKeys.push(col[key]["field"]);
            }
            return this._primaryKeys;
        },
        
        getVisibleColumnNames: function (headerText) {
            return this._visibleColumns;
        },
        
        getHiddenColumnNames: function (headerText) {
            return this._hiddenColumns;
        },
        
        getColumnByField: function (field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["field"] == field)
                    break;
            }
            return column == this.model.columns.length ? null : this.model.columns[column];
        },
        
        getsortColumnByField: function (field) {
            for (var column = 0; column < this.model.sortSettings.sortedColumns.length; column++) {
                if (this.model.sortSettings.sortedColumns[column]["field"] == field)
                    break;
            }
            return column == this.model.sortSettings.sortedColumns.length ? null : this.model.sortSettings.sortedColumns[column];
        },
        
        getColumnByHeaderText: function (headerText, field) {
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["headerText"] == headerText) {
                    if (field) {
                        if (ej.isNullOrUndefined(this.model.columns[column]["field"]) || this.model.columns[column]["field"] == "")
                            break;
                    }
                    else
                        break;
                }
            }
            return column == this.model.columns.length ? null : this.model.columns[column];
        },
        
        getCurrentViewData: function () {
            return this._currentJsonData;
        },
        
        getColumnFieldNames: function () {
            var columnNames = [];
            for (var column = 0; column < this.model.columns.length; column++) {
                if (this.model.columns[column]["field"])
                    columnNames.push(this.model.columns[column]["field"]);
            }
            return columnNames;
        },
        
        getBrowserDetails: function () {
            var b = navigator.userAgent.match(/(firefox|chrome|opera|msie|safari)\s?\/?(\d+(.\d+)*)/i);
            if (!!navigator.userAgent.match(/Trident\/7\./) || !!navigator.userAgent.match(/Edge/))
                return { browser: "msie", version: $.uaMatch(navigator.userAgent).version };
            return { browser: b[1].toLowerCase(), version: b[2] };
        },
        _initPrivateProperties: function () {
            this._groupContextIndex = -1;
            this._dynamicSelectedRowIndex = null;
            this._summaryContextIndex = -1;
            this._showInColumnchooserCol = [];
            this._currentVirtualRowIndex = 0;
			this._isCheckboxChecked=false;
			this._isCheckboxUnchecked=false;
            this._click = 0;
            this._gridPhoneMode = 320;
            this._columntemplaterefresh = false;
			this._enterKey = false;
			this._tabKey = false;
            this._gridHeaderTable = null;
            this._gridWidth = this.element.width();
            this._id = this.element.attr("id");
            this._gridRows = [];
            this._fltrBarcell = false;
			this._unboundRow = null;
            this._gridContentTable = null;
            this._gridContent = null;
            this._remoteSummaryData = null;
            this._gridSort = null;
            this._gridHeaderContent = null;
            this._gridFooterContent = null;
            this._gridFooterTable = null;
            this._gridRecordsCount = this._dataSource() !== null ? (this.model.pageSettings.totalRecordsCount == null ? this._dataSource().length : this.model.pageSettings.totalRecordsCount) : 0;
            this._links = null;
            this._gridPager = null;
            this._cSortedColumn = null;
            this._cSortedDirection = null;
            this._$curSElementTarget = null;
            this._gridFilterBar = null;
            this._$curFieldName = null;
			this._$curFilterValue = null;
            this._$prevFieldName = null;
            this._editedData = {};
            this._isEditChangesApplied = false;
            this._mediaStatus = false;
            this._$fDlgIsOpen = false;
            this._$menuDlgIsOpen = false;
            this._$colType = null;
            this._$colFormat = null;
            this._$prevColType = null;
            this._$prevSElementTarget = null;
            this._currentFilterColumn = null;
            this._filteredRecordsCount = null;
            this._filteredRecords = [];
            this._validatedColumns = [];
            this.filterColumnCollection = [];
            this._previousFilterCount = null;
            this._excelFilter = null;
            this._isExcelFilter = this.model.filterSettings.filterType == "excel";
            this._$fkColumn = false;
			this._fkParentTblData =[];
            this._primaryKeys = [];
            this._identityKeys = [];
            this._primaryKeyValues = [];
            this._modifiedRecords = [];
            this._addedRecords = [];
            this._tdsOffsetWidth = [];
            this._deletedRecords = [];
            this._disabledToolItems = $();
            this._validationRules = {};
            this._groupedColumns = [];
            this._LastColumnUnGroup = false;
            this._scolumns = [];
            this._currentJsonData = [];
            this._groupingColumnIndex = 0;
            this._dataManager = this._dataSource() instanceof ej.DataManager ? this._dataSource() : this._dataSource() != null ? ej.DataManager(this._dataSource()) : null;
            if (this._dataManager != null && this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.totalRecordsCount != null && this._dataManager.dataSource.json != null)
                this._dataManager.dataSource.json.splice(this.model.pageSettings.totalRecordsCount);
            this._isRemoteSaveAdaptor = (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.remoteSaveAdaptor);
            this._isLocalData = true;
            this._disabledResizingColumns = [];
            this._disabledSortableColumns = [];
            this._disabledGroupableColumns = [];
            this._disabledFilterableColumns = [];
            this._disabledEditableColumns = [];
            this._hiddenColumns = [];
            this._visibleColumns = [];
            this._visibleColumnsField = [];
            this._hiddenColumnsField = [];
            this._ccVisibleColumns = [];
            this._ccHiddenColumns = [];
            this._sortedColumns = [];
            this.multiSortRequest = false;
            this.multiSelectCtrlRequest = false;
            this.multiSelectShiftRequest = false;
            this._enableSelectMultiTouch = false;
            this._enableSortMultiTouch = false;
            this._templateRefresh = false;
            this.initialRender = false;
            this._selectDrag = false;
            this._isAddNew = false;
            this._fieldColumnNames = {};
            this._headerColumnNames = {};
             this._virtualLoadedRecords = {};
            this._virtualLoadedRows = {};
			this._virtualPageRecords = {};
			this._virtualSelectedRowIndex = [];
			this._virtaulSel = [];
            this._singleView = false;
			this._dragIndex = null;
			this._dragUpInterval = null;
			this._dragDownInterval = null;
			this._queryCellView = [];
			this._currentPageViews = [];
            this._virtualLoadedPages = [];                                  
            this._currentLoadedIndexes = [];
            this._prevLoadedIndexes = [];
			this._prevVirtualSort = [];
			this._prevVirtualFilter = [];
            this._prevVirtualIndex = 0;
            this._currentVirtualIndex = 1;
            this._virtualRowCount = 0;
            this._virtualSelectedRecords = {};
            this._virtualCheckSelectedRecords = {};
            this._selectionByGrid = false;
            this._enableCheckSelect = false;
            this.checkSelectedRowsIndexes = [];
            this._isMapSelection = false;
            this._selectionMapColumn = null;
            this._selectAllCheck = false;
            this.selectedRowsIndexes = [];
            this.OldfilterValue = null;
            this._isReorder = false;
            this._searchString = "";
            this._searchCount = null;
            this.columnsWidthCollection = [];
            this._Indicator = null;
            this._lastSelectedCellIndex = [];
            this._resizer = null;
            this._bulkEditCellDetails = {
                cellValue: null,
                rowIndex: -1,
                columnIndex: -1,
                fieldName: null,
                _data: null,
                cellEditType: "",
                cancelSave: false,
                defaultData: null,
                insertedTrCollection: [],
                rowData: null
            };
            this._copyBulkEditCellDetails = {
                cellValue: null,
                rowIndex: -1,
                columnIndex: -1,
                fieldName: null,
                _data: null,
                cellEditType: "",
                cancelSave: false,
                defaultData: null,
                insertedTrCollection: [],
                rowData: null
            };
            this.batchChanges = {
                added: [],
                deleted: [],
                changed: []
            };
            this._bulkEditTemplate = $();
            this._confirmDialog = null;
            this._confirmedValue = false;
            this._lastRow = false;
            this._isVirtualRecordsLoaded = false;
            this._scrollValue = 0;
            this._currentTopFrozenRow = this.model.scrollSettings.frozenRows;
            this._rowHeightCollection = [];
            this._scrollObject = null;
            this._customPop = null;
            this.selectedRowCellIndexes = [];
            this._rowIndexesColl = [];
            this.selectedColumnIndexes = [];
			this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
			this.commonQuery = this.model.query.clone();
            if (ej.gridFeatures.group) {
                this._rowCol = this._captionSummary();
                this._isCaptionSummary = (this._rowCol != null && this._rowCol.length) > 0 ? true : false;
            }
            this.phoneMode = this.model.isResponsive && document.documentElement.clientWidth < 360 ? true : false;
            if (this.model.selectionSettings.selectionMode.length > 0 && this.model.allowSelection)
                this._initSelection();
            this._mediaQuery = false;
            this._columnChooserList = null;
            this._$headerCols = null;
            this._$contentCols = null;
            this._detailsOuterWidth = null;
            this._editForm = null;
            this._cloneQuery = null;
            this.localizedLabels = this._getLocalizedLabels();
            this._searchBar = null;
            this._relationalColumns = [];
            this._dropDownManager = {};
			this._isUngrouping = false;
			this._columnChooser = false;
			this._showHideColumns = false;
			this._vCurrentTrIndex = null;
			this._lastVirtualPage = null;
			this._currentVIndex = null;
			if (!this.model.enablePersistence || ej.isNullOrUndefined(this._isHeightResponsive))
	           this._isHeightResponsive = false;
			this._resize = false;
			this._initHeight = 0;
			this._initDataProcessed = false;
			this._menuColTypes = [];
			this._excelColTypes = [];
            this._previousTr = null;
			this._isResized = false;
        },
        _init: function () {
            this._trigger("load");
            if (ej.isNullOrUndefined(this.model.query) || !(this.model.query instanceof ej.Query))
                this.model.query = ej.Query();
            if (!ej.isNullOrUndefined(this.model.parentDetails)) {
                var temp = this.model.queryString, ftemp = this.model.foreignKeyField;
                this.model.query = this.model.query.clone();
                var val = (this.model.parentDetails.parentKeyFieldValue === undefined) ? "undefined" : this.model.parentDetails.parentKeyFieldValue;
                this.model.query.where(ej.isNullOrUndefined(ftemp) ? temp : ftemp, "equal", val, true);
            }
			this._initPrivateProperties();
            if (ej.gridFeatures.common)
                this._initScrolling();            
            if (this.model.enableResponsiveRow)
                this.element.addClass("e-responsive");
            this._checkForeignKeyBinding();
            this._checkDataBinding();
        },
        _initComplexColumn: function (obj, field, cxField) {
            var complexField = cxField || field;
            for (var field1 in obj) {

                if (typeof obj[field1] == "object" && !ej.isNullOrUndefined(obj[field1])) {
                    complexField = complexField.concat(".").concat(field1);
                    this._initComplexColumn(obj[field1], field1, complexField);
                }
                else {
                    var cxFieldName = (complexField).concat(".").concat(field1), value = obj[field1];;
                    this.model.columns.push({
                        field: cxFieldName,
                        type: value != null ? (value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date") : typeof (value)) : null
                    });
                }
            }
        },
        _initColumns: function (object) {
            if(this.model.groupSettings.groupedColumns.length){		
			    while (object.items != undefined && object.items[0] instanceof Object)					
					object = object.items[0];
            }		
            if (this.model.columns.length == 0 && object) {
                for (var field in object) {
                    if (object.hasOwnProperty(field) && (typeof (object[field]) != "object" || object[field] instanceof Date || object[field] == null)) {
                        var value = object[field];
                        this.model.columns.push({
                            field: field,
                            type: value != null ? (value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date") : typeof (value)) : null
                        });
                    }
                    else if (typeof (object[field]) == "object") {
                        this._initComplexColumn(object[field], field);
                    }
                }
                this.model.columns.length && this._renderAfterColumnInitialize();
            } else {
                for (var index = 0; index < this.model.columns.length; index++) {
                    this.model.columns[index].field = ej.isNullOrUndefined(this.model.columns[index].field) ? "" : this.model.columns[index].field;
                    if (!ej.isNullOrUndefined(this.model.columns[index].validationRules))
                        this._validatedColumns.push(this.model.columns[index].field);
                    if (ej.isNullOrUndefined(this.model.columns[index].type)) {
                        var $field = !ej.isNullOrUndefined(this.model.columns[index].field) ? ej.getObject(this.model.columns[index].field, object) : null, coldata = this.model.columns[index].dataSource;
                        if (!!coldata && this.model.columns[index].foreignKeyValue) {
                            this.model.columns[index].originalType = $field != null ? ($field.getDay ? ($field.getHours() > 0 || $field.getMinutes() > 0 || $field.getSeconds() > 0 || $field.getMilliseconds() > 0 ? "datetime" : "date") : typeof ($field)) : null;
                            $field = !(coldata instanceof ej.DataManager) ? ej.getObject("0." + this.model.columns[index].foreignKeyValue, coldata) : ej.getObject("0." + this.model.columns[index].foreignKeyValue, this.model.columns[index].foreignKeyData);
                        }
                        this.model.columns[index].type = $field != null ? ($field.getDay ? ($field.getHours() > 0 || $field.getMinutes() > 0 || $field.getSeconds() > 0 || $field.getMilliseconds() > 0 ? "datetime" : "date") : typeof ($field)) : null;
                    }
                    else if (this.model.columns[index]["type"] == "date" && this.model.columns[index].format == undefined && this._isReorder != true && this.initialRender && !this._showHideColumns)
                        $.extend(this.model.columns[index], { format: "{0:" + ej.preferredCulture(this.model.locale).calendars.standard.patterns.d + "}" });
                    else if (this.model.columns[index]["type"] == "datetime" && this.model.columns[index].format == undefined && this._isReorder != true && this.initialRender && !this._showHideColumns)
                        $.extend(this.model.columns[index], { format: "{0:" + ej.preferredCulture(this.model.locale).calendars.standard.patterns.d + " " + ej.preferredCulture(this.model.locale).calendars.standard.patterns.t + "}" });
                  }
            }
        },
        _initSelection: function () {
            var mode = this.model.selectionSettings.selectionMode,i;
            for (i = 0; i < mode.length; i++) {
                this["_allow" + mode[i] + "Selection"] = true;
            }
        },
        _checkDataBinding: function () {
            if (!this.model.columns.length && (((this._dataSource() == null || !this._dataSource().length) && !(this._dataSource() instanceof ej.DataManager)) || ((this._dataSource() instanceof ej.DataManager) && this._dataManager.dataSource.url == undefined && !this._dataSource().dataSource.json.length))) {
                this._renderAlertDialog();
                this._alertDialog.find(".e-content").text(this.localizedLabels.EmptyDataSource);
                this._alertDialog.ejDialog("open");
                return;
            }
            this._initialRenderings();
            if (this.model.editSettings.allowDeleting && this.model.selectionType == "multiple")
                this.multiDeleteMode = true;
            this.initialRender = true;
            this.model.enableRTL && this.element.addClass("e-rtl");
            if (this.model.allowFiltering && this._isExcelFilter)
                this._renderExcelFilter();
            if (this.model.cssClass != null)
                this.element.addClass(this.model.cssClass);
            if (this.model.allowGrouping)
                this.element.append(this._renderGroupDropArea());
            if (this.model.toolbarSettings.showToolbar || ((this.model.allowSorting || this.model.allowFiltering) && this.model.enableResponsiveRow)) {
                this.element.append(this._renderToolBar());
                if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10 && $.inArray("search", this.model.toolbarSettings.toolbarItems) != -1) {
                    var searching = this.element.find('.e-toolbar.e-toolbarspan .e-gridsearchbar');
                    ej.ieClearRemover(searching[0]);
                }
            }
            var columns = this.model.columns;
            if (columns && columns.length) {
                var expands = this.model.query._expands;                
                if (typeof columns[0] === "string")
                    for (var i = 0; i < columns.length; i++)
                        columns[i] = { field: columns[i] };
                for (var i = 0; i < columns.length; i++) {
                    if (!columns[i].field || columns[i].field.indexOf('.') === -1) continue;
                    this._getExpands(columns[i].field, expands);
                }
                this.model.query.expand(expands);
                this.commonQuery.expand(expands);
                this._renderAfterColumnInitialize();
            }
            if (this.model.allowPaging){
			 	if(this.model.isResponsive)
                    this.model.pageSettings.isResponsive = true;
                this.element.append(this._renderGridPager());
				if(this.model.pageSettings.isResponsive)
					$(this.element.find(".e-pager")).ejPager('instance')._reSizeHandler();
				if(this.model.filterSettings.filterType == "filterbar" && this.model.filterSettings.filteredColumns.length) {
					var filteredColumns = this.model.filterSettings.filteredColumns;
					for (var i = 0; i < filteredColumns.length; i++) {
						var index = $.inArray(this.getColumnByField(filteredColumns[i].field), this.filterColumnCollection);
						if (filteredColumns[i].field !== "" && index == -1)
							this.filterColumnCollection.push(this.getColumnByField(filteredColumns[i].field));
					}
					this.filterStatusMsg = "";
					this._showFilterMsg();
				}
			}
            if (this.model.contextMenuSettings.enableContextMenu)
                this.element.append(this._renderContext());
            if ($.isFunction($.fn.ejWaitingPopup)) {
                this.element.ejWaitingPopup({ showOnInit: false });
                $("#" + this._id + "_WaitingPopup").addClass("e-gridwaitingpopup");
            }
            if (this.model.scrollSettings.allowVirtualScrolling) {
                this._loadedJsonData = [];
                this._prevPage = 1;
            }
            if (this._dataSource() instanceof ej.DataManager) {
                this.element.ejWaitingPopup("show");
                if (this._dataSource().ready != undefined) {
                    var proxy = this;
                    this._dataSource().ready.done(function (args) {
                        proxy._initDataSource();
                        proxy.model.dataSource = ej.DataManager(args.result);
                    });
                } else {
                    this.element.ejWaitingPopup("show");
                    this._initDataSource();
                }
            } else {
                this._ensureDataSource();
                this._trigger("actionBegin");
                this._setForeignKeyData();
                this._relationalColumns.length == 0 && this._initGridRender();
            }
        },
        _renderColumnChooser: function () {
            var $columnButton = ej.buildTag("button .e-ccButton", this.localizedLabels.Columns, { 'float': (this.model.enableRTL ? 'left' : 'right') }).attr("type", "button");
            this.element.prepend($columnButton);
            $columnButton.ejButton({
                prefixIcon: "e-icon e-down-arrow",
                imagePosition: "imageright",
                contentType: "textandimage",
                type: 'button',
                click: $.proxy(this._ccClickHandler, this),
                width: 90
            });
            var buttHeight = $columnButton.outerHeight();
            $columnButton.css('margin-top', 0 - (buttHeight));
            var elementTop = parseInt(this.element.css('margin-top'),10);
            this.element.css('margin-top', elementTop + buttHeight);
            var $mainDiv = ej.buildTag("div");
            var $outerDiv = ej.buildTag("div .e-grid e-columnChooser", '', {}, { id: this._id + "ccDiv" });
            if ($("#" + this._id + "ccDiv").data("ejDialog") != undefined) {
                $("#" + this._id + "ccDiv").ejDialog("destroy");
                $("#" + this._id + "ccDiv").remove();
            }
            var $searchBox = ej.buildTag("div.e-searchbox e-fields").append(ej.buildTag("input#" + this._id + "_ccSearchBox.e-ejinputtext e-filtertext", {}, {}, { "type": "text" }))
            var $sapnDiv = ej.buildTag('span .e-searchfind e-icon')
            $searchBox.append($sapnDiv);
            var $listOuterDiv = ej.buildTag('div', '', { 'height': '228px' }, { id: this._id + "liScrollerDiv" })
            this._renderColumnChooserData(false);
            $listOuterDiv.append(this._columnChooserList);
            $outerDiv.append($searchBox);
            $outerDiv.append($listOuterDiv);

            var $splitterDiv = ej.buildTag('div .e-columnChooserSplitter', '', { 'border-bottom': '0px' }), $buttonDiv;
            $outerDiv.append($splitterDiv);
            if (this.model.enableRTL) {
                $buttonDiv = ej.buildTag('div .e-ccBtndiv', '', { 'float': 'left', 'margin-top': '7px', 'margin-right': '-13px' });
                var $cancelButton = ej.buildTag("button .e-ccformbtn e-btncan e-flat", this.localizedLabels.Cancel, { 'margin-right': '7px', 'margin-left': '9px' });
                $($sapnDiv).addClass("e-rtl");
            }
            else {
                $buttonDiv = ej.buildTag('div .e-ccBtndiv', '', { 'float': 'right', 'margin-top': '7px' });
                var $cancelButton = ej.buildTag("button .e-ccformbtn e-btncan e-flat", this.localizedLabels.Cancel, { 'margin-right': '7px', 'margin-left': '6px' });
            }
            var $addButton = ej.buildTag("button .e-ccformbtn e-btnsub e-flat", this.localizedLabels.Done);
            $buttonDiv.append($addButton);
            $buttonDiv.append($cancelButton);
            $outerDiv.append($buttonDiv);
            $addButton.ejButton({
                click: $.proxy(this._addButtonCC, this),
                showRoundedCorner: true,
                width: 66
            });
            $cancelButton.ejButton({
                click: $.proxy(this._cancelButtonHandler, this),
                showRoundedCorner: true,
                width: 66
            });
            $outerDiv.insertBefore(this.element)
            $outerDiv.ejDialog({ width: 'auto', beforeClose: $.proxy(this._columnChooserBeforeClose, this), showOnInit: false, allowKeyboardNavigation: false, enableResize: false, "enableRTL": this.model.enableRTL, "cssClass": this.model.cssClass, showHeader: false, width: 260 });
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10) {
                var searchBox = $(".e-columnChooser").find("input#" + this._id + "_ccSearchBox")[0];
                ej.ieClearRemover(searchBox);
            }
        },
        _renderColumnChooserData: function (refresh) {
            var selectAllCheck = this.model.columns.length == this.getVisibleColumnNames().length;            
            this._ccCheckBoxList = [];
            var $listBox = ej.buildTag("div", '', { 'margin-left': '0px', 'width': '250px' }), count = 0;
            for (var index = -1; index < this.model.columns.length; index++) {
                var isSelectAll = index == -1;
                if (isSelectAll || this.model.columns[index].showInColumnChooser) {
                    var column = this.model.columns[index];
                    var colValue = isSelectAll ? this.localizedLabels["SelectAll"] : ej.isNullOrUndefined(column.headerText) || column.headerText == "" ? column.field == "" ? null : column.field : column.headerText,
                        labelValue = column && column.disableHtmlEncode ? this._htmlEscape(colValue) : colValue;
                    if (!ej.isNullOrUndefined(colValue) || isSelectAll) {
                        var $innerDiv = ej.buildTag('div', '', {}, { 'class': 'e-columnChooserListDiv' });
                        var styleAttr = {};
                        var id = isSelectAll ? this._id + 'selectAll' : this._id + colValue.replace(/\s|\.|[^a-zA-Z0-9]|&nbsp/g, "_");
                        var inDom = $listBox.find("#" + id).length; inDom && count++;
                        var $input = ej.buildTag('input', '', styleAttr, { 'id': (!inDom ? id : id + count + ""), 'value': colValue, 'type': 'checkbox', "ej-field": isSelectAll ? '' : column.field, "ej-headertext": isSelectAll ? '' : column.headerText, 'class': isSelectAll ? 'e-selectall' : '' });
                        var label = ej.buildTag('label', labelValue, { 'font-size': '13px' }, { 'for': (!inDom ? id : id + count + "") });
                        $innerDiv.append($input);
                        $innerDiv.append(label);
                        $listBox.append($innerDiv);
                        var checked = !isSelectAll && !ej.isNullOrUndefined(column.visible) ? column.visible : true;
                        $input.ejCheckBox({
                            checked: isSelectAll ? selectAllCheck : checked,
                            change: $.proxy(this._columnChooserCheckChange, this)
                        });
                        if (!isSelectAll && !ej.isNullOrUndefined(column.visible))
                            $input[column.visible ? "attr" : "removeAttr"]("checked", true);
                    }
                }
               else if(!ej.isNullOrUndefined(this.model.columns[index].showInColumnChooser)){
					var field = ej.dataUtil.distinct(this._showInColumnchooserCol,"field");  
					var fieldIndex = field.indexOf(this.model.columns[index].field);
					if(fieldIndex == -1)			
						this._showInColumnchooserCol.push(this.model.columns[index]);
					else
						this._showInColumnchooserCol[fieldIndex] = this.model.columns[index];
				}
            }
            if (!refresh)
                this._columnChooserList = $listBox;
            else {
                this._columnChooserList.empty().append($listBox.children());
                $("#" + this._id + "liScrollerDiv").is(":visible") && $("#" + this._id + "liScrollerDiv").ejScroller('refresh');
            }
            this._ccCheckBoxList = this._columnChooserList.find("input:checkbox.e-js").not(".e-selectall");
        },
        _checkFinder: function () {
            var $this = $(this), $parent = $this.closest(".e-columnChooserListDiv");
            if ($this.hasClass("e-checkbox") && !$parent.hasClass("e-hide") && $this.prop("checked"))
                return true;
        },
        _displayFinder: function () {            
            return !$(this).closest(".e-columnChooserListDiv").hasClass("e-hide");
        },
        _columnChooserCheckChange: function (args) {
            if (!args.isInteraction) {
                if (args.isChecked)
                    $("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub").removeClass("e-disable");
             return;
            }
            var checked = args.isChecked, displayedCheckBoxes = this._ccCheckBoxList.filter(this._displayFinder), checkedBoxes = this._ccCheckBoxList.filter(this._checkFinder),
                totalChecks = displayedCheckBoxes.length, checkedLen = checkedBoxes.length;
            if (args.model.id == this._id + 'selectAll') {
                if (!checked)
                    checkedBoxes.ejCheckBox({ checked: checked });                
                else           
                    displayedCheckBoxes.not(":checked").ejCheckBox({ checked: checked });                
            }
            else {
                this._columnChooserList.find('input.e-selectall').ejCheckBox('model.checked', totalChecks == checkedLen);
                checked = checkedLen != 0;
                this.element[checked ? "attr" : "removeAttr"]("checked", true);
            }
            var operation = !(checked || this._showInColumnchooserCol.length) ? "addClass" : "removeClass";
            $("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub")[operation]("e-disable");
        },
        _columnChooserBeforeClose: function () {
            $(".e-columnChoosertail").remove();
            $(".e-columnChoosertailAlt").remove();
            $("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub").removeClass("e-disable");
            $("#" + this._id + "_ccSearchBox").val('');
            var args = {};
            args.target = {}; args.target.value = '';
            this._columnChooserSearch(args);
        },
        _columnChooserSearch: function (e) {
            if (e.type == 'click') {
                e.target.value = '';
                $("#" + this._id + "_ccSearchBox").val('');
            }
            var val = e.target.value;
            var span = $("#" + this._id + "_ccSearchBox").next('span');
            if (val != '') {
                span.removeClass("e-searchfind");
                span.addClass("e-cancel");
            }
            else {
                span.removeClass("e-cancel");
                span.addClass("e-searchfind");
            }
            $(".e-cancel").on('click', $.proxy(this._columnChooserSearch, this));
            var currentCheckedItemsData = this.model.columns;
            var columnCollection = [], gridColumns = [], tempCollection = [], proxy = this, 
                isHiddenByGroup = function (field) {
                    var model = proxy.model.groupSettings;
                    return !model.showGroupedColumn && $.inArray(field, model.groupedColumns) > -1;
                };
            if (val != '') {
                currentCheckedItemsData = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("headerText", ej.FilterOperators.startsWith, val, true));
                tempCollection = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("field", ej.FilterOperators.startsWith, val, true));
                tempCollection.forEach(function (obj) {
                    if (obj.headerText == "" && $.inArray(obj, currentCheckedItemsData) == -1)
                        currentCheckedItemsData.push(obj);
                })
            }
             currentCheckedItemsData.forEach(function (obj) {
                 if (obj.showInColumnChooser && !isHiddenByGroup(obj.field)) {
                    var headerText = ej.isNullOrUndefined(obj.headerText) || obj.headerText == "" ? obj.field == "" ? null : obj.field : obj.headerText;
                    columnCollection.push(headerText);
                }
            });
            if (!ej.isNullOrUndefined($("#nomatches")[0]))
                $("#nomatches").remove();
       
            var divs = this._columnChooserList.find(".e-columnChooserListDiv");

            for (var i = 0; i < this.model.columns.length; i++) {
                if (this.model.columns[i].showInColumnChooser && !ej.isNullOrUndefined(this.model.columns[i].headerText)) {
                    if (this.model.columns[i].headerText != "")
                        gridColumns.push(this.model.columns[i].headerText)
                    else if (this.model.columns[i].field != "")
                        gridColumns.push(this.model.columns[i].field)
                }
            }

            for (var index = 0; index < gridColumns.length; index++) {
                var colValue = gridColumns[index];
                var indx = columnCollection.indexOf(colValue)
                if (!ej.isNullOrUndefined(colValue))
                    divs.eq(index + 1)[indx == -1 ? "addClass" : "removeClass"]("e-hide");
            }

            if (columnCollection.length == 0) {
               this._emptyColumnChooserData();
            }
            var checkDisplay = this._ccCheckBoxList.filter(this._displayFinder).length, checkChecked = this._ccCheckBoxList.filter(this._checkFinder).length, isChk = checkChecked == checkDisplay;
            if (columnCollection.length)
                divs.eq(0).find("input.e-js").ejCheckBox({ checked: isChk });
            divs.eq(0)[columnCollection.length == 0 ? "addClass" : "removeClass"]("e-hide");
            $("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub")[!checkChecked ? "addClass" : "removeClass"]("e-disable");
            $("#" + this._id + "liScrollerDiv").ejScroller('refresh');
        },
        _addButtonCC: function () {
            this._visibleColumns = [];
            this._hiddenColumns = [];
            this._visibleColumnsField = [];
            this._hiddenColumnsField = [];
            this._columnChooserClick = true;
            var args = {}; args.requestType = "columnchooser";
			this._columnChooser = true;
            var chbxs = this._columnChooserList.find("input:checkbox.e-js").not('.e-selectall');
            for (var i = 0, len = chbxs.length; i < len; i++) {
                var ele = $(chbxs[i]), hTxt = ele.attr("ej-headertext"), field = ele.attr("ej-field");
                if(this._id+"selectAll"!=ele.attr("id")){
                    this[chbxs[i].checked ? "_visibleColumns" : "_hiddenColumns"].push(hTxt);
                    this[chbxs[i].checked ? "_visibleColumnsField" : "_hiddenColumnsField"].push(field != "" ? field : hTxt);
                }
            }
            for (var i = 0, len = this._showInColumnchooserCol.length; i < len; i++) {
                var column = this._showInColumnchooserCol[i], htext = column.headerText, field = column.field;
                this[column["visible"] ? "_visibleColumns" : "_hiddenColumns"].push(htext);
                this[column["visible"] ? "_visibleColumnsField" : "_hiddenColumnsField"].push(field != "" ? field : htext);
            }
            var array1 = this._visibleColumns;
            var array2 = this._hiddenColumns;
            var arr = [], obj, duparr;
            obj = $.merge($.merge([], array1), array2);
            duparr = this._isDuplicate(obj);
            this._trigger("actionBegin", args);
            if (duparr) {
                this.showColumns(this._visibleColumnsField);
                this.hideColumns(this._hiddenColumnsField);
            }
            else {
                this.showColumns(this._visibleColumns);
                this.hideColumns(this._hiddenColumns);
            }
            $("#" + this._id + "ccDiv").ejDialog('close');
            $(".e-columnChoosertail").remove();
            this.refreshScrollerEvent();
            args = { requestType: "columnchooser", removedcolumns: [], addedcolumns: [], visiblecolumns: this.getVisibleColumnNames(), hiddencolumns: this.getHiddenColumnNames() };
            this._ccColumnUpdate(args.addedcolumns, this.getVisibleColumnNames(), this._ccVisibleColumns);
            this._ccColumnUpdate(args.removedcolumns, this.getHiddenColumnNames(), this._ccHiddenColumns);
            this._trigger("actionComplete", args);
            this._columnChooser = false;
        },
        _ccColumnUpdate: function (args, getColumns, ccColumns) {
            for (var i = 0; i < getColumns.length; i++) {
                if ($.inArray(getColumns[i], ccColumns) == -1)
                    args.push(getColumns[i]);
            }
        },
        _isDuplicate: function (arr) {
            var temp, count = {}, duplicate = [];
            for (var i = 0; i < arr.length; i++) {
                temp = arr[i];
                if (count[temp] >= 1)
                    count[temp] = count[temp] + 1;
                else
                    count[temp] = 1;
            }
            for (temp in count) {
                if (count[temp] > 1)
                    return true;
            }
            return false;
        },
        _cancelButtonHandler: function () {
            $("#" + this._id + "ccDiv").ejDialog('close');
            $(".e-columnChoosertailAlt").remove();
            $(".e-columnChoosertail").remove();
        },
        _ccClickHandler: function (e) {
            var dlgWidth = 230, xPos;
            var chooserButton = this.element.find(".e-ccButton");
            xPos = chooserButton.offset().left + chooserButton.width();
            var dialogObj = $("#" + this._id + "ccDiv").data('ejDialog')
            if (dialogObj && dialogObj.isOpened()) {
                dialogObj.close();
                $(".e-columnChoosertail").remove();
                $(".e-columnChoosertailAlt").remove();
            }
            else {
                $("#" + this._id + "ccDiv").ejDialog({ width: '230px', height: '310px', position: { X: (this.model.enableRTL ? (xPos - dlgWidth + 143) : (xPos - dlgWidth)), Y: chooserButton.offset().top + 35 } })
                   .ejDialog("open");
                var maxZindex = parseInt($("#" + this._id + "ccDiv_wrapper").css('z-index'));
                var $tailDiv = ej.buildTag("div #" + this._id + "_ccTail .e-columnChoosertail", '', { 'display': 'block', 'position': 'absolute', 'left': (this.model.enableRTL ? (xPos - 78) : (xPos - 29)), 'top': chooserButton.offset().top + 15 });
                var $tailDiv2 = ej.buildTag("div #" + this._id + "_ccTailAlt .e-columnChoosertailAlt", '', { 'display': 'block', 'z-index': maxZindex + 2, 'position': 'absolute', 'left': (this.model.enableRTL ? (xPos - 78) : (xPos - 29)), 'top': chooserButton.offset().top + 16 });
                $tailDiv.insertBefore($("#" + this._id + "ccDiv_wrapper"));
                $tailDiv2.insertBefore($("#" + this._id + "ccDiv_wrapper"));
            }
            this._refreshColumnChooserList();
            this._ccVisibleColumns = this.getVisibleColumnNames();
            this._ccHiddenColumns = this.getHiddenColumnNames();
            $("#" + this._id + "liScrollerDiv").ejScroller({ height: '228', width: '228', buttonSize: 0 });
            $("#" + this._id + "liScrollerDiv").ejScroller('refresh');
            if (!ej.isIOSWebView() && this.getBrowserDetails().browser == 'chrome')
                $('.e-columnChooser .e-hscrollbar').attr('style', 'height: 10px !important;');
            $(".e-ejinputtext").on('keyup', $.proxy(this._columnChooserSearch, this))
        },
        _refreshColumnChooserList: function (collection) {
            var chbxs = this._columnChooserList.find("input:checkbox.e-js").not('.e-selectall');
			var duparr = this._isDuplicate($.merge($.merge([], this._visibleColumns), this._hiddenColumns));
            for (var i = 0, len = chbxs.length; i < len; i++) {
                var ele = $(chbxs[i]), hTxt = ele.attr("ej-headertext"), field = ele.attr("ej-field"), flag = undefined, isDup = chbxs.filter('[ej-headertext="' + hTxt + '"]').length;
                if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && $.inArray($(chbxs[i]).attr("ej-field"), this.model.groupSettings.groupedColumns) != -1) {
                    $(chbxs[i]).parents(".e-columnChooserListDiv").addClass("e-hide");
                    chbxs[i].checked = false;
				if(this._columnChooserList.find(".e-columnChooserListDiv").eq(0).hasClass("e-hide") && this.model.columns.length > this.model.groupSettings.groupedColumns.length)
					this._columnChooserList.find(".e-columnChooserListDiv").eq(0).removeClass("e-hide")
             
                }
                else {
                    $(chbxs[i]).parents(".e-columnChooserListDiv").removeClass("e-hide");
                    chbxs[i].checked = true;
                }
                var colValue = duparr ? (field == "" ? hTxt : field) : hTxt;
				flag = this[duparr ? "_hiddenColumnsField" : "_hiddenColumns"].indexOf(colValue) != -1;
                ele["prop"]("checked", !flag);
                ele.ejCheckBox("model.checked", !flag);
            }
            var chkSelectAll = chbxs.filter(this._displayFinder).length == chbxs.filter(this._checkFinder).length && chbxs.filter(this._displayFinder).length ? true : false;
            this._columnChooserList.find("input:checkbox.e-selectall").ejCheckBox({ checked: chkSelectAll });
            if (!this.model.groupSettings.showGroupedColumn) {
				if (!ej.isNullOrUndefined($("#nomatches")[0]))
					$("#nomatches").remove();
			if(this.model.columns.length == this.model.groupSettings.groupedColumns.length){
					this._columnChooserList.find(".e-columnChooserListDiv").eq(0).addClass("e-hide")
					this._emptyColumnChooserData();
				}
                var enable = chbxs.filter(this._displayFinder).length > 0 ? true : false;
                $("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub").ejButton({ enabled: enable })
            }
        },
		_emptyColumnChooserData:function(){
            var $labeldiv = ej.buildTag('div#nomatches', '', { 'padding-left': '13px' });
			var div = $("#" + this._id + "ccDiv").find("#" + this._id + "liScrollerDiv")
            var $label = ej.buildTag('span', this.localizedLabels.NoResult);
            $labeldiv.append($label);
            $(div).append($labeldiv);
		},
        _initDataSource: function () {
            this._isLocalData = (!(this._dataSource() instanceof ej.DataManager) || (this._dataSource().dataSource.offline || this._isRemoteSaveAdaptor || this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor));
            if (this._dataSource().adaptor instanceof ej.SqlDataSourceAdaptor) this._isLocalData = false;
            this._ensureDataSource();
            this._trigger("actionBegin");
            var queryPromise = this._dataSource().executeQuery(this.model.query), subPromises, proxy = this;
            if (this._dataManager.dataSource.table != null)
                this._dataManager.dataSource.table.css("display", "none");
            if (!this.element.is(":visible"))
                this.element.ejWaitingPopup("hide");
            queryPromise.done(ej.proxy(function (e) {
                if (!this._initDataProcessed) {
                    this._initDataProcess(e);
                    this._initDataProcessed = true;
                }
            }, this));
            var proxy = this;
            queryPromise.fail(function (e) {
                if (ej.isNullOrUndefined(proxy.element))
                    return;
                proxy.element.ejWaitingPopup("hide");
                proxy.model.currentViewData = [];
                proxy._gridRecordsCount = 0;
                proxy._renderGridContent().insertAfter(proxy.element.children(".e-gridheader"));
                var args = { error: e.error };
                proxy._trigger("actionFailure", args)
            })
        },
        _initDataProcess: function(e, args){
            if (ej.isNullOrUndefined(this.element))
                return;
            this._relationalColumns.length == 0 && this.element.ejWaitingPopup("hide");
            if (!this.model.columns.length && !e.count) {
                var lastPage = (e.count % this.model.pageSettings.pageSize == 0) ? (e.count / this.model.pageSettings.pageSize) : (parseInt(e.count / this.model.pageSettings.pageSize, 10) + 1);
                if (this._currentPage() > lastPage)
                    this._currentPage(lastPage);
                this._renderAlertDialog();
                this._alertDialog.find(".e-content").text(this.localizedLabels.EmptyDataSource);
                this._alertDialog.ejDialog("open");
                this.element.ejWaitingPopup("hide");
                return;
            }
            if (!ej.isNullOrUndefined(e.aggregates))
                this._remoteSummaryData = e.aggregates;
            if (!this.model.scrollSettings.enableVirtualization)
                this.model.currentViewData = e.result;
            if (this._$fkColumn && this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "excel")
                this._fkParentTblData = e.result;
            if (!this.model.enablePersistence && this.model.pageSettings.totalRecordsCount != null && this.model.filterSettings.filteredColumns.length == 0)
                this._gridRecordsCount = this.model.pageSettings.totalRecordsCount;
            else if (e.count == 0 && e.result.length)
                this._gridRecordsCount = e.result.length;
            else
                this._gridRecordsCount = e.count;
            if (this.model.filterSettings.filteredColumns.length > 0)
                this._filteredRecordsCount = e.count;
            if (this.getPager() != null)
                this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
            if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
                this._refreshVirtualViewDetails();
                if (this._isInitNextPage || this._remoteRefresh) {
                    this._setInitialCurrentIndexRecords(e.result, this._currentPage());
                    this._isInitNextPage = this._remoteRefresh = false;
                }
                else
                    this._setVirtualLoadedRecords(e.result, this._currentPage());
                if (this._isThumbScroll && !this._checkCurrentVirtualView(this._virtualLoadedRecords, this._currentVirtualIndex))
                    this._checkPrevNextViews(this._currentPage());
                if (this.initialRender) {
                    this.model.currentViewData = [];
                    for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
                        var currentView = this._currentLoadedIndexes[i];
                        $.merge(this.model.currentViewData, this._virtualLoadedRecords[currentView] || []);
                    }
                }
                else
                    this.model.currentViewData = e.result;
            }
			this.model.groupSettings.groupedColumns.length && this._setAggregates();
            this._setForeignKeyData(args);
            this._relationalColumns.length == 0 && this._initGridRender();
        },
        _initialRenderings: function () {
            if (this.model.groupSettings.groupedColumns.length) {
                var sortedColumns = new Array();
                for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
                    if (ej.isNullOrUndefined(this.model.sortSettings.sortedColumns[i].direction))
                        this.model.sortSettings.sortedColumns[i].direction = ej.sortOrder.Ascending;
                    sortedColumns.push(this.model.sortSettings.sortedColumns[i].field);
                }
                if(this.model.allowGrouping){
					for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
						if ($.inArray(this.model.groupSettings.groupedColumns[i], sortedColumns) == -1)
							this.model.sortSettings.sortedColumns.push({ field: this.model.groupSettings.groupedColumns[i], direction: ej.sortOrder.Ascending });
					}
                }
            }
        },
        _getExpands: function (field, arr) {
            var splits = field.split('.'), tmp = "";
            splits.splice(splits.length - 1, 1);
            for (var i = 0; i < splits.length; i++, tmp = "") {
                for (var j = 0; j < i; j++)
                    tmp += splits[j] + "/";
                tmp = tmp + splits[i];
                if (arr.indexOf(tmp) === -1)
                    arr.push(tmp);
            }
        },
        _renderAfterColumnInitialize: function () {
            this.element.append(this._renderGridHeader());
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
                this._renderFiltering();
                this._renderFilterBarTemplate();
            }
			if(this.model.gridLines != "both")
				this._showHeaderGridLines();
            if (this.model.allowPaging)
                this.element.append(this.element.find(".e-pager").first());
        },
        _ensureDataSource: function (args) {
            if (this._dataSource() == null && !(this._dataSource() instanceof ej.DataManager)) {
                if (!ej.isNullOrUndefined(args) && args.requestType == "add")
                    this.dataSource([]);
                else
                    return;
            }
            this.model.query.requiresCount();
            var queryManagar = this.model.query;
            var cloneQuery = queryManagar.clone();           
            if (this._isLocalData && (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) && (!ej.isNullOrUndefined(this._cModifiedData) || !ej.isNullOrUndefined(this._cAddedRecord))) {
                if (ej.isNullOrUndefined(this._cAddedRecord)) {
                    for (var index = 0; index < this._primaryKeys.length; index++)
                        queryManagar = queryManagar.where(this._primaryKeys[index], ej.FilterOperators.equal, this._primaryKeyValues[index]);
                    var currentData = this._dataManager.executeLocal(queryManagar);
                    if (!(this._dataSource() instanceof ej.DataManager))
                        ej.copyObject(this._dataSource()[$.inArray(currentData.result[0], this._dataSource())], this._cModifiedData);
                    else
                        ej.copyObject(this._dataSource().dataSource.json[$.inArray(currentData.result[0], this._dataSource().dataSource.json)], this._cModifiedData);
                    this._cModifiedData = null;
                } else {
                    var tmpRcrd = this._cAddedRecord;
                    this._cAddedRecord = null;
                    (this._dataSource() instanceof ej.DataManager) ? this._dataSource().dataSource.json.unshift(tmpRcrd) : this._dataSource(undefined, true).splice(0, 0, tmpRcrd);
                }
                queryManagar.queries = cloneQuery.queries;
                if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal"))
                    this.model.isEdit = false;
            }
            if (args && this.model.editSettings.allowDeleting && args.requestType == "delete" && (this._excludeDetailRows().length == 1 || (this.multiDeleteMode == "multiple" && this.selectedRowsIndexes.length == this._excludeDetailRows().length)) && this.model.pageSettings.currentPage != 1)
                this._currentPage(this.model.pageSettings.totalPages - 1)
            if (args && this.model.editSettings.allowDeleting && args.requestType == "delete" && !ej.isNullOrUndefined(this._cDeleteData) && this._isLocalData) {
                if (!(this._dataSource() instanceof ej.DataManager)) {
                    var index = $.inArray(this._cDeleteData[0], this._dataSource());
                    this._dataSource(undefined, true).splice(index, 1);
                }
                else {
                    var index = $.inArray(this._cDeleteData[0], this._dataSource().dataSource.json);
                    this._dataSource().dataSource.json.splice(index, 1);
                }
            }
            if (this.model.scrollSettings.allowVirtualScrolling && args && (args.requestType == "save" || args.requestType == "cancel" || args.requestType == "delete" || args.action == "showColumn" || args.action == "hideColumn")) {
                if(args.action != "showColumn" && args.action != "hideColumn")
				this._virtualDataRefresh = true;
                this._refreshVirtualViewData();
            }
            if (this.model.sortSettings.sortedColumns.length) {
                 var sortedGrp = [], sortedColumns = this.model.sortSettings.sortedColumns;
                for (var i = sortedColumns.length - 1; i >= 0; i--){
                    if(this.model.groupSettings.groupedColumns.indexOf(sortedColumns[i].field) == -1){
                        queryManagar.sortBy(sortedColumns[i].field, sortedColumns[i].direction);
						if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization && $.inArray(sortedColumns[i], this._prevVirtualSort) == -1){
							for(var j = 0; j < this._prevVirtualSort.length; j++){
								if(sortedColumns[i].field == this._prevVirtualSort[j].field)
									this._prevVirtualSort.splice(j, 1);
							}
							this._needVPaging = this._currentVirtualIndex * this._virtualRowCount % this.model.pageSettings.pageSize <= this._virtualRowCount;
							this._prevVirtualSort.push(sortedColumns[i]);	
							this._virtualDataRefresh = true;
							this._refreshVirtualViewData();							
						}
					}
                    else
                        sortedGrp.push({field: sortedColumns[i].field, direction: sortedColumns[i].direction })
                }
                if (this.model.scrollSettings.virtualScrollMode == "continuous" && !ej.isNullOrUndefined(args) && args.requestType == "sorting") {
                    this._currentPage(1);
                }
                for (var j = 0; j < sortedGrp.length ; j++){
                    queryManagar.sortBy(sortedGrp[j].field, sortedGrp[j].direction);
                }
            }

            if (this.model.allowSearching && this.model.searchSettings.key.length) {
                var searchDetails = this.model.searchSettings;
                searchDetails.fields = searchDetails.fields.length != 0 ? searchDetails.fields : this.getColumnFieldNames();
                queryManagar.search(searchDetails.key, searchDetails.fields, searchDetails.operator || "contains", searchDetails.ignoreCase);
                if (!this.initialRender && args.requestType == "searching")
                    this._currentPage(1);
            }
            if (this._isLocalData && this.model.allowSearching)
                this._filteredRecords = this.model.searchSettings.key.length != 0 ? this._dataManager.executeLocal(queryManagar).result : [];
            if (this.model.allowFiltering && this.model.filterSettings.filteredColumns.length) {
                var predicate, firstFilterCondition = this.model.filterSettings.filteredColumns[0];
                var filteredColumns = this.model.filterSettings.filteredColumns;
                for (var i = 0; i < filteredColumns.length; i++) {
                    var index = $.inArray(this.getColumnByField(filteredColumns[i].field), this.filterColumnCollection);
                    if (filteredColumns[i].field !== "" && index == -1)
                        this.filterColumnCollection.push(this.getColumnByField(filteredColumns[i].field));
                }
				if ((this._isExcelFilter || this._excelFilterRendered) && !(firstFilterCondition instanceof ej.Predicate)) {
                    this._excelFilter.getPredicate(filteredColumns, null, true);
                    var predicates = this._excelFilter._predicates[0];
                    for (var prop in predicates) {
                        var obj = predicates[prop], isTake = obj["from"] != undefined;
                        if (isTake)
                            queryManagar.skip(obj["from"] == "top" ? 0 : this._gridRecordsCount - obj["take"]).take(obj["take"]);
                        else
                            predicate = predicate != undefined ? predicate["and"](obj) : obj;
                    }
                }
                else {
                    if (!(firstFilterCondition instanceof ej.Predicate))
                        predicate = ej.Predicate(firstFilterCondition.field, firstFilterCondition.operator, firstFilterCondition.value, !firstFilterCondition.matchcase);
                    else {
                        predicate = firstFilterCondition;
                        if (this._excelFilterRendered) {
                            var dis = ej.distinct(filteredColumns, "field", false);
                            this._excelFilter._predicates[0] = this._excelFilter._predicates[0] || {};
                            this._excelFilter._predicates[0][dis[0]] = predicate;
                        }
                    }
                    for (var i = 1; i < filteredColumns.length; i++) {
                        if (!(filteredColumns[i] instanceof ej.Predicate)) {
                            if (!this._isLocalData && filteredColumns.length > 2 && i > 1 && filteredColumns[i].predicate == "or")
                                predicate.predicates.push(ej.Predicate(filteredColumns[i].field, filteredColumns[i].operator, filteredColumns[i].value, filteredColumns[i].ignoreCase || !filteredColumns[i].matchcase));
                            else
                                predicate = predicate[filteredColumns[i].predicate || "and"](filteredColumns[i].field, filteredColumns[i].operator, filteredColumns[i].value, !filteredColumns[i].matchcase);
                        }
                        else
                            predicate = predicate[filteredColumns[i].predicate || "and"](filteredColumns[i]);
                    }
                }
                predicate && queryManagar.where(predicate);
                if (this._isLocalData) {
                    var fresults = this._dataManager.executeLocal(queryManagar);
                    this._filteredRecordsCount = isTake ? fresults.result.length : fresults.count;
                    var lastPage = (this._filteredRecordsCount % this.model.pageSettings.pageSize == 0) ? (this._filteredRecordsCount / this.model.pageSettings.pageSize) : (parseInt(this._filteredRecordsCount / this.model.pageSettings.pageSize, 10) + 1);
                    if (this._currentPage() > lastPage)
                        this._currentPage(lastPage);
                    this._filteredRecords = this._dataManager.executeLocal(queryManagar).result;
                    if (this._$fkColumn && this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "excel")
                        this._fkParentTblData  = this._filteredRecords;
                } else if (!ej.isNullOrUndefined(args) && args.requestType == ej.Grid.Actions.Filtering)
                    this._currentPage(1);
				if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
					for(var i = 0; i < filteredColumns.length; i++){
						for(var j = 0; j < this._prevVirtualFilter.length; j++){
							if(filteredColumns[i] == this._prevVirtualFilter[j] && args.requestType == ej.Grid.Actions.Filtering)
								this._prevVirtualFilter.splice(j, 1);
						}
						if($.inArray(filteredColumns[i], this._prevVirtualFilter) == -1){
							this._prevVirtualFilter.push(filteredColumns[i]);	
							this._gridRecordsCount = this._filteredRecordsCount;
							this._refreshViewPageDetails();							
							this._refreshVirtualViewData();
							this._refreshVirtualViewDetails();							 
						}
					}
				}
            }
			if (this._isLocalData && this.model.allowFiltering && this.model.filterSettings.filteredColumns.length==0){
				if(!ej.isNullOrUndefined(this._filteredRecordsCount) || this._filteredRecordsCount > 0){
					if(this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization){
						this._refreshViewPageDetails();
						this._refreshVirtualViewDetails(true);						
					}
					this._filteredRecordsCount = null;
					this._filteredRecords = [];
				}
			}

            if (this.model.summaryRows.length) {
                this._setSummaryAggregate(queryManagar);
            }

            if (this.model.allowPaging || (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling && !this.model.scrollSettings.enableVirtualization)) {
                if (this._isLocalData) {
                    var fresults = this._dataManager.executeLocal(queryManagar);
                    this._recordsCount = fresults.count;
                    var lastPage = (this._recordsCount % this.model.pageSettings.pageSize == 0) ? (this._recordsCount / this.model.pageSettings.pageSize) : (parseInt(this._recordsCount / this.model.pageSettings.pageSize, 10) + 1);
                    if (this._currentPage() > lastPage)
                        this._currentPage(lastPage);
                }
                if (this._currentPage() == 0) {
                    if (this._prevPageNo == 0 || this._prevPageNo == null)
                        this._currentPage(1);
                    else
                        this._currentPage(this._prevPageNo);
                }
                if (!this._isLocalData && !this.initialRender && !ej.isNullOrUndefined(args) && args.requestType == "refresh") {
                    if (cloneQuery.queries.length) {
                        for (i = 0; i < cloneQuery.queries.length; i++) {
                            if (cloneQuery.queries[i].fn == "onWhere")
                                this._currentPage(1);
                        }
                    }
                }
                queryManagar.page(this._currentPage(), this.model.pageSettings.pageSize);
            }
			
			 if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {                              
                this._needPaging = true; 				
                if (this.initialRender && this.model.currentIndex > 1 && (this.model.currentIndex <= this._getVirtualTotalRecord() || !this._isLocalData)) { 					
					if(this.model.scrollSettings.virtualScrollMode == "continuous")
						this.model.currentIndex = 1;
                    this._currentVirtualIndex = Math.ceil(this.model.currentIndex / this._virtualRowCount);
                    this._isThumbScroll = true;
                    this._currentPage(Math.ceil(this.model.currentIndex / this.model.pageSettings.pageSize));
					this._virtualLoadedPages.push(this._currentPage());
                }
				if(this._virtualDataRefresh){					
                    this._isThumbScroll = true;
					this._refreshVirtualViewData(true);
					this._gridRecordsCount = this._dataSource() !== null ? (this.model.pageSettings.totalRecordsCount == null ? this._dataSource().length : this.model.pageSettings.totalRecordsCount) : 0;
                    this._currentPage(Math.ceil(this._currentVirtualIndex * this._virtualRowCount / this.model.pageSettings.pageSize));
					this._virtualLoadedPages.push(this._currentPage());					
				}
                if(this.model.virtualLoading != null)
                    this._gridRecordsCount = this.model.pageSettings.totalRecordsCount;
				if(this.model.filterSettings.filteredColumns == 0 && this._prevVirtualFilter.length){
					this._refreshVirtualViewData();
					this._prevVirtualFilter = [];
				}									
				if(this._isLocalData && this.initialRender)
				    this._refreshVirtualViewDetails();
				if((this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization && this.model.allowSearching && !ej.isNullOrUndefined(args) && args.requestType == "searching")){	
					this._refreshVirtualViewData();
					this._refreshVirtualViewDetails();	
				}
				this._getVirtualLoadedRecords(queryManagar);
            }	

            if (this.model.allowGrouping) {
                var cloned = queryManagar.clone();
                if (this.model.allowPaging && this.model.groupSettings.groupedColumns.length) {
                    cloned.queries = cloned.queries.slice(0, cloned.queries.length - 1);
                }
                for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                    var colName = this.model.groupSettings.groupedColumns[i], col = this.getColumnByField(colName);
                    if (!ej.isNullOrUndefined(col) && !ej.isNullOrUndefined(col.enableGroupByFormat) && col.enableGroupByFormat) {
                        queryManagar.group(colName, ej.proxy(this._formatGroupColumn, this));
                        cloned.group(colName, ej.proxy(this._formatGroupColumn, this));
                    }
                    else {
                        queryManagar.group(colName);
                        cloned.group(colName);
                    }
                }
                if (this.model.groupSettings.groupedColumns.length)
                    this._setAggreatedCollection(cloned);
            }
            if (args != undefined && args.requestType == "add" && this._isLocalData && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)
                !(this._dataSource() instanceof ej.DataManager) ? this._dataSource().unshift(args.data) : this._dataSource().dataSource.json.unshift(args.data);
            if ((!ej.isNullOrUndefined(args) && args.action == "add") && !ej.isNullOrUndefined(this.model.parentDetails)) {
                var column = this.getColumnByField(this.model.parentDetails.parentKeyField);
                var ix = $.inArray(column, this.model.columns)
                if (ix == -1) {
                    var newdata = {};
                    newdata[this.model.parentDetails.parentKeyField] = this.model.parentDetails.parentKeyFieldValue;
                    $.extend(true, this.model.currentViewData[0], newdata);
                }
            }
            this._cloneQuery = queryManagar.clone();
                if (this._isLocalData) {
                var dataMgrJson = this._dataManager.dataSource.json;
                var dataSource = this._dataSource().dataSource;
                if (!ej.isNullOrUndefined(dataSource) && this._dataSource() instanceof ej.DataManager)
                    this._dataManager.dataSource.json = dataMgrJson != dataSource.json ? dataSource.json : dataMgrJson;
                var result = this._dataManager.executeLocal(queryManagar);
				if(!this.model.scrollSettings.enableVirtualization || this._virtualDataRefresh){
					if (!(!ej.isNullOrUndefined(args) && args.requestType == "beginedit")) {
						if (this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1)
							this._prevPageRendered = true;
						if (this.model.scrollSettings.allowVirtualScrolling && !this._prevPageRendered && result.result.length != this.model.pageSettings.pageSize && this.model.pageSettings.totalPages == this.model.pageSettings.currentPage) {
							var pageQuery = ej.pvt.filterQueries(queryManagar.queries, "onPage");
							queryManagar.queries.splice($.inArray(pageQuery[0], queryManagar.queries), 1);
							queryManagar.page(this._currentPage() - 1, this.model.pageSettings.pageSize);
							var lastPageResult = this._dataManager.executeLocal(queryManagar);
							lastPageResult.result.splice(0, result.result.length);
							this._previousPageRecords = $.extend(true, [], lastPageResult.result);
							this._previousPageLength = result.result.length;
							this._currentPageData = result.result;
							ej.merge(lastPageResult.result, result.result);
							this.model.currentViewData = this._lastVirtualPage = lastPageResult.result;
							this._lastPageRendered = true;
						}
						else if (this._lastPageRendered && this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1 && !this.model.scrollSettings.enableVirtualization) {
							var count = this.model.pageSettings.pageSize - this._previousPageLength;
							for (var dupRow = 0; dupRow < count; dupRow++) {
								var removeEle = this.getRows()[this.getRows().length - (this.model.pageSettings.pageSize - dupRow)];
								removeEle.remove();
							}
							this._tempPageRendered = true;
							this.model.currentViewData = result.result;
						}
						else
							this.model.currentViewData = result.result;
					}
					else
						this.model.currentViewData = result.result;
				}
                this._gridRecordsCount = result.count;
                this._remoteSummaryData = result.aggregates;
                this._searchCount = this._searchString.length ? result.count : null;
                this.model.groupSettings.groupedColumns.length && (!(this._dataSource() instanceof ej.DataManager) || !this.initialRender) && this._setAggregates();
            }
        },
        _formatGroupColumn: function (value,field) {
            var col = this.getColumnByField(field), format;
            format = col.format;
            var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
            format = toformat.exec(format)[2];
            return ej.format(value, format, this.model.locale);
        },
		_refreshViewPageDetails: function(){
			this._currentPage(1);
			this.model.currentIndex = 0;
			this._currentVirtualIndex = 1;
			this.getContent().ejScroller("model.scrollTop", 0);
		},
		_refreshVirtualViewDetails: function (dataRefreshed) {
		    var dataSrc = this._dataSource();
			if(dataRefreshed)
			    this._gridRecordsCount = dataSrc !== null ? dataSrc instanceof ej.DataManager ? dataSrc.dataSource.json.length : dataSrc.length : this.model.pageSettings.totalRecordsCount;
			this._totalVirtualViews = Math.ceil(this._getVirtualTotalRecord() / this._virtualRowCount);
			this._maxViews = Math.ceil(this.model.pageSettings.pageSize / this._virtualRowCount);			
			this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
			this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;			
			this._lastViewData = this._virtualRowCount - ((this._totalVirtualViews * this._virtualRowCount) - this._getVirtualTotalRecord());		
		},
		_getVirtualLoadedRecords: function (queryManagar) {                                        
            var currentPage = this._currentPage(), needTwoPage;
			if (this._needPaging){
				this._isLastVirtualpage = needTwoPage = this._isThumbScroll && currentPage == this.model.pageSettings.totalPages && !this._virtualPageRecords[currentPage];				
				if(this.initialRender || this._virtualDataRefresh) needTwoPage = true;
				if (this.model.virtualLoading && this._isLocalData && (this.model.currentIndex != 0 || currentPage != 1) && this.model.currentIndex < this.model.pageSettings.totalRecordsCount)
					this._getVirtualOnLoadingData(currentPage, !needTwoPage);
				else
					this._setVirtualPaging(queryManagar, currentPage, !needTwoPage);
				if(!this.initialRender && this._isThumbScroll && this._virtualPageRecords[currentPage] && !this._virtualDataRefresh)
					this._checkPrevNextViews(currentPage, queryManagar);
			}		                            
			this._needPaging = false;			
            this._setVirtualLoadedIndexes(this._currentVirtualIndex);
            if(this.initialRender && this._isLocalData){
                this.model.currentViewData = [];
                for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
                    var currentView = this._currentLoadedIndexes[i];
					if(this._virtualLoadedRecords[currentView])
						$.merge(this.model.currentViewData, this._virtualLoadedRecords[currentView]);
                }
            }
        },
        _setVirtualPaging: function(queryManagar, currentPage, isCurrentIndex){     
            var pageQuery = ej.pvt.filterQueries(queryManagar.queries, "onPage");
			if(pageQuery.length)
				queryManagar.queries.splice($.inArray(pageQuery[0], queryManagar.queries), 1);
			if((!isCurrentIndex || this._needVPaging) && this.model.currentIndex > this._virtualRowCount)
				this._initCurrentIndex(queryManagar, currentPage);	
			else
				queryManagar.page(currentPage, this.model.pageSettings.pageSize);
            this._needVPaging = false;
            if(this._isLocalData && !this._virtualPageRecords[currentPage]) {								 
				var result = this._dataManager.executeLocal(queryManagar);   
				if(!this.initialRender) this.model.currentViewData = result.result;
				if(this.model.searchSettings.key.length > 0){
					this._gridRecordsCount = result.result.length;
					this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
				}
				if(result.result.length){
					this._setVirtualLoadedRecords(result.result, currentPage);					
					if($.inArray(currentPage, this._virtualLoadedPages) == -1)
						this._virtualLoadedPages.push(currentPage);
				}
				else if (!this.initialRender)
					this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();					
			}                   						
        },
		_checkPrevNextViews: function(currentPage){
			var currentVirtualIndex = this._currentVirtualIndex;
			var prevView = this._virtualLoadedRecords[currentVirtualIndex - 1], nextView = this._virtualLoadedRecords[currentVirtualIndex + 1];			
				var adjust = this._maxViews == 3 ? 1 : 2, sTop;																	
				if(currentVirtualIndex != 1 && currentVirtualIndex != this._totalVirtualViews){				
					if(!prevView || prevView.length != this._virtualRowCount){
						var currentIndex = currentVirtualIndex + adjust;
						this._currentVirtualIndex = this._virtualLoadedRecords[currentVirtualIndex] ? currentIndex : currentIndex + 1;
						sTop = this._scrollValue + (adjust * this._virtualRowCount * this._vRowHeight);
					}
					else if((!nextView || nextView.length != this._virtualRowCount) && this._totalVirtualViews != currentVirtualIndex - 1){
						var currentIndex = currentVirtualIndex - adjust;
						this._currentVirtualIndex = this._virtualLoadedRecords[currentVirtualIndex] ? currentIndex : currentIndex - 1;
						sTop = this._scrollValue - (adjust * this._virtualRowCount * this._vRowHeight);
					}			
					if(sTop){					
						this._scrollValue = sTop;
						this._setVirtualLoadedIndexes(this._currentVirtualIndex);
						this.model.currentIndex = sTop == 0 ? sTop : Math.floor(sTop / this._vRowHeight);
					}
				}			
		},
		_initCurrentIndex: function(queryManagar, currentPage){			
			var pageResultCount = currentPage * this.model.pageSettings.pageSize;
			var nextDataCount = (this._currentVirtualIndex * this._virtualRowCount) + this._virtualRowCount;
			var prevDataCount = (this._currentVirtualIndex *  this._virtualRowCount) - (this._virtualRowCount * 2);	
			var needTwoPage = nextDataCount > pageResultCount || prevDataCount < pageResultCount - this.model.pageSettings.pageSize;
			if(needTwoPage || this._isLastVirtualpage){
				if(nextDataCount > pageResultCount){
					var skipValue = (currentPage - 1) * this.model.pageSettings.pageSize, takeValue = this.model.pageSettings.pageSize * 2;	
					this._isInitNextPage = true;					
				}
				else if(prevDataCount < pageResultCount - this.model.pageSettings.pageSize  || this._isLastVirtualpage){
					var skipValue = (currentPage - 2) * this.model.pageSettings.pageSize, takeValue = this.model.pageSettings.pageSize * 2;
					this._isInitNextPage = false; this._remoteRefresh = true;					
				}
				if(this.model.virtualLoading && this._isLocalData){
					var args = {};					
					args.endIndex = skipValue + takeValue;
					args.endIndex = args.endIndex > this._getVirtualTotalRecord() ? this._getVirtualTotalRecord() : args.endIndex;
					args.startIndex = skipValue;	
					args.currentPage = this._currentPage();
					args.result = null;
					this._trigger("virtualLoading", args);
					var currentData = args.result;
					this._setInitialCurrentIndexRecords(currentData, currentPage);
				}
				else {
				    var skipQuery = ej.pvt.filterQueries(queryManagar.queries, "onSkip");
				    if (skipQuery.length)
				        queryManagar.queries.splice($.inArray(skipQuery[0], queryManagar.queries), 1);
					queryManagar.skip(skipValue).take(takeValue);					
					if(this._isLocalData){
						var result = this._dataManager.executeLocal(queryManagar);                                    
						var currentData = this.model.currentViewData = result.result;
						this._isLastVirtualpage = false;
						this._setInitialCurrentIndexRecords(currentData, currentPage);						
					}
				}
			}			
			else{
				this._needVPaging = false;
				if(this.model.virtualLoading && this._isLocalData && (this.model.currentIndex != 0 || currentPage != 1))
					this._getVirtualOnLoadingData(currentPage, true);
				else
					this._setVirtualPaging(queryManagar, currentPage, true);						
			}
		},
		_setInitialCurrentIndexRecords: function(currentData, currentPage){
			for(var i = 0; i < 2; i++){
				var start = i * this.model.pageSettings.pageSize, end = start + this.model.pageSettings.pageSize;
				var data = currentData.slice(start, end), page;
				if (this._isInitNextPage || (currentPage == 1 && this.model.pageSettings.totalPages == 1))
					page = i == 0 ? currentPage : currentPage + 1;
				else
					page = i == 0 ? currentPage - 1 : currentPage;
				this._setVirtualLoadedRecords(data, page);
			}
		},
        _getVirtualOnLoadingData: function(currentPage, isCurrentIndex){
            if(currentPage > 0){
				if(this.model.currentIndex > this._virtualRowCount && (!isCurrentIndex || this._needVPaging) && this.model.currentIndex < this.model.pageSettings.totalRecordsCount)
					this._initCurrentIndex(undefined, currentPage);
				else{
					var args = {};
					args.endIndex = (currentPage * this.model.pageSettings.pageSize) > this._gridRecordsCount ? this._gridRecordsCount : currentPage * this.model.pageSettings.pageSize;
					args.startIndex = (currentPage * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
					args.currentPage = this._currentPage();	args.result = null;			
					this._trigger("virtualLoading", args);
					var currentData = args.result;
					this._setVirtualLoadedRecords(currentData, currentPage);
				}
            }
        },
        _setVirtualLoadedRecords: function(currentData, currentPage){
            var virtualRowCount = this._virtualRowCount, pageSize = this.model.pageSettings.pageSize; 
            var pageIndex = pageSize / virtualRowCount, prevIndex;  
			var maxIndex = Math.ceil(currentPage * pageSize / virtualRowCount);
			var lastPage = currentPage == this.model.pageSettings.totalPages;
			if(!this._virtualPageRecords[currentPage])
				this._virtualPageRecords[currentPage] = currentData;
			if(lastPage){									
			    var lastPageData = this._getVirtualTotalRecord() % pageSize;
				if((!this._virtualLoadedRecords[this._totalVirtualViews] || this._virtualLoadedRecords[this._totalVirtualViews].length != this._lastViewData) && lastPageData < this._lastViewData && lastPageData != 0)
					maxIndex = this._totalVirtualViews + 1;
				else
					maxIndex = this._totalVirtualViews;	
				if(this._getVirtualTotalRecord() < virtualRowCount)
					this._singleView = true;
			}						
            for (var i = 0; i < pageIndex; i++) {
                var startIndex, endIndex;                                                      
                var viewIndex = Math.ceil((currentPage - 1) * pageIndex + (i + 1));				
                if((viewIndex <= this._totalVirtualViews || lastPage) && viewIndex <= maxIndex){					
                    if(this._virtualLoadedRecords[viewIndex - 1] && this._virtualLoadedRecords[viewIndex - 1].length != virtualRowCount) {
                        var start = this._virtualLoadedRecords[viewIndex - 1].length + (i * virtualRowCount);
                        startIndex = virtualRowCount - start + (i * virtualRowCount);
                        $.merge(this._virtualLoadedRecords[viewIndex - 1], currentData.slice(0, startIndex));
                        prevIndex = endIndex = startIndex + virtualRowCount;
						if(viewIndex <= this._totalVirtualViews)
							this._virtualLoadedRecords[viewIndex] = currentData.slice(startIndex, prevIndex);						
                    }									
                    else {
                        if (viewIndex != 1 && !this._virtualLoadedRecords[viewIndex - 1]) {                                        
                            var prevEnd = endIndex = (viewIndex - 1) * virtualRowCount % pageSize;
                            if(prevEnd != 0)
                                this._virtualLoadedRecords[viewIndex - 1] = currentData.slice(0, prevEnd);
                            startIndex = prevEnd, endIndex = prevIndex = prevEnd + virtualRowCount;
                        }
                        else {
                            startIndex = prevIndex ? prevIndex : i * virtualRowCount % pageSize;       
                            prevIndex = endIndex = startIndex + virtualRowCount;
                        }                                   
                    }                    
					if(!this._singleView && this._virtualLoadedRecords[viewIndex] && this._virtualLoadedRecords[viewIndex].length != virtualRowCount){
						var	data = currentData.slice(startIndex, endIndex);						
						if(data.length + this._virtualLoadedRecords[viewIndex].length <= virtualRowCount){
							var viewData = $.merge(data, this._virtualLoadedRecords[viewIndex]); 
							this._virtualLoadedRecords[viewIndex] = viewData;
						}
					}
					else if(!this._virtualLoadedRecords[viewIndex] && viewIndex <= this._totalVirtualViews)
						this._virtualLoadedRecords[viewIndex] = currentData.slice(startIndex, endIndex);					
                }
            }
			if($.inArray(currentPage, this._virtualLoadedPages) == -1)
				this._virtualLoadedPages.push(currentPage);
        },
        _setVirtualLoadedIndexes: function (currentIndex) {
            this._prevLoadedIndexes = this._currentLoadedIndexes;
			this._currentLoadedIndexes = [];            
            var virtualCount = currentIndex == this._totalVirtualViews ? currentIndex : currentIndex + 1;			
            if(currentIndex != 1)                               
                currentIndex = currentIndex - 1;            
            for (var i = currentIndex; i <= virtualCount; i++) {
                this._currentLoadedIndexes.push(i);                    
            }  
        },
        _getVirtualTotalRecord: function(){
            var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;    
            return recordCount;
        },
        _initGridRender: function () {
            this.addInitTemplate();
            if (this.model.scrollSettings.frozenColumns > 0)
                this.addFrozenTemplate();
            this.model.allowGrouping && this.addGroupingTemplate();
            this.model.showSummary && this.addSummaryTemplate();
            if (this.model.allowResizing || this.model.allowResizeToFit)
                this._resizer = new ej.gridFeatures.gridResize(this);
            if (this.model.keySettings)
                $.extend(this.model.keyConfigs, this.model.keySettings);
            
            this._initHeight = this.model.scrollSettings.height;
            if (this.model.scrollSettings.height == "100%")
                this._isHeightResponsive = this.model._isHeightResponsive = true;            
            this.render();
            this._setTextWrap();
            if (this.model.columnLayout == "fixed") {
                var headerTableWidth = this.model.scrollSettings.frozenColumns > 0 ? this.getHeaderTable().eq(0).width() + this.getHeaderTable().eq(1).width() : this.getHeaderTable().width();
                var operation = this.getHeaderContent().width() > headerTableWidth ? 'addClass' : 'removeClass';
                var headerTable = this.getHeaderTable();
                var contentTable = this.getContentTable();
                if (this.model.scrollSettings.frozenColumns > 0) {
                    headerTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getHeaderTable().eq(1) : this.getHeaderTable().eq(0);
                    contentTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getContentTable().eq(1) : this.getContentTable().eq(0);
                }
                headerTable[operation]('e-tableLastCell');
                contentTable[operation]('e-tableLastCell');
            }
            if (this.model.allowGrouping &&  this.model.groupSettings.showDropArea && ej.gridFeatures.dragAndDrop)
                this._headerCellgDragDrop();
            if (this.model.allowReordering && ej.gridFeatures.dragAndDrop) {
                this._headerCellreorderDragDrop();
                this._initIndicators();
            }
            this._wireEvents();
            if (this.model.allowGrouping && !ej.isNullOrUndefined(this.model.serverProperties)) {
                this.model._groupingCollapsed = this.model.serverProperties._groupingCollapsed;
                for (var i = 0; i < this.model._groupingCollapsed.length; i++) {
                    var content = this.getContent().find(".e-recordplusexpand");
                    var tr = content.filter("td[data-ej-mappingname='" + this.model._groupingCollapsed[i].key + "'    ][data-ej-mappingvalue='" + this.model._groupingCollapsed[i].value + "']");
                    if (tr.length > 1 && !ej.isNullOrUndefined(this.model._groupingCollapsed[i].parent)) {
                        var parent = this.model._groupingCollapsed[i].parent;
                        tr = tr.filter(function (e) { return $(this).parents(".e-tabletd").parent("tr").prev("tr").find(".e-recordplusexpand[data-ej-mappingvalue=" + parent + "]").length })
                    }

                    this.expandCollapse(tr);
                }
            }
            this.initialRender = false;
            if (this.model.width && !this.model.allowScrolling)
                this.element.width(this.model.width);
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding)
                this._processEditing();
            if (this.model.mergeHeaderCellInfo != null) {               
                var args = { columnHeaders: this.getHeaderContent().find(".e-columnheader"), model: this.model }, proxy = this;
                this._headerCellMerge(args);
                this._trigger("mergeHeaderCellInfo", args);
            }
            this._trigger("dataBound", {});
			this._trigger("refresh");
            if (this.model.parentDetails) {  //refreshes parent scroller on child expand
                var id = this.model.parentDetails.parentID, parentObj = $("#" + id).data("ejGrid");
                parentObj.model.allowScrolling && parentObj._refreshScroller({ requestType: "refresh" });
            }
            if (this.element.closest('tr').hasClass('e-detailrow') && !this.model.parentDetails) {
                var parentObj = this.element.closest('tr.e-detailrow').closest('.e-grid').data("ejGrid");
                parentObj.model.allowScrolling && parentObj.getScrollObject().refresh();
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "menu") {
                this._renderFilterDialogs();
            }
            if (this.model.enableResponsiveRow && (this.model.allowSorting || this.model.allowFiltering)) {
                this._renderResponsiveFilter();
            }
            if (this.model.allowScrolling)
                this._vRowHeight = Math.floor(this.getRowHeight()); 
            if (this.model.allowGrouping && this.model.showSummary && this.model.currentViewData) {
                this._refreshGroupSummary();
                if (!ej.isNullOrUndefined(this.model.currentViewData) && this.model.currentViewData.length)
                    this._refreshGridFooterColGroup();
            }   
            if (this._isMapSelection)
                this._mappingSelection();
			if (this.model.showColumnChooser)
			    this._renderColumnChooser();
			if (this._enableCheckSelect) {
			    			    if (this.model.currentViewData != null && this.model.currentViewData.length == 0)
                			        this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").hide();
			    			    else
                			        this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").show();
			    			}
        },
        calculatePageSizeByParentHeight: function (containerHeight) {
            if (this.model.allowPaging) {
                if ((this.model.allowTextWrap && this.model.textWrapSettings.wrapMode == "header") || (!this.model.allowTextWrap)) {
                    var pagesize;
                    if (typeof (containerHeight) == "string" && containerHeight.indexOf("%") != -1) {
                        containerHeight = parseInt(containerHeight) / 100 * this.element.height();
                    }
                    var nonContentHeight = this._getNoncontentHeight() + this.getRowHeight();
                    if (parseInt(containerHeight) > nonContentHeight) {
                        var contentHeight = (parseInt(containerHeight) - this._getNoncontentHeight());
                        pagesize = parseInt(contentHeight / this.getRowHeight());
                    }
                    if (ej.isNullOrUndefined(pagesize)) throw "The parent height of grid must be more than 150";
                    else
                        return pagesize;
                }
            }
        },
        _setTextWrap: function () {
            if (this.model.allowTextWrap == true) {
                switch (this.model.textWrapSettings.wrapMode) {
                    case "content":
                        this.element.find(".e-columnheader").removeClass("e-wrap");
                        this.element.removeClass("e-wrap");
                        this.getContent().addClass("e-wrap");
                        break;
                    case "header":
                        this.element.removeClass("e-wrap");
                        this.getContent().removeClass("e-wrap");
                        this.element.find(".e-columnheader").addClass("e-wrap");
                        break;
                    default:
                        this.getContent().removeClass("e-wrap");
                        this.element.find(".e-columnheader").removeClass("e-wrap");
                        this.element.addClass("e-wrap");
                        break;
                }
                if(this.model.scrollSettings.frozenColumns > 0 && this.model.textWrapSettings.wrapMode != "content"){
                    var $frozenTh = this.getHeaderContent().find(".e-frozenheaderdiv").find(".e-columnheader").last().find("th"), $movableTh = this.getHeaderContent().find(".e-movableheader").find(".e-columnheader").last().find("th");
                    $frozenTh.height()> $movableTh.height() ? $movableTh.height($frozenTh.height()) : $frozenTh.height($movableTh.height());
                }
            }
            else {
                if (this.getContent().hasClass("e-wrap")) {
                    this.getContent().removeClass("e-wrap").find(".e-rowcell").removeClass("e-nwrap");
                    this.element.find(".e-columnheader").removeClass("e-wrap").find(".e-headercelldiv").removeClass("e-nwrap");
                    this.element.removeClass("e-wrap");
                }
            }
        },
        _getMetaColGroup: function () {
            var $colgroup = ej.buildTag("colgroup");
            for (var i = 0; i < this.model.columns.length; i++) {
                var $col = $(document.createElement("col"));
                this.model.columns[i]["visible"] === false && $col.css("display", "none");
				if(this.model.rowTemplate!=null && !ej.isNullOrUndefined(this.model.columns[i]["cssClass"]))
					$col.addClass(this.model.columns[i]["cssClass"]);
                if ( this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && $.inArray(this.model.columns[i]["field"], this.model.groupSettings.groupedColumns) != -1)
                    $col.css("display", "none");
                $colgroup.append($col);
            }
            return $colgroup;
        },
        _alternateRow: function () {
            return this.getIndex() % 2 == 0 ? "e-row" : "e-alt_row";
        },
        addInitTemplate: function () {
            var headerCellDiv = !ej.isNullOrUndefined(this.getHeaderTable()) && this.getHeaderTable().find(".e-headercelldiv:not(.e-emptyCell)"), templates = {}, firstVisible = true;
            var tbody = document.createElement('tbody'), $tbody = $(tbody),divElement, rowTemplateID = null;
            if (this.model.rowTemplate == null) {
                var tr = document.createElement('tr'),
                    $tr = $(tr),
                    columns = this.model.columns,
                    i;
                if (this._gridRecordsCount && !this._virtualDataRefresh) {
                    var currentData = this.model.editSettings.showAddNewRow && !this.initialRender ? this.model.currentViewData[1] : this.model.currentViewData[0];
                    if (!ej.isNullOrUndefined(currentData))
                        this._initColumns(currentData);
                }
                else if (this._isLocalData && (this._dataSource() != null && this._dataSource().length || (this._dataManager && this._dataManager.dataSource.json.length)))
                    this._initColumns(this._dataSource()[0] != undefined ? this._dataSource()[0] : this._dataManager.dataSource.json[0]);
                var helpers = { _gridFormatting: this.formatting, getComplexData: ej.getObject };
                $.views.helpers(helpers);

                var viewHelper = {};
                viewHelper["_foreignKey"] = this._foreignKeyBinding; 
                $.views.helpers(viewHelper);

                if (this.model.childGrid || this.model.detailsTemplate ) {
                    var $tdDetailCell = ej.buildTag("td.e-detailrowcollapse", "<div class='e-icon e-gnextforward'></div>");
                    $tr.append($tdDetailCell);
                }
                for (var i = 0; i < this.model.columns.length; i++) {
                    var $tdCell = ej.buildTag("td.e-rowcell");
                    if (!ej.isNullOrUndefined(columns[i]["tooltip"]) || columns[i]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
                        $tdCell.addClass("e-gridtooltip")
                    if (columns[i]["clipMode"] == ej.Grid.ClipMode.Ellipsis || columns[i]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
                        $tdCell.addClass("e-gridellipsis");
                    if (this.model.isResponsive)
                        $tdCell.attr("data-cell", this._decode(this.model.columns[i]["headerText"]));
                    if (columns[i]["visible"] == false)
                        $tdCell.addClass("e-hide");
                    else {
                        if (firstVisible && (this.model.detailsTemplate != null || this.model.childGrid != null))
                            $tdCell.addClass('e-detailrowvisible');
                        firstVisible = false;
                    }
                    !$tdCell.hasClass("e-hide") && !this.model.groupSettings.showGroupedColumn && $tdCell.addClass("{{for ~groupedColumns}}" +
                        " {{if #data == '" + this.model.columns[i]["field"] + "'}}e-hide{{/if}}" +
                        "{{/for}}");
                    if (!ej.isNullOrUndefined(columns[i]["templateID"] || columns[i]["template"])) {
                        var viewHelper = {}, index, htxt = columns[i].headerText;
                        viewHelper["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this, index);
                        $.views.helpers(viewHelper);
                        if(!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
                            htxt = htxt.replace(/[^0-9\s\w]/g,"_");
                        $("#" + this._id + htxt + i + "_Template").remove();
                        var scriptElement = this._createTemplateElement(columns[i]);
                        if ((columns[i].field == "") || ej.isNullOrUndefined(columns[i].field))
                            this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
                        if (columns[i]["template"] != false)
                            $tdCell.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "','" + i + "')}}");
                    } else {
                        var splits = (columns[i].field || "").split("."), sLen = splits.length - 1, braces = "";
                        while (sLen) {
                            braces += "(";
                            sLen--;
                        }
                        var columnType = columns[i].type || columns[i].editType
                        switch (columnType) {
                            case "boolean":
                            case "booleanedit":
                                if (ej.isNullOrUndefined(columns[i].displayAsCheckbox)) columns[i].displayAsCheckbox = true;
                                if (!columns[i]["displayAsCheckbox"])
                                    $tdCell.html("{{if ~getComplexData('"+this.model.columns[i].field+"', #data)}}" + this.localizedLabels.True + '{{else}}' + this.localizedLabels.False + '{{/if}}');
                                else {
                                    var disabled = "";
                                    this.model.editSettings.editMode == "batch" && (ej.isNullOrUndefined(columns[i].allowEditing) || columns[i].allowEditing) ? disabled = disabled : disabled = "disabled='disabled'";
                                    var str = "{{if ~getComplexData('" + this.model.columns[i].field + "', #data)}} <input type ='checkbox' " + disabled + " checked='checked'></input>{{else}} <input type ='checkbox' " + disabled + "></input> {{/if}}";
                                    $tdCell.addClass("e-boolrowcell").html(str);
                                }
                                break;
                            case "checkbox":
                                this._enableCheckSelect = true;
                                this.model.selectionType = "multiple";
                                if(this.model.editSettings.allowDeleting) this.multiDeleteMode = true;
                                this.model.selectionSettings.enableToggle = true;
                                this._isMapSelection = (!ej.isNullOrUndefined(columns[i].field) && (columns[i].field != ""));
                                this._selectionMapColumn = columns[i].field;
                                columns[i]["textAlign"] = "center";
                                if (!this._isMapSelection)
                                    this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
                                $tdCell.addClass("e-checkcell").html("<div class = 'e-checkcelldiv'>{{if #data['" + splits.join("']['") + "']}} <input type ='checkbox' checked='checked'></input>{{else}} <input type ='checkbox'></input> {{/if}}</div>");
                                this.model.columns[i].editType = ej.Grid.EditingType.Boolean;
                                this.model.scrollSettings.frozenColumns > 0 && $tdCell.addClass("e-frozenunbound");
                                this.model.enableAutoSaveOnSelectionChange = false;
                                break;
                            default:
                                if (columns[i].disableHtmlEncode)
                                    $tdCell.html("{{html:" + braces + "#data['" + splits.join("'] || {})['") + "']}}");
                                else
                                    $tdCell.html("{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}");
                        }
                        if (columns[i]["format"] != undefined && (!columns[i]["foreignKeyValue"]))
                            $tdCell.html("{{:~_gridFormatting('" + columns[i]["format"] + "'," + braces + "#data['" + splits.join("'] || {})['") + "'],'" + this.model.locale + "')}}");
                        if (columns[i]["foreignKeyValue"] && columns[i]["dataSource"]) {
                            $tdCell.html("{{:~_foreignKey(" + i + "," + braces + "#data['" + splits.join("'] || {})['") + "'],'" + this._id + "')}}");
                        }
                        if (columns[i]["commands"]) {
                            var viewHelper = {};
                            viewHelper["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
                            $.views.helpers(viewHelper);
                            if ((ej.isNullOrUndefined(columns[i]["field"])) || (columns[i].field == ""))
                                this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
                            if (!ej.isNullOrUndefined(columns[i].headerText))
                            $("#" + this._id + columns[i].headerText.replace(/[^a-z0-9|s_]/gi, '')+ i + "_UnboundTemplate").remove();
                            divElement = this._createUnboundElement(columns[i],i);
                            if (!ej.isNullOrUndefined(columns[i].headerText))
                            $tdCell.addClass("e-unboundcell").addClass("e-" + columns[i]["headerText"].replace(/[^a-z0-9|s_]/gi, '')+i).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                            this.model.scrollSettings.frozenColumns > 0 && $tdCell.addClass("e-frozenunbound");
                            this._isUnboundColumn = true;
                        }

                    }
                    if (columns[i]["textAlign"] == undefined)
                        columns[i]["textAlign"] = "left";
                    if (columns[i]["isPrimaryKey"] === true) {
                        this._primaryKeys.push($.trim(columns[i].field));
                        this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
                    }
                    if (!(this.phoneMode && this.model.enableResponsiveRow) && columns[i]["textAlign"] != undefined) {
                        $tdCell.css("text-align", columns[i]["textAlign"]);
                        $(headerCellDiv[i]).css("text-align", columns[i]["textAlign"]);
                    }
                    if (!this.phoneMode && !ej.isNullOrUndefined(columns[i]["headerTextAlign"])) {
                        $(headerCellDiv[i]).css("text-align", columns[i]["headerTextAlign"]);
                    }
                    if (!ej.isNullOrUndefined(columns[i]["cssClass"])) {
                        $tdCell.addClass(columns[i]["cssClass"]);
                    }
                    if (this.model.allowTextWrap && this.model.textWrapSettings.wrapMode != "header") {
                         if (columns[i]["allowTextWrap"] == false)
                            $tdCell.addClass("e-nwrap");
                    }
                    if (!ej.isNullOrUndefined(columns[i]["priority"]))
                        $tdCell.addClass("e-table-priority-" + columns[i]["priority"]);
                    if (!ej.isNullOrUndefined(columns[i]["customAttributes"]))
                        $tdCell.attr(columns[i]["customAttributes"]);
                    $tdCell.attr("data-role", "gridcell");
                    $tr.append($tdCell);
                    if (this.model.enableAltRow) {
                        helpers["_" + this._id + "AlternateRow"] = this._alternateRow;
                        $.views.helpers(helpers);
                        $tr.addClass("{{:~_" + this._id + "AlternateRow()}}");
                    }
                    else
                        $tr.addClass("e-row");
                    $tr.attr("data-role", "row");
                    if (this.model.scrollSettings.frozenColumns > 0 && this.model.scrollSettings.frozenColumns == i + 1) {
                        tbody.appendChild(tr);
                        templates[this._id + "_JSONFrozenTemplate"] = $tbody.html();
                        $tr.empty();
                        $tbody.empty();
                    }
                }
                tbody.appendChild(tr);
            }
			else {
				var viewHelper = {};
				var scriptRElement = this._createRowTemplateElement(this.model.rowTemplate);
                viewHelper["_" + this._id + "rowTemplating"] = ej.proxy(this._gridRowTemplate,null,this);
                var ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (this.model.rowTemplate.startsWith("#") || this.model.rowTemplate.startsWith(".") || typeof this.model.rowTemplate === "object") ? this.model.ngTemplateId + "gridrowtemplate" : null;                                              
				rowTemplateID = "{{:~_" + this._id + "rowTemplating('" + scriptRElement.id + "','" + ngType +"')}}";
				$.views.helpers(viewHelper);
			}
            templates[this._id + "_JSONTemplate"] = this.model.rowTemplate != null ? rowTemplateID : $tbody.html();
            $.templates(templates);
        },
        
        _gridRowTemplate: function(self,id,type){
			return self._renderEjTemplate("#" + id, this.data,this.index,null,type);
		},
		_createRowTemplateElement: function(templ){
			var tmpl = templ, quickReg = /^#([\w-]*)/,
                match = quickReg.exec(tmpl), scriptReg = /^<script/i, appendTo = appendTo || $("body"), scripEle;

            var options = {
                name: "SCRIPT",
                type: "text/x-template",
                text: tmpl,
               id: (this._id + "RowTemplate").replace(/(\\|[^0-9A-z-_])/g, "")
            };

            if ( match && match[1] )
                scripEle = document.getElementById(match[1]);
            else {
                if (scriptReg.test(tmpl)) // branch here to handle tmpl string with SCRIPT. 
                    scripEle = $(tmpl).get(0);
                else
                    scripEle = ej.buildTag(options.name).get(0);
            }

            scripEle.id = scripEle.id || options.id; 
            scripEle.type = scripEle.type || options.type;
			if(ej.isNullOrUndefined(match))
				$(scripEle).text(options.text);
            appendTo.append(scripEle); 
            return scripEle;
		},        
        render: function () {
            this.model.showSummary = this.model.summaryRows.length > 0 || this.model.showSummary;
            this._renderGridContent().insertAfter(this.element.children(".e-gridheader"));
            this.model.allowResizeToFit && this.setWidthToColumns();
            if (this.model.allowGrouping && ej.gridFeatures.dragAndDrop)
                this._groupHeaderCelldrag();
            if (this.model.showSummary && this._currentJsonData.length) {
                var footer = this._renderGridFooter();
                if (!ej.isNullOrUndefined(footer)) footer.insertAfter(this.getContent());
                this._hideCaptionSummaryColumn();
            }
            this._initialEndRendering();

        },
        _createStackedRow: function (stackedHeaderRow, frozenHeader) {
            var $tr = ej.buildTag('tr.e-columnheader e-stackedHeaderRow');
            var sHeader = [], sCss = [], tAl = [], tp = [];
            for (var c = 0; c < this.model.columns.length; c++) {
                var column = this.model.columns[c];
                if (column.visible != false) {
                    if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && this.model.groupSettings.groupedColumns.length > 0) {
                        if ($.inArray(column.field, this.model.groupSettings.groupedColumns) != -1)
                            continue;
                    }
                    var headerText = '', cssClass = '', txtAlign = '', ttp = "";
                    var sColumn = stackedHeaderRow.stackedHeaderColumns;
                    for (var col = 0; col < sColumn.length; col++) {
                        var _column = $.isArray(sColumn[col].column) ? sColumn[col].column : $.map(sColumn[col].column.split(","), $.trim),
                            className = "e-row" + $.inArray(stackedHeaderRow, this.model.stackedHeaderRows) + "-column" + col;
                        if ($.inArray(column.field, _column) != -1)
                        {
                            headerText = sColumn[col].headerText;
                            cssClass = sColumn[col]["cssClass"];
                            txtAlign = sColumn[col].textAlign;
                            ttp = sColumn[col]["tooltip"] ? " e-gridtooltip " + className : '';
                        }                        
                    }
                    sHeader.push(headerText);
                    sCss.push(cssClass);
                    tAl.push(txtAlign);
                    tp.push(ttp);
                }
            }
            var colsPanList = []
            for (var i = 0; i < sHeader.length; i++) {
                var colSpan = 1;
                for (var j = i + 1; j < sHeader.length; j++) {
                    if (sHeader[i] == sHeader[j]) {
                        colSpan++;
                    }
                    else
                        break;
                }
                colsPanList.push({ sapnCount: colSpan, headerText: sHeader[i], cssClass: sCss[i], txtAlign: tAl[i], tooltip: tp[i] });
                i += colSpan - 1;
            }
            var $tr = ej.buildTag('tr.e-columnheader e-stackedHeaderRow');
            var frzCol = this.model.scrollSettings.frozenColumns;
            if (this.model.allowScrolling && frzCol > 0) {
                var frozenColspanList = [];
                var forzenColumn = 0, index = 0, frzHideCol = 0;
                for (var i = 0; i < this.model.columns.length; i++) {
                    var col = this.model.columns[i];
                    if (i < frzCol && col.visible == false)
                        frzHideCol++;
                }
                forzenColumn = frzCol - frzHideCol;
                while (forzenColumn > 0) {
                    var spanC = colsPanList[index].sapnCount;
                    if (colsPanList[index].sapnCount < forzenColumn) {
                        frozenColspanList.push(colsPanList[index])
                        if (!frozenHeader)
                            colsPanList.splice(index, 1);
                        else
                            index++;
                    }
                    else if (colsPanList[index].sapnCount > forzenColumn) {
                        colsPanList[index].sapnCount = colsPanList[index].sapnCount - forzenColumn
                        if (frozenHeader)
                            frozenColspanList.push({ sapnCount: forzenColumn, headerText: colsPanList[index].headerText });
                    }
                    else {
                        frozenColspanList.push(colsPanList[index])
                        if (!frozenHeader)
                            colsPanList.splice(index, 1);
                    }
                    forzenColumn -= spanC;
                }
                if (frozenHeader)
                    colsPanList = frozenColspanList
            }
            if (this.model.detailsTemplate || this.model.childGrid)
                $tr.append(ej.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
            for (var c = 0; c < colsPanList.length; c++) {
                var $th = ej.buildTag('th.e-headercell e-stackedHeaderCell e-default' + colsPanList[c].tooltip, colsPanList[c].headerText, {}, { 'colspan': colsPanList[c].sapnCount });
                $th.css("textAlign", colsPanList[c].txtAlign);
                $tr.append($th);
                if (colsPanList[c]["cssClass"] != undefined)
                    $th.addClass(colsPanList[c]["cssClass"]);
				if(this.model.allowResizing || this.model.allowReordering || this.model.allowResizeToFit)
                    $th.addClass("e-resizer");
            }
            return $tr;
        },
        _renderGridHeaderInternalDesign: function (columns, frozenHeader) {
            var $table = ej.buildTag('table.e-table', "", {}, { "data-role": "grid" });
            var $thead = ej.buildTag('thead');
            var $tbody = ej.buildTag('tbody.e-hide');
            var $columnHeader = ej.buildTag('tr.e-columnheader');
            var $colGroup = $(document.createElement('colgroup'));
            var $rowBody = $(document.createElement('tr'));
            if (this.model.childGrid || this.model.detailsTemplate ) {
                $columnHeader.append(ej.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
                $rowBody.append(document.createElement('td'));
                $colGroup.append(this._getIndentCol());
            }
            if (this.model.showStackedHeader) {
                for (var index = 0; index < this.model.stackedHeaderRows.length; index++) {
                    var $tr = this._createStackedRow(this.model.stackedHeaderRows[index], frozenHeader);
                    $thead.append($tr);
                }
            }
            for (var columnCount = 0; columnCount < columns.length; columnCount++) {
                var $headerCell = ej.buildTag('th.e-headercell e-default', "", {}, { "data-role": "columnheader" });
                var bodyCell = document.createElement('td');
                var $headerCellDiv = ej.buildTag('div.e-headercelldiv', (columns[columnCount]["headerText"] === undefined && columns[columnCount]["type"] != "checkbox") ? columns[columnCount]["headerText"] = columns[columnCount]["field"] : columns[columnCount]["headerText"], {}, { "data-ej-mappingname": columns[columnCount]["field"] });
                if (columns[columnCount].disableHtmlEncode)
                    $headerCellDiv.text(columns[columnCount]["headerText"]);
                if (!ej.isNullOrUndefined(columns[columnCount]["headerTooltip"]))
                    $headerCellDiv.addClass("e-gridheadertooltip");
                if (!ej.isNullOrUndefined(columns[columnCount]["tooltip"]))
                    $headerCellDiv.addClass("e-gridtooltip");
                if (columns[columnCount]["clipMode"] == ej.Grid.ClipMode.Ellipsis || columns[columnCount]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
                    $headerCellDiv.addClass("e-gridellipsis");
                if(this.model.allowResizing || this.model.allowReordering || this.model.allowResizeToFit)
                        $headerCell.addClass("e-resizer");               
			   $headerCell.append($headerCellDiv);
                if (this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel") &&
                                (columns[columnCount]["allowFiltering"] == undefined || columns[columnCount]["allowFiltering"] === true) && (!ej.isNullOrUndefined(columns[columnCount].field) || columns[columnCount].field == "") && (columns[columnCount]["type"] != "checkbox")) {
                        var filtericon = 'e-filterset';
                    if (!this.initialRender && this.model.filterSettings.filteredColumns) {
                        for (var i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
                            if (this.model.filterSettings.filteredColumns[i].field == columns[columnCount].field) {
                                filtericon = 'e-filterset e-filteredicon e-filternone';
                            }
                        }
                    }
                    $headerCell.append(ej.buildTag('div.e-filtericon e-icon ' + filtericon));
                    if (this.model.allowGrouping && this.model.groupSettings.showToggleButton && $.inArray(columns[columnCount].field, this._disabledGroupableColumns) == -1 && !ej.isNullOrUndefined(columns[columnCount].field) && columns[columnCount].field != "") {
                        $headerCell.addClass("e-headercellgroupfilter");
                        $headerCell.find(".e-filtericon").addClass("e-groupfiltericon");
                    }
                    else
                        $headerCell.addClass("e-headercellfilter");
                    if (ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0" && this.model.enableRTL)
                        $($headerCellDiv).css("padding", "0 0 0 2em");
                }
                var col = document.createElement('col');
                if (columns[columnCount]["priority"])
                    $(bodyCell).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                $rowBody.append(bodyCell);
                $columnHeader.append($headerCell);
                $colGroup.append(col);
                if (columns[columnCount]["visible"] === false) {
					var isdup = columns.filter(function(e){return e.headerText==columns[columnCount].headerText}).length > 1;
                    $headerCell.addClass("e-hide") && $(col).css("display", "none")
                    if (($.inArray(columns[columnCount].headerText, this._hiddenColumns) == -1 || isdup) && $.inArray(columns[columnCount].field, this._hiddenColumnsField) == -1)
                        this._hiddenColumns.push(columns[columnCount].headerText) && columns[columnCount].field != ("" || undefined) ? this._hiddenColumnsField.push(columns[columnCount].field) : this._hiddenColumnsField.push(columns[columnCount].headerText);
                    if ($.inArray(columns[columnCount].field, this._visibleColumnsField) != -1)
                        this._visibleColumnsField.splice($.inArray(columns[columnCount].field, this._visibleColumnsField), 1) && this._visibleColumns.splice($.inArray(columns[columnCount].headerText, this._visibleColumns), 1)
                }
                else {
                    this._visibleColumns.push(columns[columnCount].headerText) && columns[columnCount].field != ("" || undefined) ? this._visibleColumnsField.push(columns[columnCount].field) : this._visibleColumnsField.push(columns[columnCount].headerText);
                    columns[columnCount]["visible"] = true;
                    if ($.inArray(columns[columnCount].field == "" ? columns[columnCount].headerText : columns[columnCount].field, this._hiddenColumnsField) != -1)
                        this._hiddenColumnsField.splice($.inArray(columns[columnCount].field == "" ? columns[columnCount].headerText : columns[columnCount].field, this._hiddenColumnsField), 1) && this._hiddenColumns.splice($.inArray(columns[columnCount].headerText, this._hiddenColumns), 1)
                }
                if (this.model.showColumnChooser && columns[columnCount]["showInColumnChooser"] !== false)
                    columns[columnCount]["showInColumnChooser"] = true;
                if (this.model.allowResizing && columns[columnCount]["allowResizing"] !== false)
                    columns[columnCount]["allowResizing"] = true;
                if (!ej.isNullOrUndefined(columns[columnCount]["headerTextAlign"]))
                    $headerCellDiv.css("text-align", columns[columnCount]["headerTextAlign"]);
                else if (columns[columnCount]["textAlign"] != undefined)
                    $headerCellDiv.css("text-align", columns[columnCount]["textAlign"]);
				else if (this.model.enableRTL)
					$headerCellDiv.css("text-align",columns[columnCount]["textAlign"] = "right");
                columns[columnCount]["allowResizing"] === false && this._disabledResizingColumns.push(columns[columnCount].field);
                columns[columnCount]["allowSorting"] === false && this._disabledSortableColumns.push(columns[columnCount].field);
                columns[columnCount]["allowGrouping"] === false && this._disabledGroupableColumns.push(columns[columnCount].field);
                columns[columnCount]["allowEditing"] === false && this._disabledEditableColumns.push(columns[columnCount].field);
                if (!ej.isNullOrUndefined(columns[columnCount]["cssClass"])) {
                    $headerCell.addClass(columns[columnCount]["cssClass"]);
                    $(col).addClass(columns[columnCount]["cssClass"]);
                }
                if ( this.model.allowTextWrap && this.model.textWrapSettings.wrapMode != "content") {
                     if (columns[columnCount]["allowTextWrap"] == false)
                        $headerCellDiv.addClass("e-nwrap");
                }
                if (!ej.isNullOrUndefined(columns[columnCount]["headerTemplateID"])) {
                    $headerCellDiv.html($(columns[columnCount]["headerTemplateID"]).hide().html()).parent().addClass("e-headertemplate");
                    var index = $.inArray(columns[columnCount].field, this._disabledGroupableColumns);
                    index == -1 && ej.isNullOrUndefined(columns[columnCount].field) && this._disabledGroupableColumns.push(columns[columnCount].field);
                }
                if (ej.getObject("type", columns[columnCount]) == "checkbox" && ej.isNullOrUndefined(columns[columnCount]["headerText"])) {
                    $headerCellDiv.addClass("e-headercheckcelldiv");
                    $headerCellDiv.html("<input type = 'checkbox' class = 'e-checkselectall'></input>");
                    if (!ej.isNullOrUndefined(columns[columnCount].field))
                        $headerCellDiv.attr("data-ej-mappingname", columns[columnCount].field);
                }
                if (this.model.allowGrouping && this.model.groupSettings.showToggleButton && $.inArray(columns[columnCount].field, this._disabledGroupableColumns) == -1 && !ej.isNullOrUndefined(columns[columnCount].field) && columns[columnCount].field != "") {
                    if ($.inArray(columns[columnCount].field, this.model.groupSettings.groupedColumns) != -1)
                        $headerCell.append(this._getToggleButton().addClass("e-toggleungroup"));
                    else
                        $headerCell.append(this._getToggleButton().addClass("e-togglegroup"));
                    if(!filtericon) 
                        $headerCell.addClass("e-headercellgroup");
                    if(this.model.enableRTL) {
                        if(filtericon)
                            $headerCellDiv.addClass("e-headercelldivgroup");
                        else
                            $headerCell.find(".e-gridgroupbutton").addClass("e-rtltoggle");
                    }
                }
                    $headerCell.attr("title", this._decode(columns[columnCount].headerText));
                if (columns[columnCount]["priority"]) {
                    $headerCell.attr("data-priority", columns[columnCount]["priority"]).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                    $(col).addClass("e-table-priority-" + columns[columnCount]["priority"]);
                }
                if (this.initialRender) {
                    var cCount = columnCount, frozenCols = this.model.scrollSettings.frozenColumns;
                    cCount = !frozenHeader ? frozenCols > 0 ? cCount + frozenCols : cCount : cCount;
                    this._columnsPixelConvert(columns[columnCount], cCount);
                }
                if (columns[columnCount]["width"] == undefined && this.model.commonWidth !== undefined)
                    this.columnsWidthCollection[columnCount + this.model.scrollSettings.frozenColumns] = this.model.commonWidth;
                this._fieldColumnNames[columns[columnCount].headerText] = columns[columnCount].field;
                this._headerColumnNames[columns[columnCount].field] = columns[columnCount].headerText;                
            }
            $thead.append($columnHeader);
            $tbody.append($rowBody);
            $table.append($colGroup).append($thead).append($tbody);
            return $table;
        },
        _columnsPixelConvert: function (column, columnIndex) {
            var colIndex;
            var elementWidth = this.model.scrollSettings.width > 0 ? this.model.scrollSettings.width : this.element.width();
            var cols = ej.isNullOrUndefined(column) ? this.model.columns : $.makeArray(column);
            for (var columnCount = 0; columnCount < cols.length; columnCount++) {
                colIndex = columnIndex || columnCount;
                if (typeof (cols[columnCount].width) == "string" && cols[columnCount].width.indexOf("%") != -1 && (this.model.allowScrolling || (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length))){
					var btnSize = (!ej.isNullOrUndefined(this.getContent()) && !ej.isNullOrUndefined(this.getContent().data("ejScroller")) && this.getScrollObject().isVScroll()) ? this.model.scrollSettings.buttonSize : 0;
                    this.columnsWidthCollection[colIndex] = (parseInt(cols[columnCount]["width"]) / 100 * (elementWidth - btnSize));
				}
                else
                    this.columnsWidthCollection[colIndex] = (cols[columnCount]["width"]);
            }
        },
        _renderGridHeader: function () {
            var $div = ej.buildTag('div.e-gridheader'), temp, $frozenDiv, $movableDiv;
            var $innerDiv = ej.buildTag('div');
            if (this.model.allowScrolling)
                $innerDiv.addClass("e-headercontent");
            this.setGridHeaderContent($div);
            if (this.initialRender) {
                this.columnsWidthCollection = [];
                this._hiddenColumns = [];
                this._hiddenColumnsField = [];
            }
            this._visibleColumns = [];
            this._visibleColumnsField = [];
            this._resetDisabledCollections();
            this._fieldColumnNames = {};
            this._headerColumnNames = {};
            if (this.model.scrollSettings.frozenColumns > 0) {
                $frozenDiv = ej.buildTag("div.e-frozenheaderdiv", this._renderGridHeaderInternalDesign(this.model.columns.slice(0, this.model.scrollSettings.frozenColumns), true));
                $movableDiv = ej.buildTag("div.e-movableheader", ej.buildTag("div.e-movableheaderdiv", this._renderGridHeaderInternalDesign(this.model.columns.slice(this.model.scrollSettings.frozenColumns), false)));
                $innerDiv.append($frozenDiv).append($movableDiv);
            } else
                $innerDiv.append(this._renderGridHeaderInternalDesign(this.model.columns));
            $div.html($innerDiv);
            if (this.model.isResponsive)
                $div.addClass("e-textover");
            this.setGridHeaderTable(this.getHeaderContent().find(".e-table"));
            return $div;
        },
        _renderGridContent: function () {
            var $div = ej.buildTag('div.e-gridcontent');
            var $innderDiv = ej.buildTag('div');
            var $table = ej.buildTag('table.e-table', "");
            var $tbody = $(document.createElement('tbody'));
            $table.append(this.getHeaderTable().find('colgroup').clone()).append($tbody);
            $innderDiv.html($table);
            $div.html($innderDiv);
            this.setGridContentTable($table);
            this.setGridContent($div);
            $table.attr("data-role", "grid");
            var args = {};
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length) {
                if (this.initialRender) {
                    args.columnName = this.model.groupSettings.groupedColumns[this.model.groupSettings.groupedColumns.length - 1];
                    if (!this.model.groupSettings.showGroupedColumn) {
                        for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
                            var col = this.model.groupSettings.groupedColumns[i];
                            if ($.inArray(col, this._hiddenColumnsField) == -1) {//updated for
                                this._hiddenColumnsField.push(col);//updated for
                                this._hiddenColumns.push(this.getColumnByField(col).headerText);
                                this._visibleColumns.splice(this._visibleColumns.indexOf(this.getColumnByField(col).headerText), 1);
                                this._visibleColumnsField.splice(this._visibleColumnsField.indexOf(col), 1);
                                this.getColumnByField(col).visible = false;
                            }
                        }
                    }
                }
                args.requestType = ej.Grid.Actions.Grouping;
            } else
                args.requestType = ej.Grid.Actions.Refresh;
            if (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0) {
                var $emptyTd = ej.buildTag('td.emptyrecord', this.localizedLabels.EmptyRecord, {}, { colSpan: (this.model.columns.length - this._hiddenColumns.length)});
                $tbody.append($(document.createElement("tr")).append($emptyTd));
                this.setWidthToColumns();
                if (this.initialRender || this.model.groupSettings.groupedColumns.length)
                    this.sendDataRenderingRequest(args)
            } else
                this.sendDataRenderingRequest(args);
            if (this._isCaptionSummary && args.requestType == "grouping" && this.model.groupSettings.groupedColumns.length > 1) {
                var colgroup = this.getContentTable().find(".e-table").not(".e-recordtable").children("colgroup");
                var $cols1 = $(this.getContentTable().find(".e-recordtable")[0]).children("colgroup").find("col");
                for (var i = 0; i < colgroup.length; i++) {
                    var colCount = $(colgroup[i]).find("col").length;
                    $(colgroup[i]).find("col:gt(" + (colCount - $cols1.length - 1) + ")").remove();
                    $(colgroup[i]).append($cols1.clone());
                }
            }
            return $div;
        },
        
        print: function () {
            var args = {}; args.requestType = "print";
            this._printselectrows = this.getContentTable().find('tr[aria-selected="true"]');            
            this._trigger("actionBegin", args);

            var printWin = window.open('', 'print', "height=452,width=1024,tabbar=no"), $printDiv = ej.buildTag("div#" + this._id), cloneGridModel = $.extend(true, {}, this.model);            
            cloneGridModel.toolbarSettings.showToolbar = cloneGridModel.allowPaging = cloneGridModel.allowScrolling = cloneGridModel.showColumnChooser = cloneGridModel.enablePersistence = false;
            cloneGridModel.editSettings = {};
            cloneGridModel.query.queries = [];
            cloneGridModel._isPrinting = true;
            if (this.model.allowPaging && this.model.pageSettings.printMode == "currentpage") {
                cloneGridModel.query.queries = [{ fn: "onPage", e:{ pageIndex: this._currentPage(), pageSize: this.model.pageSettings.pageSize }}];
                cloneGridModel.dataBound = function () {
                    this._printProcess(printWin);
                }
            }
            else {                
                cloneGridModel.dataBound = function () {
                    this._printProcess(printWin);
                }
            }
            $printDiv.ejGrid(cloneGridModel);

        },
        _printProcess: function (printWin) {
            var elementClone = this.element, args = { requestType: "print", element: elementClone, selectedRows: this._printselectrows };
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                elementClone.find(".e-filterbar").remove();
            elementClone.show();           
            this._trigger("beforePrint", args);
			if (!ej.isNullOrUndefined(args.element))
                elementClone = args.element;
            ej.print(elementClone, printWin);           
            this._trigger("actionComplete", args);
        },
        
         "export": function (action, serverEvent, multipleExport,gridIds) {
           var modelClone = $.extend(true, {}, this.model);
            var proxy = this;
            var attr = { action: action, method: 'post', "data-ajax": "false" };
            var form = ej.buildTag('form', "", null, attr);
            var locale = [];
            if (multipleExport && !ej.isOnWebForms) {
                var gridCol=$('div.e-grid');
                if (gridIds && gridIds.length > 0) {
                    gridCol = $.map(gridIds, function (i) { return document.getElementById(i) })
                }
                $.each(gridCol,function (index, object) {
                        var gridobjectArray = {};
                        var gridObject = $(object).data('ejGrid');
                        locale.push({ id: gridObject._id, locale: gridObject.model.locale });
                        if (!ej.isNullOrUndefined(gridObject)) {
                            var modelClone = $.extend(true, {}, gridObject.model);
                            modelClone = proxy._getExportModel(modelClone);
                            if (gridObject.ignoreOnExport) {
                                var inputAttr = { name: 'GridModel', type: 'hidden', value: gridObject.stringify(modelClone) }
                                var input = ej.buildTag('input', "", null, inputAttr);
                                form.append(input);
                            }
                        }
                    });
                    $('body').append(form);
                    form.submit();
            }
            else {
                this._locale = this.model.locale;
                modelClone = this._getExportModel(modelClone);
                var gridob = this;
                if (ej.raiseWebFormsServerEvents) {
                    var args = { model: modelClone, originalEventType: serverEvent };
                    var clientArgs = { model: this.stringify(modelClone) };
                    ej.raiseWebFormsServerEvents(serverEvent, args, clientArgs);
                    setTimeout(function () {
                        ej.isOnWebForms = true;
                    }, 1000);
                }
                else {
                        var inputAttr = { name: 'GridModel', type: 'hidden', value: this.stringify(modelClone) }
                        var input = ej.buildTag('input', "", null, inputAttr);
                        form.append(input);
                        form.append(this);
                        $('body').append(form);
                        form.submit();
                }
            }
            setTimeout(function () {
                if (locale.length) {
                    for (var i = 0; i < locale.length; i++) {
                        var gridObject = $("#" + locale[i].id).data('ejGrid');
                        gridObject.model.locale = locale[i].locale;
                    }
                }
                if (!ej.isNullOrUndefined(proxy._locale))
                    proxy.model.locale = proxy._locale;
            }, 0);
            form.remove();
            return true;
        },
         _getExportModel: function (modelClone) {
            var tempObj = {}
            $.extend(tempObj, ej.Grid.Locale["en-US"], ej.Grid.Locale[modelClone.locale]);
            var temp = tempObj.GroupCaptionFormat;
            var split1 = temp.indexOf("{{if");
            var split2 = temp.indexOf(" {{else}}");
            var grpText = temp.slice(split1, split2).replace("{{if count == 1 }}", "");
			if(split1 >= 0)
				temp = temp.slice(0,split1);
            var localeProp = { EmptyRecord: tempObj.EmptyRecord, GroupCaptionFormat: temp, GroupText: grpText,True:tempObj.True,False:tempObj.False };
              if (!ej.isNullOrUndefined(this.model))
                this.model.locale = modelClone.locale.concat(JSON.stringify(localeProp));
            modelClone.locale = modelClone.locale.concat(JSON.stringify(localeProp));            
            for (var i = 0; i < modelClone.columns.length; i++) {
                if (!ej.isNullOrUndefined(modelClone.columns[i].template)) {
                    if (modelClone.columns[i].template.indexOf("#") != -1) {
                        var string = $.templates(modelClone.columns[i].template).markup;
                        modelClone.columns[i].template = escape($.trim(string));
                    }
                    else
                       modelClone.columns[i].template = escape(modelClone.columns[i].template);
                }
            }
            if (!ej.isNullOrUndefined(modelClone.detailsTemplate))
                modelClone.detailsTemplate = escape($.trim($.templates(modelClone.detailsTemplate).markup));
            for (var i = 0; i < modelClone.filterSettings.filteredColumns.length; i++) {
                if (modelClone.filterSettings.filteredColumns[i].operator == "equal")
                    modelClone.filterSettings.filteredColumns[i].operator = "equals";
                else if (modelClone.filterSettings.filteredColumns[i].operator == "notequal")
                    modelClone.filterSettings.filteredColumns[i].operator = "notequals";
            }
            if (modelClone.showStackedHeader) {
                modelClone.stackedHeaderRow = modelClone.stackedHeaderRows;
                for (var i = 0; i < modelClone.stackedHeaderRow.length; i++) {
                    modelClone.stackedHeaderRow[i].stackedHeaderColumn = modelClone.stackedHeaderRow[i].stackedHeaderColumns;
                    var a = modelClone.stackedHeaderRow[i].stackedHeaderColumn;
                    for (var j = 0; j < a.length; j++) {
                        modelClone.stackedHeaderRow[i].stackedHeaderColumn[j].column = $.isArray(a[j].column) ? a[j].column : a[j].column.split(',');
                    }
                }
            }
            if (this.ignoreOnExport) {
                for (var i = 0; i < this.ignoreOnExport.length; i++) {
                    delete modelClone[this.ignoreOnExport[i]];
                }
            }
            return modelClone
        },
        sendDataRenderingRequest: function (args) {
            if (this._templateRefresh) {
                this.refreshTemplate();
                this._templateRefresh = false;
            }
            this.setFormat();
            if(!this.model.scrollSettings.enableVirtualization){
				this._previousColumnIndex = null;
				this._previousRowCellIndex = null;
				this._previousIndex = null;
			}
            if (args.requestType == "add" || args.requestType == "grouping" || (this.model.currentViewData != null && this.model.currentViewData.length)) {
                switch (args.requestType) {
                    case ej.Grid.Actions.Refresh:
                    case ej.Grid.Actions.Paging:
                    case ej.Grid.Actions.Sorting:
                    case ej.Grid.Actions.Filtering:
                    case ej.Grid.Actions.Save:
                    case ej.Grid.Actions.Cancel:
                    case ej.Grid.Actions.Delete:
                    case ej.Grid.Actions.Search:
                    case ej.Grid.Actions.Reorder:
                    case ej.Grid.Actions.BatchSave:
                        var cloneGroupedColumns = this.model.groupSettings.groupedColumns
                        if(this.model.allowGrouping && args.requestType == ej.Grid.Actions.Refresh && cloneGroupedColumns.length == 0 && this.element.find(".e-grouptopleftcell").length > 0) {
                            var $header = this.element.children(".e-gridheader");
                            $header.find("div").first().empty().append(this._renderGridHeader().find("table"));
                        }
						if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                            $("#" + this._id + "_externalEdit").css("display", "none");
						if (this.model.allowPaging) {
						    if (this.model.filterSettings.filteredColumns.length)
						        this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount, currentPage: this._currentPage() });
						    else
						        this.getPager().ejPager({ totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount, currentPage: this._currentPage() });
						    this._refreshGridPager();
						}
                        if(!this.model.allowGrouping)
                            cloneGroupedColumns = [];
                        if (cloneGroupedColumns.length == 0) {
                            var temp = document.createElement('div'), temp1, insertIndex = -1, isRemoteAdaptor = false;
                            if (!this.phoneMode)
                                this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
                            (this.model.childGrid != null || this.model.detailsTemplate != null) && this.getContentTable().find("colgroup").first().prepend(this._getIndentCol());
                            var currentPage = this._currentPage();
                            if ((this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "normal") && (args.requestType == "cancel" || args.requestType == "save"))
                                this._editFormHeight = this.element.find(".gridform").closest("tr").height();
     
                            if (this.model.scrollSettings.frozenColumns > 0)
                                temp.innerHTML = this._renderByFrozenDesign();
                            else {                                
                                if (args.data) {
                                    temp1 = document.createElement('div');
                                    temp1.innerHTML = ['<table><tbody>', $.render[this._id + "_JSONTemplate"](args.data), '</tbody></table>'].join("");
                                    if (this._dataSource() instanceof ej.DataManager && args.requestType == ej.Grid.Actions.Save) {
                                        insertIndex = this._getDataIndex(this.model.currentViewData, args.data);
                                        isRemoteAdaptor = this._dataSource().adaptor instanceof ej.remoteSaveAdaptor;
                                    }
                                }
                                var currentData = null;
                                if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization && !ej.isNullOrUndefined(this._currentVIndex) && (args.requestType == "save" || args.requestType == "cancel" || args.requestType == "delete"))
                                    currentData = ej.isNullOrUndefined(this._lastVirtualPage) ? (ej.isNullOrUndefined(this._virtualLoadedRecords[this._currentVIndex]) ? this._virtualLoadedRecords[this._currentVIndex + 1] : this._virtualLoadedRecords[this._currentVIndex]) : this._lastVirtualPage;
                                else
                                    currentData = this.model.currentViewData
                                if (this.model.rowTemplate != null) {
                                    if (args.action == "hideColumn" || args.action == "showColumn")
                                        temp = this.getContent().find("div:first")[0];
                                    else {
                                        temp.innerHTML = ['<table><tbody>', $.render[this._id + "_JSONTemplate"](currentData), '</tbody></table>'].join("");
                                    }
                                } 
                                else
                                    temp.innerHTML = ['<table><tbody>', $.render[this._id + "_JSONTemplate"](currentData), '</tbody></table>'].join("");
                                var tableEle = this.getContentTable().get(0);
                                var tbodyEle = tableEle.lastChild;
                                var rindex = this.getContentTable().first().find('tbody').first(), rowIndex;
                                if ((args.requestType == "save" || args.requestType == "cancel") && this.model.editSettings.editMode != "batch" && !this.model.scrollSettings.allowVirtualScrolling) {
                                    if (this.model.editSettings.editMode.indexOf("inlineform") != -1)
                                        rowIndex = !ej.isNullOrUndefined(args.selectedRow) ? args.selectedRow : this._selectedRow();
                                    else
                                        rowIndex = this.getContentTable().find('.e-' + args.action + 'edrow').index();
                                    var a = this._currentTrIndex;
                                    if (rowIndex == -1)
                                        rowIndex = a;
                                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                                        if (this.model.editSettings.editMode == "inlineform")
                                            var rowTr = $($(tbodyEle.childNodes).not('.e-detailrow')[rowIndex]);
                                        else
                                            var rowTr = $(tbodyEle.childNodes[rowIndex]);
                                        var rowEle = $(tbodyEle.childNodes).not('.e-detailrow');
                                        for (var i = 0; i < rowEle.length; i++) {
                                            if (rowTr.is(rowEle[i]))
                                                rowIndex = i;
                                        }
                                    }
                                    var $oldChild, $editedTr, $newChild;
                                    if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                        if (args.action == "add" && !this.getContentTable().find(".e-addedrow").length) break;
                                        $oldChild = this.getContentTable().find('.e-addedrow').get(0);
                                        $editedTr = this.getContentTable().find('.e-editedrow');
                                        $newChild = ($editedTr.length || args.requestType == "cancel") ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;                       
                                        if ($editedTr.length || (args.requestType == "save" && this._isMapSelection && !ej.isNullOrUndefined(args.checkboxTarget) && this.model.sortSettings.sortedColumns.length > 0)) {
                                            $newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                                $oldChild = $editedTr.prev('tr').get(0);
                                                $editedTr.remove();
                                            } else
                                                $oldChild = $editedTr.get(0);
                                            var $newChildObj = $($newChild), $oldChildObj = $($oldChild);
                                            if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $oldChildObj.next('tr.e-detailrow:visible').length) {
                                                var $target = $newChildObj.find('.e-detailrowcollapse');
                                                $target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                                            }
                                            if (args.requestType == "cancel") {
                                                if (this.model.editSettings.showAddNewRow)
                                                    this.getContentTable().find('.e-addedrow').addClass("e-showaddrow");
                                                $oldChildObj.replaceWith($newChildObj);
                                            } else if (!ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount < this._previousFilterCount) {
                                                if (this.model.detailsTemplate != null && $oldChildObj.next('tr.e-detailrow').length)
                                                    tbodyEle.removeChild($oldChildObj.next('tr.e-detailrow').get(0));
                                                $oldChildObj.remove();
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && cloneGroupedColumns.length == 0)
                                                    tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
                                            } else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount))
                                                this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                                            else {
                                                if (ej.isNullOrUndefined(this.model.currentViewData[rowIndex]) || (this._primaryKeys.length && ej.getObject(this._primaryKeys[0], this.model.currentViewData[rowIndex]) != ej.getObject(this._primaryKeys[0], args.data)))
                                                    $(tbodyEle).replaceWith($(temp).find('tbody'))
                                                else
                                                    tbodyEle.replaceChild($newChild, $oldChild);
                                            }
											if (this.model.editSettings.showAddNewRow)
												this.model.editSettings.rowPosition == "top" ? $(tbodyEle.firstChild).remove(): $(tbodyEle.lastChild).remove();
                                        } else {
                                            var $newChildObj = $($newChild), $oldChildObj = $($oldChild);
                                            if (args.action == "add" && args.requestType == "save" && this.model.editSettings.showAddNewRow && this.model.allowPaging && this.model.pageSettings.pageSize <= this._currentJsonData.length)
                                                this.model.editSettings.rowPosition == "bottom" ? $(tbodyEle.lastChild).previousSibling.remove() : $(tbodyEle.lastChild).remove();
                                            if (args.requestType == "cancel" || this._dataSource() instanceof ej.DataManager || this._currentPage() != 1 || (args.requestType == "save" && !ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount == this._previousFilterCount)) {
                                                if (!ej.isNullOrUndefined($oldChild)) {
                                                    $oldChildObj.remove();
                                                    if (this._dataSource() instanceof ej.DataManager && insertIndex != -1) {
                                                        if (insertIndex == 0)
                                                            tbodyEle.insertBefore($newChild, tbodyEle.children[insertIndex]);
                                                        else
                                                            $newChildObj.insertAfter(tbodyEle.children[insertIndex - 1]);
                                                    }
                                                    else if ((!(this._dataSource() instanceof ej.DataManager) || isRemoteAdaptor) && this._currentPage() != 1 && args.requestType == "save")
                                                        $(tbodyEle).prepend($(temp.firstChild.firstChild.firstChild));
                                                    if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && cloneGroupedColumns.length == 0 &&
                                                        ((this._dataSource() instanceof ej.DataManager && insertIndex == -1 && (!isRemoteAdaptor && args.requestType != "save")) ||
                                                        (args.requestType != "save" && !(this._dataSource() instanceof ej.DataManager))) && (args.requestType == "cancel" && !this.model.editSettings.showAddNewRow))
                                                        tableEle.lastChild.appendChild(temp.firstChild.firstChild.lastChild);
                                                }
                                                if (args.requestType == "cancel" && this._selectedRow() != -1 && !this._enableCheckSelect)
                                                    this.clearSelection();

                                            } else if (this.model.currentViewData.length == 1) {
                                                $(tbodyEle).empty();
                                                tbodyEle.appendChild($newChild);
                                            } else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount) && this.element.find('.gridform').length > 0) {
                                                this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                                            } else if (this.model.editSettings.rowPosition == "bottom" && this.element.find('.gridform').length > 0) {
                                                rindex.prepend($oldChild);
                                                tbodyEle.replaceChild($newChild, $oldChild);
                                            } else
                                                if (!ej.isNullOrUndefined($oldChild))
                                                    tbodyEle.replaceChild($newChild, $oldChild);
                                        }
                                    } else if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
                                        $editedTr = this.element.find('.e-editedrow');
										$oldChild = this.element.find(".e-addedrow").get(0);
                                        if (args.requestType == "cancel" || (!$editedTr.length && !ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount == this._previousFilterCount)) {
                                            $newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            $oldChild = this._excludeDetailRows(tbodyEle.childNodes)[rowIndex];
                                            var $newChildObj = $($newChild), $oldChildObj = $($oldChild);
                                            if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $oldChildObj.next('.e-detailrow:visible').length) {
                                                var $target = $newChildObj.find('.e-detailrowcollapse');
                                                $target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                                            }
                                            $oldChildObj.replaceWith($newChildObj);
                                            if ((args.requestType != "cancel" || this._isAddNew) && !this._enableCheckSelect)
                                                this.clearSelection();
                                            this.model.allowPaging && this._refreshGridPager();

                                        } else if ($editedTr.length) {
                                            $newChild = temp.firstChild.firstChild.childNodes[rowIndex];
                                            $oldChild = this._excludeDetailRows(tbodyEle.childNodes)[rowIndex];
                                            if (this.model.allowCellMerging != null) {
                                                var $oldChildObj = $($oldChild);
                                                if ($($oldChild.childNodes).hasClass("e-merged")) {
                                                    var index = $oldChildObj.children('.e-merged').index();
                                                    var count = $oldChild.children[index].colSpan;
                                                    for (var i = 0 ; i < count; i++) {
                                                        $newChild.childNodes[index + i].className += " e-merged e-hide";
                                                        $newChild.childNodes[index].colSpan = i + 1;
                                                    }
                                                }
                                            }
                                            if (this.model.detailsTemplate != null)
                                                $oldChild = $(tbodyEle.childNodes).not('.e-detailrow').eq(rowIndex).get(0);
                                            if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $oldChildObj.next('tr.e-detailrow:visible').length) {
                                                var $target = $($newChild).find(".e-detailrowcollapse");
                                                $target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
                                            }
                                            if (!ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount < this._previousFilterCount) {
                                                var $oldChildObj = $($oldChild);
                                                if (this.model.detailsTemplate != null && $oldChildObj.next('tr.e-detailrow').length)
                                                    tbodyEle.removeChild($oldChildObj.next('tr.e-detailrow').get(0));
                                                $oldChildObj.remove();
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length)
                                                    tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
                                            } else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount))
                                                this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                                            else {
                                                if (ej.isNullOrUndefined(this.model.currentViewData[rowIndex]) || (this._primaryKeys.length && ej.getObject(this._primaryKeys[0], this.model.currentViewData[rowIndex]) != ej.getObject(this._primaryKeys[0], args.data)))
                                                    $(tbodyEle).replaceWith($(temp).find('tbody'))
                                                else
                                                    tbodyEle.replaceChild($newChild, $oldChild);
                                            }
                                        } else if (this.model.currentViewData.length == 1 && this.getContentTable().find('td.e-rowcell').length == 0) {
                                            $newChild = temp.firstChild.firstChild.firstChild;
                                            $(tbodyEle).empty();
                                            tbodyEle.appendChild($newChild);
                                        } else {
                                            var newChild = ($editedTr.length || args.requestType == "cancel") ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;
                                            if (!(this._dataSource() instanceof ej.DataManager)) {
                                                if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount))
                                                    this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
                                                else if (this._currentPage() == 1)
                                                    this.getContentTable().find('tbody').first().prepend($(newChild));
                                                else
                                                    this.getContentTable().find('tbody').first().prepend($(temp.firstChild.firstChild.firstChild));
                                                if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length)
                                                    tbodyEle.removeChild(tbodyEle.lastChild);
                                            }
                                            else if ((insertIndex != -1) && !ej.isNullOrUndefined($oldChild)){
                                                if (insertIndex == 0)
                                                    tbodyEle.insertBefore(newChild, tbodyEle.children[insertIndex]);
                                                else
                                                    $(newChild).insertAfter(tbodyEle.children[insertIndex - 1]);
                                                var currentDataLength = this._isAddNew && insertIndex ? this.model.currentViewData.length - 1 : this.model.currentViewData.length + 1;
                                                if (this.model.allowPaging && (this.model.pageSettings.pageSize < currentDataLength || insertIndex == this.model.pageSettings.pageSize))
                                                    tbodyEle.removeChild(tbodyEle.lastChild);
                                            }
                                            if (this.model.detailsTemplate != null && $(tableEle.lastChild.lastChild).children('.e-detailrowexpand').length)
                                                tbodyEle.removeChild(tbodyEle.lastChild);
                                        }
                                    }
                                    if (this.model.editSettings.showAddNewRow)
                                        this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray();
                                    else
                                        this._gridRows = tableEle.rows;
                                    if (this.model.enableAltRow)
                                        this._refreshAltRow();
                                } else if (args.requestType == "delete" && !this.model.scrollSettings.allowVirtualScrolling) {
                                    if (this._isUnboundColumn) {
                                        var $editedrow = this.element.find('.e-editedrow');
                                        $oldChild = this.getContentTable().find('.e-editedrow').get(0);
                                        $newChild = ($editedrow.length) ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;

                                        if ($editedrow.length != 0 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")) {
                                            $($oldChild).replaceWith($($newChild));
                                        }
                                        else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
                                            $oldChild = $editedrow.prev('tr').get(0);
                                            $editedrow.remove();
                                        }
                                        else
                                            $oldChild = $editedrow.get(0);
                                    }
                                    if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && this.getContentTable()[0].rows.length != this.model.currentViewData.length) {
                                        if (this.getContentTable().find("tr").length && this._excludeDetailRows().length) {
                                            if (this.multiDeleteMode) {
                                                var rowLength = temp.firstChild.firstChild.rows.length;
                                                var rows = $(temp.firstChild.firstChild.rows).slice(rowLength - this.selectedRowsIndexes.length, rowLength);
                                                $(tbodyEle).append(rows);
                                            }
                                            else
                                                tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);

                                        }
                                        else
                                            $(tbodyEle).prepend(temp.firstChild.firstChild.rows);
                                    }
                                    if (this.model.detailsTemplate != null || this.model.childGrid != null) {
                                        var visibleRow = this.getContentTable().find('.e-detailrow:visible');
                                        $.each(visibleRow, function (indx, item) {
                                            if (visibleRow.eq(indx).closest('tr').prev().children('.e-detailrowexpand').length == 0)
                                                visibleRow.eq(indx).remove();
                                        });
                                    }
                                    this._gridRows = tableEle.rows;
                                    if (this.model.enableAltRow)
                                        this._refreshAltRow();
                                } else
                                    this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);

                            }
                            this._currentJsonData = this.model.currentViewData;
                            if (this.model.editSettings.showAddNewRow)
                                this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray();
                            else
                                this._gridRows = this.getContentTable().get(0).rows;
                            if (this.model.scrollSettings.frozenColumns > 0)
                                this._gridRows = [this._gridRows, this.getContentTable().get(1).rows];

                            var model = {};
                            if ((args.requestType == "sorting" || args.requestType == "filtering" || args.requestType == "save" || args.requestType == "cancel" || args.requestType == "delete" || args.action == "showColumn" || args.action == "hideColumn") && this.model.scrollSettings.allowVirtualScrolling) {
                                if (args.requestType == "filtering") {
                                    this.getContent().first().ejScroller("refresh").ejScroller("isVScroll") ? this.element.find(".gridheader").addClass("e-scrollcss") : this.element.find(".gridheader").removeClass("e-scrollcss");
                                    var model = this._refreshVirtualPagerInfo();
                                }
                                if(this.model.scrollSettings.enableVirtualization)
									this._refreshVirtualView(this._currentVirtualIndex);
								else
									this._refreshVirtualContent(currentPage);
                                args.requestType == "filtering" && this.getContent().first().ejScroller("refresh");
                            }
                            if (args.requestType == "refresh" && (this._singleView || this._getVirtualTotalRecord() < this._virtualRowCount))
                                this._addLastRow();
							if(!this.model.scrollSettings.enableVirtualization)
								this._eventBindings();
                            break;
                        }
                    case ej.Grid.Actions.Grouping:
                        this._group(args);
                        this._refreshStackedHeader();
                        break;
                    case ej.Grid.Actions.BeginEdit:
                        this._edit(args);
                        break;
                    case ej.Grid.Actions.Add:
                        this._add(args);
                        break;
                    case ej.Grid.Actions.Ungrouping:
                        this._ungroup(args);
                        break;
                    case ej.Grid.Actions.VirtualScroll:
						if(!this._isVirtualRecordsLoaded){
							if(!this.model.scrollSettings.enableVirtualization)
								this._replacingContent();
							else
								this._replacingVirtualContent();
						}                        
                        break;
                }
            }
            else if (args.requestType == "reorder" && this.model.groupSettings.groupedColumns.length > 0)
                    this._group(args);
            else {
                if ((ej.isNullOrUndefined(this.model.currentViewData) || this.model.currentViewData.length == 0) && !this.phoneMode) {
                    if (args.requestType == "refresh" && this.model.scrollSettings.frozenColumns == 0) {
                        this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
                        (this.model.childGrid != null || this.model.detailsTemplate != null) && this.getContentTable().find("colgroup").first().prepend(this._getIndentCol());
                    }
                    if((args.requestType == "filtering" ||args.requestType == "cancel" || args.requestType == "refresh") && this.model.scrollSettings.frozenColumns > 0)
                        this._removeFrozenTemplate();
                }
				this._newungroup(args);  
            }
            if (ej.isNullOrUndefined(this.model.currentViewData) || this.model.currentViewData.length == 0)
                this._currentJsonData = [];
            this._showGridLines();
            this._completeAction(args);
        },
        _removeFrozenTemplate: function(){
            this.getContent().find('div').eq(0).empty();
            var $table = ej.buildTag('table.e-table');
            var $tbody = $(document.createElement('tbody'));
            $table.append(this.getHeaderTable().find('colgroup').clone()).append($tbody);
            this.getContent().find('div').eq(0).html($table);
            this.setGridContentTable($table);
        },
        _showGridLines: function () {
            var $lines = this.model.gridLines;
            if ($lines != "both") {
				this.getContent().addClass($lines != "none" ? "e-" + $lines + "lines" : "e-hidelines");
            }
        },
		_showHeaderGridLines: function(){
			var $lines = this.model.gridLines;
			if ($lines != "both") 
				this.getHeaderContent().addClass($lines != "none" ? "e-"+$lines+"lines" : "e-hidelines");
		},
        _newungroup: function (args) {
            if (args.requestType == "ungrouping")
                this._ungroup(args);
            else
                this.getContentTable().find('tbody').empty().first().append(this._getEmptyTbody());
        },
        setFormat: function () {
            var column = [];
            for (var i = 0 ; i < this.model.columns.length ; i++) {
                if (this.model.columns[i].type == "date") {
                    column.push(this.model.columns[i]);
                }
            }
            if (column.length > 0 && !ej.isNullOrUndefined(this.model.currentViewData)) {
                for (var i = 0, len = this.model.currentViewData.length; i < len ; i++) {
                    for (var j = 0 ; j < column.length ; j++) {
                        var data = ej.getObject(column[j].field, this.model.currentViewData[i]);
                        if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(data))
                            ej.createObject(column[j].field, new Date(data), this.model.currentViewData[i]);
                    }
                }
            }
        },
        _completeAction: function (args) {
            if (this.model.editSettings.editMode.indexOf("dialog") != -1 && (args.requestType == "save" || args.requestType == "cancel") && $("#" + this._id + "_dialogEdit").data("ejDialog"))
                $("#" + this._id + "_dialogEdit").ejDialog("close");
            if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal"))
                this.model.isEdit = false;
            this._confirmedValue = false;
            if (ej.Grid.Actions.Grouping == args.requestType && ej.isNullOrUndefined(args.columnName) || args.requestType == "refresh" && this._LastColumnUnGroup) {
                this._LastColumnUnGroup = false;
                return;
            }
            if ((args.columnSortDirection == "ascending" || args.columnSortDirection == "descending") && !ej.isNullOrUndefined(args.columnName)) {
                var scolumn = this.getColumnByField(args.columnName);
                if (this.model.allowSorting && this.model.allowMultiSorting)
                    this._scolumns.push(scolumn.field);
                else
                    this._gridSort = scolumn.field;
            }
            if (args.requestType != 'beginedit' && args.requestType != 'add' && ((!this.model.allowScrolling  || !this.initialRender || this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0) && (!this.model.allowResizeToFit || !this.initialRender)))
                this.setWidthToColumns();
            if (args.requestType == "save" || args.requestType == "cancel" ||  args.requestType == "delete") {
                this._isAddNew = false;
                if (this.model.isResponsive && this.model.minWidth)
                {
                    this._refreshScroller(args);
                    this.windowonresize();
                }
            }
            if (ej.Grid.Actions.Add == args.requestType || args.requestType == "beginedit") {
                for (var count = 0 ; count < this.model.columns.length; count++) {
                    var editorEle = this.element.find('.gridform').first().find(".e-field[name='"+this.model.columns[count].field +"']");
                    if (this.model.columns[count].allowEditing && editorEle.hasClass('e-disable')) {
                        if (this._disabledEditableColumns.indexOf(this.model.columns[count].field) != -1)
                            this._disabledEditableColumns.splice(this._disabledEditableColumns.indexOf(this.model.columns[count].field), 1);
                        editorEle.prop("disabled", false).removeClass("e-disable")
                    }
                    else {
                        if (this.model.columns[count].allowEditing === false && !editorEle.hasClass('e-disable') && $.inArray(this.model.columns[count].field, this._primaryKeys) == -1 && $.inArray(this.model.columns[count].field, this._disabledEditableColumns) == -1) {
                            this._disabledEditableColumns.push(this.model.columns[count].field);
                            editorEle.addClass("e-disable").prop("disabled", true);
                        }
                    }
                }
            }
            if (!this.initialRender && (ej.Grid.Actions.UnGrouping == args.requestType || this.model.groupSettings.groupedColumns.length > 0) && !(args.requestType == "beginedit" || args.requestType == "add"))
                this._recalculateIndentWidth();
            if (ej.Grid.Actions.Paging == args.requestType || ej.Grid.Actions.BatchSave == args.requestType)
                this._refreshGridPager();
            else if ((ej.Grid.Actions.Sorting == args.requestType && this.model.allowSorting) || ej.Grid.Actions.Refresh == args.requestType  || ej.Grid.Actions.Cancel == args.requestType) {
                if (ej.gridFeatures.sort && this.getHeaderTable() !== null)
                    this._sortCompleteAction(args);
                if (this.model.allowPaging) {
                    var pageModel = $.extend({},this.getPager().ejPager("option"));
                    this._currentPage(pageModel.currentPage);
                    delete pageModel.currentPage;
					var template = this.model.pageSettings.template;
                    $.extend(this.model.pageSettings, pageModel);
					this.model.pageSettings.template = template;
                    delete this.model.pageSettings.masterObject;
                    this._refreshGridPager();
                }
				if (!this.initialRender && (this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
                    this._refreshScroller(args);
                
            } else if (ej.Grid.Actions.Delete == args.requestType || ej.Grid.Actions.Save == args.requestType || ej.Grid.Actions.Search == args.requestType) {
                this._editEventTrigger(args);
				if (!this.initialRender && (this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
					this._refreshScroller(args);
                if (this.model.allowPaging)
                    this._refreshPagerTotalRecordsCount();
            } else if (ej.Grid.Actions.Filtering == args.requestType)
                this._filterCompleteAction();
            else if (ej.Grid.Actions.BeginEdit == args.requestType || ej.Grid.Actions.Add == args.requestType)
                this._editCompleteAction(args);
            else if (ej.Grid.Actions.Grouping == args.requestType || ej.Grid.Actions.Ungrouping == args.requestType)
                this["_" + args.requestType + "CompleteAction"](args);
            if (this.model.toolbarSettings.showToolbar || (this._mediaStatus && (this.model.allowSorting || this.model.allowFiltering) && this.model.enableResponsiveRow))
                this.refreshToolbar();
            if (!this.initialRender && this.model.showSummary && this.model.summaryRows.length > 0) {
                if (this.model.currentViewData.length) {
                    if (!this.element.children(".e-gridfooter").length) {
                        var footer = this._renderGridFooter();
                        if (!ej.isNullOrUndefined(footer)) footer.insertAfter(this.getContent());
                    }
                    if (!(args.requestType == "beginedit" || args.requestType == "add")) {
                        this._createSummaryRows(this.getFooterTable());
                        this._refreshGridFooterColGroup();
                    }
                }
                else
                    this.element.children(".e-gridfooter").remove();
            }
            if (!this.initialRender && ej.gridFeatures.selection) {
                if (!this.getContent().find("td.e-selectionbackground").length)
                    this._setCurrentRow(args.requestType);
                if (args.requestType == "cancel" && this.model.selectedRowIndex != -1)
                     $(this.getRowByIndex(this.model.selectedRowIndex)).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
                if (args.requestType != "virtualscroll" && this.clearColumnSelection())
                    $(this.getHeaderTable().find("th.e-headercell")).removeClass("e-columnselection");
            }
            this.refreshBatchEditMode();
            if(this.model.scrollSettings.enableVirtualization && this.model.showColumnChooser && (!this.initialRender && args.requestType == "refresh"))
                this._virtualLoadedRows = {};
            if (!this.initialRender && (this.model.allowScrolling || this.model.isResponsive) && (this._checkScrollActions(args.requestType) || ((this.model.editSettings.editMode.indexOf("inline") != -1 || this.model.editSettings.editMode.indexOf("normal") != -1) && args.requestType == "beginedit")) ||
                (this.model.scrollSettings.virtualScrollMode == "continuous" && args.requestType == "virtualscroll")){
                if(this.model.isResponsive && this.model.minWidth)
                {
                    this._refreshScroller(args);
                    this.windowonresize()
                }
                else
                    this._refreshScroller(args);
            }
            else if (!this.model.scrollSettings.frozenColumns && this.model.allowScrolling && this.element.width() != 0)
                this.refreshScrollerEvent();
             if (!this.initialRender && this.model.parentDetails && !this.model.allowScrolling) {
                var id = this.model.parentDetails.parentID, parentObj = $("#" + id).data("ejGrid");
                parentObj.model.allowScrolling && parentObj._refreshScroller("refresh")
            }
            if (this.model.scrollSettings.virtualScrollMode == "normal" && args.requestType == "virtualscroll")
                this.getContent().find("div:first").scrollLeft(this.getScrollObject().scrollLeft());
            if (this._customPop != null && args.requestType != "sorting") {
                this._customPop.hide();
            }
            !this.initialRender && !this.model.scrollSettings.enableVirtualization && this._addLastRow();
            if (this.model.allowGrouping && this.model.showSummary)
                this._refreshGroupSummary();
            if (ej.Grid.Actions.Refresh == args.requestType && !this.initialRender && this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0)
                this._groupingCompleteAction(args);
            if (ej.Grid.Actions.Refresh == args.requestType && !this.initialRender && this.model.allowGrouping && this.model.groupSettings.groupedColumns.length < 1)
                this._ungroupingCompleteAction(args);
			 if(this.model.allowGrouping){
                var $groupDrop = this.element.children(".e-groupdroparea");
                $groupDrop.length > 0 && $groupDrop.removeClass("e-default").removeClass("e-active");
                if(this.model.groupSettings.groupedColumns.length > 0)
                    $groupDrop.addClass("e-active");
                else
                    $groupDrop.addClass("e-default");
            }
            if (this.model.textWrapSettings)
                this._setTextWrap();
            if (args.requestType == ej.Grid.Actions.Reorder && this.model.showColumnChooser) {
                var dlgObj = $("#" + this._id + "ccDiv").data("ejDialog");
                if (dlgObj.isOpened())
                    $("#" + this._id + "_ccTail").first().remove();
                var ccBtnHeight = 0;
                if (!ej.isNullOrUndefined(this.element.find(".e-ccButton").outerHeight()))
                    ccBtnHeight += this.element.find(".e-ccButton").outerHeight();
                this.element.find(".e-ccButton").first().remove();
                $("#" + this._id + 'ccDiv_wrapper').remove();
                this.element.css('margin-top', (parseInt(this.element.css('margin-top'), 10) - ccBtnHeight));
                this._renderColumnChooser();
            }
            if(!ej.isNullOrUndefined(this._dynamicSelectedRowIndex)){
                this.selectRows(this._dynamicSelectedRowIndex);
             	this._dynamicSelectedRowIndex = null;
            }
            if (this.initialRender && args.requestType == "grouping")
                args = { requestType: "refresh" };
            if(!((this._isUngrouping || this._columnChooser  ) && ( args.requestType == "refresh") ) ){
				this._trigger("actionComplete", args);
				this._isUngrouping = false;
				this._columnChooser = false;
			}
            if ((!this._isUngrouping && !this.initialRender) || this._showHideColumns || this._columntemplaterefresh)
            this._trigger("refresh");
            if ((this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")) {
                
                if (!this.initialRender && this.getContentTable().find("tr.e-addedrow").length == 0 && this.element.find(".e-gridcontent").find("tr").length != 0)
                    this._startAdd();
                 if (args.requestType == "searching")
                    this.element.find(".e-gridtoolbar").find("li#" + this._id + "_search input").focus();
            }
            
            if ((ej.Grid.Actions.BeginEdit == args.requestType || ej.Grid.Actions.Add == args.requestType) && $.isFunction($.validator))
                this.setValidation();
            if (!this.initialRender)
                this.model._groupingCollapsed = [];
            if (this._updateDataSource && this._gridRecordsCount) {
                var currentData = this.model.editSettings.showAddNewRow ? this.model.currentViewData[1] : this.model.currentViewData[0];
                if (!ej.isNullOrUndefined(currentData)) {
                    this._initColumns(currentData);
                    this.model.allowFiltering && this._renderFilterDialogs();
                    this._updateDataSource = false;
                }
            }
		    if (this.model.columnLayout == "fixed" && !this.model.isEdit)
		        this.setWidthToColumns();
		    if (this.model.allowRowDragAndDrop)
		        this._rowsDragAndDrop();
		    if (!this.initialRender && this._enableCheckSelect) {
		        var indexes = this.checkSelectedRowsIndexes[this._currentPage() - 1];
		        var headerCheckCell = this.getHeaderTable().find(".e-headercheckcelldiv .e-checkselectall");
		        if (!this._selectAllCheck && !(this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && [].concat.apply([], this.checkSelectedRowsIndexes).length >= this._gridRecordsCount))
					headerCheckCell.prop("checked", false);
		        if (!this._isMapSelection && indexes && indexes.length > this._gridRows.length && !this.model.scrollSettings.enableVirtualization)
		            indexes.splice(this._gridRows.length, indexes.length - this._gridRows.length);
		        if (this._isMapSelection)
		            this._mappingSelection();
		        else if (args.requestType != "paging" && args.requestType != "save" && args.requestType != "cancel" && args.requestType != "virtualscroll")
		            this.checkSelectedRowsIndexes = [];
		        else if (indexes && indexes.length && !this.model.scrollSettings.enableVirtualization && !this.model.scrollSettings.allowVirtualScrolling)
		            this.selectRows(indexes);
		        if (this.model.currentViewData != null && this.model.currentViewData.length == 0)
		            this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").hide();
		        else
                    this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").show();
		        if (this._selectAllCheck) { // For Selection using header after filtering
		            var selectAll = headerCheckCell.prop("checked") ^ this.selectedRowsIndexes.length == this.model.currentViewData.length;
		            headerCheckCell[0].checked = !selectAll ? !headerCheckCell[0].checked : headerCheckCell[0].checked;
		        }
		    }
        },        
        _getDataIndex: function (data, item) {
            var flag = 0, _plen;
            for (var d = 0, len = data.length; d < len; d++) {
                for (var key = 0, _plen = this._primaryKeys.length; key < _plen; key++) {
                    if (!this._checkPrimaryValue(data[d][this._primaryKeys[key]], item[this._primaryKeys[key]], this._primaryKeys[key])) {
                        if (key == _plen - 1)
                            flag = 1;
                        continue;
                    }
                    else
                        break;
                }
                if (flag) return d;
            }
            return -1;
        },
        _checkPrimaryValue: function (keyData, keyItem, field) {
            var col = this.getColumnByField(field),
            type = ej.isNullOrUndefined(col.foreignKeyField) ? col.type : col.originalType;
            if (type == "string")
                keyData = keyData.trim();
            if (keyData != keyItem)
                return true;
            else
                return false;
        },
        _eventBindings: function () {
            var rowLength = this.model.scrollSettings.frozenColumns > 0 ? this._gridRows[0].length : this._gridRows.length;
            var trIndex = 0;
            var prev;
            var pageSize = this.model.pageSettings.pageSize;
            if (ej.gridFeatures.common)
                this._refreshUnboundTemplate(this.getContentTable());
            if (this._gridRecordsCount != 0) {
                if (this.model.queryCellInfo != null || this.model.rowDataBound != null || this.model.mergeCellInfo != null || this.model.templateRefresh != null) {
                    for (var row = 0; row < rowLength; row++) {
                        var rowIndex = null, trIndex = row, viewIndex, viewData;
                        if (this.model.scrollSettings.allowVirtualScrolling && row < pageSize) {
							if(!this.model.scrollSettings.enableVirtualization){
								for (var i = 0; i < this._cloneQuery.queries.length; i++)
									prev = this._cloneQuery.queries[i].fn == "onPage" &&  this._cloneQuery.queries[i].e.pageIndex - 1;
								var value = pageSize * prev; 
								if (value != 0) {
									rowIndex = this.getContentTable().find("tr[name=" + value + "]").eq(row);
									trIndex = rowIndex.index();
								}
							}
							else{
								rowIndex = $(this._gridRows).eq(row);
								viewIndex = parseInt($(rowIndex).attr("name"), 32);	
								if($.inArray(viewIndex, this._queryCellView) != -1)		
									continue;
								if(this._virtualLoadedRecords[viewIndex])
									viewData = this._virtualLoadedRecords[viewIndex][row % this._virtualRowCount];
								trIndex = viewIndex * this._virtualRowCount + (row % this._virtualRowCount);								
							}
                        }
						else if(this.model.scrollSettings.enableVirtualization)
							rowIndex = $(this._gridRows).eq(row);
                        rowIndex = rowIndex || this.getRowByIndex(trIndex);
                        if (rowIndex.hasClass("e-virtualrow") || ej.isNullOrUndefined(this._currentJsonData[row] || viewData))
                            break;
						var rowData = (this.model.scrollSettings.enableVirtualization && !ej.isNullOrUndefined(viewData)) ? viewData : this._currentJsonData[row];
                        this._rowEventTrigger(rowIndex, rowData);                       
                    }
                }
            }
        },
        _rowEventTrigger: function (row, data) {
            var args = { row: row, data: data, rowData: data };
            this._trigger("rowDataBound", args);
            var tdCells = row.cells;
            var $tdRowcells = $(row).find(".e-rowcell");
            if (this.model.queryCellInfo != null || this.model.mergeCellInfo != null || this.model.templateRefresh != null) {
                for (var cellIndex = 0; cellIndex < $tdRowcells.length; cellIndex++) {
                    var args = { cell: $tdRowcells[cellIndex], data: data, rowData: data, text: $tdRowcells[cellIndex].innerHTML };
                    var foreignKeyData = this._getForeignKeyData(args.data);
                    if ($($tdRowcells[cellIndex]).hasClass("e-rowcell"))
                        args.column = this.model.columns[cellIndex];
                    if (!ej.isNullOrUndefined(foreignKeyData))
                        args.foreignKeyData = foreignKeyData;
                    if (this.model.allowCellMerging == true) {
                        this._cellMerging(args);
                        this._trigger("mergeCellInfo", args);
                    }
                    this._trigger("queryCellInfo", args);
                    if ($($tdRowcells[cellIndex]).hasClass("e-templatecell")) {
                        var args = { cell: $tdRowcells[cellIndex], column: this.model.columns[cellIndex], data: data, rowData: data, rowIndex: $(row).index() };
                        this._trigger("templateRefresh", args);
                    }
                }
            }

        },

        setWidthToColumns: function () {
            var $cols1 = this.getContentTable().children("colgroup").find("col");
            var $cols2 = this.getHeaderTable().children("colgroup").find("col");
            var extendWidth = 0, colsIndex = [], columnsWidth;
            var undefinedColsCollection = [], hCellIndex;
            var width = this.element.width(), frozenWidth = 0, columnsTotalWidth = 0, finalWidth = 0, browserDetails = !ej.isIOSWebView() && this.getBrowserDetails();
            if (this.model.groupSettings.groupedColumns.length && !this.model.allowScrolling && this.model.groupSettings.showGroupedColumn) {
                if (browserDetails && browserDetails.browser == "msie" && parseInt(browserDetails.version, 10) > 8)
                    $cols1.first().css("width", ((30 / width) * 100) + "%");
            }
            if (!ej.isNullOrUndefined(this.model.detailsTemplate)) {
                var headerIndx = this.model.groupSettings.groupedColumns.length;
                var contentIndx = this.model.groupSettings.groupedColumns.length != 0 ? 1 : 0;
                $cols1.eq(contentIndx).css("width", this._detailsOuterWidth);
                $cols2.eq(headerIndx).css("width", this._detailsOuterWidth);
            }
            this._detailColsRefresh();
            $cols1 = this._$headerCols;
            $cols2 = this._$contentCols;
            if (this.model.allowResizeToFit) {
                var visibleColumnsWidth = 0; var undefinedWidthColumnsCount = 0;
                for (j = 0; j < this.model.columns.length; j++) {
                    if (this.model.columns[j].visible) {
                        if (this.model.columns[j]["width"] != undefined)
                            visibleColumnsWidth = visibleColumnsWidth + parseInt(this.model.columns[j]["width"]);
                        else
                            undefinedWidthColumnsCount = undefinedWidthColumnsCount + 1;
                    }
                }
            }
            for (var i = 0; i < $cols2.length; i++) {
                if (this.model.allowResizeToFit && this.model.columns[i]["width"] === undefined) {
                    hCellIndex = this.model.groupSettings.groupedColumns.length ? (i + this.model.groupSettings.groupedColumns.length) : i;
                    var contentWidth = this._resizer._getContentWidth(i);
                    var cellDiv = this.getHeaderTable().find('.e-headercelldiv').eq(hCellIndex);
                    var headerWidth = this._resizer._getHeaderContentWidth(cellDiv);
                    if (this.model.editSettings.editMode == "normal" && (this.model.isEdit || this._isAddNew))
                        finalWidth = browserDetails.browser == "firefox" ? parseInt($cols1[i].style.width, 10) : $cols1.eq(i).width();
                    else if (undefinedWidthColumnsCount > 0) {
                        columnsWidth = finalWidth = this.model.columns[i].visible ? parseInt(this.element.width() - visibleColumnsWidth) / undefinedWidthColumnsCount : 0;
                    }
                    if ((finalWidth < contentWidth && finalWidth < headerWidth) && undefinedWidthColumnsCount > 0) {
                        finalWidth = contentWidth > headerWidth ? contentWidth : headerWidth;
                        finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
                        visibleColumnsWidth += finalWidth;                       
                        undefinedWidthColumnsCount -= 1;
                        this.columnsWidthCollection[i] = finalWidth;
                        columnsTotalWidth += this.model.columns[i].visible ? finalWidth : 0;
                        extendWidth += finalWidth - columnsWidth;
                    }
                    else if (undefinedWidthColumnsCount > 0 && ((contentWidth >= 0 && this.model.columns[i].visible )|| (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0))) {
                        var cWidth = contentWidth > headerWidth ? contentWidth : headerWidth;
                        if (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0) {
                            if (cWidth > finalWidth) {
                                finalWidth = cWidth;
                                finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
                            }
                        }
                        else {
                            if (cWidth > finalWidth || (this.element.width() / undefinedWidthColumnsCount < visibleColumnsWidth-finalWidth && !this.model.allowTextWrap)) {
                                finalWidth = cWidth;
                                finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
                            }
                        }
                        if (this.model.columns[i].visible) {
                            visibleColumnsWidth += finalWidth;
                            undefinedWidthColumnsCount -= 1;
                        }
                        if(columnsWidth < contentWidth || columnsWidth < headerWidth) {
                            extendWidth += finalWidth - columnsWidth;
                        }
                        else
                            colsIndex.push({ index : i, contentWidth : contentWidth, headerWidth : headerWidth });
                        this.columnsWidthCollection[i] = finalWidth;
                        columnsTotalWidth += this.model.columns[i].visible ? finalWidth : 0;
                    }
                } else {
                    if (typeof (this.model.columns[i].width) == "string" && this.model.columns[i].width.indexOf("%") != -1) {
                        this._columnsPixelConvert(this.model.columns[i],i);
                    }
                    else
                        var columnWidth = parseInt(this.model.columns[i]["width"], 10);
                    columnsTotalWidth += this.model.columns[i].visible ? columnWidth : 0;
                }
                if (this.model.columns[i]["priority"])
                    $cols2.eq(i).addClass("e-table-priority-" + this.model.columns[i]["priority"]);
                if (!ej.isNullOrUndefined(this.columnsWidthCollection[i])) {
                    $cols1.eq(i).width(this.columnsWidthCollection[i]);
                    $cols2.eq(i).width(this.columnsWidthCollection[i]);
                } else if (this.model.allowScrolling) {
                    undefinedColsCollection.push(this.model.columns[i]);
                }
            }
            var colsIndexLength = colsIndex.length;
             for (var i = 0; i < colsIndexLength; i++) { 
				var cellDiv = this.getHeaderTable().find('.e-headercelldiv').eq(colsIndex[i].index);
				var paddingWidth = parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
                extendWidth = extendWidth / colsIndexLength;
                if(this.columnsWidthCollection[colsIndex[i]["index"]] > extendWidth) {      
                  if(this.columnsWidthCollection[colsIndex[i]["index"]] - extendWidth > colsIndex[i]["headerWidth"] && this.columnsWidthCollection[colsIndex[i]["index"]] - extendWidth > colsIndex[i]["contentWidth"] ) {        
                    $cols1.eq(colsIndex[i]["index"]).width(this.columnsWidthCollection[colsIndex[i]["index"]] - extendWidth);
                    $cols2.eq(colsIndex[i]["index"]).width(this.columnsWidthCollection[colsIndex[i]["index"]]- extendWidth);
                  }
                  else {
                      if(colsIndex[i]["headerWidth"] > colsIndex[i]["contentWidth"]) {
                        $cols1.eq(colsIndex[i]["index"]).width(colsIndex[i]["headerWidth"] + paddingWidth);
                        $cols2.eq(colsIndex[i]["index"]).width(colsIndex[i]["headerWidth"] + paddingWidth);
                    }
                    else {
                        $cols1.eq(colsIndex[i]["index"]).width(colsIndex[i]["contentWidth"] + paddingWidth);
                        $cols2.eq(colsIndex[i]["index"]).width(colsIndex[i]["contentWidth"] + paddingWidth);
                    }
                  }                  
                }
                else {
                     if(colsIndex[i]["headerWidth"] > colsIndex[i]["contentWidth"]) {
                        $cols1.eq(colsIndex[i]["index"]).width(colsIndex[i]["headerWidth"] + paddingWidth);
                        $cols2.eq(colsIndex[i]["index"]).width(colsIndex[i]["headerWidth"] + paddingWidth);
                    }
                    else {
                        $cols1.eq(colsIndex[i]["index"]).width(colsIndex[i]["contentWidth"] + paddingWidth);
                        $cols2.eq(colsIndex[i]["index"]).width(colsIndex[i]["contentWidth"] + paddingWidth);
                    }
                }
				if(this.columnsWidthCollection[colsIndex[i]["index"]] > extendWidth)
                this.columnsWidthCollection[colsIndex[i]["index"]] = this.columnsWidthCollection[colsIndex[i]["index"]] - extendWidth;
            }
            var hiddenColLength = undefinedColsCollection.filter(function (e) { return !e.visible }).length;
            var headercell = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell");
            var totalColWidth = ej.sum(this.columnsWidthCollection);
            for (var i = 0; i < undefinedColsCollection.length; i++) {
                if (!undefinedColsCollection[i].visible)
                    continue;
                var colIndex = !ej.isNullOrUndefined(undefinedColsCollection[i].field) && undefinedColsCollection[i].field != "" ? this.getColumnIndexByField(undefinedColsCollection[i].field) : this.getColumnIndexByHeaderText(undefinedColsCollection[i].headerText);
                var cell = headercell.eq(colIndex)[0];
                var colWidth;
                if (!ej.isNullOrUndefined(this.model.commonWidth))
                    colWidth = this.model.commonWidth;
                else {
                    var gridWidth = typeof (this.model.scrollSettings.width) == "string" ? this.element.width() : this.model.scrollSettings.width || this.model.width;
                    var cellWidth = (gridWidth - totalColWidth) / (undefinedColsCollection.length - hiddenColLength);
                    colWidth = !this.model.scrollSettings.frozenColumns ? cell.getBoundingClientRect().width : cellWidth;
                }
                if (ej.isNullOrUndefined(colWidth))
                    colWidth = cell.offsetWidth;
                if (parseInt(colWidth) < 15) {
                    colWidth = (width / this.model.columns.length).toFixed(2);
                    var bSize = (width / (this.model.scrollSettings.buttonSize || 18) / 100).toFixed(2);
                    colWidth = colWidth - bSize;
                }
                $cols1.eq(colIndex).css("width", colWidth + "px");
                $cols2.eq(colIndex).css("width", colWidth + "px");
                this.model.columns[colIndex].width = colWidth;
                this.columnsWidthCollection[colIndex] = parseFloat(colWidth);
            }
            if (!hiddenColLength)
                this._undefinedColsCollection = null;
            if (this.model.columnLayout == "fixed") {
                if (this.model.scrollSettings && this.model.scrollSettings.frozenColumns == 0) {
                    this.getHeaderTable().width(columnsTotalWidth);
                    this.getContentTable().width(columnsTotalWidth);
                    if(!ej.isNullOrUndefined(this.getFooterTable()))
                        this.getFooterTable().width(columnsTotalWidth);
                }
                var headerTableWidth = this.model.scrollSettings.frozenColumns > 0 ? this.getHeaderTable().eq(0).width() + this.getHeaderTable().eq(1).width() : this.getHeaderTable().width();
                var operation = this.getHeaderContent().width() > headerTableWidth ? 'addClass' : 'removeClass';
                var headerTable = this.getHeaderTable();
                var contentTable = this.getContentTable();
                if (this.model.scrollSettings.frozenColumns > 0) {
                    headerTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getHeaderTable().eq(1) : this.getHeaderTable().eq(0);
                    contentTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getContentTable().eq(1) : this.getContentTable().eq(0);
                }
                headerTable[operation]('e-tableLastCell');
                contentTable[operation]('e-tableLastCell');
            }
            if (!this.model.allowScrolling && this.model.allowResizeToFit && ej.isNullOrUndefined(this.model._isPrinting) && !this.model.isResponsive && columnsTotalWidth > width) {
                this.model.allowScrolling = true;
                this.model.scrollSettings.width = width;
                this.getHeaderTable().parent().addClass("e-headercontent");
                this._renderScroller();
            }
            if (this.model.isEdit) {
                var clonedCol = $cols1.clone();
                var editedTr;
                if (this.model.editSettings.showAddNewRow)
                    editedTr = this.getContentTable().find(".e-editedrow");
                var $colGroup = this.model.scrollSettings.frozenColumns > 0 ? this.getContent().find(".gridform").find("colgroup") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr.find("colgroup") : $("#" + this._id + "EditForm").find("colgroup");
                this.model.scrollSettings.frozenColumns > 0 && $colGroup.first().empty().append(clonedCol.splice(0, this.model.scrollSettings.frozenColumns));
                $colGroup.last().empty().append(clonedCol);
                if (this.model.detailsTemplate != null || this.model.childGrid != null)
                    $colGroup.prepend(this._getIndentCol());
            }
            if (this.model.groupSettings.groupedColumns.length) {
                var $grouedColGroup = this.getContentTable().find(".e-recordtable").children("colgroup");
                for (var i = 0; i < $grouedColGroup.length; i++) {
                    var clonedCol = $cols1.clone();
                    var detailsWidth = this._detailsOuterWidth != null ? this._detailsOuterWidth : "30px";
                    if (this.model.detailsTemplate != null || this.model.childGrid != null) clonedCol.splice(0, 0, $(this._getIndentCol()).width(detailsWidth)[0]);
                    $grouedColGroup.eq(i).empty().append(clonedCol);
                }
            }
            if (this.model.scrollSettings.frozenColumns > 0) {
                var totalWidth = 0, frozenWidth;
                for (var i = 0; i < this.model.columns.length; i++) {
                    totalWidth += this.model.columns[i].visible ? parseFloat(this.columnsWidthCollection[i], 10) : 0;
                    if (this.model.scrollSettings.frozenColumns - 1 == i)
                        frozenWidth = Math.ceil(totalWidth);
                }
                this.element.width(this.model.scrollSettings.width || this.model.width);
                var gridContentWidth = this.element.find(".e-gridcontent").children().first().width();
                if (gridContentWidth > totalWidth)
					totalWidth = gridContentWidth + ((this.getContentTable().height() < this.model.scrollSettings.height && (!ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject()._vScroll : false)) ? this.model.scrollSettings.buttonSize : 0);
                else
                    totalWidth += ((this.getContentTable().height() > this.model.scrollSettings.height) ? this.model.scrollSettings.buttonSize : 0);
                if (totalWidth < this.element.width()) {
                    totalWidth = "100%";
                }
                var finalcolWidth = typeof (totalWidth) == "string" && totalWidth.indexOf("%") != -1 ? totalWidth : totalWidth - frozenWidth;
                this.getContent().find(".e-frozencontentdiv").outerWidth(frozenWidth)
                    .end().find(".e-movablecontentdiv").outerWidth(finalcolWidth);
                this.getHeaderContent().find(".e-frozenheaderdiv").outerWidth(frozenWidth)
                    .end().find(".e-movableheaderdiv").outerWidth(finalcolWidth);
                if (this.getFooterContent())
                    this.getFooterContent().find(".e-frozenfooterdiv").outerWidth(frozenWidth)
                        .end().find(".e-movablefooterdiv").outerWidth(finalcolWidth);
            }
            if(!this.initialRender && this.model.allowResizeToFit && this.model.allowScrolling && this.model.scrollSettings.enableVirtualization ){			
               var width = this.getHeaderTable().width() > this.getContentTable().width() ? this.getHeaderTable().width() : this.getContentTable().width();
                if(!ej.isNullOrUndefined(this.getFooterTable()))
                    this.getFooterTable().width(width);
			}
        },
        _initialEndRendering: function () {
            // use this method to add behaviour after grid render.
            if (this.model.allowRowDragAndDrop)
                this._rowsDragAndDrop();
            if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
                if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate")
                    this.element.append(this._renderDialog());
                else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
                    this.element.append(this._renderExternalForm());
            }
            
            (this.model.editSettings.editMode == "batch" || this.model.editSettings.showDeleteConfirmDialog) && this._renderConfirmDialog();
            (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) && $("#" + this._id + 'AlertDialog').length == 0 && this._renderAlertDialog();
            if (this.model.allowMultiSorting || this.model.selectionType == "multiple")
                this._renderMultiTouchDialog();
            if (this.model.scrollSettings.frozenColumns > 0 && !this.model.allowScrolling) {
                this.getContent().remove();
                this.getHeaderTable().eq(1).remove();
                this._alertDialog.find(".e-content").text(this.localizedLabels.FrozenColumnsScrollAlert);
                this._alertDialog.ejDialog("open");
                return;
            }
            this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization && this._createPagerStatusBar();
            if (this.model.allowScrolling) {
                this._getRowHeights();    
            }
            if (this.element.width() != 0 && this.element.is(":visible") && this.model.allowScrolling) {
                this._renderScroller();
                if (!(this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0)) {
                    this.setWidthToColumns();
                    var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
                    scrollObj != null && scrollObj.refresh();
					this._isHscrollcss();
                    this.refreshScrollerEvent();
                    this._scrollFooterColgroup(true);
                }
            }
            else if ((this.model.allowScrolling || (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length)) && (this.element.width() <= 0 || !this.element.is(":visible"))) {
                var proxy = this, myVar = setInterval(function () {
                    if (!ej.isNullOrUndefined(proxy.element) && proxy.element.width() > 0 && !ej.isNullOrUndefined(proxy.element.width()) && proxy.element.is(":visible")) {
                        if (proxy.model.allowScrolling) {
                            proxy._renderScroller();
                            if (!(proxy.model.scrollSettings.frozenRows > 0 || proxy.model.scrollSettings.frozenColumns > 0)) {
                                proxy.setWidthToColumns();
                                var scrollObj = !ej.isNullOrUndefined(proxy.getContent().data("ejScroller")) ? proxy.getScrollObject() : null;
                                scrollObj != null && scrollObj.refresh();
                                proxy._isHscrollcss();
								proxy._addLastRow();
                                proxy.refreshScrollerEvent();
                            }
                        }
                        if (proxy.model.allowGrouping && proxy.model.groupSettings.groupedColumns.length && proxy.getHeaderTable().find(".e-grouptopleftcell").width() <= 0)
                            proxy.getHeaderTable().find(".e-grouptopleftcell").css('width', proxy.getHeaderTable().find('colgroup col').eq(0).width());
                        proxy._endRendering();
                        clearInterval(myVar);
                    }
                }, 100);
                return;
            }
           this._endRendering();
        },

        _scrollFooterColgroup: function (initialfooter) {
            if(ej.isNullOrUndefined(initialfooter))
            {
				if (this.model.scrollSettings.frozenColumns > 0 && !this.getFooterTable().find("colgroup").length) 
                {
                    this.getFooterTable().eq(0).append(this.getHeaderTable().eq(0).find("colgroup").clone());
                    this.getFooterTable().eq(1).append(this.getHeaderTable().eq(1).find("colgroup").clone());
                }
                if(!this.getFooterTable().find("colgroup").length)
                    this.getFooterTable().append(this.getHeaderTable().find("colgroup").clone());
                else
                    this.getFooterTable().find("colgroup").first().replaceWith(this.getHeaderTable().find("colgroup").clone());                
            }
            var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
            if(scrollObj && scrollObj.isVScroll() && !ej.isNullOrUndefined(this.getFooterContent()))
            {
                this.getFooterContent().find("colgroup").append("<col style='width : " + this.model.scrollSettings.scrollerSize + "px'></col>");
                if(!this.getFooterContent().find("tr.e-gridSummaryRows td.e-scrollindent").length)
                this.getFooterContent().find("tr.e-gridSummaryRows").append("<td class='e-scrollindent'></td>");
            }
        },

        _endRendering: function () {
            if (!ej.isNullOrUndefined(this.model.serverProperties)) {
                var chkIndexes = this.model.serverProperties._checkSelectedRowsIndexes;
                this.checkSelectedRowsIndexes = chkIndexes && chkIndexes.length ? chkIndexes : this.checkSelectedRowsIndexes;
            }
            if (!ej.isNullOrUndefined(this.getContent().data("ejScroller")) && this.model.allowScrolling)
                var scroller = this.getScrollObject();
            var css = this.model.enableRTL ? "e-summaryscroll e-rtl" : "e-summaryscroll";
            if (this.model.allowScrolling && this.model.showSummary) {
                if(scroller._vScroll)
                    this.element.find(".e-summaryrow.e-scroller").addClass(css);
                this.getFooterTable() && this._scrollFooterColgroup();
            }
            this._addMedia();
            if(this.model.allowScrolling && this.model.allowTextWrap && !this.model.scrollSettings.allowVirtualScrolling) this.getContent().first().ejScroller("refresh");
            if (this.model.scrollSettings.allowVirtualScrolling) {
                this._currentPage(1);
                if (this._currentPage() == 1 && !this.model.scrollSettings.enableVirtualization)
                    this._virtualLoadedRecords[this._currentPage()] = this._currentJsonData;
                if(this.model.scrollSettings.enableVirtualization)
                    this._refreshVirtualView();				
                else
                    this._refreshVirtualContent(this._currentPage());
                this.getContent().first().ejScroller("refresh");
                if (this.getContent().ejScroller("isVScroll")) {
                    this.element.find(".e-gridheader").addClass("e-scrollcss");
                }
                else
                    this.element.find(".e-gridheader").removeClass("e-scrollcss");
				this._isHscrollcss();
            }
            if (this.model.allowSelection == true && this.model.selectionType == "multiple" && this._selectedMultipleRows().length > 0)
                this._selectingMultipleRows(this._selectedMultipleRows());
            if (this._selectedRow() != -1 || this._selectedMultipleRows().length == 1) {
                var row = this._selectedMultipleRows();
                var indexes = row.length ? row : this._selectedRow();
                this.selectRows(indexes);
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar" && !this.model.allowPaging && !this.model.scrollSettings.allowVirtualScrolling)
                this._createPagerStatusBar();
            if (ej.gridFeatures.common)
                this.rowHeightRefresh()
            if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType) != -1)
                this._refreshFilterIcon();
            if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
                this._recalculateIndentWidth();
            if (this.initialRender && (!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount))
                this._addLastRow();
        },

        _addLastRow: function () {
            var lastRowtd = this.getContentTable().find("tr:last").find("td"), rowHeight = 0;

            if (this.model.allowScrolling && !this.model.scrollSettings.allowVirtualScrolling && !ej.isNullOrUndefined(this.model.dataSource) && !ej.isNullOrUndefined(this.getRows())) {
                for (var i = 0; i < this.getRows().length; i++)
                    rowHeight += $(this.getRows()[i]).height();

                if (rowHeight < this.getContent().height() - 1)
                    lastRowtd.addClass("e-lastrowcell");
            }
            if(this.model.scrollSettings.allowVirtualScrolling && this.getContentTable().height() < this.getContent().height())
                lastRowtd.addClass("e-lastrowcell");
        },
        _addMedia: function () {
            if (!this.model.enablePersistence && typeof (this.model.scrollSettings.width) != "string" && this.model.scrollSettings.width > 0) {
                this._responsiveScrollWidth = this._originalScrollWidth = this.model.scrollSettings.width;
            }
            else
                this._originalScrollWidth = this.element.width();
            if (typeof (this.model.scrollSettings.height) != "string" && this.model.scrollSettings.height > 0)
                this._responsiveScrollHiehgt = this.model.scrollSettings.height;
            if (this.model.minWidth && this.model.isResponsive) {
                this._$onresize = $.proxy(this.windowonresize, this);
                $(window).on("resize", this._$onresize);
                if ($.isFunction(window.matchMedia)) {
                    var mediaFilterObj = window.matchMedia("(max-width: 768px)");
                    this._mediaStatus = mediaFilterObj.matches;
                }
                this.windowonresize();
            }
        },
        _getNoncontentHeight: function () {   
            var height = 0;
            if (!ej.isNullOrUndefined(this.getHeaderContent().outerHeight()))
                height += this.getHeaderContent().outerHeight();
            if (this.model.toolbarSettings.showToolbar && !ej.isNullOrUndefined(this.element.find('.e-gridtoolbar').outerHeight()))
                height += this.element.find('.e-gridtoolbar').outerHeight();
            if (this.model.allowPaging && !ej.isNullOrUndefined(this.element.find('.e-pager').outerHeight()))
                height += this.element.find('.e-pager').outerHeight();
            if (this.model.showColumnChooser && !ej.isNullOrUndefined(this.element.find(".e-ccButton").outerHeight()))
                height += this.element.find(".e-ccButton").outerHeight();
            if (this.model.allowGrouping && this.model.groupSettings.showDropArea && !ej.isNullOrUndefined(this.element.find('.e-groupdroparea').outerHeight()))
                height += this.element.find('.e-groupdroparea').outerHeight();
            if (this.model.showSummary && !ej.isNullOrUndefined(this.element.find('.e-gridsummary').outerHeight()))
                height += this.element.find('.e-gridsummary').outerHeight();
            return height;
        },
        
        setDimension: function (height, width) {
            var originalHeight = height - this._getNoncontentHeight();
            this.model.scrollSettings.height = originalHeight;
            this.model.scrollSettings.width = width;
            this._renderScroller();
        },
		_getVisibleColumnsWidth: function(){
			var i,gridColsWidth=0;
			for(i=0; i<this.columnsWidthCollection.length; i++){
				if(this.model.columns[i].visible)
					gridColsWidth += this.columnsWidthCollection[i];
			}
			return gridColsWidth;
		},
		setPhoneModeMaxWidth: function (value) {
		    this._gridPhoneMode = value;
		},
        _mediaQueryUpdate: function (isScroller, elemHeight, width, winHeight) {
            if (window.innerWidth <= this._gridPhoneMode && this.model.enableResponsiveRow) {
                var contentStyle=this.getContentTable()[0].style;
               if(contentStyle.removeAttribute)
                   contentStyle.removeAttribute('min-width');
               else        
                   contentStyle.removeProperty('min-width');
                var scrollObj = this.getContent().data('ejScroller');
                if (scrollObj)
                    this.getContent().ejScroller('destroy');
                return;
            }
            var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
            if (isScroller) {
                this.model.scrollSettings.width = ej.isNullOrUndefined(this._responsiveScrollWidth) ? width : Math.min(this._responsiveScrollWidth, width);
                var height = Math.min(winHeight, elemHeight) - this._getNoncontentHeight();
                height = ej.isNullOrUndefined(this._responsiveScrollHiehgt) ? height : Math.min(this._responsiveScrollHiehgt, height);
                if(((this.element.parent().is("body") && $(document).height() > height) ||(height > this.element.parent().height())) && this.model.scrollSettings.height != "auto")
					height -= parseInt(this.element.parent().css('margin-bottom')+1);
				height = this.model.scrollSettings.height != "auto" ? height : this.model.scrollSettings.height;
				if ((this.model.minWidth > width || this.getContentTable().width() > width) && elemHeight > winHeight)
                    height = height != "auto" ? height + this.model.scrollSettings.buttonSize : height ;
                if (ej.isNullOrUndefined(this.getRows()))
                    height = '100%';
                this.model.scrollSettings.height = this._isHeightResponsive ? height : this._initHeight ? this._initHeight : this.getContentTable()[0].scrollHeight;
                this.element.find(".e-gridheader").first().find("div").first().addClass("e-headercontent");
            }
            else {
                this.model.scrollSettings.width = '100%';
                if (!ej.isNullOrUndefined(this._responsiveScrollWidth))
                    this.model.scrollSettings.width = Math.min(this._responsiveScrollWidth, width);
                var modifyHeight = Math.min(winHeight, elemHeight);
                var height = modifyHeight - this._getNoncontentHeight();
                if (!ej.isNullOrUndefined(this._responsiveScrollHiehgt))
                    height = Math.min(this._responsiveScrollHiehgt, height);
                if(((this.element.parent().is("body") && $(document).height() > height) ||(height > this.element.parent().height())) && this.model.scrollSettings.height != "auto")
					height -= parseInt(this.element.parent().css('margin-bottom'));
				height = this.model.scrollSettings.height != "auto" ? height : this.model.scrollSettings.height;
				if (!ej.isNullOrUndefined(this._responsiveScrollWidth) && this.model.scrollSettings.width == this._responsiveScrollWidth && (this.model.minWidth > this._responsiveScrollWidth || this._getVisibleColumnsWidth() > this._responsiveScrollWidth) || (ej.isNullOrUndefined(this._responsiveScrollWidth) && (this.getRowHeight() == height || this._isHeightResponsive) && this.getContentTable().width() > width))
                   height = height != "auto" ? height + this.model.scrollSettings.buttonSize : height;
                if (ej.isNullOrUndefined(this.getRows()))
                    height = '100%';
                if (this.getContent().height() >= height && !this._resize && !this.initialRender && typeof(this.model.scrollSettings.width) == "string")
                    this.model.scrollSettings.width = width;
                this.model.scrollSettings.height = this._isHeightResponsive ? height : this._initHeight ? this._initHeight : this.getContentTable()[0].scrollHeight;
                this.element.find(".e-gridheader").first().find("div").first().addClass("e-headercontent");
            }
            if (scrollObj != null)
                scrollObj.refresh(scrollObj.isHScroll() && scrollObj.isVScroll());
            this._renderScroller();
            this._resize = false;
        },
        windowonresize: function (e) {
            if (!this.element.is(":visible")) {
                var proxy = this;
                proxy._isVisible = true;
                var testVar = setInterval(function () {
                    if (!ej.isNullOrUndefined(proxy.element) && proxy.element.is(":visible") && proxy._isVisible) {
                        proxy.windowonresize();
                        proxy._isVisible = false;
                        clearInterval(testVar);
                    }
                    else if (!ej.isNullOrUndefined(proxy.element))
                        clearInterval(testVar);
                }, 100);
                return;
            }
            if (e && e.type == "resize")
                this._resize = true;
            this.model.scrollSettings.width = this._responsiveScrollWidth;
            var width, height;
            this.element.css("width", '100%');
            this.getContentTable().width('100%');
            this.getHeaderTable().width('100%');
            if(!ej.isNullOrUndefined(this.getFooterTable()))
                this.getFooterTable().width('100%');
            this.getContentTable().css('minWidth', this.model.minWidth);
            if (this._isHeightResponsive) {
                this.getContent().height("100%");
                this.getContent().find(".e-content").height('100%');
            }          
            this.getHeaderTable().css("min-width", this.model.minWidth);
            width = this.element.width();
            var winHeight = $(window).height() - this.element.offset()['top'];
            if (winHeight < this.element.offset()['top'])
                winHeight = $(document).height() - this.element.offset()['top'];
            var rowCount = !ej.isNullOrUndefined(this.getRows()) ? this.getRows().length : 1;
            var isBody = this.element.parent().is($('body')) || this.element.parent().height() == $('body').height() || (["", "auto"].indexOf(this.element.parent()[0].style.height) != -1);
            var originalElemHeight=this.getContentTable()[0].scrollHeight + this._getNoncontentHeight();
            var elemHeight = isBody ? winHeight : this.element.parent().height();
            originalElemHeight += parseInt(this.element.parent().css('margin-top'));
            var isScroller = this.model.minWidth > width || elemHeight <= originalElemHeight;
            this._mediaQueryUpdate(isScroller, elemHeight, width, originalElemHeight)
        },
        _removeMedia: function () {
            $(window).off("resize", this._$onresize);
            this.getContentTable().css("min-width", "");
            this.getHeaderTable().css("min-width", "");
            this.getContentTable().css("width", "");
            this.model.scrollSettings.width = "auto";
            if (this.getContent().data("ejScroller"))
                this.getContent().ejScroller("destroy");
        },
        _getRowHeights: function () {
            var trs = this.getRows(), frotrs = [], movtrs = [];
            if (trs !== null) {
                this._rowHeightCollection = [];
                if (trs[1] !== undefined && trs[1].length && ((this.model.scrollSettings.frozenColumns > 0 && trs[0] !== undefined) || (trs[0] !== undefined && typeof trs[0].item !== "undefined" && typeof trs[0].length == "number" && typeof trs[1].item !== "undefined" && typeof trs[1].length == "number"))) {
                    frotrs = trs[0];
                    movtrs = trs[1];
                    for (var i = 0 ; i < frotrs.length ; i++) {
                        this._rowHeightCollection[i] = frotrs[i].offsetTop >= movtrs[i].offsetTop ? frotrs[i].offsetTop : movtrs[i].offsetTop;
                    }
                }
                else {
                    for (var i = 0 ; i < trs.length ; i++) {
                        this._rowHeightCollection[i] = trs[i].offsetTop;
                    }
                }
            }
            return this._rowHeightCollection;
        },
        _getEmptyTbody: function () {
            var $emptyTd = ej.buildTag('td.emptyrecord', this.localizedLabels.EmptyRecord, {}, { colSpan: (this.model.columns.length- this._hiddenColumns.length)});
            return $(document.createElement("tr")).append($emptyTd);
        },
        _getIndentCol: function () {
            return ej.buildTag("col", "", { width: "30px" });
        },
        _createSortElement: function () {
            return ej.buildTag('span.e-icon', "&nbsp;");
        },
        _createSortNumber: function (number, header) {
            if (header.css("text-align") == "right")
            return ej.buildTag('span.e-number', number, { "color": "white", "font-size": "9px", "text-align": "center", "float": "left" });
            else
            return ej.buildTag('span.e-number', number, { "color": "white", "font-size": "9px", "text-align": "center", "float": "right" });
        },
        _onFocusIn: function (e) {
           var proxy=this;
		   setTimeout(function(){proxy.element.removeClass('e-activefocusout')},0);
        },
        _onFocusOut: function (e) {
            var proxy=this;
            setTimeout(function(){
				proxy.element.addClass('e-activefocusout');
            },0)
        },
        _wireEvents: function () {
            this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", this._clickHandler);
            this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", ".e-gridheader", this._mouseClickHandler);
            if (this.model.enableFocusout) {
                this._on(this.element, "focusout", this._onFocusOut);
                this._on(this.element, "focusin", this._onFocusIn);
            }
            if (ej.gridFeatures.common) {
				this._on(this.element, ($.isFunction($.fn.doubletap) && this.model.enableTouch) ? "doubletap" : "dblclick", ".e-gridcontent > div:first", this._recorddblClickHandler);
                if (this.model.rightClick)
                    this._on(this.element, "contextmenu", this._rightClickHandler);
				 this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", ".e-gridcontent", this._recordClick);
                this._enableRowHover();
                if (this.model.enableTouch)
                    this._on(this.element, "swipeleft swiperight", ".e-gridcontent div > .e-table", $.proxy(this._touchGrid, this));
                else
                    this.element.addClass("e-touch");
                this._on(this.element, "mousedown", ".e-gridheader", this._headerMouseDown);
                if ((this.model.allowRowDragAndDrop || this.model.selectionSettings.allowDragSelection) && this.model.selectionType == "multiple")
                    this._on(this.element, "touchstart mousedown", ".e-gridcontent", this._contentMouseDown);
                this._on(this.element, "mouseover mouseleave", ".e-gridheader:first", this._headerHover);
                this._on(this.element, ej.eventType.mouseMove, ".e-gridheader:first", this._headerHover);
                this.model.allowResizeToFit && this._on(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
                if (this.model.allowResizing) {
                    this._on(this.element, ej.eventType.mouseMove,".e-gridheader:first", this._mouseMove);
                    this._on(this.element, "mouseup", this._mouseUp);
                }
                if (this.model.allowKeyboardNavigation) {
                    this.element[0].tabIndex = this.element[0].tabIndex == -1 ? 0 : this.element[0].tabIndex;
                    this.element[0].accessKey = (!ej.isNullOrUndefined(this.element[0].accessKey) && this.element[0].accessKey != "") ? this.element[0].accessKey : "e";
                    this._on(this.element, "keyup", this._keyDownHandler);
                }
            }
            if (ej.gridFeatures.edit) {
                this._enableEditingEvents();
            }
            if (this.model.allowGrouping) {
                this._enableGroupingEvents();
                this._on(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);

            }
            this._enableFilterEvents();
        },
        _enableFilterEvents: function () {
            if (this.model.allowMultiSorting || this.model.selectionType == "multiple" || this.model.allowFiltering)
                this._on($(document), "mousedown", this._docClickHandler);
            if (this.model.allowFiltering) {
                var proxy = this, $target;
                this._off(this.element, "keyup", ".e-filterbar input")._on(this.element, "keyup", ".e-filterbar input", this._filterBarHandler);
                this._on(this.element, "focus click", ".e-filterbar", this._filterBarClose);
            }
        },
        _docClickHandler: function (e) {
            var details = !ej.isIOSWebView() && this.getBrowserDetails(), $target = $(e.target);
            if (this._customPop != null && this.element.find(e.target).length == 0)
                this._customPop.hide();
            if (this.model.allowFiltering) {
                if (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel") {
                    if (this._$colType && ($(e.target).find(".e-grid.e-dlgcontainer").length > 1 || $(e.target).find(".e-excelfilter").length > 1))
                        if (details && details.browser == "msie")
                            e.target.tagName != "BODY" && (!this.isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e));
                        else
                            !this._isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e);
                } else if (!$target.hasClass("e-filtertext") && !$target.hasClass("e-cancel"))
                    this.getFilterBar().find(".e-cancel").addClass("e-hide");
            }

        },
        _mouseClickHandler: function (e) {
            var $temp = $(e.target), $target, $cloneCommonQuery = this.commonQuery.clone(), currentColumn;
            if ($temp.closest(".e-grid").length != 0 && $temp.closest(".e-grid").attr("id") !== this._id) return;
            if (this.getHeaderTable().find('.e-columnheader').not('.e-stackedHeaderRow').css('cursor') == "col-resize")
                return;
            if ($(e.target).is(".e-ascending, .e-descending"))
                $target = $(e.target.parentNode);
            else if ($temp.hasClass('e-groupheadercell'))
                $target = $temp.children("div");
            else
                $target = $(e.target);
            if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this._isExcelFilter)) {
                $.fx.off = true;
                this._closeFDialog();
                $.fx.off = false;
            }
            this.getHeaderTable().find(".e-columnheader").find(".e-headercellactive").removeClass("e-headercellactive").removeClass("e-active");
            if ($target.hasClass("e-headercelldiv") || $target.hasClass("e-headercell") && $.inArray('column', this.model.selectionSettings.selectionMode) == -1 || (!$target.hasClass("e-togglegroupbutton") && $target.closest(".e-headercelldiv").length && $.inArray($target[0].tagName, ["SELECT", "INPUT", "TEXTAREA"]) == -1)
                || ($target.closest(".e-groupheadercell").length && $(e.target).is(".e-ascending, .e-descending"))) {
                if (!this.model.allowSorting || ej.gridFeatures.sort === undefined)
                    return;
                $targetnew = ($target.hasClass("e-headercelldiv") || $target.closest(".e-groupheadercell").length) ? $target : $target.hasClass("e-headercell") ? $target.find(".e-headercelldiv") : $target.closest(".e-headercelldiv");
                var columnName = $targetnew.attr("data-ej-mappingname");
                var columnSortDirection = ej.sortOrder.Ascending;
                this._$prevSElementTarget = this._$curSElementTarget;
                this._$curSElementTarget = $target;
                if ($target.parent().find('span').hasClass("e-ascending"))
                    var columnSortDirection = ej.sortOrder.Descending;
                else
                    var columnSortDirection = ej.sortOrder.Ascending;
                if (e["pointerType"] == "touch" && this._customPop != null && !this._customPop.is(":visible") && this._customPop.find(".e-sortdirect").hasClass("e-spanclicked"))
                    this._customPop.show();
                if (e["pointerType"] == "touch" && this._customPop != null && (this._customPop.find(".e-rowselect").is(":visible") || !this._customPop.find(".e-sortdirect").hasClass("e-spanclicked")) && this.model.allowMultiSorting) {
                    var $offset = $target.offset();
                    this._customPop.removeAttr("style");
                    this._customPop.offset({ left: $offset.left, top: $offset.top - this.getHeaderTable().find(".e-columnheader").height()}).find(".e-sortdirect").show().end()
                        .find(".e-rowselect").hide().end().show();
                }
                if (this.model.allowMultiSorting && (e.ctrlKey || this._enableSortMultiTouch))
                    this.multiSortRequest = true;
                if (e.shiftKey && $.inArray(columnName, this.model.groupSettings.groupedColumns) == -1) {
                    this._removeSortedColumnFromCollection(columnName);
                    this.multiSortRequest = true;
                    columnName = null;
                    this.sortColumn(columnName, columnSortDirection);
                }
                if (!ej.isNullOrUndefined(columnName))
                    this.sortColumn(columnName, columnSortDirection);
            } else if ($target.hasClass("e-togglegroupbutton") && this.model.allowGrouping) {
                var field = $target.parent().children(".e-headercelldiv").attr("data-ej-mappingname");
                $target.hasClass("e-togglegroup") && this.groupColumn(field);
                $target.hasClass("e-toggleungroup") && this.ungroupColumn(field);
            } else if ($target.hasClass("e-filtericon") || $target.hasClass("e-filteredicon") || $target.hasClass('e-responsivefilterColDiv') || $target.parent().hasClass('e-responsivefilterColDiv')) {
                var columnName = $target.parent().find(".e-headercelldiv").attr("data-ej-mappingname") || $target.attr("data-ej-mappingname") || $($target.parent()).attr("data-ej-mappingname");
                this._$prevFieldName = this._$curFieldName, currentColumn = this.getColumnByField(columnName);
                var localXFLabel = { True: this.localizedLabels.True, False: this.localizedLabels.False };
                if (this.model.allowFiltering) {
                    var proxy = this;
                    if (this.model.filterSettings.filterType == "excel" && currentColumn.filterType == "menu" && $.inArray(currentColumn.type, this._menuColTypes) == -1) {
                        this._renderFilters(currentColumn);
                        this._menuColTypes.push(currentColumn.type);
                    }
                    else if (((this.model.filterSettings.filterType == "menu" && currentColumn.filterType == "excel") || (this.model.filterSettings.filterType == "excel" && currentColumn.filterType != "menu")) && $.inArray(currentColumn.type, this._excelColTypes) == -1) {
                        this._renderFilters(currentColumn);
                        this._excelColTypes.push(currentColumn.type);
                    }
                    $.each(this.model.columns, function (indx, col) {
                        if (col.field == columnName) {
                            proxy._$colType = col.type;
                            proxy._$curFieldName = col.field;
                            proxy._$colFormat = col.format;
                            proxy._$filterType = col.filterType;
                            proxy._$colForeignKeyField = col.foreignKeyField ? col.foreignKeyField : col.field;
                            proxy._$colForeignKeyValue = col.foreignKeyValue;
                            proxy._$colDropdownData = col.dataSource;
                        }
                    });
                    if ((this.model.filterSettings.filterType == "menu" && this._$filterType != "excel") || (this.model.filterSettings.filterType == "excel" && this._$filterType == "menu")) {
                        var $id = "#" + this._id + "_" + this._$colType + "Dlg";
                        this._$menuDlgIsOpen = true;
                        if (this._$colType == "string") {
                            if (this._$colForeignKeyValue && this._$colDropdownData)
                                $("#" + this._id + "_acString").ejAutocomplete({ fields: { text: proxy._$colForeignKeyValue, key: proxy._$colForeignKeyField }, dataSource: proxy._$colDropdownData });
                            else
                                $("#" + this._id + "_acString").ejAutocomplete({ fields: { text: proxy._$curFieldName, key: this._getIdField() }, dataSource: this._dataSource() });
                        } else if (this._$colType == "date") {
                            if (this._$colFormat != undefined) {
                                this._$colFormat = this._$colFormat.replace("{0:", "").replace("}", "");
                                $($id).find(".e-datewidget .e-datepicker.e-js").ejDatePicker({ dateFormat: this._$colFormat.replace("{0:", "").replace("}", "") });
                            }
                            else
                                $($id).find(".e-datewidget .e-datepicker.e-js").ejDatePicker({ dateFormat: ej.preferredCulture(this.model.locale).calendars.standard.patterns.d });
                        }
                        else if (this._$colType == "datetime") {
                            if (this._$colFormat != undefined) {
                                this._$colFormat = this._$colFormat.replace("{0:", "").replace("}", "");
                                $($id).find(".e-datetimewidget input").ejDateTimePicker({ dateFormat: this._$colFormat.replace("{0:", "").replace("}", "") });
                            }
                            this._setFilterFieldValues($id);
                        }
                    }
                    this._mediaStatus = document.documentElement.clientWidth <= 768;
                    if (this.model.isResponsive && this._mediaStatus) {
                        var gridObj = this;
                        var $headerDiv = ej.buildTag('div.e-resFilterDialogHeaderDiv');
                        var $titleSapn = ej.buildTag('div.e-labelRes', '<span>Filter</span>');
                        if ($("#"+this._id+"_"+this._$colType+"Dlg").find(".e-filterMenuBtn").length > 0){
                            $("#"+this._id+"_"+this._$colType+"Dlg").find(".e-filterMenuBtn").remove();
                        }
                        var $dlgBtn = ej.buildTag('div.e-filterMenuBtn');
                        var $inputOk = ej.buildTag('input.e-resposnsiveFilterBtnLeft e-flat e-btnsub');
                        var $inputCancel = ej.buildTag('input.e-resposnsiveFilterBtnRight e-flat e-btncan');

                        $headerDiv.append($titleSapn);
                        $headerDiv.css('width', '100%');
                        var $dlgClone = $($id).css('padding-left', '0px');
                        if ($target.parent().hasClass('e-responsivefilterColDiv') && $target.hasClass('e-filternone')) {
                            proxy._fltrClrHandler();
                            $target.remove();
                            $("#"+this._id+"responsiveFilter").css('display', 'block');
                            // this.element.css('display', 'block');
                        }
                        else {
                            this.element.css('display', 'none');
                            setTimeout(function () { 
							$("#"+this._id+"responsiveFilter").css('display', 'none'), 0 });
                            if (!this._isExcelFilter && this._$filterType != "excel") {
                                var btnText = this.model.enableResponsiveRow ? 'OK' : 'Filter', clearText = this.model.enableResponsiveRow ? 'Cancel' : 'Clear';
                                $inputOk.ejButton({ text: btnText, type: 'button', click: $.proxy(this._fltrBtnHandler, this) });
                                $inputCancel.ejButton({
                                    text: clearText, type: 'button', click: function () {
                                        if (clearText == 'Clear') {
                                            proxy.element.css('display', 'block');
                                            proxy._fltrClrHandler();
                                        }
                                        $($id).css('display', 'none');
                                        if ($inputCancel.hasClass("e-resposnsiveFilterBtnRight"))
                                            proxy.element.css('display', 'block');
                                    }
                                });
                                if ($target.parent().hasClass('e-responsivefilterColDiv') && $target.hasClass('e-filternone')) {
                                    proxy._fltrClrHandler();
                                    $target.remove();
                                }
                                else {
                                    $dlgClone.addClass('e-resMenuFltr');
                                    $dlgClone.css('height', $(window).height() - 1).css('width', $(window).width() - 2);
                                    $dlgClone.find('.e-operator').addClass('e-resFilterOperator');
                                    $dlgClone.find('.e-value').addClass('e-resFilterOperator');
                                    $dlgClone.find('.e-value1').addClass('e-resFilterOperator');
                                    var $btnContainer = $dlgClone.find('.e-dlgBtns').remove().addClass('e-filterMenuBtn');
                                   $dlgClone.append($dlgBtn);
                                   $dlgBtn.append($inputOk).append($inputCancel);
                                    if (ej.isNullOrUndefined($("#"+this._id+"_"+this._$colType+"Dlg").find('.e-resFilterDialogHeaderDiv')[0])) {
                                        $dlgClone.insertAfter(this.element);
                                        var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' });
                                        var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' })
                                        $backIcon.click(function (e) {
                                            $dlgClone.css('display', 'none');
                                            if (gridObj.model.enableResponsiveRow){
                                                $("#"+ gridObj._id +"responsiveFilter").css('display', 'block');
                                            }else
                                                gridObj.element.css('display', 'block');
                                        })
                                        $headerDiv.append($backIcon.append($spanIcon));
                                        var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: $id.slice(1), gridEle: true });
                                        var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveClose', '', {}, { closeDialogue: $id.slice(1), gridEle: true })
                                        $closeIcon.click(function (e) {
                                            $dlgClone.css('display', 'none');
                                            gridObj.element.css('display', 'block');
                                        });
                                        var $ejWid = $($dlgClone.find('.e-value').find('input:last'));
                                        if (proxy._$colType == 'string') {
                                            var model = $($dlgClone.find('.e-value').find('input:last')).ejAutocomplete('model');
                                            $ejWid.ejAutocomplete('destroy').ejAutocomplete({
                                                enableDistinct: true, dataSource: model.dataSource, fields: model.fields, width: model.width, focusIn: function (args) {
                                                    var $dropdown = this.element.closest(".e-filterDialog").find(".e-dropdownlist");
                                                    this.model.filterType = $dropdown.val();
                                                }
                                            });
                                        }
                                        $headerDiv.append($closeIcon.append($closeSpan));
                                        $dlgClone.prepend($headerDiv);
                                    }
                                    $dlgClone.find('.e-responsiveLabelDiv').remove();
                                    var $label = ej.buildTag('div.e-responsiveLabelDiv', '', { 'margin-left': '5%', 'font-size': '17px', 'margin-top': '5%' }).append(ej.buildTag('span', this.getHeaderTextByFieldName(columnName), { 'font-weight': 'bold' }));
                                    $label.insertAfter($dlgClone.find('.e-resFilterDialogHeaderDiv'));
									if(this.model.enableResponsiveRow){
                                    $("#"+this._id+"_"+this._$colType+"Dlg").css({'width': '100%','position':'relative'});
                                    $("#"+this._id+"responsiveFilter").css('display', 'none');
									}
                                    $dlgClone.fadeIn(100, function () {
                                    });
                                }
                            }
                            else {
                                this._excelDlg = $id = "#" + this._id + this._$colType + "_excelDlg";
                                if (ej.isNullOrUndefined($dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
                                    $inputOk.ejButton({
                                        text: 'OK', type: 'button', click: function (sender) {
                                            gridObj._responsiveFilterClose();
                                            gridObj._excelFilter._openedFltr = $(gridObj._excelDlg);
                                            gridObj._excelFilter._fltrBtnHandler();
                                            gridObj._setResponsiveFilterIcon();
                                        }
                                    });
                                    $inputCancel.ejButton({ text: 'Cancel', type: 'button', click: function () { $($id).css('display', 'none'); proxy.element.css('display', 'block') } });
                                    $($id).children().not('.e-searchcontainer').remove();
									$($id).css('top', '').css('left', '');
                                    var excelObj = this._excelFilter;
                                    var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' });
                                    var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' })
                                    $backIcon.click(function (e) {
                                        $.proxy(gridObj._closeDivIcon(e), this);
                                    })
                                    $headerDiv.append($backIcon.append($spanIcon));
                                    var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: $id.slice(1), gridEle: true });
                                    var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveCustomFilter', '', {}, { closeDialogue: $id.slice(1), gridEle: true })
                                    $closeIcon.click(function (e) {
                                        $.proxy(gridObj._closeDivIcon(e), this);
                                    })
                                    if (proxy._$colType != 'boolean')
                                        $headerDiv.append($closeIcon.append($closeSpan));
                                    $($id).css('padding', '0px');
                                    var $searchContainer = $($id).css('height', $(window).height() - 2);
                                    $searchContainer.css('width', $(window).width() - 2);
                                    var $searchBox = $searchContainer.find('.e-searchcontainer .e-searchbox').css('margin-top', '10px');
                                    $searchBox.children().css('margin-top', '10px');
                                    var $checkBoxDiv = $searchContainer.find('.e-checkboxlist');
                                    var scrolWidth = $(window).width() * (97 / 100), scrollHeight = $(window).height() * (65 / 100);
                                    $($searchContainer.find('.e-searchcontainer')).addClass('e-resSearch');
                                    var $btn = $searchContainer.find('.e-resSearch .e-btncontainer').remove();
                                    $btn.find('input:first').css('width', '45.6%');
                                    $btn.find('input:first').addClass('e-resposnsiveFilterBtnLeft');
                                    $btn.find('input:last').addClass('e-resposnsiveFilterBtnRight');
                                    $searchContainer.find('.e-excelLabel').remove();
                                    var $labelDiv = ej.buildTag('div.e-excelLabel', 'Order Id', { 'font-weight': 'bold', 'margin-top': '10px' });
                                    var $searchBox = $searchContainer.find('.e-searchcontainer');
                                    $labelDiv.insertAfter($searchContainer.find('.e-searchcontainer .e-searchbox'));
                                    $searchContainer.prepend($headerDiv);
                                    $($id).append($dlgBtn.append($inputOk).append($inputCancel))
                                    $checkBoxDiv.ejScroller({ height: scrollHeight, width: scrolWidth }).ejScroller('refresh');
                                }
                                this._excelFilter.openXFDialog({ field: columnName, enableResponsiveRow: true, displayName: currentColumn.headerText, dataSource: this._dataSource(), query: $cloneCommonQuery, position: { X: xPos, Y: yPos }, dimension: { height: $(window).height(), width: $(window).width() }, cssClass: "resFilter", type: this._$colType, format: this._$colFormat, localizedStrings: localXFLabel });
                                $($id).insertAfter(this.element);
                                !ej.isNullOrUndefined($($id).parents('.e-grid')[0]) && $($id).remove();
                                $closeIcon.click(function (e) {
                                    $(gridObj._excelDlg).css('display', 'none');
                                    var height = $(window).height() - 5, width = $(window).width();
                                    excelObj._openCustomFilter('equal');
                                    var $dlgClone = $id = $("#" + gridObj._id + gridObj._$colType + "_CustomFDlg").addClass('e-responsviesExcelFilter');
                                    if (ej.isNullOrUndefined($dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
                                        var $headerDivCustom = ej.buildTag('div.e-resFilterDialogHeaderDiv');
                                        var $titleSapn = ej.buildTag('div.e-labelRes', '<span>Custom Filter</span>');
                                        $headerDivCustom.append($titleSapn);
                                        var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, { closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg", openDialogue: gridObj._excelDlg.slice(1) });
                                        var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, { closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg", openDialogue: gridObj._excelDlg.slice(1) })
                                        $backIcon.click(function (e) {
                                            $dlgClone.css('display', 'none');
                                            if (gridObj.model.enableResponsiveRow)
                                                $("#"+this._id+"responsiveFilter").css('display', 'block');
                                            else
                                                gridObj.element.css('display', 'block');
                                        });
                                        $headerDivCustom.append($backIcon.append($spanIcon));
                                        var $closeIconCust = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, { closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg", gridEle: true });
                                        var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveClose', '', {}, { closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg", gridEle: true })
                                        $headerDivCustom.append($closeIconCust.append($closeSpan));
                                        $closeIconCust.click(function (e) {
                                            $dlgClone.css('display', 'none');
                                            gridObj.element.css('display', 'block');
                                        })
                                        $dlgClone.prepend($headerDivCustom);
                                        $dlgClone.insertAfter(gridObj.element);
                                        $dlgClone.find('.e-dlgfields').css('width', '100%');
                                        var $firstDiv = $dlgClone.find('.e-dlgfields:first').css('width', '92%').css('margin-left', '6%');
                                        $firstDiv.css('margin-top', '4%');
                                        var colName = $dlgClone.find('.e-dlgfields').find('.e-fieldset legend').text();
                                        var $labelDiv = ej.buildTag('div.e-responsiveLabelDiv', colName, { 'margin-left': '6%' });
                                        $labelDiv.insertAfter($firstDiv);
                                        var $fieldSet = $dlgClone.find('.e-dlgfields').find('.e-fieldset').find('table').css('width', '61%');
                                        $dlgClone.find('.e-dlgfields').find('.e-fieldset').replaceWith($fieldSet);
                                        var $fieldDiv = $fieldSet.parent('div').addClass('e-responsiveExcelFilterFieldDiv');
                                        var $ddl = $fieldSet.find('.e-dropdownlist')
                                        $fieldSet.find('.e-dropdownlist').each(function (index, object) {
                                            var ds = $(object).ejDropDownList('model.dataSource');
                                            var wid = $(window).width() * (40 / 100);
                                            $(object).ejDropDownList('destroy').ejDropDownList({ width: wid, popupWidth: wid + "px", dataSource: ds });
                                        });
                                        $fieldSet.find('.e-autocomplete').each(function (index, object) {
                                            var model = $(object).ejAutocomplete('model.dataSource');
                                            var wid = $(window).width() * (40 / 100);
                                            $(object).ejAutocomplete('destroy').ejAutocomplete({ width: wid, dataSource: model.dataSource, fields: model.fields });
                                        });
                                        $fieldSet.find('.e-datepicker').each(function (index, object) {
                                            var ds = $(object).ejDatePicker('model.dataSource');
                                            var wid = $(window).width() * (40 / 100);
                                            $(object).ejDatePicker('destroy');
                                            $("#" + $(object).attr("id")).ejDatePicker({ width: wid });
                                        });
                                        var $okClone = $inputOk.clone(), $cancelClone = $inputCancel.clone();
                                        $okClone.ejButton({
                                            text: 'OK', type: 'button', click: function (sender) {
                                                gridObj._excelFilter._openedFltr = $dlgClone;
                                                gridObj._excelFilter._fltrBtnHandler();
                                                if ($dlgClone.hasClass('e-dlgcustom'))
                                                    $dlgClone.css("display", "none");
                                                gridObj._setResponsiveFilterIcon();
                                                gridObj.element.css('display', 'block');
                                            }
                                        });
                                        $cancelClone.ejButton({ text: 'Cancel', type: 'button', click: function () { $dlgClone.ejDialog('close'); proxy.element.css('display', 'block') } });
                                        $dlgClone.append($dlgBtn.clone().append($okClone).append($cancelClone))
                                        var $btnContainer = $dlgClone.find('.e-dlgfields .e-btncontainer').remove();
                                        $btnContainer.find('input:first').addClass('e-resposnsiveFilterBtnLeft');
                                        $btnContainer.find('input:first').css('width', '45.6%')
                                        $btnContainer.find('input:last').addClass('e-resposnsiveFilterBtnRight');
                                    }
                                    gridObj.element.css('display', 'none');
                                    $dlgClone.ejDialog({ enableModal: false, height: height, width: width, position: { X: 0, Y: 0 }, enableResize: false, showHeader: false }).ejDialog('open');
                                })
                                var $searchdiv = ej.buildTag('div');
                            }
                        }
                    }
                    else {
				       var id = "#" + this._id + this._$colType + "_excelDlg";
					   if($(id).hasClass("resFilter")){
						   $(id).remove();
						   this._renderFilters(currentColumn);
						}
                        if ($($id).hasClass("e-resMenuFltr")) {
                            $($id).remove();
                            this._renderFilterDialogs();
                            $id = "#" + this._id + "_" + this._$colType + "Dlg";
                        }
                        $($id).ejDialog({ position: { X: "", Y: "" } });
                        var docWidth = $(document).width(), dlgWidth = document.documentElement.clientWidth < 800 ? 200 : 250, gridwidth = $("#" + this._id).width();
						var offset = $target.offset();
						var offsetParent = $target.offsetParent();  
						var parentOffset = offsetParent.offset();
						var parentOffset = {
				            top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				            left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			             };
                        var xPos = offset.left - parentOffset.left - jQuery.css( $target[0], "marginLeft", true ) + (this.model.enableRTL ? -6 : 18);					   
					    var yPos = offset.top - parentOffset.top - jQuery.css( $target[0], "marginTop", true ) + 2;                         
						if ($target.closest(".e-headercell").css("position") == "relative")
                            xPos = $target.offset().left + 15, yPos = $target.offset().top + 20;
                        var filterDlgLargeCss = "e-filterdialoglarge";
                        dlgWidth = this._isExcelFilter && currentColumn.filterType != "menu" && !ej.isNullOrUndefined(this._excelFilter._dialogContainer) ? this._excelFilter._dialogContainer.width() : dlgWidth;
                        var rightPosWidth = (this.element.offset().left + this.element.width()) - $target.offset().left, rightWidth = dlgWidth - rightPosWidth;
                        var leftPosWidth = $target.offset().left - this.element.offset().left, leftWidth = dlgWidth - leftPosWidth;
                        if ($target.offset().left + 18 + dlgWidth > gridwidth && rightWidth > leftWidth)
                            xPos = xPos - dlgWidth - (this.model.enableRTL ? 14 : 10);
                        if (dlgWidth == 200)
                            filterDlgLargeCss = "";
                        if (!ej.isNullOrUndefined(this._$colType)) {
                            if ((this.model.filterSettings.filterType == "menu" && this._$filterType != "excel") || (this.model.filterSettings.filterType == "excel" && this._$filterType == "menu")) {
                                xPos = xPos - $("#" + this._id).offset().left, yPos = yPos - $("#" + this._id).offset().top;
                                $($id).ejDialog({ position: { X: xPos, Y: yPos }, width: dlgWidth, cssClass: filterDlgLargeCss })
                                .ejDialog("open");
                            }
                            else
                                this._excelFilter.openXFDialog({ field: columnName, displayName: currentColumn.headerText, dataSource: this._dataSource(), query: $cloneCommonQuery, position: { X: xPos, Y: yPos }, type: this._$colType, format: currentColumn.format, foreignKey: currentColumn.foreignKeyField, foreignKeyType: currentColumn.originalType, foreignKeyValue: currentColumn.foreignKeyValue, foreignDataSource: currentColumn.dataSource, localizedStrings: localXFLabel });
                        }
                    }
                    this._setFilterFieldValues($id);
                    if (this._$colType == "number" && currentColumn["serverType"] != undefined)
                        $($id).find(".e-numerictextbox.e-js").ejNumericTextbox({ width: "100%",decimalPlaces: 0 });
                    else if(this._$colType == "number")
                        $($id).find(".e-numerictextbox.e-js").ejNumericTextbox({ width: "100%", groupSeparator: "" });
                    this._$prevColType = this._$colType;
                    this._$fDlgIsOpen = true;
                }
            }
        },
        _responsiveFilterClose: function () {
            this.element.css('display', 'block');
            $("#"+this._id+"responsiveFilter").css('display', 'block');

        },
        _clickHandler: function (e) {
            var $target = $(e.target),tempChooser = $("[id$='ccDiv'].e-grid.e-columnChooser"),fieldName, $form = $("#" + this._id + "EditForm"), index, columnIndex, rowIndex;
			if($(e.target).hasClass('e-checkselectall')  && !this.model.enableTouch){
			    if(e.target.checked)
					this._isCheckboxChecked = true;
				else
					this._isCheckboxUnchecked = true;
			}
			if(tempChooser.length) {
                var  flag = true;
                for(var i = 0; i < tempChooser.length; i++){
                    if($target.parents(".e-ccButton").length|| $target.hasClass('e-ccButton')) flag = $(e.target).closest(".e-grid").attr("id")+"ccDiv" != tempChooser[i].id;
                    var obj = $("#"+tempChooser[i].id).ejDialog("instance");
                    if(obj.isOpened() && flag) {
                        obj.close();
                        $(".e-columnChoosertail").remove();
                        $(".e-columnChoosertailAlt").remove();
                    }
                }
            }
            if ($target.hasClass("e-button") && ($target.hasClass("e-disable") || $target.prop("disabled"))) return;
            if ($target.closest(".e-grid").attr("id") !== this._id) return;
            if ($target.closest("#" + this._id + "EditForm").length){
				if($target.closest(".e-unboundcelldiv").length) this._unboundClickHandler(e);
				return;
			}
            if ($target.hasClass("e-rowcell") || $target.closest("td").is(".e-rowcell") || ($target.hasClass("e-headercell") && ((e.clientY - $target.offset().top) < ($target.height() / 4))) || $target.parents(".e-headercheckcelldiv").length) {
                if (this._bulkEditCellDetails.cancelSave) {
                    this._bulkEditCellDetails.cancelSave = false;
                    return;
                }
                if (this.model.editSettings.editMode == "batch" && ($.isFunction($.validator) && $form.length && $form.validate().errorList.length > 0))
                    return;
                index = $target.closest("tr").hasClass("e-insertedrow") ? this.model.groupSettings.groupedColumns.length : 0;
                var tempIndex = $target.closest(".e-rowcell").index() != -1 ? $target.closest(".e-rowcell").index() : $target.closest(".e-headercell").index() - this.model.groupSettings.groupedColumns.length;
                columnIndex = $target.hasClass("e-rowcell") ? $target.index() - index : tempIndex - index;
                columnIndex = (this.model.detailsTemplate != null || this.model.childGrid != null) ? columnIndex - 1 : columnIndex;
                if (this.model.scrollSettings.frozenColumns && ($target.closest(".e-movableheaderdiv").length || $target.closest(".e-movablecontentdiv").length))
                    columnIndex = columnIndex + this.model.scrollSettings.frozenColumns;
                rowIndex = this.getIndexByRow($target.closest("tr"));
                this._bulkEditCellDetails.columnIndex = columnIndex;
                this._bulkEditCellDetails.rowIndex = rowIndex;
                if (this.model.allowSelection && ej.gridFeatures.selection) {
                    var checkBoxSelection = this._enableCheckSelect && $target.parent(".e-checkcelldiv").length ? true : false;
                    if ($target.hasClass("e-checkselectall")) {
                        this._selectAllCheck = true;
						var rows = this.model.scrollSettings.frozenColumns > 0  ? this._gridRows[0].length : this._gridRows.length;
						var toCheckIndex = this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling ? this._gridRecordsCount : this.model.allowPaging ? (this.model.groupSettings.groupedColumns.length > 0 ? this._currentJsonData.length : this.model.currentViewData.length) : rows;
                        this.selectRows(0, toCheckIndex - 1, $target);
                    }
                    if (this.model.selectionType == "multiple") {
                        if (e.ctrlKey || this._enableSelectMultiTouch) {
                            this.multiSelectCtrlRequest = true;
                        }
                        if (e.shiftKey) {
                            this.multiSelectShiftRequest = true;
                            if (this._allowcellSelection && rowIndex > -1)
                                this.selectCells([[rowIndex, [columnIndex]]]);
                            if (this._allowrowSelection && rowIndex > -1 && (!this._enableCheckSelect || checkBoxSelection))
                                this.selectRows(this._previousIndex, this.getIndexByRow($target.closest('tr')), $target);
                                this._selectedRow(this.getIndexByRow($target.closest('tr')));
                            if (this._allowcolumnSelection && $target.hasClass("e-headercell") && !$target.hasClass("e-stackedHeaderCell") && ((e.clientY - $target.offset().top) < ($target.height() / 4)))
                                this.selectColumns(this._previousColumnIndex, columnIndex);
                        }
                        if (e["pointerType"] == "touch" && this._customPop != null && !this._customPop.is(":visible") && this._customPop.find(".e-rowselect").hasClass("e-spanclicked") && this.model.selectionSettings.selectionMode == "row")
                            this._customPop.show();
                        if (e["pointerType"] == "touch" && this._customPop != null && (this._customPop.find(".e-sortdirect").is(":visible") || !this._customPop.find(".e-rowselect").hasClass("e-spanclicked")) && this.model.selectionType == "multiple" &&(this.model.selectionSettings.selectionMode.indexOf("cell")!= -1 || this.model.selectionSettings.selectionMode.indexOf("row") !=-1 )) {
                            this._customPop.removeAttr("style");
                            var offset = $target.offset();
                            this._customPop.offset({ top: 0, left: 0 }).offset({ left: offset.left, top: offset.top - this.getRowHeight() - $target.height() }).find(".e-sortdirect").hide().end()
                                .find(".e-rowselect").show().end().show();
                        }
                    }
                    if (!this.multiSelectShiftRequest) {
                        if (this._allowcellSelection && rowIndex > -1) {
                            var cellProto = this._checkCellSelectionByRow(rowIndex, columnIndex);
                            if ((this.model.selectionSettings.enableToggle && this.selectedRowCellIndexes.length == 1 && this.selectedRowCellIndexes[0].cellIndex.length==1 || (e.ctrlKey && this.model.selectionType == 'multiple')) && (cellProto != -1 && this.selectedRowCellIndexes.length > 0 && this.selectedRowCellIndexes[0].cellIndex.length > 0))
                                this.clearCellSelection(cellProto.rowIndex, columnIndex);
                            else
                                this.selectCells([[rowIndex, [columnIndex]]]);
                        }
                        if (this._allowrowSelection && rowIndex > -1) {
                            var selectedIndex = this.getIndexByRow($target.closest('tr'));
                            if (this._enableCheckSelect)
                                this.multiSelectCtrlRequest = true;
							if(this.model.scrollSettings.enableVirtualization){
								var remain = rowIndex % this._virtualRowCount, viewIndex;							
								viewIndex = parseInt($($target).closest("tr").attr("name"), 32);																												
								selectedIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);	
							}
							var inx;
							if ((this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") && (!this._enableCheckSelect && !checkBoxSelection) && this.getIndexByRow($target.closest("tr")) > $(".e-editedrow").index()) {
							    var $editTrLen = $("#" + this._id).find(".e-editedrow").length;
							    inx = this.getIndexByRow($target.closest("tr")) - $editTrLen;
							}
							else
							    inx = this.getIndexByRow($target.closest('tr'));
                            if (!this._enableCheckSelect || checkBoxSelection) {
							    if (this.model.selectionSettings.enableToggle && !this._enableCheckSelect && this.getSelectedRecords().length == 1 && $.inArray(this.getIndexByRow($target.closest('tr')), this.selectedRowsIndexes) != -1)
							        this.clearSelection(selectedIndex);
							    else
							        this.selectRows(inx, null, $target);
							}
                            if(this._enableCheckSelect && !(e.ctrlKey || this._enableSelectMultiTouch))
                                this.multiSelectCtrlRequest = false;
                        }
                        if (this._allowcolumnSelection && $target.hasClass("e-headercell") && !$target.hasClass("e-stackedHeaderCell") && ((e.clientY - $target.offset().top) < ($target.height() / 4))) {
                            if (this.model.selectionSettings.enableToggle && this.selectedColumnIndexes.length == 1 && $.inArray(columnIndex, this.selectedColumnIndexes) != -1)
                                this.clearColumnSelection(columnIndex);
                            else
                                this.selectColumns(columnIndex);
                        }
                        this.multiSelectCtrlRequest = false;
                    }
                    this.multiSelectShiftRequest = false;
                }

                fieldName = this._bulkEditCellDetails.columnIndex >= 0 ? this.model.columns[this._bulkEditCellDetails.columnIndex]["field"] : null;
                if ($target.closest(".e-rowcell").length && !ej.isNullOrUndefined(fieldName)) {
                    this._tabKey = false;
					this._enterKey = false;
                    this.model.editSettings.allowEditing && this.model.editSettings.editMode == ej.Grid.EditMode.Batch && this.editCell($.inArray($target.closest("tr").get(0), this._excludeDetailRows()), fieldName);
                }
            }
            if ($target.hasClass("e-rowselect") || $target.hasClass("e-sortdirect")) {
                if (!$target.hasClass("e-spanclicked")) {
                    $target.addClass("e-spanclicked");
                    if ($target.hasClass("e-rowselect"))
                        this._enableSelectMultiTouch = true;
                    if ($target.hasClass("e-sortdirect"))
                        this._enableSortMultiTouch = true;
                } else {
                    $target.removeClass("e-spanclicked");
                    if ($target.hasClass("e-rowselect"))
                        this._enableSelectMultiTouch = false;
                    if ($target.hasClass("e-sortdirect"))
                        this._enableSortMultiTouch = false;
                    this._customPop.hide();
                }
            }
            this._selectAllCheck = false;
            if (ej.gridFeatures.common) {
                this.expandCollapse($target);
            }
            if ($target.is(".e-filtericon") && $target.closest(".e-detailrow").length != 0)
                e.preventDefault();
            if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this._isExcelFilter) && !$target.is(".e-filtericon") && $target.closest(".e-dlgcontainer").length != 1)
                this._closeFDialog();
            if (this.model.allowSearching && this._searchBar != null) {
                if ($target.is(this._searchBar.find(".e-cancel")))
                    this._searchBar.find("input").val("");
                else {
                    if (e.target.id == this._id + "_searchbar")
                        this._searchBar.find(".e-cancel").removeClass("e-hide");
                    else if (!this._searchBar.find(".e-cancel").hasClass("e-hide"))
                        this._searchBar.find(".e-cancel").addClass("e-hide");
                }
            }
			if($target.closest(".e-unboundcelldiv").length) this._unboundClickHandler(e);
        },
        _checkCellSelectionByRow: function (rowIndex, columnIndex) {
            for (var i = 0; i < this.selectedRowCellIndexes.length; i++) {
                if (this.selectedRowCellIndexes[i].rowIndex == rowIndex)
                    break;
            }
            if (i != this.selectedRowCellIndexes.length && $.inArray(columnIndex, this.selectedRowCellIndexes[i].cellIndex) != -1)
                return this.selectedRowCellIndexes[i];
            return -1;
        },
        _persistState: function (customModel) {
           if (this.model.enablePersistence && this._isHeightResponsive)
                customModel._isHeightResponsive = this._isHeightResponsive;
         },
        _restoreState: function (customModel) {
           if (this.model.enablePersistence && customModel._isHeightResponsive)
                this._isHeightResponsive = customModel._isHeightResponsive;
         },  
        _destroy: function () {
            /// <summary>This function is  used to destroy the Grid Object</summary>
            this.element.off();
            this.element.find(".e-gridheader").find(".e-headercontent,.e-movableheader")
                .add(this.element.find(".e-gridcontent").find(".e-content,.e-movablecontent")).off('scroll');
            var editForm = $("#" + this._id + "EditForm");
            if (editForm.length) {
                var $formEle = editForm.find('.e-field'), $element;
                for (var i = 0; i < $formEle.length; i++) {
                    $element = $($formEle[i]);
                    if ($element.hasClass('e-datetimepicker e-js'))
                        $element.ejDateTimePicker("destroy");
                    else if ($element.hasClass('e-datepicker e-js'))
                        $element.ejDatePicker("destroy");
                    else if ($element.hasClass('e-dropdownlist'))
                        $element.ejDropDownList("destroy");
                }
                editForm.remove();
            }
            if (this._confirmDialog)
                this._confirmDialog.ejDialog("destroy");
            this.element.find('.e-dropdownlist').ejDropDownList('model.dataSource', []);
            if (this.model.showColumnChooser) {
                $("#" + this._id + "ccDiv").ejDialog("destroy");
                $("#" + this._id + "ccDiv").remove();
                $("#" + this._id + "_ccTail").remove();
                $("#" + this._id + "_ccTailAlt").remove();
            }
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "excel")
                this._excelFilter.resetExcelFilter()
            if (this.model.allowReordering)
                $(".e-columndropindicator").remove();
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "menu") {
                var proxy = this, $colType;
                $.each(this.model.columns, function (indx, col) {
                    $colType = col.type;
                    $("#" + proxy._id + $colType + "_ddinput_popup_wrapper").remove();
                    if ($colType == "string")
                        $("#" + proxy._id + "_stringDlg").find('.e-autocomplete').ejAutocomplete("destroy");
                    else if ($colType == "date")
                        $("#" + proxy._id + "_dateDlg").find('.e-datepicker.e-js').ejDatePicker("destroy");
                    else if ($colType == "datetime")
                        $("#" + proxy._id + "_datetimeDlg").find('.e-datetimepicker.e-js').ejDateTimePicker("destroy");
                    else if ($colType == "number")
                        $("#" + proxy._id + "_numberDlg").find('.e-numerictextbox.e-js').ejNumericTextbox("destroy");
                });
            }
			    var proxy = this,
                model = this.model,
                columns = model.columns;
                for (var count = 0 ; count < columns.length; count++) {
				 if(!ej.isNullOrUndefined(columns[count].filterBarTemplate)){
				   var currentElement = ej.isNullOrUndefined(columns[count].foreignKeyValue)? $("#" + columns[count].field.split('.').join("") + "_filterBarcell") : $("#" + columns[count].field.split('.').join("") + "_" + columns[count].foreignKeyValue + "_filterBarcell") ;
                   currentElement.data("ejWidgets") && $(currentElement).data($(currentElement).data("ejWidgets")[0]).destroy();
				}
				 var headerText = columns[count].headerText;
                 if (!ej.isNullOrUndefined(headerText) && !ej.isNullOrUndefined(headerText.match(/(\\|[^0-9A-z-_])/g)))
			     headerText = headerText.replace(/(\\|[^0-9A-z-_])/g, "");
				 if (this._isUnboundColumn) {
                     if (columns[count].commands && columns[count].commands.length > 0) {
                        $("#" + proxy._id + headerText + [count] + "_UnboundTemplate").remove();
                  }
			    }
			   if (!ej.isNullOrUndefined(columns[count].template)) {
				   $("#" + proxy._id + headerText + $.inArray(columns[count], proxy.model.columns) + "_Template").length > 0 &&
                     $("#" + proxy._id + headerText + $.inArray(columns[count], proxy.model.columns) + "_Template").remove();
			    }
			 }
			$("#" + this._id + "_toolbarItems_Main").remove();
            if (this.element.find(".e-gridcontent .e-scrollbar").length > 0)
                this.element.find(".e-gridcontent").ejScroller("destroy");
            if (this._$onresize)
                $(window).off("resize", this._$onresize);
            this.element.empty().removeClass("e-grid " + this.model.cssClass);
            this.element.ejWaitingPopup("destroy");
            if (this.model.contextMenuSettings.enableContextMenu) {
                $("#" + this._id + "_Context").ejMenu('destroy');
                $("#" + this._id + "_Context").remove();
            }
        },
        _getDeprecatedLocalizedLabel: function (key) {
            if (["OkButton", "OKButton"].indexOf(key) != -1)
                return this.localizedLabels.OkButton || this.localizedLabels.OKButton;
        },
        _getLocalizedLabels: function (property) {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },
    });
    if (ej.gridFeatures.common)
        $.extend(ej.Grid.prototype, ej.gridFeatures.common);
    if (ej.gridFeatures.edit)
        $.extend(ej.Grid.prototype, ej.gridFeatures.edit);
    if (ej.gridFeatures.filter)
        $.extend(ej.Grid.prototype, ej.gridFeatures.filter);
    if (ej.gridFeatures.group)
        $.extend(ej.Grid.prototype, ej.gridFeatures.group);
    if (ej.gridFeatures.selection)
        $.extend(ej.Grid.prototype, ej.gridFeatures.selection);
    if (ej.gridFeatures.sort)
        $.extend(ej.Grid.prototype, ej.gridFeatures.sort);
    if (ej.gridFeatures.dragAndDrop)
        $.extend(ej.Grid.prototype, ej.gridFeatures.dragAndDrop);

    ej.Grid.Locale = ej.Grid.Locale || {};

    ej.Grid.Locale["default"] = ej.Grid.Locale["en-US"] = {
        EmptyRecord: "No records to display",
        GroupDropArea: "Drag a column header here to group its column",
        DeleteOperationAlert: "No records selected for delete operation",
        EditOperationAlert: "No records selected for edit operation",
        SaveButton: "Save",
        OKButton: "OK",
        CancelButton: "Cancel",
        EditFormTitle: "Details of ",
        AddFormTitle: "Add New Record",
        GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} item {{else}} items {{/if}} ",
        BatchSaveConfirm: "Are you sure you want to save changes?",
        BatchSaveLostChanges: "Unsaved changes will be lost. Are you sure you want to continue?",
        ConfirmDelete: "Are you sure you want to Delete Record?",
        CancelEdit: "Are you sure you want to Cancel the changes?",
        PagerInfo: "{0} of {1} pages ({2} items)",
        FrozenColumnsViewAlert: "Frozen columns should be in grid view area",
        FrozenColumnsScrollAlert: "Enable allowScrolling while using frozen Columns",
        FrozenNotSupportedException: "Frozen Columns and Rows are not supported for Grouping, Row Template, Detail Template, Hierarchy Grid and Batch Editing",
        Add: "Add",
        Edit: "Edit",
        Delete: "Delete",
        Update: "Update",
        Cancel: "Cancel",
        Done: "Done",
        Columns: "Columns",
        SelectAll: "(Select All)",
        PrintGrid: "Print",
        ExcelExport: "Excel Export",
        WordExport: "Word Export",
        PdfExport: "PDF Export",
        StringMenuOptions: [{ text: "StartsWith", value: "StartsWith" }, { text: "EndsWith", value: "EndsWith" }, { text: "Contains", value: "Contains" }, { text: "Equal", value: "Equal" }, { text: "NotEqual", value: "NotEqual" }],
        NumberMenuOptions: [{ text: "LessThan", value: "LessThan" }, { text: "GreaterThan", value: "GreaterThan" }, { text: "LessThanOrEqual", value: "LessThanOrEqual" }, { text: "GreaterThanOrEqual", value: "GreaterThanOrEqual" }, { text: "Equal", value: "Equal" }, { text: "NotEqual", value: "NotEqual" }, { text: "Between", value: "Between" }],
        PredicateAnd: "AND",
        PredicateOr: "OR",
        Filter: "Filter",
        FilterMenuFromCaption:"From",        
        FilterMenuToCaption:"To",
        FilterMenuCaption: "Filter Value",
        FilterbarTitle: "'s filter bar cell",
        MatchCase: "Match Case",
        Clear: "Clear",
        ResponsiveFilter: "Filter",
        ResponsiveSorting: "Sort",
        Search: "Search",
        DatePickerWaterMark: "Select date",
        NumericTextBoxWaterMark: "Enter value",
        EmptyDataSource: "DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid",
        ForeignKeyAlert: "The updated value should be a valid foreign key value",
        True: "true",
        False: "false",
        UnGroup: "Click here to ungroup",
        AddRecord: "Add Record",
        EditRecord: "Edit Record",
        DeleteRecord: "Delete Record",
        Save: "Save",
        Grouping: "Group",
        Ungrouping: "Ungroup",
        SortInAscendingOrder: "Sort In Ascending Order",
        SortInDescendingOrder: "Sort In Descending Order",
        NextPage: "Next Page",
        PreviousPage: "Previous Page",
        FirstPage: "First Page",
        LastPage: "Last Page",
        EmptyRowValidationMessage:"Atleast one field must be updated",
		NoResult: "No Matches Found"
    };
    ej.Grid.Actions = {
        /** Used to specify paging action in grid   */
        Paging: "paging",
        /** Used to specify sorting action in grid   */
        Sorting: "sorting",
        /** Used to specify filtering action in grid   */
        Filtering: "filtering",
        /** Used to specify begin edit action in grid   */
        BeginEdit: "beginedit",
        /** Used to specify saving action in grid   */
        Save: "save",
        /** Used to specify adding action in grid   */
        Add: "add",
        /** Used to specify deleting action in grid   */
        Delete: "delete",
        /** Used to specify cancelling action in grid   */
        Cancel: "cancel",
        /** Used to specify grouping action in grid   */
        Grouping: "grouping",
        /** Used to specify un-grouping action in grid   */
        Ungrouping: "ungrouping",
        /** Used to specify refresh action in grid   */
        Refresh: "refresh",
        /** Used to specify reordering action in grid   */
        Reorder: "reorder",
        /** Used to specify searching action in grid   */
        Search: "searching",
        /** Used to specify batch save action in grid   */
        BatchSave: "batchsave",
        /** Used to specify virtual scroll action in grid   */
        VirtualScroll: "virtualscroll"
    };

    ej.Grid.SummaryType = {
        /**  Creates grid with summary type as Average */
        Average: "average",
        /**  Creates grid with summary type as Minimum */
        Minimum: "minimum",
        /**  Creates grid with summary type as Maximum */
        Maximum: "maximum",
        /**  Creates grid with summary type as Count */
        Count: "count",
        /**  Creates grid with summary type as Sum */
        Sum: "sum",
        /**  Creates grid with summary type as TrueCount */
        TrueCount: "truecount",
        /**  Creates grid with summary type as FalseCount */
        FalseCount: "falsecount",
        /**  Creates grid with summary type as Custom */
        Custom: "custom"
    };

    ej.Grid.EditMode = {
        /**  Creates grid with editMode as Normal */
        Normal: "normal",
        /**  Creates grid with editMode as Dialog */
        Dialog: "dialog",
        /**  Creates grid with editMode as DialogTemplate */
        DialogTemplate: "dialogtemplate",
        /**  Creates grid with editMode as Batch */
        Batch: "batch",
        /**  Creates grid with editMode as ExternalForm */
        ExternalForm: "externalform",
        /**  Creates grid with editMode as ExternalFormTemplate */
        ExternalFormTemplate: "externalformtemplate",
        /**  Creates grid with editMode as InlineForm */
        InlineForm: "inlineform",
        /**  Creates grid with editMode as InlineTemplateForm */
        InlineTemplateForm: "inlineformtemplate"
    };

    ej.Grid.PrintMode = {
        /**  print all pages in grid */
        AllPages: "allpages",
        /**   print current pages in grid */
        CurrentPage: "currentpage",
    };
    ej.Grid.ResizeMode = {
        NextColumn: 'nextcolumn',
        Control: 'control',
        Normal: 'normal'
    };
    ej.Grid.Rowposition = {
        /** Add new row in the top of the grid */
        Top: "top",
        /** Add new row in the bottom of the grid */
        Bottom: "bottom",
    };

    ej.Grid.FormPosition = {
        /**  Creates grid with formPosition as BottomLeft */
        BottomLeft: "bottomleft",
        /**  Creates grid with formPosition as TopRight */
        TopRight: "topright"
    };

    ej.Grid.ClipMode = {
        /** Render an ellipsis ("...") to represent clipped text **/
        Ellipsis: "ellipsis",
        /** Clips the text **/
        Clip: "clip",
        /** Render an ellipsis ("...") to represent clipped text and tooltip would be shown **/
        EllipsisWithTooltip: "ellipsiswithtooltip"
    };

    ej.Grid.DragBehavior = {
        /**  Allows to move a record from one grid to another or within the grid*/
        Move: "move", 
        /**  Allows to copy a record from one grid to another or within the grid*/
        Copy: "copy"
    }; 

    ej.Grid.CellSelectionMode = {
        /**  Allows to select cells continuously from the start cell to end cell*/
        Flow: "flow", 
        /**  Allows to select range of cells as a block from start cell to the end cell*/
        Box: "box"
    }

    ej.Grid.EditingType = {
        /**  Allows to set edit type as string edit type */
        String: "stringedit",
        /**  Allows to set edit type as boolean edit type */
        Boolean: "booleanedit",
        /**  Allows to set edit type as numeric edit type */
        Numeric: "numericedit",
        /**  Allows to set edit type as drop down edit type */
        Dropdown: "dropdownedit",
        /**  Allows to set edit type as date picker edit type */
        DatePicker: "datepicker",
        /**  Allows to set edit type as date time picker edit type */
        DateTimePicker: "datetimepicker",
        /**  Allows to set edit type as edittemplate edit type */
        EditTemplate: "edittemplate"
    };

    ej.Grid.UnboundType = {
        /** Used to specify unbound type as Edit   */
        Edit: "edit",
        /** Used to specify unbound type as Save   */
        Save: "save",
        /** Used to specify unbound type as Delete   */
        Delete: "delete",
        /** Used to specify unbound type as Cancel   */
        Cancel: "cancel"
    };

    ej.Grid.ToolBarItems = {
        /** Used to add toolbar item for adding records    */
        Add: "add",
        /** Used to add toolbar item for editing records    */
        Edit: "edit",
        /** Used to add toolbar item for deleting records    */
        Delete: "delete",
        /** Used to add toolbar item for updating records    */
        Update: "update",
        /** Used to add toolbar item for cancelling records    */
        Cancel: "cancel",
        /** Used to add toolbar item for searching records    */
        Search: "search",
        /** Used to add toolbar item for printing grid    */
        PrintGrid: "printGrid",
        /** Used to add toolbar item for exproting grid to excel    */
        ExcelExport: "excelExport",
        /** Used to add toolbar item for exporting grid to word    */
        WordExport: "wordExport",
        /** Used to add toolbar item for exporting grid to pdf    */
        PdfExport: "pdfExport"
    };

    ej.Grid.FilterType = {
        /**  Creates grid with filtering type as Menu */
        Menu: "menu",
        /**  Creates grid with filtering type as FilterBar */
        FilterBar: "filterbar",
        /** Creates grid with filtering type as Excel */
        Excel: "excel"
    };

    ej.Grid.FilterBarMode = {
        /** Used to set filter bar mode as Immediate mode */
        Immediate: "immediate",
        /** Used to set filter bar mode as OnEnter mode */
        OnEnter: "onenter"
    };

    ej.Grid.SelectionType = {
        /**  Support for Single selection only in grid */
        Single: "single",
        /**  Support for multiple selections in grid */
        Multiple: "multiple"
    };
    ej.Grid.ColumnLayout = {
         /**  Support for auto width in grid */
        Auto: "auto",
        /**  Support for fixed column width in grid */
        Fixed: "fixed"
    };
    ej.Grid.GridLines = {
        /**  Support for Show both the vertical and horizontal line in grid  */
        Both: "both",
        /**  Support for Hide both the vertical and horizontal line in grid  */
        None: "none",
        /**  Support for Shows the horizontal line only in grid */
        Horizontal: "horizontal",
        /**  Support for Shows the vertical line only in grid  */
        Vertical: "vertical",
    };

    ej.Grid.VirtualScrollMode = {
        /** Used to set the Normal mode virtual paging*/
        Normal: "normal",
        /** Used to set the Continuous mode virtual paging*/
        Continuous: "continuous"
    };

    ej.Grid.SelectionMode = {
        /**  Support for Row selection in grid */
        Row: "row",
        /**  Support for Cell selection in grid */
        Cell: "cell",
        /**  Support for Column selection in grid */
        Column: "column"
    };

    ej.Grid.WrapMode = {
        /**  Support for text wrap with both header and content in grid */
        Both: "both",
        /**  Support for text wrap with content alone in grid */
        Content: "content",
        /**  Support for text wrap with header alone in grid */
        Header: "header"
    };

    ej.Grid.exportAll = function (exportAction, gridIds) {
        ej.Grid.prototype["export"](exportAction, null, true, gridIds);
    };

    ej.SqlDataSourceAdaptor = new ej.UrlAdaptor().extend({
        init: function (id) {
            this.initialRender = true;
        },
        processQuery: function (dm, query, hierarchyFilters) {
            var obj = ej.UrlAdaptor.prototype.processQuery(dm, query, hierarchyFilters);
            var data = ej.parseJSON(obj.data), result = {};
            // Param
            if (data.param) {
                for (var i = 0; i < data.param.length; i++) {
                    var param = data.param[i], key = Object.keys(param)[0];
                    result[key] = param[key];
                }
            }
            result["value"] = data;
            var modelStr = JSON.stringify({ type: "SqlData", args: data });
            if (this.initialRender == false) {
                setTimeout(function () { __doPostBack("", modelStr) }, 0);
            }
            this.initialRender = false;
            return {
                data: JSON.stringify(result),
                result: dm.dataSource.json,
                ejPvtData: obj.ejPvtData,
                count: dm.dataSource.json.length,
            }
        },
        processResponse: function (data, ds, query, xhr, changes) {
            var pvt = data.ejPvtData || {};
            var groupDs = data.groupDs;
            if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            var d = JSON.parse(data.data);
            if (d && d.action === "batch" && data.added) {
                changes.added = data.added;
                return changes;
            }
            if (pvt && pvt.aggregates && pvt.aggregates.length) {
                var agg = pvt.aggregates, args = {}, fn, res = {};
                if ('count' in data) args.count = data.count;
                if (data["result"]) args.result = data.result;
                if (data["aggregate"]) data = data.aggregate;
                for (var i = 0; i < agg.length; i++) {
                    fn = ej.aggregates[agg[i].type];
                    if (fn)
                        res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                }
                args["aggregates"] = res;
                data = args;
            }
            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups, args = {};
                if ('count' in data) args.count = data.count;
                if (data["aggregates"]) args.aggregates = data.aggregates;
                if (data["result"]) data = data.result;
                for (var i = 0; i < groups.length; i++) {
                    var level = null;
                    if (!ej.isNullOrUndefined(groupDs))
                        groupDs = ej.group(groupDs, groups[i]);
                    data = ej.group(data, groups[i], pvt.aggregates, level, groupDs);
                }
                if (args.count != undefined)
                    args.result = data;
                else
                    args = data;
                return args;
            }
            return data;
        },
    });
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.gridResize = function (instance) {
        this.$headerTable = instance.getHeaderTable();
        this.gridInstance = instance;
        this._colMinWidth = 15;
        this._$visualElement = $();
        this._currentCell = -1;
        this._allowStart = false;
        this._oldWidth = null;
        this._orgX = null;
        this._orgY = null;
        this._extra = null;
        this._expand = false;
        this._target = null;
        this._cellIndex = -1;
    }

    ej.gridFeatures.gridResize.prototype = {
        _mouseHover: function (e) {
            if (this._$visualElement.is(":visible"))
                return;
            this._allowStart = false;
            if ($(e.target).is(".e-headercelldiv"))
                e.target = e.target.parentNode;
            var $target = $(e.target);
			if ($(e.target).hasClass("e-filtericon") && ($(e.target).css("cursor") == "col-resize" || $(e.target).closest("tr").css("cursor") == "col-resize")) {
                $(e.target).css("cursor", "pointer");
                $(e.target).closest("tr").css("cursor", "pointer");
            }
            if ($target.hasClass("e-headercell")) {
                var _resizableCell = e.target;
                var location = _resizableCell.getBoundingClientRect(), _x = 0, _y = 0;
                if (e.type = "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }
                else if (e.type = "touchmove") {
                    _x = evt.originalEvent.changedTouches[0].clientX;
                    _y = evt.originalEvent.changedTouches[0].clientY;
                }
                else if (e.type = "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                    var _nlx = this.gridInstance.getHeaderContent().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                else
                    var _nlx = this.gridInstance.getHeaderTable().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 5)) || ((_x <= (location.left + 3)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
                    if (_x > location.left + 3)
                        var tempTarget = $(e.target).find(".e-headercelldiv");
                    else
                        var tempTarget = $(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
                    var windowScrollX = window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop;
                    var _lx = (this.gridInstance.element.find(".e-headercell").not('.e-detailheadercell').offset().left + 10) - windowScrollX;
                    if ((this.gridInstance.model.enableRTL && (_x <= _lx)) || (!this.gridInstance.model.enableRTL && (_x >= _lx))) {
                        if ((this.gridInstance.model.showStackedHeader || tempTarget.length) && $.inArray($(tempTarget).attr("data-ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1) {
                            this.gridInstance.model.showStackedHeader && $($target.parents('thead')).find('tr').addClass("e-resizedragicon");
                            !this.gridInstance.model.showStackedHeader && $target.parent().addClass("e-resizedragicon");
                            if ($(e.target).hasClass('e-stackedHeaderCell'))
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
                            else
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell,.e-detailheadercell").index(_resizableCell);
                            if (this.gridInstance.model.enableRTL)
                                this._currentCell = this._currentCell - 1;
                            this._allowStart = true;
                        }
                        else {
                            $target.parent().css("cursor", "pointer");
                            this._currentCell = -1;
                        }
                    }
                }
                else {
                    this.gridInstance.element.find(".e-columnheader").removeClass("e-resizedragicon");
                    this._currentCell = -1;
                }
            }
        },
        _start: function (_x, _y) {
            var _myrow = this.gridInstance.getHeaderTable().find(".e-columnheader"), _top;
            var _cells, _mycel;
            if ($(this._target).hasClass('e-stackedHeaderCell'))
                _cells = _myrow.find(".e-headercell").not(".e-hide");
            else
                _cells = _myrow.find(".e-headercell").not(".e-stackedHeaderCell,.e-hide");
            if (this._currentCell != -1 && this._currentCell < _cells.length)
                _mycel = _cells[this._currentCell];
            if (typeof (_mycel) == 'undefined')
                return;
            var _j = _mycel.getBoundingClientRect();
            _top = this._tableY = _j.top + parseInt(navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollTop : document.documentElement.scrollTop);
            if (this._allowStart) {
                var vElement = this._$visualElement = $(document.createElement('div')),
                _height = this.gridInstance.element.find(".e-gridcontent").first().height() + this.gridInstance.element.find(".e-gridheader").height();
                if (this.gridInstance.model.showStackedHeader && this.gridInstance.model.stackedHeaderRows.length > 0) {
                    var headerRow = this.gridInstance.getHeaderTable().find('tr.e-columnheader')
                    var lenght = headerRow.length;
                    var currentIndex = $(this._target).parent('tr')[0].rowIndex;
                    for (var i = 0; i < currentIndex; i++) {
                        _height = _height - $(headerRow[i]).height();
                    }
                    // _height = _height - $(".e-stackedHeaderRow").height();
                }
                vElement.addClass("e-reSizeColbg").appendTo(this.gridInstance.element).attr("unselectable", "on").css("visibility", "hidden");
                this.gridInstance._resizeTimeOut = setTimeout(function() {
                    vElement.css({ visibility: "visible", height: _height + 'px', cursor: 'col-resize', left: _x, top: _top, position: 'fixed' });
                }, 100);
                this._oldWidth = _mycel.offsetWidth;
                this._orgX = _x;
                this._orgY = _y;
                this._extra = _x - this._orgX;
                this._expand = true;
            }
            else {
                this._currentCell = -1;
            }
        },
        _mouseMove: function (e) {
            if (this._expand) {
                var _x = 0, _y = 0;
                if (e.type == "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }                
                else if (e.type == "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                else if (e.type == "touchmove") {
                    _x = e.originalEvent.changedTouches[0].clientX;
                    _y = e.originalEvent.changedTouches[0].clientY;
                }
                if ((_x == 0 && _y == 0) && navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                _x += document.documentElement.scrollLeft;
                e.preventDefault();
                this._moveVisual(_x);
            }
            else
                this._mouseHover(e);
        },
        _touchStart: function (e) {
            if (this._$visualElement.is(":visible"))
                return;
            this._allowStart = false;
            if ($(e.target).is(".e-headercelldiv"))
                e.target = e.target.parentNode;
            var $target = $(e.target);            
            if ($target.hasClass("e-headercell")) {
                var _resizableCell = e.target;
                var location = _resizableCell.getBoundingClientRect(), _x = 0, _y = 0;
                if (e.type == "touchstart") {
                    _x = e.originalEvent.changedTouches[0].clientX;
                    _y = e.originalEvent.changedTouches[0].clientY;
                }
                var gridInstChildren = this.gridInstance.element.children(".e-gridheader");
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                    var _nlx = this.gridInstance.getHeaderContent().width() + gridInstChildren.find(".e-columnheader").offset().left;
                else
                    var _nlx = this.gridInstance.getHeaderTable().width() + gridInstChildren.find(".e-columnheader").offset().left;
                if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 10)) || ((_x <= (location.left + 8)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
                    if (_x > location.left + 8)
                        var tempTarget = $(e.target).find(".e-headercelldiv");
                    else
                        var tempTarget = $(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
                    var windowScrollX = window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop;
                    var _lx = (this.gridInstance.element.find(".e-headercell").not('.e-detailheadercell').offset().left + 10) - windowScrollX;
                    if ((this.gridInstance.model.enableRTL && (_x <= _lx)) || (!this.gridInstance.model.enableRTL && (_x >= _lx))) {
                        if ((this.gridInstance.model.showStackedHeader || tempTarget.length) && $.inArray($(tempTarget).attr("data-ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1) {                            
                            if ($(e.target).hasClass('e-stackedHeaderCell'))
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
                            else
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell,.e-detailheadercell").index(_resizableCell);
                            if (this.gridInstance.model.enableRTL)
                                this._currentCell = this._currentCell - 1;
                            this._allowStart = true;
                        }
                        else {                            
                            this._currentCell = -1;
                        }
                    }
                }
                else {                    
                    this._currentCell = -1;
                }
            }
            if (this._allowStart) {
                this._target = $target;
                if (this.gridInstance.pluginName == "ejGrid" && this.gridInstance.model.allowResizing) {                    
                    if (this._triggerResizeEvents("resizeStart", _x))
                        return;
                } else if (this.gridInstance.pluginName == "ejTreeGrid" && this.gridInstance.model.allowColumnResize) {
                    if (this.gridInstance._triggerColumnResize("columnResizeStart", _x, e))
                        return;
                }
                var gridobj = this;
                _x += document.documentElement.scrollLeft;
                if (e.button != 2)
                    this._start(_x, _y);
                return false;
            }
            return true;
        },
        _getCellIndex: function (e) {
            var $target = $(e._target);
            var targetCell = e._target;
            var location = targetCell.getBoundingClientRect();
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            if (this._orgX < location.left + 5 + scrollLeft)
                targetCell = $(targetCell).prevAll(":visible:first")[0];
            var hCellIndex = targetCell.cellIndex;
            var cellIndex = hCellIndex;
            if (e.gridInstance.model.groupSettings.groupedColumns.length) {
                cellIndex = hCellIndex - e.gridInstance.model.groupSettings.groupedColumns.length;
            }
            return cellIndex;
        },
        _reSize: function (_x, _y) {
            // Function used for Resizing the column
            var proxy = this;
            var resized = false, $content;
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                this._initialTableWidth = this.gridInstance.getHeaderTable().first().parent().width() + this.gridInstance.getHeaderTable().last().parent().width();
            else
                this._initialTableWidth = this.gridInstance.getHeaderTable().parent().width();
            if (this.gridInstance.model.enableRTL && (this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid))
                this._currentCell = this._currentCell - 1;
            else
                !this.gridInstance.model.enableRTL && this._getResizableCell();
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0)
                var _rowobj = this.gridInstance.getHeaderTable().find('thead');
            else
                var _rowobj = $(this._target).parents('thead');
            if (this._currentCell != -1 && this._expand) {
                this._expand = false;
                var _childTH = $(this._target).hasClass('e-stackedHeaderCell') ? _rowobj.find(".e-headercell:not(.e-detailheadercell)").filter(":visible") : _rowobj.find(".e-headercell:not(.e-detailheadercell,.e-stackedHeaderCell)").filter(":visible");
                var _outerCell = _childTH[this._currentCell];
                var _oldWidth = _outerCell.offsetWidth;
                var _extra = _x - this._orgX;
                if (this.gridInstance.model.enableRTL)
                    _extra = -_extra;
                //Check whether the column minimum width reached
                if (parseInt(_extra) + parseInt(_oldWidth) > this._colMinWidth) {
                    if (_extra != 0)
                        _rowobj.css("cursor", 'default');
                     var $prevheaderCol, oldColWidth;
                    if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
                     var $prevheaderCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
                     if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                     this.gridInstance._detailColsRefresh();
                    $prevheaderCols = this.gridInstance._$headerCols;
                   }
                    var $prevheaderCol = $prevheaderCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                    var oldColWidth = parseInt($prevheaderCol[0].style.width);
                   }
                    this._resizeColumnUsingDiff(_oldWidth, _extra);
                    $content = this.gridInstance.element.find(".e-gridcontent").first();
                    var scrollContent = $content.find("div").hasClass("e-content");                    
                    var browser = !ej.isIOSWebView() && this.gridInstance.getBrowserDetails();
                    if (browser && browser.browser == "msie" && this.gridInstance.model.allowScrolling) {
                        var oldWidth = this.gridInstance.getContentTable().width(), newwidth = this.gridInstance._calculateWidth();
                        if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0) {
                         	if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
								this.gridInstance.getFooterTable().last().width(newwidth - this.gridInstance.getFooterContent().find(".e-frozenfootertdiv").width());
                        }
                        else {
                            if (newwidth > oldWidth) {                               
                                this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().width(newwidth);
                            }
                        }
                        if (parseInt(browser.version, 10) > 8 && this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                            if (newwidth > oldWidth) {
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", (20 / $content.find("table").first().width()) * 100 + "%");
                            }
                            else {
                                this.gridInstance.getContentTable().css("width", "100%");
                                this.gridInstance._groupingAction(true);
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", ((this.gridInstance.getHeaderTable().find("colgroup").find("col").first().width() / $content.find("table").first().width()) * 100).toFixed(2) + "%");
                            }
                        }
                        this.gridInstance.getHeaderTable().parent().scrollLeft($content.find(".e-content").scrollLeft() - 1);
                    }
                    this.gridInstance._colgroupRefresh();
                    if (this.gridInstance.model.allowTextWrap){
						this.gridInstance._isResized = true;
                        this.gridInstance.rowHeightRefresh();
					}
                    if (this.gridInstance.model.groupSettings.groupedColumns.length && !this.gridInstance.model.isEdit)
                        this.gridInstance._recalculateIndentWidth();
                    if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'normal') {
                        if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
                            var $headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
                            var $ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
                            if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                                this.gridInstance._detailColsRefresh();
                                $headerCols = this.gridInstance._$headerCols;
                                $ContentCols = this.gridInstance._$contentCols;
                            }
                            var nextCell = this._currentCell + 1;
                            var $headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) ? nextCell : nextCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                            var newWidth = parseInt($headerCol[0].style.width) + (oldColWidth - parseInt($prevheaderCol[0].style.width)), $ContentCol;
                            if (newWidth < this._colMinWidth)
                                newWidth = this._colMinWidth;
                            $headerCol.width(newWidth);
                            if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                                var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                                var $colGroup = $tables.find("colgroup");
                                var colCount = this.gridInstance.getVisibleColumnNames().length;
                                if (this.gridInstance.getContentTable().find('.e-detailrow').length)
                                    $colGroup = $colGroup.not($tables.find(".e-detailrow").find("colgroup")).get();
                                for (var i = 0 ; i < $colGroup.length; i++) {
                                    var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
                                    if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
                                    $(cols[nextCell]).width(newWidth);
                                }
                            }
                            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                                if (nextCell >= 0 && nextCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
                                    return;
                                $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(nextCell);
                            }
                            else
                                $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) ? nextCell : nextCell + this.gridInstance.model.groupSettings.groupedColumns.length);
                            $ContentCol.width(newWidth);
                            this.gridInstance._findColumnsWidth();
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(_outerCell).is(":last-child") && this.gridInstance.pluginName == "ejGrid") {
                                var val = $prevheaderCol.width() - oldColWidth;
                                var frozenWidth = this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width() + val;
                                var movableWidth = this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width() - val;
                                var marginLeft = parseInt(this.gridInstance.getHeaderContent().find('.e-movableheader')[0].style["margin-left"]) + val;
                                this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(frozenWidth);
                                this.gridInstance.getContent().find('.e-frozencontentdiv').width(frozenWidth);
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                    this.gridInstance.getFooterContent().find('.e-frozenfooterdiv').width(frozenWidth);
                                this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width(movableWidth);
                                this.gridInstance.getContent().find('.e-movablecontentdiv').width(movableWidth);
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                    this.gridInstance.getFooterContent().find('.e-movablefooterdiv').width(movableWidth);
                                this.gridInstance.getHeaderContent().find('.e-movableheader').css("margin-left", marginLeft);
                                this.gridInstance.getContent().find('.e-movablecontent').css("margin-left", marginLeft);
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                    this.gridInstance.getFooterContent().find('.e-movablefooter').css("margin-left", marginLeft);
                            }
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(_outerCell).is(":last-child") && this.gridInstance.pluginName == "ejTreeGrid") {
                                var val = $prevheaderCol.width() - oldColWidth;
                                var frozenWidth = this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width() + val;
                                var movableWidth = this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width() - val;
                                var marginLeft = parseInt(this.gridInstance.getHeaderContent().find('.e-movableheader')[0].style["margin-left"]) + val;
                                this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(frozenWidth);
                                this.gridInstance.getHeaderContent().find('.e-movableheader').css("margin-left", marginLeft);
                                this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width(movableWidth);
                                this.gridInstance.getContent().find(".e-frozencontainer").width(frozenWidth).next().css("margin-left", marginLeft + "px");
                                this.gridInstance.getContent().find('.e-movablecontent').width(movableWidth);
                                if (this.gridInstance.model.showTotalSummary) {
                                    this.gridInstance._$totalSummaryRowContainer.find(".e-frozenfooterdiv").width(frozenWidth);
                                    this.gridInstance._$totalSummaryRowContainer.find(".e-movablefooter").css("margin-left", marginLeft + "px");
                                }
                                this.gridInstance._renderScroller(true);                             
                            }

                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(this._target).parent('tr').parents('div:first').hasClass('e-frozenheaderdiv') && this.gridInstance.pluginName == "ejGrid") {
                                this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(this._newWidth);
                                this.gridInstance.getContent().find('.e-frozencontentdiv').width(this._newWidth);
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                    this.gridInstance.getFooterContent().find('.e-frozenfooterdiv').width(this._newWidth);
                            }
                        }
                        else if (!this.gridInstance.model.scrollSettings.frozenColumns) {
                            var oldTableWidth = this.gridInstance.getHeaderTable().width();
                            if (this.gridInstance.pluginName != "ejTreeGrid" && (!this.gridInstance.model.allowScrolling && !this.gridInstance.model.isResponsive))
                                $("#" + this.gridInstance._id).css("width", oldTableWidth + parseInt(_extra));
                            else {
                               // this.gridInstance.getHeaderTable().css("width", oldTableWidth + parseInt(_extra));
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable()))
                                    this.gridInstance.getFooterTable().css("width", oldTableWidth + parseInt(_extra));
                            }
                            this.gridInstance.model.scrollSettings.width += parseInt(_extra);
                            if (this.gridInstance.getContent().width() > this.gridInstance.getContentTable().width()) {
                                this.gridInstance.getContentTable().addClass('e-tableLastCell');
                                this.gridInstance.getHeaderTable().addClass('e-tableLastCell');
                            }
                            else {
                                this.gridInstance.getContentTable().removeClass('e-tableLastCell');
                                this.gridInstance.getHeaderTable().removeClass('e-tableLastCell');
                            }
                        }
                    }
                    if (!(browser.browser == "msie") && browser && this.gridInstance.model.allowScrolling && this.gridInstance.model.scrollSettings.frozenColumns == 0) {
                        if (this.gridInstance.model.columnLayout != "fixed"){
						    this.gridInstance.getHeaderTable().width("100%");
                            this.gridInstance.getContentTable().width("100%");
						}
                        if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable()))
                            this.gridInstance.getFooterTable().width("100%");
                        var tableWidth = this.gridInstance._calculateWidth();
                        if (tableWidth <= this.gridInstance.getContentTable().width() || this.gridInstance.getHeaderTable().width() > this.gridInstance.getContentTable().width()) {
                            if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable()))
                                this.gridInstance.getFooterTable().width(tableWidth);
                        }
                    }
                    if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'default') {
                        var cellIndex = this._currentCell;
                        var target = $(this._target), columnIndex = [], col = [];
                        var newWidth = _oldWidth + _extra;
                        var args = {};
                        if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                            var rowindex = target.parent(".e-stackedHeaderRow").index(),
                            stackedHeaderText = target.text(),
                            stackedHeaderCol = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns,stackedHeaderColumns;
                            for(var i=0;i<stackedHeaderCol.length;i++){
                                if(stackedHeaderCol[i].headerText == stackedHeaderText)
                                    stackedHeaderColumns = stackedHeaderCol[i].column;
                            }
                            var columns = stackedHeaderColumns | [];
                            if (!ej.isNullOrUndefined(stackedHeaderColumns) && !(stackedHeaderColumns instanceof Array))
                                columns = stackedHeaderColumns.split(",");
                            for (var i = 0 ; i < columns.length; i++) {
                                var index = this.gridInstance.getColumnIndexByField(columns[i]);
                                columnIndex.push(index)
                                col.push(this.gridInstance.model.columns[index]);
                            }
                            args = { columnIndex: columnIndex, column: col, oldWidth: _oldWidth, newWidth: newWidth };
                        }
                        else
                        args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], oldWidth: _oldWidth, newWidth: newWidth };
                        this.gridInstance._trigger("resized", args);
                    }
                    if (this.gridInstance.model.allowScrolling) {
                        this.gridInstance.getScrollObject().refresh(this.gridInstance.model.scrollSettings.frozenColumns > 0);
                        if (this.gridInstance.model.isResponsive && this.gridInstance.model.minWidth)
                            this.gridInstance.windowonresize();
                        if (!scrollContent && $content.find("div").hasClass("e-content"))
                            this.gridInstance.refreshScrollerEvent();
                        this.gridInstance._isHscrollcss();
                    }
                }

            }

            this._target = null;
            this._$visualElement.remove();
            this._expand = false;
            this._currentCell = -1;
            this._allowStart = false;

        },
        _getFrozenResizeWidth: function () {
            var $frozenColumnsCol = this.gridInstance.getHeaderTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0), width = 0;
            for (var i = 0; i < $frozenColumnsCol.length; i++) {
                if ($frozenColumnsCol.eq(i).css("display") != "none")
                    width += parseInt($frozenColumnsCol[i].style.width.replace("px", ""));
            }
            return width;
        },
        _diaplayFinder: function () {
            return $(this).css('display') != 'none';
        },
        _resizeColumnUsingDiff: function (_oldWidth, _extra) {
            var proxy = this;			
            this._currntCe = this._currentCell;
            this._widthchanges(_oldWidth,_extra);
			var _newWidth = this._newWidth, _extraVal = this._extra, $headerCols = this._$headerCols, $ContentCols = this._$ContentCols, $ContentCol, $headerCol = this._$headerCol, $frozenCols = this._$frozenCols, $footerCol; 		
            if (this.gridInstance.pluginName == "ejTreeGrid" && _extra > 0 && !ej.isNullOrUndefined(this.gridInstance._currentCell) && this.gridInstance.model.columns[this.gridInstance._currentCell].isFrozen == true) {
                var width = this.gridInstance._frozenWidth();
                //if resizing exceeds the grid width
                if (width > this.gridInstance._gridWidth - 18 - 50) {//container width-scrollerwidth- minimum width of unfrozen column
                    return
                }
            }
            if (_newWidth > 0 && _extra != 0) {
                if (_newWidth < this._colMinWidth)
                    _newWidth = this._colMinWidth;
                if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
                    var nextCol = $headerCol.next();
                    var isFrozenLastCell = this.gridInstance.model.scrollSettings.frozenColumns && this._currentCell == this.gridInstance.model.scrollSettings.frozenColumns - 1 ? true : false;
                    if (isFrozenLastCell)
                        nextCol = $headerCols.eq(this.gridInstance.model.scrollSettings.frozenColumns);
                    if ((isFrozenLastCell || !$headerCol.is(":last-child")) && (nextCol.width() + ($headerCol.width() - _newWidth) <= this._colMinWidth))
                        _newWidth = $headerCol.width() + (nextCol.width() - this._colMinWidth);
                }
                var _extra = _newWidth - _oldWidth;
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                    if (this._currentCell >= 0 && this._currentCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
                        return;
                    $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(this._currentCell);
                }
                else
                    $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length);
                if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    this._resizeStackedHeaderColumn($(this._target).parent('tr'), _extraVal, this._currntCe);
                }
                else
                    $headerCol.outerWidth(_newWidth);
                if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable())) {
                        this._$footerCols = this.gridInstance.getFooterTable().find('colgroup').find("col");
                        var colCount = this.gridInstance.model.columns.length;
                        if (this._$footerCols.length > colCount) this._$footerCols.splice(0, (this._$footerCols.length - colCount));
                        var $footerCols = this._$footerCols,
                        $footerCol = $footerCols.filter(this._diaplayFinder).eq(this._currentCell);
                        if(!($(this._target).parent('tr').hasClass('e-stackedHeaderRow'))){
							$footerCol.outerWidth(_newWidth);
                        }
                        else{
                            for (var i = 0; i < this._changedcell.length; i++) {
                                $footerCol = $footerCols.filter(this._diaplayFinder).eq(i);
                                var width = parseInt((_extraVal)) + parseInt($footerCols[i].style.width);
                                if (width < this._colMinWidth)
                                width = this._colMinWidth
                                $footerCol.outerWidth(width);
                            }
                        }
                }
                if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var $colGroup = $tables.find("colgroup");
                        for (var i = 0; i < this._changedcell.length; i++) {
                            var cellIndex = this._changedcell[i];
                            for (var j = 0 ; j < $colGroup.length; j++) {
                                var visibleCols = $($colGroup[j]).children().filter(this._diaplayFinder);
                                var width = parseInt((_extraVal)) + parseInt(visibleCols[cellIndex].style.width);
                                if (width < this._colMinWidth)
                                    width = this._colMinWidth
                                $(visibleCols[cellIndex]).width(width);
                            }
                        }
                    }
                    var length = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder).length;
                    for (var i = 0; i < this._changedcell.length; i++) {
                        var $conCol = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder)[this._changedcell[i]]
                        var width = parseInt((_extraVal)) + parseInt($conCol.style.width);
                        if (width < this._colMinWidth)
                            width = this._colMinWidth
                        $($conCol).outerWidth(width);
                        if (this.gridInstance.model.isEdit && (this.gridInstance.model.allowGrouping && this.gridInstance.model.groupSettings.groupedColumns.length == 0)) {
                            var $sEditCol = this.gridInstance.getContentTable().find(".gridform").find("colgroup col").filter(this._diaplayFinder)[this._changedcell[i]];
                            $($sEditCol).outerWidth(width);
                        }
                    }
                }
                else {
                    if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var $colGroup = $tables.find("colgroup");
                        var cellIndex = this._currentCell;
                        var colCount = this.gridInstance.getVisibleColumnNames().length;
                        if (this.gridInstance.getContentTable().find('.e-detailrow').length)
                            $colGroup = $colGroup.not($tables.find(".e-detailrow").find("colgroup")).get();
                        for (var i = 0 ; i < $colGroup.length; i++) {
                            var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
                            if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
                            $(cols[cellIndex]).width(_newWidth);
                        }
                    }
                    $ContentCol.outerWidth(_newWidth);
                    if (this.gridInstance.model.isEdit) {
                        var $editableRow = this.gridInstance.getContentTable().find(".e-editedrow,.e-addedrow");
                        var $editCols = $editableRow.find("table").find("colgroup col");
                        var addCol;
                        if ($editableRow.hasClass("e-addedrow") && this.gridInstance.model.groupSettings.groupedColumns.length)
                            addCol = this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length - 1;
                        else
                            addCol = this._currentCell;
                        var $editCol = $editCols.filter(this._diaplayFinder).eq(addCol);
                        $editCol.outerWidth(_newWidth);
                    }
                }
                this.gridInstance._findColumnsWidth();
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns && ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'nextcolumn' && this.gridInstance.pluginName == "ejGrid") {
                    var frozenColumns = this.gridInstance.getContentTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings.frozenColumns)
                        , width = 0, direction;
                    for (i = 0; i < frozenColumns.length; i++)
                        width += frozenColumns[i].style.display == 'none' ? 0 : parseInt(frozenColumns[i].style.width.replace("px", ""));
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
                    direction = this.gridInstance.model.enableRTL ? "margin-right" : "margin-left";
                    this.gridInstance.getContent().find(".e-frozencontentdiv").width(width).next().css(direction, width + "px");
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css(direction, width + "px");
                    (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent())) && this.gridInstance.getFooterContent().find(".e-frozenfooterdiv").width(width);
                }
                if (this.gridInstance.pluginName == "ejTreeGrid" && ((!ej.isNullOrUndefined(this.gridInstance._currentCell) && this.gridInstance.model.columns[this.gridInstance._currentCell].isFrozen == true && ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'nextcolumn') || (!this.gridInstance._isFrozenStackedResize && this.gridInstance._isStackedResize && this.gridInstance._frozenColumnsLength > 0))) {
                    var width = this.gridInstance._frozenWidth();                    
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
                    this.gridInstance.getContent().find(".e-frozencontainer").width(width).next().css("margin-left", width + "px");
                        this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css("margin-left", width + "px");
                        if (this.gridInstance.model.showTotalSummary) {
                            this.gridInstance._$totalSummaryRowContainer.find(".e-frozenfooterdiv").width(width);
                            this.gridInstance._$totalSummaryRowContainer.find(".e-movablefooter").css("margin-left", width + "px");
                        }
                        this.gridInstance._findColumnsWidth();
                        this.gridInstance._renderScroller(true);
                     }
			    if(!(this.gridInstance.getHeaderTable().find(".e-columnheader").hasClass("e-resizedragicon")))
                    this.gridInstance.getHeaderTable().find(".e-columnheader").css("cursor", "default");
            }
        },
        _resizeStackedHeaderColumn: function (currentTr, extra, currentCell) {
            // var currentIndex = this._currntCe;
            this._changedcell = [];
            var headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
            var preCol = 0, limit = 0, currentTh = headerCells[currentCell], currentSpan = $(currentTh).attr('colspan'), commonExtra = extra / currentSpan, tr = $(currentTh).parent('tr');
            var nextTr = tr.next();
            var currentIndex = currentTh.cellIndex;
            if (this.gridInstance.model.groupSettings.showGroupedColumn) {
                limit = this.gridInstance.model.groupSettings.groupedColumns.length;
                preCol += limit
            }
            while (currentIndex > limit) {
                currentIndex--;
                var th = $(tr).children('th').not(".e-detailheadercell")[currentIndex];
                preCol += parseInt($(th).attr('colspan'));
            }
            this._currentCell = preCol;
            var length = preCol + parseInt(currentSpan);
            for (var i = preCol; i < length; i++) {
                var $colG = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder)[i];
                this._changedcell.push(i - limit)
                var width = parseInt(extra) + parseInt($colG.style.width);
                if (width < this._colMinWidth)
                    width = this._colMinWidth;
                $($colG).outerWidth(width);
             }
        },
        _triggerResizeEvents: function (event, _x) {
            var _rowobj = this.gridInstance.getHeaderTable().find(".e-columnheader");
            var _childTH = _rowobj.find(".e-headercell").filter(":visible");
            var cellIndex = this._cellIndex,currentCell;
            var target = $(this._target), columnIndex = [], col = [];
            if (event == "resizeStart") {
                this._orgX = _x;
                cellIndex = this._cellIndex = this._getCellIndex(this, _x);
            }
            if (this.gridInstance.model.enableRTL && (this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid))
                 currentCell = this._currentCell - 1;
            else{
				 !this.gridInstance.model.enableRTL && this._getResizableCell();
				 currentCell = this._currentCell;
			}
            var _outerCell = _childTH[currentCell];
            var _oldWidth = _outerCell.offsetWidth;
            if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                var rowindex = target.parent(".e-stackedHeaderRow").index(),
                stackedHeaderText = target.text(),
                stackedHeaderCol = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns,stackedHeaderColumns;
                for(var i=0;i<stackedHeaderCol.length;i++){
                    if(stackedHeaderCol[i].headerText == stackedHeaderText)
                        stackedHeaderColumns = stackedHeaderCol[i].column;
                }
                var columns = stackedHeaderColumns | [];
                if (!ej.isNullOrUndefined(stackedHeaderColumns) && !(stackedHeaderColumns instanceof Array))
                    columns = stackedHeaderColumns.split(",");
                for (var i = 0 ; i < columns.length; i++) {
                    var index = this.gridInstance.getColumnIndexByField(columns[i]);
                    columnIndex.push(index)
                    col.push(this.gridInstance.model.columns[index]);
                }
            }
            if (event == "resizeStart") {
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: target, oldWidth: _oldWidth };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth };
                return this.gridInstance._trigger("resizeStart", args);
            }
            else {
                var _childth = _rowobj.find(".e-headercell").not(".e-detailheadercell").filter(":visible");
                var _extra = _x - this._orgX;
				this._widthchanges(_oldWidth,_extra);
                this.gridInstance._colgroupRefresh();
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: $(_outerCell), oldWidth: _oldWidth, newWidth: this._newWidth, extra: _extra };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth, newWidth: this._newWidth, extra: _extra };
                return this.gridInstance._trigger("resizeEnd", args);
            }
        },
		_widthchanges:function(_oldWidth,_extra){
		     	var $headerCols = this._$headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
                var $ContentCols = this._$ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
                if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                    this.gridInstance._detailColsRefresh();
                    $headerCols = this._$headerCols =this.gridInstance._$headerCols;
                    $ContentCols = this._$ContentCols =this.gridInstance._$contentCols;
                }
                var $headerCol = this._$headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                        , $ContentCol, $footerCol, $frozenCols = this._$frozenCols = $headerCols.slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0);
                var colWidth = $headerCol[0].style.width, isPercent = colWidth.indexOf("%") != -1;
                var _inlineWidth = (!colWidth || isPercent)? $(this._target).outerWidth() : colWidth;
                var indent = !isPercent ? _oldWidth / parseInt(_inlineWidth) : 1;
                this._extra = _extra / indent;
                this._newWidth = parseInt(_extra) + parseInt(_inlineWidth);
		},
        _mouseUp: function (e) {
            if (this.gridInstance._resizeTimeOut){
                clearTimeout(this.gridInstance._resizeTimeOut);
                this.gridInstance._resizeTimeOut = 0;
            }
            if (this._expand) {
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                if (e.type == "touchend") {
                    _x = e.originalEvent.changedTouches[0].clientX;
                    _y = e.originalEvent.changedTouches[0].clientY;
                }
                if (this.gridInstance.model.allowResizing && (this.gridInstance.getHeaderTable().find(".e-columnheader").hasClass("e-resizedragicon") || e.type == "touchend")) {
                    if (this._triggerResizeEvents("resizeEnd", _x)) {
                        this.gridInstance.element.find(".e-reSizeColbg").remove();
                        return;
                    }
                }
                _x += document.documentElement.scrollLeft;
                this._reSize(_x, _y);
                if (!ej.isNullOrUndefined(this._currntCe) && this._currntCe >= 0){
					var vCols = ej.DataManager(this.gridInstance.model.columns).executeLocal(new ej.Query().where("visible","equal",true));
					var currCol = vCols[this._currntCe];
					var inx = this.gridInstance.model.columns.indexOf(currCol)
					if(vCols.length != this.gridInstance.model.columns.length)
						this.gridInstance.model.columns[inx].width = this.gridInstance.columnsWidthCollection[inx];
					else this.gridInstance.model.columns[this._currntCe].width = this.gridInstance.columnsWidthCollection[this._currntCe];
				}
            }
        },
        _getResizableCell: function () {
            var row, frozenColumns = this.gridInstance.model.scrollSettings.frozenColumns;
            if ($(this._target).hasClass('e-stackedHeaderCell'))
                row = this.gridInstance.getHeaderTable().find(".e-columnheader");
            else
                row = this.gridInstance.getHeaderTable().find(".e-columnheader").not('.e-stackedHeaderRow');
            var cell = row.find(".e-headercell").not(".e-hide,.e-detailheadercell");
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            //To identify whether it is previous cell to final frozen cell
            if (frozenColumns && this._currentCell != -1 && this._currentCell == frozenColumns - 1) {
                var cellPoint = cell[this._currentCell].getBoundingClientRect().left + scrollLeft + 5,
                    isFrozenPreviousCell = cellPoint > this._orgX ? true : false;
            }
            if (!frozenColumns || this._currentCell != frozenColumns - 1 || isFrozenPreviousCell){
				var inx = $(this._target).closest(".e-columnheader").index();
				row = $(this._target).hasClass('e-stackedHeaderCell') ? row[inx] : row;
				var cell = $(row).find(".e-headercell").not(".e-hide,.e-detailheadercell");
				for (var i = 0; i < cell.length; i++) {
					var point = cell[i].getBoundingClientRect();
					var xlimit = point.left + scrollLeft + 5;
					if (xlimit > this._orgX && cell[i].offsetHeight + point.top >= this._orgY) {
						this._currentCell = i - 1;
						return;
					}
					if (i == cell.length - 1 || (this.gridInstance.model.showStackedHeader && $(this._target).get(0) === cell[i])) {
						this._currentCell = i;
						return;
					}
				}
			}
        },
        _moveVisual: function (_x) {
            /// Used to move the visual element in mouse move
            var _bounds = this.gridInstance.getHeaderContent().find("div").first()[0].getBoundingClientRect();
            if ((_bounds.left + document.documentElement.scrollLeft + _bounds.width < _x) || (_x < _bounds.left + document.documentElement.scrollLeft))
                this._$visualElement.remove();
            else if (this._currentCell != -1)
                this._$visualElement.css({ left: _x, top: this._tableY });
        },
        _mouseDown: function (e) {
            if (this._allowStart && ($(e.target).closest("tr").hasClass("e-resizedragicon"))) {
                this._target = e.target;
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY - (window.pageYOffset || document.body.scrollTop || 0);
                }
                if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").hasClass("e-resizedragicon")) {
                    if ($(e.target).is(".e-headercelldiv"))
                        e.target = e.target.parentNode;
                    this._target = e.target;
                    if (this._triggerResizeEvents("resizeStart", _x))
                        return;
                }
                var gridobj = this;
                _x += document.documentElement.scrollLeft;
                if (e.button != 2)
                    this._start(_x, _y);
                return false;
            }
            return true;
        },
        _columnResizeToFit: function (e) {
            var resize = this.gridInstance.getHeaderTable().find(".e-columnheader").filter(function (e) {
                return $(this).css("cursor") == "col-resize";
            });
            if (this.gridInstance.model.allowResizeToFit && resize.length) {
                if ($(e.target).is(".e-headercelldiv"))
                    e.target = e.target.parentNode;
                var $target = $(e.target);
                var headerCells, preCol = 0, indent = 0;
                if ($target.hasClass('e-stackedHeaderCell'))
                    headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
                else
                    headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-stackedHeaderCell,.e-detailheadercell");
                this._target = $target;
                if ($target.hasClass("e-headercell")) {
                    var targetCell = e.target;
                    var hCellIndex = $.inArray(targetCell, headerCells);
                    var cellIndex = hCellIndex;
                    this._orgX = e.pageX;
                    if(!this.gridInstance.model.enableRTL) 
						this._getResizableCell();
					else
						this._currentCell = hCellIndex;
                    if (hCellIndex != this._currentCell) {
                        hCellIndex = cellIndex = this._currentCell;
                        targetCell = e.target.previousSibling;
                    }
                    var currentTh = headerCells.filter(":visible")[cellIndex], changesCellIndex = [], changesFinalWdith = [], changesOldWidth = [];
                    indent = this.gridInstance.model.groupSettings.groupedColumns.length;
                    if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) || !ej.isNullOrUndefined(this.gridInstance.model.childGrid))
                        indent += 1;
                    if ($(targetCell).parent("tr").hasClass('e-stackedHeaderRow')) {
                        var currentSpan = $(currentTh).attr('colspan'), tr = $(currentTh).parent('tr'), tHeadIndex = currentTh.cellIndex;
                        var nextTr = tr.next();
                        while (tHeadIndex > indent) {
                            tHeadIndex--
                            var th = $(tr).children('th')[tHeadIndex];
                            preCol += parseInt($(th).attr('colspan'))
                        };
                        var length = preCol + parseInt(currentSpan);
                    }
                    else {

                        preCol = cellIndex; length = cellIndex + 1;
                    }
                    var finalWidth = 0, headerWidth = 0, contentWidth = 0, argCols = [], argExtra = [];
                    if (preCol != -1) {
                        var hiddenLen = headerCells.slice(0, preCol + 1).filter(".e-hide").length;
                        var args = { columnIndex: preCol + hiddenLen, column: this.gridInstance.model.columns[preCol + hiddenLen], target: $target, oldWidth: oldWidth };
                        this.gridInstance._trigger("resizeStart", args);
                        for (var i = preCol; i < length; i++) {
                            hiddenLen = headerCells.slice(0, i + 1).filter(".e-hide").length;
                            contentWidth = this._getContentWidth(i + hiddenLen);
                            var $cellDiv = this.gridInstance.getHeaderTable().find('.e-headercell:not(.e-hide, .e-stackedHeaderCell)').children(".e-headercelldiv").eq(i);
                            headerWidth = this._getHeaderContentWidth($cellDiv);
                            finalWidth = headerWidth > contentWidth ? headerWidth : contentWidth;
                            finalWidth += parseInt(($cellDiv.css("padding-left"), 10) + ($cellDiv.css("padding-right"), 10));
                            var oldWidth = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder).eq(i + indent).width();
                            finalWidth = oldWidth > finalWidth ? finalWidth : (this._colMinWidth < finalWidth ? finalWidth : this._colMinWidth);

                            var headerCols = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder);
                            if(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
                                headerCols.splice(0, 1);
                            headerCols.eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                                var $colGroups = this.gridInstance.getContentTable().find('.e-recordtable').find('colgroup');
                                var proxy = this;
                                $.each($colGroups, function (indx, colgroup) {
                                    $(colgroup).find('col').filter(proxy._diaplayFinder).eq(i).width(finalWidth);
                                });
                            }
                            var contentCols = this.gridInstance.getContentTable().find('col').filter(this._diaplayFinder);
                            if(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
                                contentCols.splice(0, 1);
                            contentCols.eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.isEdit) {
                                var $editableCol = this.gridInstance.getContentTable().find(".e-editedrow").find("col");
                                var $form = this.gridInstance.element.find(".gridform");
                                for (var j = 0; j < $form.length; j++) {
                                   var $editableCol = $($form[j]).find("col")
                                   $editableCol.eq(i + indent).width(finalWidth);
                               }
                            }
                            argCols.push(this.gridInstance.model.columns[i + hiddenLen]);
                            argExtra.push(Math.abs(finalWidth - oldWidth))
                            changesCellIndex.push(i + hiddenLen); changesFinalWdith.push(finalWidth); changesOldWidth.push(oldWidth);
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 || (this.gridInstance.model.groupSettings.groupedColumns.length && this.gridInstance.model.isEdit)) {
                                var colIndex = i + hiddenLen;
                                this.gridInstance.columnsWidthCollection[colIndex] = finalWidth;
                                this.gridInstance.setWidthToColumns();
                                if (this.gridInstance.model.scrollSettings.frozenColumns <= colIndex + 1) {
                                    this.gridInstance.getHeaderContent().find(".e-movableheader").css("margin-left", finalWidth);
                                    this.gridInstance.getContent().find(".e-movablecontent").css("margin-left", finalWidth);
                                    if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                        this.gridInstance.getFooterContent().find(".e-movablefooter").css("margin-left", finalWidth);
                                }
                            }
                        }

                    }
                    this.gridInstance._colgroupRefresh();
                    this.gridInstance._recalculateIndentWidth();
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resizeEnd", args);
                    for (var i = 0; i < changesCellIndex.length; i++) {
                        this.gridInstance.columnsWidthCollection[changesCellIndex[i]] = changesFinalWdith[i];
                        this.gridInstance.model.columns[changesCellIndex[i]]["width"] = changesFinalWdith[i];
                    }
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resized", args);
                    if (this.gridInstance.model.summaryRows.length > 0)
                        this.gridInstance._summaryColRrefresh();
					this.gridInstance._findColumnsWidth();
                }				
            }
        },
        _getContentWidth: function (cellindx) {
            var contentWidth = 0;
            var $span = ej.buildTag('span', {}, {}), proxy = this.gridInstance, tdWidth;
            if (!ej.isNullOrUndefined(proxy._gridRows)) {
                var rows = proxy._gridRows;
                if (proxy.model.scrollSettings.frozenColumns && proxy.model.currentViewData.length && cellindx >= proxy.model.scrollSettings.frozenColumns) {
                    rows = rows[1];
                    cellindx = cellindx - proxy.model.scrollSettings.frozenColumns;
                }
                $.each(rows, function (indx, row) {
                    if ($(row).is('.e-row,.e-alt_row') && !$(row).is('.e-editedrow')) {
					    var td = $(row).find('td.e-rowcell').eq(cellindx);
					    var content = $(td).html();
					    if (proxy.model.columns[cellindx]["commands"])
					        $span.html($(content).children());
					    else if (td.hasClass("e-validError"))
					        $span.html($(content).attr("value"));
					    else
						    $span.html(content);
					    $(td).html($span);
						tdWidth = td.find('span:first').width() > 0 ? td.find('span:first').width() + parseFloat(td.css("padding-left")) + parseFloat(td.css("padding-right")) : td.find('span:first').width();
					    if (tdWidth > contentWidth)
						    contentWidth = tdWidth;
					    $(td).html(content);
                    }
				});
			}
            proxy._refreshUnboundTemplate(this.gridInstance.getContentTable());
            return contentWidth;
        },
    _getHeaderContentWidth: function ($cellDiv) {
            var headerWidth = 0, $span = ej.buildTag('span', {}, {});
			var IE = this.gridInstance.getBrowserDetails().browser == "msie" ;
			if(IE)
			    $span.css("position","absolute");
            var content = $cellDiv.html();
            $span.html(content);
            $cellDiv.html($span);
            headerWidth = $cellDiv.find('span:first').width() + parseFloat($cellDiv.css("padding-left")) + parseFloat($cellDiv.css("padding-right"));
			if(IE)
                headerWidth += 2;
            if(this.gridInstance.model.allowFiltering && (this.gridInstance.model.filterSettings.filterType == "menu" || this.gridInstance.model.filterSettings.filterType == "excel")){
                var filter = $cellDiv.parent().find(".e-filtericon");
                headerWidth = headerWidth + filter.width() + 10;
				if(filter.length)
				headerWidth += parseFloat(filter.css("margin-left"));
			}
            $cellDiv.html(content);
            return headerWidth;
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.ExcelFilter = ej.ExcelFilter || {};
    ej.excelFilter = function (options) {
		ej.loadLocale("ejExcelFilter");
        this._ctrlInstance = options["instance"];
        this.id = this._ctrlInstance._id;
        this._dialogContainer = null;
        this._showSort = options["showSortOptions"] || false;
        this._interDeterminateState = options["interDeterminateState"] || false;
        this._maxCount = ej.isNullOrUndefined(options["maxFilterLimit"]) ? 1000 : options["maxFilterLimit"];
        this._formatFiltering = true;
        this._locale = this._ctrlInstance.model.locale || "en-US";
        this.localizedLabels = this._getLocalizedLabel();
        this._filterHandler = options["filterHandler"] || null;
        this._searchHandler = this._ctrlInstance.model.searchSettings || null
		this._cancelHandler = options["cancelHandler"] || null;
		this._customFilterHandler = options["customFilterHandler"] || null;
        this._cssClass = options["cssClass"] || null;
        this._matchCase = options["allowCaseSensitive"] || false;
	    this._accent = options["allowAccent"] || false;
        this._title = options["title"] || this.localizedLabels.title;
        this._complexBlankCriteria = options["enableComplexBlankFilter"];
        this._blankValue = options["blankValue"];
        this.fName = options["initFilterCol"] || null;
        this._spliter = options["valueDelimiter"] || ej.ExcelFilter.valueDelimiter;
        this._initialFName = this.fName;
        this._displayName = null;
        this._dataSource = null;
        this._isUrlAdaptor = false;
		this._$tableID = null;
        this._$blankVal = null;
        this._$selectedColors = [];
        this._$enableColor = false;
        this._$filteredByColor = "";
        this._$colType = null;
        this._$key = 0;
        this.filteredColumn = null;
        this.sortedColumns = null;        
        this._chkList = null;
        this._listsWrap = null;
        this._menuWrap = null;
        this._localJSON = null;
        this._actualCount = 0;
        this._totalRcrd = 0;
        this._enableResponsiveRow=false;
        this._searchCount = 0;
        this._currentData = null;
        this._openedFltr = null;
        this._predicates = [];
        this.cFilteredCols = this.fName!=null ? [this.fName] : [];
        this._columnsFiltered = [];
        this.guid = ej.getGuid("excelfilter");
        this._noDlg = [];
        this._sepAftr = ["sortDesc","notequal", "between", "top10","endswith","contains"];
        this._posType = ["number", "date", "datetime", "string", "boolean","guid"];
        this._empties = !this._complexBlankCriteria ? [this.guid] : ["null", "undefined", ""];
        this._reqInProgess = false;
        this._isFiltered = false;
        this._onActionBegin = options["actionBegin"] || null;
        this._onActionComplete = options["actionComplete"] || null;
        this.maxItemOnQuery = 0; /*To prevent OData URI queryString length*/
        this.enableNormalize = true; /*To clean up redundant values after formatting */
        this.enableSelect = false;
        this._onDemandSearch = false;
        this._maxFilterCount = false;
        this._clearSearchValue = false;
		this._islargeData = false;
        this._checkedValue = [];
        this._searchRequest = false;
        this._isIndeterminate = false;
        this._selectAll = "<div class='e-ftrchk'><input type='checkbox' class='e-selectall' value='selectall' class='e-ftrchk' /><label class='e-ftrchk'>(" + this.localizedLabels.SelectAll + ")</label></div>";
        this._blanks = "<div class='e-ftrchk'><input type='checkbox' id='blanks' class='e-ftrchk' value='" + this._empties.join(this._spliter) + "' @@/><label class='e-ftrchk' for='blanks' value=''>(" + this.localizedLabels.Blanks + ")</label></div>";
        this._blank = undefined;
        this._addAtLast = false;
        this._addToFilter = "<div class='e-ftrchk'><input type='checkbox' class='e-addtofilter'/><label class='e-ftrchk'>" + this.localizedLabels.AddToFilter + "</label></div>";
        this._preChkList = [];
        this._checked = null;
        this._add = null;
        this.guidMenuOpt = [
              { id: 1, text: this.localizedLabels.SortNoSmaller, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortNoLarger, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.GuidFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.GuidMenuOptions }];
        this.numberMenuOpt = this.booleanMenuOpt = [
              { id: 1, text: this.localizedLabels.SortNoSmaller, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortNoLarger, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.NumberFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.NumberMenuOptions }];
        this.stringMenuOpt = [
              { id: 1, text: this.localizedLabels.SortTextAscending, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortTextDescending, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.TextFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.StringMenuOptions }];
        this.dateMenuOpt = [
              { id: 1, text: this.localizedLabels.SortDateOldest, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortDateNewest, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.DateFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.DateMenuOptions }];
        this.datetimeMenuOpt = [
              { id: 1, text: this.localizedLabels.SortDateOldest, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortDateNewest, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.DateTimeFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.DatetimeMenuOptions }];
        return this;
    };
    ej.excelFilter.prototype = {
        //Helpers to handle (Blanks) value.
        isNotBlank: function (key, global) {
            var e = ej.isNullOrUndefined(key) || (key === ""||key===null);

            if (!global && (key === ""||key===null))/* Handle special case - since "" string sorted before all */
                this._addAtLast = true;

            return !e;
        },   
        _checkBlank: function (key) {         

            if (this.isNotBlank(key))
                return true;
            /*Ensure Blank value added only once */
            var ret = this._blank == undefined && !this._addAtLast;

            if (ret) this._blank = true;            

            return ret;
        },
        _getValueData: function (key, data) {
            var arr = this._empties;

            if (this.isNotBlank(key, true)){
               arr = ej.distinct(data, this._$foreignKey || this.fName, false);
			   if(!(ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0")){
				for(var dat = 0; dat < arr.length; dat++){
					if((arr[dat] instanceof Date)){
						var temp = {dateString : arr[dat]};
						arr[dat] = JSON.parse(JSON.stringify(temp)).dateString;
						}
					}
			   }
			}

            return arr.join(this._spliter); /*Return value will be set to input element value attr*/
        },
        //Collection to predicate processing
        getPredicate: function (cols, field, updateModel) {
            this._isUrlAdaptor = this._ctrlInstance._dataSource() instanceof ej.DataManager && (this._ctrlInstance._dataSource().adaptor instanceof ej.UrlAdaptor || this._ctrlInstance._dataSource().adaptor instanceof ej.WebMethodAdaptor);
            var c, dis = field != undefined ? [field] : ej.distinct(cols, "field", false), collection, pred = {};
            for (var f = 0, flen = dis.length; f < flen; f++) {
                collection = new ej.DataManager(cols).executeLocal(new ej.Query().where("field", "equal", dis[f]));
                pred[dis[f]] = this.generatePredicate(collection);
                if (updateModel) {
                    this._predicates[this._$key] = this._predicates[this._$key] || {};
                    this._predicates[this._$key][dis[f]] = pred[dis[f]];
                }

            }
            return pred;
        },

        generatePredicate: function (cols) {
            var len = cols ? cols.length : 0, predicate, first;
            if (!len) return;
            first = this._updateDateFilter(cols[0]);
            if(this._isUrlAdaptor && (first.type == "date" || first.type == "datetime"))
                predicate = this._getDatePredicate(first);
            else
                predicate = first.ejpredicate ? first.ejpredicate : ej.Predicate(first.field, first.operator, first.value, first.ignoreCase || !first.matchcase, first.ignoreAccent || !first.accent);
            for (var p = 1; p < len; p++) {
                cols[p] = this._updateDateFilter(cols[p]);
                if (this._isUrlAdaptor && len > 2 && p > 1 && cols[p].predicate == "or"){
                    if (cols[p].type == "date" || cols[p].type == "datetime")                        
                        predicate.predicates.push(this._getDatePredicate(cols[p]));             
                    else
                        predicate.predicates.push(ej.Predicate(cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase, cols[p].ignoreAccent || !cols[p].accent));
                }
                else{
                    if (this._isUrlAdaptor && (cols[p].type == "date" || cols[p].type == "datetime"))
                        predicate = predicate[cols[p].predicate](this._getDatePredicate(cols[p]));
                    else
                        predicate = cols[p].ejpredicate ? predicate[cols[p].predicate](cols[p].ejpredicate) : predicate[cols[p].predicate](cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase, cols[p].ignoreAccent || !cols[p].accent);
                }
            }
            return predicate || null;
        },
        _getDatePredicate: function(predicate){
            return ej.Predicate(predicate.field, predicate.operator, predicate.value, predicate.ignoreCase || !predicate.matchcase, predicate.ignoreAccent || !predicate.accent);           
        },
        getFilterFrom: function (dm, data) {
            var data = ej.distinct(data, this.fName, false);
                        
            if (this.maxItemOnQuery > 0) data = data.slice(0, this.maxItemOnQuery);
                        
            return ej.UrlAdaptor.prototype.getFiltersFrom(data, new ej.Query().foreignKey(this._$foreignKey)); /*get [or] conditioned ejPredicate*/
        },
        /*Main Dialog*/
        renderDialog: function (type) {
            this._$colType = type;
            var dlgId = this.id + type + "_excelDlg";           
            //if ($("#" + dlgId).length != 0)
            //    return;
            var $dlg = ej.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcontainer e-shadow");
            var $ul = ej.buildTag("ul#" + this.id + type + "_MenuItem");
            var menuData = this._getMenuData(type);
            $ul = this._createLiTag($ul, menuData, false);
            var $searchBox = ej.buildTag("span.e-searchbox e-fields").append(ej.buildTag("input#" + this.id + "_SearchBox.e-ejinputtext e-searchinput", {}, {}, { "type": "text", "placeholder": this.localizedLabels.Search })).append(ej.buildTag("span.e-search e-icon"))
            var $lbox = ej.buildTag("div#" + this.id + type + "_CheckBoxList.e-checkboxlist e-fields").append(ej.buildTag("div"));
            var $btns = this._createBtn();
            var $sBox = ej.buildTag("div.e-searchcontainer");            
            var $status = ej.buildTag("div.e-status e-fields e-hide", this.localizedLabels.CheckBoxStatusMsg);
            $dlg.append($ul);            
            $sBox.append($searchBox);
            $sBox.append($status);
            $sBox.append($lbox);
            $sBox.append($btns);
            $dlg.append($sBox);
            $dlg.appendTo(this._ctrlInstance.element);
            $dlg.css("display", "none");
            this._renderCustomFDlg(type);
            this._dialogContainer = $dlg;
            if(this._cssClass!=null)
                $dlg.addClass(this._cssClass);
            if (!this._showSort) {
                $ul.find(".e-fnsort").closest("li").css("display", "none");
                $ul.find("li.e-separator:first").css("display", "none");
            }
            this._lsitBoxTemplate();
            this._renderSubCtrls(type);
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
                ej.ieClearRemover($searchBox.find("input")[0]);
            this._wireEvents();
        },
        _getDeprecatedLocalizedLabel: function (key) {
            if (["Ok", "OK"].indexOf(key) != -1)
                return this.localizedLabels.Ok || this.localizedLabels.OK;
        },
        _renderSubCtrls: function (type) {
            $("#" + this.id + type + "_MenuItem").ejMenu({ orientation: "vertical", width: 266, container: "#" + this.id, click: ej.proxy(this._menuHandler, this), enableRTL: this._ctrlInstance.model.enableRTL, enableSeparator: false });
            $("#" + this.id + type + "_OkBtn").ejButton({ text: this._getDeprecatedLocalizedLabel("OK"), showRoundedCorner: true, width: 60, click: ej.proxy(this._fltrBtnHandler, this), enabled: true });
            $("#" + this.id + type + "_CancelBtn").ejButton({ text: this.localizedLabels.Cancel, showRoundedCorner: true, width: 60, click: ej.proxy(this.closeXFDialog, this) });
            $("#" + this.id + type + "_CheckBoxList").ejScroller({ height: 130, width: 234, scroll: ej.proxy(this._virtualize,this) });
            $("#" + this.id + type + "_CheckBoxList").ejWaitingPopup({ showOnInit: false });
        },
        openXFDialog: function (options) {
			var obj;
            this.fName = options["field"];
            this._dataSource = options["dataSource"];
            this._$colType = options["type"] || "string";
            this._$format = options["format"] || "";
            this._enableResponsiveRow=options["enableResponsiveRow"];
            this.filteredColumn = options["filteredColumns"] || this._ctrlInstance.model.filterSettings.filteredColumns;
            this.sortedColumns = options["sortedColumns"] || this._ctrlInstance.model.sortSettings.sortedColumns;
            this._displayName = options["displayName"];
            this.query = options["query"] || new ej.Query();
            this._$key = options["key"] || 0;
			this._$tableID = options["tableID"];
			this._$blankVal = ej.isNullOrUndefined(this._$tableID) ? this._$blankVal : options["blank"];
            this._$selectedColors = options["selectedColors"] || [];
            this._$enableColor = options["enableColor"] || false;
            this._$filteredByColor = options["filteredByColor"] || this._$filteredByColor;
			this._$foreignField = options["foreignKeyValue"];
			this._$foreignData = options["foreignDataSource"];
			this._$foreignKey = options["foreignKey"];
			this._$foreignKeyType = options["foreignKeyType"];
			if (this._$foreignData instanceof ej.DataManager && (this._$foreignData.adaptor instanceof ej.ODataAdaptor || this._$foreignData.adaptor instanceof ej.ODataV4Adaptor || this._$foreignData.adaptor instanceof ej.WebApiAdaptor))
			    this.maxItemOnQuery = 50;
			$.extend(this.localizedLabels, options["localizedStrings"] || {});
            var args = { requestType : "filterbeforeopen", filterModel : this, columnName:this.fName, columnType: this._$colType };
            if (this._ctrlInstance._trigger(this._onActionBegin, args))
                return;
            if (this._openedFltr == null || !this._openedFltr.is($("#" + this.id + this._$colType + "_excelDlg"))) {
                this.closeXFDialog();
                this._openedFltr = $("#" + this.id + this._$colType + "_excelDlg");
            }
            this._listsWrap = $("#" + this.id + this._$colType + "_CheckBoxList");
            this._menuWrap = $("#" + this.id + this._$colType + "_MenuItem");
            this._searchBox = this._openedFltr.find(".e-searchbox input");
            this._setPosition(this._openedFltr, options["position"]);
            this._openedFltr.addClass(options["cssClass"]);
            this._openedFltr.fadeIn(300, function () {
            });
			var $popups = $("#" + this.id + this._$colType + "_MenuItem").find("li[ejfnrole='popup']");
            if (this._$enableColor) {
                this._createDivTag($popups.eq(0).find(".e-shadow"), this._$selectedColors, false, "sort");
                (this._$filteredByColor == -1 || (this._$filteredByColor.length < 1 || this._$filteredByColor === this.fName)) ? this._createDivTag($popups.eq(1).find(".e-shadow"),this._$selectedColors, false, "filter") : $popups.eq(1).addClass("e-disable-item");
            }    
            else 
                $popups.hide();
            this._isFiltered = this._predicates[this._$key] != undefined && this._predicates[this._$key][this.fName] != undefined;
            this._isFiltered = options["isFiltered"] || this._isFiltered;
            if ((this._$colType == "date" || this._$colType == "datetime") && this._$format == "")
                this._$format = this._$colType == "date" ? "{0:MM/dd/yyyy}" : "{0:MM/dd/yyyy hh:mm:ss}";
            this._processListData();
			obj = this._listsWrap.data("ejScroller");
            
                        
            this._setDisable();
            var args = { requestType: "filterafteropen", filterModel: this, columnName: this.fName, columnType: this._$colType };
            if (this._ctrlInstance._trigger(this._onActionComplete, args))
                return;
        },
        closeXFDialog: function (e) {
            if (e != null) {
                var $target = $(e.target);
                if (!($target.closest("#" + this.id + this._$colType + "_CustomFDlg").length > 0 || $target.closest("#" + this.id + this._$colType + "_excelDlg").length > 0))
                    return;
            }            
            if (this._openedFltr) {
                if (!this._openedFltr.hasClass("e-dlgcustom")) {
                    this._openedFltr.fadeOut(300, function () {
                    });
                    this._listsWrap.ejWaitingPopup("hide");
                }
                else {
                    this._openedFltr.ejDialog("close");
                }
                !ej.isNullOrUndefined(this._cancelHandler) && this._cancelHandler();
                this.resetFilterModel();/*Reset private properties after filter closed*/
                this._ctrlInstance._$fDlgIsOpen = false;
            }
        },
        _setPosition: function (ele, pos) {
            ele.css("position", "absolute");
            ele.css("left", pos["X"]).css("top", pos["Y"]);                      
        },
        _setDisable: function () {
            var $clr = this._menuWrap.find("li[ejfnrole='clearfilter']"), $fltr = this._menuWrap.find("li[ejfnrole='filterpopup']");
            var $sort = this._menuWrap.find("li[ejfnrole *= 'sort']"), $checked = this._listsWrap.find("input").filter(":checked:not(.e-selectall)").length;
            !this._isFiltered ? $clr.addClass("e-disable-item") : $clr.removeClass("e-disable-item");
            if (this._showSort) {
                var sQM = ej.DataManager(this.sortedColumns).executeLocal(new ej.Query().where("field", "equal", this.fName));
                ( sQM.length && sQM[0]["direction"] == "ascending") ? $sort.filter("[ejfnrole='sortAsc']").addClass("e-disable-item") : $sort.filter("[ejfnrole='sortAsc']").removeClass("e-disable-item");
                (sQM.length && sQM[0]["direction"] == "descending") ? $sort.filter("[ejfnrole='sortDesc']").addClass("e-disable-item") : $sort.filter("[ejfnrole ='sortDesc']").removeClass("e-disable-item");
            }
            var $flteredList = $fltr.find(".aschild");
            if (this.cFilteredCols.length != 0 && $.inArray(this.fName,this.cFilteredCols) != -1) {
                for (var f = 0; f < this.filteredColumn.length; f++) {
                    if (this.filteredColumn[f].field == this.fName) {
                        if ($flteredList.find("#ejFiltercheck").length == 0) {
                            $flteredList.append("<input type='checkbox' id='ejFiltercheck' />");
                            $flteredList.find("#ejFiltercheck").ejCheckBox({ checked: true });
                            $flteredList.find("#ejFiltercheck").ejCheckBox("disable");
                        }
                        if ($fltr.find(".e-shadow .e-exceltick").length > 0)
                            $fltr.find(".e-shadow .e-exceltick").remove();
                        if (this.filteredColumn[f].field == this.fName && !ej.isNullOrUndefined(this.filteredColumn[f + 1]) && this.filteredColumn[f + 1].field == this.fName && (this._$foreignField && this.filteredColumn[f + 1].customFilter || !this._$foreignField)) {
                            if (this.filteredColumn[f].operator == "greaterthanorequal" && this.filteredColumn[f + 1].operator == "lessthanorequal")
                                $fltr.find(".e-shadow .e-list[ejvalue=between]").find("a").append("<span class='e-exceltick e-icon' />");
                            else
                                $fltr.find(".e-shadow .e-list[ejvalue=customfilter]").find("a").append("<span class='e-exceltick e-icon' />");
                        }
                        else if (this._$foreignField)
                            $fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].actualFilterOperator + "]").find("a").append("<span class='e-exceltick e-icon' />");
                        else
                            $fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].operator + "]").find("a").append("<span class='e-exceltick e-icon' />");
                        break;
                    }
                }
            }
            else {
                for (var f = 0; f < this.filteredColumn.length; f++) {
                    if (this.filteredColumn[f].field == this.fName) {
                        this._removeTick($fltr,$flteredList);
                        break;
                    }
                }
            }
            if (!this._isFiltered && $flteredList.find("#ejFiltercheck").length != 0) {
                 this._removeTick($fltr,$flteredList);
            }
            if (this._$colType == "boolean")
                this._menuWrap.find("li[aria-haspopup=true]").addClass("e-hide");            
            this._searchBox.val(""); this._searchBox.siblings().addClass("e-search").removeClass("e-cancel");
        },
        _removeTick: function($fltr,$flteredList){
            $flteredList.find("#ejFiltercheck").ejCheckBox("destroy");
            $fltr.find(".aschild #ejFiltercheck").remove();
            $fltr.find(".e-shadow .e-exceltick.e-icon").remove();
        },
        _createBtn: function (isCDlg) {
            var id = isCDlg ? this.id + this._$colType + "Custom" : this.id + this._$colType;
            var $divCon = ej.buildTag("div.e-btncontainer e-fields");
            var $div = ej.buildTag("div");
            $div.append(ej.buildTag("input#" + id + "_OkBtn.e-fltrbtn e-btnsub e-flat", {}, {}, { type: "button" })).append(ej.buildTag("input#" + id + "_CancelBtn.e-fltrbtn e-btncan e-flat", {}, {}, { type: "button" }));
            return $divCon.append($div);
        },
        _menuHandler: function (args) {
            var $ele = $(args.element);
            var role = $ele.attr("ejfnrole");
            var arg = {};
            if (role === "filterbgcolor" || role === "filterfgcolor") {
                var fDetails = { field: this.fName, operation: role, color: $(args.element).css('background-color')};
			    arg = { originalEvent: args.event, action: "filterbycolor", filterDetails: fDetails, tableID: this._$tableID }; 
                this._isFiltered = false;
            }
            else if (role == "clearfilter") {
                var ftrDetails = { field: this.fName, operator: "", value: "", predicate: "or" };
                arg = { originalEvent: args.event, fieldName: this.fName, action: "clearfiltering", filterDetails: ftrDetails, tableID: this._$tableID };
                var indx = $.inArray(this.fName, this.cFilteredCols);
                indx!=-1 && this.cFilteredCols.splice(indx, 1);
				var $cIndx = $.inArray(this.fName, this._columnsFiltered);
                $cIndx!=-1 && this._columnsFiltered.splice($cIndx, 1);
                if (this._initialFName == this.fName)
                    this._initialFName = null;
            }
            else if(role == "popup" || role == "filterpopup") {
                return;
            }
            else if (role == "operator") {
                this._openCustomFilter($ele.attr("ejvalue"));
            }
			else{
                var sOrder, sDetails;
				if(role == "sortAsc" || role == "sortDesc"){
					sOrder = role == "sortAsc" ? "ascending" : "descending";
					sDetails = { field: this.fName, direction: sOrder };
					arg = { originalEvent: args.event, action: "sorting", sortDetails: sDetails, tableID: this._$tableID };
				}
				else{
					sDetails = { field: this.fName, direction: sOrder, operation: role, color: $(args.element).css('background-color')};
					arg = { originalEvent: args.event, action: "sortbycolor", sortDetails: sDetails, tableID: this._$tableID }; 
				}
            }
            if (role != "operator") {
                this._filterHandler(arg);
                this.closeXFDialog();
            }
        },
        _searchBoxFocus: function (e) {
            var $target = $(e.target);
            if ($target.hasClass("e-cancel")) {
                $target.prev().val("");
                $target.next().addClass("e-cancel")
                $target.addClass("e-search");
                $target.prev().trigger("keyup");
            }
            if (e.type == "focusin") {
                $target.next().addClass("e-cancel");
                $target.next().removeClass("e-search");
            }
        },
        _search: function (e) {
            var enterText = e.target.value, args = {}, parsed, operator, $target = $(e.target);
            parsed = (this.getType() != "string" && parseFloat(enterText)) ? parseFloat(enterText) : enterText;
            operator ="contains" ;
            parsed = (parsed == "" || parsed == undefined) ? undefined : parsed;
            if (this._$colType == "boolean") {
                if (parsed != undefined && this.localizedLabels.True.toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
                    parsed = "true";
                else if (parsed != undefined && this.localizedLabels.False.toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
                    parsed = "false";
            }
            if (this._$colType == "date" || this._$colType == "datetime") {
                parsed = ej.parseDate(enterText, this.replacer(this._$format, /{0:|}/g, ""));
                operator = "equal";
                if (this._previousValue == null && parsed == null)
                    return;
            }
            this._previousValue = parsed;
            delay = this._dataSource instanceof ej.DataManager && (this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) ? 1500 : 0;
            sender = { type: "filterchoicesearch", value: parsed, operator: operator, matchcase: ["date", "datetime"].indexOf(this._$colType) != -1 ? false : this._matchCase, accent: this._accent }
            this._processSearch(sender, delay);
            if ($target.val() == "") {
                $target.next().addClass("e-search");
                $target.next().removeClass("e-cancel");
            } else {
                $target.next().addClass("e-cancel");
                $target.next().removeClass("e-search");
            }
        },
        _processSearch: function (sender, delay) {
            if (!this._alreadySearchProcessed) {
                this._alreadySearchProcessed = true;
                this._startTimer(sender, delay);
            } else {
                this._stopTimer();
                this._startTimer(sender, delay);
            }
        },
        _startTimer: function (sender, delay) {
			proxy = this;
            this._timer = window.setTimeout(
                function () {
                    proxy._processListData(sender);
                }, delay)
        },
        _stopTimer: function () {
            if (this._timer != null)
                window.clearTimeout(this._timer);
        },
        _getLocalizedLabel: function (property) {
            return ej.getLocalizedConstants("ej.ExcelFilter", this._locale);
        },
        _getMenuData: function (type) {
            return type != undefined ? this[type + "MenuOpt"] : [];
        },
		_checkHtmlEncode: function(key){
           var isEncode = !ej.isNullOrUndefined(this._ctrlInstance.getColumnByField) ? this._ctrlInstance.getColumnByField(this.fName).disableHtmlEncode : false;
           var bool = !ej.isNullOrUndefined(isEncode) && isEncode  ? true : false;
           return bool;
        },
        /*CheckBox list*/
        _lsitBoxTemplate: function () {
            var helper = {}, temp = {};            
            helper[this.id + "isNotBlank"] = ej.proxy(this.isNotBlank, this);
            helper[this.id + "checkBlank"] = ej.proxy(this._checkBlank, this);
            helper[this.id + "_getValueData"] = ej.proxy(this._getValueData, this);            
            helper[this.id + "_checkBoxState"] = ej.proxy(this._setCheckState, this);          
            helper[this.id + "_htmlEncode"] = ej.proxy(this._checkHtmlEncode, this);    
            helper[this.id + "_genId"] = this._genCheckID;
            $.views.helpers(helper); 			
            var genID = this.id + this._$colType + "{{:~" + this.id + "_genId()}}";
            temp[this.id + this._$colType + "_listBox_Template"] = "{{if ~" + this.id + "checkBlank(key)}}<div class='e-ftrchk'><input type='checkbox' id='" + genID + "' value='{{html:~" + this.id + "_getValueData(key, items)}}' class='e-ftrchk' {{:~" + this.id + "_checkBoxState(~" + this.id + "_getValueData(key, items))}}/><label class='e-ftrchk' for='" + genID + "'>{{if ~" + this.id + "isNotBlank(key,'true')}} {{if ~" + this.id + "_htmlEncode(key)}} {{>key}} {{else}} {{:key}} {{/if}} {{else}} (Blanks) {{/if}}</label></div>{{/if}}";
            $.templates(temp);
        },
      
        _processListData: function (params) {
            var result, promise, args = {}, query = new ej.Query(), searchQuery = new ej.Query().requiresCount(), evtArgs = {}; this._searchCount = 0;
            var predicates = this._predicates[this._$key], pred;
			if(proxy.query._expands.length)
                query._expands = proxy.query._expands;
			var data = null, columnName = null, localJSON = null, result = null;
			if(ej.isNullOrUndefined(this._$foreignField && this._$foreignData)){
				data = this._dataSource; 
				columnName =  this.fName;
				localJSON = this._localJSON;
			}
			else{
				data = localJSON = this._$foreignData; 
				if(this._dataSource instanceof ej.DataManager && !(data instanceof ej.DataManager))
                    data = ej.DataManager(data);
				columnName = this._$foreignField;
			}
            for (var prop in predicates) {
                if (prop == this.fName)
                    continue;
                var obj = predicates[prop], from = obj["from"];
                if (from)
                    query.skip(from == "top" ? 0 : data.length - (data.length - obj["take"])).take(obj["take"]);
                else
                    pred = pred != undefined ? pred["and"](obj) : obj;
            }
            args.columnName = columnName;           
            query.requiresCount();
            if (this._dataSource instanceof ej.DataManager && !this._dataSource.dataSource.offline && this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) {
                query.take(this.maxFilterChoices);
                this._onDemandSearch = true;
            }
		    pred && query.where(pred);
            ej.merge(query.queries, this.query.queries) || ej.merge(query._params, this.query._params)
            evtArgs.requestType = params ? params.type : "filterchoicerequest",evtArgs.filterModel = this, evtArgs.query = query, evtArgs.dataSource = data;
            if(evtArgs.requestType == "filterchoicesearch")
				evtArgs.queryParams = params;
			if (this._ctrlInstance._trigger(this._onActionBegin, evtArgs))
                return;
            if (!ej.isNullOrUndefined(this._searchHandler) && this._searchHandler.key.length) {
                var searchDetails = this._searchHandler;
                query.search(searchDetails.key, searchDetails.fields, searchDetails.operator || "contains", searchDetails.ignoreCase || true, searchDetails.ignoreAccent || true);
            }
            if (this.enableSelect)
                query.select(this.fName);
            if (params && params.type == "filterchoicesearch") {
                this._clearSearchValue = ej.isNullOrUndefined(params.value) ? true : false;
                args.type = params.type;
                args.value = params.value;
                if (this._$foreignField) query = searchQuery;
                params.value && query.where(columnName, params.operator, params.value, !params.matchcase, params.accent);
                if (this._dataSource instanceof ej.DataManager && this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) {
                    this._searchRequest = true;
					var type = this._$colType;
                    var dlgId = this.id + type + "_excelDlg";   
                    if($("#" + dlgId).is(":visible"))
                     this._listsWrap.ejWaitingPopup("show");
                    if (this._$foreignField) {
                        var frKeyData = this._$foreignData instanceof ej.DataManager ? this._$foreignData : ej.DataManager(this._$foreignData);
                        this._dataProcessing(frKeyData, query, args);
                    }
                    else
                        this._dataProcessing(this._dataSource, query, args);
                }
                else
                    this._dataProcessing(ej.DataManager(this._localJSON), query, args);
            }
            else if (!(this._dataSource instanceof ej.DataManager)) {
				var result = [];
                promise = ej.DataManager(this._dataSource).executeLocal(query);
                args.type = "filterchoicerequest";
                if (this._$foreignField)
                    this._filterForeignData(promise, args);
                else {
                    result = promise.result;
                    args.data = this._localJSON = this._currentData = result;
                    this._totalRcrd = promise.count;
                    this._setCheckBoxList(args);
                }
            }
            else {
                proxy = this; args.type = "filterchoicerequest";
                this._listsWrap.ejWaitingPopup("show");
                if (!this._reqInProgess) {
                    this._reqInProgess = true;
					if(this._$foreignField)
                        data = this._dataSource;
                    promise = data.executeQuery(query);
                    promise.done(function (e) {
                        if (proxy._$foreignField)
                            proxy._filterForeignData(e, args);
                        else {
                            result = e.result;
                            args.data = proxy._localJSON = proxy._currentData = result;
                            proxy._totalRcrd = e.count;
                            proxy._listsWrap.ejWaitingPopup("hide");
                            proxy._setCheckBoxList(args);;
                            proxy._reqInProgess = false;
                        }
                    });
                }
            }           
        },
        _dataProcessing: function (dataSource, query, args) {
            var result, promise;
            promise = dataSource.executeQuery(query);
            promise.done(function (e) {
                args.data = proxy._currentData = e.result;
                proxy._totalRcrd = proxy._searchCount = e.result.length;
                proxy._setCheckBoxList(args);
            });
        },
        _filterForeignData: function (fromPromise, args) {
            var custom = typeof args === "boolean", key = this._$foreignKey,
               field = this._$foreignField, type = this._$foreignKeyType,
                result, count, proxy = this, defaults = {}, pred, tmp, actuals, query = new ej.Query(),
                dm = this._$foreignData instanceof ej.DataManager ? this._$foreignData : ej.DataManager(this._$foreignData);
            if (!custom) {
                result = fromPromise.result, count = fromPromise.count;
                if (!!count)
                    query.where(this.getFilterFrom(this._$foreignData, result));
                if (!this._listsWrap.ejWaitingPopup("model.showOnInit"))
                    this._listsWrap.ejWaitingPopup("show");
            }
            else {
                tmp = fromPromise[0], defaults = fromPromise[0], actuals = fromPromise.slice();
                if (!!tmp)
                    this.closeXFDialog();
                pred = new ej.Predicate(field, tmp.operator, tmp.value, !tmp.matchcase, !tmp.accent);
                for (var i = 1, tmp, len = fromPromise.length; i < len; i++) {
                    tmp = fromPromise[i], pred = pred[tmp.predicate](field, tmp.operator, tmp.value, !tmp.matchcase, !tmp.accent);
                }
                query.where(pred);
            }
            query.select([key, field]);
            dm.executeQuery(query).done(function (e) {
                if (!custom) {
                    args.data = proxy._localJSON = proxy._currentData = e.result;
                    proxy._totalRcrd = count;
                    proxy._listsWrap.ejWaitingPopup("hide");
                    proxy._setCheckBoxList(args);
                    proxy._reqInProgess = false;
                } else {
                    var dst = ej.distinct(e.result, key, true), dst = 0 in dst ? dst : [{}];
                    var coll = dst.map(function (val, ind) {
                        return $.extend({}, defaults, { value: val[key], operator: "equal", actuals: actuals, type: type });
                    });
                    proxy.initiateFilter(coll);
                }
            });
        },
        _setCheckBoxList: function (args) {
            var evtArgs = {}, _blank ="", sortedData, flag, blank = this._blanks, $checked;
            evtArgs.requestType = args.type, evtArgs.dataSource = this._dataSource, evtArgs.filterModel = this;
            if (this._currentData.length != 0) {                
                sortedData = this.getDistinct(args.data, args.columnName, true, !!this._$foreignKey);
                flag = this._isFiltered;                
                this._actualCount = sortedData.length; sortedData.length = this._maxCount > this._actualCount ? this._actualCount : this._maxCount;               
                (this._onDemandSearch && this._actualCount == 1000) || this._actualCount >= this._maxCount ? this._openedFltr.find("div.e-status").removeClass("e-hide") : this._openedFltr.find("div.e-status").addClass("e-hide");
                this._islargeData = this._maxCount < this._actualCount ? true : false;
				this._filterdCol = ej.DataManager(this.filteredColumn).executeLocal(ej.Query().where("field", "equal", this.fName));               
				if ((args.type == "filterchoicesearch") && (!ej.isNullOrUndefined(args.value)))
                    this._listsWrap.find("div:first").html([this._selectAll, this._addToFilter, $.render[this.id + this._$colType + "_listBox_Template"](sortedData),  (ej.isNullOrUndefined(args.value) && this._addAtLast) ? this.replacer(blank, /@@/g, this._setCheckState, this._empties.join(this._spliter)) : ""].join(""));                
                else 
                    this._listsWrap.find("div:first").html([this._selectAll, $.render[this.id + this._$colType + "_listBox_Template"](sortedData),  (ej.isNullOrUndefined(args.value) && this._addAtLast) ? this.replacer(blank, /@@/g, this._setCheckState, this._empties.join(this._spliter)) : ""].join(""));                
                this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall,.e-addtofilter"), $inView = this._chkList.slice(0, 20);
                $inView.ejCheckBox({ change: ej.proxy(this._checkHandler, this) });
                $inView.siblings().height(14).width(14);
                this._listsWrap.find(".e-addtofilter").ejCheckBox({ change: ej.proxy(this._addToFilterHandler, this) });
                this._listsWrap.find(".e-addtofilter").attr("id", this.id + this._$colType + "AddToFilter");
                this._listsWrap.find(".e-selectall").ejCheckBox({ change: ej.proxy(this._selectAllHandler, this), enableTriState: this._interDeterminateState, beforeChange: this._selectAllBeforeHandler });
				this._listsWrap.find(".e-selectall").attr("id",this.id + this._$colType + "SelectAll");
                this._listsWrap.find(".e-selectall,.e-addtofilter").siblings().height(14).width(14);
				this._listsWrap.find(".e-selectall").closest("span").siblings("label").attr("for", this.id + this._$colType + "SelectAll");
            }
            else
            {
                this._listsWrap.find("div").first().html(ej.buildTag("div.e-ftrchk", this.localizedLabels.NoResult, {}, {}));
                this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall");
            }
            if (!ej.isNullOrUndefined(this._chkList))
                $checked = this._chkList.filter(":checked").length;
            if (this._isFiltered && this._searchRequest && $checked == 0)
                this._checkIsIndeterminate(args.columnName, this.filteredColumn);
            if (!this._isFiltered || this._actualCount == $checked)
                this._listsWrap.find(".e-selectall").ejCheckBox({ checked: true });
            else if ($checked > 0 || this._isIndeterminate && this._interDeterminateState)
                this._listsWrap.find(".e-selectall").ejCheckBox('model.checkState', 'indeterminate');
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: $checked != 0 });
            this._listsWrap.ejScroller({ scrollTop: 0 }).ejScroller("refresh");
             if(this._listsWrap.hasClass('e-waitingpopup'))
                this._listsWrap.ejWaitingPopup("hide");
            if (this._ctrlInstance._trigger(this._onActionComplete, evtArgs))
                return;
            this._isIndeterminate = false;
            this._checkedValue = [];
            if (args.type == "filterchoicerequest") {
                this._preChkList = this._chkList;
                this._checked = this._preChkList.filter(":checked");
            }
            if (this._listsWrap.find(".e-addtofilter").length)
                this._add = this._listsWrap.find(".e-addtofilter");
            else
                this._add = null;
        },
        _addToFilterHandler: function (args) {
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: args.isChecked || !!this._chkList.filter(":checked").length });
        },
        _checkIsIndeterminate: function (colName, filteredCol) {
            for (var i = 0 ; i < filteredCol.length; i++) {
                if (colName == filteredCol[i].field)
                    this._isIndeterminate = true;
            }
        },
        _createLiTag: function ($ul, menuData, isChild) {
            proxy = this;
            $.each(menuData, function (index, obj) {
                var $li = ej.buildTag("li", {}, {}, obj["htmlAttribute"] || (isChild && { "ejfnrole": "operator", "ejvalue": obj.value }) || {}), $child;
                var apd = (isChild && $.inArray(obj.value,proxy._noDlg)==-1) ? "..." : "";
                var $a = ej.buildTag("a", obj.text + apd, {}, {});
                obj["sprite"] != undefined && $a.append(ej.buildTag("span", {}, {}, { "class": obj["sprite"] }))
                if (obj["child"] != undefined){
                    if(obj.id != 3 && obj.id != 5)
                        $child = proxy._createLiTag(ej.buildTag("ul.e-shadow"), obj["child"], true);
                    else if(obj.id === 3 )
                        $child = proxy._createDivTag(ej.buildTag("ul.e-shadow"), obj["child"], true, "sort");
                    else
                        $child = proxy._createDivTag(ej.buildTag("ul.e-shadow"), obj["child"], true, "filter");
				}
                obj["child"] == undefined ? $ul.append($li.append($a)) : $ul.append($li.append($a).append($child))
                if ($.inArray(obj.value || (obj.htmlAttribute && obj.htmlAttribute.ejfnrole), proxy._sepAftr) != -1)
                    $ul.append(ej.buildTag("li.e-separator"));
            });
            return $ul;
        },
		
		_createDivTag: function ($ul, menuData, isChild, reqType) {
            var $li, $a, $div, bgColor = [], fgColor = [], avble = false, cellcolor = "", fontcolor = "", selCellHdr = "", selCellClr = "", selFontHdr = "", selFontClr = "";
            if (reqType == "sort") {
                cellcolor = this.localizedLabels.SortByCellColor;
                fontcolor = this.localizedLabels.SortByFontColor;
            }
            else{
                cellcolor = this.localizedLabels.FilterByCellColor;
                fontcolor = this.localizedLabels.FilterByFontColor;
            }
			selCellHdr = reqType + "colorhdr";
            selFontHdr = reqType + "fonthdr";
            selCellClr = reqType + "bgcolor";
            selFontClr = reqType + "fgcolor";
            ($ul.length > 0) && $ul.children().remove();
            if(menuData.length > 0){
			    for(var i = 0; i < menuData.length; i++){
				    for(var j = 0; j < bgColor.length; j++){
					    if(bgColor[j] == menuData[i].background){
						    avble = true;
						    break;
					    }
				    }
				    if(!avble && (!ej.isNullOrUndefined(menuData[i].background) && !menuData[i].background.startsWith('#6n'))) 
                        bgColor.push(menuData[i].background);
				    avble = false;
				    for(var j = 0; j < fgColor.length; j++){
					    if(fgColor[j] == menuData[i].foreground){
						    avble = true;
						    break;
					    }
				    }
				    if(!avble && (!ej.isNullOrUndefined(menuData[i].foreground) && !menuData[i].foreground.startsWith('#6n'))) 
                        fgColor.push(menuData[i].foreground);
				    avble = false;
			    }
                if(bgColor.length > 0){
                    $li = ej.buildTag("li.e-list e-bghdrcolor", "", "" , {"ejfnrole": selCellHdr });
                    $a = ej.buildTag("a.e-menulink", cellcolor, {});
                    $li.append($a);
                    $ul.append($li);
			        for(var i = 0; i < bgColor.length; i++){
                        $li = ej.buildTag("li.e-list e-valcolor", {}, {'background-color': bgColor[i]}, {"ejfnrole": selCellClr });
                        $ul.append($li);
			        }
                }
                if(fgColor.length > 0){
			        $li = ej.buildTag("li.e-list e-fghdrcolor", "", "" , {"ejfnrole": selFontHdr });
                    $a = ej.buildTag("a.e-menulink", fontcolor, {});
                    $li.append($a);
                    $ul.append($li);
                    for(var i = 0; i < fgColor.length; i++) {
                        $li = ej.buildTag("li.e-list e-valcolor", {}, {'background-color': fgColor[i]}, {"ejfnrole": selFontClr });
                        $ul.append($li);
                    }
                }
                (bgColor.length < 1 && fgColor.length < 1) ? $ul.parent().addClass("e-disable-item"): $ul.parent().removeClass("e-disable-item");
            }
            else {
                $ul.parent().addClass("e-disable-item");
            }
            return $ul;
        },
		
        _setCheckState: function (value) {           
            var val = value, fobj, splts = value.split(this._spliter), splen = splts.length, flag = false;           
            if (!this._isFiltered || this._searchCount)
                return "checked";
            else {
               
                while (splen--) { /*looped for split values*/
                    val = this.processValue(splts[splen]);

                    //Date and boolean will be checked as iteration due to 
                    if (this._$colType == "date" || this._$colType == "datetime" || this._$colType == "boolean") {
                        for (var i = 0, len = this._filterdCol.length; i < len; i++) {
                            if (this._$colType == "boolean" && val !== this._filterdCol[i].value)
                                continue;
                            if (this._$colType == "date" || this._$colType == "datetime") {
								var filterval = this._filterdCol[i].value;
                                var firstVal = this._$colType == "date" && val instanceof Date ? this._formatting(this._$format, new Date(val.getFullYear(), val.getMonth(), val.getDate()), this._locale) : this._formatting(this._$format, val, this._locale);
                                var secondVal = this._$colType == "date" && filterval instanceof Date ? this._formatting(this._$format, new Date(filterval.getFullYear(), filterval.getMonth(), filterval.getDate()), this._locale) : this._formatting(this._$format, filterval, this._locale);
                                if ((firstVal !== secondVal || this._filterdCol[i].operator != "equal") && !this._maxFilterCount)
                                    continue;
                                else {
                                    if (this._maxFilterCount && (this._onDemandSearch || this._islargeData)) {
                                        if (firstVal == secondVal) {
                                            this._checkedValue.push(firstVal);
                                            return ""
                                        }
                                        else if (this._checkedValue.indexOf(secondVal) == -1 || this._checkedValue.length == this._filterdCol.length)
                                            return "checked";
                                        else
                                            continue;
                                    }
                                }
                            }
                            return "checked";
                        }
                    }
                    else {
                       if (this._$colType == "string" && !ej.isNullOrUndefined(val) && (typeof val == "string")) {
                            if (this._filterdCol[0].value == val.toLowerCase())
                                val = val.toLowerCase();
                        }
                        var fQ = ej.DataManager(this._filterdCol).executeLocal(ej.Query().where("value", "equal", val, this._filterdCol[0].matchcase).where("operator", "equal", "equal"));
                        if (fQ.length != 0) {
                            if (fQ[0].operator == "equal" &&(!ej.isNullOrUndefined(fQ[0].actualFilterOperator) && fQ[0].actualFilterOperator=="equal") && fQ[0].isCustom == true && this._ctrlInstance.model.currentViewData.length > 0)
                                return "checked";
                            else
                                return fQ[0]["isCustom"] === true ? "" : "checked";
                        }
                        else {
                            if ((this._onDemandSearch || this._islargeData) && this._maxFilterCount) {
                                var fltrQury = ej.DataManager(this._filterdCol).executeLocal(ej.Query().where("value", "equal", val).where("operator", "notequal", "equal"));
                                if (fltrQury.length == 0)
                                    return "checked";
                            }
                        }
                    }
                }
            }
        },
        _genCheckID: function () {
            return "CheckBox" + this.getIndex();
        },
        _formatting: function (format, value, locale) {

            if (this._$colType == "date" && format == "")
                format = "{0:MM/dd/yyyy hh:mm:ss}";

            if (this._$colType == "boolean")                 
                return value === "" ? "" : this.localizedLabels[value == true ? "True" : value == false ? "False" : ""];
           
            if (this._formatFiltering || this._$colType == "date") {
                var formatter = this._ctrlInstance.formatting;                
                return format != "" ? formatter(format, value, locale) : value;
            } 
        },
        _updateDateFilter: function (filter) {
            if (filter.type != "date" && !(filter.value instanceof Date))
                return filter;            
            filter.value = filter.value instanceof Date ? filter.value : ej.parseJSON({ val: filter.value }).val;
            return ["equal", "notequal"].indexOf(filter.operator) == -1 ? filter : this._setDateObject(filter);
        },        
        _checkHandler: function (args) {
            $("#" + args.model.id).prop("checked", args.isChecked);
            var $checkedlist = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall,.e-addtofilter)"), clen = $checkedlist.length;
            var $selectall = this._listsWrap.find(".e-selectall"), canCheck;
            if (clen == this._chkList.length) {
                $selectall.prop("checked", true);
                canCheck = true;
            }
            else if (clen == 0) {
                $selectall.prop("checked", false);
                canCheck = false;
            }
            else if (args.isInteraction)
                $selectall.ejCheckBox('model.checkState', 'indeterminate')
            $selectall.ejCheckBox({ checked: canCheck });
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: (clen != 0) || (!ej.isNullOrUndefined(this._add) && this._add.prop("checked")) });
        },
        _selectAllBeforeHandler: function (args) {
            if (args.isChecked) {
                if (this.model.checkState == "indeterminate") {
                    args.cancel = true;
                    this.model.checkState = "uncheck";
                    this.option({ checkState: "check" })
                }
                else
                    this.checkState("uncheck");
            }
        },
        _selectAllHandler: function (args) {
            
            if (args.checkState=="check"){
                this._chkList.filter(":not(:checked)").ejCheckBox({ checked: args.isChecked, change: ej.proxy(this._checkHandler, this) });
                this._chkList.prop("checked", true);
            }
            else if (args.checkState == "uncheck") {
                this._chkList.filter(function () { if ($(this).hasClass("e-checkbox") && $(this).prop("checked")) return this; }).ejCheckBox({ checked: args.isChecked });
                this._chkList.prop("checked", false); this._chkList.removeAttr("checked");
            }
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: args.isChecked || (!ej.isNullOrUndefined(this._add )&& this._add.prop("checked")) });
        },
        /*Custom Dialog*/
        _renderCustomFDlg: function (type) {
            var dlgId = this.id + type + "_CustomFDlg";
            if ($("#" + dlgId).length)
                return;
            var $dlg = ej.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcustom");
            $dlg.addClass(this._cssClass);
            this._renderCDlgContent($dlg, type);
            $dlg.ejDialog({ showOnInit: false, enableResize: false, enableModal: true, allowKeyboardNavigation: false, title: this._title, width: 370, content: "#" + this.id, enableRTL: this._ctrlInstance.model.enableRTL, closeIconTooltip: "Close", cssClass: "e-excelfilter e-customDlg" });
			$dlg.ejDialog("refresh");
        },

        _renderCDlgContent: function (content, type) {
            var $div1 = ej.buildTag("div.e-dlgfields",this.localizedLabels.Showrowswhere, {}, {});
            var $id = this.id + this._$colType;
            var $fset = ej.buildTag("fieldset.e-fieldset");
            var $op1 = ej.buildTag("tr.e-fields"), $op2 = ej.buildTag("tr.e-fields"), $op3 = ej.buildTag("tr.e-fields e-top");
            var $dp1 = ej.buildTag("input#" + $id + "_CustomDrop1"), $dp2 = ej.buildTag("input#" + $id + "_CustomDrop2"), $dp3 = ej.buildTag("input#" + $id + "_CustomDrop3");
            var $in1 = ej.buildTag("input#" + $id + "_CustomValue1.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" }), $in2 = ej.buildTag("input#" + $id + "_CustomValue2.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" }), $in3 = ej.buildTag("input#" + $id + "_CustomValue3.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" });
            var $pred = ej.buildTag("tr.e-predicate");
            var radioAnd = ej.buildTag("input#" + $id + "_CustomAndPredicate", {}, {}, { "type": "radio", "name": "predicate" , "value":"and" }), radioOr = ej.buildTag("input#" + $id + "_CustomOrPredicate", {}, {}, { "type": "radio", "name": "predicate", "value":"or" });
            var matchCase = ej.buildTag("input#" + $id + "_CustomMatchPredicate", {}, {}, { "type": "checkbox" });
            content.append($div1);
            var table = ej.buildTag("table.e-optable");

            $op1.append(ej.buildTag("td.e-operator").append($dp1))
                .append(ej.buildTag("td.e-value").append($in1));
            $pred.append(ej.buildTag("td", {}, {}, {}).append(radioAnd).append(ej.buildTag("label.e-caption", this.localizedLabels.PredicateAnd, {}, { "for": $id + "_CustomAndPredicate" }))
                .append(radioOr).append(ej.buildTag("label.e-caption", this.localizedLabels.PredicateOr, {}, { "for": $id + "_CustomOrPredicate" })));
            $op2.append(ej.buildTag("td.e-operator").append($dp2))
                .append(ej.buildTag("td.e-value").append($in2));
            table.append($op1)
            .append($pred)
            .append($op2);
			if(type == "string")
			    $pred.append(ej.buildTag("td", {}, {}, {}).append(matchCase).append(ej.buildTag("label.e-caption", this.localizedLabels.MatchCase, {}, { "for": $id + "_CustomMatchPredicate" })));
            if (type == "number" || type == "guid") {
                $op3.append(ej.buildTag("td.e-operator").append($dp3))
                .append(ej.buildTag("td.e-value").append($in3));
                table.append($op3)
            }
            $fset.append(ej.buildTag("legend"))
                .append(table)
            content.append(ej.buildTag("div.e-dlgfields").append($fset));
            content.append(ej.buildTag("div.e-dlgfields").append(this._createBtn(true)));
            content.appendTo("body");
            var uppertype = type.replace(type.charAt(0), type.charAt(0).toUpperCase());
            $([$dp1, $dp2]).ejDropDownList({ fields: { text: "text", value: "value" }, height: 27, width: 120, enableRTL: this._ctrlInstance.model.enableRTL });
            if (type == "number") {
				$([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $([$in1, $in2]).ejNumericTextbox({ showSpinButton: false, height: "27px",decimalPlaces : 2, width: "177px", enableRTL: this._ctrlInstance.model.enableRTL,watermarkText: this.localizedLabels.NumericTextboxWaterMark, focusOut: function(args){ if(this.model.decimalPlaces == 0) this.element.prev(".e-input").val(this.model.value); } });
            }
			else if (type == "guid") {
                $([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $($in1).css({"height":"22px","width":"175px" });
                $($in2).css({"height":"22px","width":"177px" });
            }
            else if (type == "date") {
				$([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
				$([$in1, $in2]).ejDatePicker({ "cssClass": this._ctrlInstance.model.cssClass, height: "27px", width: "177px", "enableRTL": this._ctrlInstance.model.enableRTL, watermarkText: this.localizedLabels.DatePickerWaterMark, locale: this._locale });
            }
            else if (type == "datetime") {
                $([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $([$in1, $in2]).ejDateTimePicker({ "cssClass": this._ctrlInstance.model.cssClass, height: "27px", width: "177px", "enableRTL": this._ctrlInstance.model.enableRTL, watermarkText: this.localizedLabels.DateTimePickerWaterMark, locale: this._locale });
            }
            else if (type == "string") {
                $([$in1, $in2]).ejAutocomplete({ "cssClass": this._ctrlInstance.model.cssClass, "enableRTL": this._ctrlInstance.model.enableRTL, enableDistinct: true, width: "177px", height: "27px", locale: this._locale });
            }
            $([radioAnd, radioOr]).ejRadioButton({ "cssClass": this._ctrlInstance.model.cssClass, "enableRTL": this._ctrlInstance.model.enableRTL });
            matchCase.ejCheckBox({ });
            $("#" + $id + "Custom_OkBtn").ejButton({ text: this._getDeprecatedLocalizedLabel("OK"), showRoundedCorner: true, width: "23.6%", click: ej.proxy(this._fltrBtnHandler, this), enabled: true });
            $("#" + $id + "Custom_CancelBtn").ejButton({ text: this.localizedLabels.Cancel, showRoundedCorner: true, width: "23.6%", click: ej.proxy(this.closeXFDialog, this) })
        },
                     
        _openCustomFilter: function (operator) {
            var oper = operator != "top10" ? this._$colType : operator, emptyOp = { text: "", value: "" }, query = this.query;
            var type = oper.replace(oper.charAt(0), oper.charAt(0).toUpperCase());
            var id = this.id + this._$colType;
            this.closeXFDialog();
            this._openedFltr = $("#" + id + "_CustomFDlg");
            var args = { requestType: "filterbeforeopen", filterModel: this, columnName: this.fName, columnType: this._$colType, isCustomFilter: true };
            if (this._ctrlInstance._trigger(this._onActionBegin, args))
                return;
            this._openedFltr.ejDialog("open");
            this._openedFltr.ejDialog({open: function(args){
				($("#" + id + "_CustomValue1").hasClass("e-autocomplete") || $("#" + id + "_CustomValue1").hasClass("e-datepicker") || $("#" + id + "_CustomValue1").hasClass("e-datetimepicker")) ? $("#" + id + "_CustomValue1").focus() : $("#" + id + "_CustomValue1").prev().focus();
			}});
            this._openedFltr.find("legend").html(this._displayName);            
            var sl = (["Number","Date"].indexOf(type) != -1) ? 6 : 5;
            var sliced = this.localizedLabels[type + "MenuOptions"].slice(0,sl); sliced.unshift(emptyOp);
            $("#" + id + "_CustomDrop1").ejDropDownList({ dataSource: sliced });
            $("#" + id + "_CustomDrop2").ejDropDownList({ dataSource: sliced });
			if (this._$colType == "number") {
                if(operator == "top10"){
                    this._openedFltr.find(".e-optable tr").not(".e-top").addClass("e-hide");   
                    this._openedFltr.find(".e-optable tr.e-top").removeClass("e-hide");
                    $("#" + id + "_CustomDrop3").ejDropDownList({ dataSource: this.localizedLabels[type + "MenuOptions"] });
                }
                else{                   
                    this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
                    this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide"); 
                }
            }
            else {
                this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
                this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide");
            }
            if(this._$colType == "string"){
				var fName = this._$foreignField ? this._$foreignField : this.fName;
				var data = this._$foreignData && this._$foreignField ? this._$foreignData : this._dataSource;
                this._openedFltr.find(".e-autocomplete").ejAutocomplete({
                    fields: { text: fName }, dataSource: data,query:query, focusIn: function (args) {
                        var type = this.element.closest("td").siblings().find(".e-dropdownlist").ejDropDownList("getSelectedValue");
                        var $matchCase = this.element.closest(".e-dialog-scroller").find(".e-checkbox").prop("checked");
						 this.model.caseSensitiveSearch = $matchCase;
						 this.model.filterType = type == "" ? this.model.filterType : type;
                    }
                });
            }
            if (this._$colType == "date" && this._$format != "")
                this._openedFltr.find(".e-datepicker").ejDatePicker({ dateFormat: this._$format.replace(/{0:|}/g, function () { return "" }), enableStrictMode: true });
            else if (this._$colType == "datetime" && this._$format != "")
                this._openedFltr.find(".e-datetimepicker").ejDateTimePicker({ dateTimeFormat: this._$format.replace(/{0:|}/g, function () { return "" }), enableStrictMode: true });
            this._setFilteredData(id, operator);
			if(!ej.isNullOrUndefined(this._customFilterHandler)) 
				this._customFilterHandler();
            var args = { requestType: "filterafteropen", filterModel: this, columnName: this.fName, columnType: this._$colType, isCustomFilter: true };
            
			if (this._ctrlInstance._trigger(this._onActionComplete, args))
                return;
        },
        
        _setFilteredData: function ($id, op) {
            var indx = $.inArray(this.fName, this.cFilteredCols);
            var fQM = [], optrs = [], fLen;
            var between = ["greaterthanorequal", "lessthanorequal"];
            if (op == "top10")
                return;
            if (indx != -1)
                fQM = ej.DataManager(this.filteredColumn).executeLocal(ej.Query().where("field", "equal", this.fName));
            if (indx != -1 && this._$foreignField)
                fQM = fQM[0]["actuals"];
            if (this._initialFName != null && this._initialFName == this.fName)
                fQM[0]["isCustom"] = true;
            fLen = fQM.length;
            var drops = this._openedFltr.find(".e-dropdownlist"), inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input"), $pred = this._openedFltr.find(".e-predicate");            
            if (indx != -1 && fLen && fQM[0]["from"]!=undefined)
                optrs = [op, ""];
			else if(op == "between" && indx != -1 && fLen )
				optrs = [fQM[0]["operator"], !ej.isNullOrUndefined(fQM[1]) ? fQM[1]["operator"] : ""];
            else if (indx != -1 && fLen && fQM[0]["isCustom"])
                optrs = [(op != "customfilter" && indx != -1) ? op : fQM[0]["operator"], op == "customfilter" && fQM[1] ? fQM[1]["operator"] : ""];
			else if(indx == -1 && op == "customfilter") 
                optrs = ["equal", ""];
            else if (op == "between" || op == "customfilter")
                optrs = op != "customfilter" ? between : ["", ""];           
            else
                optrs = [op, ""];
           
            for (var i = 0; i < (indx != -1 ? fLen : 2) ; i++) {
                var opt = /\D*/.exec(optrs[i])[0];
                $(drops[i]).prop("value", opt);
                $(drops[i]).ejDropDownList("setSelectedValue", opt);
				 $(drops[i]).ejDropDownList({ change: function(arg){ 
					this.element.closest(".e-fields").find(".e-autocomplete").val("");
				 }});
				var value = (indx != -1 && fLen && fQM[i]["isCustom"] && (opt == (this._$foreignField ? fQM[i]["actualFilterOperator"] : fQM[i]["operator"]) || opt == "customfilter" || opt == "between")) ? this._$foreignField ? opt != "" ? fQM[i]["actualFilterValue"] : "" : fQM[i]["value"] : "";
                if ($(inputs[i]).hasClass("e-datepicker"))
                    $("#" + inputs[i].id).ejDatePicker("model.value", (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["value"] : null);
                else if ($(inputs[i]).hasClass("e-numerictextbox"))
                    $("#" + inputs[i].id).ejNumericTextbox("model.value", value);
                else if ($(inputs[i]).hasClass("e-datetimepicker"))
                    $(inputs[i]).ejDateTimePicker("model.value", value);
                else
                    $(inputs[i]).val(value);
                var $pre = (indx != -1 && fLen && fQM[i]["isCustom"] && fQM[i]["predicate"] != undefined) ? this._$foreignField ? fQM[i]["actualPredicate"] : fQM[i]["predicate"] : "and";
				$pred.find("input[value=" + $pre + "]").ejRadioButton({checked:  true});
				if(this._$colType == "string"){
				    var $match = (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["matchcase"] : this._matchCase;
					$pred.find("input.e-js[type='checkbox']").ejCheckBox({checked: $match});
				}
				this._openedFltr.find(".e-value input:visible:eq(0)").select();
            }            
        },
        _setDateObject: function (filterObject) {
            if (filterObject.value != null) {
                var $fltrVal = filterObject.value;
                var $prevObj = $.extend(true, {}, filterObject);
                var $nextObj = $.extend(true, {}, filterObject);                
                var $prevDate = new Date($prevObj.value.setSeconds($prevObj.value.getSeconds() - 1));
                var $nextDate = new Date($nextObj.value.setSeconds($nextObj.value.getSeconds() + 2));
                filterObject.value = new Date(filterObject.value.setSeconds($nextObj.value.getSeconds() - 1));                
                $prevObj.value = $prevDate;
                $nextObj.value = $nextDate;
                if (filterObject.operator == "equal") {
                    $prevObj.operator = "greaterthan";
                    $prevObj.predicate = "and";
                    $nextObj.operator = "lessthan";
                    $nextObj.predicate = "and";
                } else if (filterObject.operator == "notequal") {
                    $prevObj.operator = "lessthanorequal";
                    $prevObj.predicate = "or";
                    $nextObj.operator = "greaterthanorequal";
                    $nextObj.predicate = "or";
                }
                var predicate = ej.Predicate($prevObj.field, $prevObj.operator, $prevObj.value, false);
                predicate = predicate[$nextObj.predicate]($nextObj.field, $nextObj.operator, $nextObj.value, false);
                filterObject.ejpredicate = predicate; filterObject.type = "date";
                return filterObject;
            }
            else
                return filterObject;
        },
        _getCDlgFields: function () {
            var dropDowns = this._openedFltr.find(".e-dropdownlist"), defaults;
            var $match = this._openedFltr.find(".e-checkbox"), matchcase = true,valueColl = [];
            var $inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input");
            var $ginputs = this._openedFltr.find(".e-value input"),
                $pred = this._openedFltr.find(".e-predicate  div[aria-checked = true]").find("input[type ='radio']").val()
            $.inArray(this.fName, this.cFilteredCols) == -1 && this.cFilteredCols.push(this.fName);

            for (var i = 0,len = dropDowns.length; i < len; i++) {
                var dvalue = $(dropDowns[i]).ejDropDownList("getSelectedValue"), value;
                if (this._$colType == "number")
                    value = parseFloat($inputs.eq(i).ejNumericTextbox("model.value"));
				if(this._$colType == "guid")
                    value = $ginputs.eq(i).val();
                if (this._$colType == "string") {
                    value = $inputs.eq(i).val();
                    matchcase = $match.is(":checked");
                }
                if (this._$colType == "date") 
                    value = $inputs.eq(i).ejDatePicker("model.value");
                if (this._$colType == "datetime")
                    value = $inputs.eq(i).ejDateTimePicker("model.value");

                defaults = { field: this.fName, predicate: i == 1 ? $pred : "or", matchcase: matchcase, isCustom: true };
                if (dvalue == "top" || dvalue == "bottom") {
                    valueColl.push($.extend(true, { value: "", operator: "notequal", take: value, from: dvalue }, defaults));
                }
                else if (dvalue != "") {
                    if (this._empties.indexOf(value + "") > -1 || (this._$colType == "number" && isNaN(value))) {
                        var cols = this.iterateAndGetCollection(this._empties.join(this._spliter), $.extend({}, defaults, { predicate: dvalue.toLowerCase() === "notequal" ? "and" : "or", operator: dvalue.toLowerCase() }));
                        var pred = this.generatePredicate(cols);
                        valueColl.push($.extend({}, defaults, { ejpredicate: pred, operator: dvalue.toLowerCase() }));
                    }
                    else {
                        var filterObj = {}; $.extend(true, filterObj, { value: value, operator: dvalue.toLowerCase(), isCustom: true, actualFilterOperator: dvalue.toLowerCase(), actualFilterValue: value, actualPredicate: defaults.predicate }, defaults);
                        if (this._$colType == "date")
                            filterObj.type = "date";
                        valueColl.push((this._$colType == "date" && ["equal", "notequal"].indexOf(dvalue.toLowerCase()) != -1) ? this._setDateObject(filterObj) : filterObj);
                    }
                }
                else
                    break;
            }
            if (this._$foreignField == undefined)
                this.initiateFilter(valueColl);
            else 
                this._filterForeignData(valueColl, true);            
        },
      
        _fltrBtnHandler: function (args) {
            var matchcase, valColl = [], arg = {}, predicate, fObj = {}, optr = "", checked = [], unchecked;
            this._maxFilterCount = false;
            if (this._clearSearchValue)
                this._searchCount = 0;
            if (!this._openedFltr.hasClass("e-dlgcustom")) {
                if (!this._isFiltered && this._listsWrap.find(".e-selectall").ejCheckBox("model.checked") && (this._searchCount == 0 || (this._add && this._add.prop("checked"))))
                    return this.closeXFDialog();                                  
                if (this._onDemandSearch || this._islargeData) {
                    if (this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)").length <= this._listsWrap.find("input.e-ftrchk").filter(":not(:checked):not(.e-selectall)").length || this._listsWrap.find(".e-selectall").ejCheckBox("model.checked")) {
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)");
                        optr = "equal";
                    }
                    else {
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":not(:checked):not(.e-selectall)");
                        optr = "notequal";
                        this._maxFilterCount = true;
                    }
                }
                else {
                    var chkdata = this._chkList.filter(":checked"), unchkdata = this._chkList.filter(":not(':checked')");
                    if ((this._add && this._add.prop("checked"))) {
                        if (unchkdata.length)
                            unchecked = unchkdata;
                        checked = this._checked.length == 0 ? this._preChkList : this._checked;
                        if (chkdata.length && this._checked.length != 0)
                            ej.merge(checked, chkdata);
                    }
                    else
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall,.e-addtofilter)");
                    optr = this._colType == "string" ? "startswith" : "equal";
                }
                var len = checked.length, cVal, type = this.getType();
                var _isCase = this._colType == "string" ? this._matchCase : true;
	            var _isAccent = this._colType == "string" ? this._accent : true;
                var defaults = this._maxFilterCount ? { field: this.fName, predicate: "and", operator: optr, matchcase: _isCase, accent: _isAccent } : { field: this.fName, predicate: "or", operator: optr, matchcase: _isCase, accent: _isAccent };
                for (var i = 0; i < len; i++) {
                    if (!ej.isNullOrUndefined(unchecked)) {
                        for (var j = 0; j < unchecked.length; j++) {
                            var flag = 0;
                            if (checked[i].value == unchecked[j].value) {
                                flag = 1;
                                break;
                            }
                        }
                    }
                    if (flag)
                        continue;
                    cVal = checked[i].value;
                    if (this.enableNormalize && cVal.indexOf(this._spliter) != -1) {
                        ej.merge(valColl, this.iterateAndGetCollection(cVal, defaults));
                        continue;
                    }
                    cVal = this.processValue(cVal, type);                    
                                        
                    $.extend(true, fObj, { value: cVal }, defaults);
                                                            
                    for (var j = 0; j < valColl.length; j++) {
                        var count = 0;
                        if (valColl[j].value == cVal) {
                            count = 1;
                            break;
                        }
                    }
                    if (count)
                        continue;

                    valColl.push(type == "date" ? this._setDateObject(fObj) : fObj);
                                                             
                    fObj = {};
                }
                var cIndex = $.inArray(this.fName, this.cFilteredCols);
                if(cIndex != -1)
                    this.cFilteredCols.splice(cIndex, 1);
                if (this._isFiltered && this._searchRequest) {
                    this._checkIsIndeterminate(this.fName, this.filteredColumn);
                    if (this._isIndeterminate) {
                        ej.merge(valColl, this.filteredColumn);
                        valColl = ej.distinct(valColl, "value", true);
                        this._searchRequest = false;
                    }          
                }
                this.initiateFilter(valColl);
            }
            else {
                valColl = this._getCDlgFields();
                $.inArray(this.fName, this.cFilteredCols) == -1 && valColl[0] && this.cFilteredCols.push(this.fName);
            }
        },
        initiateFilter: function (valColl) {
            var firstVal = valColl[0], predicate;
            if (!ej.isNullOrUndefined(firstVal)) {
                isTake = firstVal["from"];
                predicate = firstVal["ejpredicate"] ? firstVal["ejpredicate"] : ej.Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchcase, !firstVal.accent);
                for (var j = 1, jlen = valColl.length; j < jlen; j++) {
                    predicate = valColl[j].ejpredicate != undefined ? predicate[valColl[j].predicate](valColl[j].ejpredicate) : predicate[valColl[j].predicate](valColl[j].field, valColl[j].operator, valColl[j].value, !valColl[j].matchcase, !valColl[j].accent);
                }
                arg = { action: "filtering", filterCollection: valColl, fieldName: this.fName, ejpredicate: predicate, tableID: this._$tableID};
                if (this._predicates[this._$key] == undefined)
                    this._predicates[this._$key] = {};
                this._predicates[this._$key][this.fName] = !isTake ? predicate : { from: firstVal["from"], take: firstVal["take"] };
                if (!this._openedFltr.hasClass("e-dlgcustom") && this._listsWrap.find(".e-selectall").ejCheckBox("model.checked") && (!this._searchCount || ((this._add && this._add.prop("checked")) && (this._preChkList.filter(":not(':checked')").length == 0 || this._checked.length == 0)) || (valColl.length == this._preChkList.length)) && $.inArray(this.fName, this._columnsFiltered) != -1)
                    arg = { action: "clearfiltering", filterDetails: { field: this.fName, operator: "", predicate: "or", value: "" }, fieldName: this.fName, tableID: this._$tableID }
                if ($.inArray(this.fName, this._columnsFiltered) == -1)
                    this._columnsFiltered.push(this.fName);                
                this._filterHandler(arg);
            }
            this.closeXFDialog();
        },        
		/*Util method to perform formatted group on the inputted json*/
        getDistinct: function (json, field, fullRecord, redundancy) {
		    var lookup = {}, len = json.length, result = [], current, value, fd;

		    while (len--) {
		        current = json[len], value = ej.getObject(field, current), fd = value;
            if (!ej.isNullOrUndefined(current)) {
		        if (this.enableNormalize)
		            fd = this._formatting(this._$format, value, this._locale);

		        current["ejvalue"] = fd;

		        if (redundancy || !(value in lookup))
		            result.push(fullRecord ? current : value);

		        lookup[value] = true;
		    }
         }

		    result = ej.group(ej.mergeSort(result, field), "ejvalue"); /* sort with field and group with ejvalue */

		    return result;
		},
        /*Util method to split string and build filterobject collection */
		iterateAndGetCollection: function (valuestring, defaults) {
		    var splts = valuestring.split(this._spliter), len = splts.length, result = [], value, type = this._ctrlInstance._$colType;
            if (type == "number" || type == "date" || type == "datetime"){
				var index = splts.indexOf("");
				if (index > -1) {
                  splts.splice(index, 1);
                }
			}
		    while (len--) {
		        value = this.processValue(splts[len]);		       

		        result.push($.extend(true, { value: value }, defaults));
		    }

		    return result;
		},
        /*Util method to perform type conversion*/
		processValue: function (val, type/* optional */) {		    
		     type = type || this.getType(); type = this._empties.indexOf(val) != -1 ? "empty" : type; val = val === this.guid ? this._blankValue + "" : val;
		    switch (type) {
		        case "empty":/*Handle blanks*/
		            val = val == "null" ? null : val == "undefined" ? undefined : "";
		            break;
		        case "date":
		        case "datetime":
		            val = new Date(val);
		            break;
		        case "number":
		            val = +val;
		            break;
		        case "boolean":		           
		            val = (!isNaN(val) && typeof (val) == "string") ? ej.parseInt(val) != 0 : val === "true" ? true : false;
		            break;
		    }		    		      
		    return val;
		},
		getType: function () {
		    return !ej.isNullOrUndefined(this._$foreignField) ? this._$foreignKeyType : this._$colType;
		},
		replacer: function (input, pattern, processor, params) {
		    if (typeof processor == "function")
		        processor = processor.call(this, params)
		   return input.replace(pattern, processor);
		},
        _virtualize: function (e) {
            var height = $("#" + this.id + this._$colType + "_CheckBoxList").height();
            var chks = this._chkList.not(".e-checkbox").filter(function () { if (this.offsetTop > e.scrollTop - this.offsetHeight && e.scrollTop + height+70 > this.offsetTop + this.offsetHeight) return this; });
            if (chks.length == 0) return;
            chks.filter(":checked").ejCheckBox({ checked: true }); chks.filter(":not(:checked)").ejCheckBox({ checked: false });
            chks.ejCheckBox({ change: ej.proxy(this._checkHandler, this) });
            var scrollObj = this._listsWrap.ejScroller('instance');            
            scrollObj.refresh();
        },
        /*Method to reset private properties*/
        resetFilterModel: function (destroy) {
            this._blank = undefined;
            this._addAtLast = false;
            this._isFiltered = false;
            this._searchCount = 0;
        },
        resetExcelFilter: function (template) {
            var _i, _type, _id = this.id,_len, _$id;
            this._predicates = [];          
            this.cFilteredCols = [];
            this.resetFilterModel();
            for (_i = 0, _len = this._posType.length; _i < _len; _i++) {
                _type = this._posType[_i], _$id = _id + _type;
                var cDlg = $("#" + _$id + "_CustomFDlg");               
                $("#" + _$id + "_CheckBoxList").ejWaitingPopup("destroy"); $("#" + _$id + "_excelDlg").remove();
                cDlg.find(".e-dropdownlist").ejDropDownList("destroy");
                cDlg.find(".e-button").ejButton("destroy");
                if (_type == "string" || _type == "boolean") cDlg.find(".e-autocomplete").ejAutocomplete("destroy");
                if (_type == "number") cDlg.find(".e-numerictextbox").ejNumericTextbox("destroy");
                if (_type == "date") cDlg.find(".e-datepicker").ejDatePicker("destroy");
                cDlg.ejDialog("destroy");
                $("#" + _$id + "_CustomFDlg").remove();
            }
        },
        _wireEvents: function () {
            this._ctrlInstance._on(this._dialogContainer, "focus click", ".e-searchbox", ej.proxy(this._searchBoxFocus, this));
            this._ctrlInstance._on(this._dialogContainer, "keyup", ".e-searchbox input", ej.proxy(this._search, this));
        }
    };

    ej.ExcelFilter.valueDelimiter = "@|@";
    ej.ExcelFilter.Locale = ej.ExcelFilter.Locale || {};

    ej.ExcelFilter.Locale["default"] = ej.ExcelFilter.Locale["en-US"] = {
        SortNoSmaller: "Sort Smallest to Largest",
        SortNoLarger: "Sort Largest to Smallest",
        SortTextAscending: "Sort A to Z",
        SortTextDescending: "Sort Z to A",
        SortDateOldest: "Sort by Oldest",
        SortDateNewest:"Sort by Newest",
		SortByColor: "Sort By Color",
        SortByCellColor: "Sort by Cell Color",
        SortByFontColor: "Sort by Font Color",
        FilterByColor: "Filter By Color",
		CustomSort: "Custom Sort",
        FilterByCellColor: "Filter by Cell Color",
        FilterByFontColor: "Filter by Font Color",
        ClearFilter: "Clear Filter",
        NumberFilter: "Number Filters",
		GuidFilter: "Guid Filters",
        TextFilter: "Text Filters",
        DateFilter: "Date Filters",
        DateTimeFilter: "Date Time Filters",
        SelectAll: "Select All",
        Blanks: "Blanks",
		Search:"Search",
        Showrowswhere:"Show rows where",
		NumericTextboxWaterMark:"Enter value",
        StringMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Starts With", value: "startswith" }, { text: "Ends With", value: "endswith" }, { text: "Contains", value: "contains" }, { text: "Custom Filter", value: "customfilter" }],
        NumberMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
        GuidMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Custom Filter", value: "customfilter" }],
		DateMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
		DatetimeMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
		Top10MenuOptions: [{ text: "Top", value: "top" }, { text: "Bottom", value: "bottom" }],
        title:"Custom Filter",
        PredicateAnd: "AND",
        PredicateOr: "OR",
        OK: "OK",
        MatchCase: "Match Case",
        Cancel: "Cancel",
        NoResult: "No Matches Found",
        CheckBoxStatusMsg: "Not all items showing",
        DatePickerWaterMark: "Select date",
        DateTimePickerWaterMark: "Select date time",
		True: "true",
        False: "false",
        AddToFilter: "Add current selection to filter"
    };

})(jQuery, Syncfusion);;